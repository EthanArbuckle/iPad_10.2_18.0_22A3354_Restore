_QWORD *sub_20EF286B8(uint64_t a1)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  std::chrono::steady_clock::time_point v3;
  _QWORD *v4;
  uint64_t v6[3];
  char v7;
  uint64_t v8;

  v8 = a1;
  v1 = atomic_load((unsigned __int8 *)&qword_254A6D990);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D990))
  {
    xmmword_254A6D968 = 0u;
    unk_254A6D978 = 0u;
    dword_254A6D988 = 1065353216;
    __cxa_atexit((void (*)(void *))sub_20EF2883C, &xmmword_254A6D968, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6D990);
  }
  v2 = atomic_load((unsigned __int8 *)&qword_254A6D998);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D998))
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254A51730, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6D998);
  }
  std::mutex::lock(&stru_254A51730);
  if (!sub_20EF28884(&xmmword_254A6D968, &v8))
  {
    v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v6[0] = v8;
    v6[1] = v3.__d_.__rep_;
    v6[2] = 0;
    v7 = 1;
    sub_20EF28998((float *)&xmmword_254A6D968, v6, (uint64_t)v6);
  }
  v4 = sub_20EF28884(&xmmword_254A6D968, &v8) + 3;
  std::mutex::unlock(&stru_254A51730);
  return v4;
}

void sub_20EF287F4(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_254A51730);
  _Unwind_Resume(a1);
}

void sub_20EF2880C(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_254A51730);
  _Unwind_Resume(a1);
}

void sub_20EF28824(_Unwind_Exception *a1)
{
  std::mutex::unlock(&stru_254A51730);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF2883C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *sub_20EF28884(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = HIDWORD(*a2);
  v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v4);
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = (_QWORD *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v13 = result[1];
        if (v13 == v6)
        {
          if (result[2] == v3)
            return result;
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v12 = result[1];
      if (v12 == v6)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v2)
          v12 %= *(_QWORD *)&v2;
        if (v12 != v8)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

char *sub_20EF28998(float *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char *v17;
  float v18;
  float v19;
  _QWORD *v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return (char *)v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return (char *)v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = (char *)operator new(0x30uLL);
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v9;
  *((_QWORD *)v17 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v17 + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v17 + 5) = *(_QWORD *)(a3 + 24);
  v18 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v19 = a1[8];
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *((_QWORD *)a1 + 1);
    }
    if (prime > v10)
    {
LABEL_37:
      if (prime >> 61)
        sub_20E877A38();
      v26 = operator new(8 * prime);
      v27 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v26;
      if (v27)
        operator delete(v27);
      v28 = 0;
      *((_QWORD *)a1 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
      while (prime != v28);
      v30 = (uint64_t *)(a1 + 4);
      v29 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (!v29)
        goto LABEL_69;
      v31 = v29[1];
      v32 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v33 = v31 & v32;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v30;
        for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
        {
          v35 = i[1] & v32;
          if (v35 == v33)
          {
            v29 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
          {
            *v29 = *i;
            v36 = 8 * v35;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v36);
            **(_QWORD **)(*(_QWORD *)a1 + v36) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v29;
            v29 = i;
            v33 = v35;
          }
        }
        goto LABEL_69;
      }
      if (v31 >= prime)
        v31 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v30;
      v40 = (_QWORD *)*v29;
      if (!*v29)
      {
LABEL_69:
        v10 = prime;
        v43 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_70;
        goto LABEL_85;
      }
      while (1)
      {
        v42 = v40[1];
        if (v42 >= prime)
          v42 %= prime;
        if (v42 == v31)
          goto LABEL_63;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v42))
        {
          *v29 = *v40;
          v41 = 8 * v42;
          *v40 = **(_QWORD **)(*(_QWORD *)a1 + v41);
          **(_QWORD **)(*(_QWORD *)a1 + v41) = v40;
          v40 = v29;
LABEL_63:
          v29 = v40;
          v40 = (_QWORD *)*v40;
          if (!v40)
            goto LABEL_69;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v29;
          v29 = v40;
          v40 = (_QWORD *)*v40;
          v31 = v42;
          if (!v40)
            goto LABEL_69;
        }
      }
    }
    if (prime < v10)
    {
      v37 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < v10)
      {
        if (!prime)
        {
          v44 = *(_QWORD **)a1;
          *(_QWORD *)a1 = 0;
          if (v44)
            operator delete(v44);
          v10 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v43 = -1;
          goto LABEL_85;
        }
        goto LABEL_37;
      }
      v10 = *((_QWORD *)a1 + 1);
    }
    v43 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_70:
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD **)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD **)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
      goto LABEL_86;
    }
LABEL_85:
    v3 = v43 & v9;
    v20 = *(_QWORD **)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v43 & v9));
    if (v21)
      goto LABEL_26;
    goto LABEL_86;
  }
  v20 = *(_QWORD **)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
LABEL_26:
    *(_QWORD *)v17 = *v21;
LABEL_92:
    *v21 = v17;
    goto LABEL_93;
  }
LABEL_86:
  *(_QWORD *)v17 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v17;
  v20[v3] = a1 + 4;
  if (*(_QWORD *)v17)
  {
    v45 = *(_QWORD *)(*(_QWORD *)v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v45 >= v10)
        v45 %= v10;
    }
    else
    {
      v45 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v45);
    goto LABEL_92;
  }
LABEL_93:
  ++*((_QWORD *)a1 + 3);
  return v17;
}

void sub_20EF28E98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_20EF28EAC(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _WORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _WORD *v21;
  unint64_t v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _WORD *v31;
  int v32;
  uint64_t v33;
  void *memptr[3];
  _QWORD v36[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 2 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr[0] = 0;
    v20 = malloc_type_posix_memalign(memptr, v19, 2 * v14, 0x1F88E90uLL);
    if (v20)
      sub_210207B94(v20, a1[2], v15);
    v21 = memptr[0];
    a1[1] = (unint64_t)memptr[0];
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
    if (v21 && a6)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = (void *)v22;
      memptr[0] = v21;
      memptr[1] = v24;
      memptr[2] = (void *)(v11 & 0x7FFFFFFF7FFFFFFFLL);
      if (HIDWORD(v24) * ((v11 >> 31) >> 1) == -1
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v36[0] = memptr;
      v36[1] = a5;
      v25 = v11 & 0x7FFFFFFF;
      if (v25 == 1)
      {
        sub_20EF2910C((uint64_t)v36);
        return a1;
      }
      if ((_DWORD)v24 && HIDWORD(v24))
      {
        v26 = (_DWORD)v24 - 1;
        v27 = HIDWORD(v24) - 1;
        if (HIDWORD(v24) != 1)
        {
          v28 = HIDWORD(v11) & 0x7FFFFFFF;
          if ((_DWORD)v24 == 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v28;
              --v27;
            }
            while (v27);
LABEL_39:
            *v21 = *a5;
            return a1;
          }
          v29 = 0;
          v30 = 2 * v28;
          do
          {
            v31 = v21;
            v32 = (_DWORD)v24 - 1;
            do
            {
              *v31 = *a5;
              v31 += v25;
              --v32;
            }
            while (v32);
            *v31 = *a5;
            v21 = (_WORD *)((char *)v21 + v30);
            ++v29;
          }
          while (v29 != v27);
        }
        if ((_DWORD)v24 != 1)
        {
          v33 = 2 * v25;
          do
          {
            *v21 = *a5;
            v21 = (_WORD *)((char *)v21 + v33);
            --v26;
          }
          while (v26);
        }
        goto LABEL_39;
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (2 * v11) & 0xFFFFFFFEFFFFFFFELL;
  }
  return a1;
}

void sub_20EF290F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF2910C(uint64_t result)
{
  uint64_t v1;
  const __int16 *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int16 *v14;
  unint64_t v15;
  int16x8_t v16;
  int16x8_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  _DWORD v22[5];
  _QWORD v23[2];

  v1 = *(_QWORD *)result;
  v2 = *(const __int16 **)(result + 8);
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  v5 = *(_DWORD *)(*(_QWORD *)result + 16);
  v4 = *(_DWORD *)(*(_QWORD *)result + 20);
  if (v4 == v5 * (_DWORD)v3)
  {
    v6 = (*(_DWORD *)(v1 + 12) * v3);
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v12 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v12 < 0x10)
      goto LABEL_19;
    v13 = 2 * v6;
    if (!(_DWORD)v6)
      v13 = 2;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      v14 = (__int16 *)v7;
LABEL_20:
      v15 = v6 + 1;
      do
      {
        *v14++ = *v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    v14 = (__int16 *)(v7 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF0;
    v16 = vld1q_dup_s16(v2);
    v17 = (int16x8_t *)(v7 + 16);
    v18 = v12 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17[-1] = v16;
      *v17 = v16;
      v17 += 2;
      v18 -= 16;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_20;
  }
  else
  {
    v20 = 0;
    v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    v21[2] = v2;
    v9 = *(_DWORD *)(v1 + 12);
    if ((_DWORD)v3)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      v22[2] = v5;
      v22[3] = v9 - 1;
      v22[4] = v4;
      v11 = *(_QWORD *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_20EF2929C((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

uint64_t sub_20EF2929C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const __int16 *v10;
  uint64_t v11;
  __int16 *v12;
  BOOL v13;
  int16x8_t v14;
  int16x8_t *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t *v19;
  const __int16 *v20;
  uint64_t v21;
  BOOL v22;
  __int16 *v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t *v26;
  unint64_t v27;
  unint64_t v28;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const __int16 **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          if ((_DWORD)result)
            goto LABEL_39;
        }
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          v13 = v4 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v4 + 2 * v11;
          v12 = (__int16 *)v4;
          if (v13)
          {
            v12 = (__int16 *)(v4 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            v14 = vld1q_dup_s16(v10);
            v15 = (int16x8_t *)(v4 + 16);
            v16 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = v14;
              *v15 = v14;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            v17 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v17)
              goto LABEL_3;
          }
        }
        else
        {
          v12 = (__int16 *)v4;
        }
        v18 = v11 + 1;
        do
        {
          *v12++ = *v10;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v19 = *(uint64_t **)(a3 + 8);
  v20 = *(const __int16 **)(a3 + 16);
  v21 = *v19;
  if (!v4)
  {
    if (v21)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
LABEL_39:
        abort();
    }
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v4 < (unint64_t)(v20 + 1) ? (v22 = (unint64_t)v20 >= v4 + 2 * v21) : (v22 = 1), !v22))
    {
      v23 = (__int16 *)v4;
      v24 = v21;
LABEL_36:
      v28 = v24 + 1;
      do
      {
        *v23++ = *v20;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v23 = (__int16 *)(v4 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    v24 = v21 & 0xF;
    v25 = vld1q_dup_s16(v20);
    v26 = (int16x8_t *)(v4 + 16);
    v27 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0))
      goto LABEL_36;
  }
  return result;
}

_QWORD *sub_20EF294AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[7];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = a1[3];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = a1[1];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return a1;
}

void sub_20EF29520(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EF29530(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1308;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EF29560(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 64);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    operator delete(v4);
}

uint64_t sub_20EF295B0(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_20E8D2B3C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    sub_20EF296F0(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_20EF296C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20EF296DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

char *sub_20EF296F0(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  char *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v6 = *a2;
  v7 = a2[1];
  v8 = (v7 + ((unint64_t)(v6 + 2654435769) >> 2) + ((v6 + 2654435769) << 6) + 2654435769u) ^ (v6 + 2654435769);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = (v7 + ((unint64_t)(v6 + 2654435769) >> 2) + ((v6 + 2654435769) << 6) + 2654435769u) ^ (v6 + 2654435769);
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 4) == (_DWORD)v6 && *((_DWORD *)v12 + 5) == (_DWORD)v7)
                return (char *)v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v12 = (uint64_t *)*v12;
            if (!v12)
              goto LABEL_31;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v6 && *((_DWORD *)v12 + 5) == (_DWORD)v7)
              return (char *)v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  v18 = (char *)operator new(0x28uLL);
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v8;
  *((_QWORD *)v18 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v18 + 24) = *(_OWORD *)(a3 + 8);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v22)
    {
LABEL_34:
      *(_QWORD *)v18 = *v22;
LABEL_69:
      *v22 = v18;
      goto LABEL_70;
    }
  }
  else
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_45;
    if (prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v9)
LABEL_45:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v30 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v22)
          goto LABEL_34;
      }
      else
      {
        v3 = v8;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v22)
          goto LABEL_34;
      }
    }
    else
    {
      v3 = v30 & v8;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v8));
      if (v22)
        goto LABEL_34;
    }
  }
  *(_QWORD *)v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v18)
  {
    v31 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v31 >= v9)
        v31 %= v9;
    }
    else
    {
      v31 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_20EF29A28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EF29A3C(uint64_t a1, int a2, unint64_t a3, float32x2_t *a4, _OWORD *a5, char a6, int a7, double a8)
{
  float32x2_t *v8;
  float *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  float v20;
  float v21;
  float *v22;
  float v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  char *v34;
  char *v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  BOOL v39;
  unsigned int v40;
  float32x2_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char **v72;
  uint64_t v73;
  char v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  void *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  float v104;
  char *v105;
  uint64_t v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  int v112;
  _OWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  char *v120;
  uint64_t v121;
  __int16 v122;
  const void *v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  uint64_t v136;
  char *v137;
  size_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void **v157;
  void *v158;
  double v159;
  double v160;
  __n128 v161;
  char v162;
  void *v163;
  uint64_t v164;
  __int128 v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  char *v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  int64_t v186;
  char *v187;
  char *v188;
  float *v189;
  float v190;
  uint64_t v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  char *v200;
  char *v201;
  uint64_t v202;
  void *v203;
  char *v204;
  float v205;
  BOOL v206;
  float v207;
  float v208;
  unint64_t v209;
  char *v210;
  void *v211;
  void *v212;
  char *v213;
  char *v214;
  char *v215;
  unint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  unint64_t v219;
  char *v220;
  BOOL v221;
  int64_t v222;
  unint64_t v223;
  char *v224;
  void *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  int64_t v237;
  unint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  unint64_t v244;
  char *v245;
  unint64_t v246;
  int64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  __int128 *v254;
  char *v255;
  uint64_t v256;
  __int128 v257;
  uint64_t v258;
  unint64_t v259;
  _BYTE *v260;
  unint64_t v261;
  char *v262;
  unint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  __int128 *v272;
  _OWORD *v273;
  uint64_t v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  unint64_t v281;
  char *v282;
  unint64_t v283;
  char *v284;
  char *v285;
  unint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  __int128 *v292;
  char *v293;
  uint64_t v294;
  __int128 v295;
  uint64_t v296;
  char *v297;
  char *v298;
  uint64_t v299;
  void *v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  char *v305;
  unint64_t v306;
  _BYTE *v307;
  unint64_t v308;
  char *v309;
  int64_t v310;
  unint64_t v311;
  char *v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  __int128 *v318;
  _OWORD *v319;
  uint64_t v320;
  __int128 v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  __int128 *v325;
  _OWORD *v326;
  uint64_t v327;
  __int128 v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  void *v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t **v344;
  uint64_t **v345;
  void **v346;
  unint64_t v347;
  void *v348;
  void *v349;
  _QWORD *v350;
  _QWORD *v351;
  void *v352;
  uint64_t *v353;
  uint64_t *v354;
  uint64_t v355;
  char *v356;
  float v357;
  char *v358;
  uint64_t v359;
  float v360;
  float v361;
  float v362;
  float v363;
  int v364;
  _OWORD *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  char *v375;
  uint64_t v376;
  float *v377;
  uint64_t v378;
  __int128 v379;
  unint64_t v380;
  char *__srca;
  char *v383;
  char *v384;
  char *v385;
  uint64_t *v386;
  uint64_t *v387;
  void *v388;
  _QWORD *v389;
  _QWORD *v390;
  void *__p;
  __int128 v392;
  _BYTE v393[24];
  __int128 v394;
  __int128 v395;
  __int128 v396;
  void *v397[2];
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  unsigned __int8 v402;
  _QWORD v403[3];
  __int128 v404;
  char *v405;
  char *v406;
  __int128 v407;
  __int128 v408;
  void *v409;
  char *v410;
  __int128 v411;
  uint64_t v412;

  v8 = a4;
  v412 = *MEMORY[0x24BDAC8D0];
  v10 = (float *)(a1 + 16);
  if (a3 == 3)
  {
    *(float *)&a8 = *v10;
    if (sub_20EEE8F98(3uLL, a4, *(int32x2_t *)&a8))
    {
      sub_20EF2D554((uint64_t *)&v408, (uint64_t)v10, v8, *(int32x2_t *)&v11);
      v388 = 0;
      v389 = 0;
      v390 = 0;
      *(_QWORD *)&v396 = &v388;
      BYTE8(v396) = 0;
      v16 = operator new(0x10uLL);
      v388 = v16;
      v389 = v16;
      v17 = v16 + 2;
      v390 = v16 + 2;
      v18 = *((_QWORD *)&v408 + 1);
      *v16 = v408;
      v16[1] = v18;
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v389 = v17;
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
      }
      else
      {
        v389 = v16 + 2;
      }
      goto LABEL_138;
    }
    LODWORD(v13) = v8->i32[0];
    v37 = v8->f32[1];
    LODWORD(v14) = v8[1].i32[0];
    LODWORD(v12) = v8[1].i32[1];
    *(float *)&v15 = vabds_f32((float)(v8->f32[0] - v8[2].f32[0]) * (float)(*(float *)&v12 - v37), (float)(v8->f32[0] - *(float *)&v14) * (float)(v8[2].f32[1] - v37))* 0.5;
    if (*(float *)&v15 == 0.0)
      goto LABEL_20;
    if (*(float *)&v15 < 0.0)
      *(float *)&v15 = 0.0 - *(float *)&v15;
    if (*(float *)&v15 <= 0.000001)
    {
LABEL_20:
      *(float *)&v15 = *v10;
      v40 = vcvtms_s32_f32(*(float *)&v13 / *v10);
      *(float *)&v13 = *(float *)&v14 / *v10;
      if (v40 == vcvtms_s32_f32(*(float *)&v13)
        && vcvtms_s32_f32(v37 / *(float *)&v15) == vcvtms_s32_f32(*(float *)&v12 / *(float *)&v15))
      {
        v41 = v8[2];
        *(float32x2_t *)&v396 = *v8;
        *((float32x2_t *)&v396 + 1) = v41;
        *(float *)&v11 = *(float *)&v12 / *(float *)&v15;
        sub_20EF321C8((uint64_t)&v388, (uint64_t)v10, (float32x2_t *)&v396, v11, v12, v13, v14, v15);
      }
      else
      {
        v396 = *(_OWORD *)v8->f32;
        sub_20EF321C8((uint64_t)&v388, (uint64_t)v10, (float32x2_t *)&v396, *(double *)&v396, v12, v13, v14, v15);
      }
    }
    else
    {
      v38 = *(_QWORD *)(a1 + 32);
      if (v38)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v38 + 24))(*(_QWORD *)(a1 + 32));
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38) == 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
      }
      else
      {
        v39 = 1;
      }
      v396 = *(_OWORD *)v8->f32;
      v397[0] = (void *)v8[2];
      sub_20EF2E248((uint64_t)v10, 3, (uint64_t *)&v396, *(double *)&v396, v12, v13, v14, v15);
      v389 = 0;
      v390 = 0;
      v388 = 0;
      __p = 0;
      v392 = 0uLL;
      v45 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)&v404 = *(_QWORD *)(a1 + 24);
      *((_QWORD *)&v404 + 1) = v45;
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
      LOWORD(v405) = !v39;
      v396 = 0u;
      *(_OWORD *)v397 = 0u;
      v398 = 0u;
      sub_20EF307DC((uint64_t)&v396, (uint64_t)&v404);
      v408 = v396;
      v409 = v397[0];
      v410 = (char *)v397[1];
      v396 = 0u;
      *(_OWORD *)v397 = 0u;
      v411 = v398;
      v398 = 0uLL;
      sub_20EF30F68((uint64_t)&v396);
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
      if (*((_QWORD *)&v411 + 1))
      {
        v376 = (uint64_t)v10;
        do
        {
          v46 = v411;
          v47 = *(_QWORD *)(*((_QWORD *)&v408 + 1) + 8 * ((unint64_t)v411 / 0xAA));
          v48 = (unint64_t)v411 % 0xAA;
          v49 = (uint64_t *)(v47 + 24 * ((unint64_t)v411 % 0xAA));
          v51 = *v49;
          v50 = v49[1];
          if (v50)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v49[1]);
            v46 = v411;
            v52 = (unint64_t)v411 % 0xAA;
            v53 = *(_QWORD *)(*((_QWORD *)&v408 + 1) + 8 * ((unint64_t)v411 / 0xAA));
          }
          else
          {
            v53 = *(_QWORD *)(*((_QWORD *)&v408 + 1) + 8 * ((unint64_t)v411 / 0xAA));
            v52 = (unint64_t)v411 % 0xAA;
          }
          v54 = *(unsigned __int8 *)(v47 + 24 * v48 + 16);
          v55 = *(_QWORD *)(v53 + 24 * v52 + 8);
          if (v55)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55);
            v46 = v411;
          }
          *(_QWORD *)&v411 = v46 + 1;
          --*((_QWORD *)&v411 + 1);
          if ((unint64_t)(v46 + 1) >= 0x154)
          {
            operator delete(**((void ***)&v408 + 1));
            *((_QWORD *)&v408 + 1) += 8;
            *(_QWORD *)&v411 = v411 - 170;
          }
          v56 = (_QWORD *)(**(_QWORD **)(v51 + 8) + 232 * *(_QWORD *)v51);
          v57 = v56[3];
          if (v57 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 48))(v57)
            || (v58 = v56[5]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 48))(v58)
            || (v59 = v56[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 48))(v59)
            || (v60 = v56[9]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 48))(v60)
            || !v54
            && (v61 = **(_QWORD **)(v51 + 8) + 232 * *(_QWORD *)v51,
                (float)(*(float *)(v61 + 88) - *(float *)(v61 + 80)) >= (float)(*v10 * 1.25)))
          {
            v64 = **(_QWORD **)(v51 + 8) + 232 * *(_QWORD *)v51;
            v66 = *(_QWORD *)(v64 + 16);
            v65 = v64 + 16;
            *(_QWORD *)&v396 = v66;
            v67 = *(_QWORD *)(v65 + 8);
            *((_QWORD *)&v396 + 1) = v67;
            if (v67)
              (*(void (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67);
            v397[0] = *(void **)(v65 + 16);
            v68 = *(void **)(v65 + 24);
            v397[1] = v68;
            if (v68)
              (*(void (**)(void *))(*(_QWORD *)v68 + 24))(v68);
            *(_QWORD *)&v398 = *(_QWORD *)(v65 + 32);
            v69 = *(_QWORD *)(v65 + 40);
            *((_QWORD *)&v398 + 1) = v69;
            if (v69)
              (*(void (**)(uint64_t))(*(_QWORD *)v69 + 24))(v69);
            *(_QWORD *)&v399 = *(_QWORD *)(v65 + 48);
            v70 = *(_QWORD *)(v65 + 56);
            *((_QWORD *)&v399 + 1) = v70;
            if (v70)
              (*(void (**)(uint64_t))(*(_QWORD *)v70 + 24))(v70);
            v71 = 0;
            v72 = (char **)&v396 + 1;
            do
            {
              if (*v72 && (*(uint64_t (**)(char *))(*(_QWORD *)*v72 + 48))(*v72))
              {
                v404 = *(_OWORD *)(**((_QWORD **)*(v72 - 1) + 1) + 232 * *(_QWORD *)*(v72 - 1) + 80);
                v74 = 1;
              }
              else
              {
                sub_20EEE8E24((float32x2_t *)(**(_QWORD **)(v51 + 8) + 232 * *(_QWORD *)v51 + 80), v71, (float32x2_t *)&v404);
                v74 = 0;
              }
              if (sub_20EF32E8C(v8, (float32x2_t *)&v404))
              {
                if ((v74 & 1) == 0)
                {
                  *(_QWORD *)&v395 = v51;
                  *((_QWORD *)&v395 + 1) = v50;
                  if (v50)
                    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
                  sub_20EF2F098((uint64_t)&v383, v376, (uint64_t **)&v395, &v404, v71);
                  v76 = v383;
                  v75 = v384;
                  if (v384)
                    (*(void (**)(char *))(*(_QWORD *)v384 + 24))(v384);
                  v77 = *v72;
                  *(v72 - 1) = v76;
                  *v72 = v75;
                  if (v77)
                    (*(void (**)(char *))(*(_QWORD *)v77 + 40))(v77);
                  if (v75)
                    (*(void (**)(char *))(*(_QWORD *)v75 + 40))(v75);
                  if (v50)
                    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
                }
                v79 = (uint64_t)*(v72 - 1);
                v78 = *v72;
                if (*v72)
                  (*(void (**)(char *))(*(_QWORD *)v78 + 24))(*v72);
                v80 = *((_QWORD *)&v408 + 1);
                if (v409 == *((void **)&v408 + 1))
                  v81 = 0;
                else
                  v81 = 170 * (((uint64_t)v409 - *((_QWORD *)&v408 + 1)) >> 3) - 1;
                v82 = *((_QWORD *)&v411 + 1) + v411;
                if (v81 == *((_QWORD *)&v411 + 1) + (_QWORD)v411)
                {
                  sub_20EF3139C((uint64_t)&v408);
                  v80 = *((_QWORD *)&v408 + 1);
                  v82 = *((_QWORD *)&v411 + 1) + v411;
                }
                v83 = *(_QWORD *)(v80 + 8 * (v82 / 0xAA));
                v84 = v82 % 0xAA;
                v85 = (_QWORD *)(v83 + 24 * (v82 % 0xAA));
                *v85 = v79;
                v85[1] = v78;
                if (v78)
                {
                  (*(void (**)(char *))(*(_QWORD *)v78 + 24))(v78);
                  v8 = a4;
                  v86 = v83 + 24 * v84;
                  *(_BYTE *)(v86 + 16) = v74;
                  *(_BYTE *)(v86 + 17) = 0;
                  ++*((_QWORD *)&v411 + 1);
                  (*(void (**)(char *))(*(_QWORD *)v78 + 40))(v78);
                }
                else
                {
                  v73 = v83 + 24 * v84;
                  *(_BYTE *)(v73 + 16) = v74;
                  *(_BYTE *)(v73 + 17) = 0;
                  ++*((_QWORD *)&v411 + 1);
                  v8 = a4;
                }
              }
              ++v71;
              v72 += 2;
            }
            while (v71 != 4);
            v87 = (_QWORD *)(**(_QWORD **)(v51 + 8) + 232 * *(_QWORD *)v51);
            v88 = v87[3];
            v10 = (float *)v376;
            if (!v88 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 48))(v88))
            {
              v89 = v87[5];
              if (!v89 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 48))(v89))
              {
                v90 = v87[7];
                if (!v90 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 48))(v90))
                {
                  v91 = v87[9];
                  if (!v91 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 48))(v91))
                  {
                    v92 = v392;
                    if ((unint64_t)v392 >= *((_QWORD *)&v392 + 1))
                    {
                      v93 = sub_20EF310FC((char **)&__p, v51, v50);
                    }
                    else
                    {
                      *(_QWORD *)v392 = v51;
                      *(_QWORD *)(v92 + 8) = v50;
                      if (v50)
                        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
                      v93 = (char *)(v92 + 16);
                    }
                    *(_QWORD *)&v392 = v93;
                  }
                }
              }
            }
            if (*((_QWORD *)&v399 + 1))
              (*(void (**)(_QWORD))(**((_QWORD **)&v399 + 1) + 40))(*((_QWORD *)&v399 + 1));
            if (*((_QWORD *)&v398 + 1))
              (*(void (**)(_QWORD))(**((_QWORD **)&v398 + 1) + 40))(*((_QWORD *)&v398 + 1));
            if (v397[1])
              (*(void (**)(void *))(*(_QWORD *)v397[1] + 40))(v397[1]);
            if (*((_QWORD *)&v396 + 1))
              (*(void (**)(_QWORD))(**((_QWORD **)&v396 + 1) + 40))(*((_QWORD *)&v396 + 1));
            if (!v50)
              continue;
          }
          else
          {
            v62 = v389;
            if (v389 >= v390)
            {
              v63 = sub_20EF310FC((char **)&v388, v51, v50);
            }
            else
            {
              *v389 = v51;
              v62[1] = v50;
              if (v50)
                (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
              v63 = (char *)(v62 + 2);
            }
            v389 = v63;
            if (!v50)
              continue;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
        }
        while (*((_QWORD *)&v411 + 1));
      }
      v94 = (unint64_t *)__p;
      v95 = (unint64_t *)v392;
      while (v94 != v95)
      {
        v97 = *v94;
        v96 = v94[1];
        if (v96)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v96 + 24))(v94[1]);
          *(_QWORD *)&v396 = v97;
          *((_QWORD *)&v396 + 1) = v96;
          (*(void (**)(unint64_t))(*(_QWORD *)v96 + 24))(v96);
        }
        else
        {
          v396 = v97;
        }
        sub_20EF2D104((uint64_t)v10, (uint64_t **)&v396);
        if (v96)
        {
          (*(void (**)(unint64_t))(*(_QWORD *)v96 + 40))(v96);
          (*(void (**)(unint64_t))(*(_QWORD *)v96 + 40))(v96);
        }
        v94 += 2;
      }
      sub_20EF30F68((uint64_t)&v408);
      v98 = (char *)__p;
      if (__p)
      {
        v99 = (char *)v392;
        v100 = __p;
        if ((void *)v392 != __p)
        {
          do
          {
            v101 = *((_QWORD *)v99 - 1);
            if (v101)
              (*(void (**)(uint64_t))(*(_QWORD *)v101 + 40))(v101);
            v99 -= 16;
          }
          while (v99 != v98);
          v100 = __p;
        }
        *(_QWORD *)&v392 = v98;
        operator delete(v100);
      }
    }
LABEL_138:
    v103 = (char *)v388;
    v102 = (char *)v389;
    if (v388 == v389)
    {
      if (!v388)
        goto LABEL_501;
    }
    else
    {
      v104 = *v10 * *v10;
      v105 = (char *)v388;
      do
      {
        v106 = **(_QWORD **)(*(_QWORD *)v105 + 8) + 232 * **(_QWORD **)v105;
        if (sub_20EF32E8C(v8, (float32x2_t *)(v106 + 80)))
          v107 = 1.0;
        else
          v107 = 0.0;
        v108 = v107
             * (float)((float)((float)(*(float *)(v106 + 88) - *(float *)(v106 + 80))
                             * (float)(*(float *)(v106 + 92) - *(float *)(v106 + 84)))
                     / v104);
        if (v108 >= 0.1)
        {
          v109 = v108 * (float)a7;
          v110 = fmaxf(fabsf(v109), 1.0);
          v111 = v109 >= 0.0 ? v110 : -v110;
          v112 = llroundf(v111);
          if (v112)
          {
            v113 = (_OWORD *)(v106 + 96);
            v114 = (v106 + 96) & 0xF8;
            if (!*(_BYTE *)(v106 + 216))
              v114 = 0;
            sub_20EF2CC78((uint64_t)&v396, a2, v114 | (v106 + 96) & 0xFFFFFFFFFFFFFF00, *(_BYTE *)(v106 + 216), v112, a5, a6);
            if (*(_BYTE *)(v106 + 216))
            {
              if (*(unsigned __int8 *)(v106 + 192) == v402)
              {
                if (*(_BYTE *)(v106 + 192))
                {
                  *(_OWORD *)(v106 + 128) = v398;
                  *(_OWORD *)(v106 + 144) = v399;
                  *(_OWORD *)(v106 + 160) = v400;
                  *(_OWORD *)(v106 + 176) = v401;
                  *v113 = v396;
                  *(_OWORD *)(v106 + 112) = *(_OWORD *)v397;
                }
              }
              else if (*(_BYTE *)(v106 + 192))
              {
                *(_BYTE *)(v106 + 192) = 0;
              }
              else
              {
                *(_OWORD *)(v106 + 128) = v398;
                *(_OWORD *)(v106 + 144) = v399;
                *(_OWORD *)(v106 + 160) = v400;
                *(_OWORD *)(v106 + 176) = v401;
                *v113 = v396;
                *(_OWORD *)(v106 + 112) = *(_OWORD *)v397;
                *(_BYTE *)(v106 + 192) = 1;
              }
              *(_QWORD *)(v106 + 200) = v403[0];
              *(_QWORD *)(v106 + 205) = *(_QWORD *)((char *)v403 + 5);
            }
            else
            {
              *(_BYTE *)(v106 + 96) = 0;
              *(_BYTE *)(v106 + 192) = 0;
              if (v402)
              {
                *(_OWORD *)(v106 + 128) = v398;
                *(_OWORD *)(v106 + 144) = v399;
                *(_OWORD *)(v106 + 160) = v400;
                *(_OWORD *)(v106 + 176) = v401;
                *v113 = v396;
                *(_OWORD *)(v106 + 112) = *(_OWORD *)v397;
                *(_BYTE *)(v106 + 192) = 1;
              }
              *(_QWORD *)(v106 + 200) = v403[0];
              *(_QWORD *)(v106 + 205) = *(_QWORD *)((char *)v403 + 5);
              *(_BYTE *)(v106 + 216) = 1;
            }
            *(_BYTE *)(v106 + 212) = 0;
            v8 = a4;
          }
        }
        if (!*(_BYTE *)(v106 + 216))
        {
          *(_QWORD *)&v408 = *(_QWORD *)v105;
          v115 = *((_QWORD *)v105 + 1);
          *((_QWORD *)&v408 + 1) = v115;
          if (v115)
            (*(void (**)(uint64_t))(*(_QWORD *)v115 + 24))(v115);
          sub_20EF2D104((uint64_t)v10, (uint64_t **)&v408);
          if (v115)
            (*(void (**)(uint64_t))(*(_QWORD *)v115 + 40))(v115);
        }
        v105 += 16;
      }
      while (v105 != v102);
      if (!v103)
        goto LABEL_501;
      do
      {
        v116 = *((_QWORD *)v102 - 1);
        if (v116)
          (*(void (**)(uint64_t))(*(_QWORD *)v116 + 40))(v116);
        v102 -= 16;
      }
      while (v102 != v103);
    }
    goto LABEL_500;
  }
  if (a3)
  {
    *(float *)&a8 = *v10;
    v20 = (float)(*(float *)&a8 * *(float *)&a8) * 0.1;
    v21 = 0.0;
    if (a3 >= 3)
    {
      v22 = (float *)&a4[1] + 1;
      v23 = 0.0;
      v24 = a3 - 1;
      v25 = a4->f32[1];
      v26 = a4->f32[0];
      do
      {
        v27 = *v22;
        v28 = v23 - (float)(v26 * *v22);
        v26 = *(v22 - 1);
        v23 = v28 + (float)(v25 * v26);
        v22 += 2;
        v25 = v27;
        --v24;
      }
      while (v24);
      v21 = (float)((float)(v23 - (float)(a4->f32[1] * a4[a3 - 1].f32[0])) + (float)(a4->f32[0] * a4[a3 - 1].f32[1]))
          * 0.5;
    }
    if (fabsf(v21) >= v20)
    {
      if (sub_20EEE8F98(a3, a4, *(int32x2_t *)&a8))
      {
        sub_20EF2D554((uint64_t *)&v408, (uint64_t)v10, v8, *(int32x2_t *)&v29);
        v383 = 0;
        v384 = 0;
        v385 = 0;
        *(_QWORD *)&v396 = &v383;
        BYTE8(v396) = 0;
        v34 = (char *)operator new(0x10uLL);
        v383 = v34;
        v384 = v34;
        v35 = v34 + 16;
        v385 = v34 + 16;
        v36 = *((_QWORD *)&v408 + 1);
        *(_QWORD *)v34 = v408;
        *((_QWORD *)v34 + 1) = v36;
        if (v36)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
          v384 = v35;
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
        }
        else
        {
          v384 = v34 + 16;
        }
        goto LABEL_467;
      }
      if (a3 == 2)
      {
        v396 = *(_OWORD *)v8->f32;
        sub_20EF321C8((uint64_t)&v383, (uint64_t)v10, (float32x2_t *)&v396, *(double *)&v396, v30, v31, v32, v33);
        goto LABEL_467;
      }
      v42 = *(_QWORD *)(a1 + 32);
      v43 = a1;
      if (v42)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v42 + 24))(*(_QWORD *)(a1 + 32));
        v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42) == 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
      }
      else
      {
        v44 = 1;
      }
      sub_20EF2E248((uint64_t)v10, a3, (uint64_t *)v8, v29, v30, v31, v32, v33);
      v383 = 0;
      v384 = 0;
      v385 = 0;
      v388 = 0;
      v389 = 0;
      v390 = 0;
      v117 = *(_QWORD *)(v43 + 32);
      *(_QWORD *)&v396 = *(_QWORD *)(v43 + 24);
      *((_QWORD *)&v396 + 1) = v117;
      if (v117)
        (*(void (**)(uint64_t))(*(_QWORD *)v117 + 24))(v117);
      LOWORD(v397[0]) = !v44;
      v398 = 0uLL;
      v397[1] = 0;
      if (((8 * a3) & 0x8000000000000000) != 0)
        sub_20E969238();
      v397[1] = operator new(8 * a3);
      *((_QWORD *)&v398 + 1) = (char *)v397[1] + 8 * ((uint64_t)(8 * a3) >> 3);
      memcpy(v397[1], v8, 8 * a3);
      *(_QWORD *)&v398 = (char *)v397[1] + 8 * a3;
      v118 = (char *)operator new(8uLL);
      v377 = v10;
      v119 = operator new(0xFF0uLL);
      __srca = v118;
      *(_QWORD *)v118 = v119;
      v120 = v118 + 8;
      v121 = *((_QWORD *)&v396 + 1);
      *v119 = v396;
      v119[1] = v121;
      if (v121)
        (*(void (**)(uint64_t))(*(_QWORD *)v121 + 24))(v121);
      v122 = (__int16)v397[0];
      v119[3] = 0;
      *((_WORD *)v119 + 8) = v122;
      v119[4] = 0;
      v119[5] = 0;
      v123 = v397[1];
      v124 = v398 - (unint64_t)v397[1];
      if ((void *)v398 != v397[1])
      {
        if (v124 < 0)
          sub_20E969238();
        v125 = (char *)operator new(v398 - (unint64_t)v397[1]);
        v119[3] = v125;
        v119[4] = v125;
        v119[5] = &v125[8 * (v124 >> 3)];
        memcpy(v125, v123, v124 & 0xFFFFFFFFFFFFFFF8);
        v119[4] = &v125[v124 & 0xFFFFFFFFFFFFFFF8];
      }
      *(_QWORD *)&v404 = __srca;
      *((_QWORD *)&v404 + 1) = __srca;
      v405 = v120;
      v406 = v120;
      v407 = xmmword_2102E3FA0;
      if (v397[1])
      {
        *(void **)&v398 = v397[1];
        operator delete(v397[1]);
      }
      v375 = v120;
      if (*((_QWORD *)&v396 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v396 + 1) + 40))(*((_QWORD *)&v396 + 1));
      v126 = 0;
      v127 = 1;
      v128 = v375;
LABEL_190:
      v129 = *(_QWORD *)&__srca[8 * (v126 / 0x55)];
      v130 = (uint64_t *)(v129 + 48 * (v126 % 0x55));
      v131 = *v130;
      *(_QWORD *)&v408 = *v130;
      v132 = v130[1];
      *((_QWORD *)&v408 + 1) = v132;
      if (v132)
        (*(void (**)(uint64_t))(*(_QWORD *)v132 + 24))(v132);
      v133 = v129 + 48 * (v126 % 0x55);
      LOWORD(v409) = *(_WORD *)(v133 + 16);
      v411 = 0uLL;
      v410 = 0;
      v135 = *(_BYTE **)(v133 + 24);
      v134 = *(_BYTE **)(v133 + 32);
      v136 = v134 - v135;
      if (v134 != v135)
      {
        if (v136 < 0)
          sub_20E969238();
        v137 = (char *)operator new(v134 - v135);
        v410 = v137;
        *((_QWORD *)&v411 + 1) = &v137[8 * (v136 >> 3)];
        v138 = v136 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v137, v135, v138);
        *(_QWORD *)&v411 = &v137[v138];
      }
      v139 = (_QWORD *)(**(_QWORD **)(v131 + 8) + 232 * *(_QWORD *)v131);
      v140 = v139[3];
      if (!v140 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v140 + 48))(v140))
      {
        v141 = v139[5];
        if (!v141 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v141 + 48))(v141))
        {
          v142 = v139[7];
          if (!v142 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 48))(v142))
          {
            v143 = v139[9];
            if (!v143 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 48))(v143))
            {
              v144 = v408;
              if ((_BYTE)v409
                || (v145 = **(_QWORD **)(v408 + 8) + 232 * *(_QWORD *)v408,
                    (float)(*(float *)(v145 + 88) - *(float *)(v145 + 80)) < (float)(*v377 * 1.25)))
              {
                v146 = v384;
                if (v384 >= v385)
                {
                  v148 = sub_20EF310FC(&v383, v408, *((uint64_t *)&v408 + 1));
                }
                else
                {
                  *(_QWORD *)v384 = v408;
                  v147 = *((_QWORD *)&v408 + 1);
                  *((_QWORD *)v146 + 1) = *((_QWORD *)&v408 + 1);
                  if (v147)
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v147 + 24))(v147, v144);
                  v148 = v146 + 16;
                }
                v384 = v148;
                v338 = v410;
                if (v410)
                  goto LABEL_433;
                goto LABEL_434;
              }
            }
          }
        }
      }
      v149 = **(_QWORD **)(v408 + 8) + 232 * *(_QWORD *)v408;
      v151 = *(_QWORD *)(v149 + 16);
      v150 = v149 + 16;
      *(_QWORD *)&v396 = v151;
      v152 = *(_QWORD *)(v150 + 8);
      *((_QWORD *)&v396 + 1) = v152;
      if (v152)
        (*(void (**)(uint64_t))(*(_QWORD *)v152 + 24))(v152);
      v397[0] = *(void **)(v150 + 16);
      v153 = *(void **)(v150 + 24);
      v397[1] = v153;
      if (v153)
        (*(void (**)(void *))(*(_QWORD *)v153 + 24))(v153);
      *(_QWORD *)&v398 = *(_QWORD *)(v150 + 32);
      v154 = *(_QWORD *)(v150 + 40);
      *((_QWORD *)&v398 + 1) = v154;
      if (v154)
        (*(void (**)(uint64_t))(*(_QWORD *)v154 + 24))(v154);
      *(_QWORD *)&v399 = *(_QWORD *)(v150 + 48);
      v155 = *(_QWORD *)(v150 + 56);
      *((_QWORD *)&v399 + 1) = v155;
      if (v155)
        (*(void (**)(uint64_t))(*(_QWORD *)v155 + 24))(v155);
      v156 = 0;
      v157 = (void **)&v396;
      while (1)
      {
        v158 = v157[1];
        if (v158 && (*(uint64_t (**)(void *))(*(_QWORD *)v158 + 48))(v158))
        {
          v395 = *(_OWORD *)(**((_QWORD **)*v157 + 1) + 232 * *(_QWORD *)*v157 + 80);
          v162 = 1;
          if (BYTE1(v409))
            goto LABEL_227;
        }
        else
        {
          sub_20EEE8E24((float32x2_t *)(**(_QWORD **)(v408 + 8) + 232 * *(_QWORD *)v408 + 80), v156, (float32x2_t *)&v395);
          v162 = 0;
          if (BYTE1(v409))
          {
LABEL_227:
            v380 = v126;
            v164 = v127;
            v163 = 0;
            v165 = 0uLL;
            goto LABEL_228;
          }
        }
        sub_20EEE6174((uint64_t)(v411 - (_QWORD)v410) >> 3, v410, (float32x2_t *)&v395, (uint64_t *)&__p, v159, v160, v161);
        v163 = __p;
        if ((_QWORD)v392 - (_QWORD)__p >= 0x18uLL)
        {
          v165 = v392;
          v189 = (float *)((char *)__p + 12);
          v190 = 0.0;
          v191 = ((uint64_t)(v392 - (_QWORD)__p) >> 3) - 1;
          v192 = *((float *)__p + 1);
          v193 = *(float *)__p;
          do
          {
            v194 = *v189;
            v195 = v190 - (float)(v193 * *v189);
            v193 = *(v189 - 1);
            v190 = v195 + (float)(v192 * v193);
            v189 += 2;
            v192 = v194;
            --v191;
          }
          while (v191);
          v196 = (float)((float)(v190
                               - (float)(*((float *)__p + 1)
                                       * *((float *)__p + 2 * ((uint64_t)(v392 - (_QWORD)__p) >> 3) - 2)))
                       + (float)(*(float *)__p * *((float *)__p + 2 * ((uint64_t)(v392 - (_QWORD)__p) >> 3) - 1)))
               * 0.5;
          v197 = fabsf(v196);
          if (v196 != 0.0 && v197 > 0.000001 && v197 >= v20)
          {
            v380 = v126;
            v164 = v127;
            v205 = (float)(*((float *)&v395 + 2) - *(float *)&v395)
                 * (float)(*((float *)&v395 + 3) - *((float *)&v395 + 1));
            v206 = v205 < v197;
            if (v205 != v197)
            {
              v207 = v205 - v197;
              v208 = v197 - v205;
              if (!v206)
                v208 = v207;
              v166 = v208 <= 0.000001;
LABEL_229:
              v379 = v165;
              if (BYTE1(v409) == (v163 != (void *)v165)
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/include_private/ACV/SurfaceDetection/Geometry/QuadTree.h", 815, (uint64_t)"!intersection.empty() ^ fullyContained", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              if ((v162 & 1) == 0)
              {
                v167 = *((_QWORD *)&v408 + 1);
                v394 = v408;
                if (*((_QWORD *)&v408 + 1))
                  (*(void (**)(_QWORD))(**((_QWORD **)&v408 + 1) + 24))(*((_QWORD *)&v408 + 1));
                v168 = v156;
                sub_20EF2F098((uint64_t)&__p, (uint64_t)v377, (uint64_t **)&v394, &v395, v156);
                v170 = __p;
                v169 = (void *)v392;
                if ((_QWORD)v392)
                  (*(void (**)(_QWORD))(*(_QWORD *)v392 + 24))(v392);
                v171 = v157[1];
                *v157 = v170;
                v157[1] = v169;
                if (v171)
                  (*(void (**)(void *))(*(_QWORD *)v171 + 40))(v171);
                if (v169)
                  (*(void (**)(void *))(*(_QWORD *)v169 + 40))(v169);
                if (v167)
                  (*(void (**)(uint64_t))(*(_QWORD *)v167 + 40))(v167);
                v156 = v168;
              }
              v378 = v156;
              v173 = *v157;
              v172 = v157[1];
              __p = *v157;
              *(_QWORD *)&v392 = v172;
              if (v172)
                (*(void (**)(void *))(*(_QWORD *)v172 + 24))(v172);
              v174 = v128 - __srca;
              v175 = (v128 - __srca) >> 3;
              BYTE8(v392) = v162;
              BYTE9(v392) = v166;
              *(_QWORD *)v393 = v163;
              *(_OWORD *)&v393[8] = v379;
              if (v128 == __srca)
                v176 = 0;
              else
                v176 = 85 * v175 - 1;
              v177 = v164;
              v126 = v380;
              v178 = v380 + v177;
              if (v176 != v380 + v177)
              {
                v188 = __srca;
                goto LABEL_365;
              }
              if (v380 >= 0x55)
              {
                *(_QWORD *)&v407 = v380 - 85;
                v180 = __srca + 8;
                v179 = *(void **)__srca;
                *((_QWORD *)&v404 + 1) = __srca + 8;
                if (v128 != v406)
                  goto LABEL_362;
                v181 = (void *)v404;
                if ((unint64_t)v180 > (unint64_t)v404)
                {
                  v182 = (uint64_t)&v180[-v404] >> 3;
                  if (v182 >= -1)
                    v183 = v182 + 1;
                  else
                    v183 = v182 + 2;
                  v184 = v183 >> 1;
                  v185 = &v180[-8 * (v183 >> 1)];
                  v186 = v128 - v180;
                  if (v128 != v180)
                  {
                    memmove(&v180[-8 * (v183 >> 1)], __srca + 8, v128 - v180);
                    v128 = (char *)*((_QWORD *)&v404 + 1);
                  }
                  v187 = &v128[-8 * v184];
                  v128 = &v185[v186];
                  *((_QWORD *)&v404 + 1) = v187;
                  v405 = &v185[v186];
                  goto LABEL_362;
                }
                if (v128 == (char *)v404)
                  v217 = 1;
                else
                  v217 = (uint64_t)&v128[-v404] >> 2;
                if (v217 >> 61)
                  goto LABEL_508;
                v218 = operator new(8 * v217);
                v219 = v217 >> 2;
                v220 = &v218[8 * (v217 >> 2)];
                v222 = v128 - v180;
                v221 = v128 == v180;
                v128 = v220;
                if (!v221)
                {
                  v128 = &v220[v222 & 0xFFFFFFFFFFFFFFF8];
                  v223 = v222 - 8;
                  if (v223 < 0x38)
                  {
                    v224 = &v218[8 * (v217 >> 2)];
                    goto LABEL_359;
                  }
                  v268 = 8 * v219;
                  v269 = &v218[8 * v219] - v180;
                  v224 = &v218[8 * (v217 >> 2)];
                  if (v269 < 0x20)
                    goto LABEL_516;
                  v270 = (v223 >> 3) + 1;
                  v271 = 8 * (v270 & 0x3FFFFFFFFFFFFFFCLL);
                  v224 = &v220[v271];
                  v180 += v271;
                  v272 = (__int128 *)(__srca + 24);
                  v273 = &v218[v268 + 16];
                  v274 = v270 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v275 = *v272;
                    *(v273 - 1) = *(v272 - 1);
                    *v273 = v275;
                    v272 += 2;
                    v273 += 2;
                    v274 -= 4;
                  }
                  while (v274);
                  if (v270 != (v270 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_516:
                    do
                    {
LABEL_359:
                      v276 = *(_QWORD *)v180;
                      v180 += 8;
                      *(_QWORD *)v224 = v276;
                      v224 += 8;
                    }
                    while (v224 != v128);
                  }
                }
                *(_QWORD *)&v404 = v218;
                *((_QWORD *)&v404 + 1) = &v218[8 * (v217 >> 2)];
                v405 = v128;
                v406 = &v218[8 * v217];
                if (v181)
                  operator delete(v181);
LABEL_362:
                *(_QWORD *)v128 = v179;
LABEL_363:
                v128 = v405 + 8;
                v405 += 8;
LABEL_364:
                v188 = (char *)*((_QWORD *)&v404 + 1);
                v177 = *((_QWORD *)&v407 + 1);
                v126 = v407;
                v178 = *((_QWORD *)&v407 + 1) + v407;
                v173 = __p;
                v172 = (void *)v392;
                v375 = v128;
LABEL_365:
                __srca = v188;
                v277 = *(_QWORD *)&v188[8 * (v178 / 0x55)];
                v278 = v178 % 0x55;
                v279 = (_QWORD *)(v277 + 48 * (v178 % 0x55));
                *v279 = v173;
                v279[1] = v172;
                if (v172)
                  (*(void (**)(void *))(*(_QWORD *)v172 + 24))(v172);
                v280 = v277 + 48 * v278;
                *(_WORD *)(v280 + 16) = WORD4(v392);
                *(_QWORD *)(v280 + 32) = 0;
                *(_QWORD *)(v280 + 40) = 0;
                *(_OWORD *)(v280 + 24) = *(_OWORD *)v393;
                *(_QWORD *)(v280 + 40) = *(_QWORD *)&v393[16];
                memset(v393, 0, sizeof(v393));
                v127 = v177 + 1;
                *((_QWORD *)&v407 + 1) = v127;
                if (v172)
                  (*(void (**)(void *))(*(_QWORD *)v172 + 40))(v172);
                v156 = v378;
                goto LABEL_219;
              }
              v200 = v406;
              v201 = (char *)v404;
              v202 = (uint64_t)&v406[-v404];
              if (v175 < (unint64_t)((uint64_t)&v406[-v404] >> 3))
              {
                if (v406 != v128)
                {
                  v203 = operator new(0xFF0uLL);
                  v204 = v375;
                  if (v375 != v200)
                  {
LABEL_273:
                    *(_QWORD *)v204 = v203;
                    goto LABEL_363;
                  }
                  v232 = __srca;
                  if (__srca > v201)
                  {
                    v233 = (__srca - v201) >> 3;
                    if (v233 >= -1)
                      v234 = v233 + 1;
                    else
                      v234 = v233 + 2;
                    v235 = v234 >> 1;
                    v236 = &__srca[-8 * (v234 >> 1)];
                    v237 = v200 - __srca;
                    if (v375 != __srca)
                    {
                      memmove(&__srca[-8 * (v234 >> 1)], __srca, v200 - __srca);
                      v232 = (char *)*((_QWORD *)&v404 + 1);
                    }
                    *((_QWORD *)&v404 + 1) = &v232[-8 * v235];
                    v405 = &v236[v237];
                    *(_QWORD *)&v236[v237] = v203;
                    goto LABEL_363;
                  }
                  if (v375 == v201)
                    v259 = 1;
                  else
                    v259 = v202 >> 2;
                  if (v259 >> 61)
                    goto LABEL_511;
                  v260 = operator new(8 * v259);
                  v261 = v259 >> 2;
                  v262 = &v260[8 * (v259 >> 2)];
                  v204 = v262;
                  if (v375 != __srca)
                  {
                    v204 = &v262[(v200 - __srca) & 0xFFFFFFFFFFFFFFF8];
                    v263 = v200 - __srca - 8;
                    if (v263 < 0x38 || (v264 = 8 * v261, (unint64_t)(&v260[8 * v261] - __srca) < 0x20))
                    {
                      v265 = &v260[8 * (v259 >> 2)];
                      v266 = __srca;
                      goto LABEL_352;
                    }
                    v323 = (v263 >> 3) + 1;
                    v324 = 8 * (v323 & 0x3FFFFFFFFFFFFFFCLL);
                    v265 = &v262[v324];
                    v266 = &__srca[v324];
                    v325 = (__int128 *)(__srca + 16);
                    v326 = &v260[v264 + 16];
                    v327 = v323 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v328 = *v325;
                      *(v326 - 1) = *(v325 - 1);
                      *v326 = v328;
                      v325 += 2;
                      v326 += 2;
                      v327 -= 4;
                    }
                    while (v327);
                    if (v323 != (v323 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      do
                      {
LABEL_352:
                        v267 = *(_QWORD *)v266;
                        v266 += 8;
                        *(_QWORD *)v265 = v267;
                        v265 += 8;
                      }
                      while (v265 != v204);
                    }
                  }
                  *(_QWORD *)&v404 = v260;
                  *((_QWORD *)&v404 + 1) = &v260[8 * (v259 >> 2)];
                  v405 = v204;
                  v406 = &v260[8 * v259];
                  if (v201)
                    operator delete(v201);
                  goto LABEL_273;
                }
                v225 = operator new(0xFF0uLL);
                v226 = __srca;
                if (__srca == v201)
                {
                  if (v375 >= v128)
                  {
                    if (v128 == __srca)
                      v281 = 1;
                    else
                      v281 = v202 >> 2;
                    if (v281 >> 61)
LABEL_511:
                      sub_20E877A38();
                    v282 = (char *)operator new(8 * v281);
                    v283 = (v281 + 3) >> 2;
                    v226 = &v282[8 * v283];
                    v284 = v226;
                    v285 = __srca;
                    if (v375 != __srca)
                    {
                      v284 = &v226[(v375 - v201) & 0xFFFFFFFFFFFFFFF8];
                      v286 = v375 - v201 - 8;
                      v287 = &v282[8 * v283];
                      v288 = __srca;
                      if (v286 < 0x38)
                        goto LABEL_517;
                      v289 = 8 * v283;
                      v287 = &v282[8 * v283];
                      v288 = __srca;
                      if ((unint64_t)(v287 - __srca) < 0x20)
                        goto LABEL_517;
                      v290 = (v286 >> 3) + 1;
                      v291 = 8 * (v290 & 0x3FFFFFFFFFFFFFFCLL);
                      v287 = &v226[v291];
                      v288 = &__srca[v291];
                      v292 = (__int128 *)(__srca + 16);
                      v293 = &v282[v289 + 16];
                      v294 = v290 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v295 = *v292;
                        *((_OWORD *)v293 - 1) = *(v292 - 1);
                        *(_OWORD *)v293 = v295;
                        v292 += 2;
                        v293 += 32;
                        v294 -= 4;
                      }
                      while (v294);
                      if (v290 != (v290 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_517:
                        do
                        {
                          v296 = *(_QWORD *)v288;
                          v288 += 8;
                          *(_QWORD *)v287 = v296;
                          v287 += 8;
                        }
                        while (v287 != v284);
                        v285 = __srca;
                      }
                    }
                    *(_QWORD *)&v404 = v282;
                    *((_QWORD *)&v404 + 1) = v226;
                    v405 = v284;
                    v406 = &v282[8 * v281];
                    if (v285)
                      operator delete(v285);
                  }
                  else
                  {
                    v227 = (v200 - v375) >> 3;
                    if (v227 >= -1)
                      v228 = v227 + 1;
                    else
                      v228 = v227 + 2;
                    v229 = v228 >> 1;
                    v230 = &v375[8 * (v228 >> 1)];
                    v226 = &v230[-(v375 - v201)];
                    v231 = __srca;
                    if (v375 != __srca)
                    {
                      memmove(&v230[-(v375 - v201)], __srca, v375 - v201);
                      v231 = v405;
                    }
                    *((_QWORD *)&v404 + 1) = v226;
                    v405 = &v231[8 * v229];
                  }
                }
                *((_QWORD *)v226 - 1) = v225;
                v297 = (char *)*((_QWORD *)&v404 + 1);
                v298 = v405;
                v299 = *(_QWORD *)(*((_QWORD *)&v404 + 1) - 8);
                if (v405 != v406)
                {
LABEL_384:
                  *(_QWORD *)v298 = v299;
                  goto LABEL_363;
                }
                v300 = (void *)v404;
                if (*((_QWORD *)&v404 + 1) > (unint64_t)v404)
                {
                  v301 = (uint64_t)(*((_QWORD *)&v404 + 1) - v404) >> 3;
                  if (v301 >= -1)
                    v302 = v301 + 1;
                  else
                    v302 = v301 + 2;
                  v303 = v302 >> 1;
                  v304 = *((_QWORD *)&v404 + 1) - 8 * v303;
                  v305 = &v405[-*((_QWORD *)&v404 + 1)];
                  if (v405 != *((char **)&v404 + 1))
                    memmove((void *)(*((_QWORD *)&v404 + 1) - 8 * v303), *((const void **)&v404 + 1), (size_t)&v405[-*((_QWORD *)&v404 + 1)]);
                  *((_QWORD *)&v404 + 1) = v304;
                  v405 = &v305[v304];
                  *(_QWORD *)&v305[v304] = v299;
                  goto LABEL_363;
                }
                if (v405 == (char *)v404)
                  v306 = 1;
                else
                  v306 = (uint64_t)&v405[-v404] >> 2;
                if (v306 >> 61)
                  goto LABEL_508;
                v307 = operator new(8 * v306);
                v308 = v306 >> 2;
                v309 = &v307[8 * (v306 >> 2)];
                v310 = v298 - v297;
                v221 = v298 == v297;
                v298 = v309;
                if (!v221)
                {
                  v298 = &v309[v310 & 0xFFFFFFFFFFFFFFF8];
                  v311 = v310 - 8;
                  if (v311 < 0x38)
                  {
                    v312 = &v307[8 * (v306 >> 2)];
                    goto LABEL_403;
                  }
                  v313 = 8 * v308;
                  v314 = &v307[8 * v308] - v297;
                  v312 = &v307[8 * (v306 >> 2)];
                  if (v314 < 0x20)
                    goto LABEL_518;
                  v315 = (v311 >> 3) + 1;
                  v316 = 8 * (v315 & 0x3FFFFFFFFFFFFFFCLL);
                  v312 = &v309[v316];
                  v317 = &v297[v316];
                  v318 = (__int128 *)(v297 + 16);
                  v319 = &v307[v313 + 16];
                  v320 = v315 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v321 = *v318;
                    *(v319 - 1) = *(v318 - 1);
                    *v319 = v321;
                    v318 += 2;
                    v319 += 2;
                    v320 -= 4;
                  }
                  while (v320);
                  v297 = v317;
                  if (v315 != (v315 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_518:
                    do
                    {
LABEL_403:
                      v322 = *(_QWORD *)v297;
                      v297 += 8;
                      *(_QWORD *)v312 = v322;
                      v312 += 8;
                    }
                    while (v312 != v298);
                  }
                }
                *(_QWORD *)&v404 = v307;
                *((_QWORD *)&v404 + 1) = &v307[8 * (v306 >> 2)];
                v405 = v298;
                v406 = &v307[8 * v306];
                if (v300)
                  operator delete(v300);
                goto LABEL_384;
              }
              if (v406 == (char *)v404)
                v209 = 1;
              else
                v209 = v202 >> 2;
              if (v209 >> 61)
LABEL_508:
                sub_20E877A38();
              v210 = (char *)operator new(8 * v209);
              v211 = operator new(0xFF0uLL);
              v212 = v211;
              v213 = &v210[8 * v175];
              v214 = &v210[8 * v209];
              if (v175 == v209)
              {
                if (v174 < 1)
                {
                  if (v128 == __srca)
                    v238 = 1;
                  else
                    v238 = v174 >> 2;
                  if (v238 >> 61)
                    sub_20E877A38();
                  v213 = (char *)operator new(8 * v238);
                  v214 = &v213[8 * v238];
                  operator delete(v210);
                  v210 = v213;
                  *(_QWORD *)v213 = v212;
                  v215 = v213 + 8;
                  if (v128 == __srca)
                    goto LABEL_317;
                }
                else
                {
                  v216 = v175 + 2;
                  if (v175 >= -1)
                    v216 = v175 + 1;
                  v213 -= 8 * (v216 >> 1);
                  *(_QWORD *)v213 = v211;
                  v215 = v213 + 8;
                  if (v128 == __srca)
                    goto LABEL_317;
                }
              }
              else
              {
                *(_QWORD *)v213 = v211;
                v215 = v213 + 8;
                if (v128 == __srca)
                {
LABEL_317:
                  *(_QWORD *)&v404 = v210;
                  *((_QWORD *)&v404 + 1) = v213;
                  v128 = v215;
                  v405 = v215;
                  v406 = v214;
                  if (!v201)
                    goto LABEL_364;
                  goto LABEL_343;
                }
              }
              do
              {
                if (v213 == v210)
                {
                  if (v215 >= v214)
                  {
                    if (v214 == v213)
                      v244 = 1;
                    else
                      v244 = (v214 - v213) >> 2;
                    if (v244 >> 61)
                      sub_20E877A38();
                    v245 = (char *)operator new(8 * v244);
                    v210 = v245;
                    v246 = (v244 + 3) >> 2;
                    v239 = &v245[8 * v246];
                    v247 = v215 - v213;
                    v221 = v215 == v213;
                    v215 = v239;
                    if (!v221)
                    {
                      v215 = &v239[v247 & 0xFFFFFFFFFFFFFFF8];
                      v248 = v247 - 8;
                      v249 = &v245[8 * v246];
                      v250 = v213;
                      if (v248 < 0x38)
                        goto LABEL_519;
                      v251 = 8 * v246;
                      v249 = &v245[8 * v246];
                      v250 = v213;
                      if ((unint64_t)(v249 - v213) < 0x20)
                        goto LABEL_519;
                      v252 = (v248 >> 3) + 1;
                      v253 = 8 * (v252 & 0x3FFFFFFFFFFFFFFCLL);
                      v249 = &v239[v253];
                      v250 = &v213[v253];
                      v254 = (__int128 *)(v213 + 16);
                      v255 = &v245[v251 + 16];
                      v256 = v252 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v257 = *v254;
                        *((_OWORD *)v255 - 1) = *(v254 - 1);
                        *(_OWORD *)v255 = v257;
                        v254 += 2;
                        v255 += 32;
                        v256 -= 4;
                      }
                      while (v256);
                      if (v252 != (v252 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_519:
                        do
                        {
                          v258 = *(_QWORD *)v250;
                          v250 += 8;
                          *(_QWORD *)v249 = v258;
                          v249 += 8;
                        }
                        while (v249 != v215);
                      }
                    }
                    v214 = &v245[8 * v244];
                    operator delete(v213);
                  }
                  else
                  {
                    v241 = (v214 - v215) >> 3;
                    if (v241 >= -1)
                      v242 = v241 + 1;
                    else
                      v242 = v241 + 2;
                    v243 = &v215[8 * (v242 >> 1)];
                    v239 = &v213[8 * (v242 >> 1)];
                    if (v215 == v213)
                    {
                      v210 = v215;
                    }
                    else
                    {
                      memmove(&v213[8 * (v242 >> 1)], v213, v215 - v213);
                      v210 = v213;
                    }
                    v215 = v243;
                  }
                }
                else
                {
                  v239 = v213;
                }
                v240 = *((_QWORD *)v128 - 1);
                v128 -= 8;
                *((_QWORD *)v239 - 1) = v240;
                v213 = v239 - 8;
              }
              while (v128 != *((char **)&v404 + 1));
              v201 = (char *)v404;
              *(_QWORD *)&v404 = v210;
              *((_QWORD *)&v404 + 1) = v239 - 8;
              v128 = v215;
              v405 = v215;
              v406 = v214;
              if (!v201)
                goto LABEL_364;
LABEL_343:
              operator delete(v201);
              goto LABEL_364;
            }
LABEL_228:
            v166 = 1;
            goto LABEL_229;
          }
        }
        else if (!__p)
        {
          goto LABEL_219;
        }
        operator delete(__p);
LABEL_219:
        ++v156;
        v157 = &v397[2 * v156 - 2];
        if (v156 == 4)
        {
          v329 = (_QWORD *)(**(_QWORD **)(v408 + 8) + 232 * *(_QWORD *)v408);
          v330 = v329[3];
          if (!v330 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v330 + 48))(v330))
          {
            v331 = v329[5];
            if (!v331 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v331 + 48))(v331))
            {
              v332 = v329[7];
              if (!v332 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v332 + 48))(v332))
              {
                v333 = v329[9];
                if (!v333 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v333 + 48))(v333))
                {
                  v334 = v389;
                  v335 = v408;
                  if (v389 >= v390)
                  {
                    v337 = sub_20EF310FC((char **)&v388, v408, *((uint64_t *)&v408 + 1));
                  }
                  else
                  {
                    *v389 = v408;
                    v336 = *((_QWORD *)&v408 + 1);
                    v334[1] = *((_QWORD *)&v408 + 1);
                    if (v336)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v336 + 24))(v336, v335);
                    v337 = (char *)(v334 + 2);
                  }
                  v389 = v337;
                }
              }
            }
          }
          if (*((_QWORD *)&v399 + 1))
            (*(void (**)(_QWORD))(**((_QWORD **)&v399 + 1) + 40))(*((_QWORD *)&v399 + 1));
          if (*((_QWORD *)&v398 + 1))
            (*(void (**)(_QWORD))(**((_QWORD **)&v398 + 1) + 40))(*((_QWORD *)&v398 + 1));
          if (v397[1])
            (*(void (**)(void *))(*(_QWORD *)v397[1] + 40))(v397[1]);
          if (*((_QWORD *)&v396 + 1))
            (*(void (**)(_QWORD))(**((_QWORD **)&v396 + 1) + 40))(*((_QWORD *)&v396 + 1));
          v338 = v410;
          if (v410)
          {
LABEL_433:
            *(_QWORD *)&v411 = v338;
            operator delete(v338);
          }
LABEL_434:
          if (*((_QWORD *)&v408 + 1))
            (*(void (**)(_QWORD))(**((_QWORD **)&v408 + 1) + 40))(*((_QWORD *)&v408 + 1));
          v339 = *(_QWORD *)&__srca[8 * (v126 / 0x55)];
          v340 = v126 % 0x55;
          v341 = *(void **)(v339 + 48 * (v126 % 0x55) + 24);
          if (v341)
          {
            *(_QWORD *)(v339 + 48 * v340 + 32) = v341;
            operator delete(v341);
          }
          v342 = *(_QWORD *)(v339 + 48 * v340 + 8);
          if (v342)
            (*(void (**)(uint64_t))(*(_QWORD *)v342 + 40))(v342);
          --v127;
          v343 = v126 + 1;
          *(_QWORD *)&v407 = v126 + 1;
          *((_QWORD *)&v407 + 1) = v127;
          if (v126 + 1 >= 0xAA)
          {
            operator delete(*(void **)__srca);
            v343 = v126 - 84;
            __srca += 8;
            *((_QWORD *)&v404 + 1) = __srca;
            *(_QWORD *)&v407 = v126 - 84;
          }
          v126 = v343;
          if (v127)
            goto LABEL_190;
          v344 = (uint64_t **)v388;
          v345 = (uint64_t **)v389;
          v10 = v377;
          v346 = (void **)__srca;
          if (v388 != v389)
          {
            do
            {
              v354 = *v344;
              v353 = v344[1];
              if (v353)
              {
                (*(void (**)(uint64_t *))(*v353 + 24))(v344[1]);
                v386 = v354;
                v387 = v353;
                (*(void (**)(uint64_t *))(*v353 + 24))(v353);
              }
              else
              {
                v386 = *v344;
                v387 = 0;
              }
              sub_20EF2D104((uint64_t)v377, &v386);
              if (v353)
              {
                (*(void (**)(uint64_t *))(*v353 + 40))(v353);
                (*(void (**)(uint64_t *))(*v353 + 40))(v353);
              }
              v344 += 2;
            }
            while (v344 != v345);
          }
          sub_20EF2E9CC((uint64_t)v377);
          v347 = v128 - __srca;
          if ((unint64_t)(v128 - __srca) >= 0x11)
          {
            do
            {
              v348 = *v346++;
              operator delete(v348);
              *((_QWORD *)&v404 + 1) = v346;
              v347 -= 8;
            }
            while (v347 > 0x10);
          }
          while (v346 != (void **)v128)
          {
            v349 = *v346++;
            operator delete(v349);
          }
          if ((_QWORD)v404)
            operator delete((void *)v404);
          v350 = v388;
          if (v388)
          {
            v351 = v389;
            v352 = v388;
            if (v389 != v388)
            {
              do
              {
                v355 = *(v351 - 1);
                if (v355)
                  (*(void (**)(uint64_t))(*(_QWORD *)v355 + 40))(v355);
                v351 -= 2;
              }
              while (v351 != v350);
              v352 = v388;
            }
            v389 = v350;
            operator delete(v352);
          }
LABEL_467:
          v103 = v383;
          v356 = v384;
          if (v383 == v384)
          {
            if (!v384)
              break;
          }
          else
          {
            v357 = *v10 * *v10;
            v358 = v383;
            do
            {
              v359 = **(_QWORD **)(*(_QWORD *)v358 + 8) + 232 * **(_QWORD **)v358;
              v360 = (float)((float)(*(float *)(v359 + 88) - *(float *)(v359 + 80))
                           * (float)(*(float *)(v359 + 92) - *(float *)(v359 + 84)))
                   / v357;
              if (v360 >= 0.1)
              {
                v361 = v360 * (float)a7;
                v362 = fmaxf(fabsf(v361), 1.0);
                v363 = v361 >= 0.0 ? v362 : -v362;
                v364 = llroundf(v363);
                if (v364)
                {
                  v365 = (_OWORD *)(v359 + 96);
                  v366 = (v359 + 96) & 0xF8;
                  if (!*(_BYTE *)(v359 + 216))
                    v366 = 0;
                  sub_20EF2CC78((uint64_t)&v396, a2, v366 | (v359 + 96) & 0xFFFFFFFFFFFFFF00, *(_BYTE *)(v359 + 216), v364, a5, a6);
                  if (*(_BYTE *)(v359 + 216))
                  {
                    if (*(unsigned __int8 *)(v359 + 192) == v402)
                    {
                      if (*(_BYTE *)(v359 + 192))
                      {
                        *(_OWORD *)(v359 + 128) = v398;
                        *(_OWORD *)(v359 + 144) = v399;
                        *(_OWORD *)(v359 + 160) = v400;
                        *(_OWORD *)(v359 + 176) = v401;
                        *v365 = v396;
                        *(_OWORD *)(v359 + 112) = *(_OWORD *)v397;
                      }
                    }
                    else if (*(_BYTE *)(v359 + 192))
                    {
                      *(_BYTE *)(v359 + 192) = 0;
                    }
                    else
                    {
                      *(_OWORD *)(v359 + 128) = v398;
                      *(_OWORD *)(v359 + 144) = v399;
                      *(_OWORD *)(v359 + 160) = v400;
                      *(_OWORD *)(v359 + 176) = v401;
                      *v365 = v396;
                      *(_OWORD *)(v359 + 112) = *(_OWORD *)v397;
                      *(_BYTE *)(v359 + 192) = 1;
                    }
                    *(_QWORD *)(v359 + 200) = v403[0];
                    *(_QWORD *)(v359 + 205) = *(_QWORD *)((char *)v403 + 5);
                  }
                  else
                  {
                    *(_BYTE *)(v359 + 96) = 0;
                    *(_BYTE *)(v359 + 192) = 0;
                    if (v402)
                    {
                      *(_OWORD *)(v359 + 128) = v398;
                      *(_OWORD *)(v359 + 144) = v399;
                      *(_OWORD *)(v359 + 160) = v400;
                      *(_OWORD *)(v359 + 176) = v401;
                      *v365 = v396;
                      *(_OWORD *)(v359 + 112) = *(_OWORD *)v397;
                      *(_BYTE *)(v359 + 192) = 1;
                    }
                    *(_QWORD *)(v359 + 200) = v403[0];
                    *(_QWORD *)(v359 + 205) = *(_QWORD *)((char *)v403 + 5);
                    *(_BYTE *)(v359 + 216) = 1;
                  }
                  *(_BYTE *)(v359 + 212) = 0;
                }
              }
              if (!*(_BYTE *)(v359 + 216))
              {
                *(_QWORD *)&v408 = *(_QWORD *)v358;
                v367 = *((_QWORD *)v358 + 1);
                *((_QWORD *)&v408 + 1) = v367;
                if (v367)
                  (*(void (**)(uint64_t))(*(_QWORD *)v367 + 24))(v367);
                sub_20EF2D104((uint64_t)v10, (uint64_t **)&v408);
                if (v367)
                  (*(void (**)(uint64_t))(*(_QWORD *)v367 + 40))(v367);
              }
              v358 += 16;
            }
            while (v358 != v356);
            if (!v103)
              break;
            do
            {
              v368 = *((_QWORD *)v356 - 1);
              if (v368)
                (*(void (**)(uint64_t))(*(_QWORD *)v368 + 40))(v368);
              v356 -= 16;
            }
            while (v356 != v103);
          }
LABEL_500:
          operator delete(v103);
          break;
        }
      }
    }
  }
LABEL_501:
  if (*(_DWORD *)(a1 + 144) == a2)
  {
    v369 = *(_DWORD *)(a1 + 148);
    if (v369 <= a7)
      v369 = a7;
  }
  else
  {
    *(_DWORD *)(a1 + 152) += *(_DWORD *)(a1 + 148);
    *(_DWORD *)(a1 + 144) = a2;
    v369 = a7;
  }
  *(_DWORD *)(a1 + 148) = v369;
}

void sub_20EF2BCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  void **v46;
  void *v48;
  uint64_t v49;

  v48 = *v46;
  if (*v46)
  {
    *(_QWORD *)(v45 + 32) = v48;
    operator delete(v48);
  }
  v49 = *(_QWORD *)(v45 + 8);
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
  operator delete(__p);
  sub_20EF332D8(&a45);
  sub_20EF2D08C(&a32);
  sub_20EF2D08C(&a27);
  _Unwind_Resume(a1);
}

void sub_20EF2BD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  sub_20EF2D08C(&a32);
  sub_20EF2D08C(&a27);
  _Unwind_Resume(a1);
}

void sub_20EF2BD60()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  JUMPOUT(0x20EF2C404);
}

void sub_20EF2BD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35)
{
  sub_20EF2D08C(&a35);
  sub_20EF2D08C(&a32);
  _Unwind_Resume(a1);
}

void sub_20EF2BDA0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  JUMPOUT(0x20EF2C404);
}

void sub_20EF2BDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35)
{
  uint64_t v35;
  uint64_t v36;

  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
  sub_20EF30F68(v36 - 176);
  sub_20EF2D08C(&a35);
  sub_20EF2D08C(&a32);
  _Unwind_Resume(a1);
}

void sub_20EF2BDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;

  sub_20EF2D018(&a45);
  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
  sub_20EF30F68(v46 - 176);
  sub_20EF2D08C(&a35);
  sub_20EF2D08C(&a32);
  _Unwind_Resume(a1);
}

void sub_20EF2BDD8(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x20EF2C404);
}

void sub_20EF2BDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  void *v45;

  __cxa_end_catch();
  operator delete(v45);
  sub_20EF332D8(&a45);
  sub_20EF2D08C(&a32);
  sub_20EF2D08C(&a27);
  _Unwind_Resume(a1);
}

void sub_20EF2BE30()
{
  uint64_t v0;

  sub_20EF332D8((_QWORD *)(v0 - 176));
  JUMPOUT(0x20EF2C39CLL);
}

void sub_20EF2BE3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  void *v48;

  if (a47 == a46)
  {
    v48 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v48 = __p;
    if (!__p)
    {
LABEL_3:
      if (!v47)
LABEL_8:
        JUMPOUT(0x20EF2C3E4);
LABEL_7:
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47);
      goto LABEL_8;
    }
  }
  operator delete(v48);
  if (!v47)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20EF2BE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  sub_20EF2D018(&a45);
  JUMPOUT(0x20EF2C394);
}

void sub_20EF2BEA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  uint64_t v49;

  sub_20EF30740(&a45);
  (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
  JUMPOUT(0x20EF2C404);
}

void sub_20EF2BF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45)
{
  uint64_t v45;

  sub_20EF30740(&a45);
  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
  JUMPOUT(0x20EF2C404);
}

void sub_20EF2BF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;

  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
  sub_20EF33320(v33 - 224);
  sub_20EF2D08C(&a32);
  sub_20EF2D08C(&a27);
  _Unwind_Resume(a1);
}

void sub_20EF2BF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  uint64_t v46;
  uint64_t v49;

  while (1)
  {
    v49 = *((_QWORD *)a23 - 1);
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 40))(v49);
    a23 -= 16;
    if (a23 == &a45)
    {
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
      sub_20EF30F68(v46 - 176);
      sub_20EF2D08C(&a35);
      sub_20EF2D08C(&a32);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20EF2C000()
{
  JUMPOUT(0x20EF2C3DCLL);
}

void sub_20EF2C024()
{
  void *v0;
  void *v1;

  operator delete(v1);
  operator delete(v0);
  JUMPOUT(0x20EF2C374);
}

void sub_20EF2C03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  uint64_t v47;

  while (1)
  {
    v47 = *((_QWORD *)a9 - 1);
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47);
    a9 -= 16;
    if (a9 == &a45)
    {
      sub_20EF332D8(v45 - 176);
      JUMPOUT(0x20EF2C39CLL);
    }
  }
}

void sub_20EF2C09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;

  if (v32)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
    JUMPOUT(0x20EF2C0B4);
  }
  sub_20EF33320(v33 - 224);
  sub_20EF2D08C(&a32);
  sub_20EF2D08C(&a27);
  _Unwind_Resume(a1);
}

void sub_20EF2C0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;
  uint64_t v34;

  v34 = *(_QWORD *)(v32 - 168);
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
  sub_20EF33320(v32 - 224);
  sub_20EF2D08C(&a32);
  sub_20EF2D08C(&a27);
  _Unwind_Resume(a1);
}

void sub_20EF2C110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;

  sub_20EF33320(v32 - 224);
  sub_20EF2D08C(&a32);
  sub_20EF2D08C(&a27);
  _Unwind_Resume(a1);
}

void sub_20EF2C11C()
{
  uint64_t v0;

  if (v0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
    JUMPOUT(0x20EF2C134);
  }
  JUMPOUT(0x20EF2C3DCLL);
}

void sub_20EF2C150(_Unwind_Exception *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;

  if (!v2)
    JUMPOUT(0x20EF2C404);
  while (1)
  {
    v4 = *((_QWORD *)v1 - 1);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v1 -= 16;
    if (v1 == v2)
    {
      operator delete(v2);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20EF2C1CC()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x20EF2C374);
}

void sub_20EF2C1D4()
{
  uint64_t v0;

  if (v0)
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  JUMPOUT(0x20EF2C2C4);
}

void sub_20EF2C1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;

  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
  if (!v46)
  {
    sub_20EF2D018(&a45);
    JUMPOUT(0x20EF2C3DCLL);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
  sub_20EF2D018(&a45);
  JUMPOUT(0x20EF2C3CCLL);
}

void sub_20EF2C260()
{
  uint64_t v0;

  if (v0)
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  JUMPOUT(0x20EF2C3C0);
}

void sub_20EF2C2C0(_Unwind_Exception *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;

  if (!v2)
    JUMPOUT(0x20EF2C404);
  while (1)
  {
    v4 = *((_QWORD *)v1 - 1);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v1 -= 16;
    if (v1 == v2)
    {
      operator delete(v2);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20EF2C304()
{
  JUMPOUT(0x20EF2C310);
}

void sub_20EF2C33C()
{
  JUMPOUT(0x20EF2C380);
}

void sub_20EF2C344()
{
  JUMPOUT(0x20EF2C380);
}

void sub_20EF2C354()
{
  JUMPOUT(0x20EF2C380);
}

void sub_20EF2C368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  sub_20EF2D018(&a45);
  JUMPOUT(0x20EF2C394);
}

void sub_20EF2C370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  sub_20EF332D8(&a35);
  sub_20EF2D018(&a45);
  JUMPOUT(0x20EF2C394);
}

void sub_20EF2C3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;

  sub_20EF2D018(&a45);
  if (v45)
    JUMPOUT(0x20EF2C3CCLL);
  JUMPOUT(0x20EF2C3DCLL);
}

void sub_20EF2C3FC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

void sub_20EF2C414(float64x2_t *a1, unint64_t a2, _OWORD *a3, uint64_t a4, double *a5)
{
  uint64_t v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float64x2_t v29;
  unint64_t v30;
  uint64_t v31;
  float64x2_t v32;
  char *v33;
  unint64_t v34;
  float64x2_t v35;
  unint64_t v36;
  float64x2_t v37;
  unint64_t v38;
  float64x2_t v39;
  unint64_t v40;
  float64x2_t v41;
  unint64_t v42;
  double v43;
  uint64_t v44;
  char *v45;
  double v46;
  int8x16_t v47;
  float64x2_t v48;
  double v49;
  int8x16_t v50;
  double v51;
  int8x16_t v52;
  double v53;
  int8x16_t v54;
  double v55;
  int8x16_t v56;
  double v57;
  int8x16_t v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t *v68;

  if (!a2)
  {
    v11 = 0;
    v47.i64[0] = 0;
    v49 = 0.0;
    v50.i64[0] = 0;
    v51 = 0.0;
    v52.i64[0] = 0;
    v53 = 0.0;
    v54.i64[0] = 0;
    v55 = 0.0;
    v56.i64[0] = 0;
    v57 = 0.0;
    v58.i64[0] = 0;
    v59 = 0.0;
    goto LABEL_34;
  }
  v68 = a1;
  if (a2 > 0x2AAAAAAAAAAAAAALL)
    sub_20E867F44();
  v7 = 6 * a2;
  v8 = (char *)operator new(96 * a2);
  v9 = &v8[v7 * 16];
  v10 = &a3[v7];
  v11 = v8;
  do
  {
    while (v8 < v9)
    {
      v12 = a3[1];
      *(_OWORD *)v8 = *a3;
      *((_OWORD *)v8 + 1) = v12;
      v13 = a3[2];
      v14 = a3[3];
      v15 = a3[5];
      *((_OWORD *)v8 + 4) = a3[4];
      *((_OWORD *)v8 + 5) = v15;
      *((_OWORD *)v8 + 2) = v13;
      *((_OWORD *)v8 + 3) = v14;
      v8 += 96;
      a3 += 6;
      if (a3 == v10)
        goto LABEL_23;
    }
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v11) >> 5) + 1;
    if (v16 > 0x2AAAAAAAAAAAAAALL)
      sub_20E867F44();
    if (0x5555555555555556 * ((v9 - v11) >> 5) > v16)
      v16 = 0x5555555555555556 * ((v9 - v11) >> 5);
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - v11) >> 5) >= 0x155555555555555)
      v17 = 0x2AAAAAAAAAAAAAALL;
    else
      v17 = v16;
    if (v17)
    {
      if (v17 > 0x2AAAAAAAAAAAAAALL)
        sub_20E877A38();
      v18 = (char *)operator new(96 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[32 * ((v8 - v11) >> 5)];
    v9 = &v18[96 * v17];
    v20 = a3[1];
    *(_OWORD *)v19 = *a3;
    *((_OWORD *)v19 + 1) = v20;
    v21 = a3[2];
    v22 = a3[3];
    v23 = a3[5];
    *((_OWORD *)v19 + 4) = a3[4];
    *((_OWORD *)v19 + 5) = v23;
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = v22;
    v24 = v19 + 96;
    if (v8 == v11)
    {
      v11 = v8;
LABEL_21:
      operator delete(v11);
      goto LABEL_22;
    }
    do
    {
      v25 = *((_OWORD *)v8 - 5);
      *((_OWORD *)v19 - 6) = *((_OWORD *)v8 - 6);
      *((_OWORD *)v19 - 5) = v25;
      v26 = *((_OWORD *)v8 - 4);
      v27 = *((_OWORD *)v8 - 3);
      v28 = *((_OWORD *)v8 - 1);
      *((_OWORD *)v19 - 2) = *((_OWORD *)v8 - 2);
      *((_OWORD *)v19 - 1) = v28;
      *((_OWORD *)v19 - 4) = v26;
      *((_OWORD *)v19 - 3) = v27;
      v19 -= 96;
      v8 -= 96;
    }
    while (v8 != v11);
    if (v11)
      goto LABEL_21;
LABEL_22:
    v11 = v19;
    v8 = v24;
    a3 += 6;
  }
  while (a3 != v10);
LABEL_23:
  if (v11 == v8)
  {
    v47.i64[0] = 0;
  }
  else
  {
    v29.f64[0] = 0.0;
    v30 = 0;
    v31 = 8 * a4 - 8;
    v32.f64[0] = 0.0;
    v33 = v11 + 96;
    v34 = 0;
    v35.f64[0] = 0.0;
    v36 = 0;
    v37.f64[0] = 0.0;
    v38 = 0;
    v39.f64[0] = 0.0;
    v40 = 0;
    v41.f64[0] = 0.0;
    v42 = 0;
    v43 = 0.0;
    do
    {
      do
      {
        v44 = v31;
        v45 = v33;
        v46 = *a5++;
        *(_QWORD *)&v29.f64[1] = v30;
        v29 = vaddq_f64(v29, vmulq_n_f64(*((float64x2_t *)v33 - 6), v46));
        v30 = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
        *(_QWORD *)&v32.f64[1] = v34;
        v32 = vaddq_f64(v32, vmulq_n_f64(*((float64x2_t *)v33 - 5), v46));
        v34 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
        *(_QWORD *)&v35.f64[1] = v36;
        v35 = vaddq_f64(v35, vmulq_n_f64(*((float64x2_t *)v33 - 4), v46));
        v36 = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
        *(_QWORD *)&v37.f64[1] = v38;
        v37 = vaddq_f64(v37, vmulq_n_f64(*((float64x2_t *)v33 - 3), v46));
        v38 = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
        *(_QWORD *)&v39.f64[1] = v40;
        v39 = vaddq_f64(v39, vmulq_n_f64(*((float64x2_t *)v33 - 2), v46));
        v40 = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
        *(_QWORD *)&v41.f64[1] = v42;
        v41 = vaddq_f64(v41, vmulq_n_f64(*((float64x2_t *)v33 - 1), v46));
        v42 = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
        v43 = v43 + v46;
        v31 -= 8;
        v33 += 96;
      }
      while (v45 != v8);
    }
    while (v44);
    v47.i64[0] = 0;
    if (v43 != 0.0 && fabs(v43) > 0.00000001)
    {
      v48 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v43, 0);
      *(_QWORD *)&v29.f64[1] = v30;
      v47 = (int8x16_t)vdivq_f64(v29, v48);
      *(_QWORD *)&v49 = vextq_s8(v47, v47, 8uLL).u64[0];
      *(_QWORD *)&v32.f64[1] = v34;
      v50 = (int8x16_t)vdivq_f64(v32, v48);
      *(_QWORD *)&v51 = vextq_s8(v50, v50, 8uLL).u64[0];
      *(_QWORD *)&v35.f64[1] = v36;
      v52 = (int8x16_t)vdivq_f64(v35, v48);
      *(_QWORD *)&v53 = vextq_s8(v52, v52, 8uLL).u64[0];
      *(_QWORD *)&v37.f64[1] = v38;
      v54 = (int8x16_t)vdivq_f64(v37, v48);
      *(_QWORD *)&v55 = vextq_s8(v54, v54, 8uLL).u64[0];
      *(_QWORD *)&v39.f64[1] = v40;
      v56 = (int8x16_t)vdivq_f64(v39, v48);
      *(_QWORD *)&v57 = vextq_s8(v56, v56, 8uLL).u64[0];
      *(_QWORD *)&v41.f64[1] = v42;
      v58 = (int8x16_t)vdivq_f64(v41, v48);
      *(_QWORD *)&v59 = vextq_s8(v58, v58, 8uLL).u64[0];
      goto LABEL_33;
    }
  }
  v49 = 0.0;
  v50.i64[0] = 0;
  v51 = 0.0;
  v52.i64[0] = 0;
  v53 = 0.0;
  v54.i64[0] = 0;
  v55 = 0.0;
  v56.i64[0] = 0;
  v57 = 0.0;
  v58.i64[0] = 0;
  v59 = 0.0;
LABEL_33:
  a1 = v68;
LABEL_34:
  *(_QWORD *)&v60.f64[0] = v58.i64[0];
  v60.f64[1] = v59;
  *(_QWORD *)&v61.f64[0] = v56.i64[0];
  v61.f64[1] = v57;
  *(_QWORD *)&v62.f64[0] = v54.i64[0];
  v62.f64[1] = v55;
  *(_QWORD *)&v63.f64[0] = v52.i64[0];
  v63.f64[1] = v53;
  *(_QWORD *)&v64.f64[0] = v50.i64[0];
  v64.f64[1] = v51;
  *(_QWORD *)&v65.f64[0] = v47.i64[0];
  v65.f64[1] = v49;
  v66 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v59+ *(double *)v58.i64+ v57+ *(double *)v56.i64+ v55+ *(double *)v54.i64+ v53+ *(double *)v52.i64+ v51+ *(double *)v50.i64+ *(double *)v47.i64+ v49), 0);
  a1[4] = vdivq_f64(v61, v66);
  a1[5] = vdivq_f64(v60, v66);
  a1[2] = vdivq_f64(v63, v66);
  a1[3] = vdivq_f64(v62, v66);
  *a1 = vdivq_f64(v65, v66);
  a1[1] = vdivq_f64(v64, v66);
  if (v11)
    operator delete(v11);
}

void sub_20EF2C834(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

float sub_20EF2C850(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  float *v26;
  _BYTE v27[24];
  _BYTE *v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[24];
  _BYTE *v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[24];
  _BYTE *v36;
  __int128 v37;
  float *v38;
  _BYTE v39[24];
  _BYTE *v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  sub_20EF31C08((uint64_t)&v34, **(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2);
  v30 = v34;
  v2 = v31;
  v3 = (uint64_t)v36;
  if (!v36)
    goto LABEL_4;
  if (v36 != v35)
  {
    v3 = (*(uint64_t (**)(void))(*(_QWORD *)v36 + 16))();
LABEL_4:
    v32 = (_BYTE *)v3;
    goto LABEL_6;
  }
  v32 = v31;
  (*(void (**)(void))(*(_QWORD *)v36 + 24))();
LABEL_6:
  v33 = v37;
  v26 = v38;
  v4 = v27;
  v5 = (uint64_t)v40;
  if (!v40)
  {
LABEL_9:
    v28 = (_BYTE *)v5;
    goto LABEL_11;
  }
  if (v40 != v39)
  {
    v5 = (*(uint64_t (**)(void))(*(_QWORD *)v40 + 16))();
    goto LABEL_9;
  }
  v28 = v27;
  (*(void (**)(void))(*(_QWORD *)v40 + 24))();
LABEL_11:
  v29 = v41;
  v6 = (float *)v30;
  v7 = v26;
  v8 = 0.0;
  if ((float *)v30 != v26)
  {
    do
    {
      v11 = v6[22];
      v12 = v6[23];
      v14 = v6[20];
      v13 = v6[21];
      *(_QWORD *)&v30 = v6 + 58;
      v10 = (float *)*((_QWORD *)&v30 + 1);
      if (v6 + 58 == *((float **)&v30 + 1))
      {
        v10 = v6 + 58;
LABEL_25:
        if (v10 != (float *)v33)
          goto LABEL_31;
      }
      else
      {
        v15 = v6 + 116;
        while (!*((_BYTE *)v15 - 8))
        {
          *(_QWORD *)&v30 = v15;
          v16 = v15 == *((float **)&v30 + 1);
          v15 += 58;
          if (v16)
            goto LABEL_25;
        }
        v10 = v15 - 58;
        if (v15 - 58 != (float *)v33)
        {
          while (1)
          {
LABEL_31:
            if (!v32)
              sub_20E86D37C();
            v17 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v32 + 48))(v32);
            v18 = v30;
            if ((v17 & 1) != 0)
              break;
            *(_QWORD *)&v30 = v30 + 232;
            v10 = (float *)*((_QWORD *)&v30 + 1);
            if (v18 + 232 == *((_QWORD *)&v30 + 1))
            {
              v10 = (float *)(v18 + 232);
            }
            else
            {
              v19 = v18 + 464;
              while (!*(_BYTE *)(v19 - 8))
              {
                *(_QWORD *)&v30 = v19;
                v16 = v19 == *((_QWORD *)&v30 + 1);
                v19 += 232;
                if (v16)
                  goto LABEL_30;
              }
              v10 = (float *)(v19 - 232);
            }
LABEL_30:
            if (v10 == (float *)v33)
              goto LABEL_16;
          }
          v10 = (float *)v30;
LABEL_16:
          v7 = v26;
        }
      }
      v8 = v8 + (float)((float)(v11 - v14) * (float)(v12 - v13));
      v6 = v10;
    }
    while (v10 != v7);
  }
  if (v28 == v27)
  {
    v9 = 4;
  }
  else
  {
    if (!v28)
      goto LABEL_42;
    v9 = 5;
    v4 = v28;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v9))(v4);
LABEL_42:
  if (v32 == v31)
  {
    v20 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_47;
    v20 = 5;
    v2 = v32;
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v20))(v2);
LABEL_47:
  v21 = v40;
  if (v40 == v39)
  {
    v22 = 4;
    v21 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_52;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_52:
  v23 = v36;
  if (v36 == v35)
  {
    v24 = 4;
    v23 = v35;
    goto LABEL_56;
  }
  if (v36)
  {
    v24 = 5;
LABEL_56:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  return v8;
}

void sub_20EF2CB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _QWORD *v26;
  uint64_t v28;

  if (a22 == v26)
  {
    v28 = 4;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v28 = 5;
    v26 = a22;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v28))(v26);
LABEL_6:
  sub_20EF2CBF8(&a26);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EF2CBF8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 10;
  v3 = (_QWORD *)a1[13];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[5];
  if (v5 == a1 + 2)
  {
    v6 = 4;
    v5 = a1 + 2;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_20EF2CC78(uint64_t a1, int a2, uint64_t a3, char a4, int a5, _OWORD *a6, char a7)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _DWORD *v13;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  float64x2_t v53[6];
  float64x2_t v54;
  _OWORD v55[12];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    if (a5 > 0)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 96) = 0;
      if (*(_BYTE *)(a3 + 96))
      {
        v10 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a1 + 48) = v10;
        v11 = *(_OWORD *)(a3 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(a1 + 80) = v11;
        v12 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(_OWORD *)(a1 + 16) = v12;
        *(_BYTE *)(a1 + 96) = 1;
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 104);
        v13 = (_DWORD *)(a1 + 104);
        *(_QWORD *)(a1 + 109) = *(_QWORD *)(a3 + 109);
        if (a7)
        {
          v54.f64[0] = (double)(*(_DWORD *)(a3 + 108) + *(_DWORD *)(a3 + 112));
          v54.f64[1] = (double)a5;
          _D2 = (double)a5;
          __asm { FMLA            D1, D2, V0.D[1] }
          v54 = vmulq_n_f64(v54, 1.0 / sqrt(_D1));
          v20 = *(_OWORD *)(a3 + 16);
          v55[0] = *(_OWORD *)a3;
          v55[1] = v20;
          v21 = *(_OWORD *)(a3 + 32);
          v22 = *(_OWORD *)(a3 + 48);
          v23 = *(_OWORD *)(a3 + 80);
          v55[4] = *(_OWORD *)(a3 + 64);
          v55[5] = v23;
          v55[2] = v21;
          v55[3] = v22;
          v24 = a6[5];
          v26 = a6[2];
          v25 = a6[3];
          v55[10] = a6[4];
          v55[11] = v24;
          v55[8] = v26;
          v55[9] = v25;
          v27 = a6[1];
          v55[6] = *a6;
          v55[7] = v27;
          sub_20EF2C414(v53, 2uLL, v55, 2, v54.f64);
          v28 = v53[3];
          *(float64x2_t *)(a1 + 32) = v53[2];
          *(float64x2_t *)(a1 + 48) = v28;
          v29 = v53[5];
          *(float64x2_t *)(a1 + 64) = v53[4];
          *(float64x2_t *)(a1 + 80) = v29;
          v30 = v53[1];
          *(float64x2_t *)a1 = v53[0];
          *(float64x2_t *)(a1 + 16) = v30;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 104);
        v13 = (_DWORD *)(a1 + 104);
        *(_QWORD *)(a1 + 109) = *(_QWORD *)(a3 + 109);
        if (a7)
        {
          v44 = a6[3];
          *(_OWORD *)(a1 + 32) = a6[2];
          *(_OWORD *)(a1 + 48) = v44;
          v45 = a6[5];
          *(_OWORD *)(a1 + 64) = a6[4];
          *(_OWORD *)(a1 + 80) = v45;
          v46 = a6[1];
          *(_OWORD *)a1 = *a6;
          *(_OWORD *)(a1 + 16) = v46;
          *(_BYTE *)(a1 + 96) = 1;
        }
      }
      if (*v13 == a2)
      {
LABEL_23:
        v47 = *(_DWORD *)(a1 + 108);
        if (v47 <= a5)
          v47 = a5;
        *(_DWORD *)(a1 + 108) = v47;
        return;
      }
LABEL_31:
      v52 = *(_DWORD *)(a1 + 108) + *(_DWORD *)(a1 + 112);
      *(_DWORD *)(a1 + 108) = a5;
      *(_DWORD *)(a1 + 112) = v52;
      *(_DWORD *)(a1 + 104) = a2;
      return;
    }
    v35 = (uint64_t *)(a3 + 104);
    if (*(_DWORD *)(a3 + 104) != a2)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 96) = 0;
      if (*(_BYTE *)(a3 + 96))
      {
        v48 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a1 + 48) = v48;
        v49 = *(_OWORD *)(a3 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(a1 + 80) = v49;
        v50 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(_OWORD *)(a1 + 16) = v50;
        *(_BYTE *)(a1 + 96) = 1;
      }
      v51 = *v35;
      *(_QWORD *)(a1 + 104) = *v35;
      *(_QWORD *)(a1 + 109) = *(_QWORD *)(a3 + 109);
      if ((_DWORD)v51 == a2)
        goto LABEL_23;
      goto LABEL_31;
    }
    v37 = *(_DWORD *)(a3 + 108);
    v36 = *(_DWORD *)(a3 + 112);
    v38 = (v37 + a5) & ~((v37 + a5) >> 31);
    if (!v37)
      v38 = a5;
    if (v37 >= a5)
      v39 = a5;
    else
      v39 = *(_DWORD *)(a3 + 108);
    if (v37 < 0)
      v40 = v39;
    else
      v40 = v38;
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 96) = 0;
    if (*(_BYTE *)(a3 + 96))
    {
      v41 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 48) = v41;
      v42 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a1 + 80) = v42;
      v43 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v43;
      *(_BYTE *)(a1 + 96) = 1;
    }
    *(_DWORD *)(a1 + 104) = a2;
    *(_DWORD *)(a1 + 108) = v40;
    *(_DWORD *)(a1 + 112) = v36;
    *(_BYTE *)(a1 + 116) = *(_BYTE *)(a3 + 116);
  }
  else
  {
    if (a7)
    {
      v31 = a6[3];
      *(_OWORD *)(a1 + 32) = a6[2];
      *(_OWORD *)(a1 + 48) = v31;
      v32 = a6[5];
      *(_OWORD *)(a1 + 64) = a6[4];
      *(_OWORD *)(a1 + 80) = v32;
      v33 = a6[1];
      v34 = 1;
      *(_OWORD *)a1 = *a6;
      *(_OWORD *)(a1 + 16) = v33;
    }
    else
    {
      v34 = 0;
      *(_BYTE *)a1 = 0;
    }
    *(_BYTE *)(a1 + 96) = v34;
    *(_DWORD *)(a1 + 104) = a2;
    *(_DWORD *)(a1 + 108) = a5;
    *(_DWORD *)(a1 + 112) = 0;
    *(_BYTE *)(a1 + 116) = 0;
  }
}

_QWORD *sub_20EF2CF8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[9];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = a1[7];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = a1[5];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v6 = a1[1];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  return a1;
}

_QWORD *sub_20EF2D018(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[7];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = a1[3];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = a1[1];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return a1;
}

void **sub_20EF2D08C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EF2D104(uint64_t a1, uint64_t **a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  result = (uint64_t)a2[1];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    if (result)
    {
      v5 = (_QWORD *)(*(_QWORD *)(*a2)[1] + 232 * **a2);
      v6 = v5[3];
      if (v6 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6)
        || (v7 = v5[5]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7)
        || (v8 = v5[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8)
        || (v9 = v5[9]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9))
      {
        v10 = *(_QWORD *)(*a2)[1] + 232 * **a2;
        v12 = *(uint64_t **)(v10 + 16);
        v11 = *(_QWORD *)(v10 + 24);
        v13 = (_QWORD *)(v10 + 16);
        v29 = v12;
        v30 = v11;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
        sub_20EF31B58(a1, &v29);
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
        v14 = v13[3];
        v29 = (uint64_t *)v13[2];
        v30 = v14;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
        sub_20EF31B58(a1, &v29);
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
        v15 = v13[5];
        v29 = (uint64_t *)v13[4];
        v30 = v15;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
        sub_20EF31B58(a1, &v29);
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
        v16 = v13[7];
        v29 = (uint64_t *)v13[6];
        v30 = v16;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
        sub_20EF31B58(a1, &v29);
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
      }
      v17 = *(_QWORD *)(*(_QWORD *)(*a2)[1] + 232 * **a2 + 8);
      if (v17 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17))
      {
        v19 = *a2;
        v18 = a2[1];
        if (v18)
          (*(void (**)(uint64_t *))(*v18 + 24))(a2[1]);
        while (1)
        {
          if (v18)
            (*(void (**)(uint64_t *))(*v18 + 24))(v18);
          v20 = (uint64_t *)(*(_QWORD *)v19[1] + 232 * *v19);
          v22 = *v20;
          v21 = (uint64_t *)v20[1];
          if (v21)
          {
            (*(void (**)(uint64_t *))(*v21 + 24))(v21);
            (*(void (**)(uint64_t *))(*v21 + 24))(v21);
          }
          if (v18)
            (*(void (**)(uint64_t *))(*v18 + 40))(v18);
          if (v21)
            (*(void (**)(uint64_t *))(*v21 + 40))(v21);
          sub_20EF3193C(a1 + 24, *v19);
          if (v18)
            (*(void (**)(uint64_t *))(*v18 + 40))(v18);
          if (!v21)
            break;
          if (!(*(uint64_t (**)(uint64_t *))(*v21 + 48))(v21))
            break;
          v19 = (uint64_t *)v22;
          v23 = (_QWORD *)(**(_QWORD **)(v22 + 8) + 232 * *(_QWORD *)v22);
          v24 = v23[3];
          if (v24)
          {
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24))
              break;
          }
          v25 = v23[5];
          if (v25)
          {
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25))
              break;
          }
          v26 = v23[7];
          if (v26)
          {
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 48))(v26))
              break;
          }
          v27 = v23[9];
          v18 = v21;
          if (v27)
          {
            v18 = v21;
            if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27))
              break;
          }
        }
        result = sub_20EF2E9CC(a1);
        if (v21)
          return (*(uint64_t (**)(uint64_t *))(*v21 + 40))(v21);
      }
      else
      {
        v28 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
        return sub_20EF3193C(a1 + 24, **a2);
      }
    }
  }
  return result;
}

void sub_20EF2D494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF2D554(uint64_t *a1, uint64_t a2, float32x2_t *a3, int32x2_t a4)
{
  uint64_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  __int8 v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  void **v24;
  unint64_t v25;
  void *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  BOOL v49;
  void *v51;
  int v52;
  float v53;
  float v54;
  float v55;
  int v56;
  int v57;
  float32x2_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  float v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t result;
  float32x2_t v85;
  __int32 v86;
  uint64_t v87;
  __int32 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t *v98[2];
  void *__p[2];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  __int128 v108;
  __int128 *v109;
  char v110;
  __int128 v111;
  __int128 v112;

  v7 = *(_QWORD *)(a2 + 16);
  if (!v7 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7))
  {
    a4.i32[0] = *(_DWORD *)a2;
    v8 = (float32x2_t)vdup_lane_s32(a4, 0);
    v9 = vmul_n_f32(vcvt_f32_s32(vcvt_s32_f32(vrndm_f32(vdiv_f32(*a3, v8)))), *(float *)a2);
    v10 = vadd_f32(v8, v9);
    v11 = vcgt_f32(v9, v10);
    v12 = v11.i8[4];
    v13 = (v11.i8[0] & 1) == 0;
    if ((v11.i8[0] & 1) != 0)
      v14 = -1;
    else
      v14 = 0;
    LODWORD(v15) = vbsl_s8((int8x8_t)vdup_n_s32(v14), (int8x8_t)v9, (int8x8_t)v10).u32[0];
    HIDWORD(v15) = v10.i32[1];
    if (v13)
      v16 = (unint64_t)v9;
    else
      v16 = v10.u32[0] | ((unint64_t)v9.u32[1] << 32);
    if ((v12 & 1) != 0)
    {
      v16 = v16 | ((unint64_t)v10.u32[1] << 32);
      HIDWORD(v15) = v9.i32[1];
    }
    v17 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) != v17)
    {
      v18 = *(_QWORD *)(v17 - 8);
      *(_QWORD *)(a2 + 40) = v17 - 8;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      *(_OWORD *)__p = 0u;
      v104 = v16;
      v105 = v15;
      v106 = 0;
      v107 = 0;
      sub_20EF2F7A0(**(_QWORD **)(a2 + 24) + 232 * v18, (uint64_t)__p);
      if (*((_QWORD *)&v103 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v103 + 1) + 40))(*((_QWORD *)&v103 + 1));
      if (*((_QWORD *)&v102 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v102 + 1) + 40))(*((_QWORD *)&v102 + 1));
      if (*((_QWORD *)&v101 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v101 + 1) + 40))(*((_QWORD *)&v101 + 1));
      if (*((_QWORD *)&v100 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v100 + 1) + 40))(*((_QWORD *)&v100 + 1));
      if (__p[1])
        (*(void (**)(void *))(*(_QWORD *)__p[1] + 40))(__p[1]);
      v19 = *(_QWORD *)(a2 + 24);
      v20 = (_QWORD *)operator new();
      *v20 = v18;
      v20[1] = v19;
      v21 = operator new();
      *(_QWORD *)v21 = &off_24C9F1358;
      *(int64x2_t *)(v21 + 8) = vdupq_n_s64(1uLL);
      *(_QWORD *)(v21 + 24) = v20;
      v22 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v18);
      v23 = (void *)v22[1];
      *v22 = v20;
      v22[1] = v21;
      if (!v23)
        goto LABEL_46;
      goto LABEL_45;
    }
    v24 = *(void ***)(a2 + 24);
    v26 = *v24;
    v25 = (unint64_t)v24[1];
    v18 = 0x34F72C234F72C235 * ((uint64_t)(v25 - (_QWORD)*v24) >> 3);
    v27 = (unint64_t)v24[2];
    if (v25 >= v27)
    {
      v29 = v18 + 1;
      if ((unint64_t)(v18 + 1) > 0x11A7B9611A7B961)
        sub_20E867F44();
      if (0x69EE58469EE5846ALL * ((uint64_t)(v27 - (_QWORD)v26) >> 3) > v29)
        v29 = 0x69EE58469EE5846ALL * ((uint64_t)(v27 - (_QWORD)v26) >> 3);
      if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v27 - (_QWORD)v26) >> 3)) >= 0x8D3DCB08D3DCB0)
        v30 = 0x11A7B9611A7B961;
      else
        v30 = v29;
      *(_QWORD *)&v101 = v24 + 2;
      if (v30)
      {
        v95 = v27;
        v96 = v15;
        if (v30 > 0x11A7B9611A7B961)
          sub_20E877A38();
        v31 = (char *)operator new(232 * v30);
        v15 = v96;
        v27 = v95;
      }
      else
      {
        v31 = 0;
      }
      v32 = &v31[232 * v18];
      __p[0] = v31;
      __p[1] = v32;
      *(_OWORD *)v32 = 0u;
      *((_OWORD *)v32 + 1) = 0u;
      v33 = &v31[232 * v30];
      *((_OWORD *)v32 + 2) = 0u;
      *((_OWORD *)v32 + 3) = 0u;
      *((_OWORD *)v32 + 4) = 0u;
      *((_QWORD *)v32 + 10) = v16;
      *((_QWORD *)v32 + 11) = v15;
      v32[96] = 0;
      v32[216] = 0;
      v32[224] = 1;
      v28 = v32 + 232;
      *(_QWORD *)&v100 = v32 + 232;
      *((_QWORD *)&v100 + 1) = v33;
      *(_QWORD *)&v112 = v32;
      *((_QWORD *)&v112 + 1) = v32;
      v111 = v112;
      *(_QWORD *)&v108 = v24 + 2;
      *((_QWORD *)&v108 + 1) = &v111;
      v109 = &v112;
      v110 = 0;
      if ((void *)v25 == v26)
      {
        v34 = (void *)v25;
      }
      else
      {
        do
        {
          v25 -= 232;
          sub_20EF2F980(v32 - 232, v25);
          v32 = (char *)(*((_QWORD *)&v112 + 1) - 232);
          *((_QWORD *)&v112 + 1) -= 232;
        }
        while ((void *)v25 != v26);
        v34 = *v24;
        v25 = (unint64_t)v24[1];
        v27 = (unint64_t)v24[2];
        v33 = (char *)*((_QWORD *)&v100 + 1);
        v28 = (char *)v100;
      }
      *v24 = v32;
      __p[0] = v34;
      __p[1] = v34;
      v24[1] = v28;
      *(_QWORD *)&v100 = v25;
      v24[2] = v33;
      *((_QWORD *)&v100 + 1) = v27;
      sub_20EF2FC64(__p, (uint64_t)v34);
      if (__p[0])
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)(v25 + 48) = 0u;
      *(_OWORD *)(v25 + 64) = 0u;
      *(_OWORD *)(v25 + 16) = 0u;
      *(_OWORD *)(v25 + 32) = 0u;
      *(_OWORD *)v25 = 0u;
      *(_QWORD *)(v25 + 80) = v16;
      *(_QWORD *)(v25 + 88) = v15;
      *(_BYTE *)(v25 + 96) = 0;
      *(_BYTE *)(v25 + 216) = 0;
      v28 = (char *)(v25 + 232);
      *(_BYTE *)(v25 + 224) = 1;
    }
    v24[1] = v28;
    v35 = *(_QWORD *)(a2 + 24);
    v36 = (_QWORD *)operator new();
    *v36 = v18;
    v36[1] = v35;
    __p[0] = v36;
    v37 = (char *)operator new();
    *(_QWORD *)v37 = &off_24C9F1358;
    *(int64x2_t *)(v37 + 8) = vdupq_n_s64(1uLL);
    *((_QWORD *)v37 + 3) = v36;
    __p[1] = v37;
    v38 = *(_QWORD **)(a2 + 64);
    if ((unint64_t)v38 >= *(_QWORD *)(a2 + 72))
    {
      v39 = sub_20EF2FD28((void **)(a2 + 56), (uint64_t)__p);
      v23 = __p[1];
      *(_QWORD *)(a2 + 64) = v39;
      if (v23)
LABEL_45:
        (*(void (**)(void *))(*(_QWORD *)v23 + 32))(v23);
    }
    else
    {
      *v38 = v36;
      v38[1] = v37;
      *(_QWORD *)(a2 + 64) = v38 + 2;
    }
LABEL_46:
    v97 = *(_OWORD *)(*(_QWORD *)(a2 + 56) + 16 * v18);
    v40 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v18 + 8);
    (*(void (**)(uint64_t))(**((_QWORD **)&v97 + 1) + 24))(v40);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
    v41 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a2 + 8) = v97;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  }
  v42 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 8) + 232 * **(_QWORD **)(a2 + 8);
  __p[0] = *(void **)(v42 + 80);
  __p[1] = *(void **)(v42 + 88);
  v44 = *((float *)__p + 1);
  v43 = *(float *)__p;
  v46 = *((float *)&__p[1] + 1);
  v45 = *(float *)&__p[1];
  while (1)
  {
    v47 = a3->f32[0];
    if (v43 <= a3->f32[0])
    {
      v48 = a3->f32[1];
      v49 = v44 > v48 || v45 <= v47;
      if (!v49 && v46 > v48)
        break;
    }
    v51 = __p[0];
    if (v47 >= *(float *)__p)
    {
      if (v47 >= *(float *)&__p[1])
      {
        v52 = 1;
        v53 = *((float *)&__p[1] + 1);
        v54 = a3->f32[1];
        v55 = *((float *)__p + 1);
        if (v54 < *((float *)__p + 1))
        {
LABEL_68:
          v56 = 0;
          v57 = -1;
          v58 = vsub_f32((float32x2_t)__p[1], (float32x2_t)__p[0]);
          if (v52 != 1)
            goto LABEL_69;
          goto LABEL_76;
        }
      }
      else
      {
        v52 = 0;
        v53 = *((float *)&__p[1] + 1);
        v54 = a3->f32[1];
        v55 = *((float *)__p + 1);
        if (v54 < *((float *)__p + 1))
          goto LABEL_68;
      }
    }
    else
    {
      v52 = -1;
      v53 = *((float *)&__p[1] + 1);
      v54 = a3->f32[1];
      v55 = *((float *)__p + 1);
      if (v54 < *((float *)__p + 1))
        goto LABEL_68;
    }
    if (v54 >= v53)
    {
      v56 = 1;
      v57 = 1;
      v58 = vsub_f32((float32x2_t)__p[1], (float32x2_t)__p[0]);
      if (v52 != 1)
      {
LABEL_69:
        if (v52)
        {
          if ((v57 + 1) <= 1)
            goto LABEL_74;
          if (v56)
          {
            LODWORD(v59) = vsub_f32((float32x2_t)__p[0], v58).u32[0];
            HIDWORD(v59) = HIDWORD(__p[0]);
            LODWORD(v60) = __p[1];
            HIDWORD(v60) = vadd_f32(*(float32x2_t *)(__p + 8), v58).i32[1];
            v51 = v59;
            v61 = 1;
            goto LABEL_79;
          }
        }
        else if (v54 < v55)
        {
LABEL_74:
          v51 = (void *)vsub_f32((float32x2_t)__p[0], v58);
          v60 = __p[1];
          v61 = 3;
          goto LABEL_79;
        }
        goto LABEL_78;
      }
    }
    else
    {
      v56 = 0;
      v57 = 0;
      v58 = vsub_f32((float32x2_t)__p[1], (float32x2_t)__p[0]);
      if (v52 != 1)
        goto LABEL_69;
    }
LABEL_76:
    if (v54 < v55)
    {
      LODWORD(v60) = vadd_f32((float32x2_t)__p[1], v58).u32[0];
      HIDWORD(v60) = HIDWORD(__p[1]);
      HIDWORD(v51) = vsub_f32(*(float32x2_t *)__p, v58).i32[1];
      v61 = 2;
      goto LABEL_79;
    }
LABEL_78:
    v61 = 0;
    v60 = (void *)vadd_f32((float32x2_t)__p[1], v58);
LABEL_79:
    __p[0] = v51;
    v43 = *(float *)&v51;
    if ((vcgt_f32((float32x2_t)v51, (float32x2_t)__p[1]).u8[0] & 1) != 0)
    {
      LODWORD(__p[0]) = __p[1];
      v43 = *(float *)&__p[1];
      v44 = *((float *)&v51 + 1);
      if (v53 >= *((float *)&v51 + 1))
      {
LABEL_81:
        __p[1] = v60;
        if (v43 > *(float *)&v60)
          goto LABEL_82;
        goto LABEL_86;
      }
    }
    else
    {
      v44 = *((float *)&v51 + 1);
      if (v53 >= *((float *)&v51 + 1))
        goto LABEL_81;
    }
    *((float *)__p + 1) = v53;
    v44 = v53;
    __p[1] = v60;
    if (v43 > *(float *)&v60)
    {
LABEL_82:
      LODWORD(__p[0]) = (_DWORD)v60;
      *(float *)&__p[1] = v43;
      v45 = v43;
      v62 = *((float *)&v60 + 1);
      v43 = *(float *)&v60;
      if (v44 <= *((float *)&v60 + 1))
        goto LABEL_83;
      goto LABEL_87;
    }
LABEL_86:
    v62 = *((float *)&v60 + 1);
    v45 = *(float *)&v60;
    if (v44 <= *((float *)&v60 + 1))
    {
LABEL_83:
      v46 = *((float *)&v60 + 1);
      goto LABEL_88;
    }
LABEL_87:
    HIDWORD(__p[0]) = HIDWORD(v60);
    *((float *)&__p[1] + 1) = v44;
    v46 = v44;
    v44 = v62;
LABEL_88:
    sub_20EF2F2E8(&v108, (uint64_t **)(a2 + 24), (__int128 *)__p);
    v63 = *(uint64_t **)(a2 + 8);
    v64 = *v63;
    v65 = *(_QWORD *)v63[1];
    v66 = v108;
    if (*((_QWORD *)&v108 + 1))
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v108 + 1) + 24))(*((_QWORD *)&v108 + 1));
      (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 24))(*((_QWORD *)&v66 + 1));
    }
    v67 = v65 + 232 * v64;
    v68 = *(_QWORD *)(v67 + 8);
    *(_OWORD *)v67 = v66;
    if (v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
    if (*((_QWORD *)&v66 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 40))(*((_QWORD *)&v66 + 1));
    v69 = *(_QWORD *)v66;
    v70 = **(_QWORD **)(v66 + 8);
    v72 = *(_QWORD *)(a2 + 8);
    v71 = *(_QWORD *)(a2 + 16);
    if (v71)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v71 + 24))(*(_QWORD *)(a2 + 16));
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71);
    }
    v73 = v70 + 232 * v69 + 16 * v61;
    v74 = *(_QWORD *)(v73 + 24);
    *(_QWORD *)(v73 + 16) = v72;
    *(_QWORD *)(v73 + 24) = v71;
    if (v74)
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
    if (v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 40))(v71);
    if (*((_QWORD *)&v66 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 24))(*((_QWORD *)&v66 + 1));
    v75 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a2 + 8) = v66;
    if (v75)
      (*(void (**)(uint64_t))(*(_QWORD *)v75 + 40))(v75);
    if (*((_QWORD *)&v66 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 40))(*((_QWORD *)&v66 + 1));
  }
  v77 = *(_QWORD *)(a2 + 8);
  v76 = *(_QWORD *)(a2 + 16);
  v78 = *(__n128 *)(**(_QWORD **)(v77 + 8) + 232 * *(_QWORD *)v77 + 80);
  *(__n128 *)__p = v78;
  *a1 = v77;
  a1[1] = v76;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 24))(v76);
  v79 = 1;
  while (2)
  {
    v80 = (_QWORD *)(**(_QWORD **)(v77 + 8) + 232 * *(_QWORD *)v77);
    v81 = v80[3];
    if (v81 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 48))(v81)
      || (v82 = v80[5]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 48))(v82)
      || (v83 = v80[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 48))(v83)
      || (result = v80[9]) != 0
      && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result)) != 0
      || !v79 && (float)(*(float *)&__p[1] - *(float *)__p) >= (float)(*(float *)a2 * 1.25))
    {
      v78.n128_u32[1] = HIDWORD(__p[0]);
      v85 = vmul_f32(vadd_f32((float32x2_t)__p[0], (float32x2_t)__p[1]), (float32x2_t)0x3F0000003F000000);
      v86 = v85.i32[0];
      if (a3->f32[0] < v85.f32[0])
      {
        v87 = 0;
        LODWORD(__p[1]) = v85.i32[0];
        if ((vcgt_f32((float32x2_t)__p[0], v85).u32[0] & 1) != 0)
        {
          v88 = v85.i32[0];
          v86 = (__int32)__p[0];
          goto LABEL_124;
        }
        goto LABEL_125;
      }
      LODWORD(__p[0]) = v85.i32[0];
      if ((vcgt_f32(v85, (float32x2_t)__p[1]).u32[0] & 1) != 0)
      {
        v88 = (__int32)__p[1];
        v87 = 1;
LABEL_124:
        LODWORD(__p[0]) = v88;
        LODWORD(__p[1]) = v86;
LABEL_125:
        v85.i32[0] = v85.i32[1];
        if (a3->f32[1] < v85.f32[1])
        {
LABEL_126:
          v78.n128_u32[0] = HIDWORD(__p[0]);
          HIDWORD(__p[1]) = v85.i32[0];
          if (*((float *)__p + 1) > v85.f32[0])
          {
            HIDWORD(__p[0]) = v85.i32[0];
            HIDWORD(__p[1]) = v78.n128_u32[1];
          }
          v89 = **(_QWORD **)(v77 + 8) + 232 * *(_QWORD *)v77 + 16 * v87;
          v90 = *(_QWORD *)(v89 + 24);
          if (!v90)
            goto LABEL_136;
LABEL_134:
          v91 = *(_QWORD *)(v89 + 16);
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v90 + 24))(v90, v78);
          if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 48))(v90))
            goto LABEL_136;
          v79 = 1;
          v77 = v91;
LABEL_148:
          (*(void (**)(uint64_t))(*(_QWORD *)v90 + 24))(v90);
          v94 = 0;
          v92 = (uint64_t *)a1[1];
          *a1 = v77;
          a1[1] = v90;
          if (!v92)
            goto LABEL_152;
          goto LABEL_151;
        }
      }
      else
      {
        v87 = 1;
        v85.i32[0] = v85.i32[1];
        if (a3->f32[1] < v85.f32[1])
          goto LABEL_126;
      }
      v78.n128_u32[0] = HIDWORD(__p[1]);
      HIDWORD(__p[0]) = v85.i32[0];
      if (v85.f32[0] > *((float *)&__p[1] + 1))
      {
        HIDWORD(__p[0]) = HIDWORD(__p[1]);
        HIDWORD(__p[1]) = v85.i32[0];
      }
      v87 |= 2uLL;
      v89 = **(_QWORD **)(v77 + 8) + 232 * *(_QWORD *)v77 + 16 * v87;
      v90 = *(_QWORD *)(v89 + 24);
      if (v90)
        goto LABEL_134;
LABEL_136:
      v92 = (uint64_t *)a1[1];
      v98[0] = (uint64_t *)v77;
      v98[1] = v92;
      if (v92)
        (*(void (**)(uint64_t *, __n128))(*v92 + 24))(v92, v78);
      sub_20EF2F098((uint64_t)&v108, a2, v98, (__int128 *)__p, v87);
      v93 = *((_QWORD *)&v108 + 1);
      v77 = v108;
      if (*((_QWORD *)&v108 + 1))
        (*(void (**)(_QWORD))(**((_QWORD **)&v108 + 1) + 24))(*((_QWORD *)&v108 + 1));
      if (v90)
        (*(void (**)(uint64_t))(*(_QWORD *)v90 + 40))(v90);
      if (v93)
        (*(void (**)(uint64_t))(*(_QWORD *)v93 + 40))(v93);
      if (v92)
        (*(void (**)(uint64_t *))(*v92 + 40))(v92);
      v79 = 0;
      if (v93)
      {
        v90 = v93;
        goto LABEL_148;
      }
      v90 = 0;
      v94 = 1;
      *a1 = v77;
      a1[1] = 0;
      if (!v92)
      {
LABEL_152:
        if ((v94 & 1) == 0)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v90 + 40))(v90);
          v77 = *a1;
        }
        continue;
      }
LABEL_151:
      (*(void (**)(uint64_t *))(*v92 + 40))(v92);
      goto LABEL_152;
    }
    return result;
  }
}

void sub_20EF2E080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 32))(a16);
  _Unwind_Resume(exception_object);
}

void sub_20EF2E248(uint64_t a1, uint64_t a2, uint64_t *a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v11;
  __int128 v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t *v18;
  float32x2_t *v19;
  float v20;
  BOOL v21;
  float32x2_t v22;
  float32x2_t v23;
  float v24;
  int v25;
  float32x2_t v26;
  float32x2_t v27;
  float v28;
  float v29;
  int v30;
  int v31;
  float32x2_t v32;
  uint64_t v33;
  float v34;
  float v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  float32x2_t v52;
  uint64_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float v57;
  int32x2_t v58;
  float32x2_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  float v67;
  __int128 v68;
  float32x2_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 __p;
  __int128 v75;
  __int128 v76;

  if (!a2)
    return;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11))
  {
    LODWORD(a8) = *(_DWORD *)a1;
    v52 = (float32x2_t)*a3;
    v53 = 8 * a2;
    v54 = (float32x2_t)*a3;
    do
    {
      v55 = (float32x2_t)*a3++;
      v52 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v52, v55), (int8x8_t)v55, (int8x8_t)v52);
      v54 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v55, v54), (int8x8_t)v55, (int8x8_t)v54);
      v53 -= 8;
    }
    while (v53);
    v67 = *(float *)a1;
    v69 = vmul_n_f32(vcvt_f32_s32(vcvt_s32_f32(vrndm_f32(vdiv_f32(v52, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0))))), *(float *)&a8);
    v56 = vsub_f32(v54, v69);
    if (v56.f32[0] < v56.f32[1])
      v56.f32[0] = v56.f32[1];
    v57 = log2f(floorf(v56.f32[0] / *(float *)&a8) + 1.0);
    *(float *)v58.i32 = v67 * exp2f(ceilf(v57));
    v59 = vadd_f32(v69, (float32x2_t)vdup_lane_s32(v58, 0));
    *(float32x2_t *)&__p = v69;
    *((float32x2_t *)&__p + 1) = v59;
    if (v69.f32[0] > v59.f32[0])
    {
      LODWORD(__p) = v59.i32[0];
      DWORD2(__p) = v69.i32[0];
      if (v69.f32[1] <= v59.f32[1])
      {
LABEL_74:
        sub_20EF30288(&v71, (uint64_t **)(a1 + 24), &__p);
        v60 = *((_QWORD *)&v71 + 1);
        v61 = v71;
        if (!*((_QWORD *)&v71 + 1))
          goto LABEL_79;
        goto LABEL_78;
      }
    }
    else if (v69.f32[1] <= v59.f32[1])
    {
      goto LABEL_74;
    }
    DWORD1(__p) = v59.i32[1];
    HIDWORD(__p) = v69.i32[1];
    sub_20EF30288(&v71, (uint64_t **)(a1 + 24), &__p);
    v60 = *((_QWORD *)&v71 + 1);
    v61 = v71;
    if (!*((_QWORD *)&v71 + 1))
    {
LABEL_79:
      v62 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v61;
      *(_QWORD *)(a1 + 16) = v60;
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 40))(v62);
      if (v60)
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60);
      return;
    }
LABEL_78:
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
    goto LABEL_79;
  }
  v72 = 0u;
  v73 = 0u;
  v71 = 0u;
  sub_20EEC02BC(&v71, a3, (8 * a2) >> 3);
  v13 = (void **)*((_QWORD *)&v71 + 1);
  __p = v71;
  v14 = (void **)v72;
  v75 = v72;
  v15 = *((_QWORD *)&v73 + 1);
  v76 = v73;
  if (!*((_QWORD *)&v73 + 1))
    goto LABEL_84;
  do
  {
    *(_QWORD *)&v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&__p + 1)
                                            + (((unint64_t)v76 >> 6) & 0x3FFFFFFFFFFFFF8))
                                + 8 * (v76 & 0x1FF));
    v68 = v12;
    *(_QWORD *)&v76 = v76 + 1;
    *((_QWORD *)&v76 + 1) = v15 - 1;
    if ((unint64_t)v76 >= 0x400)
    {
      operator delete(**((void ***)&__p + 1));
      *((_QWORD *)&__p + 1) += 8;
      *(_QWORD *)&v76 = v76 - 512;
    }
    v16 = **(_QWORD **)(a1 + 8);
    v17 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v18 = (float32x2_t *)(v17 + 232 * v16);
    v20 = v18[10].f32[0];
    v19 = v18 + 10;
    if (v20 > *(float *)&v68
      || (v19->f32[1] <= *((float *)&v68 + 1) ? (v21 = *(float *)(v17 + 232 * v16 + 88) <= *(float *)&v68) : (v21 = 1),
          v21 || *(float *)(v17 + 232 * v16 + 92) <= *((float *)&v68 + 1)))
    {
      v22 = *v19;
      v23 = *(float32x2_t *)(v17 + 232 * v16 + 88);
      v24 = v22.f32[0];
      if (*(float *)&v68 >= v22.f32[0])
      {
        if (*(float *)&v68 >= v23.f32[0])
        {
          v25 = 1;
          v26 = v22;
          v27 = v23;
          v28 = v23.f32[1];
          v29 = v22.f32[1];
          if (v22.f32[1] > *((float *)&v68 + 1))
            goto LABEL_24;
        }
        else
        {
          v25 = 0;
          v26 = v22;
          v27 = v23;
          v28 = v23.f32[1];
          v29 = v22.f32[1];
          if (v22.f32[1] > *((float *)&v68 + 1))
            goto LABEL_24;
        }
      }
      else
      {
        v25 = -1;
        v26 = v22;
        v27 = v23;
        v28 = v23.f32[1];
        v29 = v22.f32[1];
        if (v22.f32[1] > *((float *)&v68 + 1))
        {
LABEL_24:
          v30 = 0;
          v31 = -1;
          v32 = vsub_f32(v27, v26);
          if (v25 != 1)
            goto LABEL_25;
          goto LABEL_31;
        }
      }
      if (v28 <= *((float *)&v68 + 1))
      {
        v30 = 1;
        v31 = 1;
        v32 = vsub_f32(v27, v26);
        if (v25 != 1)
          goto LABEL_25;
      }
      else
      {
        v30 = 0;
        v31 = 0;
        v32 = vsub_f32(v27, v26);
        if (v25 != 1)
        {
LABEL_25:
          if (v25)
          {
            if ((v31 + 1) > 1)
            {
              if (v30)
              {
                v26.f32[0] = v24 - v32.f32[0];
                v27.i32[1] = vadd_f32(v32, v27).i32[1];
                v33 = 1;
                *(float32x2_t *)&v71 = v26;
                v34 = v24 - v32.f32[0];
                if ((float)(v24 - v32.f32[0]) <= v23.f32[0])
                  goto LABEL_39;
LABEL_38:
                LODWORD(v71) = v23.i32[0];
                v34 = v23.f32[0];
                goto LABEL_39;
              }
LABEL_37:
              v33 = 0;
              v27 = vadd_f32(v32, v27);
              *(float32x2_t *)&v71 = v26;
              v34 = v26.f32[0];
              if (v26.f32[0] <= v23.f32[0])
                goto LABEL_39;
              goto LABEL_38;
            }
          }
          else if (v29 <= *((float *)&v68 + 1))
          {
            goto LABEL_37;
          }
          v26 = vsub_f32(v26, v32);
          v33 = 3;
          *(float32x2_t *)&v71 = v26;
          v34 = v26.f32[0];
          if (v26.f32[0] > v23.f32[0])
            goto LABEL_38;
LABEL_39:
          v35 = v26.f32[1];
          if (v28 < v26.f32[1])
          {
            *((float *)&v71 + 1) = v28;
            v35 = v28;
            *((float32x2_t *)&v71 + 1) = v27;
            if (v34 <= v27.f32[0])
            {
LABEL_41:
              if (v35 <= v27.f32[1])
              {
LABEL_43:
                sub_20EF2F2E8(&v70, (uint64_t **)(a1 + 24), &v71);
                v36 = *(uint64_t **)(a1 + 8);
                v37 = *v36;
                v38 = *(_QWORD *)v36[1];
                v39 = v70;
                if (*((_QWORD *)&v70 + 1))
                {
                  (*(void (**)(_QWORD))(**((_QWORD **)&v70 + 1) + 24))(*((_QWORD *)&v70 + 1));
                  (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 24))(*((_QWORD *)&v39 + 1));
                }
                v40 = v38 + 232 * v37;
                v41 = *(_QWORD *)(v40 + 8);
                *(_OWORD *)v40 = v39;
                if (v41)
                  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
                if (*((_QWORD *)&v39 + 1))
                  (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 40))(*((_QWORD *)&v39 + 1));
                v42 = *(_QWORD *)v39;
                v43 = **(_QWORD **)(v39 + 8);
                v45 = *(_QWORD *)(a1 + 8);
                v44 = *(_QWORD *)(a1 + 16);
                if (v44)
                {
                  (*(void (**)(_QWORD))(*(_QWORD *)v44 + 24))(*(_QWORD *)(a1 + 16));
                  (*(void (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44);
                }
                v46 = v43 + 232 * v42 + 16 * v33;
                v47 = *(_QWORD *)(v46 + 24);
                *(_QWORD *)(v46 + 16) = v45;
                *(_QWORD *)(v46 + 24) = v44;
                if (v47)
                  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47);
                if (v44)
                  (*(void (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
                if (*((_QWORD *)&v39 + 1))
                  (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 24))(*((_QWORD *)&v39 + 1));
                v48 = *(_QWORD *)(a1 + 16);
                *(_OWORD *)(a1 + 8) = v39;
                if (v48)
                  (*(void (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
                v49 = *((_QWORD *)&__p + 1);
                v50 = (((_QWORD)v75 - *((_QWORD *)&__p + 1)) << 6) - 1;
                if ((_QWORD)v75 == *((_QWORD *)&__p + 1))
                  v50 = 0;
                v51 = *((_QWORD *)&v76 + 1) + v76;
                if (v50 == *((_QWORD *)&v76 + 1) + (_QWORD)v76)
                {
                  sub_20EEC0DD4((uint64_t)&__p);
                  v49 = *((_QWORD *)&__p + 1);
                  v51 = *((_QWORD *)&v76 + 1) + v76;
                }
                *((_QWORD *)&v12 + 1) = *((_QWORD *)&v68 + 1);
                *(_QWORD *)(*(_QWORD *)(v49 + ((v51 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v51 & 0x1FF)) = v68;
                ++*((_QWORD *)&v76 + 1);
                if (*((_QWORD *)&v39 + 1))
                  (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 40))(*((_QWORD *)&v39 + 1));
                goto LABEL_6;
              }
LABEL_42:
              DWORD1(v71) = v27.i32[1];
              *((float *)&v71 + 3) = v35;
              goto LABEL_43;
            }
          }
          else
          {
            *((float32x2_t *)&v71 + 1) = v27;
            if (v34 <= v27.f32[0])
              goto LABEL_41;
          }
          LODWORD(v71) = v27.i32[0];
          *((float *)&v71 + 2) = v34;
          if (v35 <= v27.f32[1])
            goto LABEL_43;
          goto LABEL_42;
        }
      }
LABEL_31:
      if (v29 <= *((float *)&v68 + 1))
        goto LABEL_37;
      v27.f32[0] = v32.f32[0] + v23.f32[0];
      v26.i32[1] = vsub_f32(v26, v32).i32[1];
      v33 = 2;
      *(float32x2_t *)&v71 = v26;
      v34 = v26.f32[0];
      if (v26.f32[0] > v23.f32[0])
        goto LABEL_38;
      goto LABEL_39;
    }
LABEL_6:
    v15 = *((_QWORD *)&v76 + 1);
  }
  while (*((_QWORD *)&v76 + 1));
  v13 = (void **)*((_QWORD *)&__p + 1);
  v14 = (void **)v75;
LABEL_84:
  *((_QWORD *)&v76 + 1) = 0;
  v63 = (char *)v14 - (char *)v13;
  if ((unint64_t)((char *)v14 - (char *)v13) >= 0x11)
  {
    do
    {
      operator delete(*v13);
      v14 = (void **)v75;
      v13 = (void **)(*((_QWORD *)&__p + 1) + 8);
      *((_QWORD *)&__p + 1) = v13;
      v63 = v75 - (_QWORD)v13;
    }
    while ((_QWORD)v75 - (_QWORD)v13 > 0x10uLL);
  }
  v64 = v63 >> 3;
  if (v64 == 1)
  {
    v65 = 256;
LABEL_90:
    *(_QWORD *)&v76 = v65;
  }
  else if (v64 == 2)
  {
    v65 = 512;
    goto LABEL_90;
  }
  if (v13 != v14)
  {
    do
    {
      v66 = *v13++;
      operator delete(v66);
    }
    while (v13 != v14);
    if ((_QWORD)v75 != *((_QWORD *)&__p + 1))
      *(_QWORD *)&v75 = v75 + ((*((_QWORD *)&__p + 1) - v75 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if ((_QWORD)__p)
    operator delete((void *)__p);
}

void sub_20EF2E8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17)
{
  uint64_t v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  _Unwind_Resume(a1);
}

void sub_20EF2E940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  sub_20E8D41E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF2E9CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = a1 + 24;
  if (0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) - **(_QWORD **)(a1 + 24)) >> 3) != (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3)
  {
    while (1)
    {
      v4 = (_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 232 * **(_QWORD **)(a1 + 8));
      v5 = v4[3];
      if (!v5 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5))
      {
        v6 = v4[5];
        if (!v6 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6))
        {
          v7 = v4[7];
          if (!v7 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7))
          {
            result = v4[9];
            if (!result)
              return result;
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
            if (!result)
              return result;
          }
        }
      }
      v9 = *(_QWORD *)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 16);
      if (v8)
        (*(void (**)(_QWORD))(*(_QWORD *)v8 + 24))(*(_QWORD *)(a1 + 16));
      v10 = (_QWORD *)(**(_QWORD **)(v9 + 8) + 232 * *(_QWORD *)v9);
      v11 = v10[3];
      v35 = v11;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      v12 = v10[5];
      v38 = v12;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v13 = v10[7];
      v41 = v13;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      v14 = v10[9];
      v44 = v14;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
      if (v35)
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35);
        v16 = v15 == 0;
        v17 = v15 != 0;
        v18 = v38;
        if (!v38)
          goto LABEL_33;
      }
      else
      {
        v17 = 0;
        v16 = 1;
        v18 = v38;
        if (!v38)
          goto LABEL_33;
      }
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
      if (v19)
        v20 = v16;
      else
        v20 = 1;
      if (v19)
        v17 = 1;
      if (v20 != 1)
      {
LABEL_40:
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
        result = v35;
        if (v35)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
        v22 = 1;
        if (v8)
          goto LABEL_58;
        goto LABEL_59;
      }
LABEL_33:
      if (v41 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 48))(v41))
      {
        if (v17)
          goto LABEL_40;
        v17 = 1;
      }
      if (v44)
      {
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44);
        if (v17 && v21)
          goto LABEL_40;
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
      }
      if (v41)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
      result = v35;
      if (v35)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
      v22 = 0;
      if (v8)
LABEL_58:
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
LABEL_59:
      if ((v22 & 1) != 0)
        return result;
      v23 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 232 * **(_QWORD **)(a1 + 8);
      v25 = *(_QWORD *)(v23 + 16);
      v24 = (_QWORD *)(v23 + 16);
      v34 = v25;
      v26 = v24[1];
      v36 = v26;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
      v37 = v24[2];
      v27 = v24[3];
      v39 = v27;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
      v40 = v24[4];
      v28 = v24[5];
      v42 = v28;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
      v43 = v24[6];
      v29 = v24[7];
      v45 = v29;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
      if (v36
        && (v30 = v34,
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36),
            (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 48))(v36)))
      {
        v31 = v36;
      }
      else
      {
        v30 = v37;
        v31 = v39;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
        if (!v39 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 48))(v39))
        {
          v30 = v40;
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
          if (v42 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42))
          {
            v31 = v42;
          }
          else
          {
            v30 = v43;
            v31 = v45;
            if (v45)
              (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
            if (v42)
              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
          }
        }
      }
      v32 = *(_QWORD *)(**(_QWORD **)(v30 + 8) + 232 * *(_QWORD *)v30 + 8);
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
      }
      sub_20EF3193C(v2, **(_QWORD **)(a1 + 8));
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
      v33 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v30;
      *(_QWORD *)(a1 + 16) = v31;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    }
  }
  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_20EF2EF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  sub_20EF2D018(&a9);
  _Unwind_Resume(a1);
}

void sub_20EF2F068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EF294AC(&a9);
  JUMPOUT(0x20EF2F074);
}

uint64_t sub_20EF2F098(uint64_t a1, uint64_t a2, uint64_t **a3, __int128 *a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;

  v9 = a5;
  v10 = *(_QWORD *)(*(_QWORD *)(*a3)[1] + 232 * **a3 + 16 * a5 + 24);
  if (v10
    && ((*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10),
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10),
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10),
        v11))
  {
    v12 = *(_QWORD *)(*a3)[1] + 232 * **a3 + 16 * v9;
    result = *(_QWORD *)(v12 + 24);
    *(_QWORD *)a1 = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(a1 + 8) = result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  else
  {
    sub_20EF30288((_OWORD *)a1, (uint64_t **)(a2 + 24), a4);
    v14 = **a3;
    v15 = *(_QWORD *)(*a3)[1];
    v17 = *(_QWORD **)a1;
    v16 = *(_QWORD *)(a1 + 8);
    if (v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    }
    v18 = v15 + 232 * v14 + 16 * v9;
    v19 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 16) = v17;
    *(_QWORD *)(v18 + 24) = v16;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    v21 = v17;
    v20 = *v17;
    v22 = *(_QWORD *)v21[1];
    v24 = *a3;
    v23 = a3[1];
    if (v23)
    {
      (*(void (**)(uint64_t *))(*v23 + 24))(v23);
      (*(void (**)(uint64_t *))(*v23 + 24))(v23);
    }
    v25 = (uint64_t **)(v22 + 232 * v20);
    result = (uint64_t)v25[1];
    *v25 = v24;
    v25[1] = v23;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    if (v23)
      return (*(uint64_t (**)(uint64_t *))(*v23 + 40))(v23);
  }
  return result;
}

void sub_20EF2F260(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF2F2E8(_OWORD *a1, uint64_t **a2, __int128 *a3)
{
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  void **v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  char *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;
  void **v26;
  _QWORD *v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  void *__p[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  char v42;
  unint64_t *v43;
  __int128 *v44;
  __int128 *v45;
  char v46;
  __int128 v47;
  __int128 v48;

  v5 = a2[2];
  if (a2[1] == v5)
  {
    v13 = (void **)*a2;
    v15 = **a2;
    v14 = (*a2)[1];
    v6 = 0x34F72C234F72C235 * ((uint64_t)(v14 - v15) >> 3);
    v17 = (unint64_t *)(*a2 + 2);
    v16 = (void *)*v17;
    if (v14 >= *v17)
    {
      v19 = v6 + 1;
      if ((unint64_t)(v6 + 1) > 0x11A7B9611A7B961)
        sub_20E867F44();
      v20 = *a3;
      if (0x69EE58469EE5846ALL * (((uint64_t)v16 - v15) >> 3) > v19)
        v19 = 0x69EE58469EE5846ALL * (((uint64_t)v16 - v15) >> 3);
      if ((unint64_t)(0x34F72C234F72C235 * (((uint64_t)v16 - v15) >> 3)) >= 0x8D3DCB08D3DCB0)
        v21 = 0x11A7B9611A7B961;
      else
        v21 = v19;
      *(_QWORD *)&v37 = *a2 + 2;
      if (v21)
      {
        v33 = v20;
        if (v21 > 0x11A7B9611A7B961)
          sub_20E877A38();
        v22 = (char *)operator new(232 * v21);
        v20 = v33;
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[8 * ((uint64_t)(v14 - v15) >> 3)];
      __p[0] = v22;
      __p[1] = v23;
      *(_OWORD *)v23 = 0u;
      *((_OWORD *)v23 + 1) = 0u;
      v24 = &v22[232 * v21];
      *((_OWORD *)v23 + 2) = 0u;
      *((_OWORD *)v23 + 3) = 0u;
      *((_OWORD *)v23 + 4) = 0u;
      *((_OWORD *)v23 + 5) = v20;
      v23[96] = 0;
      v23[216] = 0;
      v23[224] = 1;
      v18 = v23 + 232;
      *(_QWORD *)&v36 = v23 + 232;
      *((_QWORD *)&v36 + 1) = v24;
      *(_QWORD *)&v48 = v23;
      *((_QWORD *)&v48 + 1) = v23;
      v47 = v48;
      v43 = v17;
      v44 = &v47;
      v45 = &v48;
      v46 = 0;
      if (v14 == v15)
      {
        v25 = (void *)v14;
      }
      else
      {
        do
        {
          v14 -= 232;
          sub_20EF2F980(v23 - 232, v14);
          v23 = (char *)(*((_QWORD *)&v48 + 1) - 232);
          *((_QWORD *)&v48 + 1) -= 232;
        }
        while (v14 != v15);
        v25 = *v13;
        v14 = (unint64_t)v13[1];
        v16 = v13[2];
        v24 = (char *)*((_QWORD *)&v36 + 1);
        v18 = (char *)v36;
      }
      *v13 = v23;
      __p[0] = v25;
      __p[1] = v25;
      v13[1] = v18;
      *(_QWORD *)&v36 = v14;
      v13[2] = v24;
      *((_QWORD *)&v36 + 1) = v16;
      sub_20EF2FC64(__p, (uint64_t)v25);
      if (__p[0])
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)v14 = 0u;
      *(_QWORD *)(v14 + 80) = *(_QWORD *)a3;
      *(_QWORD *)(v14 + 88) = *((_QWORD *)a3 + 1);
      *(_BYTE *)(v14 + 96) = 0;
      *(_BYTE *)(v14 + 216) = 0;
      *(_BYTE *)(v14 + 224) = 1;
      v18 = (char *)(v14 + 232);
    }
    v13[1] = v18;
    v26 = (void **)*a2;
    v27 = (_QWORD *)operator new();
    *v27 = v6;
    v27[1] = v26;
    __p[0] = v27;
    v28 = (char *)operator new();
    *(_QWORD *)v28 = &off_24C9F1358;
    *(int64x2_t *)(v28 + 8) = vdupq_n_s64(1uLL);
    *((_QWORD *)v28 + 3) = v27;
    __p[1] = v28;
    v29 = a2[5];
    if (v29 >= a2[6])
    {
      v30 = sub_20EF2FD28((void **)a2 + 4, (uint64_t)__p);
      v12 = __p[1];
      a2[5] = (uint64_t *)v30;
      if (v12)
LABEL_35:
        (*(void (**)(void *))(*(_QWORD *)v12 + 32))(v12);
    }
    else
    {
      *v29 = (uint64_t)v27;
      v29[1] = (uint64_t)v28;
      a2[5] = v29 + 2;
    }
  }
  else
  {
    v6 = *(v5 - 1);
    a2[2] = v5 - 1;
    v37 = 0u;
    v38 = 0u;
    *(_OWORD *)__p = 0u;
    v36 = 0u;
    v7 = *a3;
    v39 = 0u;
    v40 = v7;
    v41 = 0;
    v42 = 0;
    sub_20EF2F7A0(**a2 + 232 * v6, (uint64_t)__p);
    if (*((_QWORD *)&v39 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 40))(*((_QWORD *)&v39 + 1));
    if (*((_QWORD *)&v38 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v38 + 1) + 40))(*((_QWORD *)&v38 + 1));
    if (*((_QWORD *)&v37 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 40))(*((_QWORD *)&v37 + 1));
    if (*((_QWORD *)&v36 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 40))(*((_QWORD *)&v36 + 1));
    if (__p[1])
      (*(void (**)(void *))(*(_QWORD *)__p[1] + 40))(__p[1]);
    v8 = (void **)*a2;
    v9 = (_QWORD *)operator new();
    *v9 = v6;
    v9[1] = v8;
    v10 = operator new();
    *(_QWORD *)v10 = &off_24C9F1358;
    *(int64x2_t *)(v10 + 8) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v10 + 24) = v9;
    v11 = &a2[4][2 * v6];
    v12 = (void *)v11[1];
    *v11 = (uint64_t)v9;
    v11[1] = v10;
    if (v12)
      goto LABEL_35;
  }
  v34 = *(_OWORD *)&a2[4][2 * v6];
  v31 = a2[4][2 * v6 + 1];
  (*(void (**)(_QWORD))(**((_QWORD **)&v34 + 1) + 24))(*((_QWORD *)&v34 + 1));
  *a1 = v34;
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
}

void sub_20EF2F714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12);
  _Unwind_Resume(exception_object);
}

void sub_20EF2F778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (!*(_BYTE *)(v3 - 120))
    sub_20EF2FBB8((_QWORD *)(v3 - 144));
  sub_20EF2F94C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF2F7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  if (!*(_BYTE *)(a1 + 224))
  {
    sub_20EF30114(a1, a2);
    *(_BYTE *)(a1 + 224) = 1;
    return a1;
  }
  v5 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    (*(void (**)(_QWORD))(*(_QWORD *)v4 + 24))(*(_QWORD *)(a2 + 8));
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v4;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  sub_20EF30024((_QWORD *)(a1 + 16), (uint64_t *)(a2 + 16));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v7 = (_OWORD *)(a1 + 96);
  v8 = (_OWORD *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 216) == *(unsigned __int8 *)(a2 + 216))
  {
    if (*(_BYTE *)(a1 + 216))
    {
      if (*(unsigned __int8 *)(a1 + 192) == *(unsigned __int8 *)(a2 + 192))
      {
        if (*(_BYTE *)(a1 + 192))
        {
          v9 = *(_OWORD *)(a2 + 112);
          *v7 = *v8;
          *(_OWORD *)(a1 + 112) = v9;
          v10 = *(_OWORD *)(a2 + 128);
          v11 = *(_OWORD *)(a2 + 144);
          v12 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v12;
          *(_OWORD *)(a1 + 128) = v10;
          *(_OWORD *)(a1 + 144) = v11;
        }
      }
      else if (*(_BYTE *)(a1 + 192))
      {
        *(_BYTE *)(a1 + 192) = 0;
      }
      else
      {
        v19 = *(_OWORD *)(a2 + 112);
        *v7 = *v8;
        *(_OWORD *)(a1 + 112) = v19;
        v20 = *(_OWORD *)(a2 + 128);
        v21 = *(_OWORD *)(a2 + 144);
        v22 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v22;
        *(_OWORD *)(a1 + 128) = v20;
        *(_OWORD *)(a1 + 144) = v21;
        *(_BYTE *)(a1 + 192) = 1;
      }
      v23 = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 205) = *(_QWORD *)(a2 + 205);
      *(_QWORD *)(a1 + 200) = v23;
      return a1;
    }
    return a1;
  }
  if (*(_BYTE *)(a1 + 216))
  {
    *(_BYTE *)(a1 + 216) = 0;
    return a1;
  }
  else
  {
    *(_BYTE *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 192) = 0;
    if (*(_BYTE *)(a2 + 192))
    {
      v14 = *(_OWORD *)(a2 + 112);
      *v7 = *v8;
      *(_OWORD *)(a1 + 112) = v14;
      v15 = *(_OWORD *)(a2 + 128);
      v16 = *(_OWORD *)(a2 + 144);
      v17 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v17;
      *(_OWORD *)(a1 + 128) = v15;
      *(_OWORD *)(a1 + 144) = v16;
      *(_BYTE *)(a1 + 192) = 1;
    }
    v18 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 205) = *(_QWORD *)(a2 + 205);
    *(_QWORD *)(a1 + 200) = v18;
    *(_BYTE *)(a1 + 216) = 1;
    return a1;
  }
}

void **sub_20EF2F94C(void **a1)
{
  sub_20EF2FC64(a1, (uint64_t)a1[1]);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_BYTE *sub_20EF2F980(_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[224] = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    sub_20EF2FA44((uint64_t)a1, a2);
    a1[224] = 1;
  }
  return a1;
}

void sub_20EF2F9C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(v1 + 224))
  {
    v3 = *(_QWORD *)(v1 + 72);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    v4 = *(_QWORD *)(v1 + 56);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v5 = *(_QWORD *)(v1 + 40);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = *(_QWORD *)(v1 + 24);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    v7 = *(_QWORD *)(v1 + 8);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF2FA44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    *(_BYTE *)(a1 + 192) = 0;
    if (*(_BYTE *)(a2 + 192))
    {
      v10 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v10;
      v11 = *(_OWORD *)(a2 + 128);
      v12 = *(_OWORD *)(a2 + 144);
      v13 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v13;
      *(_OWORD *)(a1 + 128) = v11;
      *(_OWORD *)(a1 + 144) = v12;
      *(_BYTE *)(a1 + 192) = 1;
    }
    v14 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 205) = *(_QWORD *)(a2 + 205);
    *(_QWORD *)(a1 + 200) = v14;
    *(_BYTE *)(a1 + 216) = 1;
  }
  return a1;
}

void sub_20EF2FB64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EF2FB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    v1 -= 16;
    if (v1 == v0)
      JUMPOUT(0x20EF2FB68);
  }
}

_QWORD *sub_20EF2FBB8(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  while (v1 != v2)
  {
    if (*(_BYTE *)(v1 + 224))
    {
      v3 = *(_QWORD *)(v1 + 72);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      v4 = *(_QWORD *)(v1 + 56);
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      v5 = *(_QWORD *)(v1 + 40);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v6 = *(_QWORD *)(v1 + 24);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      result = *(_QWORD **)(v1 + 8);
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
    }
    v1 += 232;
  }
  return result;
}

_QWORD *sub_20EF2FC64(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v4[2] = v2 - 232;
      if (*(_BYTE *)(v2 - 8))
      {
        v5 = *(_QWORD *)(v2 - 160);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v6 = *(_QWORD *)(v2 - 176);
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        v7 = *(_QWORD *)(v2 - 192);
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
        v8 = *(_QWORD *)(v2 - 208);
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        result = *(_QWORD **)(v2 - 224);
        if (result)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
      }
      v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

char *sub_20EF2FD28(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_20E867F44();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_20E877A38();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v13 = v11 + 16;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v11[v16];
      *((_QWORD *)v17 - 2) = *(_QWORD *)&v14[v16 - 16];
      v18 = *(_QWORD *)&v14[v16 - 8];
      *((_QWORD *)v17 - 1) = v18;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
      v16 -= 16;
    }
    while (&v14[v16] != v15);
    v14 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = &v11[v16];
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v14)
    {
      v20 = *((_QWORD *)v19 - 1);
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
      v19 -= 16;
    }
  }
  if (v14)
    operator delete(v14);
  return v11 + 16;
}

uint64_t sub_20EF2FEE4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      v4 = i - 16;
      *(_QWORD *)(a1 + 16) = i - 16;
      v5 = *(_QWORD *)(i - 8);
      if (v5)
        break;
      i -= 16;
      if (v4 == v3)
        goto LABEL_6;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20EF2FF5C()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EF2FF70(uint64_t result)
{
  ++*(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_20EF2FF80(uint64_t result)
{
  ++*(_QWORD *)(result + 16);
  return result;
}

uint64_t sub_20EF2FF90(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 8) - 1;
  *(_QWORD *)(result + 8) = v1;
  if (!v1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 24);
    if (v3)
      MEMORY[0x212BC6398](v3, 0x1020C405730B0C9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  }
  return result;
}

_QWORD *sub_20EF2FFF0(_QWORD *result)
{
  uint64_t v1;

  v1 = result[2] - 1;
  result[2] = v1;
  if (result)
  {
    if (!v1)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t sub_20EF30014(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_20EF3001C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

_QWORD *sub_20EF30024(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a2;
  v4 = a2[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(a2[1]);
  v6 = a1[1];
  *a1 = v5;
  a1[1] = v4;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  v8 = a2[2];
  v7 = a2[3];
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(a2[3]);
  v9 = a1[3];
  a1[2] = v8;
  a1[3] = v7;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  v11 = a2[4];
  v10 = a2[5];
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(a2[5]);
  v12 = a1[5];
  a1[4] = v11;
  a1[5] = v10;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  v14 = a2[6];
  v13 = a2[7];
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  v15 = a1[7];
  a1[6] = v14;
  a1[7] = v13;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  return a1;
}

uint64_t sub_20EF30114(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    *(_BYTE *)(a1 + 192) = 0;
    if (*(_BYTE *)(a2 + 192))
    {
      v10 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v10;
      v11 = *(_OWORD *)(a2 + 128);
      v12 = *(_OWORD *)(a2 + 144);
      v13 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v13;
      *(_OWORD *)(a1 + 128) = v11;
      *(_OWORD *)(a1 + 144) = v12;
      *(_BYTE *)(a1 + 192) = 1;
    }
    v14 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 205) = *(_QWORD *)(a2 + 205);
    *(_QWORD *)(a1 + 200) = v14;
    *(_BYTE *)(a1 + 216) = 1;
  }
  return a1;
}

void sub_20EF30234(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EF30258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    v2 = *(_QWORD *)(v1 - 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    v1 -= 16;
    if (v1 == v0)
      JUMPOUT(0x20EF30238);
  }
}

uint64_t sub_20EF30288(_OWORD *a1, uint64_t **a2, __int128 *a3)
{
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  void **v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  char *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;
  void **v26;
  _QWORD *v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  void *__p[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  char v42;
  unint64_t *v43;
  __int128 *v44;
  __int128 *v45;
  char v46;
  __int128 v47;
  __int128 v48;

  v5 = a2[2];
  if (a2[1] == v5)
  {
    v13 = (void **)*a2;
    v15 = **a2;
    v14 = (*a2)[1];
    v6 = 0x34F72C234F72C235 * ((uint64_t)(v14 - v15) >> 3);
    v17 = (unint64_t *)(*a2 + 2);
    v16 = (void *)*v17;
    if (v14 >= *v17)
    {
      v19 = v6 + 1;
      if ((unint64_t)(v6 + 1) > 0x11A7B9611A7B961)
        sub_20E867F44();
      v20 = *a3;
      if (0x69EE58469EE5846ALL * (((uint64_t)v16 - v15) >> 3) > v19)
        v19 = 0x69EE58469EE5846ALL * (((uint64_t)v16 - v15) >> 3);
      if ((unint64_t)(0x34F72C234F72C235 * (((uint64_t)v16 - v15) >> 3)) >= 0x8D3DCB08D3DCB0)
        v21 = 0x11A7B9611A7B961;
      else
        v21 = v19;
      *(_QWORD *)&v37 = *a2 + 2;
      if (v21)
      {
        v33 = v20;
        if (v21 > 0x11A7B9611A7B961)
          sub_20E877A38();
        v22 = (char *)operator new(232 * v21);
        v20 = v33;
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[8 * ((uint64_t)(v14 - v15) >> 3)];
      __p[0] = v22;
      __p[1] = v23;
      *(_OWORD *)v23 = 0u;
      *((_OWORD *)v23 + 1) = 0u;
      v24 = &v22[232 * v21];
      *((_OWORD *)v23 + 2) = 0u;
      *((_OWORD *)v23 + 3) = 0u;
      *((_OWORD *)v23 + 4) = 0u;
      *((_OWORD *)v23 + 5) = v20;
      v23[96] = 0;
      v23[216] = 0;
      v23[224] = 1;
      v18 = v23 + 232;
      *(_QWORD *)&v36 = v23 + 232;
      *((_QWORD *)&v36 + 1) = v24;
      *(_QWORD *)&v48 = v23;
      *((_QWORD *)&v48 + 1) = v23;
      v47 = v48;
      v43 = v17;
      v44 = &v47;
      v45 = &v48;
      v46 = 0;
      if (v14 == v15)
      {
        v25 = (void *)v14;
      }
      else
      {
        do
        {
          v14 -= 232;
          sub_20EF2F980(v23 - 232, v14);
          v23 = (char *)(*((_QWORD *)&v48 + 1) - 232);
          *((_QWORD *)&v48 + 1) -= 232;
        }
        while (v14 != v15);
        v25 = *v13;
        v14 = (unint64_t)v13[1];
        v16 = v13[2];
        v24 = (char *)*((_QWORD *)&v36 + 1);
        v18 = (char *)v36;
      }
      *v13 = v23;
      __p[0] = v25;
      __p[1] = v25;
      v13[1] = v18;
      *(_QWORD *)&v36 = v14;
      v13[2] = v24;
      *((_QWORD *)&v36 + 1) = v16;
      sub_20EF2FC64(__p, (uint64_t)v25);
      if (__p[0])
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)v14 = 0u;
      *(_QWORD *)(v14 + 80) = *(_QWORD *)a3;
      *(_QWORD *)(v14 + 88) = *((_QWORD *)a3 + 1);
      *(_BYTE *)(v14 + 96) = 0;
      *(_BYTE *)(v14 + 216) = 0;
      *(_BYTE *)(v14 + 224) = 1;
      v18 = (char *)(v14 + 232);
    }
    v13[1] = v18;
    v26 = (void **)*a2;
    v27 = (_QWORD *)operator new();
    *v27 = v6;
    v27[1] = v26;
    __p[0] = v27;
    v28 = (char *)operator new();
    *(_QWORD *)v28 = &off_24C9F1358;
    *(int64x2_t *)(v28 + 8) = vdupq_n_s64(1uLL);
    *((_QWORD *)v28 + 3) = v27;
    __p[1] = v28;
    v29 = a2[5];
    if (v29 >= a2[6])
    {
      v30 = sub_20EF2FD28((void **)a2 + 4, (uint64_t)__p);
      v12 = __p[1];
      a2[5] = (uint64_t *)v30;
      if (v12)
LABEL_35:
        (*(void (**)(void *))(*(_QWORD *)v12 + 32))(v12);
    }
    else
    {
      *v29 = (uint64_t)v27;
      v29[1] = (uint64_t)v28;
      a2[5] = v29 + 2;
    }
  }
  else
  {
    v6 = *(v5 - 1);
    a2[2] = v5 - 1;
    v37 = 0u;
    v38 = 0u;
    *(_OWORD *)__p = 0u;
    v36 = 0u;
    v7 = *a3;
    v39 = 0u;
    v40 = v7;
    v41 = 0;
    v42 = 0;
    sub_20EF2F7A0(**a2 + 232 * v6, (uint64_t)__p);
    if (*((_QWORD *)&v39 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v39 + 1) + 40))(*((_QWORD *)&v39 + 1));
    if (*((_QWORD *)&v38 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v38 + 1) + 40))(*((_QWORD *)&v38 + 1));
    if (*((_QWORD *)&v37 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 40))(*((_QWORD *)&v37 + 1));
    if (*((_QWORD *)&v36 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 40))(*((_QWORD *)&v36 + 1));
    if (__p[1])
      (*(void (**)(void *))(*(_QWORD *)__p[1] + 40))(__p[1]);
    v8 = (void **)*a2;
    v9 = (_QWORD *)operator new();
    *v9 = v6;
    v9[1] = v8;
    v10 = operator new();
    *(_QWORD *)v10 = &off_24C9F1358;
    *(int64x2_t *)(v10 + 8) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v10 + 24) = v9;
    v11 = &a2[4][2 * v6];
    v12 = (void *)v11[1];
    *v11 = (uint64_t)v9;
    v11[1] = v10;
    if (v12)
      goto LABEL_35;
  }
  v34 = *(_OWORD *)&a2[4][2 * v6];
  v31 = a2[4][2 * v6 + 1];
  (*(void (**)(_QWORD))(**((_QWORD **)&v34 + 1) + 24))(*((_QWORD *)&v34 + 1));
  *a1 = v34;
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
}

void sub_20EF306B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12);
  _Unwind_Resume(exception_object);
}

void sub_20EF30718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (!*(_BYTE *)(v3 - 120))
    sub_20EF2FBB8((_QWORD *)(v3 - 144));
  sub_20EF2F94C((void **)va);
  _Unwind_Resume(a1);
}

void ***sub_20EF30740(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  uint64_t v6;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = *((_QWORD *)v4 - 1);
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_20EF307DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  char *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  BOOL v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  int64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  _OWORD *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  int64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  void *v118;

  v3 = a1;
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  v6 = (v4 - v5) >> 3;
  v7 = v5;
  if (v4 == v5)
    v8 = 0;
  else
    v8 = 170 * v6 - 1;
  v10 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v11 = v9 + v10;
  if (v8 != v9 + v10)
    goto LABEL_88;
  if (v10 <= 0xA9)
    v12 = 0;
  else
    v12 = -1;
  if (v10 >= 0xAA)
  {
    *(_QWORD *)(a1 + 32) = v10 - 170;
    v17 = v5 + 8;
    v18 = *(_QWORD *)v5;
    *(_QWORD *)(a1 + 8) = v5 + 8;
    if (v4 != *(char **)(a1 + 24))
    {
LABEL_85:
      *(_QWORD *)v4 = v18;
LABEL_86:
      *(_QWORD *)(v3 + 16) += 8;
      goto LABEL_87;
    }
    v19 = *(char **)a1;
    if ((unint64_t)v17 > *(_QWORD *)a1)
    {
      v20 = (uint64_t)&v17[-*(_QWORD *)a1] >> 3;
      if (v20 >= -1)
        v21 = v20 + 1;
      else
        v21 = v20 + 2;
      v22 = v21 >> 1;
      v23 = -v22;
      v24 = &v17[-8 * v22];
      v25 = v4 - v17;
      if (v4 != v17)
      {
        memmove(&v17[-8 * v22], v17, v4 - v17);
        v4 = *(char **)(v3 + 8);
      }
      v26 = &v4[8 * v23];
      v4 = &v24[v25];
      goto LABEL_24;
    }
    v33 = (v4 - v19) >> 2;
    if (v4 == v19)
      v33 = 1;
    if (v33 >> 61)
      goto LABEL_123;
    v34 = v33 >> 2;
    v35 = 8 * v33;
    v36 = (char *)operator new(8 * v33);
    v37 = &v36[8 * v34];
    v39 = v4 - v17;
    v38 = v4 == v17;
    v4 = v37;
    if (!v38)
    {
      v4 = &v37[v39 & 0xFFFFFFFFFFFFFFF8];
      v40 = v39 - 8;
      if ((unint64_t)(v39 - 8) < 0x38)
      {
        v41 = &v36[8 * v34];
        do
        {
LABEL_82:
          v82 = *(_QWORD *)v17;
          v17 += 8;
          *(_QWORD *)v41 = v82;
          v41 += 8;
        }
        while (v41 != v4);
        goto LABEL_83;
      }
      v75 = &v36[8 * v34];
      v41 = v75;
      if ((unint64_t)(v75 - v17) < 0x20)
        goto LABEL_82;
      v76 = (v40 >> 3) + 1;
      v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
      v41 = &v37[v77];
      v17 += v77;
      v78 = (__int128 *)(v5 + 24);
      v79 = v75 + 16;
      v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v81 = *v78;
        *(v79 - 1) = *(v78 - 1);
        *v79 = v81;
        v78 += 2;
        v79 += 2;
        v80 -= 4;
      }
      while (v80);
      if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_82;
    }
LABEL_83:
    *(_QWORD *)v3 = v36;
    *(_QWORD *)(v3 + 8) = v37;
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(v3 + 24) = &v36[v35];
    if (v19)
    {
      operator delete(v19);
      v4 = *(char **)(v3 + 16);
    }
    goto LABEL_85;
  }
  v13 = *(char **)(a1 + 24);
  v14 = (uint64_t)&v13[-*(_QWORD *)a1];
  if (v6 == v14 >> 3)
  {
    if (v14 >> 2 <= (unint64_t)(v6 + 1))
      v15 = v6 + 1;
    else
      v15 = v14 >> 2;
    if (!v15)
    {
      v16 = 0;
LABEL_28:
      v27 = operator new(0xFF0uLL);
      v28 = v27;
      v29 = v6 + v12;
      v30 = &v16[8 * v15];
      if (v29 == v15)
      {
        if (v15)
        {
          v31 = &v30[-((4 * v15 + 4) & 0xFFFFFFFFFFFFFFF8)];
          *(_QWORD *)v31 = v27;
          v32 = v31 + 8;
          if (v4 == v7)
            goto LABEL_53;
        }
        else
        {
          v31 = (char *)operator new(8uLL);
          v30 = v31 + 8;
          if (v16)
          {
            operator delete(v16);
            v7 = *(char **)(v3 + 8);
            v4 = *(char **)(v3 + 16);
          }
          v16 = v31;
          *(_QWORD *)v31 = v28;
          v32 = v31 + 8;
          if (v4 == v7)
            goto LABEL_53;
        }
      }
      else
      {
        v31 = &v16[8 * v29];
        *(_QWORD *)v31 = v27;
        v32 = v31 + 8;
        if (v4 == v7)
        {
LABEL_53:
          v53 = *(void **)v3;
          *(_QWORD *)v3 = v16;
          *(_QWORD *)(v3 + 8) = v31;
          *(_QWORD *)(v3 + 16) = v32;
          *(_QWORD *)(v3 + 24) = v30;
          if (v53)
            operator delete(v53);
          goto LABEL_87;
        }
      }
      do
      {
        if (v31 == v16)
        {
          if (v32 >= v30)
          {
            if (v30 == v16)
              v59 = 1;
            else
              v59 = (v30 - v16) >> 2;
            if (v59 >> 61)
              sub_20E877A38();
            v60 = (char *)operator new(8 * v59);
            v61 = v60;
            v62 = (v59 + 3) >> 2;
            v31 = &v60[8 * v62];
            v63 = v32 - v16;
            v38 = v32 == v16;
            v32 = v31;
            if (!v38)
            {
              v32 = &v31[v63 & 0xFFFFFFFFFFFFFFF8];
              v64 = v63 - 8;
              v65 = &v60[8 * v62];
              v66 = v16;
              if (v64 < 0x38)
                goto LABEL_126;
              v67 = 8 * v62;
              v65 = &v60[8 * v62];
              v66 = v16;
              if ((unint64_t)(v65 - v16) < 0x20)
                goto LABEL_126;
              v68 = (v64 >> 3) + 1;
              v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
              v65 = &v31[v69];
              v66 = &v16[v69];
              v70 = (__int128 *)(v16 + 16);
              v71 = &v60[v67 + 16];
              v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v73 = *v70;
                *((_OWORD *)v71 - 1) = *(v70 - 1);
                *(_OWORD *)v71 = v73;
                v70 += 2;
                v71 += 32;
                v72 -= 4;
              }
              while (v72);
              if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_126:
                do
                {
                  v74 = *(_QWORD *)v66;
                  v66 += 8;
                  *(_QWORD *)v65 = v74;
                  v65 += 8;
                }
                while (v65 != v32);
              }
            }
            v30 = &v60[8 * v59];
            if (v16)
              operator delete(v16);
            v16 = v61;
          }
          else
          {
            v55 = (v30 - v32) >> 3;
            if (v55 >= -1)
              v56 = v55 + 1;
            else
              v56 = v55 + 2;
            v57 = v56 >> 1;
            v31 = &v16[8 * (v56 >> 1)];
            v58 = v16;
            if (v32 != v16)
            {
              memmove(v31, v16, v32 - v16);
              v58 = v32;
            }
            v32 = (char *)v58 + 8 * v57;
          }
        }
        v54 = *((_QWORD *)v4 - 1);
        v4 -= 8;
        *((_QWORD *)v31 - 1) = v54;
        v31 -= 8;
      }
      while (v4 != *(char **)(v3 + 8));
      goto LABEL_53;
    }
    if (!(v15 >> 61))
    {
      v16 = (char *)operator new(8 * v15);
      goto LABEL_28;
    }
LABEL_123:
    sub_20E877A38();
  }
  if (v13 == v4)
  {
    v118 = operator new(0xFF0uLL);
    sub_20E8D0E10((void **)v3, &v118);
    v42 = *(_QWORD **)(v3 + 8);
    v4 = *(char **)(v3 + 16);
    v43 = 169;
    if (v4 - (char *)v42 != 8)
      v43 = 170;
    v44 = *(char **)(v3 + 24);
    *(_QWORD *)(v3 + 32) = *(_QWORD *)(v3 + 32) + v43 - 170;
    v45 = (char *)(v42 + 1);
    v18 = *v42;
    *(_QWORD *)(v3 + 8) = v42 + 1;
    if (v4 != v44)
      goto LABEL_85;
    v46 = *(char **)v3;
    if ((unint64_t)v45 > *(_QWORD *)v3)
    {
      v47 = (uint64_t)&v45[-*(_QWORD *)v3] >> 3;
      if (v47 >= -1)
        v48 = v47 + 1;
      else
        v48 = v47 + 2;
      v49 = v48 >> 1;
      v50 = -v49;
      v51 = &v45[-8 * v49];
      v52 = v4 - v45;
      if (v4 != v45)
      {
        memmove(&v45[-8 * v49], v42 + 1, v4 - v45);
        v4 = *(char **)(v3 + 8);
      }
      v26 = &v4[8 * v50];
      v4 = &v51[v52];
LABEL_24:
      *(_QWORD *)(v3 + 8) = v26;
      *(_QWORD *)(v3 + 16) = v4;
      goto LABEL_85;
    }
    v101 = (v4 - v46) >> 2;
    if (v4 == v46)
      v101 = 1;
    if (v101 >> 61)
      goto LABEL_123;
    v102 = v101 >> 2;
    v103 = 8 * v101;
    v104 = (char *)operator new(8 * v101);
    v105 = &v104[8 * v102];
    v106 = v105;
    v107 = v4 - v45;
    if (v4 != v45)
    {
      v106 = &v105[v107 & 0xFFFFFFFFFFFFFFF8];
      v108 = v107 - 8;
      if ((unint64_t)(v107 - 8) >= 0x38)
      {
        v110 = &v104[8 * v102];
        v109 = v110;
        if ((unint64_t)(v110 - v45) >= 0x20)
        {
          v111 = (v108 >> 3) + 1;
          v112 = 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
          v109 = &v105[v112];
          v45 += v112;
          v113 = (__int128 *)(v42 + 3);
          v114 = v110 + 16;
          v115 = v111 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v116 = *v113;
            *(v114 - 1) = *(v113 - 1);
            *v114 = v116;
            v113 += 2;
            v114 += 2;
            v115 -= 4;
          }
          while (v115);
          if (v111 == (v111 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_119;
        }
      }
      else
      {
        v109 = &v104[8 * v102];
      }
      do
      {
        v117 = *(_QWORD *)v45;
        v45 += 8;
        *(_QWORD *)v109 = v117;
        v109 += 8;
      }
      while (v109 != v106);
    }
LABEL_119:
    *(_QWORD *)v3 = v104;
    *(_QWORD *)(v3 + 8) = v105;
    *(_QWORD *)(v3 + 16) = v106;
    *(_QWORD *)(v3 + 24) = &v104[v103];
    if (v46)
    {
      operator delete(v46);
      v106 = *(char **)(v3 + 16);
    }
    *(_QWORD *)v106 = v18;
    goto LABEL_86;
  }
  v118 = operator new(0xFF0uLL);
  sub_20E8D0C84((char **)v3, &v118);
LABEL_87:
  v9 = *(_QWORD *)(v3 + 40);
  v7 = *(char **)(v3 + 8);
  v4 = *(char **)(v3 + 16);
  v11 = *(_QWORD *)(v3 + 32) + v9;
LABEL_88:
  v83 = &v7[8 * (v11 / 0xAA)];
  v84 = *(_QWORD *)v83;
  v85 = *(_QWORD *)v83 + 24 * (v11 % 0xAA);
  if (v4 == v7)
    v86 = 0;
  else
    v86 = v85;
  v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - v84) >> 3);
  if ((uint64_t)(v86 - v84) < -23)
  {
    v91 = 168 - v87;
    v89 = &v83[-8 * (v91 / 0xAA)];
    v90 = *(_QWORD *)v89 + 24 * (170 * (v91 / 0xAA) - v91) + 4056;
    if (v86 == v90)
      return;
  }
  else
  {
    v88 = v87 + 1;
    v89 = &v83[8 * (v88 / 0xAA)];
    v90 = *(_QWORD *)v89 + 24 * (v88 % 0xAA);
    if (v86 == v90)
      return;
  }
  do
  {
    v92 = v84 + 4080;
    if (v83 == v89)
      v93 = v90;
    else
      v93 = v92;
    if (v86 == v93)
    {
      v93 = v86;
    }
    else
    {
      v94 = v3;
      v95 = 0;
      do
      {
        v97 = a2 + v95;
        v98 = v86 + v95;
        *(_QWORD *)v98 = *(_QWORD *)(a2 + v95);
        v99 = *(_QWORD *)(a2 + v95 + 8);
        *(_QWORD *)(v98 + 8) = v99;
        if (v99)
          (*(void (**)(uint64_t))(*(_QWORD *)v99 + 24))(v99);
        v96 = *(_WORD *)(v97 + 16);
        *(_BYTE *)(v98 + 18) = *(_BYTE *)(v97 + 18);
        *(_WORD *)(v98 + 16) = v96;
        v95 += 24;
      }
      while (v98 + 24 != v93);
      v3 = v94;
      v9 = *(_QWORD *)(v94 + 40);
      a2 += v95;
    }
    v9 -= 0x5555555555555555 * ((uint64_t)(v93 - v86) >> 3);
    *(_QWORD *)(v3 + 40) = v9;
    if (v83 == v89)
      break;
    v100 = *((_QWORD *)v83 + 1);
    v83 += 8;
    v84 = v100;
    v86 = v100;
  }
  while (v100 != v90);
}

void sub_20EF30F10(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_20EF30F20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_end_catch();
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EF30F4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) -= 0x5555555555555555 * (v2 >> 3);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF30F68(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0xAA];
    v6 = (unint64_t)*v5;
    v7 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v4) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        v9 = *(_QWORD *)(v7 + 8);
        if (v9)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
          v6 = (unint64_t)*v5;
        }
        v7 += 24;
        if (v7 - v6 == 4080)
        {
          v10 = (unint64_t)v5[1];
          ++v5;
          v6 = v10;
          v7 = v10;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    v13 = 170;
LABEL_17:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20EF310FC(char **a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  char *v22;
  char *v23;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_20E867F44();
  v10 = a1[2] - v3;
  if (v10 >> 3 > v6)
    v6 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  if (v11)
  {
    if (v11 >> 60)
      sub_20E877A38();
    v12 = (char *)operator new(16 * v11);
    v13 = &v12[16 * v5];
    v14 = &v12[16 * v11];
    v23 = v14;
    *(_QWORD *)v13 = a2;
    *((_QWORD *)v13 + 1) = a3;
    if (!a3)
    {
LABEL_10:
      v15 = v13 + 16;
      v22 = v13 + 16;
      if (v4 != v3)
        goto LABEL_11;
LABEL_18:
      v19 = v3;
      goto LABEL_19;
    }
  }
  else
  {
    v13 = (char *)(16 * v5);
    v14 = 0;
    v23 = 0;
    *(_QWORD *)v13 = a2;
    *((_QWORD *)v13 + 1) = a3;
    if (!a3)
      goto LABEL_10;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  v3 = *a1;
  v4 = a1[1];
  v15 = v13 + 16;
  v22 = v13 + 16;
  if (v4 == *a1)
    goto LABEL_18;
LABEL_11:
  v16 = 0;
  do
  {
    v17 = &v13[v16];
    *((_QWORD *)v17 - 2) = *(_QWORD *)&v4[v16 - 16];
    v18 = *(_QWORD *)&v4[v16 - 8];
    *((_QWORD *)v17 - 1) = v18;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
    v16 -= 16;
  }
  while (&v4[v16] != v3);
  v19 = *a1;
  v3 = a1[1];
  v13 += v16;
  v15 = v22;
  v14 = v23;
LABEL_19:
  *a1 = v13;
  a1[1] = v15;
  a1[2] = v14;
  if (v3 == v19)
  {
    if (v3)
LABEL_21:
      operator delete(v3);
  }
  else
  {
    do
    {
      v21 = *((_QWORD *)v3 - 1);
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
      v3 -= 16;
    }
    while (v3 != v19);
    v3 = v19;
    if (v19)
      goto LABEL_21;
  }
  return v15;
}

void sub_20EF312C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EF31328((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF312E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;

  va_start(va, a2);
  for (; v3; v3 += 16)
  {
    v6 = *(_QWORD *)(v2 + 16 * v4 + 8 + v3);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  sub_20EF31328((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF31328(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      v4 = i - 16;
      *(_QWORD *)(a1 + 16) = i - 16;
      v5 = *(_QWORD *)(i - 8);
      if (v5)
        break;
      i -= 16;
      if (v4 == v3)
        goto LABEL_6;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20EF3139C(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_20E877A38();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFF0uLL);
      sub_20E8D0C84((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFF0uLL);
    sub_20E8D0E10((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFF0uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_20E877A38();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_20E877A38();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_20EF318DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EF318F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EF3190C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EF31924(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF3193C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(char **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = *(char **)(a1 + 8);
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    sub_20E867F44();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      sub_20E877A38();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_41;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_41;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  *(_QWORD *)(a1 + 16) = v7;
  v25 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * a2);
  result = v25[1];
  *v25 = 0;
  v25[1] = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  v27 = **(_QWORD **)a1 + 232 * a2;
  if (*(_BYTE *)(v27 + 224))
  {
    v28 = *(_QWORD *)(v27 + 72);
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
    v29 = *(_QWORD *)(v27 + 56);
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
    v30 = *(_QWORD *)(v27 + 40);
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    v31 = *(_QWORD *)(v27 + 24);
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
    result = *(_QWORD *)(v27 + 8);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_BYTE *)(v27 + 224) = 0;
  }
  return result;
}

uint64_t sub_20EF31B58(uint64_t a1, uint64_t **a2)
{
  uint64_t result;
  uint64_t v5;

  result = (uint64_t)a2[1];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    if (result)
    {
      v5 = *(_QWORD *)(*a2)[1] + 232 * **a2;
      sub_20EF31B58(a1, v5 + 16);
      sub_20EF31B58(a1, v5 + 32);
      sub_20EF31B58(a1, v5 + 48);
      sub_20EF31B58(a1, v5 + 64);
      sub_20EF3193C(a1 + 24, **a2);
      result = (uint64_t)a2[1];
      *a2 = 0;
      a2[1] = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    }
  }
  return result;
}

uint64_t sub_20EF31C08(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t (***v7)();
  uint64_t (***v8)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t (***v13)();
  uint64_t (***v14)();
  uint64_t (****v15)();
  uint64_t (**v16)();
  uint64_t (***v17)();
  uint64_t v18;
  uint64_t (****v19)();
  uint64_t v20;
  __int128 v21;
  uint64_t (***v22)();
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  _QWORD v27[3];
  uint64_t (***v28)();
  __int128 v29;
  __int128 v30;
  _QWORD v31[3];
  uint64_t (***v32)();
  __int128 v33;
  __int128 v34;
  uint64_t (**v35)();
  int v36;
  uint64_t (***v37)();
  __int128 v38;
  __int128 v39;
  uint64_t (**v40)();
  int v41;
  uint64_t (***v42)();
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (a2 != a3)
  {
    while (!*(_BYTE *)(a2 + 224))
    {
      a2 += 232;
      if (a2 == a3)
      {
        a2 = a3;
        break;
      }
    }
  }
  *(_QWORD *)&v39 = a2;
  *((_QWORD *)&v39 + 1) = a3;
  v7 = &v40;
  v40 = &off_24C9F13C0;
  v41 = a4;
  v42 = &v40;
  *(_QWORD *)&v43 = a3;
  v8 = &v40;
  *((_QWORD *)&v43 + 1) = a3;
  if (a2 != a3)
  {
    do
    {
      if (!v42)
        sub_20E86D37C();
      if ((((uint64_t (*)(uint64_t (***)()))(*v42)[6])(v42) & 1) != 0)
        break;
      v9 = *((_QWORD *)&v39 + 1);
      v10 = v39;
      *(_QWORD *)&v39 = v39 + 232;
      if ((_QWORD)v39 == *((_QWORD *)&v39 + 1))
      {
        v9 = v10 + 232;
      }
      else
      {
        v11 = v10 + 464;
        while (!*(_BYTE *)(v11 - 8))
        {
          *(_QWORD *)&v39 = v11;
          v12 = v11 == *((_QWORD *)&v39 + 1);
          v11 += 232;
          if (v12)
            goto LABEL_8;
        }
        v9 = v11 - 232;
      }
LABEL_8:
      ;
    }
    while (v9 != (_QWORD)v43);
    v8 = v42;
  }
  *(_QWORD *)&v34 = a3;
  *((_QWORD *)&v34 + 1) = a3;
  v13 = &v35;
  v35 = &off_24C9F13C0;
  v36 = a4;
  v37 = &v35;
  *(_QWORD *)&v38 = a3;
  *((_QWORD *)&v38 + 1) = a3;
  v26 = v39;
  v14 = (uint64_t (***)())v27;
  if (!v8)
  {
    v15 = &v28;
    goto LABEL_23;
  }
  if (v8 != &v40)
  {
    v15 = &v42;
    v28 = v8;
LABEL_23:
    *v15 = 0;
    v29 = v43;
    v30 = v34;
    v16 = &off_24C9F13C0;
    goto LABEL_24;
  }
  v28 = (uint64_t (***)())v27;
  ((void (*)(uint64_t, uint64_t))v40[3])((uint64_t)&v40, (uint64_t)v27);
  v29 = v43;
  v30 = v34;
  if (!v37)
  {
    v19 = &v32;
LABEL_31:
    *v19 = 0;
    v33 = v38;
    v17 = v37;
    if (v37 != &v35)
      goto LABEL_25;
LABEL_32:
    v18 = 4;
    goto LABEL_33;
  }
  if (v37 != &v35)
  {
    v19 = &v37;
    v32 = v37;
    goto LABEL_31;
  }
  v16 = v35;
LABEL_24:
  v32 = (uint64_t (***)())v31;
  ((void (*)(uint64_t, uint64_t))v16[3])((uint64_t)&v35, (uint64_t)v31);
  v33 = v38;
  v17 = v37;
  if (v37 == &v35)
    goto LABEL_32;
LABEL_25:
  if (!v17)
    goto LABEL_34;
  v18 = 5;
  v13 = v17;
LABEL_33:
  ((void (*)(uint64_t (***)()))(*v13)[v18])(v13);
LABEL_34:
  if (v42 == &v40)
  {
    v20 = 4;
  }
  else
  {
    if (!v42)
      goto LABEL_39;
    v20 = 5;
    v7 = v42;
  }
  ((void (*)(uint64_t (***)()))(*v7)[v20])(v7);
LABEL_39:
  *(_OWORD *)a1 = v26;
  if (v28)
  {
    if (v28 == v27)
    {
      *(_QWORD *)(a1 + 40) = a1 + 16;
      (*(void (**)(_QWORD *))(v27[0] + 24))(v27);
    }
    else
    {
      *(_QWORD *)(a1 + 40) = v28;
      v28 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
  }
  v21 = v30;
  *(_OWORD *)(a1 + 48) = v29;
  *(_OWORD *)(a1 + 64) = v21;
  if (v32)
  {
    if (v32 == v31)
    {
      *(_QWORD *)(a1 + 104) = a1 + 80;
      (*(void (**)(void))(v31[0] + 24))();
    }
    else
    {
      *(_QWORD *)(a1 + 104) = v32;
      v32 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 104) = 0;
  }
  *(_OWORD *)(a1 + 112) = v33;
  v22 = v32;
  if (v32 == v31)
  {
    v23 = 4;
    v22 = (uint64_t (***)())v31;
  }
  else
  {
    if (!v32)
      goto LABEL_54;
    v23 = 5;
  }
  (*v22)[v23]();
LABEL_54:
  if (v28 == v27)
  {
    v24 = 4;
    goto LABEL_58;
  }
  if (v28)
  {
    v24 = 5;
    v14 = v28;
LABEL_58:
    ((void (*)(uint64_t (***)()))(*v14)[v24])(v14);
  }
  return a1;
}

void sub_20EF31FAC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EF3200C()
{
  JUMPOUT(0x212BC6398);
}

_DWORD *sub_20EF32020(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C9F13C0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_20EF32058(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C9F13C0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_20EF32078(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4))
    return 0;
  v6 = *(_QWORD *)(a2 + 40);
  if (v6 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6))
    return 0;
  v7 = *(_QWORD *)(a2 + 56);
  if (v7 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7))
    return 0;
  v8 = *(_QWORD *)(a2 + 72);
  return (!v8 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8))
      && *(_DWORD *)(a2 + 204) + *(_DWORD *)(a2 + 208) >= *(_DWORD *)(a1 + 8);
}

uint64_t sub_20EF32150(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3acv16surfacedetection17reliableLeafCellsERKNS1_8QuadTreeINSt3__18optionalINS1_12PlanarRegio"
                     "n8CellDataEEEEEjEUlRKT_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3acv16surfacedetection17reliableLeafCellsERKNS1_8QuadTreeINSt3__18optionalINS1_12"
                                "PlanarRegion8CellDataEEEEEjEUlRKT_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3acv16surfacedetection17reliableLeafCellsERKNS1_8QuadTreeINSt3__18optionalINS1_12PlanarRegion8CellDataEEEEEjEUlRKT_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3acv16surfacedetection17reliableLeafCellsERKNS1_8QuadTreeINSt3__18optionalINS1_12PlanarRegion8CellDataEEEEEjEUlRKT_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF321BC()
{
  return &unk_24C9F1430;
}

void sub_20EF321C8(uint64_t a1, uint64_t a2, float32x2_t *a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v9;
  double v10;
  float32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  float32x2_t v56;
  float32x2_t v57;
  char v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  int8x8_t v62;
  int8x8_t v63;
  BOOL v64;
  BOOL v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97[2];
  uint64_t v98;
  uint64_t v99;
  void *__p;
  _QWORD *v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  BOOL v109;
  char v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;

  v9 = a2;
  v114 = *MEMORY[0x24BDAC8D0];
  v10 = *(double *)&a3[1];
  v11 = vld1_dup_f32((const float *)a2);
  v12 = vcvt_s32_f32(vrndm_f32(vdiv_f32(*a3, v11)));
  v13 = vcvt_s32_f32(vrndm_f32(vdiv_f32(*(float32x2_t *)&v10, v11)));
  v14 = vceq_s32(v12, v13);
  if ((v14.i32[0] & v14.i32[1] & 1) != 0)
  {
    sub_20EF2D554((uint64_t *)&v111, a2, a3, v14);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)&v103 = a1;
    BYTE8(v103) = 0;
    v16 = operator new(0x10uLL);
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v16;
    v17 = v16 + 2;
    *(_QWORD *)(a1 + 16) = v16 + 2;
    v18 = *((_QWORD *)&v111 + 1);
    *v16 = v111;
    v16[1] = v18;
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
      *(_QWORD *)(a1 + 8) = v17;
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v17;
    }
    return;
  }
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v19 + 24))(*(_QWORD *)(a2 + 16));
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19) == 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
  }
  else
  {
    v20 = 1;
  }
  v103 = *(_OWORD *)a3->f32;
  sub_20EF2E248(v9, 2, (uint64_t *)&v103, *(double *)&v103, *(double *)&v13, v10, a7, a8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  __p = 0;
  v101 = 0;
  v102 = 0;
  v21 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)&v108 = *(_QWORD *)(v9 + 8);
  *((_QWORD *)&v108 + 1) = v21;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
  v109 = !v20;
  v110 = 0;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  sub_20EF307DC((uint64_t)&v103, (uint64_t)&v108);
  v111 = v103;
  v112 = v104;
  v103 = 0u;
  v104 = 0u;
  v113 = v105;
  v105 = 0uLL;
  sub_20EF30F68((uint64_t)&v103);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
  if (*((_QWORD *)&v113 + 1))
  {
    v95 = v9;
    __asm { FMOV            V9.2S, #1.0 }
    do
    {
      v27 = v113;
      v28 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 8 * ((unint64_t)v113 / 0xAA));
      v29 = (unint64_t)v113 % 0xAA;
      v30 = (uint64_t *)(v28 + 24 * ((unint64_t)v113 % 0xAA));
      v31 = *v30;
      v32 = (uint64_t *)v30[1];
      if (v32)
      {
        (*(void (**)(uint64_t))(*v32 + 24))(v30[1]);
        v27 = v113;
        v33 = (unint64_t)v113 % 0xAA;
        v34 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 8 * ((unint64_t)v113 / 0xAA));
      }
      else
      {
        v34 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 8 * ((unint64_t)v113 / 0xAA));
        v33 = (unint64_t)v113 % 0xAA;
      }
      v35 = *(unsigned __int8 *)(v28 + 24 * v29 + 16);
      v36 = *(_QWORD *)(v34 + 24 * v33 + 8);
      if (v36)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
        v27 = v113;
      }
      *(_QWORD *)&v113 = v27 + 1;
      --*((_QWORD *)&v113 + 1);
      if ((unint64_t)(v27 + 1) >= 0x154)
      {
        operator delete(**((void ***)&v111 + 1));
        *((_QWORD *)&v111 + 1) += 8;
        *(_QWORD *)&v113 = v113 - 170;
      }
      v37 = (_QWORD *)(**(_QWORD **)(v31 + 8) + 232 * *(_QWORD *)v31);
      v38 = v37[3];
      if (v38 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38)
        || (v39 = v37[5]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 48))(v39)
        || (v40 = v37[7]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 48))(v40)
        || (v41 = v37[9]) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 48))(v41)
        || !v35
        && (v42 = **(_QWORD **)(v31 + 8) + 232 * *(_QWORD *)v31,
            (float)(*(float *)(v42 + 88) - *(float *)(v42 + 80)) >= (float)(*(float *)v9 * 1.25)))
      {
        v46 = **(_QWORD **)(v31 + 8) + 232 * *(_QWORD *)v31;
        v48 = *(_QWORD *)(v46 + 16);
        v47 = (_QWORD *)(v46 + 16);
        *(_QWORD *)&v103 = v48;
        v49 = v47[1];
        *((_QWORD *)&v103 + 1) = v49;
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
        *(_QWORD *)&v104 = v47[2];
        v50 = v47[3];
        *((_QWORD *)&v104 + 1) = v50;
        v96 = v32;
        if (v50)
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
        *(_QWORD *)&v105 = v47[4];
        v51 = v47[5];
        *((_QWORD *)&v105 + 1) = v51;
        if (v51)
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
        v106 = v47[6];
        v52 = v47[7];
        v107 = v52;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
        v53 = 0;
        v54 = (_QWORD *)&v103 + 1;
        do
        {
          if (*v54 && (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v54 + 48))(*v54))
          {
            v108 = *(_OWORD *)(**(_QWORD **)(*(v54 - 1) + 8) + 232 * *(_QWORD *)*(v54 - 1) + 80);
            v57 = *(float32x2_t *)((char *)&v108 + 8);
            v56 = (float32x2_t)v108;
            v58 = 1;
          }
          else
          {
            sub_20EEE8E24((float32x2_t *)(**(_QWORD **)(v31 + 8) + 232 * *(_QWORD *)v31 + 80), v53, (float32x2_t *)&v108);
            v58 = 0;
            v57 = *(float32x2_t *)((char *)&v108 + 8);
            v56 = (float32x2_t)v108;
          }
          v59 = vdiv_f32(_D9, vsub_f32(a3[1], *a3));
          v60 = vmul_f32(vsub_f32(v56, *a3), v59);
          v61 = vmul_f32(vsub_f32(v57, *a3), v59);
          v62 = vbsl_s8((int8x8_t)vcgt_f32(v60, v61), (int8x8_t)v61, (int8x8_t)v60);
          if (*(float *)v62.i32 < *(float *)&v62.i32[1])
            v62.i32[0] = v62.i32[1];
          v63 = vbsl_s8((int8x8_t)vcgt_f32(v61, v60), (int8x8_t)v61, (int8x8_t)v60);
          if (*(float *)&v63.i32[1] < *(float *)v63.i32)
            v63.i32[0] = v63.i32[1];
          if (*(float *)v62.i32 <= *(float *)v63.i32)
          {
            v64 = *(float *)v62.i32 < 0.0 || *(float *)v62.i32 > 1.0;
            if (!v64
              || (*(float *)v63.i32 >= 0.0 ? (v65 = *(float *)v63.i32 > 1.0) : (v65 = 1),
                  !v65 || (*(float *)v62.i32 <= 0.0 ? (v66 = *(float *)v63.i32 < 1.0) : (v66 = 1), !v66)))
            {
              if ((v58 & 1) == 0)
              {
                v97[0] = (uint64_t *)v31;
                v97[1] = v32;
                if (v32)
                  (*(void (**)(uint64_t *))(*v32 + 24))(v32);
                sub_20EF2F098((uint64_t)&v98, v95, v97, &v108, v53);
                v67 = v98;
                v68 = v99;
                if (v99)
                  (*(void (**)(uint64_t))(*(_QWORD *)v99 + 24))(v99);
                v69 = *v54;
                *(v54 - 1) = v67;
                *v54 = v68;
                if (v69)
                  (*(void (**)(uint64_t))(*(_QWORD *)v69 + 40))(v69);
                if (v68)
                  (*(void (**)(uint64_t))(*(_QWORD *)v68 + 40))(v68);
                if (v32)
                  (*(void (**)(uint64_t *))(*v32 + 40))(v32);
              }
              v70 = *(v54 - 1);
              v71 = *v54;
              if (*v54)
                (*(void (**)(_QWORD))(*(_QWORD *)v71 + 24))(*v54);
              v72 = *((_QWORD *)&v111 + 1);
              if ((_QWORD)v112 == *((_QWORD *)&v111 + 1))
                v73 = 0;
              else
                v73 = 170 * ((uint64_t)(v112 - *((_QWORD *)&v111 + 1)) >> 3) - 1;
              v74 = *((_QWORD *)&v113 + 1) + v113;
              if (v73 == *((_QWORD *)&v113 + 1) + (_QWORD)v113)
              {
                sub_20EF3139C((uint64_t)&v111);
                v72 = *((_QWORD *)&v111 + 1);
                v74 = *((_QWORD *)&v113 + 1) + v113;
              }
              v75 = *(_QWORD *)(v72 + 8 * (v74 / 0xAA));
              v76 = v74 % 0xAA;
              v77 = (_QWORD *)(v75 + 24 * (v74 % 0xAA));
              *v77 = v70;
              v77[1] = v71;
              if (v71)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71);
                v78 = v75 + 24 * v76;
                *(_BYTE *)(v78 + 16) = v58;
                *(_BYTE *)(v78 + 17) = 0;
                ++*((_QWORD *)&v113 + 1);
                (*(void (**)(uint64_t))(*(_QWORD *)v71 + 40))(v71);
              }
              else
              {
                v55 = v75 + 24 * v76;
                *(_BYTE *)(v55 + 16) = v58;
                *(_BYTE *)(v55 + 17) = 0;
                ++*((_QWORD *)&v113 + 1);
              }
              v32 = v96;
            }
          }
          ++v53;
          v54 += 2;
        }
        while (v53 != 4);
        v79 = (_QWORD *)(**(_QWORD **)(v31 + 8) + 232 * *(_QWORD *)v31);
        v80 = v79[3];
        v9 = v95;
        if (!v80 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 48))(v80))
        {
          v81 = v79[5];
          if (!v81 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 48))(v81))
          {
            v82 = v79[7];
            if (!v82 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 48))(v82))
            {
              v83 = v79[9];
              if (!v83 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 48))(v83))
              {
                v84 = v101;
                if ((unint64_t)v101 >= v102)
                {
                  v85 = sub_20EF310FC((char **)&__p, v31, (uint64_t)v32);
                }
                else
                {
                  *v101 = v31;
                  v84[1] = v32;
                  if (v32)
                    (*(void (**)(uint64_t *))(*v32 + 24))(v32);
                  v85 = (char *)(v84 + 2);
                }
                v101 = v85;
              }
            }
          }
        }
        if (v107)
          (*(void (**)(uint64_t))(*(_QWORD *)v107 + 40))(v107);
        if (*((_QWORD *)&v105 + 1))
          (*(void (**)(_QWORD))(**((_QWORD **)&v105 + 1) + 40))(*((_QWORD *)&v105 + 1));
        if (*((_QWORD *)&v104 + 1))
          (*(void (**)(_QWORD))(**((_QWORD **)&v104 + 1) + 40))(*((_QWORD *)&v104 + 1));
        if (*((_QWORD *)&v103 + 1))
          (*(void (**)(_QWORD))(**((_QWORD **)&v103 + 1) + 40))(*((_QWORD *)&v103 + 1));
        if (!v32)
          continue;
      }
      else
      {
        v43 = *(uint64_t **)(a1 + 8);
        if ((unint64_t)v43 >= *(_QWORD *)(a1 + 16))
        {
          v44 = sub_20EF310FC((char **)a1, v31, (uint64_t)v32);
          v45 = a1;
        }
        else
        {
          *v43 = v31;
          v43[1] = (uint64_t)v32;
          if (v32)
            (*(void (**)(uint64_t *))(*v32 + 24))(v32);
          v44 = (char *)(v43 + 2);
          v45 = a1;
          *(_QWORD *)(a1 + 8) = v43 + 2;
        }
        *(_QWORD *)(v45 + 8) = v44;
        if (!v32)
          continue;
      }
      (*(void (**)(uint64_t *))(*v32 + 40))(v32);
    }
    while (*((_QWORD *)&v113 + 1));
  }
  v86 = (unint64_t *)__p;
  v87 = v101;
  while (v86 != v87)
  {
    v89 = *v86;
    v88 = v86[1];
    if (v88)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v88 + 24))(v86[1]);
      *(_QWORD *)&v103 = v89;
      *((_QWORD *)&v103 + 1) = v88;
      (*(void (**)(unint64_t))(*(_QWORD *)v88 + 24))(v88);
    }
    else
    {
      v103 = v89;
    }
    sub_20EF2D104(v9, (uint64_t **)&v103);
    if (v88)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v88 + 40))(v88);
      (*(void (**)(unint64_t))(*(_QWORD *)v88 + 40))(v88);
    }
    v86 += 2;
  }
  sub_20EF30F68((uint64_t)&v111);
  v90 = __p;
  if (__p)
  {
    v91 = v101;
    v92 = __p;
    if (v101 != __p)
    {
      do
      {
        v93 = *(v91 - 1);
        if (v93)
          (*(void (**)(uint64_t))(*(_QWORD *)v93 + 40))(v93);
        v91 -= 2;
      }
      while (v91 != v90);
      v92 = __p;
    }
    v101 = v90;
    operator delete(v92);
  }
}

void sub_20EF32B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

BOOL sub_20EF32DF4(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  int8x8_t v10;
  int8x8_t v11;

  __asm { FMOV            V2.2S, #1.0 }
  v7 = vdiv_f32(_D2, vsub_f32(a2[1], *a2));
  v8 = vmul_f32(v7, vsub_f32(*a1, *a2));
  v9 = vmul_f32(v7, vsub_f32(a1[1], *a2));
  v10 = vbsl_s8((int8x8_t)vcgt_f32(v8, v9), (int8x8_t)v9, (int8x8_t)v8);
  if (*(float *)v10.i32 < *(float *)&v10.i32[1])
    v10.i32[0] = v10.i32[1];
  v11 = vbsl_s8((int8x8_t)vcgt_f32(v9, v8), (int8x8_t)v9, (int8x8_t)v8);
  if (*(float *)&v11.i32[1] < *(float *)v11.i32)
    v11.i32[0] = v11.i32[1];
  if (*(float *)v10.i32 > *(float *)v11.i32)
    return 0;
  if (*(float *)v10.i32 >= 0.0 && *(float *)v10.i32 <= 1.0)
    return 1;
  if (*(float *)v11.i32 >= 0.0 && *(float *)v11.i32 <= 1.0)
    return 1;
  if (*(float *)v11.i32 >= 1.0)
    return *(float *)v10.i32 <= 0.0;
  return 0;
}

BOOL sub_20EF32E8C(float32x2_t *a1, float32x2_t *a2)
{
  float32x4_t v4;
  float v5;
  float v6;
  int32x2_t v7;
  float32x2_t v8;
  _BOOL4 v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float v13;
  float32x2_t v18;
  int8x8_t v19;
  int8x8_t v20;
  float32x4_t v22;
  int16x4_t v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  float32x4_t v27;
  int v28;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x2_t v37;
  int32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  int32x2_t v44;
  float32x2_t v45[2];
  __int128 v46;
  __int128 v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x2_t v50;

  *(float32x2_t *)v4.f32 = *a1;
  v5 = a1[1].f32[0];
  v6 = a1[1].f32[1];
  v7 = (int32x2_t)a1[2];
  v8 = vmul_f32(vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)*a1, 0), (float32x2_t)__PAIR64__(LODWORD(v5), v7.u32[0])), vsub_f32((float32x2_t)__PAIR64__(v7.u32[1], LODWORD(v6)), (float32x2_t)vdup_lane_s32((int32x2_t)*a1, 1)));
  v8.f32[0] = fabsf(vsub_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1)).f32[0]) * 0.5;
  v9 = v8.f32[0] == 0.0;
  if (v8.f32[0] <= 0.000001)
    v9 = 1;
  v11 = *a2;
  *(float32x2_t *)v10.f32 = a2[1];
  v12 = vsub_f32(*(float32x2_t *)v10.f32, *a2);
  v13 = vmul_lane_f32(v12, v12, 1).f32[0];
  if (v13 == 0.0)
  {
    if (!v9)
    {
LABEL_31:
      v39 = vmul_f32(vadd_f32(*a2, a2[1]), (float32x2_t)0x3F0000003F000000);
      v40 = *a1;
      v41 = vsub_f32(v39, *a1);
      v42 = (float32x2_t)vrev64_s32((int32x2_t)*a1);
      v43.i32[1] = v42.i32[1];
      v43.i32[0] = a1[1].i32[0];
      v40.i32[0] = a1[1].i32[1];
      v42.i32[1] = HIDWORD(*(_QWORD *)&a1[2]);
      v44 = vcgtz_f32(vsub_f32(vmul_lane_f32(vsub_f32(v43, (float32x2_t)vzip1_s32((int32x2_t)*a1, v7)), v41, 1), vmul_n_f32(vsub_f32(v40, v42), v41.f32[0])));
      if (v44.i32[0] == v44.i32[1])
        return (v44.i8[0] ^ ((float)((float)((float)(*(float *)v7.i32 - v5) * (float)(v39.f32[1] - v6))
                                   - (float)((float)(*(float *)&v7.i32[1] - v6) * (float)(v39.f32[0] - v5))) <= 0.0)) & 1;
      else
        return 0;
    }
LABEL_7:
    __asm { FMOV            V1.2S, #3.0 }
    v18 = vdiv_f32(vadd_f32(vadd_f32(*a1, a1[1]), a1[2]), _D1);
    v19 = (int8x8_t)vcge_f32(v18, v11);
    v20 = (int8x8_t)vcge_f32(*(float32x2_t *)v10.f32, v18);
    return vand_s8(v19, v20).u8[0] & v19.i8[4] & v20.i8[4] & 1;
  }
  if (v9)
    goto LABEL_7;
  if (fabsf(v13) <= 0.000001)
    goto LABEL_31;
  *(float32x2_t *)&v4.u32[2] = *a1;
  *(float32x2_t *)v22.f32 = a2[1];
  *(float32x2_t *)&v22.u32[2] = *a2;
  v23.i32[0] = vmovn_s32(vcgeq_f32(v22, v4)).u32[0];
  v23.i32[1] = vmovn_s32(vcgeq_f32(v4, v22)).i32[1];
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v23, 0xFuLL))) & 1) != 0)
    return 1;
  v24 = v6 > v10.f32[1] || v6 < v11.f32[1];
  v25 = v24 || v5 < v11.f32[0];
  v26 = v25 || v5 > v10.f32[0];
  *(float32x2_t *)&v10.u32[2] = a1[2];
  v27.i64[0] = v10.i64[1];
  *(float32x2_t *)&v27.u32[2] = *a2;
  v28 = ~vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vcgeq_f32(v10, v27), 0x1FuLL)), (int8x16_t)xmmword_21030C960)) & 0xF;
  if (!v26 || v28 == 0)
    return 1;
  v30 = a2[1];
  *(float32x2_t *)v31.f32 = vmul_f32(vadd_f32(*a2, v30), (float32x2_t)0x3F0000003F000000);
  *(float32x2_t *)v32.f32 = vsub_f32(*(float32x2_t *)v31.f32, v30);
  v33 = vadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v32.f32);
  v34 = vsub_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v32.f32);
  v31.i64[1] = v31.i64[0];
  v32.i64[1] = v32.i64[0];
  v35 = vsubq_f32(v31, v32);
  v36 = vaddq_f32(v31, v32);
  v36.i32[0] = v35.i32[0];
  v36.i32[3] = v35.i32[3];
  v48 = v33;
  v49 = v36;
  v50 = v34;
  *(float32x2_t *)v36.f32 = *a1;
  *(float32x2_t *)v31.f32 = vsub_f32(v33, *a1);
  v37 = (float32x2_t)vrev64_s32((int32x2_t)*a1);
  v35.i64[0] = __PAIR64__(v37.u32[1], LODWORD(v5));
  v36.f32[0] = v6;
  v37.i32[1] = v7.i32[1];
  v38 = vcgtz_f32(vsub_f32(vmul_lane_f32(vsub_f32(*(float32x2_t *)v35.f32, (float32x2_t)vzip1_s32((int32x2_t)*a1, v7)), *(float32x2_t *)v31.f32, 1), vmul_n_f32(vsub_f32(*(float32x2_t *)v36.f32, v37), v31.f32[0])));
  if (v38.i32[0] == v38.i32[1]
    && ((((float)((float)((float)(*(float *)v7.i32 - v5) * (float)(v33.f32[1] - v6))
                - (float)((float)(*(float *)&v7.i32[1] - v6) * (float)(v33.f32[0] - v5))) <= 0.0) ^ v38.i32[0]) & 1) != 0)
  {
    return 1;
  }
  if ((sub_20EF33244((float32x2_t *)&v49, a1) & 1) != 0)
    return 1;
  if ((sub_20EF33244((float32x2_t *)&v49.u32[2], a1) & 1) != 0)
    return 1;
  if ((sub_20EF33244(&v50, a1) & 1) != 0)
    return 1;
  v47 = *(_OWORD *)a1->f32;
  if (sub_20EF32DF4(a2, (float32x2_t *)&v47))
    return 1;
  v46 = *(_OWORD *)a1[1].f32;
  if (sub_20EF32DF4(a2, (float32x2_t *)&v46))
    return 1;
  v45[0] = a1[2];
  v45[1] = *a1;
  return sub_20EF32DF4(a2, v45);
}

uint64_t sub_20EF33244(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  int32x2_t v7;

  v2 = *a2;
  v3 = vsub_f32(*a1, *a2);
  v4 = (float32x2_t)vrev64_s32((int32x2_t)*a2);
  v5.i32[1] = v4.i32[1];
  v5.i32[0] = a2[1].i32[0];
  v6.i32[0] = (__int32)*a2;
  v6.i32[1] = a2[2].i32[0];
  v2.i32[0] = a2[1].i32[1];
  v4.i32[1] = a2[2].i32[1];
  v7 = vcgtz_f32(vsub_f32(vmul_lane_f32(vsub_f32(v5, v6), v3, 1), vmul_n_f32(vsub_f32(v2, v4), v3.f32[0])));
  if (v7.i32[0] == v7.i32[1])
    return (v7.i32[0] ^ ((float)((float)((float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)a1)) - a2[1].f32[1])
                                       * (float)(a2[2].f32[0] - a2[1].f32[0]))
                               - (float)((float)(COERCE_FLOAT(*a1) - a2[1].f32[0]) * (float)(a2[2].f32[1] - a2[1].f32[1]))) <= 0.0)) & 1;
  else
    return 0;
}

_QWORD *sub_20EF332D8(_QWORD *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

uint64_t sub_20EF33320(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v11 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0x55];
    v6 = (char *)*v5 + 48 * (v4 % 0x55);
    v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0x55] + 48 * ((*(_QWORD *)(a1 + 40) + v4) % 0x55);
    if (v6 != (char *)v7)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 + 3);
        if (v8)
        {
          *((_QWORD *)v6 + 4) = v8;
          operator delete(v8);
        }
        v9 = *((_QWORD *)v6 + 1);
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
        v6 += 48;
        if (v6 - (_BYTE *)*v5 == 4080)
        {
          v10 = (char *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 42;
    goto LABEL_19;
  }
  if (v12 == 2)
  {
    v13 = 85;
LABEL_19:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20EF334C0(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, float32x4_t a8@<Q0>, float64x2_t a9@<Q4>)
{
  float64x2_t v15;
  float64x2_t v16;
  unsigned __int8 v17;
  float64x2_t v18;
  unsigned __int8 v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v23;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v34;
  float64x2_t v36;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v48;
  float64x2_t v50;
  double v51;
  unint64_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  int8x16_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  size_t v79;
  _QWORD *v80;
  __int128 v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  void *v85;
  _QWORD *v86;
  size_t v87;
  unint64_t v88;
  _QWORD *v89;
  _BYTE *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t *v99;
  float v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  void *v131;
  __int128 v132;
  __int128 v133;
  float v134;
  __int128 v135;
  int v136;
  int v137;
  unint64_t v138;
  double v139;
  float64_t v140;
  uint64_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v148;
  unint64_t v149;
  int8x16_t v150;
  int8x16_t v151;
  float64_t v152;
  int8x16_t v153;
  uint64_t v154;
  uint64_t *v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  _BYTE *__src;
  float64x2_t v160;
  float64x2_t v161;
  float32x4_t v162;
  float64x2_t v163;
  _BYTE v164[24];
  void *__p;
  void *v166;
  char *v167;
  void *v168[2];
  void *v169[2];
  int v170;
  __int128 v171;
  __int128 v172;
  _BYTE *v173;
  _OWORD *v174;
  __int128 v175;
  uint64_t v176;
  _QWORD v177[3];
  _QWORD *v178;
  __int128 v179;
  uint64_t v180;
  _QWORD v181[3];
  _QWORD *v182;
  __int128 v183;
  unint64_t v184;
  _QWORD v185[3];
  _QWORD *v186;
  __int128 v187;
  uint64_t v188;
  _QWORD v189[3];
  _QWORD *v190;
  __int128 v191;
  unint64_t v192;
  _QWORD v193[3];
  _QWORD *v194;
  __int128 v195;
  uint64_t v196;
  _QWORD v197[3];
  _QWORD *v198;
  __int128 v199;
  unint64_t v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t v203;

  v203 = *MEMORY[0x24BDAC8D0];
  a8.i64[0] = *(_QWORD *)a1;
  a8.i32[2] = *(_DWORD *)(a1 + 8);
  v162 = a8;
  a8.i64[0] = *(_QWORD *)(a1 + 12);
  a8.i32[2] = *(_DWORD *)(a1 + 20);
  v15 = vcvt_hight_f64_f32(a8);
  v16 = vcvtq_f64_f32(*(float32x2_t *)a8.f32);
  v17 = atomic_load((unsigned __int8 *)&qword_254A51718);
  v143 = v16;
  v144 = v15;
  if ((v17 & 1) == 0)
  {
    v136 = __cxa_guard_acquire(&qword_254A51718);
    v16 = v143;
    v15 = v144;
    if (v136)
    {
      qword_254A51710 = 0x3FEF838B8C811C17;
      __cxa_guard_release(&qword_254A51718);
      v16 = v143;
      v15 = v144;
    }
  }
  v18 = (float64x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL);
  v19 = atomic_load((unsigned __int8 *)&qword_254A51728);
  v142 = v18;
  if ((v19 & 1) == 0)
  {
    v137 = __cxa_guard_acquire(&qword_254A51728);
    v18 = v142;
    v16 = v143;
    v15 = v144;
    if (v137)
    {
      qword_254A51720 = 0x3FC63A1A7E0B738CLL;
      __cxa_guard_release(&qword_254A51728);
      v18 = v142;
      v16 = v143;
      v15 = v144;
    }
  }
  if (fabs(v15.f64[0]) >= *(double *)&qword_254A51710)
  {
    v36.f64[0] = v16.f64[0];
    v36.f64[1] = v18.f64[0];
    _Q3 = (int64x2_t)vmulq_f64(v36, (float64x2_t)0);
    v38.f64[0] = v15.f64[0];
    *(_QWORD *)&v38.f64[1] = _Q3.i64[0];
    v39 = vmulq_f64(v36, (float64x2_t)xmmword_21030D320);
    v40 = (float64x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)vmulq_f64(v15, (float64x2_t)0), 8uLL);
    v41 = vsubq_f64((float64x2_t)vdupq_laneq_s64(_Q3, 1), v39);
    _Q1 = vsubq_f64(v38, v40);
    _Q2 = vmulq_f64(_Q1, _Q1);
    _Q3.i64[0] = *(_QWORD *)&_Q1.f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v41.f64[0], v41.f64[0]));
    v44 = vmulq_n_f64(_Q1, _Q2.f64[0]);
    v45 = vmulq_f64(v41, _Q2);
    v41.f64[0] = v18.f64[0];
    v41.f64[1] = v15.f64[0];
    _Q1.f64[0] = v15.f64[0];
    _Q1.f64[1] = v16.f64[0];
    _Q2 = (float64x2_t)vextq_s8((int8x16_t)v44, (int8x16_t)v45, 8uLL);
    v152 = v45.f64[0];
    v153.i64[0] = *(_QWORD *)&v44.f64[0];
    v45.f64[1] = v44.f64[0];
    _Q0 = vmlsq_f64(vmulq_f64(v41, v45), _Q1, _Q2);
    v48 = vmlsq_f64(vmulq_laneq_f64(v16, v44, 1), v18, v44);
    _Q1 = vmulq_f64(_Q0, _Q0);
    _Q2.f64[0] = _Q0.f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    _Q1.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q1.f64[0], v48.f64[0], v48.f64[0]));
    v151 = (int8x16_t)vmulq_n_f64(_Q0, _Q1.f64[0]);
    v150 = vextq_s8(v151, (int8x16_t)vmulq_f64(v48, _Q1), 8uLL);
    v148 = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
    v149 = vextq_s8(v150, v150, 8uLL).u64[0];
  }
  else
  {
    v20.f64[0] = v18.f64[0];
    v20.f64[1] = v15.f64[0];
    v21.f64[0] = v15.f64[0];
    v21.f64[1] = v16.f64[0];
    a9.f64[0] = -0.0;
    _Q5 = vmlaq_f64(vmulq_f64(v21, (float64x2_t)xmmword_210389940), v20, (float64x2_t)xmmword_21030D320);
    v23 = vmlaq_f64(vmulq_f64(v18, a9), v16, (float64x2_t)0);
    _Q2 = vmulq_f64(_Q5, _Q5);
    _D3 = _Q5.f64[1];
    __asm { FMLA            D2, D3, V5.D[1] }
    _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v23.f64[0], v23.f64[0]));
    _Q4 = vmulq_f64(v23, _Q2);
    v31 = vmulq_n_f64(_Q5, _Q2.f64[0]);
    v32 = (float64x2_t)vextq_s8((int8x16_t)v31, (int8x16_t)_Q4, 8uLL);
    _Q4.f64[1] = v31.f64[0];
    _Q1 = vmlsq_f64(vmulq_f64(v21, v32), v20, _Q4);
    v34 = vmlsq_laneq_f64(vmulq_f64(v18, v31), v16, v31, 1);
    _Q0 = vmulq_f64(_Q1, _Q1);
    _Q4.f64[0] = _Q1.f64[1];
    __asm { FMLA            D0, D4, V1.D[1] }
    _Q0.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q0.f64[0], v34.f64[0], v34.f64[0]));
    v151.i64[0] = *(_QWORD *)&v31.f64[0];
    *(_QWORD *)&v152 = *(_OWORD *)&vmulq_f64(v34, _Q0);
    v153 = (int8x16_t)vmulq_n_f64(_Q1, _Q0.f64[0]);
    v150.i64[0] = *(_QWORD *)&v32.f64[0];
    v148 = vextq_s8(v153, v153, 8uLL).u64[0];
    v149 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
  }
  memset(v164, 0, sizeof(v164));
  sub_20EF34570((uint64_t)v164, a2);
  v145 = a6;
  v146 = a5;
  v141 = a7;
  v50 = vcvtq_f64_f32(*(float32x2_t *)v162.f32);
  *(_QWORD *)&v51 = *(_OWORD *)&vcvt_hight_f64_f32(v162);
  v52 = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
  v139 = v51;
  v140 = v50.f64[0];
  v138 = v52;
  if (!a2)
  {
    v94 = 0;
    v92 = 0;
    *(_OWORD *)v168 = 0u;
    *(_OWORD *)v169 = 0u;
    v170 = 1065353216;
    __p = 0;
    v166 = 0;
    v167 = 0;
LABEL_53:
    v90 = (_BYTE *)a1;
    goto LABEL_54;
  }
  *(_QWORD *)&v50.f64[1] = v52;
  *(_QWORD *)&v53.f64[0] = v153.i64[0];
  *(_QWORD *)&v54.f64[0] = v153.i64[0];
  *(_QWORD *)&v54.f64[1] = v151.i64[0];
  *(_QWORD *)&v55.f64[0] = v148;
  *(_QWORD *)&v55.f64[1] = v150.i64[0];
  v56.f64[0] = v152;
  *(_QWORD *)&v56.f64[1] = v149;
  v161 = v56;
  v163 = v55;
  v57 = (int8x16_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v54, vnegq_f64(v50).f64[0]), v55, v50, 1), v56, v51, 0);
  v58 = &a3[3 * a2];
  v155 = v58;
  *(_QWORD *)&v53.f64[1] = v151.i64[0];
  v160 = v53;
  v59 = vextq_s8(v57, v57, 8uLL).u64[0];
  *(_QWORD *)&v56.f64[0] = v57.i64[0];
  *(_QWORD *)&v56.f64[1] = v59;
  v158 = v56;
  *(_QWORD *)&v56.f64[0] = v57.i64[0];
  *(_QWORD *)&v56.f64[1] = v59;
  v57.i64[1] = v59;
  v156 = (float64x2_t)v57;
  v157 = v56;
  v60 = a3;
  v154 = a4;
  do
  {
    v62 = *v60;
    v61 = v60[1];
    v63 = v60[2];
    *(_QWORD *)&v171 = operator new(0x18uLL);
    *((_QWORD *)&v171 + 1) = v171;
    *(_QWORD *)&v172 = v171 + 24;
    *(_QWORD *)&v199 = &v171;
    *(float32x2_t *)&v195 = vcvt_f32_f64(vaddq_f64(v158, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v160, *(float *)(a4 + 12 * v62)), v163, *(float *)(a4 + 12 * v62 + 4)), v161, *(float *)(a4 + 12 * v62 + 8))));
    sub_20EEE8140((void ***)&v199, &v195);
    *(float32x2_t *)&v195 = vcvt_f32_f64(vaddq_f64(v157, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v160, *(float *)(a4 + 12 * v61)), v163, *(float *)(a4 + 12 * v61 + 4)), v161, *(float *)(a4 + 12 * v61 + 8))));
    sub_20EEE8140((void ***)&v199, &v195);
    *(float32x2_t *)&v195 = vcvt_f32_f64(vaddq_f64(v156, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v160, *(float *)(a4 + 12 * v63)), v163, *(float *)(a4 + 12 * v63 + 4)), v161, *(float *)(a4 + 12 * v63 + 8))));
    sub_20EEE8140((void ***)&v199, &v195);
    v64 = (_BYTE *)*((_QWORD *)&v171 + 1);
    v65 = (_BYTE *)v171;
    v66 = *(_QWORD **)&v164[8];
    if (*(_QWORD *)&v164[8] >= *(_QWORD *)&v164[16])
    {
      __src = (_BYTE *)v171;
      v70 = *(_QWORD **)v164;
      v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v164[8] - *(_QWORD *)v164) >> 3);
      v72 = v71 + 1;
      if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20E969238();
      if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v164[16] - *(_QWORD *)v164) >> 3) > v72)
        v72 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v164[16] - *(_QWORD *)v164) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v164[16] - *(_QWORD *)v164) >> 3) >= 0x555555555555555)
        v73 = 0xAAAAAAAAAAAAAAALL;
      else
        v73 = v72;
      v173 = &v164[16];
      if (v73)
      {
        if (v73 > 0xAAAAAAAAAAAAAAALL)
          sub_20E877A38();
        v74 = (char *)operator new(24 * v73);
      }
      else
      {
        v74 = 0;
      }
      *(_QWORD *)&v171 = v74;
      *((_QWORD *)&v171 + 1) = &v74[24 * v71];
      v76 = &v74[24 * v73];
      v75 = (_QWORD *)*((_QWORD *)&v171 + 1);
      *(_QWORD *)(*((_QWORD *)&v171 + 1) + 8) = 0;
      *(_QWORD *)&v172 = &v74[24 * v71];
      *((_QWORD *)&v172 + 1) = v76;
      v75[2] = 0;
      *v75 = 0;
      v77 = v64 - __src;
      if (v64 != __src)
      {
        if (v77 < 0)
          sub_20E969238();
        v78 = (char *)operator new(v64 - __src);
        *v75 = v78;
        v75[2] = &v78[8 * (v77 >> 3)];
        v79 = v77 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v78, __src, v79);
        v75[1] = &v78[v79];
      }
      v69 = v75 + 3;
      *(_QWORD *)&v172 = v75 + 3;
      if (v66 == v70)
      {
        *(_QWORD *)v164 = v75;
        *(_QWORD *)&v164[8] = v75 + 3;
        *(_QWORD *)&v164[16] = v76;
        a4 = v154;
        v58 = v155;
        v65 = __src;
        goto LABEL_36;
      }
      v58 = v155;
      do
      {
        v80 = v75;
        *(v75 - 2) = 0;
        *(v75 - 1) = 0;
        v81 = *(_OWORD *)(v66 - 3);
        v66 -= 3;
        *(_OWORD *)(v75 - 3) = v81;
        v75 -= 3;
        *(v80 - 1) = v66[2];
        *v66 = 0;
        v66[1] = 0;
        v66[2] = 0;
      }
      while (v66 != v70);
      v82 = *(_QWORD **)&v164[8];
      v66 = *(_QWORD **)v164;
      *(_QWORD *)v164 = v75;
      *(_OWORD *)&v164[8] = v172;
      v69 = (_QWORD *)v172;
      a4 = v154;
      v65 = __src;
      if (v82 != v66)
      {
        v83 = v82;
        do
        {
          v85 = (void *)*(v83 - 3);
          v83 -= 3;
          v84 = v85;
          if (v85)
          {
            *(v82 - 2) = v84;
            operator delete(v84);
          }
          v82 = v83;
        }
        while (v83 != v66);
LABEL_36:
        if (!v66)
          goto LABEL_38;
LABEL_37:
        operator delete(v66);
        goto LABEL_38;
      }
      if (v66)
        goto LABEL_37;
    }
    else
    {
      **(_QWORD **)&v164[8] = 0;
      v66[1] = 0;
      v66[2] = 0;
      v67 = v64 - v65;
      if (v64 != v65)
      {
        if (v67 < 0)
          sub_20E969238();
        v68 = (char *)operator new(v64 - v65);
        *v66 = v68;
        v66[1] = v68;
        v66[2] = &v68[8 * (v67 >> 3)];
        memcpy(v68, v65, v67 & 0xFFFFFFFFFFFFFFF8);
        v66[1] = &v68[v67 & 0xFFFFFFFFFFFFFFF8];
      }
      v69 = v66 + 3;
    }
LABEL_38:
    *(_QWORD *)&v164[8] = v69;
    if (v65)
      operator delete(v65);
    v60 += 3;
  }
  while (v60 != v58);
  *(_OWORD *)v168 = 0u;
  *(_OWORD *)v169 = 0u;
  v170 = 1065353216;
  do
  {
    *(_QWORD *)&v171 = *a3;
    sub_20EDC9EA8((uint64_t)v168, (unint64_t *)&v171, &v171);
    *(_QWORD *)&v171 = a3[1];
    sub_20EDC9EA8((uint64_t)v168, (unint64_t *)&v171, &v171);
    *(_QWORD *)&v171 = a3[2];
    sub_20EDC9EA8((uint64_t)v168, (unint64_t *)&v171, &v171);
    a3 += 3;
  }
  while (a3 != v58);
  v86 = v169[0];
  __p = 0;
  v166 = 0;
  v167 = 0;
  if (!v169[0])
  {
    v94 = 0;
    v92 = 0;
    goto LABEL_53;
  }
  v87 = 0;
  v88 = -1;
  v89 = v169[0];
  v90 = (_BYTE *)a1;
  do
  {
    v89 = (_QWORD *)*v89;
    ++v88;
    v87 += 8;
  }
  while (v89);
  if (v88 >= 0x1FFFFFFFFFFFFFFFLL)
    sub_20E867F44();
  v91 = (char *)operator new(v87);
  v92 = v91;
  v93 = 0;
  __p = v91;
  v167 = &v91[v87];
  do
  {
    *(_QWORD *)&v91[v93] = v86[2];
    v86 = (_QWORD *)*v86;
    v93 += 8;
  }
  while (v86);
  v94 = &v91[v93];
  v166 = v94;
LABEL_54:
  *(_QWORD *)&v171 = v92;
  *((_QWORD *)&v171 + 1) = v145;
  v95 = (_QWORD *)&v172 + 1;
  *(_QWORD *)&v172 = v146;
  *((_QWORD *)&v172 + 1) = &off_24C9F1450;
  v174 = (__int128 *)((char *)&v172 + 8);
  v173 = v90;
  *(_QWORD *)&v175 = v94;
  *((_QWORD *)&v175 + 1) = v145;
  v96 = v177;
  v176 = v146;
  v177[0] = &off_24C9F1450;
  v178 = v177;
  v177[1] = v90;
  if (v92 == v94)
  {
    v103 = 0;
    goto LABEL_132;
  }
  v199 = v171;
  v97 = v201;
  v200 = v172;
  v201[0] = &off_24C9F1450;
  v202 = v201;
  v201[1] = v90;
  v195 = v175;
  v98 = v197;
  v196 = v176;
  v197[0] = &off_24C9F1450;
  v198 = v197;
  v197[1] = v90;
  v99 = (unint64_t *)v171;
  v100 = 0.0;
  do
  {
    v101 = *v99;
    if (v200 <= *v99)
      sub_21023D290(&v200, v101);
    if (!v202)
      sub_20E86D37C();
    v100 = v100
         + (*(float (**)(_QWORD *, unint64_t))(*v202 + 48))(v202, *((_QWORD *)&v199 + 1) + 36 * v101);
    v99 = (unint64_t *)(v199 + 8);
    *(_QWORD *)&v199 = v99;
  }
  while (v99 != (unint64_t *)v195);
  if (v198 == v197)
  {
    v102 = 4;
LABEL_64:
    (*(void (**)(_QWORD *))(*v98 + 8 * v102))(v98);
  }
  else if (v198)
  {
    v102 = 5;
    v98 = v198;
    goto LABEL_64;
  }
  if (v202 == v201)
  {
    v104 = 4;
LABEL_69:
    (*(void (**)(_QWORD *))(*v97 + 8 * v104))(v97);
  }
  else if (v202)
  {
    v104 = 5;
    v97 = v202;
    goto LABEL_69;
  }
  v183 = v171;
  v105 = (uint64_t)v174;
  v184 = v172;
  v106 = v185;
  if (v174)
  {
    if (v174 != (__int128 *)((char *)&v172 + 8))
    {
      v105 = (*(uint64_t (**)(void))(*(_QWORD *)v174 + 16))();
      goto LABEL_73;
    }
    v186 = v185;
    (*(void (**)(char *, _QWORD *))(*((_QWORD *)&v172 + 1) + 24))((char *)&v172 + 8, v185);
  }
  else
  {
LABEL_73:
    v186 = (_QWORD *)v105;
  }
  v179 = v175;
  v180 = v176;
  v107 = v181;
  v108 = (uint64_t)v178;
  if (v178)
  {
    if (v178 != v177)
    {
      v108 = (*(uint64_t (**)(void))(*v178 + 16))();
      goto LABEL_78;
    }
    v182 = v181;
    (*(void (**)(uint64_t, _QWORD *))(v177[0] + 24))((uint64_t)v177, v181);
  }
  else
  {
LABEL_78:
    v182 = (_QWORD *)v108;
  }
  v191 = v183;
  v109 = (uint64_t)v186;
  v192 = v184;
  v110 = v193;
  if (v186)
  {
    if (v186 != v185)
    {
      v109 = (*(uint64_t (**)(void))(*v186 + 16))();
      goto LABEL_83;
    }
    v194 = v193;
    (*(void (**)(_QWORD *, _QWORD *))(v185[0] + 24))(v185, v193);
  }
  else
  {
LABEL_83:
    v194 = (_QWORD *)v109;
  }
  v187 = v179;
  v111 = (uint64_t)v182;
  v188 = v180;
  v112 = v189;
  if (v182)
  {
    if (v182 != v181)
    {
      v111 = (*(uint64_t (**)(void))(*v182 + 16))();
      goto LABEL_88;
    }
    v190 = v189;
    (*(void (**)(_QWORD *, _QWORD *))(v181[0] + 24))(v181, v189);
  }
  else
  {
LABEL_88:
    v190 = (_QWORD *)v111;
  }
  v199 = v191;
  v113 = (uint64_t)v194;
  v200 = v192;
  v114 = v201;
  if (v194)
  {
    if (v194 != v193)
    {
      v113 = (*(uint64_t (**)(void))(*v194 + 16))();
      goto LABEL_93;
    }
    v202 = v201;
    (*(void (**)(_QWORD *, _QWORD *))(v193[0] + 24))(v193, v201);
  }
  else
  {
LABEL_93:
    v202 = (_QWORD *)v113;
  }
  v195 = v187;
  v196 = v188;
  if (!v190)
  {
    v198 = 0;
    v117 = v199;
    v118 = v195;
    goto LABEL_101;
  }
  v115 = v197;
  if (v190 == v189)
  {
    v198 = v197;
    (*(void (**)(_QWORD *, _QWORD *))(v189[0] + 24))(v189, v197);
    v116 = v198;
    v117 = v199;
    v118 = v195;
    if (v198 == v197)
      goto LABEL_105;
LABEL_98:
    if (v116)
    {
      v119 = 5;
      v115 = v116;
      goto LABEL_106;
    }
LABEL_101:
    v120 = v202;
    if (v202 == v201)
      goto LABEL_107;
    goto LABEL_102;
  }
  v116 = (_QWORD *)(*(uint64_t (**)(void))(*v190 + 16))();
  v198 = v116;
  v117 = v199;
  v118 = v195;
  if (v116 != v197)
    goto LABEL_98;
LABEL_105:
  v119 = 4;
LABEL_106:
  (*(void (**)(_QWORD *))(*v115 + 8 * v119))(v115);
  v120 = v202;
  if (v202 == v201)
  {
LABEL_107:
    v121 = 4;
LABEL_108:
    (*(void (**)(_QWORD *))(*v114 + 8 * v121))(v114);
    goto LABEL_109;
  }
LABEL_102:
  if (v120)
  {
    v121 = 5;
    v114 = v120;
    goto LABEL_108;
  }
LABEL_109:
  if (v190 == v189)
  {
    v122 = 4;
LABEL_113:
    (*(void (**)(_QWORD *))(*v112 + 8 * v122))(v112);
  }
  else if (v190)
  {
    v122 = 5;
    v112 = v190;
    goto LABEL_113;
  }
  if (v194 == v193)
  {
    v123 = 4;
LABEL_118:
    (*(void (**)(_QWORD *))(*v110 + 8 * v123))(v110);
  }
  else if (v194)
  {
    v123 = 5;
    v110 = v194;
    goto LABEL_118;
  }
  if (v182 == v181)
  {
    v124 = 4;
LABEL_123:
    (*(void (**)(_QWORD *))(*v107 + 8 * v124))(v107);
  }
  else if (v182)
  {
    v124 = 5;
    v107 = v182;
    goto LABEL_123;
  }
  if (v186 == v185)
  {
    v125 = 4;
LABEL_128:
    (*(void (**)(_QWORD *))(*v106 + 8 * v125))(v106);
  }
  else if (v186)
  {
    v125 = 5;
    v106 = v186;
    goto LABEL_128;
  }
  v103 = COERCE_UNSIGNED_INT(v100 / (float)(unint64_t)((v118 - v117) >> 3)) | 0x100000000;
  if (v178 != v177)
  {
    v126 = v141;
    if (v178)
    {
      v127 = 5;
      v96 = v178;
      goto LABEL_133;
    }
    goto LABEL_134;
  }
LABEL_132:
  v127 = 4;
  v126 = v141;
LABEL_133:
  (*(void (**)(_QWORD *))(*v96 + 8 * v127))(v96);
LABEL_134:
  if (v174 == (__int128 *)((char *)&v172 + 8))
  {
    v128 = 4;
LABEL_138:
    (*(void (**)(_QWORD *))(*v95 + 8 * v128))(v95);
  }
  else if (v174)
  {
    v128 = 5;
    v95 = v174;
    goto LABEL_138;
  }
  if (__p)
  {
    v166 = __p;
    operator delete(__p);
  }
  v129 = v169[0];
  if (v169[0])
  {
    do
    {
      v130 = (_QWORD *)*v129;
      operator delete(v129);
      v129 = v130;
    }
    while (v130);
  }
  v131 = v168[0];
  v168[0] = 0;
  if (v131)
    operator delete(v131);
  *(_QWORD *)&v132 = v151.i64[0];
  *((_QWORD *)&v132 + 1) = v150.i64[0];
  *(_QWORD *)&v133 = v153.i64[0];
  *((_QWORD *)&v133 + 1) = v148;
  v134 = *(float *)&v103;
  if ((v103 & 0x100000000) == 0)
    v134 = 0.0;
  *(_OWORD *)v126 = v133;
  *(float64_t *)(v126 + 16) = v152;
  *(_QWORD *)(v126 + 24) = 0;
  *(_OWORD *)(v126 + 32) = v132;
  *(_QWORD *)(v126 + 48) = v149;
  *(_QWORD *)(v126 + 56) = 0;
  *(float64_t *)&v135 = v143.f64[0];
  *((_QWORD *)&v135 + 1) = *(_QWORD *)&v142.f64[0];
  *(_OWORD *)(v126 + 64) = v135;
  *(float64_t *)(v126 + 80) = v144.f64[0];
  *(_QWORD *)(v126 + 88) = 0;
  *(float64_t *)&v135 = v140;
  *((_QWORD *)&v135 + 1) = v138;
  *(_OWORD *)(v126 + 96) = v135;
  *(double *)(v126 + 112) = v139;
  *(_QWORD *)(v126 + 120) = 0x3FF0000000000000;
  *(float *)(v126 + 128) = v134;
  *(_OWORD *)(v126 + 136) = *(_OWORD *)v164;
  *(_QWORD *)(v126 + 152) = *(_QWORD *)&v164[16];
  *(_BYTE *)(v126 + 160) = 0;
  *(_BYTE *)(v126 + 184) = 0;
  *(_BYTE *)(v126 + 192) = 0;
}

void sub_20EF34304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t a69;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v77 = *(_QWORD **)(v75 - 144);
  if (v77 == v74)
  {
    v78 = 4;
  }
  else
  {
    if (!v77)
      goto LABEL_6;
    v78 = 5;
    v74 = *(_QWORD **)(v75 - 144);
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v78))(v74);
LABEL_6:
  if ((_QWORD *)STACK[0x300] == v73)
  {
    v79 = 4;
  }
  else
  {
    if (!STACK[0x300])
      goto LABEL_11;
    v79 = 5;
    v73 = (_QWORD *)STACK[0x300];
  }
  (*(void (**)(_QWORD *))(*v73 + 8 * v79))(v73);
LABEL_11:
  if ((_QWORD *)STACK[0x340] == v72)
  {
    v80 = 4;
  }
  else
  {
    if (!STACK[0x340])
      goto LABEL_16;
    v80 = 5;
    v72 = (_QWORD *)STACK[0x340];
  }
  (*(void (**)(_QWORD *))(*v72 + 8 * v80))(v72);
LABEL_16:
  if ((_QWORD *)STACK[0x280] == v69)
  {
    v81 = 4;
  }
  else
  {
    if (!STACK[0x280])
      goto LABEL_21;
    v81 = 5;
    v69 = (_QWORD *)STACK[0x280];
  }
  (*(void (**)(_QWORD *))(*v69 + 8 * v81))(v69);
LABEL_21:
  if ((_QWORD *)STACK[0x2C0] == v70)
  {
    v82 = 4;
  }
  else
  {
    if (!STACK[0x2C0])
      goto LABEL_26;
    v82 = 5;
    v70 = (_QWORD *)STACK[0x2C0];
  }
  (*(void (**)(_QWORD *))(*v70 + 8 * v82))(v70);
LABEL_26:
  sub_20EF34694(&a69);
  if (v71)
  {
    a61 = (uint64_t)v71;
    operator delete(v71);
    sub_20E8C25A8((uint64_t)&a63);
    sub_20E9DD680(&a57);
    _Unwind_Resume(a1);
  }
  sub_20E8C25A8((uint64_t)&a63);
  sub_20E9DD680(&a57);
  _Unwind_Resume(a1);
}

void sub_20EF3454C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;

  if (a69)
    JUMPOUT(0x20EF3455CLL);
  JUMPOUT(0x20EF34560);
}

void sub_20EF34570(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E969238();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v11 - 2) = v13;
            operator delete(v13);
          }
          v11 = v12;
        }
        while (v12 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

_QWORD *sub_20EF34694(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 10;
  v3 = (_QWORD *)a1[13];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[6];
  if (v5 == a1 + 3)
  {
    v6 = 4;
    v5 = a1 + 3;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_20EF34718()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EF3472C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9F1450;
  result[1] = v3;
  return result;
}

uint64_t sub_20EF34760(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9F1450;
  a2[1] = v2;
  return result;
}

float sub_20EF3477C(uint64_t a1, uint64_t a2, double a3, float32x2_t a4, double a5, float32x2_t a6, double a7, float32x2_t a8, double a9, double a10)
{
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;

  v10 = *(_QWORD *)(a1 + 8);
  a4.i32[0] = *(_DWORD *)(a2 + 8);
  a6.i32[0] = *(_DWORD *)(a2 + 20);
  a8.i32[0] = *(_DWORD *)(a2 + 32);
  v11 = *(float32x2_t *)(v10 + 12);
  LODWORD(a10) = *(_DWORD *)(v10 + 20);
  v12 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a2, v11.f32[0]), *(float32x2_t *)(a2 + 12), v11, 1), *(float32x2_t *)(a2 + 24), *(float *)&a10);
  return sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(v11, v12), (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1), v11, 1), vmla_f32(vmla_lane_f32(vmul_f32(a4, v11), a6, v11, 1), *(float32x2_t *)&a10, a8), *(float32x2_t *)&a10).f32[0]);
}

uint64_t sub_20EF347D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3acv16surfacedetection12_GLOBAL__N_123computePlaneUncertaintyERKNS0_8geometry5PlaneIfEENS_3e"
                     "sn4spanIKNS3_15IndexedTriangleImEELm18446744073709551615EEENS9_IKN3cva6MatrixIfLj3ELj3ELb1EEELm1844"
                     "6744073709551615EEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3acv16surfacedetection12_GLOBAL__N_123computePlaneUncertaintyERKNS0_8geometry5Pla"
                                "neIfEENS_3esn4spanIKNS3_15IndexedTriangleImEELm18446744073709551615EEENS9_IKN3cva6Matrix"
                                "IfLj3ELj3ELb1EEELm18446744073709551615EEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3acv16surfacedetection12_GLOBAL__N_123computePlaneUncertaintyERKNS0_8geometry5PlaneIfEENS_3esn4spanIKNS3_15IndexedTriangleImEELm18446744073709551615EEENS9_IKN3cva6MatrixIfLj3ELj3ELb1EEELm18446744073709551615EEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3acv16surfacedetection12_GLOBAL__N_123computePlaneUncertaintyERKNS0_8geometry5PlaneIfEENS_3esn4spanIKNS3_15IndexedTriangleImEELm18446744073709551615EEENS9_IKN3cva6MatrixIfLj3ELj3ELb1EEELm18446744073709551615EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF34844()
{
  return &unk_24C9F14C0;
}

BOOL sub_20EF34850(int a1, int a2)
{
  _BOOL8 result;
  char v3;
  char v4;

  switch(a1)
  {
    case 0:
      result = a2 != 9;
      break;
    case 1:
      v3 = a2 - 2;
      if ((a2 - 2) <= 9 && ((0x24Du >> v3) & 1) != 0)
        result = qword_21038A950[v3] != 5;
      else
        result = &unk_21038A941 - &unk_21038A93C != 5;
      break;
    case 2:
      result = a2 == 3;
      break;
    case 3:
      v4 = a2 - 1;
      if ((a2 - 1) <= 0xA && ((0x6F9u >> v4) & 1) != 0)
        result = qword_21038A9A0[v4] != 8;
      else
        result = &unk_21038A949 - &unk_21038A941 != 8;
      break;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Tracker/PlaneSemanticsUtil.cpp", 66, (uint64_t)"", 0, (uint64_t)"Unsupported orientation", 23, (void (*)(void **))sub_21023DDB0);
      abort();
  }
  return result;
}

uint64_t sub_20EF34998(uint64_t a1, double *a2, __int16 a3)
{
  double v3;
  double v4;
  char v5;
  double v6;
  double v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  double *v10;
  unsigned __int8 v11;
  double v12;
  double v13;
  int v14;
  int v15;
  unsigned __int8 v16;
  _BOOL4 v17;
  __int16 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *a2;
  v4 = a2[1];
  v5 = v4 > *a2;
  if (v4 > *a2)
    v3 = a2[1];
  if (a2[2] > v3)
  {
    v3 = a2[2];
    v5 = 2;
  }
  if (a2[3] > v3)
  {
    v3 = a2[3];
    v5 = 3;
  }
  if (a2[4] > v3)
  {
    v3 = a2[4];
    v5 = 4;
  }
  if (a2[5] > v3)
  {
    v3 = a2[5];
    v5 = 5;
  }
  if (a2[6] > v3)
  {
    v3 = a2[6];
    v5 = 6;
  }
  if (a2[7] > v3)
  {
    v3 = a2[7];
    v5 = 7;
  }
  if (a2[8] > v3)
  {
    v3 = a2[8];
    v5 = 8;
  }
  if (a2[9] > v3)
  {
    v3 = a2[9];
    v5 = 9;
  }
  v6 = a2[11];
  if (a2[10] > v3)
  {
    v3 = a2[10];
    v5 = 10;
  }
  if (v6 <= v3)
    v7 = v3;
  else
    v7 = a2[11];
  if (v6 <= v3)
    v8 = v5;
  else
    v8 = 11;
  v9 = atomic_load((unsigned __int8 *)&qword_254A51718);
  v10 = (double *)&unk_254A51000;
  if ((v9 & 1) == 0)
  {
    v25 = a1;
    v19 = a3;
    v20 = __cxa_guard_acquire(&qword_254A51718);
    v10 = (double *)&unk_254A51000;
    a3 = v19;
    v21 = v20;
    a1 = v25;
    if (v21)
    {
      qword_254A51710 = 0x3FEF838B8C811C17;
      __cxa_guard_release(&qword_254A51718);
      v10 = (double *)&unk_254A51000;
      a1 = v25;
      a3 = v19;
    }
  }
  v11 = atomic_load((unsigned __int8 *)&qword_254A51728);
  if ((v11 & 1) == 0)
  {
    v24 = a3;
    v26 = a1;
    v22 = __cxa_guard_acquire(&qword_254A51728);
    v10 = (double *)&unk_254A51000;
    v23 = v22;
    a3 = v24;
    a1 = v26;
    if (v23)
    {
      qword_254A51720 = 0x3FC63A1A7E0B738CLL;
      __cxa_guard_release(&qword_254A51728);
      v10 = (double *)&unk_254A51000;
      a3 = v24;
      a1 = v26;
    }
  }
  v12 = *(double *)(a1 + 16);
  v13 = fabs(v12);
  if (v13 <= *(double *)&qword_254A51720)
    v14 = 2;
  else
    v14 = 4;
  if (v13 >= v10[226])
    v14 = 1;
  if (v14 == 4)
  {
    v15 = 0;
  }
  else if (v14 == 2)
  {
    v15 = 3;
  }
  else if (v12 >= 0.0)
  {
    v15 = 1;
  }
  else
  {
    v15 = 2;
  }
  if ((a3 & 0xFF00) != 0)
    v16 = a3;
  else
    v16 = 0;
  if (v7 < 0.6)
    goto LABEL_48;
  v17 = sub_20EF34850(v15, v8);
  if (v17)
    v16 = v8;
  if (!v17)
  {
LABEL_48:
    if (v7 < 0.4)
      return 0;
  }
  return v16;
}

__n128 sub_20EF34C30(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 504))
  {
    sub_20EF385A0(a1, (__int128 *)a2);
  }
  else
  {
    v3 = *(_OWORD *)a2;
    v4 = *(_OWORD *)(a2 + 16);
    v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    *(_OWORD *)a1 = v3;
    *(_OWORD *)(a1 + 16) = v4;
    v6 = *(_OWORD *)(a2 + 64);
    v7 = *(_OWORD *)(a2 + 80);
    v8 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v8;
    *(_OWORD *)(a1 + 64) = v6;
    *(_OWORD *)(a1 + 80) = v7;
    v9 = *(_OWORD *)(a2 + 128);
    v10 = *(_OWORD *)(a2 + 144);
    v11 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v11;
    *(_OWORD *)(a1 + 128) = v9;
    *(_OWORD *)(a1 + 144) = v10;
    v12 = *(_OWORD *)(a2 + 192);
    v13 = *(_OWORD *)(a2 + 208);
    v14 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v14;
    *(_OWORD *)(a1 + 192) = v12;
    *(_OWORD *)(a1 + 208) = v13;
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 264) = 0;
    *(_BYTE *)(a1 + 368) = 0;
    if (*(_BYTE *)(a2 + 368))
    {
      *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
      v15 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 288) = v15;
      v16 = *(_OWORD *)(a2 + 304);
      v17 = *(_OWORD *)(a2 + 320);
      v18 = *(_OWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 352) = v18;
      *(_OWORD *)(a1 + 304) = v16;
      *(_OWORD *)(a1 + 320) = v17;
      *(_BYTE *)(a1 + 368) = 1;
    }
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    *(_QWORD *)(a1 + 440) = 0;
    v19 = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 432) = v19;
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a2 + 424) = 0;
    *(_QWORD *)(a2 + 432) = 0;
    *(_QWORD *)(a2 + 440) = 0;
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 456) = 0;
    *(_QWORD *)(a1 + 464) = 0;
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a2 + 456) = 0;
    *(_QWORD *)(a2 + 464) = 0;
    *(_QWORD *)(a2 + 448) = 0;
    v20 = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 496) = 0;
    *(_QWORD *)(a1 + 472) = v20;
    *(_QWORD *)(a1 + 480) = 0;
    result = *(__n128 *)(a2 + 480);
    *(__n128 *)(a1 + 480) = result;
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a2 + 480) = 0;
    *(_QWORD *)(a2 + 488) = 0;
    *(_QWORD *)(a2 + 496) = 0;
    *(_BYTE *)(a1 + 504) = 1;
  }
  return result;
}

_QWORD *sub_20EF34D88(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[60];
  if (v2)
  {
    a1[61] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[56];
  if (v3)
  {
    a1[57] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[53];
  if (v4)
  {
    a1[54] = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20EF34DD8(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t **v19;
  uint64_t *v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t *v56;
  _QWORD *v57;
  _QWORD *v58;
  BOOL v59;
  _QWORD *v61;
  _BYTE v62[424];
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *__p;
  void *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  __int128 v87;
  char v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  _OWORD v92[16];
  int v93;
  char v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  char v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  char v113;

  v4 = a1;
  *a1 = *a3;
  v5 = operator new();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)v5 = v5 + 8;
  *(_BYTE *)(v5 + 24) = 0;
  *(_WORD *)(v5 + 40) = 768;
  v4[1] = v5;
  v4[2] = sub_20EF38948;
  v61 = v4;
  sub_20E8965F4();
  *((_DWORD *)v4 + 12) = 0;
  v8 = (_QWORD *)*a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != v6)
  {
    v9 = &v77;
    while (1)
    {
      v10 = *(_DWORD *)v4;
      if (*((float *)v4 + 1) != *((float *)v7 + 44))
        break;
      if (*(_DWORD *)v4 != *((_DWORD *)v7 + 46))
        goto LABEL_9;
LABEL_10:
      v11 = *((_OWORD *)v7 + 8);
      v73 = *((_OWORD *)v7 + 7);
      v74 = v11;
      v12 = *((_OWORD *)v7 + 10);
      v75 = *((_OWORD *)v7 + 9);
      v76 = v12;
      v13 = *((_OWORD *)v7 + 4);
      v69 = *((_OWORD *)v7 + 3);
      v70 = v13;
      v14 = *((_OWORD *)v7 + 6);
      v71 = *((_OWORD *)v7 + 5);
      v72 = v14;
      *v9 = v7[22];
      *((_DWORD *)v9 + 2) = *((_DWORD *)v7 + 46);
      sub_20EF37728((uint64_t)&v78, (uint64_t)(v7 + 24));
      v85 = 0;
      v88 = 0;
      if (*((_BYTE *)v7 + 312))
      {
        v15 = v9;
        v16 = v6;
        v85 = *((_BYTE *)v7 + 272);
        v17 = v7[35];
        v18 = operator new(0x58uLL);
        v18[1] = 0;
        v18[2] = 0;
        *v18 = &off_24C9F1308;
        *((_DWORD *)v18 + 6) = *(_DWORD *)v17;
        *(_QWORD *)((char *)v18 + 28) = *(_QWORD *)(v17 + 4);
        *(_QWORD *)((char *)v18 + 36) = *(_QWORD *)(v17 + 12);
        sub_20EF295B0((uint64_t)(v18 + 6), v17 + 24);
        *(_QWORD *)&v86 = v18 + 3;
        *((_QWORD *)&v86 + 1) = v18;
        v87 = *(_OWORD *)(v7 + 37);
        v88 = 1;
        v4 = v61;
        v6 = v16;
        v9 = v15;
      }
      v89 = v7[40];
      v90 = *((_DWORD *)v7 + 82);
      v91 = *((_OWORD *)v7 + 21);
      LOBYTE(v92[0]) = 0;
      v113 = 0;
      if (*((_DWORD *)v7 + 86) + *((_DWORD *)v7 + 87) >= v10 && sub_20EF2C850((uint64_t)(v7 + 24), v10) >= 0.09)
      {
        sub_20EF3A62C((uint64_t)(v7 + 6), 8, (uint64_t)v62);
        sub_20EF34C30((uint64_t)v92, (uint64_t)v62);
        if (__p)
        {
          v68 = __p;
          operator delete(__p);
        }
        if (v65)
        {
          v66 = v65;
          operator delete(v65);
        }
        if (v63)
        {
          v64 = v63;
          operator delete(v63);
        }
      }
      v19 = (uint64_t **)v4[1];
      v21 = v19 + 1;
      v20 = v19[1];
      if (!v20)
      {
        v23 = (uint64_t *)(v19 + 1);
        goto LABEL_62;
      }
      v22 = *((unsigned __int8 *)v7 + 32);
      do
      {
        while (1)
        {
          v23 = v20;
          v24 = *((unsigned __int8 *)v20 + 32);
          v25 = v22 >= v24;
          if (v22 == v24)
            break;
          v26 = *((unsigned __int8 *)v7 + 32);
LABEL_56:
          if (v25)
            goto LABEL_58;
LABEL_22:
          v20 = (uint64_t *)*v23;
          v21 = v23;
          if (!*v23)
            goto LABEL_62;
        }
        v26 = *((unsigned __int8 *)v7 + 33);
        v24 = *((unsigned __int8 *)v23 + 33);
        v25 = v26 >= v24;
        if (v26 != v24)
          goto LABEL_56;
        v27 = *((unsigned __int8 *)v7 + 34);
        v28 = *((unsigned __int8 *)v23 + 34);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 35);
        v28 = *((unsigned __int8 *)v23 + 35);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 36);
        v28 = *((unsigned __int8 *)v23 + 36);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 37);
        v28 = *((unsigned __int8 *)v23 + 37);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 38);
        v28 = *((unsigned __int8 *)v23 + 38);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 39);
        v28 = *((unsigned __int8 *)v23 + 39);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 40);
        v28 = *((unsigned __int8 *)v23 + 40);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 41);
        v28 = *((unsigned __int8 *)v23 + 41);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 42);
        v28 = *((unsigned __int8 *)v23 + 42);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 43);
        v28 = *((unsigned __int8 *)v23 + 43);
        if (v27 != v28)
          goto LABEL_39;
        v27 = *((unsigned __int8 *)v7 + 44);
        v28 = *((unsigned __int8 *)v23 + 44);
        if (v27 != v28
          || (v27 = *((unsigned __int8 *)v7 + 45), v28 = *((unsigned __int8 *)v23 + 45), v27 != v28)
          || (v27 = *((unsigned __int8 *)v7 + 46), v28 = *((unsigned __int8 *)v23 + 46), v27 != v28)
          || (v27 = *((unsigned __int8 *)v7 + 47), v28 = *((unsigned __int8 *)v23 + 47), v27 != v28))
        {
LABEL_39:
          if (v27 < v28)
            goto LABEL_22;
        }
        v24 = *((unsigned __int8 *)v23 + 34);
        v26 = *((unsigned __int8 *)v7 + 34);
        if (v24 == v26)
        {
          v24 = *((unsigned __int8 *)v23 + 35);
          v26 = *((unsigned __int8 *)v7 + 35);
          if (v24 == v26)
          {
            v24 = *((unsigned __int8 *)v23 + 36);
            v26 = *((unsigned __int8 *)v7 + 36);
            if (v24 == v26)
            {
              v24 = *((unsigned __int8 *)v23 + 37);
              v26 = *((unsigned __int8 *)v7 + 37);
              if (v24 == v26)
              {
                v24 = *((unsigned __int8 *)v23 + 38);
                v26 = *((unsigned __int8 *)v7 + 38);
                if (v24 == v26)
                {
                  v24 = *((unsigned __int8 *)v23 + 39);
                  v26 = *((unsigned __int8 *)v7 + 39);
                  if (v24 == v26)
                  {
                    v24 = *((unsigned __int8 *)v23 + 40);
                    v26 = *((unsigned __int8 *)v7 + 40);
                    if (v24 == v26)
                    {
                      v24 = *((unsigned __int8 *)v23 + 41);
                      v26 = *((unsigned __int8 *)v7 + 41);
                      if (v24 == v26)
                      {
                        v24 = *((unsigned __int8 *)v23 + 42);
                        v26 = *((unsigned __int8 *)v7 + 42);
                        if (v24 == v26)
                        {
                          v24 = *((unsigned __int8 *)v23 + 43);
                          v26 = *((unsigned __int8 *)v7 + 43);
                          if (v24 == v26)
                          {
                            v24 = *((unsigned __int8 *)v23 + 44);
                            v26 = *((unsigned __int8 *)v7 + 44);
                            if (v24 == v26)
                            {
                              v24 = *((unsigned __int8 *)v23 + 45);
                              v26 = *((unsigned __int8 *)v7 + 45);
                              if (v24 == v26)
                              {
                                v24 = *((unsigned __int8 *)v23 + 46);
                                v26 = *((unsigned __int8 *)v7 + 46);
                                if (v24 == v26)
                                {
                                  v24 = *((unsigned __int8 *)v23 + 47);
                                  v26 = *((unsigned __int8 *)v7 + 47);
                                  if (v24 == v26)
                                    goto LABEL_73;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_58:
        if (v24 >= v26)
          goto LABEL_73;
        v20 = (uint64_t *)v23[1];
      }
      while (v20);
      v21 = v23 + 1;
LABEL_62:
      v29 = operator new(0x360uLL);
      v30 = *((_OWORD *)v7 + 2);
      v31 = v73;
      v32 = v75;
      v33 = v76;
      v29[8] = v74;
      v29[9] = v32;
      v29[10] = v33;
      v34 = v69;
      v35 = v70;
      v29[2] = v30;
      v29[3] = v34;
      v36 = v71;
      v37 = v72;
      v29[4] = v35;
      v29[5] = v36;
      v29[6] = v37;
      v29[7] = v31;
      *((_DWORD *)v29 + 46) = *((_DWORD *)v9 + 2);
      *((_QWORD *)v29 + 22) = *v9;
      *((_DWORD *)v29 + 48) = v78;
      v38 = v80;
      *((_QWORD *)v29 + 25) = v79;
      *((_QWORD *)v29 + 26) = v38;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
      v39 = v81;
      *(_QWORD *)&v81 = 0;
      *(_OWORD *)((char *)v29 + 216) = v39;
      *(_OWORD *)((char *)v29 + 232) = v82;
      v82 = 0uLL;
      *((_QWORD *)&v81 + 1) = 0;
      *(_OWORD *)((char *)v29 + 248) = v83;
      *((_QWORD *)v29 + 33) = v84;
      v84 = 0;
      v83 = 0uLL;
      *((_BYTE *)v29 + 272) = 0;
      *((_BYTE *)v29 + 312) = 0;
      if (v88)
      {
        *((_BYTE *)v29 + 272) = v85;
        *(_OWORD *)((char *)v29 + 280) = v86;
        v86 = 0uLL;
        *(_OWORD *)((char *)v29 + 296) = v87;
        *((_BYTE *)v29 + 312) = 1;
      }
      *((_QWORD *)v29 + 40) = v89;
      *((_DWORD *)v29 + 82) = v90;
      v29[21] = v91;
      *((_BYTE *)v29 + 352) = 0;
      *((_BYTE *)v29 + 856) = 0;
      if (v113)
      {
        v40 = v92[5];
        v29[26] = v92[4];
        v29[27] = v40;
        v41 = v92[7];
        v29[28] = v92[6];
        v29[29] = v41;
        v42 = v92[1];
        v29[22] = v92[0];
        v29[23] = v42;
        v43 = v92[3];
        v29[24] = v92[2];
        v29[25] = v43;
        v44 = v92[8];
        v45 = v92[9];
        v46 = v92[11];
        v29[32] = v92[10];
        v29[33] = v46;
        v29[30] = v44;
        v29[31] = v45;
        v47 = v92[12];
        v48 = v92[13];
        v49 = v92[15];
        v29[36] = v92[14];
        v29[37] = v49;
        v29[34] = v47;
        v29[35] = v48;
        *((_DWORD *)v29 + 152) = v93;
        *((_BYTE *)v29 + 616) = 0;
        *((_BYTE *)v29 + 720) = 0;
        if (v101)
        {
          *((_BYTE *)v29 + 616) = v94;
          v50 = v98;
          v29[41] = v97;
          v29[42] = v50;
          v51 = v100;
          v29[43] = v99;
          v29[44] = v51;
          v52 = v96;
          v29[39] = v95;
          v29[40] = v52;
          *((_BYTE *)v29 + 720) = 1;
        }
        *((_QWORD *)v29 + 91) = v102;
        v53 = v104;
        v29[46] = v103;
        v29[47] = v53;
        *((_QWORD *)v29 + 96) = v105;
        *((_QWORD *)v29 + 97) = v106;
        v54 = v107;
        v55 = v108;
        v107 = 0uLL;
        v106 = 0;
        v29[49] = v54;
        v29[50] = v55;
        *((_QWORD *)v29 + 102) = v109;
        v108 = 0uLL;
        v109 = 0;
        *((_QWORD *)v29 + 103) = v110;
        v29[52] = v111;
        *((_QWORD *)v29 + 106) = v112;
        v111 = 0uLL;
        v112 = 0;
        *((_BYTE *)v29 + 856) = 1;
      }
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = 0;
      *((_QWORD *)v29 + 2) = v23;
      *v21 = v29;
      v56 = (uint64_t *)**v19;
      if (v56)
      {
        *v19 = v56;
        v29 = (_OWORD *)*v21;
      }
      sub_20E868578(v19[1], (uint64_t *)v29);
      v19[2] = (uint64_t *)((char *)v19[2] + 1);
LABEL_73:
      sub_20EF38758((uint64_t)&v69);
      v57 = (_QWORD *)v7[1];
      if (v57)
      {
        do
        {
          v58 = v57;
          v57 = (_QWORD *)*v57;
        }
        while (v57);
      }
      else
      {
        do
        {
          v58 = (_QWORD *)v7[2];
          v59 = *v58 == (_QWORD)v7;
          v7 = v58;
        }
        while (!v59);
      }
      v7 = v58;
      if (v58 == v6)
        return v4;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Tracker/PlaneTracker.cpp", 68, (uint64_t)"ExactlyEqual(m_params.cellSize, regParams.quadTreeCellSize)", 59, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_80;
    }
    if (*(_DWORD *)v4 == *((_DWORD *)v7 + 46))
      goto LABEL_10;
LABEL_9:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Tracker/PlaneTracker.cpp", 69, (uint64_t)"m_params.minNumFrames == regParams.minNumFrames", 47, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_80:
      abort();
    }
    goto LABEL_10;
  }
  return v4;
}

void sub_20EF355F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v18;

  v18 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = 0;
  if (v18)
    (*(void (**)(void))(a16 + 16))();
  _Unwind_Resume(exception_object);
}

void sub_20EF35618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20EF34D88(va);
  sub_20EF38758((uint64_t)&STACK[0x270]);
  sub_20EF25460(a9);
  _Unwind_Resume(a1);
}

void sub_20EF3571C(uint64_t a1@<X0>, char **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD **)(a1 + 8);
  v5 = (_QWORD *)*v2;
  v3 = v2 + 1;
  v4 = v5;
  if (v5 != v3)
  {
    v7 = 0;
    while (!*((_BYTE *)v4 + 856))
    {
LABEL_20:
      v20 = (_QWORD *)v4[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v4[2];
          v22 = *v21 == (_QWORD)v4;
          v4 = v21;
        }
        while (!v22);
      }
      v4 = v21;
      if (v21 == v3)
        return;
    }
    v8 = v4 + 4;
    v9 = v4 + 44;
    v10 = (unint64_t)a2[2];
    if ((unint64_t)v7 >= v10)
    {
      v11 = *a2;
      v12 = (v7 - *a2) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        sub_20EF38824();
      v14 = v10 - (_QWORD)v11;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15 >> 60)
        sub_20E877A38();
      v16 = (char *)operator new(16 * v15);
      v17 = &v16[16 * v12];
      *(_QWORD *)v17 = v8;
      *((_QWORD *)v17 + 1) = v9;
      if (v7 == v11)
      {
        v7 = v17 + 16;
        *a2 = v17;
        a2[1] = v17 + 16;
        a2[2] = &v16[16 * v15];
        if (!v11)
          goto LABEL_19;
      }
      else
      {
        v18 = &v16[16 * v12];
        do
        {
          v19 = v18 - 16;
          *((_OWORD *)v18 - 1) = *((_OWORD *)v7 - 1);
          v7 -= 16;
          v18 -= 16;
        }
        while (v7 != v11);
        v7 = v17 + 16;
        *a2 = v19;
        a2[1] = v17 + 16;
        a2[2] = &v16[16 * v15];
        if (!v11)
          goto LABEL_19;
      }
      operator delete(v11);
    }
    else
    {
      *(_QWORD *)v7 = v8;
      *((_QWORD *)v7 + 1) = v9;
      v7 += 16;
    }
LABEL_19:
    a2[1] = v7;
    goto LABEL_20;
  }
}

void sub_20EF358A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20EF358C0@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  char *result;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int64x2_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  int64x2_t v15;
  char *v16;
  __int128 v17;
  int64x2_t *v18;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[2];
  v15 = 0uLL;
  v16 = 0;
  if (v4)
  {
    if (v4 >> 60)
      sub_20EF38824();
    result = (char *)operator new(16 * v4);
    v6 = &result[16 * v4];
    v15.i64[0] = (uint64_t)result;
    v15.i64[1] = (uint64_t)result;
    v16 = v6;
    v9 = (_QWORD *)*v3;
    v7 = v3 + 1;
    v8 = v9;
    v18 = &v15;
    if (v9 == v7)
      goto LABEL_6;
  }
  else
  {
    v6 = 0;
    result = 0;
    v10 = (_QWORD *)*v3;
    v7 = v3 + 1;
    v8 = v10;
    v18 = &v15;
    if (v10 == v7)
    {
LABEL_6:
      v11 = vdupq_n_s64((unint64_t)result);
      goto LABEL_15;
    }
  }
  do
  {
    *(_QWORD *)&v17 = v8 + 4;
    *((_QWORD *)&v17 + 1) = v8 + 6;
    result = (char *)sub_20EF38838((char ***)&v18, &v17);
    v12 = (_QWORD *)v8[1];
    if (v12)
    {
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        v13 = (_QWORD *)v8[2];
        v14 = *v13 == (_QWORD)v8;
        v8 = v13;
      }
      while (!v14);
    }
    v8 = v13;
  }
  while (v13 != v7);
  v11 = v15;
  v6 = v16;
LABEL_15:
  *a2 = v11;
  a2[1].i64[0] = (uint64_t)v6;
  return result;
}

void sub_20EF359C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EF359E8(uint64_t a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  _BYTE *v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v76;
  size_t v77;
  void **v78;
  unint64_t v79;
  void **v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  size_t v86;
  const char *v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  const char *v90;
  size_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v98;
  size_t v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  size_t v102;
  size_t v103;
  _QWORD *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  char v109;
  _QWORD *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  char *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  _QWORD *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  const char *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  int v161;
  _BYTE *v162;
  _BYTE *v163;
  uint64_t v164;
  char *__s;
  char *__sa;
  int64x2_t v167;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v169;
  const char *v170;
  int v171;
  const char *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  void *__dst[2];
  int64_t v176;
  uint64_t v177;
  int64x2_t v178;
  void *v179[2];
  std::__shared_weak_count *v180;
  char *v181;
  std::__shared_weak_count *v182;
  _QWORD *v183;
  __int128 v184;
  _BYTE object[24];
  __int128 v186;
  void *__p[2];
  unint64_t v188;
  char v189;
  unint64_t v190;
  void *v191;
  char v192;
  unint64_t v193;
  int v194;
  uint64_t v195;
  _BYTE v196[24];
  __int128 v197;
  char *v198;
  const char *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  _QWORD v202[5];

  v202[2] = *MEMORY[0x24BDAC8D0];
  sub_20EF36F90(__dst);
  if (**((int **)__dst[0] + 7) <= 3)
  {
    v2 = *((unsigned __int8 *)__dst[0] + 72);
    v3 = sub_20E8C31DC((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
    v4 = v3;
    if (v2 || v3 != 0)
    {
      *(_QWORD *)v196 = __dst;
      *(std::chrono::steady_clock::time_point *)&v196[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v196[16] = std::chrono::system_clock::now();
      LODWORD(v197) = 3;
      *((_QWORD *)&v197 + 1) = "unknown file";
      LODWORD(v198) = 119;
      v200 = 0;
      v201 = 0;
      v199 = "unknown function";
      sub_20EF3571C(a1, (char **)&v167);
      v7 = v167.i64[1];
      v6 = v167.i64[0];
      sub_20EF358C0(a1, (int64x2_t *)v179);
      v161 = v2;
      v8 = **(_QWORD **)v196;
      v9 = (const char *)(**(_QWORD **)v196 + 16);
      v160 = v9;
      if (*(char *)(**(_QWORD **)v196 + 39) < 0)
      {
        v9 = *(const char **)(v8 + 16);
        v10 = *(_QWORD *)(v8 + 24);
      }
      else
      {
        v10 = *(unsigned __int8 *)(**(_QWORD **)v196 + 39);
      }
      v163 = v179[1];
      __s = (char *)v6;
      v162 = v179[0];
      v11 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v186 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v12 = byte_254A4A4F8;
      else
        v12 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v13 = byte_254A4A4F8[23];
      else
        v13 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v12, v9);
      v14 = &object[8];
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v13 >= 0x17)
      {
        v15 = v4;
        v16 = v9;
        v17 = a1;
        v18 = v8;
        v19 = v7;
        v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v20 = v13 | 7;
        v21 = v20 + 1;
        v14 = operator new(v20 + 1);
        *(_QWORD *)&object[16] = v13;
        *(_QWORD *)&v186 = v21 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v14;
        v7 = v19;
        v8 = v18;
        a1 = v17;
        v9 = v16;
        v4 = v15;
      }
      else
      {
        BYTE7(v186) = v13;
        if (!v13)
        {
LABEL_24:
          v14[v13] = 0;
          BYTE8(v186) = 1;
          v22 = __p;
          if (v10 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v10 >= 0x17)
          {
            v25 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v10 | 7) != 0x17)
              v25 = v10 | 7;
            v26 = v25 + 1;
            v22 = operator new(v25 + 1);
            __p[1] = (void *)v10;
            v188 = v26 | 0x8000000000000000;
            __p[0] = v22;
          }
          else
          {
            HIBYTE(v188) = v10;
            if (!v10)
            {
              LOBYTE(__p[0]) = 0;
              v189 = 1;
              v23 = *(NSObject **)object;
              if ((SHIBYTE(v188) & 0x80000000) == 0)
                goto LABEL_28;
              goto LABEL_34;
            }
          }
          memmove(v22, v9, v10);
          *((_BYTE *)v22 + v10) = 0;
          v189 = 1;
          v23 = *(NSObject **)object;
          if ((SHIBYTE(v188) & 0x80000000) == 0)
          {
LABEL_28:
            v24 = __s;
            if (!BYTE8(v186))
              goto LABEL_37;
            goto LABEL_35;
          }
LABEL_34:
          operator delete(__p[0]);
          v24 = __s;
          if (!BYTE8(v186))
          {
LABEL_37:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            v27 = (v7 - (uint64_t)v24) >> 4;
            if (v4 && *(_QWORD *)(v4 + 24))
            {
              v28 = _os_log_pack_size();
              v29 = (std::__shared_weak_count_vtbl *)operator new(v28, (std::align_val_t)8uLL);
              v30 = (std::__shared_weak_count *)operator new();
              v31 = v30;
              v30->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v30->__shared_owners_;
              v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v30->__shared_weak_owners_ = 0;
              v30[1].__vftable = v29;
              *(_QWORD *)object = v29;
              *(_QWORD *)&object[8] = v29;
              *(_QWORD *)&object[16] = v30;
              do
                v33 = __ldxr(p_shared_owners);
              while (__stxr(v33 + 1, p_shared_owners));
              v186 = 0uLL;
              __p[0] = 0;
              do
                v34 = __ldaxr(p_shared_owners);
              while (__stlxr(v34 - 1, p_shared_owners));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v31);
              }
              v35 = *(_QWORD *)object;
              v36 = _os_log_pack_fill();
              *(_DWORD *)v36 = 134218240;
              *(_QWORD *)(v36 + 4) = v27;
              *(_WORD *)(v36 + 12) = 2048;
              *(_QWORD *)(v36 + 14) = (v163 - v162) >> 4;
              v37 = operator new();
              v38 = *(unsigned __int8 *)(v8 + 39);
              v39 = v160;
              if ((v38 & 0x80u) != 0)
              {
                v39 = *(const char **)(v8 + 16);
                v38 = *(_QWORD *)(v8 + 24);
              }
              *(_QWORD *)v37 = v35;
              *(_OWORD *)(v37 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v37 + 24) = v186;
              v186 = 0uLL;
              *(_QWORD *)(v37 + 40) = v39;
              *(_QWORD *)(v37 + 48) = v38;
              *(_BYTE *)(v37 + 56) = 1;
              v178.i64[0] = 0;
              v183 = (_QWORD *)v37;
              (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24), &v183);
              v40 = v183;
              v183 = 0;
              if (v40)
              {
                v41 = (std::__shared_weak_count *)v40[4];
                if (v41)
                {
                  v42 = (unint64_t *)&v41->__shared_owners_;
                  do
                    v43 = __ldaxr(v42);
                  while (__stlxr(v43 - 1, v42));
                  if (!v43)
                  {
                    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                    std::__shared_weak_count::__release_weak(v41);
                  }
                }
                v44 = (std::__shared_weak_count *)v40[2];
                if (v44)
                {
                  v45 = (unint64_t *)&v44->__shared_owners_;
                  do
                    v46 = __ldaxr(v45);
                  while (__stlxr(v46 - 1, v45));
                  if (!v46)
                  {
                    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                    std::__shared_weak_count::__release_weak(v44);
                  }
                }
                MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
                v47 = v178.i64[0];
                v178.i64[0] = 0;
                if (v47)
                {
                  v48 = *(std::__shared_weak_count **)(v47 + 32);
                  if (v48)
                  {
                    v49 = (unint64_t *)&v48->__shared_owners_;
                    do
                      v50 = __ldaxr(v49);
                    while (__stlxr(v50 - 1, v49));
                    if (!v50)
                    {
                      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                      std::__shared_weak_count::__release_weak(v48);
                    }
                  }
                  v51 = *(std::__shared_weak_count **)(v47 + 16);
                  if (v51)
                  {
                    v52 = (unint64_t *)&v51->__shared_owners_;
                    do
                      v53 = __ldaxr(v52);
                    while (__stlxr(v53 - 1, v52));
                    if (!v53)
                    {
                      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                      std::__shared_weak_count::__release_weak(v51);
                    }
                  }
                  MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
                }
              }
              v54 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
              v55 = v161;
              if (*((_QWORD *)&v186 + 1))
              {
                v56 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              v58 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v59 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
            }
            else
            {
              os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
              *(_DWORD *)object = 134218240;
              *(_QWORD *)&object[4] = v27;
              *(_WORD *)&object[12] = 2048;
              *(_QWORD *)&object[14] = (v163 - v162) >> 4;
              v61 = (void *)_os_log_send_and_compose_impl();
              v55 = v161;
              if (v61)
                free(v61);
            }
            if (v179[0])
              operator delete(v179[0]);
            if (v167.i64[0])
              operator delete((void *)v167.i64[0]);
            if (v55)
            {
              sub_20EF3571C(a1, (char **)object);
              v62 = *(void **)object;
              v63 = *(_QWORD *)&object[8];
              sub_20EF358C0(a1, &v167);
              v64 = (v63 - (uint64_t)v62) >> 4;
              v65 = (void *)v167.i64[0];
              sub_20E8C003C((uint64_t)v196, "Planes in tracker: %zu %zu", v64, (v167.i64[1] - v167.i64[0]) >> 4);
              if (v65)
                operator delete(v65);
              if (v62)
                operator delete(v62);
              sub_20E863570((uint64_t)v196);
            }
            sub_20E863570((uint64_t)v196);
            v66 = v201;
            if (v201)
            {
              v67 = (unint64_t *)&v201->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            goto LABEL_99;
          }
LABEL_35:
          if (SBYTE7(v186) < 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_37;
        }
      }
      memmove(v14, v12, v13);
      goto LABEL_24;
    }
  }
LABEL_99:
  sub_20EF358C0(a1, &v178);
  v70 = v178.i64[1];
  v69 = (_QWORD *)v178.i64[0];
  if (v178.i64[0] == v178.i64[1])
    goto LABEL_251;
  v158 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v159 = *MEMORY[0x24BEDB7F0];
  v157 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v156 = MEMORY[0x24BEDB848] + 16;
  v155 = v178.i64[1];
  do
  {
    v71 = v69[1];
    sub_20EF36F90(&v177);
    if (**(int **)(v177 + 56) > 3)
      goto LABEL_102;
    v72 = *(unsigned __int8 *)(v177 + 72);
    v73 = sub_20E8C31DC(v177, "OSLogSurrogateAppender", 1, 0);
    v74 = v73;
    if (!v72 && v73 == 0)
      goto LABEL_102;
    sub_20E863438((uint64_t)object);
    v76 = sub_20E86A980(&object[16], (uint64_t)"Plane to world:", 15);
    sub_20EF37084(v76, v71);
    if ((v194 & 0x10) != 0)
    {
      v79 = v193;
      v80 = (void **)&v189;
      if (v193 < v190)
      {
        v193 = v190;
        v79 = v190;
        v80 = (void **)&v189;
      }
    }
    else
    {
      if ((v194 & 8) == 0)
      {
        v77 = 0;
        HIBYTE(v176) = 0;
        v78 = __dst;
        goto LABEL_122;
      }
      v79 = v188;
      v80 = __p;
    }
    v81 = *v80;
    v77 = v79 - (_QWORD)*v80;
    if (v77 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v77 >= 0x17)
    {
      v82 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v77 | 7) != 0x17)
        v82 = v77 | 7;
      v83 = v82 + 1;
      v78 = (void **)operator new(v82 + 1);
      __dst[1] = (void *)v77;
      v176 = v83 | 0x8000000000000000;
      __dst[0] = v78;
LABEL_121:
      memmove(v78, v81, v77);
      goto LABEL_122;
    }
    HIBYTE(v176) = v79 - *(_BYTE *)v80;
    v78 = __dst;
    if (v77)
      goto LABEL_121;
LABEL_122:
    *((_BYTE *)v78 + v77) = 0;
    v167.i64[0] = (uint64_t)&v177;
    v167.u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v169 = 3;
    v170 = "unknown file";
    v171 = 123;
    v172 = "unknown function";
    v173 = 0;
    v174 = 0;
    v84 = __dst;
    if (v176 < 0)
      v84 = (void **)__dst[0];
    __sa = (char *)v84;
    v85 = *(_QWORD *)v167.i64[0];
    if (*(char *)(*(_QWORD *)v167.i64[0] + 39) < 0)
    {
      v87 = *(const char **)(v85 + 16);
      v86 = *(_QWORD *)(v85 + 24);
      v164 = *(_QWORD *)v167.i64[0] + 16;
      v89 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v89 & 1) != 0)
        goto LABEL_128;
    }
    else
    {
      v86 = *(unsigned __int8 *)(*(_QWORD *)v167.i64[0] + 39);
      v87 = (const char *)(*(_QWORD *)v167.i64[0] + 16);
      v164 = (uint64_t)v87;
      v88 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v88 & 1) != 0)
        goto LABEL_128;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v179);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v179);
      if ((_BYTE)v181 && SHIBYTE(v180) < 0)
        operator delete(v179[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
      v70 = v155;
    }
LABEL_128:
    if (byte_254A4A4F8[23] >= 0)
      v90 = byte_254A4A4F8;
    else
      v90 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v91 = byte_254A4A4F8[23];
    else
      v91 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v196 = os_log_create(v90, v87);
    if (v91 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v91 >= 0x17)
    {
      v93 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v91 | 7) != 0x17)
        v93 = v91 | 7;
      v94 = v93 + 1;
      v92 = operator new(v93 + 1);
      *(_QWORD *)&v196[16] = v91;
      *(_QWORD *)&v197 = v94 | 0x8000000000000000;
      *(_QWORD *)&v196[8] = v92;
      v70 = v155;
LABEL_141:
      memmove(v92, v90, v91);
      goto LABEL_142;
    }
    BYTE7(v197) = v91;
    v92 = &v196[8];
    if (v91)
      goto LABEL_141;
LABEL_142:
    v92[v91] = 0;
    BYTE8(v197) = 1;
    if (v86 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v86 >= 0x17)
    {
      v97 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v86 | 7) != 0x17)
        v97 = v86 | 7;
      v98 = v97 + 1;
      v95 = (char *)operator new(v97 + 1);
      v199 = (const char *)v86;
      v200 = v98 | 0x8000000000000000;
      v198 = v95;
    }
    else
    {
      HIBYTE(v200) = v86;
      v95 = (char *)&v198;
      if (!v86)
      {
        LOBYTE(v198) = 0;
        LOBYTE(v201) = 1;
        v96 = *(NSObject **)v196;
        if ((SHIBYTE(v200) & 0x80000000) == 0)
          goto LABEL_146;
        goto LABEL_152;
      }
    }
    memmove(v95, v87, v86);
    v95[v86] = 0;
    LOBYTE(v201) = 1;
    v96 = *(NSObject **)v196;
    if ((SHIBYTE(v200) & 0x80000000) == 0)
    {
LABEL_146:
      if (!BYTE8(v197))
        goto LABEL_155;
      goto LABEL_153;
    }
LABEL_152:
    operator delete(v198);
    if (!BYTE8(v197))
      goto LABEL_155;
LABEL_153:
    if (SBYTE7(v197) < 0)
      operator delete(*(void **)&v196[8]);
LABEL_155:
    if (*(_QWORD *)v196)
      os_release(*(void **)v196);
    if (!v74 || !*(_QWORD *)(v74 + 24))
    {
      os_log_type_enabled(v96, OS_LOG_TYPE_INFO);
      *(_DWORD *)v196 = 136315138;
      *(_QWORD *)&v196[4] = __sa;
      v105 = (void *)_os_log_send_and_compose_impl();
      if (!v105)
        goto LABEL_227;
      free(v105);
      if (!v72)
        goto LABEL_231;
      goto LABEL_228;
    }
    v99 = _os_log_pack_size();
    v100 = (std::__shared_weak_count_vtbl *)operator new(v99, (std::align_val_t)8uLL);
    v101 = (std::__shared_weak_count *)operator new();
    v101->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v100;
    v179[0] = v100;
    v179[1] = v100;
    v180 = v101;
    v181 = 0;
    v182 = 0;
    v102 = strlen(__sa);
    if (v102 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v103 = v102;
    if (v102 >= 0x17)
    {
      v106 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v102 | 7) != 0x17)
        v106 = v102 | 7;
      v107 = v106 + 1;
      v104 = operator new(v106 + 1);
      *(_QWORD *)&v184 = v103;
      *((_QWORD *)&v184 + 1) = v107 | 0x8000000000000000;
      v183 = v104;
LABEL_169:
      memcpy(v104, __sa, v103);
      goto LABEL_170;
    }
    HIBYTE(v184) = v102;
    v104 = &v183;
    if (v102)
      goto LABEL_169;
LABEL_170:
    *((_BYTE *)v104 + v103) = 0;
    v108 = v183;
    v202[0] = v184;
    *(_QWORD *)((char *)v202 + 7) = *(_QWORD *)((char *)&v184 + 7);
    v109 = HIBYTE(v184);
    v110 = operator new(0x38uLL);
    v110[1] = 0;
    v110[2] = 0;
    v110[3] = off_24C9ABC20;
    *v110 = &off_24C9ABBD0;
    v111 = v202[0];
    v110[4] = v108;
    v110[5] = v111;
    *(_QWORD *)((char *)v110 + 47) = *(_QWORD *)((char *)v202 + 7);
    *((_BYTE *)v110 + 55) = v109;
    v202[0] = 0;
    *(_QWORD *)((char *)v202 + 7) = 0;
    v112 = v182;
    v181 = (char *)(v110 + 3);
    v182 = (std::__shared_weak_count *)v110;
    if (v112)
    {
      v113 = (unint64_t *)&v112->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    *(_OWORD *)v196 = *(_OWORD *)v179;
    v115 = v181;
    *(_QWORD *)&v196[16] = v180;
    if (v180)
    {
      v116 = (unint64_t *)&v180->__shared_owners_;
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
    }
    v118 = v182;
    *(_QWORD *)&v197 = v115;
    *((_QWORD *)&v197 + 1) = v182;
    if (v182)
    {
      v119 = (unint64_t *)&v182->__shared_owners_;
      do
        v120 = __ldxr(v119);
      while (__stxr(v120 + 1, v119));
      v198 = v115;
      do
        v121 = __ldaxr(v119);
      while (__stlxr(v121 - 1, v119));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    else
    {
      v198 = v115;
    }
    v122 = v180;
    if (v180)
    {
      v123 = (unint64_t *)&v180->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    v125 = *(_QWORD *)v196;
    if (v198[31] >= 0)
      v126 = v198 + 8;
    else
      v126 = (char *)*((_QWORD *)v198 + 1);
    v127 = _os_log_pack_fill();
    *(_DWORD *)v127 = 136315138;
    *(_QWORD *)(v127 + 4) = v126;
    v128 = (char *)operator new();
    v129 = *(unsigned __int8 *)(v85 + 39);
    v130 = v164;
    if ((v129 & 0x80u) != 0)
    {
      v130 = *(_QWORD *)(v85 + 16);
      v129 = *(_QWORD *)(v85 + 24);
    }
    *(_QWORD *)v128 = v125;
    *(_OWORD *)(v128 + 8) = *(_OWORD *)&v196[8];
    *(_QWORD *)&v196[8] = 0;
    *(_QWORD *)&v196[16] = 0;
    *(_OWORD *)(v128 + 24) = v197;
    v197 = 0uLL;
    *((_QWORD *)v128 + 5) = v130;
    *((_QWORD *)v128 + 6) = v129;
    v128[56] = 1;
    v183 = 0;
    v179[0] = v128;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v74 + 24) + 40))(*(_QWORD *)(v74 + 24), v179);
    v131 = v179[0];
    v179[0] = 0;
    if (v131)
    {
      v132 = (std::__shared_weak_count *)*((_QWORD *)v131 + 4);
      if (v132)
      {
        v133 = (unint64_t *)&v132->__shared_owners_;
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      v135 = (std::__shared_weak_count *)*((_QWORD *)v131 + 2);
      if (v135)
      {
        v136 = (unint64_t *)&v135->__shared_owners_;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      MEMORY[0x212BC6398](v131, 0x10F0C40B62ED6C6);
      v138 = v183;
      v183 = 0;
      if (v138)
      {
        v139 = (std::__shared_weak_count *)v138[4];
        if (v139)
        {
          v140 = (unint64_t *)&v139->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
            std::__shared_weak_count::__release_weak(v139);
          }
        }
        v142 = (std::__shared_weak_count *)v138[2];
        if (v142)
        {
          v143 = (unint64_t *)&v142->__shared_owners_;
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        MEMORY[0x212BC6398](v138, 0x10F0C40B62ED6C6);
      }
    }
    v145 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
    if (!*((_QWORD *)&v197 + 1))
      goto LABEL_223;
    v146 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
      v148 = *(std::__shared_weak_count **)&v196[16];
      if (!*(_QWORD *)&v196[16])
        goto LABEL_227;
    }
    else
    {
LABEL_223:
      v148 = *(std::__shared_weak_count **)&v196[16];
      if (!*(_QWORD *)&v196[16])
        goto LABEL_227;
    }
    v149 = (unint64_t *)&v148->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (v150)
    {
LABEL_227:
      if (!v72)
        goto LABEL_231;
      goto LABEL_228;
    }
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
    if (!v72)
      goto LABEL_231;
LABEL_228:
    v151 = (const char *)__dst;
    if (v176 < 0)
      v151 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)&v167, "%s", v151);
    sub_20E863570((uint64_t)&v167);
LABEL_231:
    sub_20E863570((uint64_t)&v167);
    v152 = v174;
    if (v174)
    {
      v153 = (unint64_t *)&v174->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
        if ((SHIBYTE(v176) & 0x80000000) == 0)
          goto LABEL_237;
LABEL_236:
        operator delete(__dst[0]);
        goto LABEL_237;
      }
    }
    if (SHIBYTE(v176) < 0)
      goto LABEL_236;
LABEL_237:
    *(_QWORD *)object = v159;
    *(_QWORD *)&object[*(_QWORD *)(v159 - 24)] = v158;
    *(_QWORD *)&object[16] = v157;
    *(_QWORD *)&v186 = v156;
    if (v192 < 0)
      operator delete(v191);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v195);
LABEL_102:
    v69 += 2;
  }
  while (v69 != (_QWORD *)v70);
  v69 = (_QWORD *)v178.i64[0];
LABEL_251:
  if (v69)
    operator delete(v69);
}

void sub_20EF36CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,void *a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  uint64_t v63;

  if (a63 && a62 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  if (a49)
    operator delete(a49);
  if (a33)
    operator delete(a33);
  sub_20E863714(v63 - 192);
  _Unwind_Resume(a1);
}

void sub_20EF36E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  sub_20E86E658((uint64_t)&a52);
  sub_20E863714((uint64_t)&a33);
  if (a47 < 0)
    operator delete(a42);
  JUMPOUT(0x20EF36F60);
}

void sub_20EF36EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  MEMORY[0x212BC6398](v47, 0x10D0C40B950D02ALL);
  sub_20E863714(&a33);
  if (a47 < 0)
    operator delete(a42);
  JUMPOUT(0x20EF36F60);
}

void sub_20EF36ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  void *v48;

  if (*(char *)(v47 - 161) < 0)
    operator delete(*(void **)(v47 - 184));
  v48 = *(void **)(v47 - 192);
  if (v48)
    os_release(v48);
  sub_20E863714((uint64_t)&a33);
  if (a47 < 0)
    operator delete(a42);
  JUMPOUT(0x20EF36F60);
}

void sub_20EF36F28(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20EF36F90(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)qword_254A60250);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_254A60250))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.acv.surfacedetection");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A60248);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(qword_254A60250);
  }
  *a1 = qword_254A60248;
}

void sub_20EF3702C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(qword_254A60250);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(qword_254A60250);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EF37084(uint64_t *a1, uint64_t a2)
{
  char *v4;
  int64_t v5;
  size_t v6;
  size_t v7;
  double v8;
  size_t v9;
  double v10;
  std::string *p_b;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  void **v32;
  void *v33;
  double v34;
  uint64_t v35;
  char *v36;
  void **v37;
  void *v38;
  double v39;
  uint64_t v40;
  char *v41;
  void **v42;
  void *v43;
  double v44;
  uint64_t v45;
  char *v46;
  void **v47;
  void *v48;
  int v50;
  void *v51;
  size_t v52;
  int64_t v53;
  std::string __b;
  std::string v55;
  void *__p[2];
  int64_t v57;

  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v50 = *((_DWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 2);
  v5 = *((_QWORD *)v4 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2))
      v5 = v6 + 2;
    v7 = v5 + ~v6;
    v8 = __exp10((double)-(uint64_t)v6);
    v9 = v7 - 1;
    if (v7 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v10 = v8;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      p_b = (std::string *)operator new(v12 + 1);
      __b.__r_.__value_.__l.__size_ = v7 - 1;
      __b.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v7 - 1;
      p_b = &__b;
      if (v7 == 1)
      {
        LODWORD(v7) = 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v10 = __exp10((double)-(uint64_t)v6);
    v9 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v7) = 4;
  }
  memset(p_b, 32, v9);
LABEL_13:
  p_b->__r_.__value_.__s.__data_[v9] = 0;
  v14 = std::string::append(&__b, "0 ", 2uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v6 >= 0x17)
  {
    v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v17 = v6 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    v52 = v6;
    v53 = v18 | 0x8000000000000000;
    v51 = v16;
    goto LABEL_20;
  }
  HIBYTE(v53) = v6;
  v16 = &v51;
  if (v6)
LABEL_20:
    memset(v16, 32, v6);
  *((_BYTE *)v16 + v6) = 0;
  if (v53 >= 0)
    v19 = (const std::string::value_type *)&v51;
  else
    v19 = (const std::string::value_type *)v51;
  if (v53 >= 0)
    v20 = HIBYTE(v53);
  else
    v20 = v52;
  v21 = std::string::append(&v55, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v57 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v53) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_85:
    operator delete(v55.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_86:
    operator delete(__b.__r_.__value_.__l.__data_);
    goto LABEL_30;
  }
  operator delete(v51);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_85;
LABEL_29:
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_86;
LABEL_30:
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  v55.__r_.__value_.__s.__data_[0] = 91;
  sub_20E86A980(a1, (uint64_t)&v55, 1);
  v23 = 0;
  v24 = a1 + 1;
  v25 = a1 + 2;
  v26 = (int)v7 + (int)v6 + 1;
  v27 = (int)v6 - 3;
  v28 = a2 + 64;
  while (1)
  {
    v29 = *(double *)(a2 + v23);
    v30 = *a1;
    v31 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v31[9] & 1) != 0)
    {
      if (v29 != 0.0)
      {
        *((_QWORD *)v31 + 3) = v26;
        *(_DWORD *)((char *)v24 + *(_QWORD *)(v30 - 24)) |= 0x400u;
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v30 - 24)) = v27;
        std::ostream::operator<<();
        goto LABEL_43;
      }
    }
    else if (fabs(v29) >= v10)
    {
      *((_QWORD *)v31 + 3) = v26;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v30 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v30 - 24)) & 0xFFFFFEFB | 4;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v30 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v30 - 24)) = (int)v6;
      std::ostream::operator<<();
      goto LABEL_43;
    }
    v32 = v57 >= 0 ? __p : (void **)__p[0];
    v33 = v57 >= 0 ? (void *)HIBYTE(v57) : __p[1];
    sub_20E86A980(a1, (uint64_t)v32, (uint64_t)v33);
LABEL_43:
    v55.__r_.__value_.__s.__data_[0] = 44;
    sub_20E86A980(a1, (uint64_t)&v55, 1);
    v34 = *(double *)(v28 + v23 - 32);
    v35 = *a1;
    v36 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v36[9] & 1) != 0)
    {
      if (v34 != 0.0)
      {
        *((_QWORD *)v36 + 3) = v26;
        *(_DWORD *)((char *)v24 + *(_QWORD *)(v35 - 24)) |= 0x400u;
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v35 - 24)) = v27;
        std::ostream::operator<<();
        goto LABEL_55;
      }
    }
    else if (fabs(v34) >= v10)
    {
      *((_QWORD *)v36 + 3) = v26;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v35 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v35 - 24)) & 0xFFFFFEFB | 4;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v35 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v35 - 24)) = (int)v6;
      std::ostream::operator<<();
      goto LABEL_55;
    }
    v37 = v57 >= 0 ? __p : (void **)__p[0];
    v38 = v57 >= 0 ? (void *)HIBYTE(v57) : __p[1];
    sub_20E86A980(a1, (uint64_t)v37, (uint64_t)v38);
LABEL_55:
    v55.__r_.__value_.__s.__data_[0] = 44;
    sub_20E86A980(a1, (uint64_t)&v55, 1);
    v39 = *(double *)(v28 + v23);
    v40 = *a1;
    v41 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v41[9] & 1) != 0)
    {
      if (v39 != 0.0)
      {
        *((_QWORD *)v41 + 3) = v26;
        *(_DWORD *)((char *)v24 + *(_QWORD *)(v40 - 24)) |= 0x400u;
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v40 - 24)) = v27;
        std::ostream::operator<<();
        goto LABEL_67;
      }
    }
    else if (fabs(v39) >= v10)
    {
      *((_QWORD *)v41 + 3) = v26;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v40 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v40 - 24)) & 0xFFFFFEFB | 4;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v40 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v40 - 24)) = (int)v6;
      std::ostream::operator<<();
      goto LABEL_67;
    }
    v42 = v57 >= 0 ? __p : (void **)__p[0];
    v43 = v57 >= 0 ? (void *)HIBYTE(v57) : __p[1];
    sub_20E86A980(a1, (uint64_t)v42, (uint64_t)v43);
LABEL_67:
    v55.__r_.__value_.__s.__data_[0] = 44;
    sub_20E86A980(a1, (uint64_t)&v55, 1);
    v44 = *(double *)(v28 + v23 + 32);
    v45 = *a1;
    v46 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v46[9] & 1) != 0)
    {
      if (v44 != 0.0)
      {
        *((_QWORD *)v46 + 3) = v26;
        *(_DWORD *)((char *)v24 + *(_QWORD *)(v45 - 24)) |= 0x400u;
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v45 - 24)) = v27;
        std::ostream::operator<<();
        goto LABEL_79;
      }
    }
    else if (fabs(v44) >= v10)
    {
      *((_QWORD *)v46 + 3) = v26;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v45 - 24)) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v45 - 24)) & 0xFFFFFEFB | 4;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v45 - 24)) |= 0x400u;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v45 - 24)) = (int)v6;
      std::ostream::operator<<();
      goto LABEL_79;
    }
    v47 = v57 >= 0 ? __p : (void **)__p[0];
    v48 = v57 >= 0 ? (void *)HIBYTE(v57) : __p[1];
    sub_20E86A980(a1, (uint64_t)v47, (uint64_t)v48);
LABEL_79:
    if (v23 == 24)
      break;
    sub_20E86A980(a1, (uint64_t)";\n ", 3);
    v23 += 8;
  }
  sub_20E86A980(a1, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v50;
  if (SHIBYTE(v57) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20EF37690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF37728(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (_QWORD *)operator new();
  *(_QWORD *)(a1 + 24) = v4;
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    v15 = 0;
    v13 = v6;
    v14 = v5;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  else
  {
    v15 = 0;
    v13 = v6;
    v14 = 0;
  }
  sub_20EF37954((uint64_t)&v15, (_QWORD *)(a1 + 24), &v13, &v11);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  v8 = v11;
  v7 = v12;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v7;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return a1;
}

void sub_20EF3786C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 40))(a11);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  sub_20EF37914(v11);
  _Unwind_Resume(a1);
}

void sub_20EF378F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF37914(uint64_t a1)
{
  uint64_t v2;

  sub_20EF38420(a1 + 24);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  return a1;
}

uint64_t sub_20EF37954@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, uint64_t **a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  result = a3[1];
  if (result && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result)) != 0)
  {
    v8 = **(_QWORD **)(*a3 + 8) + 232 * *(_QWORD *)*a3;
    result = sub_20EF37C4C(a2, v8 + 80, v8 + 96, a4);
    for (i = 0; i != 64; i += 16)
    {
      v10 = **(_QWORD **)(*a3 + 8) + 232 * *(_QWORD *)*a3 + i;
      v11 = *(_QWORD *)(v10 + 24);
      if (v11)
      {
        v12 = *(_QWORD *)(v10 + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11))
        {
          v26 = v12;
          v27 = v11;
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
          sub_20EF37954(&v28, a1, a1, a2, &v26);
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
          v13 = **a4;
          v14 = *(_QWORD *)(*a4)[1];
          v16 = v28;
          v15 = v29;
          if (v29)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
          }
          v17 = v14 + 232 * v13 + i;
          v18 = *(_QWORD *)(v17 + 24);
          *(_QWORD *)(v17 + 16) = v16;
          *(_QWORD *)(v17 + 24) = v15;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
          v19 = *v28;
          v20 = *(_QWORD *)v28[1];
          v22 = *a4;
          v21 = a4[1];
          if (v21)
          {
            (*(void (**)(uint64_t *))(*v21 + 24))(a4[1]);
            (*(void (**)(uint64_t *))(*v21 + 24))(v21);
          }
          v23 = (uint64_t **)(v20 + 232 * v19);
          v24 = v23[1];
          *v23 = v22;
          v23[1] = v21;
          if (v24)
            (*(void (**)(uint64_t *))(*v24 + 40))(v24);
          if (v21)
            (*(void (**)(uint64_t *))(*v21 + 40))(v21);
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  return result;
}

void sub_20EF37B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 40))(a14);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  v18 = *(_QWORD *)(v14 + 8);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF37C4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  char v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  _BYTE v36[13];
  _BYTE v37[13];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[31];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[32];
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[31];
  char v54;
  _QWORD v55[2];
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v6 = a1[2];
  if (a1[1] == v6)
  {
    v11 = *a1;
    v12 = *(_QWORD *)(*a1 + 8);
    v7 = 0x34F72C234F72C235 * ((uint64_t)(v12 - *(_QWORD *)*a1) >> 3);
    if (v12 >= *(_QWORD *)(*a1 + 16))
    {
      v18 = sub_20EF38140((uint64_t *)*a1, (uint64_t)&unk_21038A4BA, (__int128 *)a2, (char *)a3);
    }
    else
    {
      v13 = *(unsigned __int8 *)(a3 + 120);
      if (*(_BYTE *)(a3 + 120))
      {
        v14 = *(_BYTE *)(a3 + 96);
        if (v14)
        {
          v14 = *(_BYTE *)a3;
          v15 = *(_OWORD *)(a3 + 49);
          v45 = *(_OWORD *)(a3 + 33);
          v46 = v15;
          *(_OWORD *)v47 = *(_OWORD *)(a3 + 65);
          *(_OWORD *)&v47[15] = *(_OWORD *)(a3 + 80);
          v16 = *(_OWORD *)(a3 + 17);
          v17 = 1;
          v43 = *(_OWORD *)(a3 + 1);
          v44 = v16;
        }
        else
        {
          v17 = 0;
        }
        *(_QWORD *)v37 = *(_QWORD *)(a3 + 104);
        *(_QWORD *)&v37[5] = *(_QWORD *)(a3 + 109);
      }
      else
      {
        v17 = 0;
        v14 = 0;
      }
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(_OWORD *)v12 = 0u;
      *(_QWORD *)(v12 + 80) = *(_QWORD *)a2;
      *(_QWORD *)(v12 + 88) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(v12 + 96) = 0;
      *(_BYTE *)(v12 + 216) = 0;
      if (v13)
      {
        *(_BYTE *)(v12 + 192) = 0;
        if (v17)
        {
          v25 = v46;
          *(_OWORD *)(v12 + 129) = v45;
          *(_OWORD *)(v12 + 145) = v25;
          *(_OWORD *)(v12 + 161) = *(_OWORD *)v47;
          *(_OWORD *)(v12 + 176) = *(_OWORD *)&v47[15];
          v26 = v44;
          *(_OWORD *)(v12 + 97) = v43;
          *(_BYTE *)(v12 + 96) = v14;
          *(_OWORD *)(v12 + 113) = v26;
          *(_BYTE *)(v12 + 192) = 1;
        }
        *(_QWORD *)(v12 + 200) = *(_QWORD *)v37;
        *(_QWORD *)(v12 + 205) = *(_QWORD *)&v37[5];
        *(_BYTE *)(v12 + 216) = 1;
      }
      *(_BYTE *)(v12 + 224) = 1;
      v18 = v12 + 232;
    }
    *(_QWORD *)(v11 + 8) = v18;
    v27 = (uint64_t *)*a1;
    v28 = (_QWORD *)operator new();
    *v28 = v7;
    v28[1] = v27;
    *(_QWORD *)&v43 = v28;
    v29 = operator new();
    *(_QWORD *)v29 = &off_24C9F1358;
    *(int64x2_t *)(v29 + 8) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v29 + 24) = v28;
    *((_QWORD *)&v43 + 1) = v29;
    v30 = (_QWORD *)a1[5];
    if ((unint64_t)v30 >= a1[6])
    {
      v31 = sub_20EF2FD28((void **)a1 + 4, (uint64_t)&v43);
      v32 = *((_QWORD *)&v43 + 1);
      a1[5] = v31;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    }
    else
    {
      *v30 = v28;
      v30[1] = v29;
      a1[5] = v30 + 2;
    }
  }
  else
  {
    v7 = *(_QWORD *)(v6 - 8);
    a1[2] = v6 - 8;
    v8 = *(unsigned __int8 *)(a3 + 120);
    if (*(_BYTE *)(a3 + 120))
    {
      v9 = *(_BYTE *)(a3 + 96);
      if (v9)
      {
        v9 = *(_BYTE *)a3;
        v40 = *(_OWORD *)(a3 + 33);
        v41 = *(_OWORD *)(a3 + 49);
        *(_OWORD *)v42 = *(_OWORD *)(a3 + 65);
        *(_OWORD *)&v42[15] = *(_OWORD *)(a3 + 80);
        v10 = 1;
        v38 = *(_OWORD *)(a3 + 1);
        v39 = *(_OWORD *)(a3 + 17);
      }
      else
      {
        v10 = 0;
      }
      *(_QWORD *)v36 = *(_QWORD *)(a3 + 104);
      *(_QWORD *)&v36[5] = *(_QWORD *)(a3 + 109);
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v19 = *(_OWORD *)a2;
    *(_OWORD *)v47 = 0u;
    *(_OWORD *)&v47[16] = v19;
    v48 = 0;
    v56 = 0;
    if (v8)
    {
      v54 = 0;
      if (v10)
      {
        v51 = v40;
        v52 = v41;
        *(_OWORD *)v53 = *(_OWORD *)v42;
        *(_OWORD *)&v53[15] = *(_OWORD *)&v42[15];
        v49 = v38;
        v48 = v9;
        v50 = v39;
        v54 = 1;
      }
      v55[0] = *(_QWORD *)v36;
      *(_QWORD *)((char *)v55 + 5) = *(_QWORD *)&v36[5];
      v56 = 1;
    }
    sub_20EF2F7A0(*(_QWORD *)*a1 + 232 * v7, (uint64_t)&v43);
    if (*(_QWORD *)&v47[8])
      (*(void (**)(_QWORD))(**(_QWORD **)&v47[8] + 40))(*(_QWORD *)&v47[8]);
    if (*((_QWORD *)&v46 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 40))(*((_QWORD *)&v46 + 1));
    if (*((_QWORD *)&v45 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v45 + 1) + 40))(*((_QWORD *)&v45 + 1));
    if (*((_QWORD *)&v44 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v44 + 1) + 40))(*((_QWORD *)&v44 + 1));
    if (*((_QWORD *)&v43 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v43 + 1) + 40))(*((_QWORD *)&v43 + 1));
    v20 = (uint64_t *)*a1;
    v21 = (_QWORD *)operator new();
    *v21 = v7;
    v21[1] = v20;
    v22 = operator new();
    *(_QWORD *)v22 = &off_24C9F1358;
    *(int64x2_t *)(v22 + 8) = vdupq_n_s64(1uLL);
    *(_QWORD *)(v22 + 24) = v21;
    v23 = (_QWORD *)(a1[4] + 16 * v7);
    v24 = v23[1];
    *v23 = v21;
    v23[1] = v22;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
  }
  v35 = *(_OWORD *)(a1[4] + 16 * v7);
  v33 = *(_QWORD *)(a1[4] + 16 * v7 + 8);
  (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 24))(*((_QWORD *)&v35 + 1));
  *a4 = v35;
  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33);
}

void sub_20EF380C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF38140(uint64_t *a1, uint64_t a2, __int128 *a3, char *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  char v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int64x2_t v25;
  void *__p;
  int64x2_t v28;
  char *v29;
  _QWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v5 = a1[1];
  v7 = 0x34F72C234F72C235 * ((uint64_t)(v5 - *a1) >> 3);
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x11A7B9611A7B961)
    sub_20E867F44();
  v11 = a1[2];
  if (0x69EE58469EE5846ALL * ((v11 - v6) >> 3) > v8)
    v8 = 0x69EE58469EE5846ALL * ((v11 - v6) >> 3);
  if ((unint64_t)(0x34F72C234F72C235 * ((v11 - v6) >> 3)) >= 0x8D3DCB08D3DCB0)
    v12 = 0x11A7B9611A7B961;
  else
    v12 = v8;
  v30 = a1 + 2;
  if (v12)
  {
    if (v12 > 0x11A7B9611A7B961)
      sub_20E877A38();
    v13 = (char *)operator new(232 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = (uint64_t)&v13[232 * v7];
  __p = v13;
  v28.i64[0] = v14;
  v15 = &v13[232 * v12];
  v29 = v15;
  v16 = a4[120];
  if (a4[120])
  {
    v17 = a4[96];
    if (v17)
    {
      v17 = *a4;
      v18 = *(_OWORD *)(a4 + 49);
      v35 = *(_OWORD *)(a4 + 33);
      v36 = v18;
      v37[0] = *(_OWORD *)(a4 + 65);
      *(_OWORD *)((char *)v37 + 15) = *((_OWORD *)a4 + 5);
      v19 = *(_OWORD *)(a4 + 17);
      v20 = 1;
      v33 = *(_OWORD *)(a4 + 1);
      v34 = v19;
    }
    else
    {
      v20 = 0;
    }
    *(_QWORD *)&v32 = *((_QWORD *)a4 + 13);
    *(_QWORD *)((char *)&v32 + 5) = *(_QWORD *)(a4 + 109);
  }
  else
  {
    v20 = 0;
    v17 = 0;
  }
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  v21 = *a3;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = v21;
  *(_BYTE *)(v14 + 96) = 0;
  *(_BYTE *)(v14 + 216) = 0;
  if (v16)
  {
    *(_BYTE *)(v14 + 192) = 0;
    if (v20)
    {
      v22 = v36;
      *(_OWORD *)(v14 + 129) = v35;
      *(_OWORD *)(v14 + 145) = v22;
      *(_OWORD *)(v14 + 161) = v37[0];
      *(_OWORD *)(v14 + 176) = *(_OWORD *)((char *)v37 + 15);
      v23 = v34;
      *(_OWORD *)(v14 + 97) = v33;
      *(_BYTE *)(v14 + 96) = v17;
      *(_OWORD *)(v14 + 113) = v23;
      *(_BYTE *)(v14 + 192) = 1;
    }
    *(_QWORD *)(v14 + 200) = v32;
    *(_QWORD *)(v14 + 205) = *(_QWORD *)((char *)&v32 + 5);
    *(_BYTE *)(v14 + 216) = 1;
  }
  *(_BYTE *)(v14 + 224) = 1;
  v24 = v14 + 232;
  v28.i64[1] = v14 + 232;
  *(_QWORD *)&v32 = &v13[232 * v7];
  *((_QWORD *)&v32 + 1) = v32;
  v31 = v32;
  *(_QWORD *)&v33 = a1 + 2;
  *((_QWORD *)&v33 + 1) = &v31;
  *(_QWORD *)&v34 = &v32;
  BYTE8(v34) = 0;
  if (v5 == v6)
  {
    v25 = vdupq_n_s64(v5);
  }
  else
  {
    do
    {
      v5 -= 232;
      sub_20EF2F980((_BYTE *)(v14 - 232), v5);
      v14 = *((_QWORD *)&v32 + 1) - 232;
      *((_QWORD *)&v32 + 1) -= 232;
    }
    while (v5 != v6);
    v25 = *(int64x2_t *)a1;
    v11 = a1[2];
    v24 = v28.i64[1];
    v15 = v29;
  }
  *a1 = v14;
  a1[1] = v24;
  v28 = v25;
  a1[2] = (uint64_t)v15;
  v29 = (char *)v11;
  __p = (void *)v25.i64[0];
  sub_20EF2FC64(&__p, v25.i64[0]);
  if (__p)
    operator delete(__p);
  return v24;
}

void sub_20EF383EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (!a22)
    sub_20EF2FBB8(&a19);
  sub_20EF2F94C(&a10);
  _Unwind_Resume(a1);
}

void sub_20EF38410(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20EF38408);
}

uint64_t sub_20EF38420(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(a1 + 32);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v4);
  }
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  v7 = *(uint64_t **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    if (*v7)
    {
      sub_20EF384E4(v7, *v7);
      operator delete((void *)*v7);
    }
    MEMORY[0x212BC6398](v7, 0x20C40960023A9);
  }
  return a1;
}

_QWORD *sub_20EF384E4(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  for (i = result[1]; i != a2; i -= 232)
  {
    if (*(_BYTE *)(i - 8))
    {
      v5 = *(_QWORD *)(i - 160);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v6 = *(_QWORD *)(i - 176);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      v7 = *(_QWORD *)(i - 192);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      v8 = *(_QWORD *)(i - 208);
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
      result = *(_QWORD **)(i - 224);
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
    }
  }
  v3[1] = a2;
  return result;
}

uint64_t sub_20EF385A0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  v10 = a2[15];
  v12 = a2[12];
  v11 = a2[13];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v10;
  *(_OWORD *)(a1 + 192) = v12;
  *(_OWORD *)(a1 + 208) = v11;
  v13 = a2[8];
  v14 = a2[9];
  v15 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v15;
  *(_OWORD *)(a1 + 128) = v13;
  *(_OWORD *)(a1 + 144) = v14;
  *(_DWORD *)(a1 + 256) = *((_DWORD *)a2 + 64);
  if (*(unsigned __int8 *)(a1 + 368) == *((unsigned __int8 *)a2 + 368))
  {
    if (*(_BYTE *)(a1 + 368))
    {
      *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
      v16 = a2[18];
      *(_OWORD *)(a1 + 272) = a2[17];
      *(_OWORD *)(a1 + 288) = v16;
      v17 = a2[19];
      v18 = a2[20];
      v19 = a2[22];
      *(_OWORD *)(a1 + 336) = a2[21];
      *(_OWORD *)(a1 + 352) = v19;
      *(_OWORD *)(a1 + 304) = v17;
      *(_OWORD *)(a1 + 320) = v18;
    }
  }
  else if (*(_BYTE *)(a1 + 368))
  {
    *(_BYTE *)(a1 + 368) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
    v20 = a2[18];
    *(_OWORD *)(a1 + 272) = a2[17];
    *(_OWORD *)(a1 + 288) = v20;
    v21 = a2[19];
    v22 = a2[20];
    v23 = a2[22];
    *(_OWORD *)(a1 + 336) = a2[21];
    *(_OWORD *)(a1 + 352) = v23;
    *(_OWORD *)(a1 + 304) = v21;
    *(_OWORD *)(a1 + 320) = v22;
    *(_BYTE *)(a1 + 368) = 1;
  }
  *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
  *(_QWORD *)(a1 + 384) = *((_QWORD *)a2 + 48);
  *(_QWORD *)(a1 + 392) = *((_QWORD *)a2 + 49);
  *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 50);
  *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
  *(_QWORD *)(a1 + 416) = *((_QWORD *)a2 + 52);
  v24 = (_QWORD *)a2 + 53;
  v25 = *(void **)(a1 + 424);
  if (v25)
  {
    *(_QWORD *)(a1 + 432) = v25;
    operator delete(v25);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 432) = 0;
    *(_QWORD *)(a1 + 440) = 0;
  }
  v26 = *((_QWORD *)a2 + 54);
  *(_QWORD *)(a1 + 424) = *((_QWORD *)a2 + 53);
  *(_QWORD *)(a1 + 432) = v26;
  *(_QWORD *)(a1 + 440) = *((_QWORD *)a2 + 55);
  *v24 = 0;
  *((_QWORD *)a2 + 54) = 0;
  *((_QWORD *)a2 + 55) = 0;
  v27 = *(void **)(a1 + 448);
  if (v27)
  {
    *(_QWORD *)(a1 + 456) = v27;
    operator delete(v27);
    *(_QWORD *)(a1 + 448) = 0;
    *(_QWORD *)(a1 + 456) = 0;
    *(_QWORD *)(a1 + 464) = 0;
  }
  *(_OWORD *)(a1 + 448) = a2[28];
  *(_QWORD *)(a1 + 464) = *((_QWORD *)a2 + 58);
  *((_QWORD *)a2 + 57) = 0;
  *((_QWORD *)a2 + 58) = 0;
  *((_QWORD *)a2 + 56) = 0;
  *(_QWORD *)(a1 + 472) = *((_QWORD *)a2 + 59);
  v28 = *(void **)(a1 + 480);
  if (v28)
  {
    *(_QWORD *)(a1 + 488) = v28;
    operator delete(v28);
    *(_QWORD *)(a1 + 480) = 0;
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 496) = 0;
  }
  *(_OWORD *)(a1 + 480) = a2[30];
  *(_QWORD *)(a1 + 496) = *((_QWORD *)a2 + 62);
  *((_QWORD *)a2 + 60) = 0;
  *((_QWORD *)a2 + 61) = 0;
  *((_QWORD *)a2 + 62) = 0;
  return a1;
}

uint64_t sub_20EF38758(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 808))
  {
    v2 = *(void **)(a1 + 784);
    if (v2)
    {
      *(_QWORD *)(a1 + 792) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 752);
    if (v3)
    {
      *(_QWORD *)(a1 + 760) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 728);
    if (v4)
    {
      *(_QWORD *)(a1 + 736) = v4;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 264))
  {
    v5 = *(std::__shared_weak_count **)(a1 + 240);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        sub_20EF38420(a1 + 168);
        v8 = *(_QWORD *)(a1 + 160);
        if (!v8)
          return a1;
        goto LABEL_14;
      }
    }
  }
  sub_20EF38420(a1 + 168);
  v8 = *(_QWORD *)(a1 + 160);
  if (v8)
LABEL_14:
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  return a1;
}

void sub_20EF38824()
{
  sub_20E860B90("vector");
}

char ***sub_20EF38838(char ***a1, _OWORD *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = (v6 - *v4) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_20EF38824();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 60)
        sub_20E877A38();
      v13 = (char *)operator new(16 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    *(_OWORD *)v14 = *a2;
    v7 = v14 + 16;
    if (v6 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
        v14 -= 16;
        v6 -= 16;
      }
      while (v6 != v8);
      v6 = *v4;
    }
    *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[16 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_OWORD *)v6 = *a2;
    v7 = v6 + 16;
  }
  v4[1] = v7;
  return a1;
}

uint64_t sub_20EF38948(uint64_t result)
{
  if (result)
  {
    sub_20EF38988(*(_QWORD **)(result + 8));
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20EF38988(_QWORD *a1)
{
  if (a1)
  {
    sub_20EF38988(*a1);
    sub_20EF38988(a1[1]);
    sub_20EF38758((uint64_t)(a1 + 6));
    operator delete(a1);
  }
}

void sub_20EF389C8(uint64_t **a1@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  int8x16_t v5;
  int8x16_t v6;
  float64x2_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  float *v31;
  int8x16_t v32;
  unint64_t v33;
  int8x16_t v34;
  unint64_t v35;
  int8x16_t v36;
  unint64_t v37;
  int8x16_t v38;
  unint64_t v39;
  int8x16_t v40;
  double v41;
  unsigned int v42;
  float *v43;
  float *v44;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  void *v49;
  uint64_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  unint64_t v54;
  unint64_t v55;
  float64x2_t v56;
  float64x2_t v57;
  unint64_t v58;
  int8x16_t v59;
  unint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  int8x16_t v63;
  unint64_t v64;
  int8x16_t v65;
  unint64_t v66;
  __int128 v67;
  char *v68;
  __int128 v69;
  int v70;
  int v71;
  uint64_t v72;
  float v73;
  double v79;
  double v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  int8x16_t v86;
  __int128 v87;
  __int128 v88;
  int8x16_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  int v93;
  uint64_t *v94;
  uint64_t **v95;
  uint64_t **v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  void *v128;
  void *v129;
  unsigned __int8 v130;
  int v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  const char *v135;
  size_t v136;
  uint64_t *v137;
  uint64_t *v138;
  unsigned __int8 v139;
  const char *v140;
  size_t v141;
  void **v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  void **v146;
  NSObject *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  size_t v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  float64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  void *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  float64_t v190;
  float64_t v191;
  uint64_t v192;
  float64_t v193;
  float64_t v194;
  float64_t v195;
  float64_t v196;
  float64_t v197;
  float64_t v198;
  float64_t v199;
  float64_t v200;
  float64_t v201;
  float64_t v202;
  uint64_t v203;
  const char *v204;
  uint64_t *v205;
  void *v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  __int128 v214;
  __int128 v215;
  int v216;
  __int128 __p;
  char *v218;
  void *v219;
  char *v220;
  char *v221;
  unsigned __int8 v222;
  char v223;
  uint64_t **v224;
  uint64_t *v225;
  size_t v226;
  _DWORD v227[3];
  _DWORD v228[2];
  int v229;
  float64x2_t v230;
  uint64_t v231;
  float64x2_t v232;
  uint64_t v233;
  __int128 v234;
  char *v235;
  void *object[6];
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  char v251;
  __int128 v252;
  __int128 v253;
  unsigned __int8 v254;
  uint64_t v255;
  int v256;
  __int128 v257;
  uint64_t v258;

  v258 = *MEMORY[0x24BDAC8D0];
  v228[0] = a2[1];
  v228[1] = v228[0];
  v229 = *a2;
  v227[0] = 0;
  v227[1] = v229;
  v227[2] = 0;
  v226 = 0;
  v225 = 0;
  v224 = &v225;
  v3 = *a1;
  v205 = a1[1];
  if (*a1 != v205)
  {
    while (1)
    {
      v4 = 0xAAAAAAAAAAAAAAABLL * ((v3[10] - v3[9]) >> 2);
      v235 = 0;
      v234 = 0uLL;
      sub_20EF34570((uint64_t)&v234, v4);
      v9 = v3[9];
      v8 = (char *)v3[10];
      while ((char *)v9 != v8)
      {
        v11 = v3[6];
        v12 = *(_QWORD *)(v11 + 8 * *(_QWORD *)v9);
        v13 = *(_QWORD *)(v11 + ((*(_QWORD *)v9 >> 29) & 0x7FFFFFFF8));
        v14 = *(_QWORD *)(v11 + 8 * *(unsigned int *)(v9 + 8));
        v15 = operator new(0x18uLL);
        v16 = v15;
        v17 = (unint64_t)(v15 + 3);
        *v15 = v12;
        v15[1] = v13;
        v15[2] = v14;
        v18 = (_QWORD *)*((_QWORD *)&v234 + 1);
        if (*((_QWORD *)&v234 + 1) < (unint64_t)v235)
        {
          **((_QWORD **)&v234 + 1) = v15;
          v18[1] = v17;
          v10 = v18 + 3;
          v18[2] = v17;
        }
        else
        {
          v19 = (_QWORD *)v234;
          v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v234 + 1) - v234) >> 3);
          v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20E969238();
          if (0x5555555555555556 * ((uint64_t)&v235[-v234] >> 3) > v21)
            v21 = 0x5555555555555556 * ((uint64_t)&v235[-v234] >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v235[-v234] >> 3) >= 0x555555555555555)
            v22 = 0xAAAAAAAAAAAAAAALL;
          else
            v22 = v21;
          if (v22 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v23 = (char *)operator new(24 * v22);
          v24 = &v23[24 * v20];
          *((_QWORD *)v24 + 1) = 0;
          *((_QWORD *)v24 + 2) = 0;
          *(_QWORD *)v24 = v16;
          v5 = (int8x16_t)vdupq_n_s64(v17);
          *(int8x16_t *)(v24 + 8) = v5;
          v10 = v24 + 24;
          if (v18 == v19)
          {
            *(_QWORD *)&v234 = &v23[24 * v20];
            *((_QWORD *)&v234 + 1) = v24 + 24;
            v235 = &v23[24 * v22];
          }
          else
          {
            do
            {
              v25 = *(_OWORD *)(v18 - 3);
              v18 -= 3;
              v5.i32[3] = HIDWORD(v25);
              *(_OWORD *)(v24 - 24) = v25;
              v24 -= 24;
              *((_QWORD *)v24 + 2) = v18[2];
              *v18 = 0;
              v18[1] = 0;
              v18[2] = 0;
            }
            while (v18 != v19);
            v26 = (_QWORD *)*((_QWORD *)&v234 + 1);
            v18 = (_QWORD *)v234;
            *(_QWORD *)&v234 = v24;
            *((_QWORD *)&v234 + 1) = v10;
            v235 = &v23[24 * v22];
            if (v26 != v18)
            {
              v27 = v26;
              do
              {
                v29 = (void *)*(v27 - 3);
                v27 -= 3;
                v28 = v29;
                if (v29)
                {
                  *(v26 - 2) = v28;
                  operator delete(v28);
                }
                v26 = v27;
              }
              while (v27 != v18);
            }
          }
          if (v18)
            operator delete(v18);
        }
        *((_QWORD *)&v234 + 1) = v10;
        v9 += 12;
      }
      v30 = v3[14];
      if (v30)
      {
        v5.i32[3] = 0;
        v238 = 0u;
        v239 = 0u;
        v237 = 0u;
        memset(object, 0, sizeof(object));
        v31 = (float *)v3[12];
        if (v31 == (float *)(v3 + 13))
        {
          v32.i64[0] = 0;
          *(double *)&v33 = 0.0;
          v34.i64[0] = 0;
          *(double *)&v35 = 0.0;
          v36.i64[0] = 0;
          *(double *)&v37 = 0.0;
          v38.i64[0] = 0;
          *(double *)&v39 = 0.0;
          v40.i64[0] = 0;
          v7.f64[0] = 0.0;
          v5.i64[0] = 0;
          v6.i64[0] = 0;
          v41 = 0.0;
        }
        else
        {
          do
          {
            v42 = *((unsigned __int8 *)v31 + 28);
            if (v42 >= 0xC)
              v42 = 0;
            *(double *)&object[v42] = *(double *)&object[v42] + v31[8];
            v43 = (float *)*((_QWORD *)v31 + 1);
            if (v43)
            {
              do
              {
                v44 = v43;
                v43 = *(float **)v43;
              }
              while (v43);
            }
            else
            {
              do
              {
                v44 = (float *)*((_QWORD *)v31 + 2);
                _ZF = *(_QWORD *)v44 == (_QWORD)v31;
                v31 = v44;
              }
              while (!_ZF);
            }
            v31 = v44;
          }
          while (v44 != (float *)(v3 + 13));
          v41 = *(double *)object
              + *(double *)&object[1]
              + *(double *)&object[2]
              + *(double *)&object[3]
              + *(double *)&object[4]
              + *(double *)&object[5]
              + *(double *)v237.i64
              + *(double *)&v237.i64[1]
              + *(double *)v238.i64
              + *(double *)&v238.i64[1]
              + *(double *)v239.i64
              + *(double *)&v239.i64[1];
          v40 = v238;
          v5 = v239;
          v36 = *(int8x16_t *)&object[4];
          v38 = v237;
          v32 = *(int8x16_t *)object;
          v34 = *(int8x16_t *)&object[2];
          v6 = vextq_s8(v5, v5, 8uLL);
          v7 = (float64x2_t)vextq_s8(v40, v40, 8uLL);
          v39 = vextq_s8(v38, v38, 8uLL).u64[0];
          v37 = vextq_s8(v36, v36, 8uLL).u64[0];
          v35 = vextq_s8(v34, v34, 8uLL).u64[0];
          v33 = vextq_s8(v32, v32, 8uLL).u64[0];
        }
        memset(object, 0, 24);
        if (*((_QWORD *)&v234 + 1) == (_QWORD)v234)
        {
          v8 = 0;
          v49 = 0;
        }
        else
        {
          v190 = *(double *)&v33;
          v191 = *(double *)&v35;
          v192 = *(_QWORD *)&v41;
          v193 = *(double *)&v37;
          v194 = *(double *)v32.i64;
          v195 = *(double *)v34.i64;
          v196 = *(double *)&v39;
          v197 = *(double *)v36.i64;
          v198 = v7.f64[0];
          v199 = *(double *)v38.i64;
          v200 = *(double *)v6.i64;
          v201 = *(double *)v40.i64;
          v202 = *(double *)v5.i64;
          v46 = (*((_QWORD *)&v234 + 1) - (_QWORD)v234) / 24;
          if (v46 >= 0x2AAAAAAAAAAAAABLL)
            sub_20E867F44();
          v47 = 96 * v46;
          v48 = (char *)operator new(96 * v46);
          v49 = v48;
          v50 = 0;
          v51 = (float64x2_t)vdupq_lane_s64(v192, 0);
          v52.f64[0] = v194;
          v53.f64[0] = v195;
          v52.f64[1] = v190;
          v5 = (int8x16_t)vdivq_f64(v52, v51);
          v54 = vextq_s8(v5, v5, 8uLL).u64[0];
          v53.f64[1] = v191;
          v6 = (int8x16_t)vdivq_f64(v53, v51);
          v55 = vextq_s8(v6, v6, 8uLL).u64[0];
          v56.f64[0] = v197;
          v56.f64[1] = v193;
          v7 = vdivq_f64(v56, v51);
          v57.f64[0] = v199;
          v57.f64[1] = v196;
          v58 = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
          v59 = (int8x16_t)vdivq_f64(v57, v51);
          v60 = vextq_s8(v59, v59, 8uLL).u64[0];
          v61.f64[0] = v201;
          v62.f64[0] = v202;
          v61.f64[1] = v198;
          v63 = (int8x16_t)vdivq_f64(v61, v51);
          v64 = vextq_s8(v63, v63, 8uLL).u64[0];
          v62.f64[1] = v200;
          v65 = (int8x16_t)vdivq_f64(v62, v51);
          v66 = vextq_s8(v65, v65, 8uLL).u64[0];
          v8 = &v48[v47];
          do
          {
            *(_QWORD *)&v67 = v5.i64[0];
            *((_QWORD *)&v67 + 1) = v54;
            v68 = &v48[v50];
            *(_QWORD *)&v69 = v6.i64[0];
            *((_QWORD *)&v69 + 1) = v55;
            *(_OWORD *)v68 = v67;
            *((_OWORD *)v68 + 1) = v69;
            *(float64_t *)&v67 = v7.f64[0];
            *((_QWORD *)&v67 + 1) = v58;
            *(_QWORD *)&v69 = v59.i64[0];
            *((_QWORD *)&v69 + 1) = v60;
            *((_OWORD *)v68 + 2) = v67;
            *((_OWORD *)v68 + 3) = v69;
            *(_QWORD *)&v67 = v63.i64[0];
            *((_QWORD *)&v67 + 1) = v64;
            *(_QWORD *)&v69 = v65.i64[0];
            *((_QWORD *)&v69 + 1) = v66;
            *((_OWORD *)v68 + 4) = v67;
            *((_OWORD *)v68 + 5) = v69;
            v50 += 96;
          }
          while (v47 != v50);
        }
      }
      else
      {
        v49 = 0;
      }
      v5.i64[0] = v3[2];
      v5.i32[2] = *((_DWORD *)v3 + 6);
      v6.i64[0] = *(uint64_t *)((char *)v3 + 28);
      v6.i32[2] = *((_DWORD *)v3 + 9);
      v230 = vcvtq_f64_f32(*(float32x2_t *)v5.i8);
      v231 = *(_OWORD *)&vcvt_hight_f64_f32((float32x4_t)v5);
      v233 = *(_OWORD *)&vcvt_hight_f64_f32((float32x4_t)v6);
      v232 = vcvtq_f64_f32(*(float32x2_t *)v6.i8);
      sub_20EEE85BC((uint64_t)&v230, (uint64_t)object, v7);
      v70 = *((_DWORD *)v3 + 10);
      v208 = *(_OWORD *)object;
      v209 = *(_OWORD *)&object[2];
      v212 = v238;
      v213 = v239;
      v214 = v240;
      v215 = v241;
      v210 = *(_OWORD *)&object[4];
      v211 = v237;
      v216 = v70;
      __p = v234;
      v218 = v235;
      LOBYTE(v219) = 0;
      v222 = 0;
      if (v30)
      {
        v219 = v49;
        v220 = v8;
        v221 = v8;
        v71 = 1;
        v222 = 1;
      }
      else
      {
        v71 = 0;
      }
      v72 = 0;
      v223 = 0;
      do
      {
        v73 = *(double *)((char *)&v208 + v72);
        if ((LODWORD(v73) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          break;
        _ZF = v72 == 120;
        v72 += 8;
      }
      while (!_ZF);
      if ((LODWORD(v73) & 0x7FFFFFFFu) < 0x7F800000)
      {
        _V1.D[1] = v212.i64[1];
        _D3 = v212.i64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v79 = sqrt(_D2 + *(double *)v213.i64 * *(double *)v213.i64);
        _NF = v79 < 1.0;
        if (v79 == 1.0)
          break;
        v81 = v79 + -1.0;
        v82 = 1.0 - v79;
        if (!_NF)
          v82 = v81;
        if (v82 <= 0.001)
          break;
      }
LABEL_123:
      if (v71 && v219)
        operator delete(v219);
      v125 = (char *)__p;
      if ((_QWORD)__p)
      {
        v126 = (char *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
        {
          v127 = (char *)*((_QWORD *)&__p + 1);
          do
          {
            v129 = (void *)*((_QWORD *)v127 - 3);
            v127 -= 24;
            v128 = v129;
            if (v129)
            {
              *((_QWORD *)v126 - 2) = v128;
              operator delete(v128);
            }
            v126 = v127;
          }
          while (v127 != v125);
        }
        operator delete(v125);
      }
      v3 += 15;
      if (v3 == v205)
        goto LABEL_136;
    }
    sub_20EF3B4DC((uint64_t)object, (uint64_t)&v208, (uint64_t)v227, (uint64_t)v228);
    v83 = *v3;
    v84 = v3[1];
    v85 = (char *)operator new(0x160uLL);
    *(_QWORD *)&v230.f64[0] = v85;
    *(_QWORD *)&v230.f64[1] = &v225;
    LOBYTE(v231) = 0;
    *((_QWORD *)v85 + 4) = v83;
    *((_QWORD *)v85 + 5) = v84;
    v86 = v239;
    *((int8x16_t *)v85 + 7) = v238;
    *((int8x16_t *)v85 + 8) = v86;
    v87 = v241;
    *((_OWORD *)v85 + 9) = v240;
    *((_OWORD *)v85 + 10) = v87;
    v88 = *(_OWORD *)&object[2];
    *((_OWORD *)v85 + 3) = *(_OWORD *)object;
    *((_OWORD *)v85 + 4) = v88;
    v89 = v237;
    *((_OWORD *)v85 + 5) = *(_OWORD *)&object[4];
    *((int8x16_t *)v85 + 6) = v89;
    *((_QWORD *)v85 + 22) = v242;
    *((_DWORD *)v85 + 46) = v243;
    *((_DWORD *)v85 + 48) = v244;
    v90 = v246;
    *((_QWORD *)v85 + 25) = v245;
    *((_QWORD *)v85 + 26) = v90;
    if (v90)
      (*(void (**)(uint64_t))(*(_QWORD *)v90 + 24))(v90);
    *(_OWORD *)(v85 + 216) = v247;
    v247 = 0uLL;
    v91 = v248;
    v248 = 0uLL;
    v92 = v249;
    *(_OWORD *)(v85 + 232) = v91;
    *(_OWORD *)(v85 + 248) = v92;
    *((_QWORD *)v85 + 33) = v250;
    v250 = 0;
    v249 = 0uLL;
    v85[272] = 0;
    v85[312] = 0;
    v93 = v254;
    if (v254)
    {
      v85[272] = v251;
      *(_OWORD *)(v85 + 280) = v252;
      v252 = 0uLL;
      *(_OWORD *)(v85 + 296) = v253;
      v85[312] = 1;
    }
    *((_QWORD *)v85 + 40) = v255;
    *((_DWORD *)v85 + 82) = v256;
    *((_OWORD *)v85 + 21) = v257;
    LOBYTE(v231) = 1;
    v94 = v225;
    v95 = &v225;
    v96 = &v225;
    if (!v225)
    {
LABEL_104:
      *(_QWORD *)v85 = 0;
      *((_QWORD *)v85 + 1) = 0;
      *((_QWORD *)v85 + 2) = v95;
      *v96 = (uint64_t *)v85;
      if (*v224)
      {
        v224 = (uint64_t **)*v224;
        v85 = (char *)*v96;
      }
      sub_20E868578(v225, (uint64_t *)v85);
      ++v226;
      if (v254)
        goto LABEL_116;
      goto LABEL_120;
    }
    v97 = v85[32];
    v98 = v85[33];
    v99 = v85[34];
    v100 = v85[35];
    v101 = v85[36];
    v102 = v85[37];
    v103 = v85[38];
    v104 = v85[39];
    v105 = v85[40];
    v106 = v85[41];
    v107 = v85[42];
    v108 = v85[43];
    v109 = v85[44];
    v110 = v85[45];
    v111 = v85[46];
    v112 = v85[47];
    while (1)
    {
      v95 = (uint64_t **)v94;
      v113 = *((unsigned __int8 *)v94 + 32);
      if (v97 != v113)
        break;
      v113 = *((unsigned __int8 *)v95 + 33);
      if (v98 == v113)
      {
        v114 = *((unsigned __int8 *)v95 + 34);
        v115 = v85[34];
        if (v99 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 35);
        v115 = v85[35];
        if (v100 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 36);
        v115 = v85[36];
        if (v101 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 37);
        v115 = v85[37];
        if (v102 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 38);
        v115 = v85[38];
        if (v103 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 39);
        v115 = v85[39];
        if (v104 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 40);
        v115 = v85[40];
        if (v105 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 41);
        v115 = v85[41];
        if (v106 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 42);
        v115 = v85[42];
        if (v107 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 43);
        v115 = v85[43];
        if (v108 != v114)
          goto LABEL_82;
        v114 = *((unsigned __int8 *)v95 + 44);
        v115 = v85[44];
        if (v109 != v114
          || (v114 = *((unsigned __int8 *)v95 + 45), v115 = v85[45], v110 != v114)
          || (v114 = *((unsigned __int8 *)v95 + 46), v115 = v85[46], v111 != v114)
          || (v114 = *((unsigned __int8 *)v95 + 47), v115 = v85[47], v112 != v114))
        {
LABEL_82:
          if (v115 < v114)
            goto LABEL_65;
        }
        v113 = *((unsigned __int8 *)v95 + 34);
        v116 = v85[34];
        if (v113 == v99)
        {
          v113 = *((unsigned __int8 *)v95 + 35);
          v116 = v85[35];
          if (v113 == v100)
          {
            v113 = *((unsigned __int8 *)v95 + 36);
            v116 = v85[36];
            if (v113 == v101)
            {
              v113 = *((unsigned __int8 *)v95 + 37);
              v116 = v85[37];
              if (v113 == v102)
              {
                v113 = *((unsigned __int8 *)v95 + 38);
                v116 = v85[38];
                if (v113 == v103)
                {
                  v113 = *((unsigned __int8 *)v95 + 39);
                  v116 = v85[39];
                  if (v113 == v104)
                  {
                    v113 = *((unsigned __int8 *)v95 + 40);
                    v116 = v85[40];
                    if (v113 == v105)
                    {
                      v113 = *((unsigned __int8 *)v95 + 41);
                      v116 = v85[41];
                      if (v113 == v106)
                      {
                        v113 = *((unsigned __int8 *)v95 + 42);
                        v116 = v85[42];
                        if (v113 == v107)
                        {
                          v113 = *((unsigned __int8 *)v95 + 43);
                          v116 = v85[43];
                          if (v113 == v108)
                          {
                            v113 = *((unsigned __int8 *)v95 + 44);
                            v116 = v85[44];
                            if (v113 == v109)
                            {
                              v113 = *((unsigned __int8 *)v95 + 45);
                              v116 = v85[45];
                              if (v113 == v110)
                              {
                                v113 = *((unsigned __int8 *)v95 + 46);
                                v116 = v85[46];
                                if (v113 == v111)
                                {
                                  v113 = *((unsigned __int8 *)v95 + 47);
                                  v116 = v85[47];
                                  if (v113 == v112)
                                  {
LABEL_108:
                                    v230.f64[0] = 0.0;
                                    if (!v93)
                                      goto LABEL_113;
                                    v117 = (std::__shared_weak_count *)*((_QWORD *)v85 + 36);
                                    if (!v117)
                                      goto LABEL_113;
                                    p_shared_owners = (unint64_t *)&v117->__shared_owners_;
                                    do
                                      v119 = __ldaxr(p_shared_owners);
                                    while (__stlxr(v119 - 1, p_shared_owners));
                                    if (!v119)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                                      std::__shared_weak_count::__release_weak(v117);
                                      sub_20EF38420((uint64_t)(v85 + 216));
                                      v120 = *((_QWORD *)v85 + 26);
                                      if (v120)
LABEL_114:
                                        (*(void (**)(uint64_t))(*(_QWORD *)v120 + 40))(v120);
                                    }
                                    else
                                    {
LABEL_113:
                                      sub_20EF38420((uint64_t)(v85 + 216));
                                      v120 = *((_QWORD *)v85 + 26);
                                      if (v120)
                                        goto LABEL_114;
                                    }
                                    operator delete(v85);
                                    if (v254)
                                    {
LABEL_116:
                                      v121 = (std::__shared_weak_count *)*((_QWORD *)&v252 + 1);
                                      if (!*((_QWORD *)&v252 + 1))
                                        goto LABEL_120;
                                      v122 = (unint64_t *)(*((_QWORD *)&v252 + 1) + 8);
                                      do
                                        v123 = __ldaxr(v122);
                                      while (__stlxr(v123 - 1, v122));
                                      if (v123)
                                        goto LABEL_120;
                                      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                                      std::__shared_weak_count::__release_weak(v121);
                                      sub_20EF38420((uint64_t)&v247);
                                      v124 = v246;
                                      if (!v246)
                                      {
LABEL_122:
                                        v71 = v222;
                                        goto LABEL_123;
                                      }
LABEL_121:
                                      (*(void (**)(uint64_t))(*(_QWORD *)v124 + 40))(v124);
                                      goto LABEL_122;
                                    }
LABEL_120:
                                    sub_20EF38420((uint64_t)&v247);
                                    v124 = v246;
                                    if (!v246)
                                      goto LABEL_122;
                                    goto LABEL_121;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_101:
        if (v113 >= v116)
          goto LABEL_108;
        v94 = v95[1];
        if (!v94)
        {
          v96 = v95 + 1;
          goto LABEL_104;
        }
      }
      else
      {
        v116 = v85[33];
        if (v98 >= v113)
          goto LABEL_101;
LABEL_65:
        v94 = *v95;
        v96 = v95;
        if (!*v95)
          goto LABEL_104;
      }
    }
    v116 = v85[32];
    if (v97 >= v113)
      goto LABEL_101;
    goto LABEL_65;
  }
LABEL_136:
  v130 = atomic_load((unsigned __int8 *)&qword_254A60310);
  if ((v130 & 1) == 0 && __cxa_guard_acquire(&qword_254A60310))
  {
    sub_21021D3D8(&v208);
    sub_20E8610C0(object, "cv3d.acv.surfacedetection");
    sub_20E8C4068((uint64_t **)&v208, (uint64_t)object, &qword_254A60308);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_guard_release(&qword_254A60310);
  }
  v207 = qword_254A60308;
  if (**(int **)(qword_254A60308 + 56) <= 3)
  {
    v131 = *(unsigned __int8 *)(qword_254A60308 + 72);
    v132 = sub_20E8C31DC(qword_254A60308, "OSLogSurrogateAppender", 1, 0);
    v133 = v132;
    if (v131 || v132)
    {
      *(_QWORD *)&v208 = &v207;
      *((std::chrono::steady_clock::time_point *)&v208 + 1) = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v209 = std::chrono::system_clock::now();
      DWORD2(v209) = 3;
      *(_QWORD *)&v210 = "unknown file";
      DWORD2(v210) = 110;
      v211.i64[1] = 0;
      v212.i64[0] = 0;
      v211.i64[0] = (uint64_t)"unknown function";
      v134 = *(_QWORD *)v208;
      v135 = (const char *)(*(_QWORD *)v208 + 16);
      v204 = v135;
      if (*(char *)(*(_QWORD *)v208 + 39) < 0)
      {
        v135 = *(const char **)(v134 + 16);
        v136 = *(_QWORD *)(v134 + 24);
      }
      else
      {
        v136 = *(unsigned __int8 *)(*(_QWORD *)v208 + 39);
      }
      v203 = *(_QWORD *)v208;
      v138 = *a1;
      v137 = a1[1];
      v206 = (void *)v226;
      v139 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v139 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v140 = byte_254A4A4F8;
      else
        v140 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v141 = byte_254A4A4F8[23];
      else
        v141 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v140, v135);
      v142 = &object[1];
      if (v141 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v143 = v131;
      if (v141 >= 0x17)
      {
        v144 = (v141 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v141 | 7) != 0x17)
          v144 = v141 | 7;
        v145 = v144 + 1;
        v142 = (void **)operator new(v144 + 1);
        object[3] = (void *)(v145 | 0x8000000000000000);
        object[1] = v142;
        object[2] = (void *)v141;
        v143 = v131;
      }
      else
      {
        HIBYTE(object[3]) = v141;
        if (!v141)
        {
LABEL_158:
          *((_BYTE *)v142 + v141) = 0;
          LOBYTE(object[4]) = 1;
          v146 = &object[5];
          if (v136 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v136 >= 0x17)
          {
            v148 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v136 | 7) != 0x17)
              v148 = v136 | 7;
            v149 = v148 + 1;
            v146 = (void **)operator new(v148 + 1);
            v237.i64[1] = v149 | 0x8000000000000000;
            object[5] = v146;
            v237.i64[0] = v136;
          }
          else
          {
            v237.i8[15] = v136;
            if (!v136)
            {
              LOBYTE(object[5]) = 0;
              v238.i8[0] = 1;
              v147 = object[0];
              if ((v237.i8[15] & 0x80000000) == 0)
                goto LABEL_162;
              goto LABEL_168;
            }
          }
          memmove(v146, v135, v136);
          *((_BYTE *)v146 + v136) = 0;
          v238.i8[0] = 1;
          v147 = object[0];
          if ((v237.i8[15] & 0x80000000) == 0)
          {
LABEL_162:
            if (!LOBYTE(object[4]))
              goto LABEL_171;
            goto LABEL_169;
          }
LABEL_168:
          operator delete(object[5]);
          if (!LOBYTE(object[4]))
          {
LABEL_171:
            if (object[0])
              os_release(object[0]);
            v150 = 0xEEEEEEEEEEEEEEEFLL * (v137 - v138);
            if (v133 && *(_QWORD *)(v133 + 24))
            {
              v151 = _os_log_pack_size();
              v152 = (std::__shared_weak_count_vtbl *)operator new(v151, (std::align_val_t)8uLL);
              v153 = (std::__shared_weak_count *)operator new();
              v154 = v153;
              v153->__shared_owners_ = 0;
              v155 = (unint64_t *)&v153->__shared_owners_;
              v153->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v153->__shared_weak_owners_ = 0;
              v153[1].__vftable = v152;
              object[0] = v152;
              object[1] = v152;
              object[2] = v153;
              do
                v156 = __ldxr(v155);
              while (__stxr(v156 + 1, v155));
              memset(&object[3], 0, 24);
              do
                v157 = __ldaxr(v155);
              while (__stlxr(v157 - 1, v155));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v154);
              }
              v158 = object[0];
              v159 = _os_log_pack_fill();
              *(_DWORD *)v159 = 134218240;
              *(_QWORD *)(v159 + 4) = v150;
              *(_WORD *)(v159 + 12) = 2048;
              *(_QWORD *)(v159 + 14) = v206;
              v160 = operator new();
              v161 = *(unsigned __int8 *)(v203 + 39);
              v162 = v204;
              if ((v161 & 0x80u) != 0)
              {
                v162 = *(const char **)(v203 + 16);
                v161 = *(_QWORD *)(v203 + 24);
              }
              *(_QWORD *)v160 = v158;
              *(_OWORD *)(v160 + 8) = *(_OWORD *)&object[1];
              object[1] = 0;
              object[2] = 0;
              *(_OWORD *)(v160 + 24) = *(_OWORD *)&object[3];
              object[3] = 0;
              object[4] = 0;
              *(_QWORD *)(v160 + 40) = v162;
              *(_QWORD *)(v160 + 48) = v161;
              *(_BYTE *)(v160 + 56) = 1;
              *(_QWORD *)&v234 = 0;
              *(_QWORD *)&v230.f64[0] = v160;
              (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v133 + 24) + 40))(*(_QWORD *)(v133 + 24), &v230);
              v163 = v230.f64[0];
              v230.f64[0] = 0.0;
              if (v163 != 0.0)
              {
                v164 = *(std::__shared_weak_count **)(*(_QWORD *)&v163 + 32);
                if (v164)
                {
                  v165 = (unint64_t *)&v164->__shared_owners_;
                  do
                    v166 = __ldaxr(v165);
                  while (__stlxr(v166 - 1, v165));
                  if (!v166)
                  {
                    ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                    std::__shared_weak_count::__release_weak(v164);
                  }
                }
                v167 = *(std::__shared_weak_count **)(*(_QWORD *)&v163 + 16);
                if (v167)
                {
                  v168 = (unint64_t *)&v167->__shared_owners_;
                  do
                    v169 = __ldaxr(v168);
                  while (__stlxr(v169 - 1, v168));
                  if (!v169)
                  {
                    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                    std::__shared_weak_count::__release_weak(v167);
                  }
                }
                MEMORY[0x212BC6398](*(_QWORD *)&v163, 0x10F0C40B62ED6C6);
                v170 = v234;
                *(_QWORD *)&v234 = 0;
                if (v170)
                {
                  v171 = *(std::__shared_weak_count **)(v170 + 32);
                  if (v171)
                  {
                    v172 = (unint64_t *)&v171->__shared_owners_;
                    do
                      v173 = __ldaxr(v172);
                    while (__stlxr(v173 - 1, v172));
                    if (!v173)
                    {
                      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                      std::__shared_weak_count::__release_weak(v171);
                    }
                  }
                  v174 = *(std::__shared_weak_count **)(v170 + 16);
                  if (v174)
                  {
                    v175 = (unint64_t *)&v174->__shared_owners_;
                    do
                      v176 = __ldaxr(v175);
                    while (__stlxr(v176 - 1, v175));
                    if (!v176)
                    {
                      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                      std::__shared_weak_count::__release_weak(v174);
                    }
                  }
                  MEMORY[0x212BC6398](v170, 0x10F0C40B62ED6C6);
                }
              }
              v177 = (std::__shared_weak_count *)object[4];
              if (object[4])
              {
                v178 = (unint64_t *)((char *)object[4] + 8);
                do
                  v179 = __ldaxr(v178);
                while (__stlxr(v179 - 1, v178));
                if (!v179)
                {
                  ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                  std::__shared_weak_count::__release_weak(v177);
                }
              }
              v180 = (std::__shared_weak_count *)object[2];
              if (object[2])
              {
                v181 = (unint64_t *)((char *)object[2] + 8);
                do
                  v182 = __ldaxr(v181);
                while (__stlxr(v182 - 1, v181));
                if (!v182)
                {
                  ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                  std::__shared_weak_count::__release_weak(v180);
                }
              }
            }
            else
            {
              os_log_type_enabled(v147, OS_LOG_TYPE_INFO);
              LODWORD(object[0]) = 134218240;
              *(void **)((char *)object + 4) = (void *)(0xEEEEEEEEEEEEEEEFLL * (v137 - v138));
              WORD2(object[1]) = 2048;
              *(void **)((char *)&object[1] + 6) = v206;
              v183 = (void *)_os_log_send_and_compose_impl();
              if (v183)
                free(v183);
            }
            if (v143)
            {
              sub_20E8C003C((uint64_t)&v208, "Samples vs Loaded: %zu %zu", 0xEEEEEEEEEEEEEEEFLL * (a1[1] - *a1), v226);
              sub_20E863570((uint64_t)&v208);
            }
            sub_20E863570((uint64_t)&v208);
            v184 = (std::__shared_weak_count *)v212.i64[0];
            if (v212.i64[0])
            {
              v185 = (unint64_t *)(v212.i64[0] + 8);
              do
                v186 = __ldaxr(v185);
              while (__stlxr(v186 - 1, v185));
              if (!v186)
              {
                ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                std::__shared_weak_count::__release_weak(v184);
              }
            }
            goto LABEL_225;
          }
LABEL_169:
          if (SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          goto LABEL_171;
        }
      }
      memmove(v142, v140, v141);
      goto LABEL_158;
    }
  }
LABEL_225:
  sub_20EF34DD8(a3, &v224, a2);
  sub_20EF3A4C0(v225);
}

void sub_20EF39D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (LOBYTE(STACK[0x2C8]))
  {
    if (SLOBYTE(STACK[0x2C7]) < 0)
      operator delete((void *)STACK[0x2B0]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a53);
  sub_20EF3A4C0((_QWORD *)STACK[0x238]);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF39F14(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 264))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 240);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        sub_20EF38420(a1 + 168);
        v5 = *(_QWORD *)(a1 + 160);
        if (!v5)
          return a1;
        goto LABEL_7;
      }
    }
  }
  sub_20EF38420(a1 + 168);
  v5 = *(_QWORD *)(a1 + 160);
  if (v5)
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return a1;
}

char *sub_20EF39FA8(unint64_t *a1, uint64_t a2, char *a3, char *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  size_t v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v85;
  uint64_t v86;
  __int128 *v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;

  v5 = *a1;
  v6 = a2 - *a1;
  v7 = (uint64_t *)(*a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  if (a5 < 1)
    return (char *)v7;
  v11 = v6 >> 3;
  v13 = a1[1];
  v12 = a1[2];
  if (a5 <= (uint64_t)(v12 - v13) >> 3)
  {
    v18 = v13 - (_QWORD)v7;
    v19 = (uint64_t)(v13 - (_QWORD)v7) >> 3;
    if (v19 >= a5)
    {
      v20 = &a3[8 * a5];
      v23 = (char *)a1[1];
      goto LABEL_42;
    }
    v20 = &a3[8 * v19];
    if (v20 == a4)
    {
      v23 = (char *)a1[1];
      goto LABEL_41;
    }
    v21 = a4 - a3 - v18 - 8;
    if (v21 >= 0x38)
    {
      v22 = &a3[8 * v19];
      v23 = (char *)a1[1];
      if ((unint64_t)((char *)v7 - a3) >= 0x20)
      {
        v48 = (v21 >> 3) + 1;
        v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
        v22 = &v20[v49];
        v23 = (char *)(v13 + v49);
        v50 = (_OWORD *)(v13 + 16);
        v51 = &a3[8 * v19 + 16];
        v52 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v53 = *(_OWORD *)v51;
          *(v50 - 1) = *((_OWORD *)v51 - 1);
          *v50 = v53;
          v50 += 2;
          v51 += 32;
          v52 -= 4;
        }
        while (v52);
        if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_41:
          a1[1] = (unint64_t)v23;
          if (v18 < 1)
            return (char *)v7;
LABEL_42:
          v55 = (char *)&v7[a5];
          v56 = (char *)(v23 - v55);
          v57 = (v23 - v55) >> 3;
          v58 = &v23[-8 * a5];
          v59 = v23;
          if ((unint64_t)v58 < v13)
          {
            v60 = &v56[v6 & 0xFFFFFFFFFFFFFFF8];
            v61 = (unint64_t)&v60[v5 + 8];
            if (v13 > v61)
              v61 = v13;
            v62 = v61 + ~v5 - (_QWORD)v60;
            v63 = (uint64_t *)&v23[-8 * a5];
            v59 = v23;
            if (v62 < 0x58)
              goto LABEL_76;
            v63 = (uint64_t *)&v23[-8 * a5];
            v59 = v23;
            if ((unint64_t)&v55[-(v6 & 0xFFFFFFFFFFFFFFF8) - v5] < 0x20)
              goto LABEL_76;
            v64 = (v62 >> 3) + 1;
            v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = (uint64_t *)&v58[v65];
            v59 = &v23[v65];
            v66 = v23 + 16;
            v67 = (__int128 *)(8 * v57 + 8 * v11 + v5 + 16);
            v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v69 = *v67;
              *(v66 - 1) = *(v67 - 1);
              *v66 = v69;
              v66 += 2;
              v67 += 2;
              v68 -= 4;
            }
            while (v68);
            if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_76:
              do
              {
                v70 = *v63++;
                *(_QWORD *)v59 = v70;
                v59 += 8;
              }
              while ((unint64_t)v63 < v13);
            }
          }
          a1[1] = (unint64_t)v59;
          if (v23 != v55)
          {
            if ((unint64_t)(v56 - 8) < 0x78 || (v6 & 0xFFFFFFFFFFFFFFF8) + v5 - (unint64_t)v55 < 0x20)
            {
              v71 = v23;
LABEL_55:
              v72 = v71 - 8;
              do
              {
                v73 = *((_QWORD *)v58 - 1);
                v58 -= 8;
                *(_QWORD *)v72 = v73;
                v72 -= 8;
              }
              while (v58 != (char *)v7);
              goto LABEL_57;
            }
            v85 = ((unint64_t)(v56 - 8) >> 3) + 1;
            v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
            v71 = &v23[-v86];
            v58 -= v86;
            v87 = (__int128 *)(8 * v57 + 8 * v11 + v5 - 16);
            v88 = v23 - 16;
            v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v90 = *v87;
              *((_OWORD *)v88 - 1) = *(v87 - 1);
              *(_OWORD *)v88 = v90;
              v87 -= 2;
              v88 -= 32;
              v89 -= 4;
            }
            while (v89);
            if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_55;
          }
LABEL_57:
          if (v20 != a3)
          {
            v74 = v20 - a3 - 8;
            if (v74 < 0x18 || (unint64_t)((char *)v7 - a3) < 0x20)
            {
              v77 = v7;
              v78 = a3;
            }
            else
            {
              v75 = (v74 >> 3) + 1;
              v76 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              v77 = &v7[v76];
              v78 = &a3[v76 * 8];
              v79 = (__int128 *)(a3 + 16);
              v80 = (_OWORD *)(v5 + 8 * v11 + 16);
              v81 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v82 = *v79;
                *(v80 - 1) = *(v79 - 1);
                *v80 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 4;
              }
              while (v81);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                return (char *)v7;
            }
            do
            {
              v83 = *(_QWORD *)v78;
              v78 += 8;
              *v77++ = v83;
            }
            while (v78 != v20);
          }
          return (char *)v7;
        }
      }
    }
    else
    {
      v22 = &a3[8 * v19];
      v23 = (char *)a1[1];
    }
    do
    {
      v54 = *(_QWORD *)v22;
      v22 += 8;
      *(_QWORD *)v23 = v54;
      v23 += 8;
    }
    while (v22 != a4);
    goto LABEL_41;
  }
  v14 = a5 + ((uint64_t)(v13 - v5) >> 3);
  if (v14 >> 61)
    sub_20E969238();
  v15 = v12 - v5;
  if (v15 >> 2 > v14)
    v14 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 >> 61)
      sub_20E877A38();
    v17 = (char *)operator new(8 * v16);
    v11 = v6 >> 3;
  }
  else
  {
    v17 = 0;
  }
  v24 = 8 * a5;
  v91 = v11;
  v25 = &v17[8 * v11];
  memcpy(v25, a3, v24);
  v26 = &v25[v24];
  v27 = v25;
  v28 = v6 - 8;
  if ((unint64_t)v6 >= 8)
  {
    v29 = v7;
    v27 = v25;
    if (v28 < 0x68)
      goto LABEL_77;
    v29 = v7;
    v27 = v25;
    if ((v6 & 0xFFFFFFFFFFFFFFF8) + v5 - (unint64_t)&v17[v6 & 0xFFFFFFFFFFFFFFF8] < 0x20)
      goto LABEL_77;
    v30 = (v28 >> 3) + 1;
    v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    v29 = &v7[v31 / 0xFFFFFFFFFFFFFFF8];
    v27 = &v25[-v31];
    v32 = 8 * v91 - 16;
    v33 = &v17[v32];
    v34 = (__int128 *)(v5 + v32);
    v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *v34;
      *((_OWORD *)v33 - 1) = *(v34 - 1);
      *(_OWORD *)v33 = v36;
      v33 -= 32;
      v34 -= 2;
      v35 -= 4;
    }
    while (v35);
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_77:
      do
      {
        v37 = *--v29;
        *((_QWORD *)v27 - 1) = v37;
        v27 -= 8;
      }
      while (v29 != (uint64_t *)v5);
    }
    v13 = a1[1];
  }
  if ((uint64_t *)v13 != v7)
  {
    v38 = (char *)((v6 & 0xFFFFFFFFFFFFFFF8) + v5);
    v39 = v13 - (_QWORD)v38 - 8;
    if (v39 < 0x68)
      goto LABEL_78;
    if ((unint64_t)(&v17[(v6 & 0xFFFFFFFFFFFFFFF8) + v24] - v38) < 0x20)
      goto LABEL_78;
    v40 = (v39 >> 3) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = (uint64_t *)((char *)v7 + v41);
    v26 += v41;
    v42 = &v17[8 * v91 + 16 + v24];
    v43 = (__int128 *)(8 * v91 + v5 + 16);
    v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 += 32;
      v43 += 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_78:
      do
      {
        v46 = *v7++;
        *(_QWORD *)v26 = v46;
        v26 += 8;
      }
      while (v7 != (uint64_t *)v13);
    }
  }
  v47 = (void *)*a1;
  *a1 = (unint64_t)v27;
  a1[1] = (unint64_t)v26;
  a1[2] = (unint64_t)&v17[8 * v16];
  if (v47)
    operator delete(v47);
  return v25;
}

void sub_20EF3A4C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  if (a1)
  {
    sub_20EF3A4C0(*a1);
    sub_20EF3A4C0(a1[1]);
    if (!*((_BYTE *)a1 + 312))
      goto LABEL_7;
    v2 = (std::__shared_weak_count *)a1[36];
    if (!v2)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_20EF38420((uint64_t)(a1 + 27));
      v5 = a1[26];
      if (!v5)
        goto LABEL_9;
    }
    else
    {
LABEL_7:
      sub_20EF38420((uint64_t)(a1 + 27));
      v5 = a1[26];
      if (!v5)
      {
LABEL_9:
        operator delete(a1);
        return;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    goto LABEL_9;
  }
}

uint64_t *sub_20EF3A574(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(_BYTE *)(v2 + 312))
      {
        v3 = *(std::__shared_weak_count **)(v2 + 288);
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(p_shared_owners);
          while (__stlxr(v5 - 1, p_shared_owners));
          if (!v5)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
            sub_20EF38420(v2 + 216);
            v6 = *(_QWORD *)(v2 + 208);
            if (!v6)
              goto LABEL_10;
            goto LABEL_9;
          }
        }
      }
      sub_20EF38420(v2 + 216);
      v6 = *(_QWORD *)(v2 + 208);
      if (v6)
LABEL_9:
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    }
LABEL_10:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_20EF3A62C(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  void *__p[3];
  __int128 v18;
  uint64_t v19;
  _OWORD v20[6];
  char v21;

  v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 80) = v6;
  v7 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a3 + 112) = v7;
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v8;
  v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a3 + 48) = v9;
  *(_OWORD *)(a3 + 160) = xmmword_21038AA20;
  *(_OWORD *)(a3 + 176) = unk_21038AA30;
  *(_OWORD *)(a3 + 128) = xmmword_21038AA00;
  *(_OWORD *)(a3 + 144) = *(_OWORD *)algn_21038AA10;
  *(_OWORD *)(a3 + 224) = xmmword_21038AA60;
  *(_OWORD *)(a3 + 240) = unk_21038AA70;
  *(_OWORD *)(a3 + 192) = xmmword_21038AA40;
  *(_OWORD *)(a3 + 208) = unk_21038AA50;
  *(_DWORD *)(a3 + 256) = *(_DWORD *)(a1 + 288);
  sub_20EF3ABA8(a1 + 128, (uint64_t)v20);
  v10 = v21;
  if (v21)
  {
    v11 = *(_OWORD *)(a1 + 64);
    v19 = *(_QWORD *)(a1 + 80);
    v18 = v11;
    v12 = sub_20EF34998((uint64_t)&v18, (double *)v20, 0);
    v13 = v20[3];
    *(_OWORD *)(a3 + 304) = v20[2];
    *(_OWORD *)(a3 + 320) = v13;
    v14 = v20[5];
    *(_OWORD *)(a3 + 336) = v20[4];
    *(_OWORD *)(a3 + 352) = v14;
    v15 = v20[1];
    v10 = 1;
    *(_OWORD *)(a3 + 272) = v20[0];
    *(_OWORD *)(a3 + 288) = v15;
  }
  else
  {
    v12 = 0;
  }
  *(_BYTE *)(a3 + 264) = v12;
  *(_BYTE *)(a3 + 368) = v10;
  *(_OWORD *)(a3 + 440) = 0u;
  *(_OWORD *)(a3 + 456) = 0u;
  *(_OWORD *)(a3 + 408) = 0u;
  *(_OWORD *)(a3 + 424) = 0u;
  *(_OWORD *)(a3 + 376) = 0u;
  *(_OWORD *)(a3 + 392) = 0u;
  v16 = *(_DWORD *)(a1 + 292);
  *(_DWORD *)(a3 + 472) = v16;
  *(_DWORD *)(a3 + 476) = v16;
  *(_QWORD *)(a3 + 488) = 0;
  *(_QWORD *)(a3 + 496) = 0;
  *(_QWORD *)(a3 + 480) = 0;
  sub_20EF3B67C(a1, 0, 0, 0, 0, __p);
  sub_20EF3A7C0(a3 + 376, (float32x2_t **)__p, a2, 0, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20EF3A788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _QWORD *v11;

  if (__p)
  {
    operator delete(__p);
    sub_20EF34D88(v11);
    _Unwind_Resume(a1);
  }
  sub_20EF34D88(v11);
  _Unwind_Resume(a1);
}

void sub_20EF3A7C0(uint64_t a1, float32x2_t **a2, char a3, unint64_t **a4, char a5)
{
  float32x2_t *v8;
  float32x2_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float32x2_t *v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  __int128 v23;
  uint64_t v24;
  float32x2_t *v25;
  float32x2_t *v26;
  uint64_t v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  uint64_t *v40;
  uint64_t *v41;
  int8x16_t v42;
  uint64_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  __int128 v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  unint64_t *v52;
  float32x2_t *v53;
  uint64_t v54;
  _BYTE v55[32];
  __int128 v56;
  uint64_t v57;

  if (a5)
  {
    v9 = *a2;
    v8 = a2[1];
    v10 = *a4;
    v11 = a4[1];
    v12 = (char *)*a4 - (char *)v11;
    v56 = 0uLL;
    v57 = 0;
    if (v10 == v11)
    {
      v24 = 0;
      v23 = 0uLL;
    }
    else
    {
      v13 = -(v12 >> 1);
      if (v13 >> 61)
        sub_20E969238();
      *(_QWORD *)&v56 = operator new(-8 * (v12 >> 1));
      *((_QWORD *)&v56 + 1) = v56;
      v57 = v56 + 8 * v13;
      v52 = v10;
      v53 = v9;
      v54 = ((char *)v8 - (char *)v9) >> 4;
      do
      {
        v14 = *v10;
        if (((char *)v8 - (char *)v9) >> 4 <= *v10)
          sub_21023D290((unint64_t *)&v54, v14);
        v15 = &v9[2 * v14];
        v16 = v15[1];
        *(float32x2_t *)v17.f32 = vmul_f32(vadd_f32(*v15, v16), (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)v18.f32 = vsub_f32(*(float32x2_t *)v17.f32, v16);
        v19 = vadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v18.f32);
        v20 = vsub_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v18.f32);
        v17.i64[1] = v17.i64[0];
        v18.i64[1] = v18.i64[0];
        v21 = vsubq_f32(v17, v18);
        v22 = vaddq_f32(v17, v18);
        v22.i32[0] = v21.i32[0];
        *(float32x2_t *)v55 = v19;
        v22.i32[3] = v21.i32[3];
        *(float32x4_t *)&v55[8] = v22;
        *(float32x2_t *)&v55[24] = v20;
        sub_20EF39FA8((unint64_t *)&v56, *((uint64_t *)&v56 + 1), v55, (char *)&v56, 4);
        v52 = ++v10;
      }
      while (v10 != v11);
      v23 = v56;
      v24 = v57;
    }
    v50 = v23;
    v51 = v24;
    sub_20EF3B0C4((unint64_t *)(a1 + 48), (char **)&v50);
    v36 = (void *)v50;
    if ((_QWORD)v50)
    {
      *((_QWORD *)&v50 + 1) = v50;
LABEL_24:
      operator delete(v36);
    }
  }
  else
  {
    v25 = *a2;
    v26 = a2[1];
    v56 = 0uLL;
    v57 = 0;
    v27 = (char *)v26 - (char *)v25;
    if (v26 == v25)
    {
      v35 = 0;
    }
    else
    {
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFDLL)
        sub_20E969238();
      *(_QWORD *)&v56 = operator new(2 * v27);
      *((_QWORD *)&v56 + 1) = v56;
      v57 = v56 + 8 * (v27 >> 2);
      do
      {
        v28 = v25[1];
        *(float32x2_t *)v29.f32 = vmul_f32(vadd_f32(*v25, v28), (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)v30.f32 = vsub_f32(*(float32x2_t *)v29.f32, v28);
        v31 = vadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v30.f32);
        v32 = vsub_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v30.f32);
        v29.i64[1] = v29.i64[0];
        v30.i64[1] = v30.i64[0];
        v33 = vsubq_f32(v29, v30);
        v34 = vaddq_f32(v29, v30);
        v34.i32[0] = v33.i32[0];
        *(float32x2_t *)v55 = v31;
        v34.i32[3] = v33.i32[3];
        *(float32x4_t *)&v55[8] = v34;
        *(float32x2_t *)&v55[24] = v32;
        sub_20EF39FA8((unint64_t *)&v56, *((uint64_t *)&v56 + 1), v55, (char *)&v56, 4);
        v25 += 2;
      }
      while (v25 != v26);
      v35 = *((_QWORD *)&v56 + 1);
      v27 = v56;
      if (!(_QWORD)v56)
      {
        if (*((_QWORD *)&v56 + 1))
        {
          v27 = 0;
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
      }
    }
    sub_20FDC59E8((v35 - v27) >> 3, (float32x2_t *)v27, (uint64_t)v55);
    v37 = *(_OWORD *)v55;
    v38 = *(_QWORD *)&v55[16];
    v39 = *(void **)(a1 + 48);
    if (v39)
    {
      *(_QWORD *)(a1 + 56) = v39;
      v49 = v37;
      operator delete(v39);
      v37 = v49;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
    }
    *(_OWORD *)(a1 + 48) = v37;
    *(_QWORD *)(a1 + 64) = v38;
    if (v27)
    {
      v36 = (void *)v27;
      goto LABEL_24;
    }
  }
  if ((a3 & 1) == 0)
  {
    if ((a3 & 2) == 0)
      goto LABEL_27;
LABEL_35:
    sub_20EEC5FA8(*(_QWORD *)(a1 + 56), *(float32x2_t **)(a1 + 48), 0, 0, v55);
    v47 = *(_OWORD *)&v55[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v55;
    *(_OWORD *)(a1 + 32) = v47;
    if ((a3 & 8) == 0)
      return;
    goto LABEL_36;
  }
  v40 = *(uint64_t **)(a1 + 48);
  v41 = *(uint64_t **)(a1 + 56);
  if (v40 == v41)
  {
    *(_OWORD *)a1 = 0u;
    if ((a3 & 2) != 0)
      goto LABEL_35;
  }
  else
  {
    v42.i64[0] = *v40;
    v42.i64[1] = *v40;
    do
    {
      v43 = *v40++;
      v44.i64[0] = v43;
      v45.i64[0] = v43;
      v45.i64[1] = v43;
      v46.i64[0] = v42.i64[0];
      v46.i64[1] = v43;
      v44.i64[1] = vextq_s8(v42, v42, 8uLL).u64[0];
      v42 = vbslq_s8((int8x16_t)vcgtq_f32(v46, v44), v45, v42);
    }
    while (v40 != v41);
    *(int8x16_t *)a1 = v42;
    if ((a3 & 2) != 0)
      goto LABEL_35;
  }
LABEL_27:
  if ((a3 & 8) == 0)
    return;
LABEL_36:
  v48 = *(void **)(a1 + 72);
  if (v48)
  {
    *(_QWORD *)(a1 + 80) = v48;
    operator delete(v48);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 88) = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_20EF3AB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  void *v22;

  if (v22)
    operator delete(v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF3ABA8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  int8x16_t v16;
  float64x2_t v17;
  int8x16_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  char v50;
  double v51;
  double v52;
  double v53;
  int8x16_t v54;
  double v55;
  double v56;
  int8x16_t v57;
  int8x16_t v58;
  double v59;
  double v60;
  double v61;
  int8x16_t v62;

  v3 = *(uint64_t **)(result + 40);
  v4 = *v3;
  v5 = v3[1];
  if (*v3 != v5)
  {
    while (!*(_BYTE *)(v4 + 224))
    {
      v4 += 232;
      if (v4 == v5)
        goto LABEL_22;
    }
  }
  if (v4 == v5)
  {
LABEL_22:
    v62.i64[0] = 0;
    v59 = 0.0;
    v61 = 0.0;
    v55 = 0.0;
    v60 = 0.0;
    v51 = 0.0;
    v58.i64[0] = 0;
    v56 = 0.0;
    v57.i64[0] = 0;
    v53 = 0.0;
    v54.i64[0] = 0;
    v52 = 0.0;
  }
  else
  {
    v6 = *(float *)(result + 16) * *(float *)(result + 16);
    v62.i64[0] = 0;
    v59 = 0.0;
    v61 = 0.0;
    v55 = 0.0;
    v60 = 0.0;
    v51 = 0.0;
    v58.i64[0] = 0;
    v56 = 0.0;
    v57.i64[0] = 0;
    v53 = 0.0;
    v54.i64[0] = 0;
    v52 = 0.0;
LABEL_7:
    v7 = *(_QWORD *)(v4 + 24);
    if (!v7 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7)) == 0)
    {
      v8 = *(_QWORD *)(v4 + 40);
      if (!v8 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8)) == 0)
      {
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9)) == 0)
        {
          result = *(_QWORD *)(v4 + 72);
          if ((!result || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result)) == 0)
            && *(_BYTE *)(v4 + 216)
            && *(_BYTE *)(v4 + 192))
          {
            v10 = (float)((float)((float)(*(float *)(v4 + 88) - *(float *)(v4 + 80))
                                * (float)(*(float *)(v4 + 92) - *(float *)(v4 + 84)))
                        / v6);
            v11 = vmulq_n_f64(*(float64x2_t *)(v4 + 176), v10);
            v12 = vmulq_n_f64(*(float64x2_t *)(v4 + 160), v10);
            v13 = vmulq_n_f64(*(float64x2_t *)(v4 + 144), v10);
            v14 = vmulq_n_f64(*(float64x2_t *)(v4 + 96), v10);
            v15.f64[0] = v60;
            v15.f64[1] = v51;
            v16 = (int8x16_t)vaddq_f64(v15, vmulq_n_f64(*(float64x2_t *)(v4 + 128), v10));
            v17.f64[0] = v61;
            v17.f64[1] = v55;
            v18 = (int8x16_t)vaddq_f64(v17, vmulq_n_f64(*(float64x2_t *)(v4 + 112), v10));
            *(_QWORD *)&v19.f64[0] = v62.i64[0];
            v19.f64[1] = v59;
            v60 = *(double *)v16.i64;
            *(_QWORD *)&v51 = vextq_s8(v16, v16, 8uLL).u64[0];
            v61 = *(double *)v18.i64;
            *(_QWORD *)&v55 = vextq_s8(v18, v18, 8uLL).u64[0];
            v62 = (int8x16_t)vaddq_f64(v19, v14);
            *(_QWORD *)&v59 = vextq_s8(v62, v62, 8uLL).u64[0];
            *(_QWORD *)&v19.f64[0] = v58.i64[0];
            v19.f64[1] = v56;
            v58 = (int8x16_t)vaddq_f64(v19, v13);
            *(_QWORD *)&v19.f64[0] = v57.i64[0];
            v19.f64[1] = v53;
            *(_QWORD *)&v56 = vextq_s8(v58, v58, 8uLL).u64[0];
            v57 = (int8x16_t)vaddq_f64(v19, v12);
            *(_QWORD *)&v19.f64[0] = v54.i64[0];
            v19.f64[1] = v52;
            *(_QWORD *)&v53 = vextq_s8(v57, v57, 8uLL).u64[0];
            v54 = (int8x16_t)vaddq_f64(v19, v11);
            *(_QWORD *)&v52 = vextq_s8(v54, v54, 8uLL).u64[0];
          }
        }
      }
    }
    while (1)
    {
      v4 += 232;
      if (v4 == v5)
        break;
      if (*(_BYTE *)(v4 + 224))
      {
        if (v4 != v5)
          goto LABEL_7;
        break;
      }
    }
  }
  *(_QWORD *)&v20.f64[0] = v62.i64[0];
  if (*(double *)v62.i64 == 0.0)
    goto LABEL_28;
  v21 = 0.0 - *(double *)v62.i64;
  if (*(double *)v62.i64 >= 0.0)
    v21 = *(double *)v62.i64;
  if (v21 <= 0.00000001)
  {
LABEL_28:
    v24 = v59;
    v23 = v60;
    v22 = v61;
    v26 = *(double *)v57.i64;
    v25 = *(double *)v58.i64;
    v28 = v55;
    v27 = v56;
    v30 = v53;
    v29 = *(double *)v54.i64;
    v32 = v51;
    v31 = v52;
    if (v59 == 0.0)
      goto LABEL_71;
    v33 = 0.0 - v59;
    if (v59 >= 0.0)
      v33 = v59;
    if (v33 <= 0.00000001)
    {
LABEL_71:
      if (v61 == 0.0)
        goto LABEL_77;
      v34 = 0.0 - v61;
      if (v61 >= 0.0)
        v34 = v61;
      if (v34 <= 0.00000001)
      {
LABEL_77:
        if (v55 == 0.0)
          goto LABEL_78;
        v35 = 0.0 - v55;
        if (v55 >= 0.0)
          v35 = v55;
        if (v35 <= 0.00000001)
        {
LABEL_78:
          if (v60 == 0.0)
            goto LABEL_79;
          v36 = 0.0 - v60;
          if (v60 >= 0.0)
            v36 = v60;
          if (v36 <= 0.00000001)
          {
LABEL_79:
            if (v51 == 0.0)
              goto LABEL_80;
            v37 = 0.0 - v51;
            if (v51 >= 0.0)
              v37 = v51;
            if (v37 <= 0.00000001)
            {
LABEL_80:
              if (*(double *)v58.i64 == 0.0)
                goto LABEL_81;
              v38 = 0.0 - *(double *)v58.i64;
              if (*(double *)v58.i64 >= 0.0)
                v38 = *(double *)v58.i64;
              if (v38 <= 0.00000001)
              {
LABEL_81:
                if (v56 == 0.0)
                  goto LABEL_82;
                v39 = 0.0 - v56;
                if (v56 >= 0.0)
                  v39 = v56;
                if (v39 <= 0.00000001)
                {
LABEL_82:
                  if (*(double *)v57.i64 == 0.0)
                    goto LABEL_83;
                  v40 = 0.0 - *(double *)v57.i64;
                  if (*(double *)v57.i64 >= 0.0)
                    v40 = *(double *)v57.i64;
                  if (v40 <= 0.00000001)
                  {
LABEL_83:
                    if (v53 == 0.0)
                      goto LABEL_84;
                    v41 = 0.0 - v53;
                    if (v53 >= 0.0)
                      v41 = v53;
                    if (v41 <= 0.00000001)
                    {
LABEL_84:
                      if (*(double *)v54.i64 == 0.0)
                        goto LABEL_85;
                      v42 = 0.0 - *(double *)v54.i64;
                      if (*(double *)v54.i64 >= 0.0)
                        v42 = *(double *)v54.i64;
                      if (v42 <= 0.00000001)
                      {
LABEL_85:
                        if (v52 == 0.0)
                          goto LABEL_74;
                        v43 = 0.0 - v52;
                        if (v52 >= 0.0)
                          v43 = v52;
                        if (v43 <= 0.00000001)
                        {
LABEL_74:
                          v50 = 0;
                          *(_BYTE *)a2 = 0;
                          goto LABEL_73;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v23 = v60;
    v22 = v61;
    v24 = v59;
    v26 = *(double *)v57.i64;
    v25 = *(double *)v58.i64;
    v28 = v55;
    v27 = v56;
    v30 = v53;
    v29 = *(double *)v54.i64;
    v32 = v51;
    v31 = v52;
  }
  v44.f64[0] = v29;
  v44.f64[1] = v31;
  v45.f64[0] = v26;
  v45.f64[1] = v30;
  v46.f64[0] = v25;
  v46.f64[1] = v27;
  v47.f64[0] = v23;
  v47.f64[1] = v32;
  v48.f64[0] = v22;
  v48.f64[1] = v28;
  v20.f64[1] = v24;
  v49 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v31 + v29+ v30+ v26+ v27+ v25+ v32+ v23+ v28+ v22+ *(double *)v62.i64+ v24), 0);
  *(float64x2_t *)(a2 + 64) = vdivq_f64(v45, v49);
  *(float64x2_t *)(a2 + 80) = vdivq_f64(v44, v49);
  *(float64x2_t *)(a2 + 32) = vdivq_f64(v47, v49);
  *(float64x2_t *)(a2 + 48) = vdivq_f64(v46, v49);
  *(float64x2_t *)a2 = vdivq_f64(v20, v49);
  *(float64x2_t *)(a2 + 16) = vdivq_f64(v48, v49);
  v50 = 1;
LABEL_73:
  *(_BYTE *)(a2 + 96) = v50;
  return result;
}

void sub_20EF3B0C4(unint64_t *a1, char **a2)
{
  float32x2_t *v3;
  unint64_t v4;
  BOOL v5;
  __int128 v6;
  unint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;

  sub_20EEE88A0(a1, a1[1], *a2, a2[1], (a2[1] - *a2) >> 3);
  v3 = (float32x2_t *)*a1;
  v4 = a1[1];
  if (*a1)
    v5 = 1;
  else
    v5 = v4 == 0;
  if (!v5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20FDC59E8((uint64_t)(v4 - (_QWORD)v3) >> 3, v3, (uint64_t)&v10);
  v6 = v10;
  v7 = v11;
  v8 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (unint64_t)v8;
    v9 = v6;
    operator delete(v8);
    v6 = v9;
  }
  *(_OWORD *)a1 = v6;
  a1[2] = v7;
}

void sub_20EF3B18C(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, double a6)
{
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  float32x2_t *v16;
  size_t v17;
  unint64_t v18;
  float32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  float32x2_t *v28;
  size_t v29;
  unint64_t v30;
  float32x2_t v31;
  float32x2_t v32;
  uint64_t v33;
  _OWORD *v35;

  if (!*(_BYTE *)(a3 + 184))
  {
    v23 = *(_QWORD *)(a3 + 136);
    v24 = *(_QWORD *)(a3 + 144);
    if (v23 == v24)
      return;
    while (1)
    {
      v26 = *(const void **)v23;
      v25 = *(_QWORD *)(v23 + 8);
      v27 = v25 - *(_QWORD *)v23;
      if (v25 == *(_QWORD *)v23)
        break;
      if (v27 < 0)
        sub_20E969238();
      v28 = (float32x2_t *)operator new(v25 - *(_QWORD *)v23);
      v29 = v27 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v28, v26, v29);
      if (v29)
      {
        v30 = 0;
        a6 = *(double *)a5;
        v31 = *(float32x2_t *)(a5 + 8);
        v32 = *(float32x2_t *)(a5 + 16);
        do
        {
          v28[v30 / 8] = vadd_f32(v32, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&a6, COERCE_FLOAT(*(_QWORD *)&v28[v30 / 8])), v31, v28[v30 / 8], 1));
          v30 += 8;
        }
        while (v29 != v30);
      }
      v33 = v29;
      if (v29 != 24)
        goto LABEL_41;
      *(float *)&a6 = vabds_f32((float)(v28->f32[0] - v28[2].f32[0]) * (float)(v28[1].f32[1] - v28->f32[1]), (float)(v28->f32[0] - v28[1].f32[0]) * (float)(v28[2].f32[1] - v28->f32[1]))* 0.5;
      if (*(float *)&a6 != 0.0 && *(float *)&a6 > 0.000001)
        goto LABEL_41;
LABEL_26:
      operator delete(v28);
LABEL_27:
      v23 += 24;
      if (v23 == v24)
        return;
    }
    v28 = 0;
    v33 = 0;
LABEL_41:
    sub_20EF29A3C(a2, a1, v33 >> 3, v28, 0, 0, a4, a6);
    if (!v28)
      goto LABEL_27;
    goto LABEL_26;
  }
  v9 = *(_QWORD *)(a3 + 136);
  v10 = *(_QWORD *)(a3 + 144);
  v11 = *(_OWORD **)(a3 + 160);
  v35 = *(_OWORD **)(a3 + 168);
  if (v9 != v10 || v11 != *(_OWORD **)(a3 + 168))
  {
    while (1)
    {
      v14 = *(const void **)v9;
      v13 = *(_QWORD *)(v9 + 8);
      v15 = v13 - *(_QWORD *)v9;
      if (v13 == *(_QWORD *)v9)
        break;
      if (v15 < 0)
        sub_20E969238();
      v16 = (float32x2_t *)operator new(v13 - *(_QWORD *)v9);
      v17 = v15 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v16, v14, v17);
      if (v17)
      {
        v18 = 0;
        a6 = *(double *)a5;
        v19 = *(float32x2_t *)(a5 + 8);
        v20 = *(float32x2_t *)(a5 + 16);
        do
        {
          v16[v18 / 8] = vadd_f32(v20, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&a6, COERCE_FLOAT(*(_QWORD *)&v16[v18 / 8])), v19, v16[v18 / 8], 1));
          v18 += 8;
        }
        while (v17 != v18);
      }
      v21 = v17;
      if (v17 != 24)
        goto LABEL_19;
      *(float *)&a6 = vabds_f32((float)(v16->f32[0] - v16[2].f32[0]) * (float)(v16[1].f32[1] - v16->f32[1]), (float)(v16->f32[0] - v16[1].f32[0]) * (float)(v16[2].f32[1] - v16->f32[1]))* 0.5;
      if (*(float *)&a6 != 0.0 && *(float *)&a6 > 0.000001)
        goto LABEL_19;
LABEL_20:
      operator delete(v16);
LABEL_21:
      v9 += 24;
      v11 += 6;
      if (v9 == v10 && v11 == v35)
        return;
    }
    v16 = 0;
    v21 = 0;
LABEL_19:
    sub_20EF29A3C(a2, a1, v21 >> 3, v16, v11, 1, a4, a6);
    if (!v16)
      goto LABEL_21;
    goto LABEL_20;
  }
}

void sub_20EF3B48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF3B4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;

  v7 = *(_OWORD *)a2;
  v8 = *(_OWORD *)(a2 + 16);
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  v10 = *(_OWORD *)(a2 + 64);
  v11 = *(_OWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v11;
  v13 = *(_DWORD *)(a4 + 8);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)a4;
  v14 = a1 + 128;
  *(_DWORD *)(a1 + 136) = v13;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v15 = (_QWORD *)operator new();
  *(_QWORD *)(a1 + 168) = v15;
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 128);
  v16 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 292) = *(_QWORD *)a3;
  *(_DWORD *)(a1 + 300) = v16;
  LODWORD(v15) = *(_DWORD *)a3;
  v17 = *(_DWORD *)(a3 + 4) + *(_DWORD *)(a3 + 8);
  v19 = 1065353216;
  v20 = 0;
  v21 = 1065353216;
  v22 = 0;
  v23 = 1065353216;
  sub_20EF3B18C((int)v15, v14, a2, v17, (uint64_t)&v19, 0.0);
  return a1;
}

void sub_20EF3B5F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(v1 + 264))
  {
    v4 = *(std::__shared_weak_count **)(v1 + 240);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  sub_20EF38420(v2);
  v7 = *(_QWORD *)(v1 + 160);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  _Unwind_Resume(a1);
}

void sub_20EF3B67C(uint64_t a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, _BYTE *a4@<X3>, unsigned __int8 a5@<W4>, void **a6@<X8>)
{
  uint64_t v8;
  uint64_t v11;
  __int32 v12;
  float32x2_t **v13;
  float32x2_t *v14;
  float32x2_t *v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  uint64_t v20;
  int8x16_t *v21;
  __int32 v22;
  __int32 v23;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x2_t v30;
  int8x16_t v31;
  unint64_t v32;
  float v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  _BYTE *v38;
  _QWORD *v39;
  int8x16_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int8x16_t *v44;
  char *v45;
  int8x16_t *v46;
  int8x16_t v47;
  float v48;
  float v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  int8x16_t *v54;
  unint64_t v55;
  int8x16_t *v56;
  int8x16_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  _BYTE *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  _QWORD *v79;
  int64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  uint64_t v95;
  uint64_t v96;
  const double *i64;
  double *v98;
  uint64_t v99;
  const double *v100;
  double *v101;
  BOOL v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _OWORD *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  int8x16_t *v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  unint64_t v118;
  __int32 v119;
  float v120;
  int8x16_t v121;
  uint64_t v122;
  int8x16_t *v123;
  int8x16_t v124;
  _QWORD *v125;
  unsigned int v126;
  unsigned int v127;
  __int32 v128;
  __int32 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  float64x2x2_t v134;
  float64x2x2_t v135;

  LOBYTE(v8) = a3;
  v11 = *(unsigned int *)(a1 + 272);
  v12 = *(_DWORD *)(a1 + 136);
  v13 = *(float32x2_t ***)(a1 + 168);
  v15 = *v13;
  v14 = v13[1];
  if (*v13 != v14)
  {
    while (!v15[28].i8[0])
    {
      v15 += 29;
      if (v15 == v14)
        goto LABEL_16;
    }
  }
LABEL_15:
  if (v15 == v14)
    goto LABEL_16;
  v16 = v15[3];
  if (*(_QWORD *)&v16 && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v16 + 48))(v16)
    || (v17 = v15[5], *(_QWORD *)&v17) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v17 + 48))(v17)
    || (v18 = v15[7], *(_QWORD *)&v18) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v18 + 48))(v18)
    || (v19 = v15[9], *(_QWORD *)&v19) && (*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v19 + 48))(v19))
  {
    while (1)
    {
      v15 += 29;
      if (v15 == v14)
        break;
      if (v15[28].i8[0])
        goto LABEL_15;
    }
LABEL_16:
    v15 = v14;
  }
  v20 = a5;
  if (a5)
    *a4 = 0;
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (v15 == v14)
    return;
  v21 = 0;
  v133 = 0;
  v8 = v8;
LABEL_21:
  v22 = v15[26].i32[0];
  v23 = v15[25].i32[0];
  if (v15[25].i32[1] + v22 >= v12)
  {
    v25 = v15[11];
    v26 = vmul_f32(vadd_f32(v15[10], v25), (float32x2_t)0x3F0000003F000000);
    v27 = vsub_f32(v26, v25);
    *(float32x2_t *)v28.f32 = vadd_f32(v26, v27);
    v29.i64[0] = v28.i64[0];
    v29.i64[1] = v28.i64[0];
    v30 = vsub_f32(v26, v27);
    *(float32x2_t *)v31.i8 = v30;
    v31.u64[1] = (unint64_t)v30;
    v32 = (unint64_t)a6[2];
    v132 = v20;
    if ((unint64_t)v21 < v32)
    {
      if (v30.f32[0] >= v28.f32[0])
        v33 = v28.f32[0];
      else
        v33 = v30.f32[0];
      if (v28.f32[0] >= v30.f32[0])
        v30.f32[0] = v28.f32[0];
      v34.i64[0] = v29.i64[0];
      v34.i64[1] = __PAIR64__(v28.u32[1], v30.u32[0]);
      v28.i64[1] = v29.i64[0];
      v28.f32[0] = v33;
      v35.i64[0] = __PAIR64__(v28.u32[1], LODWORD(v33));
      v35.i64[1] = __PAIR64__(v28.u32[1], v30.u32[0]);
      v36 = vbslq_s8((int8x16_t)vcgtq_f32(v28, v34), v29, v35);
      v37.i64[0] = v31.i64[0];
      v37.i64[1] = v36.i64[1];
      v35.i64[0] = v36.i64[0];
      v35.i64[1] = v31.i64[0];
      *v21++ = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v35, v37), v31, v36);
      a6[1] = v21;
      if (!v8)
        goto LABEL_134;
LABEL_70:
      if ((_DWORD)v11 != v23 || v22 >= v12)
        goto LABEL_134;
      v68 = (char *)a2[1];
      v67 = a2[2];
      if ((unint64_t)v68 < v67)
      {
        *(_QWORD *)v68 = v133;
        v69 = (uint64_t)(v68 + 8);
LABEL_133:
        a2[1] = v69;
        v20 = v132;
LABEL_134:
        ++v133;
        goto LABEL_135;
      }
      v131 = v8;
      v127 = v11;
      v129 = v12;
      v70 = a4;
      v125 = a2;
      v71 = (char *)*a2;
      v72 = (uint64_t)&v68[-*a2];
      v73 = v72 >> 3;
      v74 = (v72 >> 3) + 1;
      if (v74 >> 61)
        sub_20E867F44();
      v75 = v67 - (_QWORD)v71;
      if (v75 >> 2 > v74)
        v74 = v75 >> 2;
      if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
        v76 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v76 = v74;
      v123 = v21;
      if (v76)
      {
        if (v76 >> 61)
          sub_20E877A38();
        v77 = v76;
        v78 = operator new(8 * v76);
        v76 = v77;
        v79 = &v78[8 * v73];
        *v79 = v133;
        v69 = (uint64_t)(v79 + 1);
        v80 = v68 - v71;
        if (v68 != v71)
          goto LABEL_83;
      }
      else
      {
        v78 = 0;
        v79 = (_QWORD *)(8 * v73);
        *(_QWORD *)(8 * v73) = v133;
        v69 = 8 * v73 + 8;
        v80 = v68 - v71;
        if (v68 != v71)
        {
LABEL_83:
          v81 = v80 - 8;
          if (v81 >= 0x58)
          {
            v103 = v68 - &v78[v72];
            a4 = v70;
            v11 = v127;
            v12 = v129;
            if (v103 >= 0x20)
            {
              v104 = (v81 >> 3) + 1;
              v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
              v106 = &v68[-v105];
              v79 = (_QWORD *)((char *)v79 - v105);
              v107 = &v78[8 * v73 - 16];
              v108 = v68 - 16;
              v109 = v104 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v110 = *(_OWORD *)v108;
                *(v107 - 1) = *((_OWORD *)v108 - 1);
                *v107 = v110;
                v107 -= 2;
                v108 -= 32;
                v109 -= 4;
              }
              while (v109);
              v68 = v106;
              if (v104 == (v104 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_130;
            }
          }
          else
          {
            a4 = v70;
            v11 = v127;
            v12 = v129;
          }
          do
          {
            v111 = *((_QWORD *)v68 - 1);
            v68 -= 8;
            *--v79 = v111;
          }
          while (v68 != v71);
LABEL_130:
          a2 = v125;
          *v125 = v79;
          v125[1] = v69;
          v125[2] = &v78[8 * v76];
          if (v71)
            operator delete(v71);
          v8 = v131;
          v21 = v123;
          goto LABEL_133;
        }
      }
      a4 = v70;
      v11 = v127;
      v12 = v129;
      goto LABEL_130;
    }
    v130 = v8;
    v126 = v11;
    v128 = v12;
    v38 = a4;
    v39 = a2;
    v40 = (int8x16_t *)*a6;
    v41 = (char *)v21 - (_BYTE *)*a6;
    v42 = (v41 >> 4) + 1;
    if (v42 >> 60)
      sub_20E969238();
    v120 = v30.f32[0];
    v121 = v29;
    v122 = v28.i64[0];
    v124 = v31;
    v119 = v15[25].i32[0];
    v43 = v32 - (_QWORD)v40;
    if (v43 >> 3 > v42)
      v42 = v43 >> 3;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
      v42 = 0xFFFFFFFFFFFFFFFLL;
    if (v42 >> 60)
      sub_20E877A38();
    v44 = v21;
    v118 = v42;
    v45 = (char *)operator new(16 * v42);
    v46 = (int8x16_t *)&v45[16 * (v41 >> 4)];
    v47.i32[1] = HIDWORD(v122);
    v48 = v120;
    if (v120 >= *(float *)&v122)
      v49 = *(float *)&v122;
    else
      v49 = v120;
    if (v120 <= *(float *)&v122)
      v48 = *(float *)&v122;
    v50.i64[0] = v121.i64[0];
    v50.i64[1] = __PAIR64__(HIDWORD(v122), LODWORD(v48));
    v51.i64[1] = v121.i64[1];
    v51.i64[0] = __PAIR64__(HIDWORD(v122), LODWORD(v49));
    *(float *)v47.i32 = v49;
    v47.i64[1] = __PAIR64__(HIDWORD(v122), LODWORD(v48));
    v52 = vbslq_s8((int8x16_t)vcgtq_f32(v51, v50), v121, v47);
    v53.i64[0] = v124.i64[0];
    v53.i64[1] = v52.i64[1];
    v50.i64[0] = v52.i64[0];
    v50.i64[1] = v124.i64[0];
    *v46 = vbslq_s8((int8x16_t)vcgtq_f32(v50, v53), v124, v52);
    v54 = v46 + 1;
    if (v44 == v40)
    {
      v57 = (int8x16_t *)&v45[16 * (v41 >> 4)];
      a2 = v39;
      a4 = v38;
      v11 = v126;
      v12 = v128;
      v58 = v118;
      goto LABEL_67;
    }
    v55 = (char *)v44 - (char *)v40 - 16;
    if (v55 < 0x3F0)
      goto LABEL_49;
    v59 = ((char *)&v44[-1] - (char *)v40) & 0xFFFFFFFFFFFFFFF0;
    v60 = (unint64_t)&v44[-1] - v59;
    v61 = (unint64_t)&v44[-1].u64[1];
    v62 = (unint64_t)&v44[-1].u64[1] - v59;
    if (&v45[v41 - 16 - v59] > &v45[v41 - 16]
      || &v45[v41 - 8 - v59] > &v45[v41 - 8]
      || v60 > (unint64_t)&v44[-1]
      || v62 > v61)
    {
      v56 = v44;
      goto LABEL_63;
    }
    v82 = v41 - v59;
    v83 = (unint64_t)&v45[v82 - 16];
    v84 = &v45[v41 - 8];
    v85 = &v45[v82 - 8];
    v86 = v83 >= v61 || v60 >= (unint64_t)v84;
    v87 = !v86;
    v88 = v83 >= (unint64_t)v44 || v62 >= (unint64_t)v84;
    v89 = !v88;
    v90 = (unint64_t)v85 >= v61 || v60 >= (unint64_t)v46;
    v91 = !v90;
    v92 = v85 >= (char *)v44 || v62 >= (unint64_t)v46;
    v93 = !v92;
    if (v85 < v84 && v83 < (unint64_t)v46)
    {
LABEL_49:
      v56 = v44;
LABEL_63:
      v57 = (int8x16_t *)&v45[16 * (v41 >> 4)];
      a2 = v39;
LABEL_64:
      a4 = v38;
LABEL_65:
      v11 = v126;
      v12 = v128;
      v58 = v118;
      goto LABEL_66;
    }
    a2 = v39;
    if (v87)
    {
      v56 = v44;
      v57 = v46;
      goto LABEL_64;
    }
    a4 = v38;
    if (v89)
    {
      v56 = v44;
      v57 = v46;
      goto LABEL_65;
    }
    if (v91)
    {
      v56 = v44;
      v57 = v46;
      v12 = v128;
    }
    else
    {
      v12 = v128;
      if (!v93)
      {
        v95 = (v55 >> 4) + 1;
        v96 = 16 * (v95 & 0x1FFFFFFFFFFFFFFCLL);
        v56 = &v44[v96 / 0xFFFFFFFFFFFFFFF0];
        v57 = &v46[v96 / 0xFFFFFFFFFFFFFFF0];
        i64 = (const double *)v44[-2].i64;
        v98 = (double *)v46[-2].i64;
        v99 = v95 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v134 = vld2q_f64(i64);
          v100 = i64 - 4;
          v135 = vld2q_f64(v100);
          vst2q_f64(v98, v134);
          v101 = v98 - 4;
          vst2q_f64(v101, v135);
          v98 -= 8;
          i64 -= 8;
          v99 -= 4;
        }
        while (v99);
        v102 = v95 == (v95 & 0x1FFFFFFFFFFFFFFCLL);
        v11 = v126;
        v58 = v118;
        if (v102)
        {
LABEL_67:
          *a6 = v57;
          a6[1] = v54;
          a6[2] = &v45[16 * v58];
          if (v40)
            operator delete(v40);
          v21 = v54;
          v8 = v130;
          v20 = v132;
          v23 = v119;
          a6[1] = v21;
          if (!v130)
            goto LABEL_134;
          goto LABEL_70;
        }
        do
        {
LABEL_66:
          v66 = v56[-1].i64[0];
          --v56;
          v57[-1].i64[0] = v66;
          --v57;
          v57->i64[1] = v56->i64[1];
        }
        while (v56 != v40);
        goto LABEL_67;
      }
      v56 = v44;
      v57 = v46;
    }
    v11 = v126;
    v58 = v118;
    goto LABEL_66;
  }
  if (v20)
  {
    if ((_DWORD)v11 == v23 && v22 >= v12)
      *a4 = 1;
  }
LABEL_135:
  while (1)
  {
    v15 += 29;
    if (v15 == v14)
      break;
    if (v15[28].i8[0])
    {
      while (v15 != v14)
      {
        v112 = v11;
        v113 = v21;
        v114 = v15[3];
        if (!*(_QWORD *)&v114 || !(*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v114 + 48))(v114))
        {
          v115 = v15[5];
          if (!*(_QWORD *)&v115 || !(*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v115 + 48))(v115))
          {
            v116 = v15[7];
            if (!*(_QWORD *)&v116 || !(*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v116 + 48))(v116))
            {
              v117 = v15[9];
              if (!*(_QWORD *)&v117 || !(*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v117 + 48))(v117))
              {
                v21 = v113;
                v11 = v112;
                if (v15 != v14)
                  goto LABEL_21;
                return;
              }
            }
          }
        }
        v15 += 29;
        if (v15 == v14)
          return;
        v21 = v113;
        v11 = v112;
        while (!v15[28].i8[0])
        {
          v15 += 29;
          if (v15 == v14)
            return;
        }
      }
      return;
    }
  }
}

void sub_20EF3BDC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EF3BDF0(uint64_t a1@<X0>, unint64_t a2@<X1>, float32x2_t *a3@<X2>, unint64_t a4@<X3>, float32x2_t *a5@<X4>, float32x2_t *a6@<X5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  float32x2_t *v12;
  unint64_t v13;
  _BOOL4 v14;
  int32x4_t v15;
  __n128 v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t *v67;
  uint64_t *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  char *v80;
  int64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  char *v92;
  char *v93;
  unsigned int *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  size_t v103;
  unint64_t v104;
  _QWORD *v105;
  char *v106;
  int8x16_t v107;
  int8x16_t v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int *v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  char *v128;
  char *v129;
  _QWORD *v130;
  unint64_t v131;
  float32x2_t v132;
  uint64_t v133;
  __int128 v134;
  _QWORD *v135;
  size_t v136;
  unint64_t v137;
  _QWORD *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  float32x4_t v155;
  float32x2_t v156;
  BOOL v157;
  unsigned int v159;
  float32x2_t v160;
  float32x2_t v161;
  float32x2_t *v162;
  float32x2_t v163;
  float32x2_t *v164;
  float32x2_t *v165;
  float32x2_t *v166;
  _BYTE *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  _BYTE *v174;
  char *v175;
  int64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  int8x16_t *v181;
  int8x16_t *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  unint64_t v186;
  unsigned int *v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  int64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  int64_t v208;
  char *v209;
  int64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  int64_t v217;
  char *v218;
  int64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  int64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  int8x16_t *v231;
  int8x16_t *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  int8x16_t *v239;
  int8x16_t *v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  int8x16_t *v247;
  int8x16_t *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  int64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  char *v261;
  int64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  int8x16_t *v267;
  int8x16_t *v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  void *v273;
  char *v274;
  char *v275;
  void *v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  void *v281;
  void *v282;
  char *v283;
  char *v284;
  void *v285;
  void *v286;
  char *i;
  void *v288;
  int v289;
  unint64_t v290;
  _QWORD *v291;
  _QWORD *v292;
  _QWORD *v293;
  char *v294;
  unsigned int *v295;
  int v296;
  unint64_t v297;
  uint8x8_t v298;
  uint64_t v299;
  uint64_t v300;
  __int128 **v301;
  __int128 *v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  _QWORD *v306;
  char *v307;
  unint64_t v308;
  _QWORD *v309;
  char *v310;
  int8x16_t v311;
  float32x2_t v312;
  float32x2_t v313;
  uint64_t v314;
  _QWORD *v315;
  unint64_t v316;
  unint64_t v317;
  float v318;
  float v319;
  float32x2_t *v320;
  float32x2_t v321;
  float32x2_t v322;
  float32x2_t v323;
  char *v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  _BYTE *v331;
  char *v332;
  int64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  int8x16_t *v338;
  int8x16_t *v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  unsigned int *v343;
  unint64_t v344;
  unsigned int v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  char *v349;
  uint64_t v350;
  char *v351;
  char *v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t v357;
  _BYTE *v358;
  unint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  char *v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  _BYTE *v369;
  unint64_t *v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  int8x16_t *v376;
  int8x16_t *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  int8x16_t *v383;
  int8x16_t *v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  char *v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  _BYTE *v399;
  unint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  char *v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unint64_t v408;
  _BYTE *v409;
  unint64_t *v410;
  int64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  char *v415;
  int8x16_t *v416;
  int8x16_t *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  int8x16_t *v423;
  int8x16_t *v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  __int128 *v428;
  __int128 *v429;
  __int128 *v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  char *v434;
  char *v435;
  _QWORD *v436;
  char *v437;
  unint64_t v438;
  float32x2_t v439;
  uint64_t v440;
  __int128 v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  __int128 v445;
  __int128 v446;
  _QWORD *v447;
  _QWORD *v448;
  void *v449;
  char *v450;
  char *v451;
  void *v452;
  void *v453;
  unint64_t v454;
  float32x2_t *v455;
  int8x16_t v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v463;
  uint64_t v464;
  void *v465;
  __int128 v466;
  void *v467;
  __int128 v468;
  char *v469;
  __int128 v470;
  void *v471;
  unsigned int *v472;
  _BYTE v473[24];
  __int128 v474;
  __int128 v475;
  int v476;
  void *__p[2];
  char *v478;
  void *v479;
  char *v480;
  char *v481;
  __int128 v482;
  __int128 v483;
  int v484;
  char *v485;
  __int128 v486;
  char *v487;
  char *v488;
  char *v489;
  char *v490;
  char *v491;
  unint64_t v492;
  _QWORD *v493;
  unint64_t v494;
  unint64_t v495;

  if (a2 != a4)
  {
    v12 = a3;
    v13 = a2;
    v14 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetector.cpp", 254, (uint64_t)"points2d.size() == points3d.size()", 34, (uint64_t)"The number of 2D points and 3D points must be matched.", 54, (void (*)(void **))sub_21023DDB0);
    a2 = v13;
    a3 = v12;
    if (v14)
      abort();
  }
  v454 = a2;
  v455 = a3;
  sub_20EEE3B9C(a2, a3, (uint64_t)&v471);
  v469 = 0;
  v470 = 0uLL;
  if (a7)
  {
    sub_20EF402D4((unsigned int **)&v471, a4, a5, a6, (uint64_t *)v473, *(float *)a1, *(float *)(a1 + 4), v18, v19);
  }
  else
  {
    v15.i32[0] = *(_DWORD *)(a1 + 4);
    sub_20EF3ECAC((unsigned int **)&v471, a4, (uint64_t)a5, (uint64_t *)v473, *(float *)a1, v15, v16, v17, (int8x16_t)v18);
  }
  v20 = *(_QWORD *)v473;
  v469 = *(char **)v473;
  v470 = *(_OWORD *)&v473[8];
  v21 = *(char **)&v473[8];
  if (*(_QWORD *)v473 == *(_QWORD *)&v473[8])
  {
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
    if (v21)
      goto LABEL_345;
    goto LABEL_351;
  }
  v467 = 0;
  v468 = 0uLL;
  v22 = *(unsigned __int8 *)(a1 + 8);
  if (v22 == 2)
  {
    v56 = *(float *)(a1 + 16);
    v57 = *(float *)(a1 + 20);
    sub_20EF41394(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)&v473[8] - *(_QWORD *)v473) >> 3), *(uint64_t **)v473, a4, (uint64_t *)a5, (double **)v473, *(float *)(a1 + 12));
    sub_20EF40EF8(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)&v473[8] - *(_QWORD *)v473) >> 3), *(uint64_t *)v473, (uint64_t *)&v482);
    v58 = *(_QWORD *)v473;
    if (*(_QWORD *)v473)
    {
      v59 = *(_QWORD *)&v473[8];
      v60 = *(void **)v473;
      if (*(_QWORD *)&v473[8] != *(_QWORD *)v473)
      {
        do
        {
          v61 = *(void **)(v59 - 32);
          if (v61)
          {
            *(_QWORD *)(v59 - 24) = v61;
            operator delete(v61);
          }
          v62 = *(void **)(v59 - 64);
          if (v62)
          {
            *(_QWORD *)(v59 - 56) = v62;
            operator delete(v62);
          }
          v59 -= 88;
        }
        while (v59 != v58);
        v60 = *(void **)v473;
      }
      *(_QWORD *)&v473[8] = v58;
      operator delete(v60);
    }
    *(_OWORD *)v473 = v482;
    *(_QWORD *)&v473[16] = v483;
    sub_20EF41D88((uint64_t **)v473, a4, (float *)a5, a8, v56, v57);
    v278 = *(_QWORD *)v473;
    if (*(_QWORD *)v473)
    {
      v279 = *(_QWORD *)&v473[8];
      v280 = *(void **)v473;
      if (*(_QWORD *)&v473[8] != *(_QWORD *)v473)
      {
        do
        {
          v281 = *(void **)(v279 - 32);
          if (v281)
          {
            *(_QWORD *)(v279 - 24) = v281;
            operator delete(v281);
          }
          v282 = *(void **)(v279 - 64);
          if (v282)
          {
            *(_QWORD *)(v279 - 56) = v282;
            operator delete(v282);
          }
          v279 -= 88;
        }
        while (v279 != v278);
        v280 = *(void **)v473;
      }
      *(_QWORD *)&v473[8] = v278;
      operator delete(v280);
      v283 = (char *)v467;
      if (v467)
        goto LABEL_337;
      goto LABEL_344;
    }
LABEL_336:
    v283 = (char *)v467;
    if (!v467)
      goto LABEL_344;
    goto LABEL_337;
  }
  v463 = *(_QWORD *)v473;
  if (v22 == 1)
  {
    v494 = 0;
    v495 = 0;
    v493 = 0;
    v33 = 0x8E38E38E38E38E39 * (((char *)v472 - (_BYTE *)v471) >> 2);
    if (v472 != v471)
    {
      if ((char *)v472 - (_BYTE *)v471 < 0)
        sub_20E867F44();
      v34 = (v33 - 1) >> 6;
      v35 = operator new(8 * (v34 + 1));
      v36 = v35;
      v494 = v33;
      v495 = v34 + 1;
      v493 = v35;
      if (v33 >= 0x41)
        v37 = (v33 - 1) >> 6;
      else
        v37 = 0;
      v35[v37] = 0;
      if (v33 >= 0x40)
        bzero(v35, 8 * (v33 >> 6));
      if ((v33 & 0x3F) != 0)
        v36[v33 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v33 & 0x3F));
    }
    v490 = 0;
    v491 = 0;
    v492 = 0;
    sub_20E8B3B5C(&v490, v33);
    v38 = (unsigned int *)v471;
    v39 = v472;
    if (v471 != v472)
    {
      do
      {
        v40 = v38[3];
        if (v40 == -1
          || (v41 = v38[7], v41 == -1)
          || (v42 = (unsigned int *)((char *)v471 + 36 * v40), v43 = v42[7], (_DWORD)v43 == -1)
          || (v44 = *((_DWORD *)v471 + 9 * v41 + 3), v44 == -1)
          || *((_DWORD *)v471 + 9 * v44) != (_DWORD)v43)
        {
          v48 = 0;
          v49 = 0;
          v50 = (unint64_t)v491;
          v51 = v492;
          if (v491 != (char *)(v492 << 6))
            goto LABEL_54;
        }
        else
        {
          v45 = *v38;
          v46 = *v42;
          v47 = *((unsigned int *)v471 + 9 * v41);
          v48 = operator new(0x20uLL);
          v49 = v48 + 4;
          *v48 = v45;
          v48[1] = v46;
          v48[2] = v47;
          v48[3] = v43;
          v50 = (unint64_t)v491;
          v51 = v492;
          if (v491 != (char *)(v492 << 6))
            goto LABEL_54;
        }
        if ((uint64_t)(v50 + 1) < 0)
          sub_20E867F44();
        v52 = v51 << 7;
        if (v52 <= (v50 & 0xFFFFFFFFFFFFFFC0) + 64)
          v52 = (v50 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v50 <= 0x3FFFFFFFFFFFFFFELL)
          v53 = v52;
        else
          v53 = 0x7FFFFFFFFFFFFFFFLL;
        sub_20E8B3B5C(&v490, v53);
        v50 = (unint64_t)v491;
LABEL_54:
        v491 = (char *)(v50 + 1);
        v54 = v50 >> 6;
        v55 = 1 << v50;
        if (v48 != v49)
        {
          *(_QWORD *)&v490[8 * v54] &= ~v55;
          if (!v48)
            goto LABEL_38;
LABEL_37:
          operator delete(v48);
          goto LABEL_38;
        }
        *(_QWORD *)&v490[8 * v54] |= v55;
        if (v48)
          goto LABEL_37;
LABEL_38:
        v38 += 9;
      }
      while (v38 != v39);
    }
    v465 = 0;
    v466 = 0uLL;
    v460 = v463 + 8 * ((uint64_t)&v21[-v463] >> 3);
    __asm { FMOV            V0.4S, #1.0 }
    v457 = _Q0;
    while (1)
    {
      sub_20E8B40D4(&v487, (uint64_t)&v490);
      v485 = 0;
      v486 = 0uLL;
      v67 = *(uint64_t **)(v463 + 64);
      v68 = *(uint64_t **)(v463 + 72);
      if (v67 == v68)
      {
        v482 = 0u;
        v483 = 0u;
        v484 = 1065353216;
        goto LABEL_129;
      }
      v69 = 0;
      do
      {
        v71 = *v67;
        v72 = (unint64_t)*v67 >> 6;
        v73 = 1 << *v67;
        if ((v73 & *(_QWORD *)&v487[8 * v72]) == 0 && (v493[v72] & v73) == 0)
        {
          if ((unint64_t)v69 < *((_QWORD *)&v486 + 1))
          {
            *(_QWORD *)v69 = v71;
            v70 = (uint64_t)(v69 + 8);
          }
          else
          {
            v74 = v485;
            v75 = (v69 - v485) >> 3;
            v76 = v75 + 1;
            if ((unint64_t)(v75 + 1) >> 61)
              sub_20E867F44();
            v77 = *((_QWORD *)&v486 + 1) - (_QWORD)v485;
            if ((uint64_t)(*((_QWORD *)&v486 + 1) - (_QWORD)v485) >> 2 > v76)
              v76 = v77 >> 2;
            if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
              v78 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v78 = v76;
            if (v78)
            {
              if (v78 >> 61)
                sub_20E877A38();
              v79 = operator new(8 * v78);
              v80 = &v79[8 * v75];
              *(_QWORD *)v80 = v71;
              v70 = (uint64_t)(v80 + 8);
              v81 = v69 - v74;
              if (v69 == v74)
                goto LABEL_89;
            }
            else
            {
              v79 = 0;
              v80 = (char *)(8 * v75);
              *(_QWORD *)(8 * v75) = v71;
              v70 = 8 * v75 + 8;
              v81 = v69 - v74;
              if (v69 == v74)
                goto LABEL_89;
            }
            v82 = v81 - 8;
            if (v82 >= 0x168)
            {
              v85 = (v69 - 8 - v74) & 0xFFFFFFFFFFFFFFF8;
              if (&v79[v69 - v74 - 8 - v85] > &v79[v69 - v74 - 8])
              {
                v83 = v69;
              }
              else if (&v69[-v85 - 8] > v69 - 8)
              {
                v83 = v69;
              }
              else if ((unint64_t)(v74 - v79) >= 0x20)
              {
                v86 = (v82 >> 3) + 1;
                v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
                v83 = &v69[-v87];
                v80 -= v87;
                v88 = &v79[8 * v75 - 16];
                v89 = v69 - 16;
                v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v91 = *(_OWORD *)v89;
                  *(v88 - 1) = *((_OWORD *)v89 - 1);
                  *v88 = v91;
                  v88 -= 2;
                  v89 -= 32;
                  v90 -= 4;
                }
                while (v90);
                if (v86 == (v86 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_89;
              }
              else
              {
                v83 = v69;
              }
            }
            else
            {
              v83 = v69;
            }
            do
            {
              v84 = *((_QWORD *)v83 - 1);
              v83 -= 8;
              *((_QWORD *)v80 - 1) = v84;
              v80 -= 8;
            }
            while (v83 != v74);
LABEL_89:
            v485 = v80;
            *(_QWORD *)&v486 = v70;
            *((_QWORD *)&v486 + 1) = &v79[8 * v78];
            if (v74)
              operator delete(v74);
          }
          *(_QWORD *)&v486 = v70;
          v69 = (char *)v70;
        }
        ++v67;
      }
      while (v67 != v68);
      v92 = v485;
      v482 = 0u;
      v483 = 0u;
      v484 = 1065353216;
      if (v485 == v69)
      {
LABEL_129:
        v479 = 0;
        v480 = 0;
        v481 = 0;
        goto LABEL_130;
      }
      do
      {
        v93 = (char *)v471 + 36 * *(_QWORD *)v92;
        v95 = *((_DWORD *)v93 + 1);
        v94 = (unsigned int *)(v93 + 4);
        v96 = *(_QWORD *)v92 >> 6;
        v97 = 1 << *(_QWORD *)v92;
        if (v95 != -1)
        {
          *(_QWORD *)v473 = 0;
          *(_QWORD *)v473 = *v94;
          v98 = *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)];
          if (((1 << v473[0]) & v98) == 0 && (v493[v96] & v97) == 0)
          {
            *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)] = v98 | (1 << v473[0]);
            sub_20EDC9EA8((uint64_t)&v482, (unint64_t *)v473, v473);
          }
        }
        if (v94[2] != -1)
        {
          *(_QWORD *)v473 = 0;
          *(_QWORD *)v473 = v94[2];
          v99 = *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)];
          if (((1 << v473[0]) & v99) == 0 && (v493[v96] & v97) == 0)
          {
            *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)] = v99 | (1 << v473[0]);
            sub_20EDC9EA8((uint64_t)&v482, (unint64_t *)v473, v473);
          }
        }
        if (v94[4] != -1)
        {
          *(_QWORD *)v473 = 0;
          *(_QWORD *)v473 = v94[4];
          v100 = *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)];
          if (((1 << v473[0]) & v100) == 0 && (v493[v96] & v97) == 0)
          {
            *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)] = v100 | (1 << v473[0]);
            sub_20EDC9EA8((uint64_t)&v482, (unint64_t *)v473, v473);
          }
        }
        if (v94[6] != -1)
        {
          *(_QWORD *)v473 = 0;
          *(_QWORD *)v473 = v94[6];
          v101 = *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)];
          if (((1 << v473[0]) & v101) == 0 && (v493[v96] & v97) == 0)
          {
            *(_QWORD *)&v487[8 * (*(_QWORD *)v473 >> 6)] = v101 | (1 << v473[0]);
            sub_20EDC9EA8((uint64_t)&v482, (unint64_t *)v473, v473);
          }
        }
        v92 += 8;
      }
      while (v92 != v69);
      v102 = (_QWORD *)v483;
      v479 = 0;
      v480 = 0;
      v481 = 0;
      if ((_QWORD)v483)
      {
        v103 = 0;
        v104 = -1;
        v105 = (_QWORD *)v483;
        do
        {
          v105 = (_QWORD *)*v105;
          ++v104;
          v103 += 8;
        }
        while (v105);
        if (v104 >= 0x1FFFFFFFFFFFFFFFLL)
          sub_20E867F44();
        v106 = (char *)operator new(v103);
        v109 = 0;
        v479 = v106;
        v481 = &v106[v103];
        do
        {
          *(_QWORD *)&v106[v109] = v102[2];
          v102 = (_QWORD *)*v102;
          v109 += 8;
        }
        while (v102);
        v110 = &v106[v109];
        v480 = &v106[v109];
        if (v109)
        {
          v111 = v493;
          while (1)
          {
            v147 = *((_QWORD *)v110 - 1);
            v480 = v110 - 8;
            if (((*(_QWORD *)((char *)v111 + ((v147 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v147) & 1) != 0)
              goto LABEL_161;
            v148 = (unsigned int *)((char *)v471 + 36 * v147);
            v149 = v148[3];
            if (v149 != -1)
            {
              v150 = *((_DWORD *)v471 + 9 * v147 + 7);
              if (v150 != -1)
              {
                v151 = (unsigned int *)((char *)v471 + 36 * v149);
                v152 = v151[7];
                if (v152 != -1)
                {
                  v153 = *((_DWORD *)v471 + 9 * v150 + 3);
                  if (v153 != -1 && *((_DWORD *)v471 + 9 * v153) == v152)
                  {
                    v154 = *v148;
                    v107.i32[0] = *(_DWORD *)(v463 + 20);
                    v108.i64[0] = *(_QWORD *)(v463 + 12);
                    v155 = (float32x4_t)v108;
                    v156 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.i8, 1), *(float32x2_t *)v108.i8, 1), *(float32x2_t *)v107.i8, *(float32x2_t *)v107.i8);
                    *(float *)v107.i32 = v156.f32[0] + -1.0;
                    if (v156.f32[0] < 1.0)
                      *(float *)v107.i32 = 1.0 - v156.f32[0];
                    v157 = *(float *)v107.i32 > 0.000001;
                    *(float *)v107.i32 = 1.0 / sqrtf(v156.f32[0]);
                    v107 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v107.i8, 0);
                    _ZF = !v157 || v156.f32[0] == 1.0;
                    v159 = _ZF ? -1 : 0;
                    v163.i32[1] = v457.i32[1];
                    v155.i32[2] = *(_DWORD *)(v463 + 20);
                    v108 = (int8x16_t)vmulq_f32(v155, (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v159), v457, v107));
                    v160 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.i8, 1);
                    v161 = (float32x2_t)vextq_s8(v108, v108, 8uLL).u64[0];
                    v156.i32[0] = *(_DWORD *)(v463 + 8);
                    *(float32x2_t *)v107.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v463, *(float32x2_t *)v108.i8), v160, *(float32x2_t *)v463, 1), v161, v156);
                    v162 = (float32x2_t *)((char *)a5 + 12 * v154);
                    v163.i32[0] = v162[1].i32[0];
                    if (fabsf(vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v162, *(float32x2_t *)v108.i8), v160, *v162, 1), v161, v163), *(float32x2_t *)v107.i8).f32[0]) >= 0.05)goto LABEL_161;
                    v164 = (float32x2_t *)((char *)a5 + 12 * *v151);
                    v163.i32[0] = v164[1].i32[0];
                    if (fabsf(vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v164, *(float32x2_t *)v108.i8), v160, *v164, 1), v161, v163), *(float32x2_t *)v107.i8).f32[0]) >= 0.05)goto LABEL_161;
                    v165 = (float32x2_t *)((char *)a5 + 12 * *((unsigned int *)v471 + 9 * v150));
                    v163.i32[0] = v165[1].i32[0];
                    if (fabsf(vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v165, *(float32x2_t *)v108.i8), v160, *v165, 1), v161, v163), *(float32x2_t *)v107.i8).f32[0]) >= 0.05)goto LABEL_161;
                    v166 = (float32x2_t *)((char *)a5 + 12 * v152);
                    v163.i32[0] = v166[1].i32[0];
                    *(float32x2_t *)v107.i8 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v166, *(float32x2_t *)v108.i8), v160, *v166, 1), v161, v163), *(float32x2_t *)v107.i8);
                    if (fabsf(*(float *)v107.i32) >= 0.05)
                      goto LABEL_161;
                  }
                }
              }
            }
            v167 = (_BYTE *)v486;
            if ((unint64_t)v486 < *((_QWORD *)&v486 + 1))
            {
              *(_QWORD *)v486 = v147;
              v168 = (uint64_t)(v167 + 8);
              goto LABEL_201;
            }
            v169 = v485;
            v170 = (uint64_t)(v486 - (_QWORD)v485) >> 3;
            v171 = v170 + 1;
            if ((unint64_t)(v170 + 1) >> 61)
              sub_20E867F44();
            v172 = *((_QWORD *)&v486 + 1) - (_QWORD)v485;
            if ((uint64_t)(*((_QWORD *)&v486 + 1) - (_QWORD)v485) >> 2 > v171)
              v171 = v172 >> 2;
            v173 = (unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v171;
            if (v173)
              break;
            v174 = 0;
            v175 = (char *)(8 * v170);
            *(_QWORD *)(8 * v170) = v147;
            v168 = 8 * v170 + 8;
            v176 = v167 - v169;
            if (v167 != v169)
              goto LABEL_193;
LABEL_199:
            v485 = v175;
            *(_QWORD *)&v486 = v168;
            *((_QWORD *)&v486 + 1) = &v174[8 * v173];
            if (v169)
              operator delete(v169);
LABEL_201:
            *(_QWORD *)&v486 = v168;
            v185 = (char *)v471 + 36 * v147;
            v188 = *((_DWORD *)v185 + 1);
            v187 = (unsigned int *)(v185 + 4);
            v186 = v188;
            if (v188 == -1 || (v189 = *(_QWORD *)&v487[8 * (v186 >> 6)], (v189 & (1 << v186)) != 0))
            {
              v190 = v187[2];
              if ((_DWORD)v190 == -1)
                goto LABEL_205;
              goto LABEL_204;
            }
            *(_QWORD *)&v487[8 * (v186 >> 6)] = v189 | (1 << v186);
            v196 = v480;
            if (v480 < v481)
            {
              *(_QWORD *)v480 = v186;
              v197 = (uint64_t)(v196 + 8);
              goto LABEL_252;
            }
            v200 = (char *)v479;
            v201 = v480 - (_BYTE *)v479;
            v202 = (v480 - (_BYTE *)v479) >> 3;
            v203 = v202 + 1;
            if ((unint64_t)(v202 + 1) >> 61)
              goto LABEL_606;
            v204 = v481 - (_BYTE *)v479;
            if ((v481 - (_BYTE *)v479) >> 2 > v203)
              v203 = v204 >> 2;
            if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFF8)
              v205 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v205 = v203;
            if (v205)
            {
              if (v205 >> 61)
                goto LABEL_611;
              v206 = (char *)operator new(8 * v205);
              v207 = &v206[8 * v202];
              *(_QWORD *)v207 = v186;
              v197 = (uint64_t)(v207 + 8);
              v208 = v196 - v200;
              if (v196 == v200)
                goto LABEL_250;
LABEL_244:
              v227 = v208 - 8;
              if (v227 < 0x58)
                goto LABEL_621;
              if ((unint64_t)(v196 - &v206[v201]) < 0x20)
                goto LABEL_621;
              v228 = (v227 >> 3) + 1;
              v229 = 8 * (v228 & 0x3FFFFFFFFFFFFFFCLL);
              v230 = &v196[-v229];
              v207 -= v229;
              v231 = (int8x16_t *)&v206[8 * v202 - 16];
              v232 = (int8x16_t *)(v196 - 16);
              v233 = v228 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v108 = v232[-1];
                v107 = *v232;
                v231[-1] = v108;
                *v231 = v107;
                v231 -= 2;
                v232 -= 2;
                v233 -= 4;
              }
              while (v233);
              v196 = v230;
              if (v228 != (v228 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_621:
                do
                {
                  v234 = *((_QWORD *)v196 - 1);
                  v196 -= 8;
                  *((_QWORD *)v207 - 1) = v234;
                  v207 -= 8;
                }
                while (v196 != v200);
              }
              goto LABEL_250;
            }
            v206 = 0;
            v207 = (char *)(8 * v202);
            *(_QWORD *)(8 * v202) = v186;
            v197 = 8 * v202 + 8;
            v208 = v196 - v200;
            if (v196 != v200)
              goto LABEL_244;
LABEL_250:
            v479 = v207;
            v480 = (char *)v197;
            v481 = &v206[8 * v205];
            if (v200)
              operator delete(v200);
LABEL_252:
            v480 = (char *)v197;
            v190 = v187[2];
            if ((_DWORD)v190 == -1)
            {
LABEL_205:
              v192 = v187[4];
              if ((_DWORD)v192 == -1)
                goto LABEL_275;
              goto LABEL_206;
            }
LABEL_204:
            v191 = *(_QWORD *)&v487[8 * (v190 >> 6)];
            if ((v191 & (1 << v190)) != 0)
              goto LABEL_205;
            *(_QWORD *)&v487[8 * (v190 >> 6)] = v191 | (1 << v190);
            v198 = v480;
            if (v480 < v481)
            {
              *(_QWORD *)v480 = v190;
              v199 = (uint64_t)(v198 + 8);
              goto LABEL_263;
            }
            v209 = (char *)v479;
            v210 = v480 - (_BYTE *)v479;
            v211 = (v480 - (_BYTE *)v479) >> 3;
            v212 = v211 + 1;
            if ((unint64_t)(v211 + 1) >> 61)
              goto LABEL_606;
            v213 = v481 - (_BYTE *)v479;
            if ((v481 - (_BYTE *)v479) >> 2 > v212)
              v212 = v213 >> 2;
            if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF8)
              v214 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v214 = v212;
            if (v214)
            {
              if (v214 >> 61)
                goto LABEL_611;
              v215 = (char *)operator new(8 * v214);
              v216 = &v215[8 * v211];
              *(_QWORD *)v216 = v190;
              v199 = (uint64_t)(v216 + 8);
              v217 = v198 - v209;
              if (v198 == v209)
                goto LABEL_261;
LABEL_255:
              v235 = v217 - 8;
              if (v235 < 0x58)
                goto LABEL_622;
              if ((unint64_t)(v198 - v215 - v210) < 0x20)
                goto LABEL_622;
              v236 = (v235 >> 3) + 1;
              v237 = 8 * (v236 & 0x3FFFFFFFFFFFFFFCLL);
              v238 = &v198[-v237];
              v216 -= v237;
              v239 = (int8x16_t *)&v215[8 * v211 - 16];
              v240 = (int8x16_t *)(v198 - 16);
              v241 = v236 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v108 = v240[-1];
                v107 = *v240;
                v239[-1] = v108;
                *v239 = v107;
                v239 -= 2;
                v240 -= 2;
                v241 -= 4;
              }
              while (v241);
              v198 = v238;
              if (v236 != (v236 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_622:
                do
                {
                  v242 = *((_QWORD *)v198 - 1);
                  v198 -= 8;
                  *((_QWORD *)v216 - 1) = v242;
                  v216 -= 8;
                }
                while (v198 != v209);
              }
              goto LABEL_261;
            }
            v215 = 0;
            v216 = (char *)(8 * v211);
            *(_QWORD *)(8 * v211) = v190;
            v199 = 8 * v211 + 8;
            v217 = v198 - v209;
            if (v198 != v209)
              goto LABEL_255;
LABEL_261:
            v479 = v216;
            v480 = (char *)v199;
            v481 = &v215[8 * v214];
            if (v209)
              operator delete(v209);
LABEL_263:
            v480 = (char *)v199;
            v192 = v187[4];
            if ((_DWORD)v192 == -1)
              goto LABEL_275;
LABEL_206:
            v193 = *(_QWORD *)&v487[8 * (v192 >> 6)];
            if ((v193 & (1 << v192)) == 0)
            {
              *(_QWORD *)&v487[8 * (v192 >> 6)] = v193 | (1 << v192);
              v194 = v480;
              if (v480 < v481)
              {
                *(_QWORD *)v480 = v192;
                v195 = (uint64_t)(v194 + 8);
LABEL_274:
                v480 = (char *)v195;
                goto LABEL_275;
              }
              v218 = (char *)v479;
              v219 = v480 - (_BYTE *)v479;
              v220 = (v480 - (_BYTE *)v479) >> 3;
              v221 = v220 + 1;
              if ((unint64_t)(v220 + 1) >> 61)
                goto LABEL_606;
              v222 = v481 - (_BYTE *)v479;
              if ((v481 - (_BYTE *)v479) >> 2 > v221)
                v221 = v222 >> 2;
              if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFF8)
                v223 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v223 = v221;
              if (v223)
              {
                if (v223 >> 61)
                  goto LABEL_611;
                v224 = (char *)operator new(8 * v223);
                v225 = &v224[8 * v220];
                *(_QWORD *)v225 = v192;
                v195 = (uint64_t)(v225 + 8);
                v226 = v194 - v218;
                if (v194 == v218)
                  goto LABEL_272;
LABEL_266:
                v243 = v226 - 8;
                if (v243 < 0x58)
                  goto LABEL_623;
                if ((unint64_t)(v194 - &v224[v219]) < 0x20)
                  goto LABEL_623;
                v244 = (v243 >> 3) + 1;
                v245 = 8 * (v244 & 0x3FFFFFFFFFFFFFFCLL);
                v246 = &v194[-v245];
                v225 -= v245;
                v247 = (int8x16_t *)&v224[8 * v220 - 16];
                v248 = (int8x16_t *)(v194 - 16);
                v249 = v244 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v108 = v248[-1];
                  v107 = *v248;
                  v247[-1] = v108;
                  *v247 = v107;
                  v247 -= 2;
                  v248 -= 2;
                  v249 -= 4;
                }
                while (v249);
                v194 = v246;
                if (v244 != (v244 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_623:
                  do
                  {
                    v250 = *((_QWORD *)v194 - 1);
                    v194 -= 8;
                    *((_QWORD *)v225 - 1) = v250;
                    v225 -= 8;
                  }
                  while (v194 != v218);
                }
              }
              else
              {
                v224 = 0;
                v225 = (char *)(8 * v220);
                *(_QWORD *)(8 * v220) = v192;
                v195 = 8 * v220 + 8;
                v226 = v194 - v218;
                if (v194 != v218)
                  goto LABEL_266;
              }
LABEL_272:
              v479 = v225;
              v480 = (char *)v195;
              v481 = &v224[8 * v223];
              if (v218)
                operator delete(v218);
              goto LABEL_274;
            }
LABEL_275:
            v251 = v187[6];
            if ((_DWORD)v251 == -1)
              goto LABEL_161;
            v252 = *(_QWORD *)&v487[8 * (v251 >> 6)];
            if ((v252 & (1 << v251)) != 0)
              goto LABEL_161;
            *(_QWORD *)&v487[8 * (v251 >> 6)] = v252 | (1 << v251);
            v253 = v480;
            if (v480 >= v481)
            {
              v254 = (char *)v479;
              v255 = v480 - (_BYTE *)v479;
              v256 = (v480 - (_BYTE *)v479) >> 3;
              v257 = v256 + 1;
              if ((unint64_t)(v256 + 1) >> 61)
LABEL_606:
                sub_20E867F44();
              v258 = v481 - (_BYTE *)v479;
              if ((v481 - (_BYTE *)v479) >> 2 > v257)
                v257 = v258 >> 2;
              if ((unint64_t)v258 >= 0x7FFFFFFFFFFFFFF8)
                v259 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v259 = v257;
              if (v259)
              {
                if (v259 >> 61)
LABEL_611:
                  sub_20E877A38();
                v260 = (char *)operator new(8 * v259);
                v261 = &v260[8 * v256];
                *(_QWORD *)v261 = v251;
                v146 = (uint64_t)(v261 + 8);
                v262 = v253 - v254;
                if (v253 == v254)
                  goto LABEL_295;
LABEL_289:
                v263 = v262 - 8;
                if (v263 < 0x58)
                  goto LABEL_624;
                if ((unint64_t)(v253 - &v260[v255]) < 0x20)
                  goto LABEL_624;
                v264 = (v263 >> 3) + 1;
                v265 = 8 * (v264 & 0x3FFFFFFFFFFFFFFCLL);
                v266 = &v253[-v265];
                v261 -= v265;
                v267 = (int8x16_t *)&v260[8 * v256 - 16];
                v268 = (int8x16_t *)(v253 - 16);
                v269 = v264 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v108 = v268[-1];
                  v107 = *v268;
                  v267[-1] = v108;
                  *v267 = v107;
                  v267 -= 2;
                  v268 -= 2;
                  v269 -= 4;
                }
                while (v269);
                v253 = v266;
                if (v264 != (v264 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_624:
                  do
                  {
                    v270 = *((_QWORD *)v253 - 1);
                    v253 -= 8;
                    *((_QWORD *)v261 - 1) = v270;
                    v261 -= 8;
                  }
                  while (v253 != v254);
                }
              }
              else
              {
                v260 = 0;
                v261 = (char *)(8 * v256);
                *(_QWORD *)(8 * v256) = v251;
                v146 = 8 * v256 + 8;
                v262 = v253 - v254;
                if (v253 != v254)
                  goto LABEL_289;
              }
LABEL_295:
              v479 = v261;
              v480 = (char *)v146;
              v481 = &v260[8 * v259];
              if (v254)
                operator delete(v254);
              goto LABEL_160;
            }
            *(_QWORD *)v480 = v251;
            v146 = (uint64_t)(v253 + 8);
LABEL_160:
            v480 = (char *)v146;
LABEL_161:
            v110 = v480;
            if (v479 == v480)
              goto LABEL_130;
          }
          if (v173 >> 61)
            sub_20E877A38();
          v174 = operator new(8 * v173);
          v175 = &v174[8 * v170];
          *(_QWORD *)v175 = v147;
          v168 = (uint64_t)(v175 + 8);
          v176 = v167 - v169;
          if (v167 == v169)
            goto LABEL_199;
LABEL_193:
          v177 = v176 - 8;
          if (v177 < 0x58)
            goto LABEL_625;
          if ((unint64_t)(v169 - v174) < 0x20)
            goto LABEL_625;
          v178 = (v177 >> 3) + 1;
          v179 = 8 * (v178 & 0x3FFFFFFFFFFFFFFCLL);
          v180 = &v167[-v179];
          v175 -= v179;
          v181 = (int8x16_t *)&v174[8 * v170 - 16];
          v182 = (int8x16_t *)(v167 - 16);
          v183 = v178 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v108 = v182[-1];
            v107 = *v182;
            v181[-1] = v108;
            *v181 = v107;
            v181 -= 2;
            v182 -= 2;
            v183 -= 4;
          }
          while (v183);
          v167 = v180;
          if (v178 != (v178 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_625:
            do
            {
              v184 = *((_QWORD *)v167 - 1);
              v167 -= 8;
              *((_QWORD *)v175 - 1) = v184;
              v175 -= 8;
            }
            while (v167 != v169);
          }
          goto LABEL_199;
        }
      }
LABEL_130:
      if (*((_QWORD *)&v483 + 1))
      {
        v112 = (_QWORD *)v483;
        if ((_QWORD)v483)
        {
          do
          {
            v113 = (_QWORD *)*v112;
            operator delete(v112);
            v112 = v113;
          }
          while (v113);
        }
        *(_QWORD *)&v483 = 0;
        v114 = *((_QWORD *)&v482 + 1);
        if (*((_QWORD *)&v482 + 1))
        {
          v115 = 0;
          do
            *(_QWORD *)(v482 + 8 * v115++) = 0;
          while (v114 != v115);
        }
        *((_QWORD *)&v483 + 1) = 0;
      }
      v116 = v485;
      v117 = (char *)v486;
      if (v485 != (char *)v486)
      {
        do
        {
          v118 = (unsigned int *)((char *)v471 + 36 * *(_QWORD *)v116);
          v119 = v118[3];
          if (v119 != -1)
          {
            v120 = *((_DWORD *)v471 + 9 * *(_QWORD *)v116 + 7);
            if (v120 != -1)
            {
              v121 = (unsigned int *)((char *)v471 + 36 * v119);
              v122 = v121[7];
              if ((_DWORD)v122 != -1)
              {
                v123 = *((_DWORD *)v471 + 9 * v120 + 3);
                if (v123 != -1 && *((_DWORD *)v471 + 9 * v123) == (_DWORD)v122)
                {
                  v124 = *v118;
                  v125 = *v121;
                  v126 = *((unsigned int *)v471 + 9 * v120);
                  v127 = operator new(0x20uLL);
                  *v127 = v124;
                  v127[1] = v125;
                  v127[2] = v126;
                  v127[3] = v122;
                  *(_QWORD *)v473 = v124;
                  sub_20EDC9EA8((uint64_t)&v482, (unint64_t *)v473, v473);
                  *(_QWORD *)v473 = v127[1];
                  sub_20EDC9EA8((uint64_t)&v482, (unint64_t *)v473, v473);
                  *(_QWORD *)v473 = v127[2];
                  sub_20EDC9EA8((uint64_t)&v482, (unint64_t *)v473, v473);
                  *(_QWORD *)v473 = v127[3];
                  sub_20EDC9EA8((uint64_t)&v482, (unint64_t *)v473, v473);
                  operator delete(v127);
                }
              }
            }
          }
          v116 += 8;
        }
        while (v116 != v117);
        if (*((_QWORD *)&v483 + 1) >= 6uLL)
        {
          v128 = v485;
          v129 = (char *)v486;
          if (v485 != (char *)v486)
          {
            v130 = v493;
            do
            {
              v131 = *(_QWORD *)v128;
              v128 += 8;
              *(_QWORD *)((char *)v130 + ((v131 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v131;
            }
            while (v128 != v129);
          }
          v132 = *(float32x2_t *)v463;
          *(_DWORD *)&v473[8] = *(_DWORD *)(v463 + 8);
          *(float32x2_t *)v473 = v132;
          v133 = *(_QWORD *)(v463 + 12);
          *(_DWORD *)&v473[20] = *(_DWORD *)(v463 + 20);
          *(_QWORD *)&v473[12] = v133;
          LODWORD(v133) = *(_DWORD *)(v463 + 56);
          v134 = *(_OWORD *)(v463 + 40);
          v474 = *(_OWORD *)(v463 + 24);
          v475 = v134;
          v476 = v133;
          v135 = (_QWORD *)v483;
          __p[1] = 0;
          v478 = 0;
          __p[0] = 0;
          if ((_QWORD)v483)
          {
            v136 = 0;
            v137 = -1;
            v138 = (_QWORD *)v483;
            do
            {
              v138 = (_QWORD *)*v138;
              ++v137;
              v136 += 8;
            }
            while (v138);
            if (v137 >= 0x1FFFFFFFFFFFFFFFLL)
              sub_20E867F44();
            v139 = (char *)operator new(v136);
            v140 = 0;
            __p[0] = v139;
            v478 = &v139[v136];
            do
            {
              *(_QWORD *)&v139[v140] = v135[2];
              v135 = (_QWORD *)*v135;
              v140 += 8;
            }
            while (v135);
            __p[1] = &v139[v140];
          }
          v141 = v466;
          if ((unint64_t)v466 >= *((_QWORD *)&v466 + 1))
          {
            *(_QWORD *)&v466 = sub_20EF3E7F4((uint64_t *)&v465, (uint64_t)v473);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v142 = *(_QWORD *)v473;
            *(_DWORD *)(v466 + 8) = *(_DWORD *)&v473[8];
            *(_QWORD *)v141 = v142;
            v143 = *(_QWORD *)&v473[12];
            *(_DWORD *)(v141 + 20) = *(_DWORD *)&v473[20];
            *(_QWORD *)(v141 + 12) = v143;
            v144 = v474;
            v145 = v475;
            *(_DWORD *)(v141 + 56) = v476;
            *(_OWORD *)(v141 + 40) = v145;
            *(_OWORD *)(v141 + 24) = v144;
            *(_QWORD *)(v141 + 64) = 0;
            *(_QWORD *)(v141 + 72) = 0;
            *(_QWORD *)(v141 + 80) = 0;
            *(_OWORD *)(v141 + 64) = *(_OWORD *)__p;
            *(_QWORD *)(v141 + 80) = v478;
            *(_QWORD *)&v466 = v141 + 88;
          }
        }
      }
      if (v479)
      {
        v480 = (char *)v479;
        operator delete(v479);
      }
      v271 = (_QWORD *)v483;
      if ((_QWORD)v483)
      {
        do
        {
          v272 = (_QWORD *)*v271;
          operator delete(v271);
          v271 = v272;
        }
        while (v272);
      }
      v273 = (void *)v482;
      *(_QWORD *)&v482 = 0;
      if (v273)
        operator delete(v273);
      if (v485)
      {
        *(_QWORD *)&v486 = v485;
        operator delete(v485);
      }
      if (v487)
        operator delete(v487);
      v463 += 88;
      if (v463 == v460)
      {
        if (v490)
          operator delete(v490);
        if (v493)
          operator delete(v493);
        v274 = (char *)v467;
        if (v467)
        {
          v275 = (char *)v468;
          v276 = v467;
          if ((void *)v468 != v467)
          {
            do
            {
              v277 = (void *)*((_QWORD *)v275 - 3);
              if (v277)
              {
                *((_QWORD *)v275 - 2) = v277;
                operator delete(v277);
              }
              v275 -= 88;
            }
            while (v275 != v274);
            v276 = v467;
          }
          *(_QWORD *)&v468 = v274;
          operator delete(v276);
        }
        v467 = v465;
        v468 = v466;
        if (v465 == (void *)v466)
          goto LABEL_599;
LABEL_335:
        sub_20EF429EC((size_t)&v471, &v467, v454, v455, (uint64_t)a8);
        goto LABEL_336;
      }
    }
  }
  if (*(_BYTE *)(a1 + 8))
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetector.cpp", 283, (uint64_t)"", 0, (uint64_t)"Unknown inlier collection method.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  v494 = 0;
  v495 = 0;
  v493 = 0;
  v23 = (char *)v472 - (_BYTE *)v471;
  if (v472 == v471)
  {
    v32 = 0;
    v24 = 0;
  }
  else
  {
    if (v23 < 0)
      sub_20E867F44();
    v24 = 0x8E38E38E38E38E39 * (v23 >> 2);
    v25 = (v24 - 1) >> 6;
    v26 = 8 * (v25 + 1);
    v27 = operator new(v26);
    v28 = v27;
    v494 = v24;
    v495 = v25 + 1;
    v493 = v27;
    if (v24 < 0x41)
      v25 = 0;
    v27[v25] = 0;
    v29 = v24 >> 6;
    if (v24 >= 0x40)
      bzero(v27, 8 * (v24 >> 6));
    v30 = v24 & 0x3F;
    if ((v24 & 0x3F) != 0)
      v28[v29] &= ~(0xFFFFFFFFFFFFFFFFLL >> -v30);
    v31 = operator new(v26);
    v32 = v31;
    v31[v25] = 0;
    if (v24 >= 0x40)
      bzero(v31, 8 * (v24 >> 6));
    if ((v24 & 0x3F) != 0)
      v32[v29] &= ~(0xFFFFFFFFFFFFFFFFLL >> -v30);
    v20 = v463;
  }
  v485 = 0;
  v486 = 0uLL;
  v461 = v24;
  v459 = v20 + 8 * ((uint64_t)&v21[-v20] >> 3);
  v458 = v24 + 1;
  while (2)
  {
    if ((uint64_t)v24 >= 1)
    {
      v289 = 0;
      v290 = v458;
      v291 = v32;
      do
      {
        *v291 &= ~(1 << v289);
        v291 += v289 == 63;
        if (v289 == 63)
          v289 = 0;
        else
          ++v289;
        --v290;
      }
      while (v290 > 1);
    }
    v490 = 0;
    v491 = 0;
    v492 = 0;
    v482 = 0u;
    v483 = 0u;
    v484 = 1065353216;
    v292 = *(_QWORD **)(v20 + 64);
    v293 = *(_QWORD **)(v20 + 72);
    if (v292 == v293)
      goto LABEL_396;
    do
    {
      v294 = (char *)v471 + 36 * *v292;
      v296 = *((_DWORD *)v294 + 1);
      v295 = (unsigned int *)(v294 + 4);
      if (v296 != -1)
      {
        *(_QWORD *)v473 = 0;
        *(_QWORD *)v473 = *v295;
        *(_QWORD *)((char *)v32 + ((*(_QWORD *)v473 >> 3) & 0x1FFFFFF8)) |= 1 << v473[0];
        sub_20EDC9EA8((uint64_t)&v482, (unint64_t *)v473, v473);
      }
      if (v295[2] != -1)
      {
        *(_QWORD *)v473 = 0;
        *(_QWORD *)v473 = v295[2];
        *(_QWORD *)((char *)v32 + ((*(_QWORD *)v473 >> 3) & 0x1FFFFFF8)) |= 1 << v473[0];
        sub_20EDC9EA8((uint64_t)&v482, (unint64_t *)v473, v473);
      }
      if (v295[4] != -1)
      {
        *(_QWORD *)v473 = 0;
        *(_QWORD *)v473 = v295[4];
        *(_QWORD *)((char *)v32 + ((*(_QWORD *)v473 >> 3) & 0x1FFFFFF8)) |= 1 << v473[0];
        sub_20EDC9EA8((uint64_t)&v482, (unint64_t *)v473, v473);
      }
      if (v295[6] != -1)
      {
        *(_QWORD *)v473 = 0;
        *(_QWORD *)v473 = v295[6];
        *(_QWORD *)((char *)v32 + ((*(_QWORD *)v473 >> 3) & 0x1FFFFFF8)) |= 1 << v473[0];
        sub_20EDC9EA8((uint64_t)&v482, (unint64_t *)v473, v473);
      }
      ++v292;
    }
    while (v292 != v293);
    v297 = *((_QWORD *)&v482 + 1);
    if (!*((_QWORD *)&v482 + 1))
      goto LABEL_396;
    v298 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v482 + 8));
    v298.i16[0] = vaddlv_u8(v298);
    if (v298.u32[0] > 1uLL)
    {
      if (HIDWORD(*((_QWORD *)&v482 + 1)))
      {
        v299 = 0xFFFFFFFFLL;
        v300 = v482;
        v301 = *(__int128 ***)(v482 + 0x7FFFFFFF8);
        if (!v301)
        {
LABEL_396:
          v306 = (_QWORD *)v483;
          v488 = 0;
          v489 = 0;
          v487 = 0;
          v307 = 0;
          if (!(_QWORD)v483)
            goto LABEL_569;
          goto LABEL_397;
        }
      }
      else
      {
        v299 = ~(0xFFFFFFFF / DWORD2(v482) * DWORD2(v482));
        v300 = v482;
        v301 = *(__int128 ***)(v482 + 8 * v299);
        if (!v301)
          goto LABEL_396;
      }
    }
    else
    {
      v299 = (DWORD2(v482) - 1);
      v300 = v482;
      v301 = *(__int128 ***)(v482 + 8 * v299);
      if (!v301)
        goto LABEL_396;
    }
    v302 = *v301;
    if (!*v301)
      goto LABEL_396;
    v303 = *((_QWORD *)&v482 + 1) - 1;
    if (v298.u32[0] < 2uLL)
    {
      while (1)
      {
        v304 = *((_QWORD *)v302 + 1);
        if (v304 == 0xFFFFFFFFLL)
        {
          if (*((_QWORD *)v302 + 2) == 0xFFFFFFFFLL)
            goto LABEL_540;
        }
        else if ((v304 & v303) != v299)
        {
          goto LABEL_396;
        }
        v302 = *(__int128 **)v302;
        if (!v302)
          goto LABEL_396;
      }
    }
    while (1)
    {
      v305 = *((_QWORD *)v302 + 1);
      if (v305 == 0xFFFFFFFF)
        break;
      if (v305 >= *((_QWORD *)&v482 + 1))
        v305 %= *((_QWORD *)&v482 + 1);
      if (v305 != v299)
        goto LABEL_396;
LABEL_391:
      v302 = *(__int128 **)v302;
      if (!v302)
        goto LABEL_396;
    }
    if (*((_QWORD *)v302 + 2) != 0xFFFFFFFFLL)
      goto LABEL_391;
LABEL_540:
    if (v298.u32[0] > 1uLL)
    {
      if (HIDWORD(*((_QWORD *)&v482 + 1)))
        v427 = 0xFFFFFFFFLL;
      else
        v427 = ~(0xFFFFFFFF / DWORD2(v482) * DWORD2(v482));
    }
    else
    {
      v427 = (DWORD2(v482) - 1);
    }
    v428 = *(__int128 **)v302;
    v429 = *(__int128 **)(v300 + 8 * v427);
    do
    {
      v430 = v429;
      v429 = *(__int128 **)v429;
    }
    while (v429 != v302);
    if (v430 == &v483)
      goto LABEL_558;
    v431 = *((_QWORD *)v430 + 1);
    if (v298.u32[0] > 1uLL)
    {
      if (v431 >= *((_QWORD *)&v482 + 1))
        v431 %= *((_QWORD *)&v482 + 1);
    }
    else
    {
      v431 &= v303;
    }
    if (v431 == v427)
    {
LABEL_560:
      if (v428)
      {
        v432 = *((_QWORD *)v428 + 1);
        goto LABEL_562;
      }
    }
    else
    {
LABEL_558:
      if (!v428)
        goto LABEL_559;
      v432 = *((_QWORD *)v428 + 1);
      if (v298.u32[0] > 1uLL)
      {
        v433 = *((_QWORD *)v428 + 1);
        if (v432 >= *((_QWORD *)&v482 + 1))
          v433 = v432 % *((_QWORD *)&v482 + 1);
      }
      else
      {
        v433 = v432 & v303;
      }
      if (v433 != v427)
      {
LABEL_559:
        *(_QWORD *)(v300 + 8 * v427) = 0;
        v428 = *(__int128 **)v302;
        goto LABEL_560;
      }
LABEL_562:
      if (v298.u32[0] > 1uLL)
      {
        if (v432 >= v297)
          v432 %= v297;
      }
      else
      {
        v432 &= v303;
      }
      if (v432 != v427)
      {
        *(_QWORD *)(v482 + 8 * v432) = v430;
        v428 = *(__int128 **)v302;
      }
    }
    *(_QWORD *)v430 = v428;
    *(_QWORD *)v302 = 0;
    --*((_QWORD *)&v483 + 1);
    operator delete(v302);
    v306 = (_QWORD *)v483;
    v488 = 0;
    v489 = 0;
    v487 = 0;
    v307 = 0;
    if ((_QWORD)v483)
    {
LABEL_397:
      v308 = -1;
      v309 = v306;
      do
      {
        v309 = (_QWORD *)*v309;
        ++v308;
        v307 += 8;
      }
      while (v309);
      if (v308 >= 0x1FFFFFFFFFFFFFFFLL)
        sub_20E867F44();
      v310 = (char *)operator new((size_t)v307);
      v314 = 0;
      v487 = v310;
      v489 = &v307[(_QWORD)v310];
      do
      {
        *(_QWORD *)&v310[v314] = v306[2];
        v306 = (_QWORD *)*v306;
        v314 += 8;
      }
      while (v306);
      v307 = &v310[v314];
      v488 = &v310[v314];
      if (!v314)
        goto LABEL_569;
      v315 = v493;
      v464 = v20;
      while (1)
      {
        v317 = *((_QWORD *)v307 - 1);
        v307 -= 8;
        v316 = v317;
        v488 = v307;
        if (((*(_QWORD *)((char *)v315 + ((v317 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v317) & 1) != 0)
          goto LABEL_406;
        v312.i32[0] = *(_DWORD *)(v20 + 20);
        v311.i64[0] = *(_QWORD *)(v20 + 12);
        v311.i32[2] = v312.i32[0];
        v318 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v311.i8, *(float32x2_t *)v311.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v311.i8, 1), *(float32x2_t *)v311.i8, 1), v312, v312).f32[0];
        if (v318 != 1.0)
        {
          v319 = v318 + -1.0;
          if (v318 < 1.0)
            v319 = 1.0 - v318;
          if (v319 > 0.000001)
            v311 = (int8x16_t)vmulq_n_f32((float32x4_t)v311, 1.0 / sqrtf(v318));
        }
        v320 = (float32x2_t *)((char *)a5 + 12 * v316);
        v312.i32[0] = *(_DWORD *)(v20 + 8);
        v321 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v311.i8, 1);
        v322 = (float32x2_t)vextq_s8(v311, v311, 8uLL).u64[0];
        v323 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v20, *(float32x2_t *)v311.i8), v321, *(float32x2_t *)v20, 1), v322, v312);
        v312 = *v320;
        v313.i32[0] = v320[1].i32[0];
        if (fabsf(vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v320, *(float32x2_t *)v311.i8), v321, *v320, 1), v322, v313), v323).f32[0]) > 0.05)goto LABEL_406;
        v324 = v491;
        if ((unint64_t)v491 < v492)
        {
          *(_QWORD *)v491 = v316;
          v325 = (uint64_t)(v324 + 8);
          goto LABEL_435;
        }
        v326 = v490;
        v327 = (v491 - v490) >> 3;
        v328 = v327 + 1;
        if ((unint64_t)(v327 + 1) >> 61)
          sub_20E867F44();
        v329 = v492 - (_QWORD)v490;
        if ((uint64_t)(v492 - (_QWORD)v490) >> 2 > v328)
          v328 = v329 >> 2;
        v330 = (unint64_t)v329 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v328;
        if (v330)
          break;
        v331 = 0;
        v332 = (char *)(8 * v327);
        *(_QWORD *)(8 * v327) = v316;
        v325 = 8 * v327 + 8;
        v333 = v324 - v326;
        if (v324 != v326)
          goto LABEL_427;
LABEL_433:
        v490 = v332;
        v492 = (unint64_t)&v331[8 * v330];
        if (v326)
          operator delete(v326);
LABEL_435:
        v491 = (char *)v325;
        v342 = (char *)v471 + 36 * v316;
        v345 = *((_DWORD *)v342 + 1);
        v343 = (unsigned int *)(v342 + 4);
        v344 = v345;
        if (v345 == -1 || (v346 = v32[v344 >> 6], (v346 & (1 << v344)) != 0))
        {
          v347 = v343[2];
          if ((_DWORD)v347 == -1)
            goto LABEL_487;
        }
        else
        {
          v32[v344 >> 6] = v346 | (1 << v344);
          v351 = v488;
          if (v488 >= v489)
          {
            v352 = v487;
            v353 = (v488 - v487) >> 3;
            v354 = v353 + 1;
            if ((unint64_t)(v353 + 1) >> 61)
              goto LABEL_603;
            v355 = v489 - v487;
            if ((v489 - v487) >> 2 > v354)
              v354 = v355 >> 2;
            if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFF8)
              v356 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v356 = v354;
            if (v356)
            {
              if (v356 >> 61)
                goto LABEL_608;
              v357 = v356;
              v358 = operator new(8 * v356);
              v356 = v357;
              v359 = (unint64_t *)&v358[8 * v353];
              *v359 = v344;
              v360 = (uint64_t)(v359 + 1);
              v361 = v351 - v352;
              if (v351 != v352)
              {
LABEL_453:
                v362 = v361 - 8;
                if (v362 < 0x58)
                  goto LABEL_626;
                if ((unint64_t)(v352 - v358) < 0x20)
                  goto LABEL_626;
                v373 = (v362 >> 3) + 1;
                v374 = 8 * (v373 & 0x3FFFFFFFFFFFFFFCLL);
                v375 = &v351[-v374];
                v359 = (unint64_t *)((char *)v359 - v374);
                v376 = (int8x16_t *)&v358[8 * v353 - 16];
                v377 = (int8x16_t *)(v351 - 16);
                v378 = v373 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v311 = *v377;
                  v376[-1] = v377[-1];
                  *v376 = v311;
                  v376 -= 2;
                  v377 -= 2;
                  v378 -= 4;
                }
                while (v378);
                v351 = v375;
                if (v373 != (v373 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_626:
                  do
                  {
                    v379 = *((_QWORD *)v351 - 1);
                    v351 -= 8;
                    *--v359 = v379;
                  }
                  while (v351 != v352);
                }
              }
            }
            else
            {
              v358 = 0;
              v359 = (unint64_t *)(8 * v353);
              *(_QWORD *)(8 * v353) = v344;
              v360 = 8 * v353 + 8;
              v361 = v351 - v352;
              if (v351 != v352)
                goto LABEL_453;
            }
            v487 = (char *)v359;
            v488 = (char *)v360;
            v489 = &v358[8 * v356];
            if (v352)
              operator delete(v352);
            v488 = (char *)v360;
            v347 = v343[2];
            if ((_DWORD)v347 == -1)
              goto LABEL_487;
            goto LABEL_438;
          }
          *(_QWORD *)v488 = v344;
          v488 = v351 + 8;
          v347 = v343[2];
          if ((_DWORD)v347 == -1)
            goto LABEL_487;
        }
LABEL_438:
        v348 = v32[v347 >> 6];
        if ((v348 & (1 << v347)) == 0)
        {
          v32[v347 >> 6] = v348 | (1 << v347);
          v349 = v488;
          if (v488 < v489)
          {
            *(_QWORD *)v488 = v347;
            v350 = (uint64_t)(v349 + 8);
LABEL_486:
            v488 = (char *)v350;
            goto LABEL_487;
          }
          v363 = v487;
          v364 = (v488 - v487) >> 3;
          v365 = v364 + 1;
          if ((unint64_t)(v364 + 1) >> 61)
            goto LABEL_603;
          v366 = v489 - v487;
          if ((v489 - v487) >> 2 > v365)
            v365 = v366 >> 2;
          if ((unint64_t)v366 >= 0x7FFFFFFFFFFFFFF8)
            v367 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v367 = v365;
          if (v367)
          {
            if (v367 >> 61)
              goto LABEL_608;
            v368 = v367;
            v369 = operator new(8 * v367);
            v367 = v368;
            v370 = (unint64_t *)&v369[8 * v364];
            *v370 = v347;
            v350 = (uint64_t)(v370 + 1);
            v371 = v349 - v363;
            if (v349 != v363)
            {
LABEL_464:
              v372 = v371 - 8;
              if (v372 < 0x58)
                goto LABEL_627;
              if ((unint64_t)(v363 - v369) < 0x20)
                goto LABEL_627;
              v380 = (v372 >> 3) + 1;
              v381 = 8 * (v380 & 0x3FFFFFFFFFFFFFFCLL);
              v382 = &v349[-v381];
              v370 = (unint64_t *)((char *)v370 - v381);
              v383 = (int8x16_t *)&v369[8 * v364 - 16];
              v384 = (int8x16_t *)(v349 - 16);
              v385 = v380 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v311 = *v384;
                v383[-1] = v384[-1];
                *v383 = v311;
                v383 -= 2;
                v384 -= 2;
                v385 -= 4;
              }
              while (v385);
              v349 = v382;
              if (v380 != (v380 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_627:
                do
                {
                  v386 = *((_QWORD *)v349 - 1);
                  v349 -= 8;
                  *--v370 = v386;
                }
                while (v349 != v363);
              }
            }
          }
          else
          {
            v369 = 0;
            v370 = (unint64_t *)(8 * v364);
            *(_QWORD *)(8 * v364) = v347;
            v350 = 8 * v364 + 8;
            v371 = v349 - v363;
            if (v349 != v363)
              goto LABEL_464;
          }
          v487 = (char *)v370;
          v488 = (char *)v350;
          v489 = &v369[8 * v367];
          if (v363)
            operator delete(v363);
          goto LABEL_486;
        }
LABEL_487:
        v387 = v343[4];
        if ((_DWORD)v387 == -1 || (v388 = v32[v387 >> 6], (v388 & (1 << v387)) != 0))
        {
          v389 = v343[6];
          if ((_DWORD)v389 == -1)
            goto LABEL_404;
          goto LABEL_490;
        }
        v32[v387 >> 6] = v388 | (1 << v387);
        v391 = v488;
        if (v488 < v489)
        {
          *(_QWORD *)v488 = v387;
          v488 = v391 + 8;
          v389 = v343[6];
          if ((_DWORD)v389 == -1)
            goto LABEL_404;
          goto LABEL_490;
        }
        v393 = v487;
        v394 = (v488 - v487) >> 3;
        v395 = v394 + 1;
        if ((unint64_t)(v394 + 1) >> 61)
          goto LABEL_603;
        v396 = v489 - v487;
        if ((v489 - v487) >> 2 > v395)
          v395 = v396 >> 2;
        if ((unint64_t)v396 >= 0x7FFFFFFFFFFFFFF8)
          v397 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v397 = v395;
        if (!v397)
        {
          v399 = 0;
          v400 = (unint64_t *)(8 * v394);
          *(_QWORD *)(8 * v394) = v387;
          v401 = 8 * v394 + 8;
          v402 = v391 - v393;
          if (v391 == v393)
            goto LABEL_528;
LABEL_506:
          v403 = v402 - 8;
          if (v403 < 0x58)
            goto LABEL_628;
          if ((unint64_t)(v393 - v399) < 0x20)
            goto LABEL_628;
          v413 = (v403 >> 3) + 1;
          v414 = 8 * (v413 & 0x3FFFFFFFFFFFFFFCLL);
          v415 = &v391[-v414];
          v400 = (unint64_t *)((char *)v400 - v414);
          v416 = (int8x16_t *)&v399[8 * v394 - 16];
          v417 = (int8x16_t *)(v391 - 16);
          v418 = v413 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v311 = *v417;
            v416[-1] = v417[-1];
            *v416 = v311;
            v416 -= 2;
            v417 -= 2;
            v418 -= 4;
          }
          while (v418);
          v391 = v415;
          if (v413 != (v413 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_628:
            do
            {
              v419 = *((_QWORD *)v391 - 1);
              v391 -= 8;
              *--v400 = v419;
            }
            while (v391 != v393);
          }
          goto LABEL_528;
        }
        if (v397 >> 61)
          goto LABEL_608;
        v398 = v397;
        v399 = operator new(8 * v397);
        v397 = v398;
        v400 = (unint64_t *)&v399[8 * v394];
        *v400 = v387;
        v401 = (uint64_t)(v400 + 1);
        v402 = v391 - v393;
        if (v391 != v393)
          goto LABEL_506;
LABEL_528:
        v487 = (char *)v400;
        v488 = (char *)v401;
        v489 = &v399[8 * v397];
        if (v393)
          operator delete(v393);
        v488 = (char *)v401;
        v389 = v343[6];
        if ((_DWORD)v389 == -1)
        {
LABEL_404:
          v307 = v488;
          v20 = v464;
          goto LABEL_405;
        }
LABEL_490:
        v390 = v32[v389 >> 6];
        v307 = v488;
        if ((v390 & (1 << v389)) == 0)
        {
          v32[v389 >> 6] = v390 | (1 << v389);
          if (v307 < v489)
          {
            *(_QWORD *)v307 = v389;
            v392 = (uint64_t)(v307 + 8);
            v20 = v464;
LABEL_539:
            v488 = (char *)v392;
            v307 = (char *)v392;
            goto LABEL_405;
          }
          v404 = v487;
          v405 = (v307 - v487) >> 3;
          v406 = v405 + 1;
          if ((unint64_t)(v405 + 1) >> 61)
LABEL_603:
            sub_20E867F44();
          v407 = v489 - v487;
          if ((v489 - v487) >> 2 > v406)
            v406 = v407 >> 2;
          if ((unint64_t)v407 >= 0x7FFFFFFFFFFFFFF8)
            v408 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v408 = v406;
          if (v408)
          {
            if (v408 >> 61)
LABEL_608:
              sub_20E877A38();
            v409 = operator new(8 * v408);
            v410 = (unint64_t *)&v409[8 * v405];
            *v410 = v389;
            v392 = (uint64_t)(v410 + 1);
            v411 = v307 - v404;
            if (v307 != v404)
            {
LABEL_517:
              v412 = v411 - 8;
              v20 = v464;
              if (v412 < 0x58)
                goto LABEL_629;
              if ((unint64_t)(v404 - v409) < 0x20)
                goto LABEL_629;
              v420 = (v412 >> 3) + 1;
              v421 = 8 * (v420 & 0x3FFFFFFFFFFFFFFCLL);
              v422 = &v307[-v421];
              v410 = (unint64_t *)((char *)v410 - v421);
              v423 = (int8x16_t *)&v409[8 * v405 - 16];
              v424 = (int8x16_t *)(v307 - 16);
              v425 = v420 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v311 = *v424;
                v423[-1] = v424[-1];
                *v423 = v311;
                v423 -= 2;
                v424 -= 2;
                v425 -= 4;
              }
              while (v425);
              v307 = v422;
              if (v420 != (v420 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_629:
                do
                {
                  v426 = *((_QWORD *)v307 - 1);
                  v307 -= 8;
                  *--v410 = v426;
                }
                while (v307 != v404);
              }
              goto LABEL_537;
            }
          }
          else
          {
            v409 = 0;
            v410 = (unint64_t *)(8 * v405);
            *(_QWORD *)(8 * v405) = v389;
            v392 = 8 * v405 + 8;
            v411 = v307 - v404;
            if (v307 != v404)
              goto LABEL_517;
          }
          v20 = v464;
LABEL_537:
          v487 = (char *)v410;
          v488 = (char *)v392;
          v489 = &v409[8 * v408];
          if (v404)
            operator delete(v404);
          goto LABEL_539;
        }
        v20 = v464;
LABEL_405:
        v310 = v487;
LABEL_406:
        if (v310 == v307)
          goto LABEL_569;
      }
      if (v330 >> 61)
        sub_20E877A38();
      v331 = operator new(8 * v330);
      v332 = &v331[8 * v327];
      *(_QWORD *)v332 = v316;
      v325 = (uint64_t)(v332 + 8);
      v333 = v324 - v326;
      if (v324 == v326)
        goto LABEL_433;
LABEL_427:
      v334 = v333 - 8;
      if (v334 < 0x58)
        goto LABEL_630;
      if ((unint64_t)(v326 - v331) < 0x20)
        goto LABEL_630;
      v335 = (v334 >> 3) + 1;
      v336 = 8 * (v335 & 0x3FFFFFFFFFFFFFFCLL);
      v337 = &v324[-v336];
      v332 -= v336;
      v338 = (int8x16_t *)&v331[8 * v327 - 16];
      v339 = (int8x16_t *)(v324 - 16);
      v340 = v335 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v311 = *v339;
        v338[-1] = v339[-1];
        *v338 = v311;
        v338 -= 2;
        v339 -= 2;
        v340 -= 4;
      }
      while (v340);
      v324 = v337;
      if (v335 != (v335 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_630:
        do
        {
          v341 = *((_QWORD *)v324 - 1);
          v324 -= 8;
          *((_QWORD *)v332 - 1) = v341;
          v332 -= 8;
        }
        while (v324 != v326);
      }
      goto LABEL_433;
    }
LABEL_569:
    v435 = v490;
    v434 = v491;
    v24 = v461;
    if ((unint64_t)(v491 - v490) >= 0x30)
    {
      if (v490 != v491)
      {
        v436 = v493;
        v437 = v490;
        do
        {
          v438 = *(_QWORD *)v437;
          v437 += 8;
          *(_QWORD *)((char *)v436 + ((v438 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v438;
        }
        while (v437 != v434);
      }
      v439 = *(float32x2_t *)v20;
      *(_DWORD *)&v473[8] = *(_DWORD *)(v20 + 8);
      *(float32x2_t *)v473 = v439;
      v440 = *(_QWORD *)(v20 + 12);
      *(_DWORD *)&v473[20] = *(_DWORD *)(v20 + 20);
      *(_QWORD *)&v473[12] = v440;
      LODWORD(v440) = *(_DWORD *)(v20 + 56);
      v441 = *(_OWORD *)(v20 + 40);
      v474 = *(_OWORD *)(v20 + 24);
      v475 = v441;
      v476 = v440;
      __p[0] = v435;
      __p[1] = v434;
      v478 = (char *)v492;
      v490 = 0;
      v491 = 0;
      v492 = 0;
      v442 = v486;
      if ((unint64_t)v486 >= *((_QWORD *)&v486 + 1))
      {
        *(_QWORD *)&v486 = sub_20EF3E7F4((uint64_t *)&v485, (uint64_t)v473);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        v443 = *(_QWORD *)v473;
        *(_DWORD *)(v486 + 8) = *(_DWORD *)&v473[8];
        *(_QWORD *)v442 = v443;
        v444 = *(_QWORD *)&v473[12];
        *(_DWORD *)(v442 + 20) = *(_DWORD *)&v473[20];
        *(_QWORD *)(v442 + 12) = v444;
        v445 = v474;
        v446 = v475;
        *(_DWORD *)(v442 + 56) = v476;
        *(_OWORD *)(v442 + 40) = v446;
        *(_OWORD *)(v442 + 24) = v445;
        *(_QWORD *)(v442 + 64) = 0;
        *(_QWORD *)(v442 + 72) = 0;
        *(_QWORD *)(v442 + 80) = 0;
        *(_OWORD *)(v442 + 64) = *(_OWORD *)__p;
        *(_QWORD *)(v442 + 80) = v478;
        *(_QWORD *)&v486 = v442 + 88;
      }
      v307 = v487;
    }
    if (v307)
    {
      v488 = v307;
      operator delete(v307);
    }
    v447 = (_QWORD *)v483;
    if ((_QWORD)v483)
    {
      do
      {
        v448 = (_QWORD *)*v447;
        operator delete(v447);
        v447 = v448;
      }
      while (v448);
    }
    v449 = (void *)v482;
    *(_QWORD *)&v482 = 0;
    if (v449)
      operator delete(v449);
    if (v490)
      operator delete(v490);
    v20 += 88;
    if (v20 != v459)
      continue;
    break;
  }
  if (v32)
    operator delete(v32);
  if (v493)
    operator delete(v493);
  v450 = (char *)v467;
  if (v467)
  {
    v451 = (char *)v468;
    v452 = v467;
    if ((void *)v468 != v467)
    {
      do
      {
        v453 = (void *)*((_QWORD *)v451 - 3);
        if (v453)
        {
          *((_QWORD *)v451 - 2) = v453;
          operator delete(v453);
        }
        v451 -= 88;
      }
      while (v451 != v450);
      v452 = v467;
    }
    *(_QWORD *)&v468 = v450;
    operator delete(v452);
  }
  v467 = v485;
  v468 = v486;
  if (v485 != (char *)v486)
    goto LABEL_335;
LABEL_599:
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  v283 = (char *)v467;
  if (!v467)
    goto LABEL_344;
LABEL_337:
  v284 = (char *)v468;
  v285 = v283;
  if ((char *)v468 != v283)
  {
    do
    {
      v286 = (void *)*((_QWORD *)v284 - 3);
      if (v286)
      {
        *((_QWORD *)v284 - 2) = v286;
        operator delete(v286);
      }
      v284 -= 88;
    }
    while (v284 != v283);
    v285 = v467;
  }
  *(_QWORD *)&v468 = v283;
  operator delete(v285);
LABEL_344:
  v21 = v469;
  if (v469)
  {
LABEL_345:
    for (i = (char *)v470; i != v21; i -= 88)
    {
      v288 = (void *)*((_QWORD *)i - 3);
      if (v288)
      {
        *((_QWORD *)i - 2) = v288;
        operator delete(v288);
      }
    }
    *(_QWORD *)&v470 = v21;
    operator delete(v21);
  }
LABEL_351:
  if (v471)
  {
    v472 = (unsigned int *)v471;
    operator delete(v471);
  }
}

void sub_20EF3E49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  uint64_t v47;
  void *v49;

  v49 = *(void **)(v47 - 128);
  if (v49)
    operator delete(v49);
  sub_20EF3E784(&a24);
  sub_20EF3E784(&a27);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20EF3E65C()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x20EF3E5A4);
  JUMPOUT(0x20EF3E5A8);
}

void sub_20EF3E67C()
{
  void *v0;
  uint64_t v1;
  void *v2;

  sub_20E8C25A8(v1 - 240);
  v2 = *(void **)(v1 - 152);
  if (v2)
  {
    *(_QWORD *)(v1 - 144) = v2;
    operator delete(v2);
    sub_20EF3E784((void **)(v1 - 200));
    if (v0)
    {
      operator delete(v0);
      if (*(_QWORD *)(v1 - 128))
        JUMPOUT(0x20EF3E61CLL);
      JUMPOUT(0x20EF3E620);
    }
    JUMPOUT(0x20EF3E614);
  }
  JUMPOUT(0x20EF3E608);
}

void sub_20EF3E69C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 200))
    JUMPOUT(0x20EF3E54CLL);
  JUMPOUT(0x20EF3E52CLL);
}

void sub_20EF3E6AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (!a21)
    JUMPOUT(0x20EF3E5A8);
  JUMPOUT(0x20EF3E568);
}

void sub_20EF3E6C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  uint64_t v47;

  if (__p)
  {
    operator delete(__p);
    if (!*(_QWORD *)(v47 - 224))
      JUMPOUT(0x20EF3E518);
    JUMPOUT(0x20EF3E508);
  }
  JUMPOUT(0x20EF3E500);
}

void sub_20EF3E6D8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 176))
    JUMPOUT(0x20EF3E6E4);
  JUMPOUT(0x20EF3E5F8);
}

void sub_20EF3E700()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 200))
    JUMPOUT(0x20EF3E54CLL);
  JUMPOUT(0x20EF3E52CLL);
}

void sub_20EF3E710()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 224))
    JUMPOUT(0x20EF3E518);
  JUMPOUT(0x20EF3E508);
}

void sub_20EF3E720(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  void *v46;

  operator delete(v46);
  if (a46)
    JUMPOUT(0x20EF3E734);
  JUMPOUT(0x20EF3E500);
}

void sub_20EF3E748()
{
  uint64_t v0;

  sub_20E8C25A8(v0 - 240);
  if (*(_QWORD *)(v0 - 152))
    JUMPOUT(0x20EF3E75CLL);
  JUMPOUT(0x20EF3E608);
}

void **sub_20EF3E784(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 88;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EF3E7F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v13;
  uint64_t v14;

  v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_20E867F44();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v5 = 0x2E8BA2E8BA2E8BALL;
  else
    v5 = v4;
  if (v5 > 0x2E8BA2E8BA2E8BALL)
    sub_20E877A38();
  v7 = 88 * v5;
  v13 = operator new(88 * v5);
  v14 = (uint64_t)v13 + 88 * v3;
  *(_QWORD *)v14 = *(_QWORD *)a2;
  *(_DWORD *)(v14 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v14 + 12) = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(v14 + 20) = *(_DWORD *)(a2 + 20);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(v14 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(v14 + 72) = 0;
  *(_QWORD *)(v14 + 80) = 0;
  *(_OWORD *)(v14 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(v14 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  sub_20EF3EA08((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v14, v14);
  v8 = (char *)*a1;
  v9 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v14 + 88;
  a1[2] = (uint64_t)v13 + v7;
  while (v9 != v8)
  {
    v11 = (void *)*((_QWORD *)v9 - 3);
    if (v11)
    {
      *((_QWORD *)v9 - 2) = v11;
      operator delete(v11);
    }
    v9 -= 88;
  }
  if (v8)
    operator delete(v8);
  return v14 + 88;
}

void sub_20EF3E988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EF3E99C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF3E99C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 88;
        *(_QWORD *)(a1 + 16) = v2 - 88;
        v5 = *(void **)(v2 - 24);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 88;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EF3EA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;

  v7 = a7;
  v21 = a6;
  v22 = a7;
  if (a3 != a5)
  {
    v9 = a3;
    do
    {
      v11 = *(_QWORD *)(v9 - 88);
      v9 -= 88;
      *(_DWORD *)(v7 - 80) = *(_DWORD *)(v9 + 8);
      *(_QWORD *)(v7 - 88) = v11;
      v12 = *(_QWORD *)(v9 + 12);
      *(_DWORD *)(v7 - 68) = *(_DWORD *)(v9 + 20);
      *(_QWORD *)(v7 - 76) = v12;
      v13 = *(_OWORD *)(v9 + 24);
      v14 = *(_OWORD *)(v9 + 40);
      LODWORD(v12) = *(_DWORD *)(v9 + 56);
      *(_QWORD *)(v7 - 24) = 0;
      v15 = v7 - 24;
      *(_DWORD *)(v7 - 32) = v12;
      *(_OWORD *)(v7 - 48) = v14;
      *(_OWORD *)(v7 - 64) = v13;
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      v17 = *(_BYTE **)(v9 + 64);
      v16 = *(_BYTE **)(v9 + 72);
      v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0)
          sub_20E867F44();
        v19 = (char *)operator new(v16 - v17);
        *(_QWORD *)(v7 - 24) = v19;
        *(_QWORD *)(v7 - 16) = v19;
        v10 = &v19[8 * (v18 >> 3)];
        *(_QWORD *)(v7 - 8) = v10;
        memcpy(v19, v17, v18);
        *(_QWORD *)(v7 - 16) = v10;
      }
      v7 = v22 - 88;
      v22 -= 88;
    }
    while (v9 != a5);
    return v21;
  }
  return a6;
}

void sub_20EF3EB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 - 16) = v12;
    operator delete(v12);
  }
  sub_20EF3EB44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF3EB44(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 + 64);
      if (v5)
      {
        *(_QWORD *)(v3 + 72) = v5;
        operator delete(v5);
      }
      v3 += 88;
    }
  }
  return a1;
}

void ***sub_20EF3EBA4@<X0>(void ***result@<X0>, float32x2_t *a2@<X1>, float32x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  float32x2_t v5;
  float32x2_t v6;
  void ***v7;
  float32x2_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  float32x2_t v15;
  void **v16;

  v5 = a3[2];
  v6 = a3[3];
  v13 = 0uLL;
  v14 = 0;
  if (result)
  {
    v7 = result;
    if ((unint64_t)result >> 61)
      sub_20E969238();
    *(_QWORD *)&v13 = operator new(8 * (_QWORD)result);
    *((_QWORD *)&v13 + 1) = v13;
    v14 = v13 + 8 * (_QWORD)v7;
    v16 = (void **)&v13;
    v10 = 12 * (_QWORD)v7;
    do
    {
      v9.i32[0] = a2[1].i32[0];
      v9.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*a2, *a2), (float32x2_t)vdup_lane_s32((int32x2_t)*a2, 1), *a2, 1), v9, v9).f32[0]);
      v15 = vadd_f32(v6, vdiv_f32(vmul_f32(v5, *a2), (float32x2_t)vdup_lane_s32((int32x2_t)v9, 0)));
      result = sub_20EEE8140(&v16, &v15);
      a2 = (float32x2_t *)((char *)a2 + 12);
      v10 -= 12;
    }
    while (v10);
    v11 = v13;
    v12 = v14;
  }
  else
  {
    v12 = 0;
    v11 = 0uLL;
  }
  *(_OWORD *)a4 = v11;
  *(_QWORD *)(a4 + 16) = v12;
  return result;
}

void sub_20EF3EC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EF3ECAC(unsigned int **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, float a5@<S0>, int32x4_t _Q1@<Q1>, __n128 a7@<Q2>, int32x4_t a8@<Q3>, int8x16_t a9@<Q6>)
{
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  float32x4_t v12;
  int8x16_t v13;
  __int128 v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  size_t v34;
  unint64_t *v35;
  float32x4_t v36;
  unint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  __int32 v40;
  __int32 v41;
  unint64_t *v42;
  float32x4_t v43;
  __int32 v44;
  __int32 v45;
  unsigned __int32 v46;
  unsigned __int32 v47;
  float32x2_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x2_t v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int32x4_t v59;
  int8x16_t v60;
  int64x2_t v61;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  __int128 v73;
  float32x2_t v74;
  float32x4_t v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  int8x16_t v84;
  float v85;
  float v86;
  int8x16_t v87;
  int8x16_t v88;
  float v89;
  float v91;
  float32x4_t v92;
  unsigned int v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float32x4_t v98;
  float32x4_t v99;
  int32x4_t v100;
  int8x16_t v101;
  int32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x16_t v107;
  int32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float32x4_t v113;
  int32x2_t v114;
  int32x2_t v115;
  float v116;
  int32x2_t v117;
  uint64_t v118;
  float v119;
  _BYTE *v120;
  int32x4_t v121;
  uint64_t v122;
  uint64_t v123;
  int32x4_t v124;
  int32x4_t v125;
  float32x2_t v126;
  float v127;
  int32x4_t v128;
  float v129;
  unsigned int v130;
  float v131;
  int32x4_t v132;
  float v133;
  __int32 v134;
  uint64_t *v135;
  int8x16_t v136;
  float32x2_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float v141;
  int v142;
  unsigned int v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float32x4_t v149;
  float v150;
  float v151;
  float32x4_t v152;
  float v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  float32x4_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  float32x2_t v165;
  float32x2_t v166;
  float32x2_t v167;
  int32x2_t v168;
  int8x16_t v169;
  float v170;
  int32x2_t v171;
  uint64_t v172;
  float v173;
  _BYTE *v174;
  int32x4_t v175;
  float32x4_t v176;
  int8x16_t v177;
  float32x2_t v178;
  float32x4_t v179;
  int8x16_t v180;
  float32x2_t v181;
  float32x2_t v182;
  float32x2_t v183;
  int32x2_t v184;
  int32x2_t v185;
  float v186;
  int32x2_t v187;
  uint64_t v188;
  float v189;
  _BYTE *v190;
  int32x4_t v191;
  float v192;
  float v193;
  __int8 *v194;
  float32x4_t v195;
  char v196;
  float v197;
  int8x16_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  float32x4_t v204;
  float32x4_t v205;
  int8x16_t v206;
  float32x4_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  float32x4_t v211;
  float32x2_t v212;
  float32x4_t v213;
  int8x16_t v214;
  float32x2_t v215;
  float32x2_t v216;
  float32x2_t v217;
  float v218;
  int32x2_t v219;
  uint64_t v220;
  float v221;
  _BYTE *v222;
  float v223;
  float32x4_t v224;
  int8x16_t v225;
  float32x2_t v226;
  float32x2_t v227;
  float32x2_t v228;
  float32x2_t v229;
  float32x2_t v230;
  float32x2_t v231;
  float32x2_t v232;
  int32x2_t v233;
  int32x2_t v234;
  float v235;
  int32x2_t v236;
  uint64_t v237;
  float v238;
  float *v239;
  _BYTE *v240;
  int32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  float32x2_t v251;
  float32x2_t v252;
  float32x2_t v253;
  float32x2_t v254;
  int32x2_t v255;
  int32x2_t v256;
  int32x2_t v257;
  uint64_t v258;
  float v259;
  _BYTE *v260;
  float v261;
  float32x4_t v262;
  int8x16_t v263;
  float32x2_t v264;
  float32x4_t v265;
  float32x2_t v266;
  float32x2_t v267;
  float32x2_t v268;
  float32x2_t v269;
  float32x2_t v270;
  float32x4_t v271;
  float32x2_t v272;
  int32x2_t v273;
  int32x2_t v274;
  float v275;
  int32x2_t v276;
  uint64_t v277;
  float v278;
  float *v279;
  _BYTE *v280;
  int32x4_t v281;
  float32x4_t v282;
  int8x16_t v283;
  int8x16_t v284;
  float v285;
  __int128 v287;
  int8x16_t v288;
  float32x4_t v289;
  int8x16_t v290;
  float32x2_t v291;
  float32x4_t v292;
  float32x4_t v293;
  int32x4_t v294;
  int8x16_t v295;
  int8x16_t v296;
  int32x4_t v298;
  int8x16_t v299;
  __n128 v300;
  __int128 v301;
  int32x4_t v302;
  int8x16_t v303;
  __n128 v304;
  __int128 v305;
  int32x4_t v306;
  int8x16_t v307;
  __n128 v308;
  __int128 v309;
  int32x4_t v310;
  int8x16_t v311;
  __n128 v312;
  __int128 v313;
  int32x4_t v314;
  int8x16_t v315;
  int32x4_t v316;
  __int128 v317;
  int32x4_t v318;
  int8x16_t v319;
  int32x4_t v320;
  __int128 v321;
  int32x4_t v322;
  int8x16_t v323;
  int32x4_t v324;
  __int128 v325;
  int32x4_t v326;
  int8x16_t v327;
  int32x4_t v328;
  __int128 v329;
  int32x4_t v330;
  int8x16_t v331;
  int8x16_t v332;
  __int128 v333;
  uint64_t v334;
  __int32 v335;
  uint64_t v336;
  __int32 v337;
  _BYTE v338[32];
  __int32 v339;
  void *__p[2];
  uint64_t v341;
  char v342;
  float v343;
  float v344;
  float v345;
  int32x4_t v346;
  __n128 v347;
  int v348;
  int32x2_t v349;
  float v350;
  _BYTE v351[32];
  __int32 v352;

  v285 = *(float *)_Q1.i32;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v16 = *a1;
  v15 = a1[1];
  if (*a1 != v15)
  {
    while (1)
    {
      v20 = v16[3];
      if (v20 != -1)
      {
        v21 = v16[7];
        if (v21 != -1)
          break;
      }
      v31 = 0;
LABEL_126:
      if (v31)
        operator delete(v31);
      v16 += 9;
      if (v16 == v15)
        return;
    }
    v22 = *a1;
    v23 = &(*a1)[9 * v20];
    v24 = v23[7];
    if ((_DWORD)v24 == -1 || (v25 = v22[9 * v21 + 3], v25 == -1) || v22[9 * v25] != (_DWORD)v24)
    {
      v31 = 0;
      v32 = 0;
    }
    else
    {
      v26 = v15;
      v27 = v16;
      v28 = *v16;
      v29 = *v23;
      v30 = v22[9 * v21];
      v31 = (char *)operator new(0x20uLL);
      v32 = v31 + 32;
      *(_QWORD *)v31 = v28;
      *((_QWORD *)v31 + 1) = v29;
      *((_QWORD *)v31 + 2) = v30;
      *((_QWORD *)v31 + 3) = v24;
      v15 = v26;
      v16 = v27;
    }
    if (v32 - v31 != 32)
      goto LABEL_126;
    v33 = v31;
    if (v31 == v32)
      goto LABEL_125;
    v34 = (v32 - v31) >> 3;
    v35 = (unint64_t *)v31;
    *(_QWORD *)v351 = v31;
    *(_QWORD *)&v351[8] = a3;
    v36 = 0uLL;
    *(_QWORD *)&v351[16] = a2;
    do
    {
      v37 = *v35;
      if (a2 <= *v35)
LABEL_129:
        sub_21023D290((unint64_t *)&v351[16], v37);
      v38 = a3 + 12 * v37;
      _Q1.i64[0] = *(_QWORD *)v38;
      _Q1.i32[2] = *(_DWORD *)(v38 + 8);
      v36 = vaddq_f32(v36, (float32x4_t)_Q1);
      *(_QWORD *)v351 = ++v35;
    }
    while (v35 != (unint64_t *)v32);
    *(float *)a8.i32 = (float)(unint64_t)-((v31 - v32) >> 3);
    v43 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.i8, 0);
    v39 = (int8x16_t)vdivq_f32(v36, v43);
    v36.i32[0] = 0;
    v40 = 0;
    v41 = 0;
    v42 = (unint64_t *)v31;
    *(_QWORD *)v351 = v31;
    *(_QWORD *)&v351[8] = a3;
    *(_QWORD *)&v351[16] = a2;
    v43.i32[0] = 0;
    v44 = 0;
    v45 = 0;
    a7.n128_u32[0] = 0;
    v46 = 0;
    v47 = 0;
    do
    {
      v37 = *v42;
      if (a2 <= *v42)
        goto LABEL_129;
      v48 = (float32x2_t *)(a3 + 12 * v37);
      v9.i32[0] = v48[1].i32[0];
      *(float32x2_t *)v10.i8 = *v48;
      v10.i32[2] = v9.i32[0];
      *(float32x2_t *)v49.f32 = vmul_n_f32(*(float32x2_t *)v10.i8, *(float *)v10.i32);
      *(float32x2_t *)&v49.u32[2] = vmul_f32(*(float32x2_t *)v9.i8, *v48);
      *(float32x2_t *)v50.f32 = vmul_lane_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8, 1);
      *(float32x2_t *)&v50.u32[2] = vmul_lane_f32(*(float32x2_t *)v9.i8, *v48, 1);
      *(float32x2_t *)v9.i8 = vmul_n_f32(*v48, *(float *)v9.i32);
      v10 = (int8x16_t)vdupq_laneq_s32((int32x4_t)vmulq_f32((float32x4_t)v10, (float32x4_t)v10), 2);
      v9.i32[2] = v10.i32[0];
      v36.i32[1] = v40;
      v36.i32[2] = v41;
      v43.i32[1] = v44;
      v43.i32[2] = v45;
      a7.n128_u32[1] = v46;
      a7.n128_u32[2] = v47;
      v36 = vaddq_f32(v36, v49);
      v41 = v36.i32[2];
      v40 = v36.i32[1];
      v43 = vaddq_f32(v43, v50);
      v45 = v43.i32[2];
      v44 = v43.i32[1];
      a7 = (__n128)vaddq_f32((float32x4_t)a7, (float32x4_t)v9);
      v47 = a7.n128_u32[2];
      v46 = a7.n128_u32[1];
      *(_QWORD *)v351 = ++v42;
    }
    while (v42 != (unint64_t *)v32);
    *(float *)a8.i32 = sqrtf(*(float *)a8.i32);
    v51 = (int8x16_t)vmulq_n_f32((float32x4_t)v39, *(float *)a8.i32);
    v52 = vmul_lane_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)v39.i8, 1);
    *(float32x2_t *)v53.f32 = vmul_n_f32(*(float32x2_t *)v51.i8, *(float *)v51.i32);
    v54 = (float32x2_t)vextq_s8(v51, v51, 8uLL).u64[0];
    *(float32x2_t *)&v53.u32[2] = vmul_f32(v54, *(float32x2_t *)v51.i8);
    *(float32x2_t *)v55.f32 = vmul_n_f32(*(float32x2_t *)v51.i8, v52.f32[0]);
    *(float32x2_t *)a9.i8 = vmul_f32(v54, v52);
    v55.i64[1] = a9.i64[0];
    v56 = vmul_f32(*(float32x2_t *)a8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL));
    *(float32x2_t *)v51.i8 = vmul_n_f32(*(float32x2_t *)v51.i8, v56.f32[0]);
    v51.u64[1] = (unint64_t)vmul_f32(v54, v56);
    v57 = vsubq_f32(v36, v53);
    v58 = (int8x16_t)vsubq_f32(v43, v55);
    v13.i32[0] = v58.i32[1];
    v59 = (int32x4_t)vsubq_f32((float32x4_t)a7, (float32x4_t)v51);
    v11.i32[0] = v59.i32[2];
    LODWORD(v14) = v59.i32[1];
    v60 = (int8x16_t)v57;
    v60.i32[3] = v58.i32[0];
    _Q1 = (int32x4_t)vextq_s8(v58, v58, 0xCuLL);
    v61 = (int64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)v59, 8uLL);
    if (*(float *)&v59.i32[1] == 0.0 && *(float *)v58.i32 == 0.0 && *(float *)&v61.i32[2] == 0.0)
    {
      v343 = v57.f32[0];
      v344 = *(float *)&v58.i32[1];
      v345 = *(float *)&v59.i32[2];
      v346.i32[3] = 0;
      *(unint64_t *)((char *)v347.n128_u64 + 4) = 0;
      v347.n128_u32[3] = 0;
      *(uint64_t *)((char *)v346.i64 + 4) = 0;
      v346.i32[0] = 1065353216;
      v347.n128_u32[0] = 1065353216;
      v348 = 1065353216;
      if (*(float *)&v58.i32[1] >= v57.f32[0])
      {
        a8.i64[0] = 0x3F80000000000000;
        a7.n128_u64[0] = 0;
        _Q1.i32[0] = v57.i32[0];
        if (*(float *)&v58.i32[1] <= *(float *)&v59.i32[2])
        {
LABEL_25:
          v11.i32[0] = v13.i32[0];
          if (*(float *)_Q1.i32 <= *(float *)v13.i32)
            goto LABEL_89;
LABEL_32:
          a8.i32[0] = vdupq_laneq_s32(v346, 3).u32[0];
          *(uint64_t *)((char *)a8.i64 + 4) = v347.n128_u64[0];
          a8.i32[3] = v346.i32[0];
          v343 = *(float *)v11.i32;
          v344 = *(float *)_Q1.i32;
          a7.n128_u64[1] = vextq_s8((int8x16_t)v347, (int8x16_t)v347, 8uLL).u64[0];
          v346 = a8;
          v347 = a7;
          v89 = v345;
          _NF = v345 < 0.0;
          if (v345 != 0.0)
            goto LABEL_90;
          goto LABEL_125;
        }
      }
      else
      {
        __asm { FMOV            V1.4S, #1.0 }
        _Q1.i32[0] = *(_DWORD *)((unint64_t)&v346 | 0xC);
        v343 = *(float *)&v58.i32[1];
        a7 = v347;
        v65 = 0;
        v66 = 0;
        v67 = 0;
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = 0;
        a8.i64[1] = v347.n128_i64[1];
        *(uint64_t *)((char *)_Q1.i64 + 4) = v347.n128_u64[0];
        v344 = v57.f32[0];
        v346 = _Q1;
        v347 = (__n128)a8;
        a8.i64[0] = 1065353216;
        _Q1.i32[0] = v58.i32[1];
        v13.i32[0] = v57.i32[0];
        if (v57.f32[0] <= *(float *)&v59.i32[2])
          goto LABEL_25;
      }
      v344 = *(float *)&v59.i32[2];
      v345 = *(float *)v13.i32;
      v60.i32[0] = v348;
      v87 = (int8x16_t)v346;
      a7 = (__n128)vextq_s8(v87, v87, 8uLL);
      a7.n128_u64[0] = (unint64_t)vext_s8(*(int8x8_t *)v346.i8, (int8x8_t)a7.n128_u64[0], 4uLL);
      v87.i32[3] = v347.n128_i32[2];
      v88.i64[0] = vextq_s8((int8x16_t)v347, v60, 0xCuLL).u64[0];
      v88.i64[1] = a8.i64[0];
      v348 = 0;
      v346 = (int32x4_t)v87;
      v347 = (__n128)v88;
      if (*(float *)_Q1.i32 <= *(float *)&v59.i32[2])
        goto LABEL_89;
      goto LABEL_32;
    }
    *((_QWORD *)&v73 + 1) = v61.i64[0];
    *(_QWORD *)&v73 = v60.i64[1];
    v74 = (float32x2_t)(v73 >> 32);
    v75.i64[0] = vdupq_laneq_s64(v61, 1).u64[0];
    v75.i64[1] = vdupq_laneq_s32(v59, 2).u32[0];
    *(float *)v61.i32 = *(float *)&v59.i32[2] + (float)(*(float *)&v58.i32[1] + v57.f32[0]);
    v76 = (float)((float)((float)((float)(*(float *)&v59.i32[2] * v57.f32[0])
                                + (float)((float)(*(float *)&v58.i32[1] * *(float *)&v59.i32[2])
                                        + (float)(*(float *)&v58.i32[1] * v57.f32[0])))
                        - (float)(*(float *)v58.i32 * *(float *)v58.i32))
                - (float)(*(float *)&v61.i32[2] * *(float *)&v61.i32[2]))
        - (float)(*(float *)&v59.i32[1] * *(float *)&v59.i32[1]);
    v77 = (float)(*(float *)v61.i32 * *(float *)v61.i32) + (float)(v76 * -3.0);
    v78 = (float)((float)((float)((float)((float)(*(float *)&v59.i32[2] * *(float *)v58.i32) * *(float *)v58.i32)
                                + (float)((float)((float)(*(float *)&v58.i32[1] * *(float *)&v61.i32[2])
                                                * *(float *)&v61.i32[2])
                                        + (float)((float)(*(float *)&v59.i32[1]
                                                        * (float)(*(float *)&v59.i32[1] * v57.f32[0]))
                                                - (float)(*(float *)&v59.i32[2]
                                                        * (float)(*(float *)&v58.i32[1] * v57.f32[0])))))
                        - (float)(*(float *)&v59.i32[1]
                                * (float)((float)(*(float *)v58.i32 + *(float *)v58.i32) * *(float *)&v61.i32[2])))
                * 27.0)
        - (float)(*(float *)v61.i32
                * (float)((float)((float)(*(float *)v61.i32 * *(float *)v61.i32)
                                + (float)(*(float *)v61.i32 * *(float *)v61.i32))
                        - (float)(v76 * 9.0)));
    *(float *)_Q1.i32 = v77 / 9.0;
    *(float *)v60.i32 = v78 / 54.0;
    v79 = *(float *)v61.i32 / -3.0;
    v12.i32[0] = v75.i32[2];
    if ((float)((float)((float)(v78 * v78) * 729.0) + (float)((float)(v77 * (float)(v77 * v77)) * -2916.0)) >= 0.0)
    {
      if (*(float *)_Q1.i32 < 0.0)
        *(float *)_Q1.i32 = 0.0;
      *(float *)_Q1.i32 = sqrtf(*(float *)_Q1.i32);
      v84.i64[0] = 0x8000000080000000;
      v84.i64[1] = 0x8000000080000000;
      _Q1.i64[0] = vbslq_s8(v84, (int8x16_t)_Q1, v60).u64[0];
      *(float *)v84.i32 = *(float *)_Q1.i32 - v79;
      v343 = (float)(*(float *)_Q1.i32 * -2.0) - v79;
      v344 = *(float *)_Q1.i32 - v79;
      v345 = *(float *)_Q1.i32 - v79;
      v91 = *(float *)_Q1.i32 - v79;
      if (v343 > (float)(*(float *)_Q1.i32 - v79))
      {
        v343 = *(float *)_Q1.i32 - v79;
        v345 = (float)(*(float *)_Q1.i32 * -2.0) - v79;
        v91 = v345;
      }
      v92.i32[0] = v74.i32[1];
      _Q1.i32[0] = v75.i32[1];
      v93 = 2 * (v91 > *(float *)v84.i32);
LABEL_52:
      v84.i32[0] = v75.i32[0];
      a9.i32[0] = *(__int32 *)(&v343 + v93);
      v98.i64[0] = __PAIR64__(v74.u32[0], v57.u32[0]);
      v98.i64[1] = __PAIR64__(v74.u32[0], v75.u32[0]);
      v99.i64[0] = __PAIR64__(_Q1.u32[0], v92.u32[0]);
      v99.i64[1] = __PAIR64__(_Q1.u32[0], v75.u32[0]);
      v100 = (int32x4_t)vsubq_f32(v98, (float32x4_t)a9.u32[0]);
      v101 = (int8x16_t)vsubq_f32(v99, (float32x4_t)a9.u32[0]);
      v102 = (int32x4_t)vextq_s8((int8x16_t)v100, v101, 0xCuLL);
      v103 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v100, (int8x16_t)v100, 0xCuLL), (int8x16_t)v100, 8uLL);
      v104 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v102, v102), (int8x16_t)v102, 0xCuLL);
      v105 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v100, v100), (int8x16_t)v100, 0xCuLL);
      v106 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v102, (int8x16_t)v102, 0xCuLL), (int8x16_t)v102, 8uLL);
      v107 = (int8x16_t)vmlsq_f32(vmulq_f32(v103, v104), v105, v106);
      v108 = (int32x4_t)vextq_s8(v101, (int8x16_t)vsubq_f32(v12, (float32x4_t)a9), 8uLL);
      v109 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v108, v108), (int8x16_t)v108, 0xCuLL);
      v110 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v108, (int8x16_t)v108, 0xCuLL), (int8x16_t)v108, 8uLL);
      v111 = (int8x16_t)vsubq_f32(vmulq_f32(v106, v109), vmulq_f32(v104, v110));
      v112 = (int8x16_t)vsubq_f32(vmulq_f32(v105, v110), vmulq_f32(v103, v109));
      v103.i64[0] = vextq_s8(v107, v107, 8uLL).u64[0];
      v107.i32[3] = v111.i32[0];
      v352 = v112.i32[2];
      v113 = (float32x4_t)vextq_s8(vextq_s8(v111, v111, 0xCuLL), v112, 8uLL);
      *(int8x16_t *)v351 = v107;
      *(float32x4_t *)&v351[16] = v113;
      v114 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v107.i8, *(float32x2_t *)v107.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v107.i8, 1), *(float32x2_t *)v107.i8, 1), *(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
      v105.i64[0] = vextq_s8(v111, v111, 8uLL).u64[0];
      v115 = (int32x2_t)vmla_f32(vmla_lane_f32((float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v111.i8), 0), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v111.i8, 1), *(float32x2_t *)v111.i8, 1), *(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
      v105.i64[0] = vextq_s8(v112, v112, 8uLL).u64[0];
      LODWORD(v116) = vmla_f32(vmla_lane_f32((float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v112.i8, *(float32x2_t *)v112.i8), 0), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v112.i8, 1), *(float32x2_t *)v112.i8, 1), *(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32).u32[0];
      v117 = vzip1_s32(v114, v115);
      v350 = v116;
      v349 = v117;
      v118 = *(float *)v115.i32 > *(float *)v114.i32;
      if (*(float *)v115.i32 <= *(float *)v114.i32)
        v119 = *(float *)v114.i32;
      else
        v119 = *(float *)v115.i32;
      if (v116 > v119)
        v118 = 2;
      *(float *)v117.i32 = sqrtf(*(float *)((unint64_t)&v349 | (4 * v118)));
      v120 = &v351[12 * v118];
      v113.i64[0] = *(_QWORD *)v120;
      v113.i32[2] = *((_DWORD *)v120 + 2);
      v128 = (int32x4_t)vdivq_f32(v113, (float32x4_t)vdupq_lane_s32(v117, 0));
      v121.i64[0] = v57.i64[0];
      v122 = 3 * v93;
      v121.i64[1] = __PAIR64__(v58.u32[0], v57.u32[2]);
      v13.i32[1] = v58.i32[2];
      v13.i64[1] = __PAIR64__(v14, v59.u32[0]);
      v330 = v121;
      v331 = v13;
      v332 = v11;
      v330.i32[v122] = v128.i32[0];
      v328 = (int32x4_t)v332;
      v329 = v333;
      v326 = v330;
      v327 = v331;
      v326.i32[((_BYTE)v122 + 1) & 0xF] = v128.i32[1];
      v125 = v328;
      v126.i32[1] = DWORD1(v329);
      v123 = v122 + 2;
      v324 = v328;
      v325 = v329;
      v322 = v326;
      v323 = v327;
      v322.i32[(v122 + 2) & 0xF] = v128.i32[2];
      v124.i32[3] = v322.i32[3];
      v125.i32[0] = v324.i32[0];
      v348 = v324.i32[0];
      v346 = v322;
      v347 = (__n128)v323;
      v126.i32[0] = v346.i32[3 * v93];
      v127 = *(float *)&v346.i32[3 * v93 + 1];
      v128.i32[0] = v346.i32[3 * v93 + 2];
      if (fabsf(v126.f32[0]) <= fabsf(v127))
      {
        v126.f32[0] = v127 * v127;
        v133 = sqrtf(vmla_f32(v126, *(float32x2_t *)v128.i8, *(float32x2_t *)v128.i8).f32[0]);
        *(float *)&v134 = *(float *)v128.i32 / v133;
        v131 = (float)-v127 / v133;
        v132.i32[0] = 0;
        v132.i32[3] = 0;
        v132.i32[1] = v134;
      }
      else
      {
        v129 = sqrtf((float)(v126.f32[0] * v126.f32[0]) + (float)(*(float *)v128.i32 * *(float *)v128.i32));
        *(float *)&v130 = (float)-*(float *)v128.i32 / v129;
        v131 = v126.f32[0] / v129;
        v132.i32[3] = 0;
        v132.i64[0] = v130;
      }
      *(float *)&v132.i32[2] = v131;
      v135 = (uint64_t *)((char *)v346.i64 + 12 * v93);
      v128.i64[0] = *v135;
      v128.i32[2] = v346.i32[v123];
      v9 = vextq_s8((int8x16_t)vuzp1q_s32(v128, v128), (int8x16_t)v128, 0xCuLL);
      v136 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v132, v132), (int8x16_t)v132, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v128, (int8x16_t)v128, 0xCuLL), (int8x16_t)v128, 8uLL)), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v132, (int8x16_t)v132, 0xCuLL), (int8x16_t)v132, 8uLL), (float32x4_t)v9);
      v74.i32[1] = v92.i32[0];
      v75.i32[1] = _Q1.i32[0];
      v137 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(v74.u32[0], v57.u32[0]), *(float *)v132.i32), v74, *(float32x2_t *)v132.i8, 1), *(float32x2_t *)v75.f32, (float32x4_t)v132, 2);
      v138 = (float32x2_t)vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
      *(float32x2_t *)v9.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v132.i8), *(float32x2_t *)_Q1.i8, *(float32x2_t *)v132.i8, 1), v138, *(float32x2_t *)v12.f32);
      v139 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(v74.u32[0], v57.u32[0]), *(float *)v136.i32), v74, *(float32x2_t *)v136.i8, 1), *(float32x2_t *)v75.f32, (float32x4_t)v136, 2);
      v10 = vextq_s8(v136, v136, 8uLL);
      v140 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v136.i8), *(float32x2_t *)_Q1.i8, *(float32x2_t *)v136.i8, 1), *(float32x2_t *)v10.i8, *(float32x2_t *)v12.f32);
      LODWORD(v141) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v132.i8, v137), (float32x2_t)vdup_lane_s32((int32x2_t)v137, 1), *(float32x2_t *)v132.i8, 1), *(float32x2_t *)v9.i8, v138).u32[0];
      if (v93 > 1)
        v142 = -2;
      else
        v142 = 1;
      v143 = v142 + v93;
      v144 = *(&v343 + v143);
      *(int32x2_t *)v9.i8 = vdup_lane_s32((int32x2_t)v139, 1);
      LODWORD(v145) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v136.i8, v139), *(float32x2_t *)v9.i8, *(float32x2_t *)v136.i8, 1), v140, *(float32x2_t *)v10.i8).u32[0];
      v146 = vabds_f32(v141, v144);
      v147 = vabds_f32(v145, v144);
      if (v146 >= v147)
      {
        v148 = v141 - v144;
        v149 = (float32x4_t)v136;
        v136 = (int8x16_t)v132;
      }
      else
      {
        v148 = v145 - v144;
        v149 = (float32x4_t)v132;
        v146 = v147;
      }
      LODWORD(v150) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v132.i8, v139), *(float32x2_t *)v9.i8, *(float32x2_t *)v132.i8, 1), v140, v138).u32[0];
      v151 = fabsf(v150);
      if ((float)(v151 + v146) > 0.0)
      {
        if (v146 >= v151)
        {
          v152 = v149;
          v149 = (float32x4_t)v136;
          v153 = v148;
          v148 = v150;
        }
        else
        {
          v152 = (float32x4_t)v136;
          v153 = v150;
        }
        v192 = v148 / v153;
        v193 = 1.0 / sqrtf((float)(v192 * v192) + 1.0);
        v136 = (int8x16_t)vsubq_f32(vmulq_n_f32(v149, v192 * v193), vmulq_n_f32(v152, v193));
      }
      v318 = v322;
      v319 = v323;
      v320 = v125;
      v318.i32[(3 * (_BYTE)v143) & 0xF] = v136.i32[0];
      v316 = v320;
      v317 = v321;
      v314 = v318;
      v315 = v319;
      v314.i32[(3 * (_BYTE)v143 + 1) & 0xF] = v136.i32[1];
      v312 = (__n128)v316;
      v313 = v317;
      v310 = v314;
      v311 = v315;
      v310.i32[(3 * (_BYTE)v143 + 2) & 0xF] = v136.i32[2];
      v346 = v310;
      v347 = (__n128)v311;
      v348 = v312.n128_u32[0];
      v124.i64[0] = *v135;
      v194 = &v346.i8[12 * v143];
      v125.i64[0] = *(_QWORD *)v194;
      v124.i32[2] = v346.i32[v123];
      v125.i32[2] = *((_DWORD *)v194 + 2);
      a9 = (int8x16_t)vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v124, (int8x16_t)v124, 0xCuLL), (int8x16_t)v124, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v125, v125), (int8x16_t)v125, 0xCuLL));
      v195 = vsubq_f32((float32x4_t)a9, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v124, v124), (int8x16_t)v124, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v125, (int8x16_t)v125, 0xCuLL), (int8x16_t)v125, 8uLL)));
      if (v93)
        v196 = 3 * v93 - 3;
      else
        v196 = 6;
      v308 = v312;
      v309 = v313;
      v306 = v310;
      v307 = v311;
      v306.i32[v196 & 0xF] = v195.i32[0];
      v304 = v308;
      v305 = v309;
      v302 = v306;
      v303 = v307;
      v302.i32[(v196 + 1) & 0xF] = v195.i32[1];
      a7 = v304;
      a8.i32[1] = DWORD1(v305);
      v300 = v304;
      v301 = v305;
      v298 = v302;
      v299 = v303;
      v298.i32[(v196 + 2) & 0xF] = v195.i32[2];
      _Q1.i32[3] = v299.i32[3];
      v348 = v300.n128_u32[0];
      v346 = v298;
      v347 = (__n128)v299;
LABEL_89:
      v89 = v345;
      _NF = v345 < 0.0;
      if (v345 != 0.0)
      {
LABEL_90:
        v197 = 0.0 - v89;
        if (!_NF)
          v197 = v89;
        if (v197 > 0.000001 && (float)(v344 / v89) >= a5 && (float)(v343 / v344) <= v285)
        {
          a7.n128_u32[0] = 0;
          v198 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)vdupq_laneq_s32(v346, 2), (float32x4_t)a7), 0), (int8x16_t)vnegq_f32((float32x4_t)v346), (int8x16_t)v346);
          v335 = v39.i32[2];
          v337 = v198.i32[2];
          v336 = v198.i64[0];
          *(_DWORD *)&v338[8] = v57.i32[2];
          v334 = v39.i64[0];
          *(_QWORD *)v338 = v57.i64[0];
          *(_DWORD *)&v338[20] = v58.i32[2];
          v339 = v59.i32[2];
          *(_QWORD *)&v338[12] = v58.i64[0];
          *(_QWORD *)&v338[24] = v59.i64[0];
          __p[1] = 0;
          v341 = 0;
          __p[0] = 0;
          v342 = 1;
          sub_20E86811C(__p, v33, v32, v34);
          v199 = a4[1];
          if (v199 >= a4[2])
          {
            v203 = sub_20EF3E7F4(a4, (uint64_t)&v334);
          }
          else
          {
            v200 = v334;
            *(_DWORD *)(v199 + 8) = v335;
            *(_QWORD *)v199 = v200;
            v201 = *(_QWORD *)((unint64_t)&v334 | 0xC);
            *(_DWORD *)(v199 + 20) = *(_DWORD *)(((unint64_t)&v334 | 0xC) + 8);
            *(_QWORD *)(v199 + 12) = v201;
            v202 = *(_OWORD *)v338;
            _Q1 = *(int32x4_t *)&v338[16];
            *(_DWORD *)(v199 + 56) = v339;
            *(int32x4_t *)(v199 + 40) = _Q1;
            *(_OWORD *)(v199 + 24) = v202;
            *(_QWORD *)(v199 + 64) = 0;
            *(_QWORD *)(v199 + 72) = 0;
            *(_QWORD *)(v199 + 80) = 0;
            *(_OWORD *)(v199 + 64) = *(_OWORD *)__p;
            *(_QWORD *)(v199 + 80) = v341;
            __p[0] = 0;
            __p[1] = 0;
            v341 = 0;
            v203 = v199 + 88;
          }
          a4[1] = v203;
          if (v342)
          {
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
        }
      }
LABEL_125:
      v31 = v33;
      goto LABEL_126;
    }
    v287 = v14;
    v288 = v13;
    v289 = v12;
    v290 = v11;
    v291 = v74;
    v292 = v75;
    v293 = v57;
    v294 = v59;
    v295 = v58;
    v296 = v39;
    v80 = sqrtf(*(float *)_Q1.i32);
    v81 = acosf(fmaxf(fminf(*(float *)v60.i32 / (float)(*(float *)_Q1.i32 * v80), 1.0), -1.0));
    v82 = cosf(v81 / 3.0);
    *(float *)_Q1.i32 = sqrtf(fmaxf(1.0 - (float)(v82 * v82), 0.0)) * 1.7321;
    *(float *)v84.i32 = v82 + *(float *)_Q1.i32;
    v83 = v82 - *(float *)_Q1.i32;
    *(float *)_Q1.i32 = (float)((float)(v80 * -2.0) * v82) - v79;
    *(float *)v84.i32 = (float)(v80 * *(float *)v84.i32) - v79;
    v343 = *(float *)_Q1.i32;
    v344 = *(float *)v84.i32;
    v85 = (float)(v80 * v83) - v79;
    v345 = v85;
    if (*(float *)_Q1.i32 <= *(float *)v84.i32)
    {
      v86 = *(float *)_Q1.i32;
      _Q1.i32[0] = v84.i32[0];
    }
    else
    {
      v343 = *(float *)v84.i32;
      v344 = *(float *)_Q1.i32;
      v86 = *(float *)v84.i32;
    }
    v58 = v295;
    v39 = v296;
    v57 = v293;
    v59 = v294;
    v74.i32[0] = v291.i32[0];
    v75.i32[0] = v292.i32[0];
    v12 = v289;
    v11 = v290;
    v14 = v287;
    v13 = v288;
    if (*(float *)_Q1.i32 <= v85)
    {
      v94 = v85;
      v85 = *(float *)_Q1.i32;
      if (v86 <= *(float *)_Q1.i32)
        goto LABEL_42;
    }
    else
    {
      v344 = v85;
      v345 = *(float *)_Q1.i32;
      v94 = *(float *)_Q1.i32;
      if (v86 <= v85)
      {
LABEL_42:
        v95 = v86;
        v86 = v85;
        goto LABEL_45;
      }
    }
    v343 = v85;
    v344 = v86;
    v95 = v85;
LABEL_45:
    v92.i32[0] = v291.i32[1];
    _Q1.i32[0] = v292.i32[1];
    v96 = v94 - v86;
    v93 = (float)(v94 - v95) < (float)(v94 - v86);
    if ((float)(v94 - v95) < (float)(v94 - v86))
      v96 = v94 - v95;
    if ((float)(v86 - v95) < v96)
    {
      v93 = 2;
      v96 = v86 - v95;
    }
    v97 = 0.0001;
    if (v94 > 1.0)
      v97 = v94 * 0.0001;
    if (v96 > v97)
    {
      v154.i32[1] = 0;
      v154.i64[1] = 0;
      if (v93 == 1)
      {
        v154.f32[0] = v86;
        v204.i64[0] = 0;
        v204.i64[1] = LODWORD(v86);
        v205.i64[0] = __PAIR64__(v291.u32[0], v293.u32[0]);
        v205.i64[1] = __PAIR64__(v291.u32[1], v292.u32[0]);
        v207.i64[0] = __PAIR64__(v291.u32[0], v293.u32[0]);
        v206 = (int8x16_t)vsubq_f32(v205, v154);
        v207.i64[1] = __PAIR64__(v291.u32[0], v292.u32[0]);
        v208 = (int8x16_t)vsubq_f32(v207, v154);
        v92.i32[1] = v292.i32[1];
        v92.i32[2] = v291.i32[1];
        v92.i32[3] = v291.i32[1];
        v209 = (int8x16_t)vsubq_f32(v92, v154);
        v210 = (int8x16_t)vsubq_f32(v292, v204);
        v211.i64[0] = 0;
        v211.i64[1] = LODWORD(v94);
        v10 = (int8x16_t)vsubq_f32(v205, (float32x4_t)LODWORD(v94));
        v212 = (float32x2_t)vsubq_f32(v92, (float32x4_t)LODWORD(v94)).u64[0];
        v213 = vsubq_f32(v207, (float32x4_t)LODWORD(v94));
        v214 = (int8x16_t)vsubq_f32(v292, v211);
        v11 = vextq_s8(v208, v209, 0xCuLL);
        v12 = (float32x4_t)vextq_s8(v10, v10, 8uLL);
        *(float32x2_t *)v211.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v206.i8, *(float *)v10.i32), *(float32x2_t *)v11.i8, *(float32x2_t *)v10.i8, 1), *(float32x2_t *)v210.i8, (float32x4_t)v10, 2);
        v215 = (float32x2_t)vextq_s8(v206, v206, 8uLL).u64[0];
        v216 = (float32x2_t)vextq_s8(v210, v210, 8uLL).u64[0];
        *(float32x2_t *)v10.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v215, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v209.i8, 1), *(float32x2_t *)v12.f32, v216);
        *(float32x2_t *)v12.f32 = vmla_lane_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v206.i8, v213, 3), *(float32x2_t *)v11.i8, v212.f32[0]), *(float32x2_t *)v210.i8, v212, 1);
        *(float32x2_t *)v213.f32 = vmla_lane_f32(vmla_lane_f32(vmul_laneq_f32(v215, v213, 3), v212, *(float32x2_t *)v209.i8, 1), v216, v212, 1);
        v217 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v206.i8, *(float *)v214.i32), *(float32x2_t *)v11.i8, *(float32x2_t *)v214.i8, 1), *(float32x2_t *)v210.i8, (float32x4_t)v214, 2);
        *(float32x2_t *)v11.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v215, *(float32x2_t *)v214.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v214.i8, 1), *(float32x2_t *)v209.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v214, v214, 8uLL), v216);
        *(_QWORD *)v351 = v211.i64[0];
        *(_DWORD *)&v351[8] = v10.i32[0];
        *(_DWORD *)&v351[20] = v213.i32[0];
        *(_QWORD *)&v351[12] = v12.i64[0];
        v352 = v11.i32[0];
        *(float32x2_t *)&v351[24] = v217;
        *(float32x2_t *)v13.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v211.f32, 1), *(float32x2_t *)v211.f32, 1), *(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8);
        *(float32x2_t *)v10.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.f32, 1), *(float32x2_t *)v12.f32, 1), *(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
        LODWORD(v218) = vmla_f32(vmla_lane_f32(vmul_f32(v217, v217), (float32x2_t)vdup_lane_s32((int32x2_t)v217, 1), v217, 1), *(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8).u32[0];
        v219 = vzip1_s32(*(int32x2_t *)v13.i8, *(int32x2_t *)v10.i8);
        v350 = v218;
        v349 = v219;
        v220 = *(float *)v10.i32 > *(float *)v13.i32;
        if (*(float *)v10.i32 <= *(float *)v13.i32)
          v221 = *(float *)v13.i32;
        else
          v221 = *(float *)v10.i32;
        if (v218 > v221)
          v220 = 2;
        *(float *)v219.i32 = sqrtf(*(float *)((unint64_t)&v349 | (4 * v220)));
        v222 = &v351[12 * v220];
        v10.i64[0] = *(_QWORD *)v222;
        v10.i32[2] = *((_DWORD *)v222 + 2);
        v223 = v95;
        v224.i64[0] = 0;
        v224.i64[1] = LODWORD(v95);
        a7 = (__n128)vdivq_f32((float32x4_t)v10, (float32x4_t)vdupq_lane_s32(v219, 0));
        a9 = (int8x16_t)vsubq_f32(v205, (float32x4_t)LODWORD(v223));
        v225 = (int8x16_t)vsubq_f32(v92, (float32x4_t)LODWORD(v223));
        v9 = (int8x16_t)vsubq_f32(v292, v224);
        v226 = (float32x2_t)vextq_s8((int8x16_t)vsubq_f32(v207, (float32x4_t)LODWORD(v223)), v225, 0xCuLL).u64[0];
        v227 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a9.i8, *(float *)v206.i32), v226, *(float32x2_t *)v206.i8, 1), *(float32x2_t *)v9.i8, (float32x4_t)v206, 2);
        v224.i64[0] = vextq_s8(a9, a9, 8uLL).u64[0];
        v228 = (float32x2_t)vextq_s8(v9, v9, 8uLL).u64[0];
        v229 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v224.f32, *(float32x2_t *)v206.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v206.i8, 1), *(float32x2_t *)v225.i8, 1), v215, v228);
        v230 = vmla_lane_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)a9.i8, (float32x4_t)v208, 3), v226, *(float *)v209.i32), *(float32x2_t *)v9.i8, *(float32x2_t *)v209.i8, 1);
        v231 = vmla_lane_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)v224.f32, (float32x4_t)v208, 3), *(float32x2_t *)v209.i8, *(float32x2_t *)v225.i8, 1), v228, *(float32x2_t *)v209.i8, 1);
        *(float32x2_t *)a9.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a9.i8, *(float *)v210.i32), v226, *(float32x2_t *)v210.i8, 1), *(float32x2_t *)v9.i8, (float32x4_t)v210, 2);
        v232 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v224.f32, *(float32x2_t *)v210.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v210.i8, 1), *(float32x2_t *)v225.i8, 1), v216, v228);
        *(float32x2_t *)v351 = v227;
        *(_DWORD *)&v351[8] = v229.i32[0];
        *(_DWORD *)&v351[20] = v231.i32[0];
        *(float32x2_t *)&v351[12] = v230;
        v352 = v232.i32[0];
        *(_QWORD *)&v351[24] = a9.i64[0];
        v233 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v227, v227), (float32x2_t)vdup_lane_s32((int32x2_t)v227, 1), v227, 1), v229, v229);
        v234 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v230, v230), (float32x2_t)vdup_lane_s32((int32x2_t)v230, 1), v230, 1), v231, v231);
        LODWORD(v235) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)a9.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a9.i8, 1), *(float32x2_t *)a9.i8, 1), v232, v232).u32[0];
        v236 = vzip1_s32(v233, v234);
        v350 = v235;
        v349 = v236;
        v237 = *(float *)v234.i32 > *(float *)v233.i32;
        if (*(float *)v234.i32 <= *(float *)v233.i32)
          v238 = *(float *)v233.i32;
        else
          v238 = *(float *)v234.i32;
        if (v235 > v238)
          v237 = 2;
        v239 = (float *)((unint64_t)&v349 | (4 * v237));
        v240 = &v351[12 * v237];
        v210.i64[0] = *(_QWORD *)v240;
        v210.i32[2] = *((_DWORD *)v240 + 2);
        *(float *)v236.i32 = sqrtf(*v239);
        v241 = (int32x4_t)vdivq_f32((float32x4_t)v210, (float32x4_t)vdupq_lane_s32(v236, 0));
        _Q1 = (int32x4_t)vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v241, (int8x16_t)v241, 0xCuLL), (int8x16_t)v241, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL)), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v241, v241), (int8x16_t)v241, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL)));
        a8 = (int32x4_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 0xCuLL);
        a7.n128_u32[3] = _Q1.i32[0];
        v348 = v241.i32[2];
        v346 = (int32x4_t)a7;
        v347 = (__n128)vextq_s8((int8x16_t)a8, (int8x16_t)v241, 8uLL);
        v89 = v345;
        _NF = v345 < 0.0;
        if (v345 == 0.0)
          goto LABEL_125;
      }
      else if (v93)
      {
        v154.f32[0] = v86;
        v242.i64[0] = 0;
        v242.i64[1] = LODWORD(v86);
        v243.i64[0] = __PAIR64__(v291.u32[0], v293.u32[0]);
        v243.i64[1] = __PAIR64__(v291.u32[1], v292.u32[0]);
        v92.i32[1] = v292.i32[1];
        v10 = (int8x16_t)vsubq_f32(v243, v154);
        v92.i32[2] = v291.i32[1];
        v92.i32[3] = v291.i32[1];
        v244.i64[0] = __PAIR64__(v291.u32[0], v293.u32[0]);
        v244.i64[1] = __PAIR64__(v291.u32[0], v292.u32[0]);
        v245 = (int8x16_t)vsubq_f32(v92, v154);
        v246 = (int8x16_t)vsubq_f32(v292, v242);
        v242.i64[0] = 0;
        v242.i64[1] = LODWORD(v94);
        v247 = (int8x16_t)vsubq_f32(v243, (float32x4_t)LODWORD(v94));
        v248 = (int8x16_t)vsubq_f32(v92, (float32x4_t)LODWORD(v94));
        v249 = (int8x16_t)vsubq_f32((float32x4_t)v244, (float32x4_t)LODWORD(v94));
        v250 = (int8x16_t)vsubq_f32(v292, v242);
        v251 = (float32x2_t)vextq_s8(v244, v245, 0xCuLL).u64[0];
        a9 = vextq_s8(v247, v247, 8uLL);
        v252 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v10.i8, *(float *)v247.i32), v251, *(float32x2_t *)v247.i8, 1), *(float32x2_t *)v246.i8, (float32x4_t)v247, 2);
        v11 = vextq_s8(v10, v10, 8uLL);
        v253 = (float32x2_t)vextq_s8(v246, v246, 8uLL).u64[0];
        *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v247.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v247.i8, 1), *(float32x2_t *)v245.i8, 1), *(float32x2_t *)a9.i8, v253);
        *(float32x2_t *)v13.i8 = vmla_lane_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v10.i8, (float32x4_t)v249, 3), v251, *(float *)v248.i32), *(float32x2_t *)v246.i8, *(float32x2_t *)v248.i8, 1);
        *(float32x2_t *)&v14 = vmla_lane_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)v11.i8, (float32x4_t)v249, 3), *(float32x2_t *)v248.i8, *(float32x2_t *)v245.i8, 1), v253, *(float32x2_t *)v248.i8, 1);
        *(float32x2_t *)v10.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v10.i8, *(float *)v250.i32), v251, *(float32x2_t *)v250.i8, 1), *(float32x2_t *)v246.i8, (float32x4_t)v250, 2);
        v254 = (float32x2_t)vextq_s8(v250, v250, 8uLL).u64[0];
        *(float32x2_t *)v246.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v250.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v250.i8, 1), *(float32x2_t *)v245.i8, 1), v254, v253);
        *(float32x2_t *)v351 = v252;
        *(_DWORD *)&v351[8] = v12.i32[0];
        *(_DWORD *)&v351[20] = v14;
        *(_QWORD *)&v351[12] = v13.i64[0];
        v352 = v246.i32[0];
        *(_QWORD *)&v351[24] = v10.i64[0];
        v255 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v252, v252), (float32x2_t)vdup_lane_s32((int32x2_t)v252, 1), v252, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
        v256 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), *(float32x2_t *)v13.i8, 1), *(float32x2_t *)&v14, *(float32x2_t *)&v14);
        *(float32x2_t *)v11.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v10.i8, 1), *(float32x2_t *)v246.i8, *(float32x2_t *)v246.i8);
        v257 = vzip1_s32(v255, v256);
        v350 = *(float *)v11.i32;
        v349 = v257;
        v258 = *(float *)v256.i32 > *(float *)v255.i32;
        if (*(float *)v256.i32 <= *(float *)v255.i32)
          v259 = *(float *)v255.i32;
        else
          v259 = *(float *)v256.i32;
        if (*(float *)v11.i32 > v259)
          v258 = 2;
        *(float *)v257.i32 = sqrtf(*(float *)((unint64_t)&v349 | (4 * v258)));
        v260 = &v351[12 * v258];
        v10.i64[0] = *(_QWORD *)v260;
        v10.i32[2] = *((_DWORD *)v260 + 2);
        v261 = v95;
        v262.i64[0] = 0;
        v262.i64[1] = LODWORD(v95);
        a7 = (__n128)vdivq_f32((float32x4_t)v10, (float32x4_t)vdupq_lane_s32(v257, 0));
        v263 = (int8x16_t)vsubq_f32(v243, (float32x4_t)LODWORD(v261));
        v264 = (float32x2_t)vsubq_f32(v92, (float32x4_t)LODWORD(v261)).u64[0];
        v265 = vsubq_f32((float32x4_t)v244, (float32x4_t)LODWORD(v261));
        v9 = (int8x16_t)vsubq_f32(v292, v262);
        v266 = (float32x2_t)vextq_s8(v249, v248, 0xCuLL).u64[0];
        v267 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v247.i8, *(float *)v263.i32), v266, *(float32x2_t *)v263.i8, 1), *(float32x2_t *)v250.i8, (float32x4_t)v263, 2);
        *(float32x2_t *)v263.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)v263.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v263.i8, 1), *(float32x2_t *)v248.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v263, v263, 8uLL), v254);
        v268 = vmla_lane_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v247.i8, v265, 3), v266, v264.f32[0]), *(float32x2_t *)v250.i8, v264, 1);
        *(float32x2_t *)v265.f32 = vmla_lane_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a9.i8, v265, 3), v264, *(float32x2_t *)v248.i8, 1), v254, v264, 1);
        v269 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v247.i8, *(float *)v9.i32), v266, *(float32x2_t *)v9.i8, 1), *(float32x2_t *)v250.i8, (float32x4_t)v9, 2);
        v270 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)v9.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1), *(float32x2_t *)v248.i8, 1);
        v271 = (float32x4_t)vextq_s8(v9, v9, 8uLL);
        v272 = vmla_f32(v270, *(float32x2_t *)v271.f32, v254);
        *(float32x2_t *)v351 = v267;
        *(_DWORD *)&v351[8] = v263.i32[0];
        *(_DWORD *)&v351[20] = v265.i32[0];
        *(float32x2_t *)&v351[12] = v268;
        v352 = v272.i32[0];
        *(float32x2_t *)&v351[24] = v269;
        v273 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v267, v267), (float32x2_t)vdup_lane_s32((int32x2_t)v267, 1), v267, 1), *(float32x2_t *)v263.i8, *(float32x2_t *)v263.i8);
        v274 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(v268, v268), (float32x2_t)vdup_lane_s32((int32x2_t)v268, 1), v268, 1), *(float32x2_t *)v265.f32, *(float32x2_t *)v265.f32);
        LODWORD(v275) = vmla_f32(vmla_lane_f32(vmul_f32(v269, v269), (float32x2_t)vdup_lane_s32((int32x2_t)v269, 1), v269, 1), v272, v272).u32[0];
        v276 = vzip1_s32(v273, v274);
        v350 = v275;
        v349 = v276;
        v277 = *(float *)v274.i32 > *(float *)v273.i32;
        if (*(float *)v274.i32 <= *(float *)v273.i32)
          v278 = *(float *)v273.i32;
        else
          v278 = *(float *)v274.i32;
        if (v275 > v278)
          v277 = 2;
        v279 = (float *)((unint64_t)&v349 | (4 * v277));
        v280 = &v351[12 * v277];
        v271.i64[0] = *(_QWORD *)v280;
        v271.i32[2] = *((_DWORD *)v280 + 2);
        *(float *)v276.i32 = sqrtf(*v279);
        v281 = (int32x4_t)vdivq_f32(v271, (float32x4_t)vdupq_lane_s32(v276, 0));
        v282 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a7, (int8x16_t)a7, 0xCuLL), (int8x16_t)a7, 8uLL);
        a8 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), (int8x16_t)a7, 0xCuLL);
        a7.n128_u32[3] = v281.i32[0];
        v283 = vextq_s8((int8x16_t)v281, (int8x16_t)v281, 0xCuLL);
        _Q1 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v281, v281), (int8x16_t)v281, 0xCuLL), v282);
        v284 = (int8x16_t)vsubq_f32((float32x4_t)_Q1, vmulq_f32((float32x4_t)vextq_s8(v283, (int8x16_t)v281, 8uLL), (float32x4_t)a8));
        v348 = v284.i32[2];
        v346 = (int32x4_t)a7;
        v347 = (__n128)vextq_s8(v283, v284, 8uLL);
        v89 = v345;
        _NF = v345 < 0.0;
        if (v345 == 0.0)
          goto LABEL_125;
      }
      else
      {
        v154.f32[0] = v94;
        v155.i64[0] = 0;
        v155.i64[1] = LODWORD(v94);
        v156.i64[0] = __PAIR64__(v291.u32[0], v293.u32[0]);
        v156.i64[1] = __PAIR64__(v291.u32[1], v292.u32[0]);
        v92.i32[1] = v292.i32[1];
        v157 = (int8x16_t)vsubq_f32(v156, v154);
        v92.i32[2] = v291.i32[1];
        v92.i32[3] = v291.i32[1];
        v158.i64[0] = __PAIR64__(v291.u32[0], v293.u32[0]);
        v158.i64[1] = __PAIR64__(v291.u32[0], v292.u32[0]);
        v169 = (int8x16_t)vsubq_f32(v92, v154);
        v159 = (int8x16_t)vsubq_f32(v292, v155);
        v160.i64[0] = 0;
        v160.i64[1] = LODWORD(v95);
        v161 = (int8x16_t)vsubq_f32(v156, (float32x4_t)LODWORD(v95));
        v162 = (int8x16_t)vsubq_f32(v92, (float32x4_t)LODWORD(v95));
        v163 = (int8x16_t)vsubq_f32((float32x4_t)v158, (float32x4_t)LODWORD(v95));
        v164 = (int8x16_t)vsubq_f32(v292, v160);
        v165 = (float32x2_t)vextq_s8(v158, v169, 0xCuLL).u64[0];
        a9 = vextq_s8(v161, v161, 8uLL);
        *(float32x2_t *)v160.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v157.i8, *(float *)v161.i32), v165, *(float32x2_t *)v161.i8, 1), *(float32x2_t *)v159.i8, (float32x4_t)v161, 2);
        v11 = vextq_s8(v157, v157, 8uLL);
        v166 = (float32x2_t)vextq_s8(v159, v159, 8uLL).u64[0];
        *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v161.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v161.i8, 1), *(float32x2_t *)v169.i8, 1), *(float32x2_t *)a9.i8, v166);
        *(float32x2_t *)v13.i8 = vmla_lane_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v157.i8, (float32x4_t)v163, 3), v165, *(float *)v162.i32), *(float32x2_t *)v159.i8, *(float32x2_t *)v162.i8, 1);
        *(float32x2_t *)&v14 = vmla_lane_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)v11.i8, (float32x4_t)v163, 3), *(float32x2_t *)v162.i8, *(float32x2_t *)v169.i8, 1), v166, *(float32x2_t *)v162.i8, 1);
        v167 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v157.i8, *(float *)v164.i32), v165, *(float32x2_t *)v164.i8, 1), *(float32x2_t *)v159.i8, (float32x4_t)v164, 2);
        v9 = vextq_s8(v164, v164, 8uLL);
        *(float32x2_t *)v159.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v164.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v164.i8, 1), *(float32x2_t *)v169.i8, 1), *(float32x2_t *)v9.i8, v166);
        *(_QWORD *)v351 = v160.i64[0];
        *(_DWORD *)&v351[8] = v12.i32[0];
        *(_DWORD *)&v351[20] = v14;
        *(_QWORD *)&v351[12] = v13.i64[0];
        v352 = v159.i32[0];
        *(float32x2_t *)&v351[24] = v167;
        v168 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v160.f32, 1), *(float32x2_t *)v160.f32, 1), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
        *(float32x2_t *)v169.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), *(float32x2_t *)v13.i8, 1), *(float32x2_t *)&v14, *(float32x2_t *)&v14);
        LODWORD(v170) = vmla_f32(vmla_lane_f32(vmul_f32(v167, v167), (float32x2_t)vdup_lane_s32((int32x2_t)v167, 1), v167, 1), *(float32x2_t *)v159.i8, *(float32x2_t *)v159.i8).u32[0];
        v171 = vzip1_s32(v168, *(int32x2_t *)v169.i8);
        v350 = v170;
        v349 = v171;
        v172 = *(float *)v169.i32 > *(float *)v168.i32;
        if (*(float *)v169.i32 <= *(float *)v168.i32)
          v173 = *(float *)v168.i32;
        else
          v173 = *(float *)v169.i32;
        if (v170 > v173)
          v172 = 2;
        *(float *)v171.i32 = sqrtf(*(float *)((unint64_t)&v349 | (4 * v172)));
        v174 = &v351[12 * v172];
        v169.i64[0] = *(_QWORD *)v174;
        v10.i32[2] = *((_DWORD *)v174 + 2);
        v175 = (int32x4_t)vdivq_f32((float32x4_t)v10, (float32x4_t)vdupq_lane_s32(v171, 0));
        v10.i8[12] = 0;
        v10.i8[13] = 0;
        v10.i8[14] = 0;
        v10.i8[15] = 0;
        *(float *)v10.i32 = v86;
        v176.i64[0] = 0;
        v176.i64[1] = LODWORD(v86);
        v177 = (int8x16_t)vsubq_f32(v156, (float32x4_t)LODWORD(v86));
        v178 = (float32x2_t)vsubq_f32(v92, (float32x4_t)v10.u32[0]).u64[0];
        v179 = vsubq_f32((float32x4_t)v158, (float32x4_t)v10.u32[0]);
        v180 = (int8x16_t)vsubq_f32(v292, v176);
        v181 = (float32x2_t)vextq_s8(v163, v162, 0xCuLL).u64[0];
        *(float32x2_t *)v10.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v161.i8, *(float *)v177.i32), v181, *(float32x2_t *)v177.i8, 1), *(float32x2_t *)v164.i8, (float32x4_t)v177, 2);
        *(float32x2_t *)v177.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)v177.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v177.i8, 1), *(float32x2_t *)v162.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v177, v177, 8uLL), *(float32x2_t *)v9.i8);
        *(float32x2_t *)v176.f32 = vmla_lane_f32(vmla_n_f32(vmul_laneq_f32(*(float32x2_t *)v161.i8, v179, 3), v181, v178.f32[0]), *(float32x2_t *)v164.i8, v178, 1);
        *(float32x2_t *)v179.f32 = vmla_lane_f32(vmla_lane_f32(vmul_laneq_f32(*(float32x2_t *)a9.i8, v179, 3), v178, *(float32x2_t *)v162.i8, 1), *(float32x2_t *)v9.i8, v178, 1);
        v182 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v161.i8, *(float *)v180.i32), v181, *(float32x2_t *)v180.i8, 1), *(float32x2_t *)v164.i8, (float32x4_t)v180, 2);
        v183 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a9.i8, *(float32x2_t *)v180.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v180.i8, 1), *(float32x2_t *)v162.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v180, v180, 8uLL), *(float32x2_t *)v9.i8);
        *(_QWORD *)v351 = v10.i64[0];
        *(_DWORD *)&v351[8] = v177.i32[0];
        *(_DWORD *)&v351[20] = v179.i32[0];
        *(_QWORD *)&v351[12] = v176.i64[0];
        v352 = v183.i32[0];
        *(float32x2_t *)&v351[24] = v182;
        v184 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v10.i8, 1), *(float32x2_t *)v177.i8, *(float32x2_t *)v177.i8);
        v185 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v176.f32, 1), *(float32x2_t *)v176.f32, 1), *(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32);
        LODWORD(v186) = vmla_f32(vmla_lane_f32(vmul_f32(v182, v182), (float32x2_t)vdup_lane_s32((int32x2_t)v182, 1), v182, 1), v183, v183).u32[0];
        v187 = vzip1_s32(v184, v185);
        v350 = v186;
        v349 = v187;
        v188 = *(float *)v185.i32 > *(float *)v184.i32;
        if (*(float *)v185.i32 <= *(float *)v184.i32)
          v189 = *(float *)v184.i32;
        else
          v189 = *(float *)v185.i32;
        if (v186 > v189)
          v188 = 2;
        *(float *)v187.i32 = sqrtf(*(float *)((unint64_t)&v349 | (4 * v188)));
        v190 = &v351[12 * v188];
        v162.i64[0] = *(_QWORD *)v190;
        v162.i32[2] = *((_DWORD *)v190 + 2);
        v191 = (int32x4_t)vdivq_f32((float32x4_t)v162, (float32x4_t)vdupq_lane_s32(v187, 0));
        _Q1 = (int32x4_t)vextq_s8((int8x16_t)v175, (int8x16_t)v175, 0xCuLL);
        a8 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v175, v175), (int8x16_t)v175, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v191, (int8x16_t)v191, 0xCuLL), (int8x16_t)v191, 8uLL));
        a7 = (__n128)vsubq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)v175, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v191, v191), (int8x16_t)v191, 0xCuLL)), (float32x4_t)a8);
        a7.n128_u32[3] = v175.i32[0];
        v348 = v191.i32[2];
        v346 = (int32x4_t)a7;
        v347 = (__n128)vextq_s8((int8x16_t)_Q1, (int8x16_t)v191, 8uLL);
        v89 = v345;
        _NF = v345 < 0.0;
        if (v345 == 0.0)
          goto LABEL_125;
      }
      goto LABEL_90;
    }
    goto LABEL_52;
  }
}

void sub_20EF40280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  void *v15;
  void *v17;

  if (LOBYTE(STACK[0x388]))
  {
    v17 = (void *)STACK[0x370];
    if (STACK[0x370])
    {
      STACK[0x378] = (unint64_t)v17;
      operator delete(v17);
    }
  }
  if (v15)
    operator delete(v15);
  sub_20EF3E784(a15);
  _Unwind_Resume(a1);
}

void sub_20EF402D4(unsigned int **a1@<X0>, unint64_t a2@<X1>, float32x2_t *a3@<X2>, float32x2_t *a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>, float a7@<S1>, int32x4_t a8@<Q6>, int32x4_t a9@<Q7>)
{
  float32x2_t v9;
  int8x16_t v10;
  unsigned int **v13;
  int32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  float32x2_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int8x16_t v27;
  int32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  unint64_t *v35;
  unsigned int *v36;
  unsigned int *v37;
  unint64_t v38;
  float v39;
  float v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x2_t v55;
  unint64_t *v56;
  unint64_t *v57;
  float32x4_t v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  float32x4_t v63;
  __int32 v64;
  __int32 v65;
  unint64_t *v66;
  float32x4_t v67;
  float32x4_t v68;
  __int32 v69;
  __int32 v70;
  char *v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  int8x16_t v80;
  float v81;
  float v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  float v85;
  int v86;
  unint64_t *v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x2_t *v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  unint64_t v94;
  float32x4_t v95;
  unint64_t *v96;
  char *v97;
  int8x16_t v98;
  float v99;
  int8x16_t v100;
  float32x4_t v101;
  int8x16_t v102;
  float32x2_t v103;
  float v104;
  float32x2_t v105;
  float v106;
  float v107;
  float v108;
  int8x16_t v109;
  float v110;
  float v111;
  int32x4_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float v115;
  float32x2_t v116;
  int32x2_t v117;
  float v118;
  int8x16_t v120;
  float32x2_t v121;
  float32x2_t v122;
  unsigned int v123;
  int8x16_t v127;
  float32x2_t v129;
  float32x2_t v130;
  unint64_t *v131;
  unint64_t v132;
  float32x2_t *v133;
  unsigned __int8 v134;
  unsigned __int8 v135;
  float v136;
  BOOL v137;
  float32x2_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int8x16_t v142;
  float32x2_t v143;
  int8x16_t v144;
  _OWORD *v145;
  __int128 v146;
  unint64_t v147;
  unint64_t *v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  void *v153;
  int v154;
  int v155;
  float32x2_t v156;
  float32x4_t v157;
  float v158;
  float v159;
  int32x4_t v161;
  __int32 v162;
  unsigned int **v163;
  __int32 v164;
  float32x2_t v165;
  int32x4_t v166;
  float32x2_t v167;
  uint64_t *v168;
  int32x4_t v169;
  float32x2_t v170;
  unsigned int *v171;
  float32x4_t v172;
  int8x16_t v173;
  int32x2_t v174;
  float32x2_t v175;
  int32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  char **v179;
  unint64_t *v180;
  _OWORD v181[3];
  int v182;
  __int128 v183;
  _BYTE v184[12];
  char v185;
  _OWORD v186[2];
  unsigned __int32 v187;

  v13 = a1;
  *(float32x2_t *)a8.i8 = *a4;
  v15 = a8;
  v15.i32[2] = a4[1].i32[0];
  *(float32x2_t *)a9.i8 = a4[2];
  v16 = a9;
  v16.i32[2] = a4[3].i32[0];
  v9.i32[0] = a4[5].i32[0];
  *(float32x2_t *)v10.i8 = a4[4];
  v17 = v10;
  v17.i32[2] = v9.i32[0];
  v18 = (float32x2_t)vzip1q_s32(v15, v16).u64[0];
  v19 = vtrn2q_s32(v15, v16);
  v20 = vzip2q_s32(v15, v16);
  *(float32x2_t *)v15.i8 = a4[6];
  v15.i32[2] = a4[7].i32[0];
  v21 = (int8x16_t)vnegq_f32((float32x4_t)v15);
  v173 = v17;
  v176 = v20;
  *(float32x2_t *)v22.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v18, *(float *)v21.i32), *(float32x2_t *)v19.i8, *(float32x2_t *)v15.i8, 1), *(float32x2_t *)v20.i8, (float32x4_t)v15, 2);
  v22.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v21.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)v15.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), v9).u32[0]);
  v172 = v22;
  v180 = 0;
  v181[0] = 0uLL;
  if (!a2)
  {
    v34 = 0;
    v35 = 0;
    *a5 = 0;
    a5[1] = 0;
    v168 = a5;
    a5[2] = 0;
    v37 = *a1;
    v36 = a1[1];
    if (*a1 == v36)
      goto LABEL_102;
    goto LABEL_8;
  }
  v161 = v19;
  v162 = v10.i32[1];
  v164 = v9.i32[0];
  v166 = a9;
  v169 = a8;
  if (a2 >= 0x1555555555555556)
    sub_20E867F44();
  v24 = 12 * a2;
  v25 = (unint64_t *)operator new(12 * a2);
  v26 = vzip1q_s32(v169, v166).u64[0];
  v27 = (int8x16_t)v161;
  v27.i32[2] = v162;
  v28 = v176;
  v28.i32[2] = v164;
  v29 = (float32x2_t)vextq_s8(v27, (int8x16_t)vdupq_laneq_s32(v28, 2), 4uLL).u64[0];
  v30.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v161, 0).i32[3];
  v30.i32[1] = v29.i32[0];
  v167 = v30;
  v170 = (float32x2_t)v26;
  v180 = v25;
  *(_QWORD *)&v181[0] = v25;
  *((_QWORD *)&v181[0] + 1) = (char *)v25 + v24;
  v179 = (char **)&v180;
  v31 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v173.i8, 1);
  v165 = (float32x2_t)vextq_s8(v173, v173, 8uLL).u64[0];
  do
  {
    v29.i32[0] = a3[1].i32[0];
    *(float32x2_t *)v32.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v170, COERCE_FLOAT(*a3)), v167, *a3, 1), *(float32x2_t *)v176.i8, v29.f32[0]);
    *(float32x2_t *)&v32.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v173.i8, *a3), v31, *a3, 1), v29, v165);
    v33 = vaddq_f32(v172, v32);
    DWORD2(v186[0]) = v33.i32[2];
    *(_QWORD *)&v186[0] = v33.i64[0];
    sub_20EEEB61C(&v179, (uint64_t *)v186);
    a3 = (float32x2_t *)((char *)a3 + 12);
    v24 -= 12;
  }
  while (v24);
  v35 = v180;
  v34 = *(_QWORD *)&v181[0];
  *a5 = 0;
  a5[1] = 0;
  v168 = a5;
  a5[2] = 0;
  v37 = *v13;
  v36 = v13[1];
  if (*v13 != v36)
  {
LABEL_8:
    v38 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (uint64_t)v35) >> 2);
    v163 = v13;
    v39 = 0.25;
    v40 = 0.5;
    v171 = v36;
    do
    {
      v41 = v37[3];
      if (v41 == -1
        || (v42 = v37[7], v42 == -1)
        || (v43 = *v13, v44 = &(*v13)[9 * v41], v45 = v44[7], (_DWORD)v45 == -1)
        || (v46 = v43[9 * v42 + 3], v46 == -1)
        || v43[9 * v46] != (_DWORD)v45)
      {
        v56 = 0;
      }
      else
      {
        v47 = *v37;
        v48 = *v44;
        v49 = v43[9 * v42];
        v50 = (unint64_t *)operator new(0x20uLL);
        v56 = v50;
        v57 = v50 + 4;
        *v50 = v47;
        v50[1] = v48;
        v50[2] = v49;
        v50[3] = v45;
        v13 = v163;
        v36 = v171;
        if (v50 == v57)
          goto LABEL_26;
        v180 = v50;
        *(_QWORD *)&v181[0] = v35;
        v58 = 0uLL;
        v59 = v50;
        *((_QWORD *)&v181[0] + 1) = v38;
        do
        {
          v60 = *v59;
          if (v38 <= *v59)
            goto LABEL_105;
          v61 = (char *)v35 + 12 * v60;
          v51.i64[0] = *(_QWORD *)v61;
          v51.i32[2] = *((_DWORD *)v61 + 2);
          v58 = vaddq_f32(v58, v51);
          v180 = ++v59;
        }
        while (v59 != v57);
        v62 = 0;
        *(float *)v55.i32 = (float)4uLL;
        v67 = (float32x4_t)vdupq_lane_s32(v55, 0);
        v177 = v67;
        v63 = vdivq_f32(v58, v67);
        v58.i32[0] = 0;
        v64 = 0;
        v65 = 0;
        v180 = v50;
        *(_QWORD *)&v181[0] = v35;
        *((_QWORD *)&v181[0] + 1) = v38;
        v66 = v50;
        v67.i32[0] = 0;
        v68.i32[0] = 0;
        v69 = 0;
        v52.i32[0] = 0;
        v70 = 0;
        v53.i32[0] = 0;
        do
        {
          v60 = *v66;
          if (v38 <= *v66)
            goto LABEL_105;
          v71 = (char *)v35 + 12 * v60;
          v54.i64[0] = *(_QWORD *)v71;
          v54.i32[2] = *((_DWORD *)v71 + 2);
          v72 = (int8x16_t)vsubq_f32(v54, v63);
          *(float32x2_t *)v73.f32 = vmul_n_f32(*(float32x2_t *)v72.i8, *(float *)v72.i32);
          v74 = (float32x4_t)vextq_s8(v72, v72, 8uLL);
          *(float32x2_t *)&v73.u32[2] = vmul_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v72.i8);
          *(float32x2_t *)v75.f32 = vmul_lane_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v72.i8, 1);
          *(float32x2_t *)&v75.u32[2] = vmul_lane_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v72.i8, 1);
          *(float32x2_t *)v74.f32 = vmul_laneq_f32(*(float32x2_t *)v72.i8, (float32x4_t)v72, 2);
          v54 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32((float32x4_t)v72, (float32x4_t)v72), 2);
          v74.i32[2] = v54.i32[0];
          v58.i32[1] = v64;
          v58.i32[2] = v65;
          v67.i32[1] = v68.i32[0];
          v67.i32[2] = v69;
          v52.i32[1] = v70;
          v52.i32[2] = v53.i32[0];
          v58 = vaddq_f32(v58, v73);
          v67 = vaddq_f32(v67, v75);
          v52 = vaddq_f32(v52, v74);
          v69 = v67.i32[2];
          v68.i32[0] = v67.i32[1];
          v65 = v58.i32[2];
          v64 = v58.i32[1];
          v53.i32[0] = v52.i32[2];
          v70 = v52.i32[1];
          ++v62;
          v180 = ++v66;
        }
        while (v66 != v57);
        v174 = v55;
        v63.f32[0] = (float)v62;
        v76 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 0);
        v68.i32[1] = v67.i32[2];
        v68.i64[1] = v52.i64[0];
        v58.i64[1] = __PAIR64__(v67.u32[0], v58.u32[2]);
        v185 = 0;
        *(_QWORD *)&v184[4] = 0x300000003;
        v186[0] = vdivq_f32(v58, v76);
        v186[1] = vdivq_f32(v68, v76);
        v187 = vdivq_f32(v53, v63).u32[0];
        sub_20EEFE4C4((uint64_t)&v180);
        if (!v185 || *((float *)&v183 + 2) == 0.0)
          goto LABEL_26;
        v81 = 0.0 - *((float *)&v183 + 2);
        if (*((float *)&v183 + 2) >= 0.0)
          v81 = *((float *)&v183 + 2);
        if (v81 <= 0.000001)
          goto LABEL_26;
        if (*((float *)&v183 + 3) == 0.0)
          goto LABEL_26;
        if (fabsf(*((float *)&v183 + 3)) <= 0.000001)
          goto LABEL_26;
        if ((float)(*((float *)&v183 + 3) / *((float *)&v183 + 2)) < a6)
          goto LABEL_26;
        v82 = *((float *)&v183 + 1);
        if (*(float *)v184 > 0.0 && (float)(*(float *)v184 / *((float *)&v183 + 3)) > a7)
          goto LABEL_26;
        v83 = atomic_load((unsigned __int8 *)&qword_254A516F8);
        if ((v83 & 1) == 0)
        {
          v158 = *((float *)&v183 + 1);
          v154 = __cxa_guard_acquire(&qword_254A516F8);
          v82 = v158;
          if (v154)
          {
            dword_254A516F0 = 1065098332;
            __cxa_guard_release(&qword_254A516F8);
            v82 = v158;
          }
        }
        v84 = atomic_load((unsigned __int8 *)&qword_254A51708);
        if ((v84 & 1) == 0)
        {
          v159 = v82;
          v155 = __cxa_guard_acquire(&qword_254A51708);
          v82 = v159;
          if (v155)
          {
            dword_254A51700 = 1043452119;
            __cxa_guard_release(&qword_254A51708);
            v82 = v159;
          }
        }
        v85 = fabsf(v82);
        if (v85 <= *(float *)&dword_254A51700)
          v86 = 2;
        else
          v86 = 4;
        if (v85 >= *(float *)&dword_254A516F0)
          v86 = 1;
        if (v86 == 1)
        {
          v180 = v56;
          *(_QWORD *)&v181[0] = v35;
          v95 = 0uLL;
          v96 = v56;
          *((_QWORD *)&v181[0] + 1) = v38;
          do
          {
            v60 = *v96;
            if (v38 <= *v96)
              goto LABEL_105;
            v97 = (char *)v35 + 12 * v60;
            v77.i64[0] = *(_QWORD *)v97;
            v77.i32[2] = *((_DWORD *)v97 + 2);
            v95 = vaddq_f32(v95, v77);
            v180 = ++v96;
          }
          while (v96 != v57);
          v98 = (int8x16_t)vdivq_f32(v95, v177);
          if (v82 >= 0.0)
            v99 = 1.0;
          else
            v99 = -1.0;
          v100.i64[0] = 0;
          v100.i64[1] = LODWORD(v99);
          goto LABEL_69;
        }
        if (v86 == 2)
        {
          v180 = v56;
          *(_QWORD *)&v181[0] = v35;
          *((_QWORD *)&v181[0] + 1) = v38;
          v60 = *v56;
          if (v38 <= *v56)
LABEL_105:
            sub_21023D290((unint64_t *)v181 + 1, v60);
          v87 = v56 + 1;
          v88 = 0uLL;
          v89 = 0uLL;
          while (1)
          {
            v90 = (float32x2_t *)((char *)v35 + 12 * v60);
            *(float32x2_t *)v78.f32 = *v90;
            v78.i32[2] = v90[1].i32[0];
            v89 = vaddq_f32(v89, v78);
            v91 = *v90;
            v92 = (float32x2_t)vextq_s8(v88, v88, 8uLL).u64[0];
            *(float32x2_t *)v88.i8 = vmla_n_f32(*(float32x2_t *)v88.i8, v91, v91.f32[0]);
            v93 = vmla_lane_f32(v92, v91, v91, 1);
            v88.u64[1] = (unint64_t)v93;
            v180 = v87;
            if (v87 == v57)
              break;
            v94 = *v87++;
            v60 = v94;
            if (v38 <= v94)
              goto LABEL_105;
          }
          v101 = vdivq_f32(v89, v177);
          v102 = (int8x16_t)vdivq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32(v174, 0));
          v103 = (float32x2_t)vextq_s8(v102, v102, 8uLL).u64[0];
          v104 = vmls_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32).f32[0];
          v98 = (int8x16_t)v101;
          v105 = vmls_lane_f32(v103, *(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32, 1);
          *(float *)v79.i32 = v104 + v105.f32[1];
          v106 = vmuls_lane_f32(v104, v105, 1);
          v107 = v106 - vmul_f32(v105, v105).f32[0];
          *(float *)v80.i32 = (float)((float)(*(float *)v79.i32 * *(float *)v79.i32) * v39) - v107;
          if (*(float *)v80.i32 > 0.0)
          {
            *(float *)v80.i32 = sqrtf(*(float *)v80.i32);
            v108 = *(float *)v79.i32 * v40;
            v109.i64[0] = 0x8000000080000000;
            v109.i64[1] = 0x8000000080000000;
            v79.i64[0] = vbslq_s8(v109, v80, v79).u64[0];
            v110 = v108 + *(float *)v79.i32;
            *(float *)v79.i32 = v107 / v110;
            if (v110 > (float)(v107 / v110))
            {
              v111 = v110;
              if ((float)(v106 - v107) > (float)(v107 * 0.00000011921))
                goto LABEL_60;
LABEL_65:
              if (v104 <= v105.f32[1])
                v100 = (int8x16_t)xmmword_21038AAA0;
              else
                v100 = (int8x16_t)xmmword_21038AA90;
LABEL_68:
              v100.i32[2] = 0;
LABEL_69:
              v180 = v56;
              *(_QWORD *)&v181[0] = v35;
              *((_QWORD *)&v181[0] + 1) = v38;
              v114 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v100.i8, 1);
              v115 = *(float *)&v100.i32[2];
              v116 = (float32x2_t)vextq_s8(v100, v100, 8uLL).u64[0];
              v117 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8), v114, *(float32x2_t *)v100.i8, 1), v116, v116);
              v118 = *(float *)v117.i32 + -1.0;
              if (*(float *)v117.i32 < 1.0)
                v118 = 1.0 - *(float *)v117.i32;
              _ZF = v118 <= 0.000001 || *(float *)v117.i32 == 1.0;
              *(float *)v117.i32 = 1.0 / sqrtf(*(float *)v117.i32);
              v120 = (int8x16_t)vdupq_lane_s32(v117, 0);
              v121 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v98.i8, 1);
              v122 = (float32x2_t)vextq_s8(v98, v98, 8uLL).u64[0];
              if (_ZF)
                v123 = -1;
              else
                v123 = 0;
              __asm { FMOV            V2.4S, #1.0 }
              v127 = (int8x16_t)vmulq_f32((float32x4_t)v100, (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v123), _Q2, v120));
              *(int32x2_t *)_Q2.i8 = vdup_lane_s32(*(int32x2_t *)v127.i8, 1);
              v175 = v122;
              v178 = (float32x4_t)v98;
              v129 = (float32x2_t)vextq_s8(v127, v127, 8uLL).u64[0];
              v130 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v98.i8, *(float32x2_t *)v127.i8), *(float32x2_t *)_Q2.i8, *(float32x2_t *)v98.i8, 1), v129, v122);
              v131 = v56;
              do
              {
                v132 = *v131;
                if (v38 <= *v131)
                  sub_21023D290((unint64_t *)v181 + 1, v132);
                v133 = (float32x2_t *)((char *)v35 + 12 * v132);
                v79.i32[0] = v133[1].i32[0];
                if (vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v133, *(float32x2_t *)v127.i8), *(float32x2_t *)_Q2.i8, *v133, 1), v129, *(float32x2_t *)v79.i8), v130).f32[0] > 0.01)
                {
                  v39 = 0.25;
                  v40 = 0.5;
                  goto LABEL_26;
                }
                v180 = ++v131;
              }
              while (v131 != v57);
              v134 = atomic_load((unsigned __int8 *)&qword_254A516F8);
              v156 = v116;
              v157 = (float32x4_t)v100;
              if ((v134 & 1) == 0 && __cxa_guard_acquire(&qword_254A516F8))
              {
                dword_254A516F0 = 1065098332;
                __cxa_guard_release(&qword_254A516F8);
              }
              v135 = atomic_load((unsigned __int8 *)&qword_254A51708);
              if ((v135 & 1) == 0 && __cxa_guard_acquire(&qword_254A51708))
              {
                dword_254A51700 = 1043452119;
                __cxa_guard_release(&qword_254A51708);
              }
              v136 = fabsf(v115);
              v137 = v136 < *(float *)&dword_254A516F0 && v136 > *(float *)&dword_254A51700;
              if (v137
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetectorImpl.cpp", 224, (uint64_t)"orientation != PlaneOrientation::Other", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v130.i32[0] = a4[1].i32[0];
              *(float32x2_t *)_Q2.i8 = a4[2];
              v129.i32[0] = a4[3].i32[0];
              v138 = a4[4];
              v79.i32[0] = a4[5].i32[0];
              *(float32x2_t *)v139.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a4, v178.f32[0]), *(float32x2_t *)_Q2.i8, *(float32x2_t *)v178.f32, 1), v138, v178, 2);
              *(float32x2_t *)&v139.u32[2] = vmla_f32(vmla_f32(vmul_f32(v130, *(float32x2_t *)v178.f32), v121, v129), v175, *(float32x2_t *)v79.i8);
              *(float32x2_t *)v100.i8 = a4[6];
              v100.i32[2] = a4[7].i32[0];
              v140 = vaddq_f32(v139, (float32x4_t)v100);
              *(float32x2_t *)v141.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a4, v157.f32[0]), *(float32x2_t *)_Q2.i8, *(float32x2_t *)v157.f32, 1), v138, v157, 2);
              *(float32x2_t *)&v141.u32[2] = vmla_f32(vmla_f32(vmul_f32(v130, *(float32x2_t *)v157.f32), v114, v129), v156, *(float32x2_t *)v79.i8);
              v142 = (int8x16_t)vsubq_f32(v172, v178);
              *(int32x2_t *)_Q2.i8 = vdup_lane_s32(*(int32x2_t *)v142.i8, 1);
              v143 = (float32x2_t)vextq_s8(v142, v142, 8uLL).u64[0];
              *(float *)_Q2.i32 = 1.0
                                / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v142.i8, *(float32x2_t *)v142.i8), *(float32x2_t *)_Q2.i8, *(float32x2_t *)v142.i8, 1), v143, v143).f32[0]);
              *(float32x2_t *)v142.i8 = vmla_f32(vmla_f32(vmul_f32(vmul_f32(*(float32x2_t *)v142.i8, *(float32x2_t *)_Q2.i8), *(float32x2_t *)v157.f32), v114, vmul_lane_f32(*(float32x2_t *)_Q2.i8, *(float32x2_t *)v142.i8, 1)), v156, vmul_f32(v143, *(float32x2_t *)_Q2.i8));
              _Q2.i32[0] = 0;
              LODWORD(v181[0]) = v140.i32[2];
              v144 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)_Q2, (float32x4_t)v142), 0), (int8x16_t)vnegq_f32(v141), (int8x16_t)v141);
              v180 = (unint64_t *)v140.i64[0];
              HIDWORD(v181[0]) = v144.i32[2];
              *(_QWORD *)((char *)v181 + 4) = v144.i64[0];
              v145 = operator new(0x20uLL);
              *((_QWORD *)&v183 + 1) = v145 + 2;
              *(_QWORD *)v184 = v145 + 2;
              v146 = *((_OWORD *)v56 + 1);
              *v145 = *(_OWORD *)v56;
              v145[1] = v146;
              *(_QWORD *)&v183 = v145;
              v147 = v168[1];
              v39 = 0.25;
              v40 = 0.5;
              if (v147 >= v168[2])
              {
                v152 = sub_20EF3E7F4(v168, (uint64_t)&v180);
                v153 = (void *)v183;
                v168[1] = v152;
                if (v153)
                {
                  *((_QWORD *)&v183 + 1) = v153;
                  operator delete(v153);
                }
              }
              else
              {
                v148 = v180;
                *(_DWORD *)(v147 + 8) = v181[0];
                *(_QWORD *)v147 = v148;
                v149 = *(_QWORD *)((unint64_t)&v180 | 0xC);
                *(_DWORD *)(v147 + 20) = *(_DWORD *)(((unint64_t)&v180 | 0xC) + 8);
                *(_QWORD *)(v147 + 12) = v149;
                v150 = v181[1];
                v151 = v181[2];
                *(_DWORD *)(v147 + 56) = v182;
                *(_OWORD *)(v147 + 40) = v151;
                *(_OWORD *)(v147 + 24) = v150;
                *(_QWORD *)(v147 + 64) = 0;
                *(_QWORD *)(v147 + 72) = 0;
                *(_QWORD *)(v147 + 80) = 0;
                *(_OWORD *)(v147 + 64) = v183;
                *(_QWORD *)(v147 + 80) = *(_QWORD *)v184;
                v168[1] = v147 + 88;
              }
              goto LABEL_26;
            }
            v111 = v107 / v110;
            *(float *)v79.i32 = v110;
            if ((float)(v106 - v107) <= (float)(v107 * 0.00000011921))
              goto LABEL_65;
LABEL_60:
            v93.f32[0] = *(float *)v79.i32 - v105.f32[1];
            v101.f32[0] = v111 - v105.f32[1];
            v112 = vdupq_lane_s32(*(int32x2_t *)v101.f32, 0);
            v112.i32[3] = v105.i32[0];
            v113 = (float32x2_t)vzip1_s32((int32x2_t)v93, (int32x2_t)v105);
            v93.f32[0] = v93.f32[0] * v93.f32[0];
            *(float32x2_t *)v100.i8 = vmul_n_f32(v113, 1.0 / sqrtf(vmla_f32(v93, v105, v105).f32[0]));
            v113.i32[0] = v112.i32[2];
            v100.u64[1] = (unint64_t)vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v112.u64[1], (int32x2_t)v105), 1.0 / sqrtf(vmla_f32(vmul_f32(v113, v113), v105, v105).f32[0]));
            goto LABEL_68;
          }
          if (*(float *)v80.i32 >= 0.0)
          {
            v111 = *(float *)v79.i32 * v40;
            *(float *)v79.i32 = *(float *)v79.i32 * v40;
            if ((float)(v106 - v107) <= (float)(v107 * 0.00000011921))
              goto LABEL_65;
            goto LABEL_60;
          }
        }
      }
LABEL_26:
      if (v56)
        operator delete(v56);
      v37 += 9;
    }
    while (v37 != v36);
  }
LABEL_102:
  if (v35)
    operator delete(v35);
}

void sub_20EF40E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  void *v44;
  void *v45;

  if (v45)
    operator delete(v45);
  sub_20EF3E784(a23);
  if (v44)
    operator delete(v44);
  _Unwind_Resume(a1);
}

void sub_20EF40EF8(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  float32x4_t v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v13;
  char **v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float v20;
  int8x16_t v22;
  unsigned int v23;
  int8x16_t v24;
  int8x16_t v25;
  char v26;
  float32x2_t v27;
  float32x2_t v28;
  float v29;
  float v30;
  float32x2_t v31;
  uint64_t v32;
  int8x16_t v33;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_20EF411DC((uint64_t)a3, a1);
  if (a1)
  {
    v8 = 0;
    __asm { FMOV            V0.4S, #1.0 }
    v33 = _Q0;
    do
    {
      v13 = a2 + 88 * v8;
      v14 = (char **)(v13 + 24);
      v15 = *(_QWORD *)(v13 + 32) - *(_QWORD *)(v13 + 24);
      if (v15 >= 0x50)
      {
        v16 = *a3;
        v17 = a3[1];
        if (*a3 != v17)
        {
          _Q0.i32[0] = *(_DWORD *)(v13 + 20);
          v6.i64[0] = *(_QWORD *)(v13 + 12);
          v18 = v6;
          v19 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.f32, 1);
          v20 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32), v19, *(float32x2_t *)v6.f32, 1), *(float32x2_t *)_Q0.i8, *(float32x2_t *)_Q0.i8).f32[0];
          v6.f32[0] = v20 + -1.0;
          if (v20 < 1.0)
            v6.f32[0] = 1.0 - v20;
          _ZF = v6.f32[0] <= 0.000001 || v20 == 1.0;
          v6.f32[0] = 1.0 / sqrtf(v20);
          v22 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 0);
          if (_ZF)
            v23 = -1;
          else
            v23 = 0;
          v6 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v23), v33, v22);
          v18.i32[2] = *(_DWORD *)(v13 + 20);
          v24 = (int8x16_t)vmulq_f32(v18, v6);
          v25 = vextq_s8(v24, v24, 8uLL);
          v7.i32[0] = *(_DWORD *)(v13 + 8);
          *(float32x2_t *)v6.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13, *(float32x2_t *)v24.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1), *(float32x2_t *)v13, 1), *(float32x2_t *)v25.i8, *(float32x2_t *)v7.i8);
          v26 = 1;
          do
          {
            while (1)
            {
              v7.i32[0] = *(_DWORD *)(v16 + 20);
              v25.i64[0] = *(_QWORD *)(v16 + 12);
              if (fabsf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v18.f32), v19, *(float32x2_t *)v25.i8, 1), *(float32x2_t *)_Q0.i8, *(float32x2_t *)v7.i8).f32[0]) <= 0.99027)break;
              v28 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1);
              v25.i32[2] = *(_DWORD *)(v16 + 20);
              v29 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), v28, v28), *(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8).f32[0];
              if (v29 != 1.0)
              {
                v30 = v29 + -1.0;
                if (v29 < 1.0)
                  v30 = 1.0 - v29;
                if (v30 > 0.000001)
                  v25 = (int8x16_t)vmulq_n_f32((float32x4_t)v25, 1.0 / sqrtf(v29));
              }
              v7.i64[0] = *(_QWORD *)v16;
              v7.i32[2] = *(_DWORD *)(v16 + 8);
              v27 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v16, *(float32x2_t *)v25.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1), *(float32x2_t *)v16, 1);
              v25 = vextq_s8(v25, v25, 8uLL);
              if (fabsf(vsub_f32(*(float32x2_t *)v6.f32, vmla_f32(v27, *(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL))).f32[0]) > 0.05)break;
              if (*(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24) < v15)
              {
                v31 = *(float32x2_t *)v13;
                *(_DWORD *)(v16 + 8) = *(_DWORD *)(v13 + 8);
                *(float32x2_t *)v16 = v31;
                v32 = *(_QWORD *)(v13 + 12);
                *(_DWORD *)(v16 + 20) = *(_DWORD *)(v13 + 20);
                *(_QWORD *)(v16 + 12) = v32;
                if ((char **)(v16 + 24) != v14)
                  sub_20E86811C((_QWORD *)(v16 + 24), *v14, *(char **)(v13 + 32), (uint64_t)(*(_QWORD *)(v13 + 32) - (_QWORD)*v14) >> 3);
                goto LABEL_3;
              }
              v26 = 0;
              v16 += 88;
              if (v16 == v17)
                goto LABEL_3;
            }
            v16 += 88;
          }
          while (v16 != v17);
          if ((v26 & 1) == 0)
            goto LABEL_3;
        }
        if (v17 >= a3[2])
        {
          a3[1] = sub_20EF43C6C(a3, (uint64_t *)v13);
        }
        else
        {
          sub_20EF0A098(a3[1], (uint64_t *)v13);
          a3[1] = v17 + 88;
          a3[1] = v17 + 88;
        }
      }
LABEL_3:
      ++v8;
    }
    while (v8 != a1);
  }
}

void sub_20EF411A8(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EE45574(v1);
  _Unwind_Resume(a1);
}

void sub_20EF411C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  sub_20EE45574((void **)v1);
  _Unwind_Resume(a1);
}

void sub_20EF411DC(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  __int128 v12;

  v2 = *(char **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL)
      sub_20E867F44();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 88 * a2;
    v6 = (char *)operator new(88 * a2);
    v7 = &v6[88 * ((v4 - v2) / 88)];
    *(_QWORD *)&v12 = v7;
    *((_QWORD *)&v12 + 1) = &v6[v5];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = &v6[v5];
    }
    else
    {
      v8 = 0;
      do
      {
        sub_20EF0A098((uint64_t)&v7[v8 - 88], (uint64_t *)&v4[v8 - 88]);
        v8 -= 88;
      }
      while (&v4[v8] != v2);
      v2 = *(char **)a1;
      v9 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v7[v8];
      *(_OWORD *)(a1 + 8) = v12;
      while (v9 != v2)
      {
        v10 = (void *)*((_QWORD *)v9 - 4);
        if (v10)
        {
          *((_QWORD *)v9 - 3) = v10;
          operator delete(v10);
        }
        v11 = (void *)*((_QWORD *)v9 - 8);
        if (v11)
        {
          *((_QWORD *)v9 - 7) = v11;
          operator delete(v11);
        }
        v9 -= 88;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_20EF41394(unint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, double **a5@<X8>, double a6@<D0>)
{
  double **v6;
  unint64_t v7;
  size_t v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  size_t v25;
  int8x16_t v26;
  float32x4_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  float32x2_t v35;
  float v36;
  float v37;
  float32x2_t v38;
  int32x2_t v39;
  float *v40;
  float *v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t v44;
  float *v45;
  double *v46;
  double *v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  char **v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  double *v61;
  char **v62;
  _BYTE *v63;
  _BYTE *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  double *v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  _QWORD *v95;
  int64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _OWORD *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t __sz;
  unint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  int v113;
  double **v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD v119[2];
  unsigned int v120;
  int v121;
  _QWORD v122[2];
  int v123;
  __int128 v124;
  double *v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 __p;
  __int128 v131;
  uint64_t v132;

  v6 = a5;
  v132 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  v7 = a3;
  if (!a3)
  {
    v124 = 0uLL;
    v125 = 0;
    sub_20EF411DC((uint64_t)&v124, a1);
    v106 = 88 * a1;
    do
    {
      v126 = *a2;
      v127 = *(_OWORD *)(a2 + 1);
      v128 = 0u;
      v129 = 0u;
      __p = 0u;
      v131 = 0u;
      v107 = *((_QWORD *)&v124 + 1);
      if (*((_QWORD *)&v124 + 1) >= (unint64_t)v125)
      {
        *((_QWORD *)&v124 + 1) = sub_20EF445F8((char **)&v124, (uint64_t)&v126);
        if ((_QWORD)__p)
          operator delete((void *)__p);
      }
      else
      {
        v108 = *a2;
        *(_DWORD *)(*((_QWORD *)&v124 + 1) + 8) = *((_DWORD *)a2 + 2);
        *(_QWORD *)v107 = v108;
        *(_QWORD *)(v107 + 12) = *(_QWORD *)((char *)&v127 + 4);
        *(_DWORD *)(v107 + 20) = HIDWORD(v127);
        *(_QWORD *)(v107 + 32) = 0;
        *(_QWORD *)(v107 + 40) = 0;
        *(_QWORD *)(v107 + 24) = 0;
        *(_QWORD *)&v129 = 0;
        v128 = 0uLL;
        *(_OWORD *)(v107 + 48) = 0uLL;
        *(_OWORD *)(v107 + 64) = 0uLL;
        *(_QWORD *)(v107 + 80) = 0;
        *((_QWORD *)&v124 + 1) = v107 + 88;
      }
      if ((_QWORD)v128)
        operator delete((void *)v128);
      a2 += 11;
      v106 -= 88;
    }
    while (v106);
    *(_OWORD *)v6 = v124;
    v6[2] = v125;
    return;
  }
  v12 = (4 * (3 * a1) + 31) & 0x7FFFFFFE0;
  *((_QWORD *)&v124 + 1) = v12 >> 2;
  v13 = operator new(v12, (std::align_val_t)0x20uLL);
  *(_QWORD *)&v124 = v13;
  LODWORD(v125) = a1;
  if ((_DWORD)a1)
    bzero(v13, 4 * (3 * a1));
  v14 = 0;
  v15 = (uint64_t *)((char *)a2 + 12);
  v16 = a1;
  do
  {
    v17 = v124 + 4 * v14;
    v18 = *v15;
    *(_DWORD *)(v17 + 8) = *((_DWORD *)v15 + 2);
    *(_QWORD *)v17 = v18;
    v14 += 3;
    v15 += 11;
    --v16;
  }
  while (v16);
  v19 = (4 * (3 * v7) + 31) & 0x7FFFFFFE0;
  v122[1] = v19 >> 2;
  v20 = (char *)operator new(v19, (std::align_val_t)0x20uLL);
  v21 = 0;
  v122[0] = v20;
  v123 = v7;
  do
  {
    v22 = &v20[4 * v21];
    v23 = *a4;
    v24 = *((_DWORD *)a4 + 2);
    *(_DWORD *)v22 = *a4;
    *(_DWORD *)&v22[4 * v7] = HIDWORD(v23);
    *(_DWORD *)&v22[8 * v7] = v24;
    ++v21;
    a4 = (uint64_t *)((char *)a4 + 12);
  }
  while (v7 != v21);
  v25 = (4 * ((_DWORD)v125 * v7) + 31) & 0x7FFFFFFE0;
  v119[1] = v25 >> 2;
  v119[0] = operator new(v25, (std::align_val_t)0x20uLL);
  v120 = v7;
  v121 = (int)v125;
  *(_QWORD *)&v127 = v122;
  *((_QWORD *)&v127 + 1) = &v124;
  LODWORD(v128) = 1065353216;
  sub_20EF4483C((uint64_t)v119, (uint64_t)&v126);
  v28 = v120;
  if (v7 != v120
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetectorImpl.cpp", 361, (uint64_t)"modelMatrix.rows() == numPoints", 31, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| a1 != v121&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetectorImpl.cpp", 362, (uint64_t)"modelMatrix.columns() == numPlaneCandidates", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v29 = 0;
  v30 = 0;
  v31 = (v28 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  v32 = (v31 + 1) & 0x7FFFFFFFFFFFFFF8;
  v117 = v119[0];
  v33 = v119[0] + 16;
  do
  {
    v34 = &a2[11 * v30];
    v27.i32[0] = *((_DWORD *)v34 + 5);
    v26.i64[0] = *(uint64_t *)((char *)v34 + 12);
    v35 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
    v26.i32[2] = v27.i32[0];
    v36 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), v35, *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32).f32[0];
    if (v36 != 1.0)
    {
      v37 = v36 + -1.0;
      if (v36 < 1.0)
        v37 = 1.0 - v36;
      if (v37 > 0.000001)
        v26 = (int8x16_t)vmulq_n_f32((float32x4_t)v26, 1.0 / sqrtf(v36));
    }
    if ((_DWORD)v28)
    {
      v27.i64[0] = *v34;
      v35.i32[0] = *((_DWORD *)v34 + 2);
      v38 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v34, *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1), *(float32x2_t *)v34, 1);
      v26 = vextq_s8(v26, v26, 8uLL);
      v39 = (int32x2_t)vmla_f32(v38, *(float32x2_t *)v26.i8, v35);
      v40 = (float *)(v117 + 4 * (v28 * v30));
      v41 = v40;
      if (v31 < 7)
        goto LABEL_25;
      v42 = (float32x4_t *)(v33 + 4 * v29);
      v41 = &v40[v32];
      v26 = (int8x16_t)vdupq_lane_s32(v39, 0);
      v43 = (v31 + 1) & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v27 = vsubq_f32(v42[-1], (float32x4_t)v26);
        v44 = vsubq_f32(*v42, (float32x4_t)v26);
        v42[-1] = v27;
        *v42 = v44;
        v42 += 2;
        v43 -= 8;
      }
      while (v43);
      if (v31 + 1 != v32)
      {
LABEL_25:
        v45 = &v40[v28];
        do
        {
          *v41 = *v41 - *(float *)v39.i32;
          ++v41;
        }
        while (v41 != v45);
      }
    }
    ++v30;
    v29 += v28;
  }
  while (v30 != a1);
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  if (a1 >= 0x2E8BA2E8BA2E8BBLL)
    sub_20E867F44();
  v46 = (double *)operator new(88 * a1);
  v113 = v28;
  *v6 = v46;
  v6[1] = v46;
  v47 = &v46[11 * a1];
  v6[2] = v47;
  v48 = v46;
  v49 = v117;
  do
  {
    *v48 = 0.0;
    v48[1] = 0.0;
    v48[2] = 0.0078125;
    *(_OWORD *)(v48 + 3) = 0uLL;
    *(_OWORD *)(v48 + 5) = 0uLL;
    *(_OWORD *)(v48 + 7) = 0uLL;
    *(_OWORD *)(v48 + 9) = 0uLL;
    v48 += 11;
  }
  while (v48 != v47);
  v50 = 0;
  v6[1] = v47;
  __sz = 8 * v7;
  v110 = v7 >> 61;
  v114 = v6;
  v111 = a1;
  v112 = a2;
  v118 = v7;
  while (2)
  {
    v51 = &a2[11 * v50];
    v52 = &v46[11 * v50];
    v53 = *v51;
    *((_DWORD *)v52 + 2) = *((_DWORD *)v51 + 2);
    *(_QWORD *)v52 = v53;
    v54 = *(uint64_t *)((char *)v51 + 12);
    *((_DWORD *)v52 + 5) = *((_DWORD *)v51 + 5);
    *(_QWORD *)((char *)v52 + 12) = v54;
    v55 = v7;
    v57 = (char **)(v52 + 3);
    v56 = (_BYTE *)*((_QWORD *)v52 + 3);
    v59 = *((_QWORD *)v52 + 5);
    v58 = v52 + 5;
    v60 = v50;
    v116 = v50;
    if (v55 <= (v59 - (uint64_t)v56) >> 3)
      goto LABEL_45;
    if (v110)
      sub_20E867F44();
    v61 = &v46[11 * v50];
    v64 = (_BYTE *)*((_QWORD *)v61 + 4);
    v62 = (char **)(v61 + 4);
    v63 = v64;
    v65 = (char *)operator new(__sz);
    v66 = v64 - v56;
    v67 = &v65[(v64 - v56) & 0xFFFFFFFFFFFFFFF8];
    v68 = v67;
    if (v64 != v56)
    {
      if ((unint64_t)(v66 - 8) < 0x58)
      {
        v68 = &v65[(v63 - v56) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_42:
          v77 = *((_QWORD *)v63 - 1);
          v63 -= 8;
          *((_QWORD *)v68 - 1) = v77;
          v68 -= 8;
        }
        while (v63 != v56);
        goto LABEL_43;
      }
      v68 = &v65[(v63 - v56) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v63 - &v65[v66 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
        goto LABEL_42;
      v69 = v66 >> 3;
      v70 = ((unint64_t)(v66 - 8) >> 3) + 1;
      v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
      v72 = &v63[-v71];
      v68 = &v67[-v71];
      v73 = &v65[8 * v69 - 16];
      v74 = (__int128 *)(v63 - 16);
      v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v76 = *v74;
        *((_OWORD *)v73 - 1) = *(v74 - 1);
        *(_OWORD *)v73 = v76;
        v73 -= 32;
        v74 -= 2;
        v75 -= 4;
      }
      while (v75);
      v63 = v72;
      if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_42;
    }
LABEL_43:
    *v57 = v68;
    *v62 = v67;
    *v58 = &v65[8 * v118];
    v60 = v116;
    v49 = v117;
    if (v56)
    {
      operator delete(v56);
      v49 = v117;
    }
LABEL_45:
    v78 = 0;
    v79 = v113 * v60;
    v7 = v118;
    v115 = v113 * v60;
    do
    {
      v81 = (v79 + v78);
      if (fabsf(*(float *)(v49 + 4 * v81)) < a6)
      {
        v82 = &v46[11 * v60];
        v85 = *((_QWORD *)v82 + 5);
        v84 = v82 + 5;
        v83 = v85;
        v86 = v84 - 1;
        v87 = (char *)*(v84 - 1);
        if ((unint64_t)v87 < v85)
        {
          *(_QWORD *)v87 = v78;
          v80 = (uint64_t)(v87 + 8);
LABEL_47:
          *v86 = v80;
          v46 = *v6;
          (*v6)[11 * v60 + 10] = (*v6)[11 * v60 + 10] + fabsf(*(float *)(v49 + 4 * v81));
          goto LABEL_48;
        }
        v88 = (char *)*(v84 - 2);
        v89 = (v87 - v88) >> 3;
        v90 = v89 + 1;
        if ((unint64_t)(v89 + 1) >> 61)
          sub_20E867F44();
        v91 = v83 - (_QWORD)v88;
        if (v91 >> 2 > v90)
          v90 = v91 >> 2;
        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
          v92 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v92 = v90;
        if (v92)
        {
          if (v92 >> 61)
            sub_20E877A38();
          v93 = v92;
          v94 = operator new(8 * v92);
          v92 = v93;
          v95 = &v94[8 * v89];
          *v95 = v78;
          v80 = (uint64_t)(v95 + 1);
          v96 = v87 - v88;
          if (v87 != v88)
            goto LABEL_60;
        }
        else
        {
          v94 = 0;
          v95 = (_QWORD *)(8 * v89);
          *(_QWORD *)(8 * v89) = v78;
          v80 = 8 * v89 + 8;
          v96 = v87 - v88;
          if (v87 != v88)
          {
LABEL_60:
            v97 = v96 - 8;
            if (v97 >= 0x58)
            {
              v60 = v116;
              if ((unint64_t)(v88 - v94) >= 0x20)
              {
                v98 = (v97 >> 3) + 1;
                v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
                v100 = &v87[-v99];
                v95 = (_QWORD *)((char *)v95 - v99);
                v101 = &v94[8 * v89 - 16];
                v102 = v87 - 16;
                v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v104 = *(_OWORD *)v102;
                  *(v101 - 1) = *((_OWORD *)v102 - 1);
                  *v101 = v104;
                  v101 -= 2;
                  v102 -= 32;
                  v103 -= 4;
                }
                while (v103);
                v87 = v100;
                if (v98 == (v98 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_69;
              }
            }
            else
            {
              v60 = v116;
            }
            do
            {
              v105 = *((_QWORD *)v87 - 1);
              v87 -= 8;
              *--v95 = v105;
            }
            while (v87 != v88);
LABEL_69:
            *(v84 - 2) = v95;
            *v86 = v80;
            *v84 = &v94[8 * v92];
            if (v88)
              operator delete(v88);
            v6 = v114;
            v49 = v117;
            v7 = v118;
            v79 = v115;
            goto LABEL_47;
          }
        }
        v60 = v116;
        goto LABEL_69;
      }
LABEL_48:
      ++v78;
    }
    while (v78 != v7);
    v46[11 * v60 + 10] = v46[11 * v60 + 10]
                       / (double)(unint64_t)((uint64_t)(*(_QWORD *)&v46[11 * v60 + 4]
                                                            - *(_QWORD *)&v46[11 * v60 + 3]) >> 3);
    v50 = v60 + 1;
    a2 = v112;
    if (v60 + 1 != v111)
      continue;
    break;
  }
  MEMORY[0x212BC6368]();
  if (v122[0])
    MEMORY[0x212BC6368](v122[0], 0x1000C8052888210);
  if ((_QWORD)v124)
    MEMORY[0x212BC6368](v124, 0x1000C8052888210);
}

void sub_20EF41C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20EE45574((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EF41C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p)
{
  uint64_t v36;
  uint64_t v37;

  if (a19)
  {
    MEMORY[0x212BC6368](a19, 0x1000C8052888210);
    v36 = a22;
    if (!a22)
    {
LABEL_3:
      v37 = a25;
      if (!a25)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v36 = a22;
    if (!a22)
      goto LABEL_3;
  }
  MEMORY[0x212BC6368](v36, 0x1000C8052888210);
  v37 = a25;
  if (!a25)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  MEMORY[0x212BC6368](v37, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void sub_20EF41D88(uint64_t **a1@<X0>, uint64_t a2@<X1>, float *a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t *v11;
  float64x2_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;
  float *v17;
  float32x4_t v18;
  float32x4_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  int8x16_t v29;
  float32x2_t v30;
  float v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  float v39;
  int v40;
  uint64_t v41;
  double v42;
  char *v43;
  char *v44;
  float v45;
  unsigned int v46;
  int v47;
  int v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  _BYTE *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  __int128 *v68;
  uint64_t v69;
  __int128 v70;
  float64x2_t v71;
  _QWORD *v72;
  double v73;
  int8x16_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  int64x2_t v84;
  float64x2_t v85;
  _QWORD *v86;
  uint64_t v87;
  float32x2_t *v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float32x2_t v92;
  float32x2_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  float32x2_t *v99;
  float32x2_t *v100;
  uint64_t v101;
  int64_t v102;
  unint64_t v103;
  float32x2_t *v104;
  float32x2_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  float32x2_t *v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  double v114;
  float64x2_t v115;
  float64x2_t v116;
  double v117;
  int8x16_t v118;
  double v119;
  uint64_t *v120;
  float *v121;
  float32x2_t *v122;
  unint64_t v123;
  float *v124;
  double v125;
  uint64_t v126;
  _BOOL4 v127;
  void *v129;
  unint64_t v130;
  uint64_t v131;
  int8x16_t v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t *v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  char *v143;
  float64x2_t v144;
  uint64_t v145;
  float v146;
  float32x2_t v147;
  void *__p;
  __int128 v149;
  void *v150;
  void *v151;
  __int128 v152;
  uint64_t v153;
  float32x2_t *v154;
  float32x2_t *v155;
  float32x2_t *v156;
  _OWORD v157[3];

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_20EF411DC((uint64_t)a4, 0x2E8BA2E8BA2E8BA3 * (a1[1] - *a1));
  v11 = *a1;
  v135 = a1[1];
  if (*a1 != v135)
  {
    v12.f64[0] = NAN;
    v12.f64[1] = NAN;
    v133 = (int8x16_t)vnegq_f64(v12);
    v134 = a4;
    do
    {
      sub_20EF0A098((uint64_t)&v145, v11);
      v136 = v11;
      v14 = __p;
      v13 = (_QWORD *)v149;
      v15 = v149 - (_QWORD)__p;
      v16 = (uint64_t)(v149 - (_QWORD)__p) >> 3;
      v17 = (float *)operator new(((((((_QWORD)v149 - (_QWORD)__p) >> 1) * v16) & 0x3FFFFFFFCLL) + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
      v20 = v17;
      if ((_DWORD)v16 * (_DWORD)v16)
        bzero(v17, 4 * (v16 * v16));
      if (v15 >= 0x10)
      {
        v21 = 0;
        v22 = 0;
        v23 = 1;
        do
        {
          v24 = v14[v22];
          v22 = v23;
          v25 = &a3[3 * v24];
          v18.i64[0] = *(_QWORD *)v25;
          v18.f32[2] = v25[2];
          v26 = v21;
          v27 = v22;
          do
          {
            v28 = &a3[3 * v14[v27]];
            v19.i64[0] = *(_QWORD *)v28;
            v19.f32[2] = v28[2];
            v29 = (int8x16_t)vsubq_f32(v18, v19);
            v30 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1), *(float32x2_t *)v29.i8, 1);
            v19 = (float32x4_t)vextq_s8(v29, v29, 8uLL);
            v26 += v16;
            LODWORD(v20[v26]) = vmla_f32(v30, *(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32).u32[0];
            ++v27;
          }
          while (v16 != v27);
          v23 = v22 + 1;
          v21 += v16 + 1;
        }
        while (v22 + 1 != v16);
      }
      if ((_DWORD)v16 * (_DWORD)v16)
      {
        v31 = *v20;
        v32 = 0x100000000;
        if ((int)v16 > 1)
          v32 = 1;
        if (__PAIR64__(v16, 0) != v32)
        {
          do
          {
            v39 = 0.0;
            if (v32 <= HIDWORD(v32))
              v39 = v20[(v32 + HIDWORD(v32) * v16)];
            v31 = v31 + v39;
            v35 = (v32 + 1);
            v36 = v32 & 0xFFFFFFFF00000000;
            v37 = v36 | v35;
            v32 = v36 + 0x100000000;
            if ((int)v35 < (int)v16)
              v32 = v37;
            if ((_DWORD)v32)
              v38 = 0;
            else
              v38 = (_DWORD)v16 == HIDWORD(v32);
          }
          while (!v38);
        }
        memset(v157, 0, 24);
        if (v13 == v14)
        {
LABEL_28:
          v34 = 0;
          v33 = 0;
          if (v13 == v14)
            goto LABEL_70;
LABEL_29:
          v40 = 0;
          v41 = 0;
          v42 = (float)(v31 / (float)((unint64_t)((v16 - 1) * v16) >> 1))
              * a5
              * (double)(unint64_t)(v16 - 1);
          v43 = v33;
          v44 = v33;
          while (2)
          {
            if ((_DWORD)v16)
            {
              v45 = v20[(v41 * v16)];
              if ((_DWORD)v16 != 1)
              {
                v46 = 1;
                v47 = v41;
                do
                {
                  v48 = v40 + v46;
                  v47 += v16;
                  if (v46 >= v41)
                    v48 = v47;
                  v45 = v45 + v20[v48];
                  ++v46;
                }
                while ((_DWORD)v16 != v46);
              }
              if (v42 > v45)
              {
LABEL_41:
                if (v44 < v34)
                {
                  *(_QWORD *)v44 = v14[v41];
                  v44 += 8;
                  v33 = v44;
                  goto LABEL_31;
                }
                v49 = (char *)(v44 - v43);
                v50 = (v44 - v43) >> 3;
                v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 61)
                {
                  *((_QWORD *)&v157[0] + 1) = v33;
                  *(_QWORD *)&v157[1] = v34;
                  *(_QWORD *)&v157[0] = v43;
                  sub_20E867F44();
                }
                if ((v34 - v43) >> 2 > v51)
                  v51 = (v34 - v43) >> 2;
                if ((unint64_t)(v34 - v43) >= 0x7FFFFFFFFFFFFFF8)
                  v52 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v52 = v51;
                if (v52)
                {
                  v143 = (char *)(v44 - v43);
                  if (v52 >> 61)
                  {
                    *(_QWORD *)&v157[0] = v43;
                    *((_QWORD *)&v157[0] + 1) = v33;
                    *(_QWORD *)&v157[1] = v34;
                    sub_20E877A38();
                  }
                  v53 = v44;
                  v54 = v52;
                  v55 = operator new(8 * v52);
                  v44 = v53;
                  v52 = v54;
                  v49 = v143;
                  v56 = &v55[8 * v50];
                  *(_QWORD *)v56 = v14[v41];
                  v33 = v56 + 8;
                  v57 = (char *)(v44 - v43);
                  if (v44 == v43)
                  {
LABEL_56:
                    v34 = &v55[8 * v52];
                    if (v43)
                    {
                      v61 = v43;
                      v62 = v33;
                      v63 = v34;
                      operator delete(v61);
                      v34 = v63;
                      v33 = v62;
                    }
                    v43 = v56;
                    v44 = v33;
                    goto LABEL_31;
                  }
                }
                else
                {
                  v55 = 0;
                  v56 = (char *)(8 * v50);
                  *(_QWORD *)(8 * v50) = v14[v41];
                  v33 = (char *)(8 * v50 + 8);
                  v57 = (char *)(v44 - v43);
                  if (v44 == v43)
                    goto LABEL_56;
                }
                v58 = (unint64_t)(v57 - 8);
                if (v58 >= 0x168)
                {
                  v64 = (v44 - 8 - v43) & 0xFFFFFFFFFFFFFFF8;
                  if (&v49[(_QWORD)v55 - 8 - v64] > &v49[(_QWORD)v55 - 8])
                  {
                    v59 = v44;
                  }
                  else if (&v44[-v64 - 8] > v44 - 8)
                  {
                    v59 = v44;
                  }
                  else if ((unint64_t)(v44 - v55 - (_QWORD)v49) >= 0x20)
                  {
                    v65 = (v58 >> 3) + 1;
                    v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
                    v59 = &v44[-v66];
                    v56 -= v66;
                    v67 = &v55[8 * v50 - 16];
                    v68 = (__int128 *)(v44 - 16);
                    v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v70 = *v68;
                      *(v67 - 1) = *(v68 - 1);
                      *v67 = v70;
                      v67 -= 2;
                      v68 -= 2;
                      v69 -= 4;
                    }
                    while (v69);
                    if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_56;
                  }
                  else
                  {
                    v59 = v44;
                  }
                }
                else
                {
                  v59 = v44;
                }
                do
                {
                  v60 = *((_QWORD *)v59 - 1);
                  v59 -= 8;
                  *((_QWORD *)v56 - 1) = v60;
                  v56 -= 8;
                }
                while (v59 != v43);
                goto LABEL_56;
              }
            }
            else if (v42 > 0.0)
            {
              goto LABEL_41;
            }
LABEL_31:
            ++v41;
            v40 += v16;
            if (v41 == v16)
            {
              *((_QWORD *)&v157[0] + 1) = v33;
              *(_QWORD *)&v157[1] = v34;
              *(_QWORD *)&v157[0] = v43;
              goto LABEL_70;
            }
            continue;
          }
        }
      }
      else
      {
        v31 = 0.0;
        memset(v157, 0, 24);
        if (v13 == v14)
          goto LABEL_28;
      }
      if ((v15 & 0x8000000000000000) != 0)
        sub_20E867F44();
      v33 = (char *)operator new(v15);
      v34 = &v33[8 * v16];
      *(_QWORD *)&v157[0] = v33;
      *((_QWORD *)&v157[0] + 1) = v33;
      *(_QWORD *)&v157[1] = v34;
      if (v13 != v14)
        goto LABEL_29;
LABEL_70:
      MEMORY[0x212BC6368](v20, 0x1000C8052888210);
      if (__p)
      {
        *(_QWORD *)&v149 = __p;
        operator delete(__p);
      }
      v72 = *(_QWORD **)&v157[0];
      __p = *(void **)&v157[0];
      v149 = *(_OWORD *)((char *)v157 + 8);
      v73 = v146;
      v74 = (int8x16_t)vcvtq_f64_f32(v147);
      v75 = (float64x2_t)vdupq_lane_s64(v74.i64[0], 0);
      v75.f64[0] = v146;
      v76 = 0uLL;
      v141 = (float64x2_t)xmmword_2102DD520;
      v142 = (float64x2_t)xmmword_21030D320;
      v144 = 0u;
      if (vmaxnmvq_f64(vabsq_f64(v75)) > 0.0000999999975)
      {
        v77 = (float64x2_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL);
        v78.f64[0] = -*(double *)v74.i64;
        v78.f64[1] = v146;
        *(_QWORD *)&v79.f64[0] = vextq_s8(v74, v74, 8uLL).u64[0];
        v71.f64[0] = 1.0 / sqrt(vmuld_n_f64(*(double *)v74.i64, *(double *)v74.i64) + v73 * v73);
        v80 = vmulq_n_f64(v78, v71.f64[0]);
        v81 = vmulq_f64(v71, (float64x2_t)0);
        v82 = (float64x2_t)vextq_s8((int8x16_t)v80, (int8x16_t)v81, 8uLL);
        v81.f64[1] = v80.f64[0];
        v83 = vmulq_f64(v80, v77);
        v77.f64[1] = v79.f64[0];
        v79.f64[1] = v146;
        v84 = (int64x2_t)vmlsq_f64(vmulq_f64(v82, v79), v81, v77);
        *(_QWORD *)&v83.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(v83, v75, v80, 1);
        *(_QWORD *)&v85.f64[0] = vdupq_laneq_s64(v84, 1).u64[0];
        *(double *)&v84.i64[1] = -(*(double *)v74.i64 * v71.f64[0]);
        v85.f64[1] = v71.f64[0] * v73;
        v141 = v85;
        v142 = (float64x2_t)v84;
        v83.f64[1] = v71.f64[0] * 0.0;
        v144 = v83;
      }
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v86 = (_QWORD *)*((_QWORD *)&v157[0] + 1);
      v87 = *((_QWORD *)&v157[0] + 1) - *(_QWORD *)&v157[0];
      if (*((_QWORD *)&v157[0] + 1) != *(_QWORD *)&v157[0])
      {
        if (v87 < 0)
          sub_20E969238();
        v88 = (float32x2_t *)operator new(*((_QWORD *)&v157[0] + 1) - *(_QWORD *)&v157[0]);
        v154 = v88;
        v155 = v88;
        v156 = &v88[v87 >> 3];
        v89 = 0uLL;
        v76 = 0uLL;
        v90 = 0uLL;
        while (1)
        {
          v91 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v142, a3[3 * *v72]), v141, a3[3 * *v72 + 1]), v144, a3[3 * *v72 + 2]);
          v92 = vcvt_f32_f64(v91);
          if (v88 >= v156)
            break;
          *v88++ = v92;
LABEL_78:
          v155 = v88;
          v89 = vaddq_f64(v89, v91);
          v76 = vmlaq_n_f64(v76, v91, v91.f64[0]);
          v90 = vmlaq_laneq_f64(v90, v91, v91, 1);
          if (++v72 == v86)
          {
            v86 = __p;
            v113 = v149;
            goto LABEL_110;
          }
        }
        v93 = v154;
        v94 = v88 - v154;
        v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 61)
          sub_20E969238();
        v96 = (char *)v156 - (char *)v154;
        if (((char *)v156 - (char *)v154) >> 2 > v95)
          v95 = v96 >> 2;
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
          v97 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v97 = v95;
        v139 = v90;
        v140 = v76;
        v137 = v91;
        v138 = v89;
        if (v97)
        {
          if (v97 >> 61)
            sub_20E877A38();
          v98 = operator new(8 * v97);
          v90 = v139;
          v76 = v140;
          v91 = v137;
          v89 = v138;
          v99 = (float32x2_t *)&v98[8 * v94];
          v100 = (float32x2_t *)&v98[8 * v97];
          *v99 = v92;
          v101 = (uint64_t)&v99[1];
          v102 = (char *)v88 - (char *)v93;
          if (v88 != v93)
          {
LABEL_89:
            v103 = v102 - 8;
            if (v103 < 0x168)
            {
              v104 = v88;
              goto LABEL_91;
            }
            v106 = ((char *)&v88[-1] - (char *)v93) & 0xFFFFFFFFFFFFFFF8;
            if (&v98[(char *)v88 - (char *)v93 - 8 - v106] > &v98[(char *)v88 - (char *)v93 - 8])
            {
              v104 = v88;
              goto LABEL_91;
            }
            if ((float32x2_t *)((char *)&v88[-1] - v106) > &v88[-1])
            {
              v104 = v88;
              goto LABEL_91;
            }
            if ((unint64_t)((char *)v93 - v98) < 0x20)
            {
              v104 = v88;
              goto LABEL_91;
            }
            v107 = (v103 >> 3) + 1;
            v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
            v104 = &v88[v108 / 0xFFFFFFFFFFFFFFF8];
            v99 = (float32x2_t *)((char *)v99 - v108);
            v109 = &v98[8 * v94 - 16];
            v110 = v88 - 2;
            v111 = v107 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v112 = *(_OWORD *)v110->f32;
              *(v109 - 1) = *(_OWORD *)v110[-2].f32;
              *v109 = v112;
              v109 -= 2;
              v110 -= 4;
              v111 -= 4;
            }
            while (v111);
            if (v107 != (v107 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_91:
                v105 = v104[-1];
                --v104;
                v99[-1] = v105;
                --v99;
              }
              while (v104 != v93);
            }
            v88 = v154;
            v154 = v99;
            v156 = v100;
            if (!v88)
            {
LABEL_97:
              v88 = (float32x2_t *)v101;
              goto LABEL_78;
            }
LABEL_96:
            operator delete(v88);
            v91 = v137;
            v89 = v138;
            v90 = v139;
            v76 = v140;
            goto LABEL_97;
          }
        }
        else
        {
          v98 = 0;
          v99 = (float32x2_t *)(8 * v94);
          v100 = 0;
          *(float32x2_t *)(8 * v94) = v92;
          v101 = 8 * v94 + 8;
          v102 = (char *)v88 - (char *)v93;
          if (v88 != v93)
            goto LABEL_89;
        }
        v154 = v99;
        v156 = v100;
        goto LABEL_96;
      }
      v88 = 0;
      v113 = *((_QWORD *)&v157[0] + 1);
      v89 = 0uLL;
      v90 = 0uLL;
LABEL_110:
      v116 = vdivq_f64(v89, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt((double)(unint64_t)((v113 - (uint64_t)v86) >> 3))), 0));
      v114 = vmlsq_f64(v76, v116, v116).f64[0];
      v115 = vmlsq_laneq_f64(v90, v116, v116, 1);
      v116.f64[0] = v114 + v115.f64[1];
      v118 = (int8x16_t)vmulq_f64(v115, v115);
      v117 = vmuld_lane_f64(v114, v115, 1) - *(double *)v118.i64;
      *(double *)v118.i64 = v116.f64[0] * v116.f64[0] * 0.25 - v117;
      if (*(double *)v118.i64 <= 0.0)
      {
        v120 = v134;
        v121 = &a3[3 * a2];
        if (*(double *)v118.i64 < 0.0 || v116.f64[0] * 0.5 < v116.f64[0] * 0.5 * 0.100000001)
        {
LABEL_129:
          v127 = 0;
          goto LABEL_132;
        }
      }
      else
      {
        *(double *)v118.i64 = sqrt(*(double *)v118.i64);
        v119 = v116.f64[0] * 0.5 + *(double *)vbslq_s8(v133, v118, (int8x16_t)v116).i64;
        v120 = v134;
        v121 = &a3[3 * a2];
        if (v119 <= v117 / v119)
        {
          if (v119 < v117 / v119 * 0.100000001)
            goto LABEL_129;
        }
        else if (v117 / v119 < v119 * 0.100000001)
        {
          goto LABEL_129;
        }
      }
      v122 = v154;
      if (v88
        && !v154
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      sub_20FDC59E8(v88 - v122, v122, (uint64_t)v157);
      v152 = v157[0];
      v153 = *(_QWORD *)&v157[1];
      if (a2)
      {
        v123 = 0;
        v124 = a3;
        do
        {
          *(float32x2_t *)&v157[0] = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v142, *v124), v141, v124[1]), v144, v124[2]));
          v123 += sub_20FDC57E8((float32x2_t **)&v152, (float *)v157, 0, 0.000001);
          v125 = (double)v123 * a6;
          v126 = (uint64_t)(v149 - (_QWORD)__p) >> 3;
          v127 = v125 < (double)(unint64_t)v126;
          v124 += 3;
        }
        while (v125 < (double)(unint64_t)v126 && v124 != v121);
        v129 = (void *)v152;
        if (!(_QWORD)v152)
          goto LABEL_132;
LABEL_131:
        *((_QWORD *)&v152 + 1) = v129;
        operator delete(v129);
        goto LABEL_132;
      }
      v129 = *(void **)&v157[0];
      v127 = 1;
      if (*(_QWORD *)&v157[0])
        goto LABEL_131;
LABEL_132:
      if (v154)
      {
        v155 = v154;
        operator delete(v154);
      }
      if (v127)
      {
        v130 = v120[1];
        if (v130 >= v120[2])
        {
          v131 = sub_20EF43C6C(v120, &v145);
        }
        else
        {
          sub_20EF0A098(v120[1], &v145);
          v131 = v130 + 88;
          v120[1] = v130 + 88;
        }
        v120[1] = v131;
      }
      if (v150)
      {
        v151 = v150;
        operator delete(v150);
      }
      if (__p)
      {
        *(_QWORD *)&v149 = __p;
        operator delete(__p);
      }
      v11 = v136 + 11;
    }
    while (v136 + 11 != v135);
  }
}

void sub_20EF42890(_Unwind_Exception *a1)
{
  void **v1;

  sub_20EE45574(v1);
  _Unwind_Resume(a1);
}

void sub_20EF428A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  void *v40;

  v40 = *(void **)(v38 - 216);
  if (v40)
  {
    *(_QWORD *)(v38 - 208) = v40;
    operator delete(v40);
  }
  sub_20EF0A058(&a38);
  sub_20EE45574(a20);
  _Unwind_Resume(a1);
}

void sub_20EF429EC(size_t a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, float32x2_t *a4@<X3>, uint64_t a5@<X8>)
{
  size_t v9;
  float *v10;
  float *v11;
  __int128 *v12;
  uint64_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  uint64_t v18;
  float32x2_t v19;
  float *v20;
  float v21;
  size_t v22;
  float *v23;
  float v24;
  float v25;
  float *v26;
  float *v27;
  float v28;
  size_t v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;
  char *v35;
  char *v36;
  uint64_t v37;
  float v38;
  float v39;
  float *v40;
  float v41;
  float v42;
  float *v43;
  float v44;
  float v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  char *v52;
  int v53;
  int v54;
  char *v55;
  int v56;
  int v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  void **v67;
  void **v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char *v80;
  int *v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t v84;
  char *v85;
  int *v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  void *v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unsigned int *v116;
  uint64_t v117;
  unsigned int *v118;
  int64_t v119;
  uint64_t v120;
  unint64_t v121;
  int64_t v122;
  unint64_t v123;
  _BYTE *v124;
  _QWORD *v125;
  char *v126;
  void *v127;
  int64_t v128;
  unint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  unsigned int *v136;
  uint64_t v137;
  __int128 v138;
  char *v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  uint32x4_t v148;
  uint32x4_t v149;
  const float *v150;
  unint64_t v151;
  uint32x4_t v152;
  uint32x4_t v153;
  uint32x4_t v154;
  uint32x4_t v155;
  uint32x4_t v156;
  uint32x4_t v157;
  const float *v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  uint64_t v163;
  char v164;
  size_t v165;
  char *v166;
  char *v167;
  char v168;
  _DWORD *v169;
  unint64_t v170;
  uint64_t v171;
  void *v172;
  _BYTE *v173;
  _BYTE *v174;
  int64_t v175;
  char *v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  char *v180;
  void *v181;
  _QWORD *v182;
  uint64_t v183;
  float *v185;
  char *v186;
  _QWORD *v187;
  char *v188;
  void *__p[6];
  char *v190;
  void *v191[2];
  char *v192;
  uint64_t v193;
  void *v194;
  char *v195;
  char *v196;
  _QWORD *v197;
  _QWORD *v198;
  char *v199;
  char *v200;
  char *v201;
  __int128 v202;
  float *v203;
  float *v204;
  float *v205;
  float32x4x2_t v206;
  float32x4x2_t v207;

  v203 = 0;
  v204 = 0;
  v205 = 0;
  if (a3 >> 62)
    sub_20E867F44();
  v9 = 4 * a3;
  v10 = (float *)operator new(4 * a3);
  v182 = a2;
  v203 = v10;
  v205 = &v10[a3];
  bzero(v10, v9);
  v204 = &v10[v9 / 4];
  v11 = (float *)operator new(v9);
  v12 = (__int128 *)(a1 + 24);
  bzero(v11, v9);
  v13 = 0;
  v14 = *(float32x2_t *)(a1 + 24);
  v15 = *(float32x2_t *)(a1 + 32);
  v16 = (float32x2_t)vdup_lane_s32((int32x2_t)v14, 1);
  v17 = (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1);
  v18 = 8 * a3;
  do
  {
    v19 = *a4++;
    LODWORD(v10[v13]) = vmla_lane_f32(vmul_f32(v19, v14), v16, v19, 1).u32[0];
    LODWORD(v11[v13++]) = vmla_lane_f32(vmul_f32(v19, v15), v17, v19, 1).u32[0];
    v18 -= 8;
  }
  while (v18);
  v20 = v10 + 1;
  if (v10 + 1 != &v10[v9 / 4])
  {
    v21 = *v10;
    v22 = v9 - 4;
    v23 = v10 + 1;
    do
    {
      v24 = *v23++;
      v25 = v24;
      if (v24 < v21)
      {
        v21 = v25;
        v10 = v20;
      }
      v20 = v23;
      v22 -= 4;
    }
    while (v22);
  }
  v26 = v11 + 1;
  v27 = v11;
  if (v11 + 1 != &v11[v9 / 4])
  {
    v28 = *v11;
    v29 = v9 - 4;
    v27 = v11;
    v30 = v11 + 1;
    do
    {
      v31 = *v30++;
      v32 = v31;
      if (v31 < v28)
      {
        v28 = v32;
        v27 = v26;
      }
      v26 = v30;
      v29 -= 4;
    }
    while (v29);
  }
  v33 = *v10;
  v34 = *v27;
  v36 = *(char **)a1;
  v35 = *(char **)(a1 + 8);
  v185 = v11;
  if (*(char **)a1 == v35)
  {
    v47 = 0;
    v199 = 0;
    v200 = 0;
    v201 = 0;
    v202 = *v12;
    v39 = 3.4028e38;
    v38 = 3.4028e38;
  }
  else
  {
    v37 = 0;
    v38 = 3.4028e38;
    v39 = 3.4028e38;
    do
    {
      v40 = (float *)&v36[v37];
      if (*(_DWORD *)&v36[v37 + 12] != -1)
      {
        v41 = fabsf(v40[4]);
        if (v41 < v38)
          v38 = v41;
      }
      if (*((_DWORD *)v40 + 1) != -1)
      {
        v42 = fabsf(*(float *)&v36[v37 + 8]);
        if (v42 < v38)
          v38 = v42;
      }
      v43 = (float *)&v36[v37];
      if (*(_DWORD *)&v36[v37 + 28] != -1)
      {
        v44 = fabsf(v43[8]);
        if (v44 < v39)
          v39 = v44;
      }
      if (*((_DWORD *)v43 + 5) != -1)
      {
        v45 = fabsf(*(float *)&v36[v37 + 24]);
        if (v45 < v39)
          v39 = v45;
      }
      v37 += 36;
    }
    while (&v36[v37] != v35);
    v199 = 0;
    v200 = 0;
    v201 = 0;
    a1 = v35 - v36;
    v46 = 0x8E38E38E38E38E39 * ((v35 - v36) >> 2);
    if (v46 >= 0x71C71C71C71C71DLL)
      sub_20E867F44();
    v47 = (char *)operator new(a1);
    v48 = 36 * v46;
    v199 = v47;
    v201 = &v47[v48];
    memcpy(v47, v36, a1);
    v49 = 0;
    v200 = &v47[v48];
    v202 = *v12;
    v50 = v38 * 1.5;
    v51 = v39 * 1.5;
    do
    {
      v52 = &v47[v49];
      v53 = *(_DWORD *)&v47[v49 + 20];
      if (v53 != -1 && fabsf(*((float *)v52 + 6)) > v51)
      {
        *(_DWORD *)&v47[36 * v53 + 28] = -1;
        *((_DWORD *)v52 + 5) = -1;
      }
      v54 = *((_DWORD *)v52 + 7);
      if (v54 != -1 && fabsf(*(float *)&v47[v49 + 32]) > v51)
      {
        *(_DWORD *)&v47[36 * v54 + 20] = -1;
        *((_DWORD *)v52 + 7) = -1;
      }
      v55 = &v47[v49];
      v56 = *(_DWORD *)&v47[v49 + 4];
      if (v56 != -1 && fabsf(*((float *)v55 + 2)) > v50)
      {
        *(_DWORD *)&v47[36 * v56 + 12] = -1;
        *((_DWORD *)v55 + 1) = -1;
      }
      v57 = *((_DWORD *)v55 + 3);
      if (v57 != -1 && fabsf(*(float *)&v47[v49 + 16]) > v50)
      {
        *(_DWORD *)&v47[36 * v57 + 4] = -1;
        *((_DWORD *)v55 + 3) = -1;
      }
      v49 += 36;
    }
    while (v48 != v49);
  }
  v194 = 0;
  v195 = 0;
  v196 = 0;
  if (a3 >> 61)
    sub_20EB057F8();
  v188 = (char *)operator new(8 * a3);
  v194 = v188;
  v195 = &v188[8 * a3];
  v196 = v195;
  v58 = operator new(8 * ((a3 - 1) >> 6) + 8);
  v59 = v58;
  if (a3 >= 0x41)
    v60 = (a3 - 1) >> 6;
  else
    v60 = 0;
  v58[v60] = 0;
  v61 = 8 * (a3 >> 6);
  if (a3 >= 0x40)
    bzero(v58, 8 * (a3 >> 6));
  if ((a3 & 0x3F) != 0)
    *(_QWORD *)((char *)v59 + v61) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(a3 & 0x3F));
  sub_20EEE6850((uint64_t *)&v203, (uint64_t *)&v197);
  v63 = v197;
  v62 = v198;
  if (v197 != v198)
  {
    while (1)
    {
      v64 = *v63;
      if (((v59[*v63 >> 6] >> *v63) & 1) == 0)
        break;
LABEL_57:
      if (++v63 == v62)
      {
        v63 = v197;
        goto LABEL_111;
      }
    }
    LODWORD(a1) = llroundf((float)((float)(v38 * 0.25) + (float)(v203[v64] - v33)) / v38);
    if ((a1 & 0x80000000) != 0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetectorImpl.cpp", 589, (uint64_t)"horizIdxInt >= 0", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    LODWORD(v61) = llroundf((float)((float)(v39 * 0.25) + (float)(v11[v64] - v34)) / v39);
    if ((v61 & 0x80000000) != 0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetectorImpl.cpp", 595, (uint64_t)"vertIdxInt >= 0", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v187 = v63;
    memset(__p, 0, sizeof(__p));
    sub_20EF43E6C(__p);
    v65 = (char *)__p[5];
    v66 = (unint64_t)__p[4];
    v67 = (void **)__p[1];
    v68 = (void **)__p[2];
    v69 = (((unint64_t)__p[4] + (unint64_t)__p[5]) * (unsigned __int128)0x8060180601806019) >> 64;
    v70 = (v69 + (((unint64_t)__p[4] + (unint64_t)__p[5] - v69) >> 1)) >> 8;
    v71 = *((_QWORD *)__p[1] + v70) + 12 * (uint64_t)((uint64_t)__p[4] + (unint64_t)__p[5] + -341 * v70);
    *(_DWORD *)v71 = v64;
    *(_QWORD *)(v71 + 4) = a1 | (v61 << 32);
    v72 = v65 + 1;
    if (v65 == (char *)-1)
    {
LABEL_64:
      v73 = (char *)v68 - (char *)v67;
      if ((unint64_t)((char *)v68 - (char *)v67) < 0x11)
      {
        v11 = v185;
        v63 = v187;
      }
      else
      {
        v11 = v185;
        v63 = v187;
        do
        {
          v74 = *v67++;
          operator delete(v74);
          __p[1] = v67;
          v73 -= 8;
        }
        while (v73 > 0x10);
      }
      while (v67 != v68)
      {
        v109 = *v67++;
        operator delete(v109);
      }
      if (__p[0])
        operator delete(__p[0]);
      v62 = v198;
      goto LABEL_57;
    }
    v61 = (uint64_t)v188;
    while (1)
    {
      v76 = (unsigned int *)((char *)v67[v66 / 0x155] + 12 * (v66 % 0x155));
      v77 = *v76;
      a1 = *(_QWORD *)(v76 + 1);
      --v72;
      v78 = v66 + 1;
      __p[4] = (void *)(v66 + 1);
      __p[5] = v72;
      if (v66 + 1 >= 0x2AA)
      {
        v79 = *v67++;
        operator delete(v79);
        v78 = v66 - 340;
        __p[1] = v67;
        __p[4] = (void *)(v66 - 340);
      }
      *(_QWORD *)(v61 + 8 * v77) = a1;
      v80 = &v47[36 * v77];
      v83 = *((_DWORD *)v80 + 5);
      v81 = (int *)(v80 + 20);
      v82 = v83;
      if (v83 == -1)
        break;
      v84 = v59[v82 >> 6];
      if ((v84 & (1 << v82)) != 0)
        break;
      v59[v82 >> 6] = v84 | (1 << v82);
      *(_QWORD *)(v61 + 8 * v82) = a1 + 0x100000000;
      v94 = *v81;
      if (v68 == v67)
        v95 = 0;
      else
        v95 = 341 * (v68 - v67) - 1;
      v96 = (unint64_t)&v72[v78];
      if ((char *)v95 == &v72[v78])
      {
        sub_20EF43E6C(__p);
        v67 = (void **)__p[1];
        v68 = (void **)__p[2];
        v72 = (char *)__p[5];
        v78 = (unint64_t)__p[4];
        v96 = (unint64_t)__p[5] + (unint64_t)__p[4];
      }
      v97 = (unint64_t)v67[v96 / 0x155] + 12 * (v96 % 0x155);
      *(_DWORD *)v97 = v94;
      *(_QWORD *)(v97 + 4) = a1 + 0x100000000;
      __p[5] = ++v72;
      v61 = (uint64_t)v188;
      v98 = &v47[36 * v77];
      v99 = *((_DWORD *)v98 + 7);
      v86 = (int *)(v98 + 28);
      v87 = v99;
      if (v99 != -1)
        goto LABEL_76;
LABEL_89:
      v100 = *(unsigned int *)&v47[36 * v77 + 12];
      if ((_DWORD)v100 != -1)
      {
        v101 = v59[v100 >> 6];
        if ((v101 & (1 << v100)) == 0)
        {
          v59[v100 >> 6] = v101 | (1 << v100);
          if (v68 == v67)
            v106 = 0;
          else
            v106 = 341 * (v68 - v67) - 1;
          v107 = (unint64_t)&v72[v78];
          if ((char *)v106 == &v72[v78])
          {
            sub_20EF43E6C(__p);
            v67 = (void **)__p[1];
            v68 = (void **)__p[2];
            v72 = (char *)__p[5];
            v78 = (unint64_t)__p[4];
            v107 = (unint64_t)__p[5] + (unint64_t)__p[4];
          }
          v108 = (unint64_t)v67[v107 / 0x155] + 12 * (v107 % 0x155);
          *(_DWORD *)v108 = v100;
          *(_QWORD *)(v108 + 4) = (a1 + 1) | a1 & 0xFFFFFFFF00000000;
          __p[5] = ++v72;
          v102 = *(unsigned int *)&v47[36 * v77 + 4];
          if ((_DWORD)v102 == -1)
            goto LABEL_70;
LABEL_92:
          v103 = v59[v102 >> 6];
          if ((v103 & (1 << v102)) == 0)
          {
            v59[v102 >> 6] = v103 | (1 << v102);
            if (v68 == v67)
              v104 = 0;
            else
              v104 = 341 * (v68 - v67) - 1;
            v105 = (unint64_t)&v72[v78];
            if ((char *)v104 == &v72[v78])
            {
              sub_20EF43E6C(__p);
              v67 = (void **)__p[1];
              v68 = (void **)__p[2];
              v72 = (char *)__p[5];
              v78 = (unint64_t)__p[4];
              v105 = (unint64_t)__p[5] + (unint64_t)__p[4];
            }
            v75 = (unint64_t)v67[v105 / 0x155] + 12 * (v105 % 0x155);
            *(_DWORD *)v75 = v102;
            *(_QWORD *)(v75 + 4) = (a1 - 1) | a1 & 0xFFFFFFFF00000000;
            __p[5] = ++v72;
          }
          goto LABEL_70;
        }
      }
      v102 = *(unsigned int *)&v47[36 * v77 + 4];
      if ((_DWORD)v102 != -1)
        goto LABEL_92;
LABEL_70:
      v66 = v78;
      if (!v72)
        goto LABEL_64;
    }
    v85 = &v47[36 * v77];
    v88 = *((_DWORD *)v85 + 7);
    v86 = (int *)(v85 + 28);
    v87 = v88;
    if (v88 == -1)
      goto LABEL_89;
LABEL_76:
    v89 = v59[v87 >> 6];
    if ((v89 & (1 << v87)) == 0)
    {
      v59[v87 >> 6] = v89 | (1 << v87);
      *(_QWORD *)(v61 + 8 * v87) = a1 - 0x100000000;
      v90 = *v86;
      if (v68 == v67)
        v91 = 0;
      else
        v91 = 341 * (v68 - v67) - 1;
      v92 = (unint64_t)&v72[v78];
      if ((char *)v91 == &v72[v78])
      {
        sub_20EF43E6C(__p);
        v67 = (void **)__p[1];
        v68 = (void **)__p[2];
        v72 = (char *)__p[5];
        v78 = (unint64_t)__p[4];
        v92 = (unint64_t)__p[5] + (unint64_t)__p[4];
      }
      v93 = (unint64_t)v67[v92 / 0x155] + 12 * (v92 % 0x155);
      *(_DWORD *)v93 = v90;
      *(_QWORD *)(v93 + 4) = a1 - 0x100000000;
      __p[5] = ++v72;
      v61 = (uint64_t)v188;
    }
    goto LABEL_89;
  }
LABEL_111:
  if (v63)
  {
    v198 = v63;
    operator delete(v63);
  }
  operator delete(v59);
  if (v47)
  {
    v200 = v47;
    operator delete(v47);
  }
  operator delete(v11);
  v110 = v182;
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  v111 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v182[1] - *v182) >> 3);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  sub_20EF411DC(a5, v111);
  v112 = *v182;
  v183 = v182[1];
  if (*v110 != v183)
  {
    do
    {
      v114 = *(char **)(v112 + 64);
      v113 = *(char **)(v112 + 72);
      memset(__p, 0, 24);
      v115 = v113 - v114;
      if (v113 == v114)
      {
        v140 = 0;
        v139 = 0;
        v116 = 0;
LABEL_158:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Vision/ConnSACPlaneDetectorImpl.cpp", 60, (uint64_t)"!points.empty()", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v145 = *v116;
        v144 = v116[1];
        v141 = 1;
        v146 = v140 - 1;
        if ((unint64_t)(v140 - 1) >= 8)
          goto LABEL_162;
        goto LABEL_160;
      }
      if (v115 < 0)
        sub_20EB057F8();
      v116 = (unsigned int *)operator new(v113 - v114);
      __p[0] = v116;
      __p[1] = v116;
      __p[2] = &v116[2 * (v115 >> 3)];
      do
      {
        while (1)
        {
          while (1)
          {
            v117 = *((_QWORD *)v194 + *(_QWORD *)v114);
            if (v116 >= __p[2])
              break;
            *(_QWORD *)v116 = v117;
            v116 += 2;
            __p[1] = v116;
            v114 += 8;
            if (v114 == v113)
              goto LABEL_154;
          }
          v118 = (unsigned int *)__p[0];
          v119 = (char *)v116 - (char *)__p[0];
          v120 = ((char *)v116 - (char *)__p[0]) >> 3;
          v121 = v120 + 1;
          if ((unint64_t)(v120 + 1) >> 61)
            sub_20EB057F8();
          v122 = (char *)__p[2] - (char *)__p[0];
          if (((char *)__p[2] - (char *)__p[0]) >> 2 > v121)
            v121 = v122 >> 2;
          v123 = (unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v121;
          if (!v123)
            break;
          if (v123 >> 61)
            sub_20E877A38();
          v124 = operator new(8 * v123);
          v125 = &v124[8 * v120];
          v126 = &v124[8 * v123];
          *v125 = v117;
          v127 = v125 + 1;
          v128 = (char *)v116 - (char *)v118;
          if (v116 == v118)
            goto LABEL_141;
LABEL_134:
          v129 = v128 - 8;
          if (v129 < 0x168)
          {
            v130 = v116;
            goto LABEL_136;
          }
          v132 = ((char *)(v116 - 2) - (char *)v118) & 0xFFFFFFFFFFFFFFF8;
          if (&v124[v119 - 8 - v132] > &v124[v119 - 8])
          {
            v130 = v116;
            do
            {
LABEL_136:
              v131 = *((_QWORD *)v130 - 1);
              v130 -= 2;
              *--v125 = v131;
            }
            while (v130 != v118);
            goto LABEL_137;
          }
          if ((unsigned int *)((char *)v116 - v132 - 8) > v116 - 2)
          {
            v130 = v116;
            goto LABEL_136;
          }
          if ((unint64_t)((char *)v116 - &v124[v119]) < 0x20)
          {
            v130 = v116;
            goto LABEL_136;
          }
          v133 = (v129 >> 3) + 1;
          v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
          v130 = &v116[v134 / 0xFFFFFFFFFFFFFFFCLL];
          v125 = (_QWORD *)((char *)v125 - v134);
          v135 = &v124[8 * v120 - 16];
          v136 = v116 - 4;
          v137 = v133 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v138 = *(_OWORD *)v136;
            *(v135 - 1) = *((_OWORD *)v136 - 1);
            *v135 = v138;
            v135 -= 2;
            v136 -= 8;
            v137 -= 4;
          }
          while (v137);
          if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_136;
LABEL_137:
          v116 = (unsigned int *)__p[0];
          __p[0] = v125;
          __p[1] = v127;
          __p[2] = v126;
          if (v116)
            goto LABEL_142;
          v116 = (unsigned int *)v127;
          __p[1] = v127;
          v114 += 8;
          if (v114 == v113)
            goto LABEL_154;
        }
        v124 = 0;
        v125 = (_QWORD *)(8 * v120);
        v126 = 0;
        *(_QWORD *)(8 * v120) = v117;
        v127 = (void *)(8 * v120 + 8);
        v128 = (char *)v116 - (char *)v118;
        if (v116 != v118)
          goto LABEL_134;
LABEL_141:
        __p[0] = v125;
        __p[1] = v127;
        __p[2] = v126;
LABEL_142:
        operator delete(v116);
        v116 = (unsigned int *)v127;
        __p[1] = v127;
        v114 += 8;
      }
      while (v114 != v113);
LABEL_154:
      v139 = (char *)__p[0];
      v114 = *(char **)(v112 + 64);
      v140 = ((char *)v116 - (char *)__p[0]) >> 3;
      if (v116 == __p[0])
        goto LABEL_158;
      v141 = 0;
      v143 = *(_DWORD *)__p[0];
      v142 = *((_DWORD *)__p[0] + 1);
      if ((unsigned int *)((char *)v116 - (char *)__p[0]) == (unsigned int *)8)
      {
        v140 = 1;
        v144 = *((_DWORD *)__p[0] + 1);
        v145 = *(_DWORD *)__p[0];
        goto LABEL_175;
      }
      v144 = *((_DWORD *)__p[0] + 1);
      v145 = *(_DWORD *)__p[0];
      v146 = v140 - 1;
      if ((unint64_t)(v140 - 1) >= 8)
      {
LABEL_162:
        v147 = v146 & 0xFFFFFFFFFFFFFFF8 | 1;
        v148 = (uint32x4_t)vdupq_n_s32(v145);
        v149 = (uint32x4_t)vdupq_n_s32(v144);
        v150 = (const float *)(v139 + 40);
        v151 = v146 & 0xFFFFFFFFFFFFFFF8;
        v152 = v148;
        v153 = v149;
        v154 = v148;
        v155 = v148;
        v156 = v149;
        v157 = v149;
        do
        {
          v158 = v150 - 8;
          v206 = vld2q_f32(v158);
          v207 = vld2q_f32(v150);
          v148 = vminq_u32((uint32x4_t)v206.val[0], v148);
          v152 = vminq_u32((uint32x4_t)v207.val[0], v152);
          v149 = vminq_u32((uint32x4_t)v206.val[1], v149);
          v153 = vminq_u32((uint32x4_t)v207.val[1], v153);
          v154 = vmaxq_u32(v154, (uint32x4_t)v206.val[0]);
          v155 = vmaxq_u32(v155, (uint32x4_t)v207.val[0]);
          v156 = vmaxq_u32(v156, (uint32x4_t)v206.val[1]);
          v157 = vmaxq_u32(v157, (uint32x4_t)v207.val[1]);
          v150 += 16;
          v151 -= 8;
        }
        while (v151);
        v142 = vmaxvq_u32(vmaxq_u32(v156, v157));
        v143 = vmaxvq_u32(vmaxq_u32(v154, v155));
        v144 = vminvq_u32(vminq_u32(v149, v153));
        v145 = vminvq_u32(vminq_u32(v148, v152));
        if (v146 != (v146 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_165;
        goto LABEL_175;
      }
LABEL_160:
      v143 = v145;
      v142 = v144;
      v147 = 1;
LABEL_165:
      v159 = (unsigned int *)&v139[8 * v147 + 4];
      do
      {
        v160 = *(v159 - 1);
        v161 = *v159;
        if (v160 < v145)
          v145 = *(v159 - 1);
        if (v161 < v144)
          v144 = *v159;
        if (v143 <= v160)
          v143 = *(v159 - 1);
        if (v142 <= v161)
          v142 = *v159;
        ++v147;
        v159 += 2;
      }
      while (v140 != v147);
LABEL_175:
      v162 = v143 - v145 + 1;
      LODWORD(v199) = v162;
      HIDWORD(v199) = v142 - v144 + 1;
      v163 = (v162 * HIDWORD(v199));
      v201 = 0;
      *(_QWORD *)&v202 = 0;
      v200 = 0;
      if ((_DWORD)v163)
      {
        v186 = v139;
        v164 = v141;
        v165 = 8 * (v162 * HIDWORD(v199));
        v166 = (char *)operator new(v165);
        v167 = &v166[8 * v163];
        v200 = v166;
        *(_QWORD *)&v202 = v167;
        memset(v166, 255, v165);
        v201 = v167;
        v168 = v164;
        v139 = v186;
        if ((v168 & 1) != 0)
          goto LABEL_182;
      }
      else
      {
        v167 = 0;
        v166 = 0;
        if ((v141 & 1) != 0)
          goto LABEL_182;
      }
      v169 = v139 + 4;
      do
      {
        v170 = *(v169 - 1) - v145 + (*v169 - v144) * v162;
        if ((v167 - v166) >> 3 <= v170)
          sub_20EEC1C08();
        v169 += 2;
        v171 = *(_QWORD *)v114;
        v114 += 8;
        *(_QWORD *)&v166[8 * v170] = v171;
        --v140;
      }
      while (v140);
LABEL_182:
      v172 = *(void **)v112;
      LODWORD(__p[1]) = *(_DWORD *)(v112 + 8);
      __p[0] = v172;
      LODWORD(v172) = *(_DWORD *)(v112 + 20);
      *(void **)((char *)&__p[1] + 4) = *(void **)(v112 + 12);
      HIDWORD(__p[2]) = (_DWORD)v172;
      memset(&__p[3], 0, 24);
      v174 = *(_BYTE **)(v112 + 64);
      v173 = *(_BYTE **)(v112 + 72);
      v175 = v173 - v174;
      if (v173 != v174)
      {
        if (v175 < 0)
          sub_20E867F44();
        __p[3] = operator new(v173 - v174);
        __p[4] = __p[3];
        v176 = (char *)__p[3] + 8 * (v175 >> 3);
        __p[5] = v176;
        memcpy(__p[3], v174, v175);
        __p[4] = v176;
      }
      v190 = v199;
      v191[0] = v166;
      v191[1] = v167;
      v192 = v167;
      v193 = 0;
      v177 = *(_QWORD *)(a5 + 8);
      if (v177 >= *(_QWORD *)(a5 + 16))
      {
        v180 = sub_20EF445F8((char **)a5, (uint64_t)__p);
        v181 = v191[0];
        *(_QWORD *)(a5 + 8) = v180;
        if (v181)
        {
          v191[1] = v181;
          operator delete(v181);
        }
      }
      else
      {
        v178 = __p[0];
        *(_DWORD *)(v177 + 8) = __p[1];
        *(_QWORD *)v177 = v178;
        v179 = *(uint64_t *)((char *)&__p[1] + 4);
        *(_DWORD *)(v177 + 20) = HIDWORD(__p[2]);
        *(_QWORD *)(v177 + 12) = v179;
        *(_QWORD *)(v177 + 32) = 0;
        *(_QWORD *)(v177 + 40) = 0;
        *(_QWORD *)(v177 + 24) = 0;
        *(_OWORD *)(v177 + 24) = *(_OWORD *)&__p[3];
        *(void **)(v177 + 40) = __p[5];
        memset(&__p[3], 0, 24);
        *(_QWORD *)(v177 + 48) = v190;
        *(_QWORD *)(v177 + 56) = 0;
        *(_QWORD *)(v177 + 64) = 0;
        *(_QWORD *)(v177 + 72) = 0;
        *(_OWORD *)(v177 + 56) = *(_OWORD *)v191;
        *(_QWORD *)(v177 + 72) = v192;
        v191[0] = 0;
        v191[1] = 0;
        v192 = 0;
        *(_QWORD *)(v177 + 80) = v193;
        *(_QWORD *)(a5 + 8) = v177 + 88;
      }
      if (__p[3])
      {
        __p[4] = __p[3];
        operator delete(__p[3]);
      }
      operator delete(v139);
      v112 += 88;
    }
    while (v112 != v183);
  }
  if (v194)
    operator delete(v194);
}

void sub_20EF43A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void **v37;

  sub_20EE45574(v37);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF43BF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 64);
    if (v5)
    {
      *(_QWORD *)(i - 56) = v5;
      operator delete(v5);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EF43C6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  __int128 v17;

  v2 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_20E867F44();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL)
      sub_20E877A38();
    v7 = (char *)operator new(88 * v6);
  }
  else
  {
    v7 = 0;
  }
  v16 = (uint64_t)&v7[88 * v2];
  *((_QWORD *)&v17 + 1) = &v7[88 * v6];
  sub_20EF0A098(v16, a2);
  v8 = v16 + 88;
  v10 = (char *)*a1;
  v9 = (char *)a1[1];
  if (v9 == (char *)*a1)
  {
    *a1 = v16;
    a1[1] = v8;
    a1[2] = *((_QWORD *)&v17 + 1);
  }
  else
  {
    v11 = 0;
    do
    {
      sub_20EF0A098(v16 + v11 - 88, (uint64_t *)&v9[v11 - 88]);
      v11 -= 88;
    }
    while (&v9[v11] != v10);
    v9 = (char *)*a1;
    v12 = (char *)a1[1];
    *a1 = v16 + v11;
    *(_QWORD *)&v17 = v16 + 88;
    *(_OWORD *)(a1 + 1) = v17;
    v8 = v16 + 88;
    while (v12 != v9)
    {
      v13 = (void *)*((_QWORD *)v12 - 4);
      if (v13)
      {
        *((_QWORD *)v12 - 3) = v13;
        operator delete(v13);
      }
      v14 = (void *)*((_QWORD *)v12 - 8);
      if (v14)
      {
        *((_QWORD *)v12 - 7) = v14;
        operator delete(v14);
      }
      v12 -= 88;
    }
  }
  if (v9)
    operator delete(v9);
  return v8;
}

void sub_20EF43E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EF43BF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF43E20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a2);
  for (; v2; v2 += 88)
  {
    v5 = v3 + v2;
    v6 = *(void **)(v3 + v2 + 56);
    if (v6)
    {
      *(_QWORD *)(v5 + 64) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(v5 + 24);
    if (v7)
    {
      *(_QWORD *)(v3 + v2 + 32) = v7;
      operator delete(v7);
    }
  }
  sub_20EF43BF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF43E6C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x155;
  v4 = v2 - 341;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v38 = (v5 - v9) >> 2;
    if (v5 == v9)
      v38 = 1;
    if (v38 >> 61)
      goto LABEL_109;
    v39 = v38 >> 2;
    v40 = 8 * v38;
    v41 = (char *)operator new(8 * v38);
    v42 = &v41[8 * v39];
    v44 = v5 - v7;
    v43 = v5 == v7;
    v5 = v42;
    if (!v43)
    {
      v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
      v45 = v44 - 8;
      if ((unint64_t)(v44 - 8) >= 0x38)
      {
        v92 = &v41[8 * v39];
        v46 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v45 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v42[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v46 = &v41[8 * v39];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v46 = v99;
        v46 += 8;
      }
      while (v46 != v5);
    }
LABEL_89:
    *a1 = v41;
    a1[1] = v42;
    a1[2] = v5;
    a1[3] = &v41[v40];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0xFFCuLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v47 = &v72[8 * v70];
      v73 = v47;
      if (v18 != v19)
      {
        v73 = &v47[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v47[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v47;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v47 = (char *)a1[1];
      }
    }
    else
    {
      v47 = v19;
    }
    *((_QWORD *)v47 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v43 = v5 == v84;
      v5 = v105;
      if (!v43)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    sub_20E877A38();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0xFFCuLL);
  v30 = v29;
  v31 = &v28[8 * v22];
  v32 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v21 >> 2;
      if (v48 >> 61)
        sub_20E877A38();
      v31 = (char *)operator new(8 * v48);
      v32 = &v31[8 * v48];
      operator delete(v28);
      v49 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v31;
      *(_QWORD *)v31 = v30;
      v34 = v31 + 8;
      if (v18 == v49)
        goto LABEL_25;
      do
      {
LABEL_44:
        if (v31 == v28)
        {
          if (v34 >= v32)
          {
            if (v32 == v31)
              v54 = 1;
            else
              v54 = (v32 - v31) >> 2;
            if (v54 >> 61)
              sub_20E877A38();
            v55 = (char *)operator new(8 * v54);
            v28 = v55;
            v56 = (v54 + 3) >> 2;
            v50 = &v55[8 * v56];
            v36 = v50;
            v57 = v34 - v31;
            if (v34 != v31)
            {
              v36 = &v50[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = v57 - 8;
              v59 = &v55[8 * v56];
              v60 = v31;
              if (v58 < 0x38)
                goto LABEL_114;
              v61 = 8 * v56;
              v59 = &v55[8 * v56];
              v60 = v31;
              if ((unint64_t)(v59 - v31) < 0x20)
                goto LABEL_114;
              v62 = (v58 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = &v50[v63];
              v60 = &v31[v63];
              v64 = (__int128 *)(v31 + 16);
              v65 = &v55[v61 + 16];
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *((_OWORD *)v65 - 1) = *(v64 - 1);
                *(_OWORD *)v65 = v67;
                v64 += 2;
                v65 += 32;
                v66 -= 4;
              }
              while (v66);
              if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_114:
                do
                {
                  v68 = *(_QWORD *)v60;
                  v60 += 8;
                  *(_QWORD *)v59 = v68;
                  v59 += 8;
                }
                while (v59 != v36);
              }
            }
            v32 = &v55[8 * v54];
            operator delete(v31);
          }
          else
          {
            v52 = (v32 - v34) >> 3;
            if (v52 >= -1)
              v53 = v52 + 1;
            else
              v53 = v52 + 2;
            v36 = &v34[8 * (v53 >> 1)];
            v50 = &v31[8 * (v53 >> 1)];
            if (v34 == v31)
            {
              v28 = v34;
            }
            else
            {
              memmove(&v31[8 * (v53 >> 1)], v31, v34 - v31);
              v28 = v31;
            }
          }
        }
        else
        {
          v50 = v31;
          v36 = v34;
        }
        v51 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v50 - 1) = v51;
        v35 = v50 - 8;
        v34 = v36;
        v31 = v35;
      }
      while (v18 != (char *)a1[1]);
      goto LABEL_26;
    }
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v31 -= 8 * (v33 >> 1);
  }
  *(_QWORD *)v31 = v29;
  v34 = v31 + 8;
  if (v18 != v19)
    goto LABEL_44;
LABEL_25:
  v35 = v31;
  v36 = v34;
LABEL_26:
  v37 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v36;
  a1[3] = v32;
  if (v37)
    operator delete(v37);
}

void sub_20EF444D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EF444F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EF44504(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EF4451C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF44534(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 170;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 341;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_20EF445F8(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  __int128 v21;

  v2 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_20E867F44();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v5 = 0x2E8BA2E8BA2E8BALL;
  else
    v5 = v3;
  if (v5 > 0x2E8BA2E8BA2E8BALL)
    sub_20E877A38();
  v7 = 88 * v5;
  v8 = (char *)operator new(88 * v5);
  v9 = &v8[88 * v2];
  v10 = &v8[v7];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v9 + 12) = *(_QWORD *)(a2 + 12);
  *((_DWORD *)v9 + 5) = *(_DWORD *)(a2 + 20);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *((_QWORD *)v9 + 5) = v11;
  *((_QWORD *)v9 + 6) = v12;
  *((_QWORD *)v9 + 8) = 0;
  *((_QWORD *)v9 + 9) = 0;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *((_QWORD *)v9 + 10) = *(_QWORD *)(a2 + 80);
  v13 = v9 + 88;
  *(_QWORD *)&v21 = v9 + 88;
  *((_QWORD *)&v21 + 1) = v10;
  v15 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      sub_20EF0A098((uint64_t)&v9[v16 - 88], (uint64_t *)&v14[v16 - 88]);
      v16 -= 88;
    }
    while (&v14[v16] != v15);
    v14 = *a1;
    v17 = a1[1];
    *a1 = &v9[v16];
    *(_OWORD *)(a1 + 1) = v21;
    v13 = (char *)v21;
    while (v17 != v14)
    {
      v18 = (void *)*((_QWORD *)v17 - 4);
      if (v18)
      {
        *((_QWORD *)v17 - 3) = v18;
        operator delete(v18);
      }
      v19 = (void *)*((_QWORD *)v17 - 8);
      if (v19)
      {
        *((_QWORD *)v17 - 7) = v19;
        operator delete(v19);
      }
      v17 -= 88;
    }
  }
  if (v14)
    operator delete(v14);
  return v13;
}

void sub_20EF4483C(uint64_t a1, uint64_t a2)
{
  float *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  size_t v11;
  float *v12;
  size_t v13;
  int v14;
  void *v15;
  size_t v16;
  unint64_t v17;

  v4 = *(float **)a1;
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (*(float **)v6 == v4 || *(float **)v5 == v4)
  {
    v9 = *(_DWORD *)(v6 + 16);
    v10 = *(_DWORD *)(v5 + 16);
    v11 = (4 * v10 * v9 + 31) & 0x7FFFFFFE0;
    v16 = v11 >> 2;
    v15 = operator new(v11, (std::align_val_t)0x20uLL);
    v17 = __PAIR64__(v10, v9);
    sub_20EF4483C(&v15, a2);
    v12 = *(float **)a1;
    v13 = v16;
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v17;
    if (v12)
      MEMORY[0x212BC6368](v12, 0x1000C8052888210);
  }
  else
  {
    v7 = *(_DWORD *)(v6 + 16);
    if (v7 && (v8 = *(_DWORD *)(v5 + 16)) != 0)
    {
      sub_20E8BE588(0, 0, v7, v8, 3, *(const float **)v6, v7, *(float **)v5, *(float *)(a2 + 24), 0.0, 3, v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v14 = *(_DWORD *)(a1 + 20);
      if (v14 * *(_DWORD *)(a1 + 16))
        bzero(v4, 4 * (v14 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20EF4496C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EF44994(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  char *v15;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_22;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_22:
      sub_20E867F44();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    v12 = a3 - __src;
    if (v12)
      result = memcpy(result, __src, v12);
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  v13 = (_BYTE *)result[1];
  v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    v12 = a3 - __src;
    if (v12)
      result = memmove((void *)*result, __src, v12);
    goto LABEL_21;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    result = memmove((void *)*result, __src, v14);
    v9 = (char *)v7[1];
  }
  if (a3 != v15)
    result = memmove(v9, v15, a3 - v15);
  v7[1] = &v9[a3 - v15];
  return result;
}

uint64_t sub_20EF44ADC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  int v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v5 = a2[1];
  v4 = a2[2];
  v6 = *a2;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)a1 = v6;
  sub_20EF44CA8((_QWORD *)(a1 + 56), vcvtps_u32_f32(180.0 / *(float *)a1));
  sub_20EF44CA8((_QWORD *)(a1 + 80), vcvtps_u32_f32(180.0 / *(float *)a1));
  *(float *)(a1 + 104) = *(float *)a2 * 0.017453;
  *(float32x2_t *)(a1 + 108) = vmul_f32(*(float32x2_t *)((char *)a2 + 24), *(float32x2_t *)((char *)a2 + 24));
  *(float *)(a1 + 116) = *((float *)a2 + 9) * *((float *)a2 + 9);
  v7 = 5489;
  *(_DWORD *)(a1 + 120) = 5489;
  v8 = 1;
  for (i = 31; i != 654; ++i)
  {
    v10 = 1812433253 * (v7 ^ (v7 >> 30));
    v7 = v10 + v8;
    *(_DWORD *)(a1 + 4 * i) = i + v10 - 30;
    ++v8;
  }
  *(_QWORD *)(a1 + 2616) = 0;
  v11 = (std::__shared_weak_count *)operator new(0x28uLL);
  v12 = v11;
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F558;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24CA1F5A8;
  LODWORD(v11[1].__shared_owners_) = 5489;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  *(_QWORD *)(a1 + 2624) = &off_24CA1F4F8;
  *(_QWORD *)(a1 + 2632) = v11 + 1;
  *(_QWORD *)(a1 + 2640) = v11;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
  }
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return a1;
}

_QWORD *sub_20EF44CA8(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20EF47464();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20EF44D50(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EF44DA8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, double a5, double a6, float32x4_t a7, double a8, float32x4_t a9)
{
  _QWORD *v10;
  float v11;
  float v12;
  float v13;
  signed int v14;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int *v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  _OWORD *v36;
  unsigned int *v37;
  uint64_t v38;
  __int128 v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int *v43;
  unint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  unsigned int *v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  _OWORD *v59;
  unsigned int *v60;
  uint64_t v61;
  __int128 v62;
  unsigned int v63;
  int v64;
  signed int v65;
  signed int v66;
  _QWORD *v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  float32x2_t v71;
  uint64_t v72;

  v10 = (_QWORD *)a1;
  v71 = 0;
  v72 = 0;
  sub_20EF47478((int32x2_t *)a2, (int32x2_t *)a3, (unint64_t *)(a2 + 8), (uint64_t *)(a3 + 8), &v72, &v71, (float32x2_t)*(unsigned int *)(a1 + 104), *(float32_t *)(a1 + 4), a7, a8, a9);
  v11 = sqrtf(v71.f32[0]);
  v12 = 3.0;
  if (v11 <= 3.0)
    v12 = v11;
  v13 = sqrtf(v71.f32[1]);
  v14 = llroundf(*(float *)&v72 - v12);
  if (v13 > 2.0)
    v13 = 2.0;
  v65 = llroundf(*(float *)&v72 + v12);
  if (v14 <= v65 && a4 != 0)
  {
    v68 = llroundf(*((float *)&v72 + 1) + v13);
    v69 = llroundf(*((float *)&v72 + 1) - v13);
    v64 = -1431655765 * ((v10[8] - v10[7]) >> 3);
    v67 = v10;
    do
    {
      v16 = 0;
      v66 = v14;
      v17 = (v14 + v64) % v64;
      v70 = v17;
      do
      {
        while (1)
        {
          v18 = v10[7] + 24 * v17;
          v19 = (uint64_t *)(v18 + 8);
          v20 = *(unsigned int **)(v18 + 8);
          v21 = *(_QWORD *)(v18 + 16);
          if ((unint64_t)v20 < v21)
          {
            *v20 = v69;
            v22 = (uint64_t)(v20 + 1);
            goto LABEL_36;
          }
          v23 = *(unsigned int **)v18;
          v24 = (uint64_t)v20 - *(_QWORD *)v18;
          v25 = v24 >> 2;
          v26 = (v24 >> 2) + 1;
          if (v26 >> 62)
            sub_20EABADD4();
          v27 = v21 - (_QWORD)v23;
          if (v27 >> 1 > v26)
            v26 = v27 >> 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            if (v28 >> 62)
              goto LABEL_58;
            v29 = operator new(4 * v28);
            v30 = (unsigned int *)&v29[4 * v25];
            *v30 = v69;
            v22 = (uint64_t)(v30 + 1);
            v31 = (char *)v20 - (char *)v23;
            if (v20 == v23)
              goto LABEL_33;
LABEL_27:
            v32 = v31 - 4;
            if (v32 < 0x2C)
              goto LABEL_63;
            if ((unint64_t)((char *)v20 - v29 - v24) < 0x20)
              goto LABEL_63;
            v33 = (v32 >> 2) + 1;
            v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
            v35 = &v20[v34 / 0xFFFFFFFFFFFFFFFCLL];
            v30 = (unsigned int *)((char *)v30 - v34);
            v36 = &v29[4 * v25 - 16];
            v37 = v20 - 4;
            v38 = v33 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v39 = *(_OWORD *)v37;
              *(v36 - 1) = *((_OWORD *)v37 - 1);
              *v36 = v39;
              v36 -= 2;
              v37 -= 8;
              v38 -= 8;
            }
            while (v38);
            v20 = v35;
            if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_63:
              do
              {
                v40 = *--v20;
                *--v30 = v40;
              }
              while (v20 != v23);
            }
            goto LABEL_33;
          }
          v29 = 0;
          v30 = (unsigned int *)(4 * v25);
          *(_DWORD *)(4 * v25) = v69;
          v22 = 4 * v25 + 4;
          v31 = (char *)v20 - (char *)v23;
          if (v20 != v23)
            goto LABEL_27;
LABEL_33:
          *(_QWORD *)v18 = v30;
          *v19 = v22;
          *(_QWORD *)(v18 + 16) = &v29[4 * v28];
          if (v23)
            operator delete(v23);
          v10 = v67;
          v17 = v70;
LABEL_36:
          *v19 = v22;
          v41 = v10[10] + 24 * v17;
          v42 = (uint64_t *)(v41 + 8);
          v43 = *(unsigned int **)(v41 + 8);
          v44 = *(_QWORD *)(v41 + 16);
          if ((unint64_t)v43 >= v44)
            break;
          *v43 = v68;
          *v42 = (uint64_t)(v43 + 1);
          if (++v16 >= a4)
            goto LABEL_11;
        }
        v45 = *(unsigned int **)v41;
        v46 = (uint64_t)v43 - *(_QWORD *)v41;
        v47 = v46 >> 2;
        v48 = (v46 >> 2) + 1;
        if (v48 >> 62)
          sub_20EABADD4();
        v49 = v44 - (_QWORD)v45;
        if (v49 >> 1 > v48)
          v48 = v49 >> 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (!v50)
        {
          v51 = 0;
          v52 = (unsigned int *)(4 * v47);
          *(_DWORD *)(4 * v47) = v68;
          v53 = 4 * v47 + 4;
          v54 = (char *)v43 - (char *)v45;
          if (v43 == v45)
            goto LABEL_54;
LABEL_48:
          v55 = v54 - 4;
          if (v55 < 0x2C)
            goto LABEL_64;
          if ((unint64_t)((char *)v43 - &v51[v46]) < 0x20)
            goto LABEL_64;
          v56 = (v55 >> 2) + 1;
          v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
          v58 = &v43[v57 / 0xFFFFFFFFFFFFFFFCLL];
          v52 = (unsigned int *)((char *)v52 - v57);
          v59 = &v51[4 * v47 - 16];
          v60 = v43 - 4;
          v61 = v56 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v62 = *(_OWORD *)v60;
            *(v59 - 1) = *((_OWORD *)v60 - 1);
            *v59 = v62;
            v59 -= 2;
            v60 -= 8;
            v61 -= 8;
          }
          while (v61);
          v43 = v58;
          if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_64:
            do
            {
              v63 = *--v43;
              *--v52 = v63;
            }
            while (v43 != v45);
          }
          goto LABEL_54;
        }
        if (v50 >> 62)
LABEL_58:
          sub_20E877A38();
        v51 = operator new(4 * v50);
        v52 = (unsigned int *)&v51[4 * v47];
        *v52 = v68;
        v53 = (uint64_t)(v52 + 1);
        v54 = (char *)v43 - (char *)v45;
        if (v43 != v45)
          goto LABEL_48;
LABEL_54:
        *(_QWORD *)v41 = v52;
        *v42 = v53;
        *(_QWORD *)(v41 + 16) = &v51[4 * v50];
        if (v45)
          operator delete(v45);
        v10 = v67;
        v17 = v70;
        *v42 = v53;
        ++v16;
      }
      while (v16 < a4);
LABEL_11:
      v14 = v66 + 1;
    }
    while (v66 != v65);
  }
}

void sub_20EF451CC(uint64_t a1@<X0>, char **a2@<X1>, _QWORD *a3@<X2>, char **a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float32x2_t v33;
  float v34;
  float v35;
  BOOL v36;
  __int128 *v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  float32x4_t v43;
  float32x2_t v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  float32x2_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  float *v88;
  int64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char **v95;
  float v96;
  float v97;
  float v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unsigned __int16 v107;
  unsigned int v108;
  size_t v109;
  int *v110;
  unsigned __int16 v111;
  unsigned __int16 v112;
  int *v113;
  int *v114;
  unsigned int v115;
  unsigned int v116;
  __int16 v117;
  unsigned int *v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int *v123;
  int64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  int *v130;
  char *v131;
  uint64_t v132;
  int64_t v133;
  unint64_t v134;
  int *v135;
  int v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _OWORD *v140;
  int *v141;
  uint64_t v142;
  int *v143;
  float32x2_t *v144;
  float32x2_t *v145;
  uint64_t v146;
  uint64_t v147;
  float v148;
  BOOL v149;
  uint64_t v151;
  char *v152;
  char *v153;
  float *v154;
  unint64_t v155;
  uint64_t *v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  float v163;
  uint64_t v164;
  _QWORD *v165;
  int32x2_t v166;
  float32x2_t v167;
  float32x2_t v168;
  int32x2_t v169;
  float **v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  float v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  BOOL v178;
  unint64_t v179;
  int v180;
  float v181;
  unsigned __int8 v182;
  float v183;
  float v184;
  float v185;
  float32x2_t v186;
  float32x2_t v187;
  float v188;
  float32x2_t v190;
  float32x2_t v191;
  float v192;
  float v193;
  float *v194;
  float *v195;
  float v196;
  float v197;
  unint64_t v198;
  unsigned __int16 v199;
  float *v200;
  float *v201;
  _WORD *v202;
  unint64_t v203;
  float32x4_t v204;
  float32x4_t v205;
  int8x16_t v206;
  __int32 *v207;
  int64x2_t v208;
  uint64_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int64x2_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  int8x16_t v226;
  int8x16_t v227;
  float32x4_t v228;
  float32x4_t v229;
  int32x4_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int64x2_t v234;
  int32x4_t v235;
  int64x2_t v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float *v243;
  float *v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  unint64_t v251;
  unint64_t v252;
  char *v253;
  float *v254;
  float *v255;
  uint64_t v256;
  int v257;
  char *v258;
  char *v259;
  int v260;
  unint64_t v261;
  char *v262;
  float v263;
  float v264;
  unint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  _BYTE *v275;
  uint64_t v276;
  char *v277;
  char *v278;
  unint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  char *v285;
  unint64_t v286;
  unint64_t v287;
  _QWORD *v288;
  _QWORD *v289;
  unint64_t v290;
  char *v291;
  char *v292;
  char *v293;
  unint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  float v303;
  float v304;
  BOOL v305;
  float v306;
  float v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  char *v313;
  unint64_t v314;
  _BYTE *v315;
  char *v316;
  char *v317;
  unint64_t v318;
  char *v319;
  uint64_t v320;
  char *v321;
  char *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _OWORD *v326;
  char *v327;
  uint64_t v328;
  __int128 v329;
  unsigned __int8 v330;
  uint64_t v331;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  _QWORD *v336;
  unint64_t v337;
  unint64_t v338;
  char **v339;
  _QWORD *v340;
  float v341;
  char *v342;
  _BYTE *v343;
  uint64_t v344;
  float *v345;
  char *v346;
  float32x4_t v347;
  unsigned int v348;
  float *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unsigned int v353;
  unsigned int v354;
  void *v355;
  unsigned int *v356;
  uint64_t v357;
  void *__p;
  unint64_t v359;
  int *v360;

  kdebug_trace();
  sub_20EF471C4(&__p);
  v339 = a2;
  v340 = a3;
  v351 = a1;
  if (**((int **)__p + 7) <= 1)
  {
    v12 = atomic_load((unsigned __int8 *)&qword_254A60320);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A60320))
    {
      qword_254A60318[0] = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_HoughLineDetect");
      __cxa_guard_release(&qword_254A60320);
    }
    v13 = qword_254A60318[0];
    *(_BYTE *)(qword_254A60318[0] + 16) = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v13 = std::chrono::steady_clock::now();
    *(_BYTE *)(v13 + 16) = 1;
  }
  v15 = *(char **)(a1 + 56);
  v14 = *(char **)(a1 + 64);
  if (v15 != v14)
  {
    v16 = v14 - v15 - 24;
    v17 = *(char **)(a1 + 56);
    if (v16 < 0x18)
      goto LABEL_398;
    v18 = v16 / 0x18 + 1;
    v17 = &v15[24 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    v19 = (uint64_t *)(v15 + 24);
    v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v21 = *v19;
      *(v19 - 2) = *(v19 - 3);
      v19[1] = v21;
      v19 += 6;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_398:
      do
      {
        *((_QWORD *)v17 + 1) = *(_QWORD *)v17;
        v17 += 24;
      }
      while (v17 != v14);
    }
  }
  v23 = *(char **)(a1 + 80);
  v22 = *(char **)(a1 + 88);
  if (v23 != v22)
  {
    v24 = v22 - v23 - 24;
    v25 = *(char **)(a1 + 80);
    if (v24 < 0x18)
      goto LABEL_399;
    v26 = v24 / 0x18 + 1;
    v25 = &v23[24 * (v26 & 0x1FFFFFFFFFFFFFFELL)];
    v27 = (uint64_t *)(v23 + 24);
    v28 = v26 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v29 = *v27;
      *(v27 - 2) = *(v27 - 3);
      v27[1] = v29;
      v27 += 6;
      v28 -= 2;
    }
    while (v28);
    if (v26 != (v26 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_399:
      do
      {
        *((_QWORD *)v25 + 1) = *(_QWORD *)v25;
        v25 += 24;
      }
      while (v25 != v22);
    }
  }
  v31 = *a3;
  v30 = a3[1];
  if (*a3 == v30)
    goto LABEL_103;
  v32 = *(float *)(a1 + 108);
  v344 = a3[1];
  do
  {
    v33 = *(float32x2_t *)v31;
    *(float32x2_t *)&v7 = vsub_f32(*(float32x2_t *)(v31 + 8), *(float32x2_t *)v31);
    *(int32x2_t *)v9.f32 = vdup_lane_s32(*(int32x2_t *)&v7, 1);
    *(float32x2_t *)&v8 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v7, *(float32x2_t *)&v7), *(float32x2_t *)v9.f32, *(float32x2_t *)&v7, 1);
    if (*(float *)&v8 >= v32)
      goto LABEL_19;
    v34 = sqrtf(*(float *)&v8);
    v35 = fabsf(v34);
    v36 = v34 != 0.0 && v35 > 0.000001;
    if (v36)
    {
      v9 = *(float32x4_t *)(v31 + 16);
      v10 = *(float32x4_t *)(v31 + 32);
      v42 = *(unsigned __int16 *)(v31 + 48);
      v359 = 0;
      v360 = 0;
      __p = 0;
      if (v42)
      {
        v43.i64[0] = 0x3F0000003F000000;
        v43.i64[1] = 0x3F0000003F000000;
        v347 = vmulq_f32(vaddq_f32(v9, v10), v43);
        v341 = v34 / (float)v42;
        v44 = vmul_n_f32(*(float32x2_t *)&v7, 1.0 / v34);
        v45 = 24 * v42;
        v39 = (char *)operator new(24 * v42);
        v46 = 0;
        v47 = &v39[v45];
        v48 = vmul_n_f32(v44, v341);
        v49 = v39;
        do
        {
          while (v49 < v47)
          {
            *(float32x2_t *)v49 = v33;
            DWORD1(v7) = v347.i32[1];
            *(float32x4_t *)(v49 + 8) = v347;
            v40 = v49 + 24;
            v33 = vadd_f32(v48, v33);
            ++v46;
            v49 += 24;
            if (v46 >= *(unsigned __int16 *)(v31 + 48))
              goto LABEL_45;
          }
          v50 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v39) >> 3) + 1;
          if (v50 > 0xAAAAAAAAAAAAAAALL)
          {
            v359 = (unint64_t)v49;
            v360 = (int *)v47;
            __p = v39;
            sub_20E867F44();
          }
          if (0x5555555555555556 * ((v47 - v39) >> 3) > v50)
            v50 = 0x5555555555555556 * ((v47 - v39) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v47 - v39) >> 3) >= 0x555555555555555)
            v51 = 0xAAAAAAAAAAAAAAALL;
          else
            v51 = v50;
          if (v51 > 0xAAAAAAAAAAAAAAALL)
          {
            v360 = (int *)v47;
            __p = v39;
            sub_20E877A38();
          }
          v52 = (char *)operator new(24 * v51);
          v53 = &v52[8 * ((v49 - v39) >> 3)];
          v47 = &v52[24 * v51];
          *(float32x2_t *)v53 = v33;
          *(float32x4_t *)(v53 + 8) = v347;
          v40 = v53 + 24;
          if (v49 == v39)
            goto LABEL_43;
          do
          {
            v54 = *((_QWORD *)v49 - 3);
            v49 -= 24;
            *((_QWORD *)v53 - 3) = v54;
            v53 -= 24;
            v7 = *(_OWORD *)(v49 + 8);
            *(_OWORD *)(v53 + 8) = v7;
          }
          while (v49 != v39);
          if (v39)
LABEL_43:
            operator delete(v39);
          v39 = v53;
          a3 = v340;
          v33 = vadd_f32(v48, v33);
          ++v46;
          v49 = v40;
        }
        while (v46 < *(unsigned __int16 *)(v31 + 48));
LABEL_45:
        if (v40 - v39 < 1)
          goto LABEL_88;
        v55 = 0xAAAAAAAAAAAAAAABLL * ((v40 - v39) >> 3);
        v57 = *v339;
        v56 = (unint64_t)v339[1];
        v58 = (uint64_t)(v56 - (_QWORD)*v339) / 24;
        v59 = (uint64_t)&(*v339)[24 * v58];
        v60 = v339[2];
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v60[-v56] >> 3)) < v55)
        {
          v61 = v58 - 0x5555555555555555 * ((v40 - v39) >> 3);
          if (v61 > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          v62 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v57) >> 3);
          if (2 * v62 > v61)
            v61 = 2 * v62;
          if (v62 >= 0x555555555555555)
            v63 = 0xAAAAAAAAAAAAAAALL;
          else
            v63 = v61;
          if (v63)
          {
            if (v63 > 0xAAAAAAAAAAAAAAALL)
              sub_20E877A38();
            v64 = (char *)operator new(24 * v63);
          }
          else
          {
            v64 = 0;
          }
          v75 = &v64[24 * v58];
          v76 = &v75[24 * v55];
          v77 = v75;
          v78 = v39;
          do
          {
            *(_QWORD *)v77 = *(_QWORD *)v78;
            v7 = *(_OWORD *)(v78 + 8);
            *(_OWORD *)(v77 + 8) = v7;
            v77 += 24;
            v78 += 24;
          }
          while (v77 != v76);
          v79 = *v339;
          if (*v339 != (char *)v59)
          {
            v80 = 24 * v58;
            v81 = v64;
            do
            {
              v82 = &v81[v80];
              *((_QWORD *)v82 - 3) = *(_QWORD *)&v57[v80 - 24];
              v7 = *(_OWORD *)&v57[v80 - 16];
              *((_OWORD *)v82 - 1) = v7;
              v57 -= 24;
              v81 -= 24;
            }
            while (&v57[v80] != v79);
            v75 = &v81[24 * v58];
          }
          v83 = v339[1];
          if (v83 == (char *)v59)
          {
            a3 = v340;
          }
          else
          {
            a3 = v340;
            do
            {
              *(_QWORD *)v76 = *(_QWORD *)v59;
              v7 = *(_OWORD *)(v59 + 8);
              *(_OWORD *)(v76 + 8) = v7;
              v76 += 24;
              v59 += 24;
            }
            while ((char *)v59 != v83);
          }
          v84 = *v339;
          *v339 = v75;
          v339[1] = v76;
          v339[2] = &v64[24 * v63];
          if (v84)
            operator delete(v84);
          goto LABEL_88;
        }
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - v59) >> 3)) >= v55)
        {
          v65 = &v39[8 * ((v40 - v39) >> 3)];
          v66 = v339[1];
          a3 = v340;
          v69 = 8 * ((v40 - v39) >> 3);
          v70 = v56 - v69;
          v71 = v66;
          if (v56 - v69 >= v56)
          {
LABEL_65:
            v339[1] = v71;
            if (v66 != (char *)(v59 + v69))
            {
              v72 = v66 - 24;
              v73 = 8 * ((uint64_t)&v66[-v59 - v69] >> 3);
              do
              {
                *(_QWORD *)v72 = *(_QWORD *)(v59 + v73 - 24);
                v7 = *(_OWORD *)(v59 + v73 - 16);
                *(_OWORD *)(v72 + 8) = v7;
                v72 -= 24;
                v73 -= 24;
              }
              while (v73);
            }
            if (v65 != v39)
            {
              v74 = v39;
              do
              {
                *(_QWORD *)v59 = *(_QWORD *)v74;
                v7 = *(_OWORD *)(v74 + 8);
                *(_OWORD *)(v59 + 8) = v7;
                v74 += 24;
                v59 += 24;
              }
              while (v74 != v65);
            }
            goto LABEL_88;
          }
        }
        else
        {
          v65 = &v39[8 * ((uint64_t)(v56 - v59) >> 3)];
          a3 = v340;
          v66 = v339[1];
          if (v65 != v40)
          {
            v67 = &v39[8 * ((uint64_t)(v56 - v59) >> 3)];
            v68 = v339[1];
            do
            {
              *(_QWORD *)v68 = *(_QWORD *)v67;
              v7 = *(_OWORD *)(v67 + 8);
              *(_OWORD *)(v68 + 8) = v7;
              v66 += 24;
              v67 += 24;
              v68 += 24;
            }
            while (v67 != v40);
          }
          v339[1] = v66;
          if ((uint64_t)(v56 - v59) < 1)
            goto LABEL_88;
          v69 = 8 * ((v40 - v39) >> 3);
          v70 = (unint64_t)&v66[-v69];
          v71 = v66;
          if ((unint64_t)&v66[-v69] >= v56)
            goto LABEL_65;
        }
        do
        {
          *(_QWORD *)v71 = *(_QWORD *)v70;
          v7 = *(_OWORD *)(v70 + 8);
          *(_OWORD *)(v71 + 8) = v7;
          v71 += 24;
          v70 += 24;
        }
        while (v70 < v56);
        goto LABEL_65;
      }
    }
    else if (*(_WORD *)(v31 + 48))
    {
      v37 = (__int128 *)(v31 + 16);
      v38 = 24 * *(unsigned __int16 *)(v31 + 48);
      v39 = (char *)operator new(v38);
      __p = v39;
      v359 = (unint64_t)v39;
      v40 = &v39[v38];
      v41 = v39;
      do
      {
        *(float32x2_t *)v41 = v33;
        v7 = *v37;
        *(_OWORD *)(v41 + 8) = *v37;
        v41 += 24;
      }
      while (v41 != v40);
      goto LABEL_45;
    }
    v39 = 0;
LABEL_88:
    if (v39)
      operator delete(v39);
    v30 = v344;
LABEL_19:
    v31 += 52;
  }
  while (v31 != v30);
  v31 = *a3;
  v85 = a3[1];
  if (*a3 != v85)
  {
    while (1)
    {
      *(float32x2_t *)&v7 = vsub_f32(*(float32x2_t *)(v31 + 8), *(float32x2_t *)v31);
      *(int32x2_t *)&v8 = vdup_lane_s32(*(int32x2_t *)&v7, 1);
      *(float32x2_t *)v9.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v7, *(float32x2_t *)&v7), *(float32x2_t *)&v8, *(float32x2_t *)&v7, 1);
      if (v9.f32[0] < v32)
        break;
      v31 += 52;
      if (v31 == v85)
        goto LABEL_102;
    }
    if (v31 == v85 || (v86 = v31 + 52, v31 + 52 == v85))
    {
      if (v31 != v85)
      {
LABEL_97:
        a3[1] = v31;
        goto LABEL_103;
      }
    }
    else
    {
      do
      {
        *(_QWORD *)&v7 = *(_QWORD *)v86;
        *(float32x2_t *)&v8 = vsub_f32(*(float32x2_t *)(v86 + 8), *(float32x2_t *)v86);
        *(int32x2_t *)v9.f32 = vdup_lane_s32(*(int32x2_t *)&v8, 1);
        *(float32x2_t *)v10.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v8, *(float32x2_t *)&v8), *(float32x2_t *)v9.f32, *(float32x2_t *)&v8, 1);
        if (v10.f32[0] >= v32)
        {
          *(_QWORD *)v31 = v7;
          *(_QWORD *)(v31 + 8) = *(_QWORD *)(v86 + 8);
          *(_OWORD *)(v31 + 16) = *(_OWORD *)(v86 + 16);
          v7 = *(_OWORD *)(v86 + 32);
          *(_OWORD *)(v31 + 32) = v7;
          *(_WORD *)(v31 + 48) = *(_WORD *)(v86 + 48);
          v31 += 52;
        }
        v86 += 52;
      }
      while (v86 != v85);
      v85 = a3[1];
      if (v31 != v85)
        goto LABEL_97;
    }
LABEL_102:
    v31 = v85;
  }
LABEL_103:
  v88 = (float *)*v339;
  v87 = (uint64_t *)v339[1];
  v89 = (char *)v87 - *v339;
  v90 = 0xAAAAAAAAAAAAAAABLL * (v89 >> 3);
  if (v90 <= 1 && v31 == *v340)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_366;
  }
  if (v88 != (float *)v87)
  {
    v91 = ((v90 - 1) * v90) >> 1;
    if (*(_DWORD *)(a1 + 32) < v91)
      LODWORD(v91) = *(_DWORD *)(a1 + 32);
    v348 = v91;
    if (v90 > 0xAAAAAAAAAAAAAAALL)
      sub_20EF47464();
    v92 = (char *)operator new(v89);
    v93 = &v92[24 * v90];
    v94 = v92;
    v95 = v339;
    do
    {
      while (1)
      {
        v96 = sqrtf(v88[2] + v88[2]);
        v97 = 0.0;
        if (v96 != 0.0 && v96 > 0.000001)
          v97 = (float)(v88[4] + v88[4]) / v96;
        v99 = sqrtf((float)(v88[5] + v88[5]) - (float)(v97 * v97));
        v100 = *(_QWORD *)v88;
        if (v94 >= v93)
          break;
        *(_QWORD *)v94 = v100;
        *((float *)v94 + 2) = v96;
        *((float *)v94 + 3) = v97;
        *((_DWORD *)v94 + 4) = 0;
        *((float *)v94 + 5) = v99;
        v88 += 6;
        v94 += 24;
        if (v88 == (float *)v87)
          goto LABEL_130;
      }
      v101 = 0xAAAAAAAAAAAAAAABLL * ((v94 - v92) >> 3) + 1;
      if (v101 > 0xAAAAAAAAAAAAAAALL)
        sub_20EF47464();
      if (0x5555555555555556 * ((v93 - v92) >> 3) > v101)
        v101 = 0x5555555555555556 * ((v93 - v92) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v93 - v92) >> 3) >= 0x555555555555555)
        v102 = 0xAAAAAAAAAAAAAAALL;
      else
        v102 = v101;
      if (v102 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v103 = (char *)operator new(24 * v102);
      v104 = &v103[8 * ((v94 - v92) >> 3)];
      *(_QWORD *)v104 = v100;
      *((float *)v104 + 2) = v96;
      *((float *)v104 + 3) = v97;
      v93 = &v103[24 * v102];
      *((_DWORD *)v104 + 4) = 0;
      *((float *)v104 + 5) = v99;
      v105 = v104 + 24;
      if (v94 == v92)
        goto LABEL_128;
      do
      {
        v106 = *((_QWORD *)v94 - 3);
        v94 -= 24;
        *((_QWORD *)v104 - 3) = v106;
        v104 -= 24;
        v7 = *(_OWORD *)(v94 + 8);
        *(_OWORD *)(v104 + 8) = v7;
      }
      while (v94 != v92);
      if (v92)
LABEL_128:
        operator delete(v92);
      v92 = v104;
      v95 = v339;
      v88 += 6;
      v94 = v105;
    }
    while (v88 != (float *)v87);
LABEL_130:
    v107 = -21845 * ((v95[1] - *v95) >> 3);
    if (v107 > 0x12CuLL)
    {
      if ((unsigned __int16)(-21845 * ((v95[1] - *v95) >> 3)) >= 2u && v348)
      {
        v109 = 4 * v348;
        v110 = (int *)operator new(v109);
        v111 = v107 - 1;
        v112 = v107 - 2;
        bzero(v110, v109);
        v113 = &v110[v109 / 4];
        v114 = v110;
        do
        {
          v115 = sub_20EF472B8(a1 + 120, 0, v111);
          v116 = sub_20EF472B8(a1 + 120, 0, v112);
          if (v116 < v115)
            v117 = v116;
          else
            v117 = v116 + 1;
          *(_WORD *)v114 = v115;
          *((_WORD *)v114++ + 1) = v117;
        }
        while (v114 != v113);
        goto LABEL_185;
      }
    }
    else
    {
      v354 = v348;
      if (!v107)
      {
        v110 = 0;
        v113 = 0;
        goto LABEL_185;
      }
      v108 = (v107 - 1) * v107;
      v353 = v108 >> 1;
      if (v108 >> 1 < v348
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 195, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (v108 > 1)
      {
        if (v348)
          sub_20EEFC500(a1 + 120, &v353, &v354, (int32x4_t **)&v355);
        else
          sub_20EEFC704(a1 + 120, &v353, &v354, (uint64_t)&v355);
      }
      else
      {
        v355 = 0;
        v356 = 0;
        v357 = 0;
      }
      v119 = (unsigned int *)v355;
      v118 = v356;
      __p = 0;
      v359 = 0;
      v360 = 0;
      v120 = (char *)v356 - (_BYTE *)v355;
      if (v356 != v355)
      {
        if (v120 < 0)
          sub_20E867F44();
        v113 = (int *)operator new((char *)v356 - (_BYTE *)v355);
        __p = v113;
        v359 = (unint64_t)v113;
        v360 = &v113[v120 >> 2];
        while (1)
        {
          while (1)
          {
            v121 = *v119;
            *(double *)&v7 = (sqrt((double)((8 * v121) | 1uLL)) + 1.0) * 0.5;
            v122 = (unsigned __int16)(unint64_t)*(double *)&v7 | ((unsigned __int16)(v121
                                                                                          - ((((unint64_t)*(double *)&v7
                                                                                             - 1)
                                                                                            * (unint64_t)*(double *)&v7) >> 1)) << 16);
            if (v113 >= v360)
              break;
            *v113++ = v122;
            v359 = (unint64_t)v113;
            if (++v119 == v118)
              goto LABEL_183;
          }
          v123 = (int *)__p;
          v124 = (char *)v113 - (_BYTE *)__p;
          v125 = ((char *)v113 - (_BYTE *)__p) >> 2;
          v126 = v125 + 1;
          if ((unint64_t)(v125 + 1) >> 62)
            sub_20E867F44();
          v127 = (char *)v360 - (_BYTE *)__p;
          if (((char *)v360 - (_BYTE *)__p) >> 1 > v126)
            v126 = v127 >> 1;
          if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL)
            v128 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v128 = v126;
          if (v128)
          {
            if (v128 >> 62)
              sub_20E877A38();
            v129 = operator new(4 * v128);
            v130 = (int *)&v129[4 * v125];
            v131 = &v129[4 * v128];
            *v130 = v122;
            v132 = (uint64_t)(v130 + 1);
            v133 = (char *)v113 - (char *)v123;
            if (v113 == v123)
            {
LABEL_170:
              __p = v130;
              v360 = (int *)v131;
              goto LABEL_171;
            }
          }
          else
          {
            v129 = 0;
            v130 = (int *)(4 * v125);
            v131 = 0;
            *(_DWORD *)(4 * v125) = v122;
            v132 = 4 * v125 + 4;
            v133 = (char *)v113 - (char *)v123;
            if (v113 == v123)
              goto LABEL_170;
          }
          v134 = v133 - 4;
          if (v134 >= 0xBC)
          {
            v137 = ((char *)(v113 - 1) - (char *)v123) & 0xFFFFFFFFFFFFFFFCLL;
            if (&v129[v124 - 4 - v137] > &v129[v124 - 4])
            {
              v135 = v113;
            }
            else if ((int *)((char *)v113 - v137 - 4) > v113 - 1)
            {
              v135 = v113;
            }
            else if ((unint64_t)((char *)v113 - v129 - v124) >= 0x20)
            {
              v138 = (v134 >> 2) + 1;
              v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              v135 = &v113[v139 / 0xFFFFFFFFFFFFFFFCLL];
              v130 = (int *)((char *)v130 - v139);
              v140 = &v129[4 * v125 - 16];
              v141 = v113 - 4;
              v142 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v8 = *((_OWORD *)v141 - 1);
                v7 = *(_OWORD *)v141;
                *(v140 - 1) = v8;
                *v140 = v7;
                v140 -= 2;
                v141 -= 8;
                v142 -= 8;
              }
              while (v142);
              if (v138 == (v138 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_166;
            }
            else
            {
              v135 = v113;
            }
          }
          else
          {
            v135 = v113;
          }
          do
          {
            v136 = *--v135;
            *--v130 = v136;
          }
          while (v135 != v123);
LABEL_166:
          v113 = (int *)__p;
          __p = v130;
          v360 = (int *)v131;
          if (v113)
          {
LABEL_171:
            operator delete(v113);
            v113 = (int *)v132;
            v359 = v132;
            if (++v119 == v118)
            {
LABEL_183:
              v110 = (int *)__p;
              v119 = (unsigned int *)v355;
              if (v355)
                goto LABEL_184;
              goto LABEL_185;
            }
          }
          else
          {
            v113 = (int *)v132;
            v359 = v132;
            if (++v119 == v118)
              goto LABEL_183;
          }
        }
      }
      v113 = 0;
      v110 = 0;
      if (v355)
      {
LABEL_184:
        v356 = v119;
        operator delete(v119);
      }
LABEL_185:
      if (v110 != v113)
      {
        v143 = v110;
        do
        {
          v144 = (float32x2_t *)&v92[24 * *(unsigned __int16 *)v143];
          v145 = (float32x2_t *)&v92[24 * *((unsigned __int16 *)v143 + 1)];
          *(float32x2_t *)&v8 = vsub_f32(*v144, *v145);
          *(int32x2_t *)v9.f32 = vdup_lane_s32(*(int32x2_t *)&v8, 1);
          *(float32x2_t *)&v7 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&v8, *(float32x2_t *)&v8), *(float32x2_t *)v9.f32, *(float32x2_t *)&v8, 1);
          if (*(float *)&v7 >= *(float *)(a1 + 108))
          {
            LODWORD(v8) = *(_DWORD *)(a1 + 112);
            if (*(float *)&v7 <= *(float *)&v8)
              sub_20EF44DA8(a1, (uint64_t)v144, (uint64_t)v145, 1u, *(double *)&v7, *(double *)&v8, v9, *(double *)v10.i64, v11);
          }
          ++v143;
        }
        while (v143 != v113);
      }
      if (v110)
        operator delete(v110);
    }
    if (v92)
      operator delete(v92);
  }
  v146 = *v340;
  v147 = v340[1];
  if (*v340 != v147)
  {
    do
    {
      *(float *)&v8 = sqrtf(*(float *)(v146 + 16) + *(float *)(v146 + 16));
      LODWORD(v7) = 0;
      v149 = *(float *)&v8 != 0.0 && *(float *)&v8 > 0.000001;
      v9.i32[0] = 0;
      if (v149)
        v9.f32[0] = (float)(*(float *)(v146 + 24) + *(float *)(v146 + 24)) / *(float *)&v8;
      v10.f32[0] = sqrtf(*(float *)(v146 + 32) + *(float *)(v146 + 32));
      if (v10.f32[0] != 0.0 && v10.f32[0] > 0.000001)
        *(float *)&v7 = (float)(*(float *)(v146 + 40) + *(float *)(v146 + 40)) / v10.f32[0];
      v11.f32[0] = sqrtf((float)(*(float *)(v146 + 28) + *(float *)(v146 + 28)) - (float)(v9.f32[0] * v9.f32[0]));
      v148 = sqrtf((float)(*(float *)(v146 + 44) + *(float *)(v146 + 44)) - (float)(*(float *)&v7 * *(float *)&v7));
      __p = *(void **)v146;
      v359 = __PAIR64__(v9.u32[0], v8);
      LODWORD(v360) = 0;
      HIDWORD(v360) = v11.i32[0];
      v355 = *(void **)(v146 + 8);
      v356 = (unsigned int *)__PAIR64__(v7, v10.u32[0]);
      LODWORD(v357) = 0;
      *((float *)&v357 + 1) = v148;
      sub_20EF44DA8(a1, (uint64_t)&__p, (uint64_t)&v355, *(unsigned __int16 *)(v146 + 48), *(double *)&v7, *(double *)&v8, v9, *(double *)v10.i64, v11);
      v146 += 52;
    }
    while (v146 != v147);
  }
  v151 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 64) == v151)
  {
    v152 = 0;
    v275 = 0;
    v285 = 0;
    v263 = *(float *)(a1 + 40);
    v264 = *(float *)(a1 + 44);
    v265 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v152 = 0;
    v342 = 0;
    v153 = 0;
    v154 = 0;
    v155 = 0;
    v156 = v340;
    do
    {
      v157 = (_QWORD *)(v151 + 24 * v155);
      v158 = *v157;
      v336 = v157;
      v160 = v157[1];
      v159 = v157 + 1;
      v333 = v155;
      if (v158 != v160)
      {
        v161 = a1;
        v162 = v153;
        v163 = *(float *)v161;
        v164 = *(_QWORD *)(v161 + 80);
        std::__sort<std::__less<int,int> &,int *>();
        v165 = (_QWORD *)(v164 + 24 * v155);
        std::__sort<std::__less<int,int> &,int *>();
        v170 = (float **)v339;
        if (*v159 != *v336)
        {
          v171 = 0;
          v172 = 0;
          v173 = 0;
          v174 = v163 * (float)v155;
          v175 = (uint64_t)(*v159 - *v336) >> 2;
          v176 = &qword_254A60318[(unint64_t)v174];
          v345 = (float *)v176 + 15;
          v349 = (float *)(v176 + 7);
          v153 = v162;
          a1 = v351;
          v334 = v175;
          v335 = 0;
          while (v172 < v175)
          {
            v177 = *(unsigned __int16 *)(a1 + 8);
            if (*(_DWORD *)(*v336 + 4 * v172) > *(_DWORD *)(*v165 + 4 * v171))
              goto LABEL_226;
            v178 = ++v173 == v177;
            v179 = v335;
            if (v178)
              v179 = v172;
            v335 = v179;
            if (++v172 == v175)
            {
LABEL_217:
              if (v173 < *(unsigned __int16 *)(a1 + 8))
                goto LABEL_213;
            }
LABEL_218:
            if (v171 >= v175)
              goto LABEL_213;
          }
          v177 = *(unsigned __int16 *)(a1 + 8);
LABEL_226:
          v337 = v173;
          v338 = v172;
          if (v173 != v177 || (v180 = *(_DWORD *)(*v336 + 4 * v335), v180 > *(_DWORD *)(*v165 + 4 * v171)))
          {
LABEL_228:
            v172 = v338;
            v173 = v337 - 1;
            ++v171;
            v175 = v334;
            if (v338 == v334)
              goto LABEL_217;
            goto LABEL_218;
          }
          while (2)
          {
            v181 = *(float *)(a1 + 4);
            v182 = atomic_load((unsigned __int8 *)&qword_254A60338);
            if ((v182 & 1) == 0)
            {
              v259 = v153;
              v260 = __cxa_guard_acquire(&qword_254A60338);
              v153 = v259;
              if (v260)
              {
                bzero(&dword_254A60350, 0x5A0uLL);
                v261 = 0;
                v262 = (char *)&unk_254A60354;
                do
                {
                  *(__float2 *)(v262 - 4) = __sincosf_stret((float)v261++ * 0.017453);
                  v262 += 8;
                }
                while (v261 != 180);
                __cxa_guard_release(&qword_254A60338);
                v170 = (float **)v339;
                v156 = v340;
                v153 = v259;
              }
            }
            v183 = v181 * (float)v180;
            v184 = *v345;
            *(float *)v166.i32 = v183 * *v345;
            v185 = *v349;
            v167.f32[0] = v183 * *v349;
            v186.i32[0] = v166.i32[0];
            v186.f32[1] = v167.f32[0];
            v168.f32[0] = *(float *)v166.i32 * *(float *)v166.i32;
            v187 = vmul_n_f32(v186, 1.0 / sqrtf(vmla_f32(v168, v167, v167).f32[0]));
            v188 = fabsf(v183);
            if (v183 != 0.0 && v188 > 0.000001)
            {
              v184 = v187.f32[0];
              v185 = v187.f32[1];
            }
            v190.f32[0] = -v185;
            v190.f32[1] = v184;
            v191 = vadd_f32(v186, v190);
            v192 = v167.f32[0] * v167.f32[0];
            v193 = *(float *)v166.i32 * v167.f32[0];
            v195 = *v170;
            v194 = v170[1];
            if (*v170 == v194)
            {
              v199 = 0;
              a1 = v351;
              v202 = (_WORD *)*v156;
              v201 = (float *)v156[1];
              if ((float *)*v156 != v201)
                goto LABEL_253;
            }
            else
            {
              v196 = v191.f32[0] - *(float *)v166.i32;
              v197 = v191.f32[1] - v167.f32[0];
              a1 = v351;
              v169.i32[0] = *(_DWORD *)(v351 + 116);
              v198 = (char *)v194 - (char *)v195 - 24;
              if (v198 >= 0xA8)
              {
                v203 = v198 / 0x18 + 1;
                v200 = &v195[6 * (v203 & 0x1FFFFFFFFFFFFFF8)];
                v204 = (float32x4_t)vdupq_lane_s32((int32x2_t)v167, 0);
                v205 = (float32x4_t)vdupq_lane_s32(v166, 0);
                v206 = (int8x16_t)vdupq_lane_s32(v169, 0);
                v207 = (__int32 *)(v195 + 24);
                v208 = 0uLL;
                v209 = v203 & 0x1FFFFFFFFFFFFFF8;
                v210 = 0uLL;
                v211 = 0uLL;
                v212 = 0uLL;
                do
                {
                  v213.i32[0] = *(v207 - 24);
                  v214.i32[0] = *(v207 - 23);
                  v214.i32[1] = *(v207 - 17);
                  v214.i32[2] = *(v207 - 11);
                  v215.i32[0] = *v207;
                  v216.i32[0] = v207[1];
                  v216.i32[1] = v207[7];
                  v216.i32[2] = v207[13];
                  v213.i32[1] = *(v207 - 18);
                  v215.i32[1] = v207[6];
                  v213.i32[2] = *(v207 - 12);
                  v215.i32[2] = v207[12];
                  v214.i32[3] = *(v207 - 5);
                  v216.i32[3] = v207[19];
                  v217.i32[0] = *(v207 - 22);
                  v218.i32[0] = *(v207 - 21);
                  v217.i32[1] = *(v207 - 16);
                  v213.i32[3] = *(v207 - 6);
                  v217.i32[2] = *(v207 - 10);
                  v219.i32[0] = v207[2];
                  v220.i32[0] = v207[3];
                  v217.i32[3] = *(v207 - 4);
                  v219.i32[1] = v207[8];
                  v219.i32[2] = v207[14];
                  v219.i32[3] = v207[20];
                  v221.i32[0] = *(v207 - 20);
                  v222.i32[0] = *(v207 - 19);
                  v221.i32[1] = *(v207 - 14);
                  v221.i32[2] = *(v207 - 8);
                  v221.i32[3] = *(v207 - 2);
                  v223.i32[0] = v207[4];
                  v224.i32[0] = v207[5];
                  v223.i32[1] = v207[10];
                  v223.i32[2] = v207[16];
                  v223.i32[3] = v207[22];
                  v215.i32[3] = v207[18];
                  v218.i32[1] = *(v207 - 15);
                  v218.i32[2] = *(v207 - 9);
                  v218.i32[3] = *(v207 - 3);
                  v220.i32[1] = v207[9];
                  v220.i32[2] = v207[15];
                  v220.i32[3] = v207[21];
                  v225 = vsubq_f32(vmulq_n_f32(vsubq_f32(v204, v214), v196), vmulq_n_f32(vsubq_f32(v205, v213), v197));
                  v222.i32[1] = *(v207 - 13);
                  v222.i32[2] = *(v207 - 7);
                  v222.i32[3] = *(v207 - 1);
                  v224.i32[1] = v207[11];
                  v224.i32[2] = v207[17];
                  v226 = (int8x16_t)vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v217, v168.f32[0]), vmulq_n_f32(v221, v193)), vmulq_n_f32(v218, v193)), vmulq_n_f32(v222, v192));
                  v224.i32[3] = v207[23];
                  v227 = (int8x16_t)vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v219, v168.f32[0]), vmulq_n_f32(v223, v193)), vmulq_n_f32(v220, v193)), vmulq_n_f32(v224, v192));
                  v228 = vsubq_f32(vmulq_n_f32(vsubq_f32(v204, v216), v196), vmulq_n_f32(vsubq_f32(v205, v215), v197));
                  v229 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v206, (float32x4_t)v227), v206, v227);
                  v230 = vcgeq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v206, (float32x4_t)v226), v206, v226), vmulq_f32(v225, v225));
                  v231.i64[0] = v230.u32[0];
                  v231.i64[1] = v230.u32[1];
                  v232 = v231;
                  v233 = (int8x16_t)vdupq_n_s64(1uLL);
                  v231.i64[0] = v230.u32[2];
                  v231.i64[1] = v230.u32[3];
                  v234 = (int64x2_t)vandq_s8(v231, v233);
                  v235 = vcgeq_f32(v229, vmulq_f32(v228, v228));
                  v231.i64[0] = v235.u32[0];
                  v231.i64[1] = v235.u32[1];
                  v236 = (int64x2_t)vandq_s8(v231, v233);
                  v231.i64[0] = v235.u32[2];
                  v231.i64[1] = v235.u32[3];
                  v210 = vaddq_s64(v210, v234);
                  v208 = vaddq_s64(v208, (int64x2_t)vandq_s8(v232, v233));
                  v212 = vaddq_s64(v212, (int64x2_t)vandq_s8(v231, v233));
                  v211 = vaddq_s64(v211, v236);
                  v207 += 48;
                  v209 -= 8;
                }
                while (v209);
                v199 = vaddvq_s64(vaddq_s64(vaddq_s64(v211, v208), vaddq_s64(v212, v210)));
                a1 = v351;
                if (v203 != (v203 & 0x1FFFFFFFFFFFFFF8))
                  goto LABEL_247;
              }
              else
              {
                v199 = 0;
                v200 = *v170;
                do
                {
LABEL_247:
                  v237 = (float)(v196 * (float)(v167.f32[0] - v200[1]))
                       - (float)(v197 * (float)(*(float *)v166.i32 - *v200));
                  v238 = (float)((float)((float)(v168.f32[0] * v200[2]) + (float)(v193 * v200[4]))
                               + (float)(v193 * v200[3]))
                       + (float)(v192 * v200[5]);
                  v239 = v237 * v237;
                  if (v238 < *(float *)v169.i32)
                    v238 = *(float *)(v351 + 116);
                  if (v239 <= v238)
                    ++v199;
                  v200 += 6;
                }
                while (v200 != v194);
              }
              v202 = (_WORD *)*v156;
              v201 = (float *)v156[1];
              if ((float *)*v156 != v201)
              {
LABEL_253:
                v240 = v191.f32[0] - *(float *)v166.i32;
                v241 = v191.f32[1] - v167.f32[0];
                v242 = *(float *)(a1 + 116);
                v243 = (float *)(v202 + 24);
                do
                {
                  v244 = v243 - 12;
                  v245 = (float)(v240 * (float)(v167.f32[0] - *(v243 - 11)))
                       - (float)(v241 * (float)(*(float *)v166.i32 - *(v243 - 12)));
                  v246 = (float)(v192 * *(v243 - 5))
                       + (float)((float)(v193 * *(v243 - 7))
                               + (float)((float)(v168.f32[0] * *(v243 - 8)) + (float)(v193 * *(v243 - 6))));
                  v247 = v245 * v245;
                  if (v246 < v242)
                    v246 = *(float *)(a1 + 116);
                  if (v247 <= v246)
                  {
                    v248 = (float)(v240 * (float)(v167.f32[0] - *(v243 - 9)))
                         - (float)(v241 * (float)(*(float *)v166.i32 - *(v243 - 10)));
                    v249 = (float)(v192 * *(v243 - 1))
                         + (float)((float)(v193 * *(v243 - 3))
                                 + (float)((float)(v168.f32[0] * *(v243 - 4)) + (float)(v193 * *(v243 - 2))));
                    v250 = v248 * v248;
                    if (v249 < v242)
                      v249 = *(float *)(a1 + 116);
                    if (v250 <= v249)
                      v199 += *(_WORD *)v243;
                  }
                  v243 += 13;
                }
                while (v244 + 13 != v201);
              }
            }
            if (*(_QWORD *)(a1 + 16) <= (unint64_t)v199)
            {
              if (v154 < (float *)v153)
              {
                *v154 = v174;
                v154[1] = v183;
                *((_WORD *)v154 + 4) = v199;
                v154 += 3;
                v342 = (char *)v154;
              }
              else
              {
                v251 = 0xAAAAAAAAAAAAAAABLL * (((char *)v154 - v152) >> 2) + 1;
                if (v251 > 0x1555555555555555)
                  sub_20EF47464();
                if (0x5555555555555556 * ((v153 - v152) >> 2) > v251)
                  v251 = 0x5555555555555556 * ((v153 - v152) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((v153 - v152) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v252 = 0x1555555555555555;
                else
                  v252 = v251;
                if (v252 > 0x1555555555555555)
                  sub_20E877A38();
                v253 = (char *)operator new(12 * v252);
                v254 = (float *)&v253[4 * (((char *)v154 - v152) >> 2)];
                *v254 = v174;
                v254[1] = v183;
                *((_WORD *)v254 + 4) = v199;
                v255 = v254;
                if (v154 == (float *)v152)
                {
                  v170 = (float **)v339;
                  v153 = &v253[12 * v252];
                  v154 = v254 + 3;
                  v342 = (char *)(v254 + 3);
                  if (v152)
                    goto LABEL_275;
                }
                else
                {
                  v170 = (float **)v339;
                  do
                  {
                    v256 = *(_QWORD *)(v154 - 3);
                    v154 -= 3;
                    v257 = *((_DWORD *)v154 + 2);
                    *(_QWORD *)(v255 - 3) = v256;
                    v255 -= 3;
                    *((_DWORD *)v255 + 2) = v257;
                  }
                  while (v154 != (float *)v152);
                  v153 = &v253[12 * v252];
                  v154 = v254 + 3;
                  v342 = (char *)(v254 + 3);
                  if (v152)
                  {
LABEL_275:
                    v258 = v153;
                    operator delete(v152);
                    v153 = v258;
                    a1 = v351;
                  }
                }
                v152 = (char *)v255;
                v156 = v340;
              }
            }
            v36 = v180++ < *(_DWORD *)(*v165 + 4 * v171);
            if (!v36)
              goto LABEL_228;
            continue;
          }
        }
        v153 = v162;
        a1 = v351;
      }
LABEL_213:
      v155 = v333 + 1;
      v151 = *(_QWORD *)(a1 + 56);
    }
    while (v333 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 64) - v151) >> 3));
    v263 = *(float *)(a1 + 40);
    v264 = *(float *)(a1 + 44);
    v265 = *(_QWORD *)(a1 + 48);
    if (v152 == v342)
    {
      v275 = 0;
      v285 = 0;
    }
    else
    {
      v266 = v152 + 12;
      v267 = v152;
      if (v152 + 12 != v342)
      {
        v267 = v152;
        do
        {
          if (*((unsigned __int16 *)v267 + 4) < *((unsigned __int16 *)v266 + 4))
            v267 = v266;
          v266 += 12;
        }
        while (v266 != v342);
      }
      v268 = 8 * *((unsigned __int16 *)v267 + 4);
      v269 = (char *)operator new(v268 + 8);
      bzero(v269, v268 + 8);
      v270 = v152;
      do
      {
        ++*(_QWORD *)&v269[8 * *((unsigned __int16 *)v270 + 4)];
        v270 += 12;
      }
      while (v270 != v342);
      v271 = 0;
      v272 = 0;
      do
      {
        v273 = *(_QWORD *)&v269[v271];
        *(_QWORD *)&v269[v271] = v272;
        v272 += v273;
        v271 += 8;
      }
      while (v268 + 8 != v271);
      if (0xAAAAAAAAAAAAAAABLL * ((v342 - v152) >> 2) > 0x1555555555555555)
        sub_20EF47464();
      v274 = (char *)operator new(v342 - v152);
      v275 = v274;
      v276 = 0;
      do
      {
        v277 = &v152[v276];
        v278 = &v274[v276];
        *(_QWORD *)v278 = *(_QWORD *)&v152[v276];
        *((_WORD *)v278 + 4) = *(_WORD *)&v152[v276 + 8];
        v276 += 12;
      }
      while (v277 + 12 != v342);
      v279 = 0xAAAAAAAAAAAAAAABLL * (v276 >> 2);
      v280 = v152;
      do
      {
        v281 = *((unsigned __int16 *)v280 + 4);
        v282 = *(_QWORD *)&v269[8 * v281];
        v283 = &v274[12 * v282];
        v284 = *(_QWORD *)v280;
        v280 += 12;
        *(_QWORD *)v283 = v284;
        *((_WORD *)v283 + 4) = v281;
        *(_QWORD *)&v269[8 * v281] = v282 + 1;
      }
      while (v280 != v342);
      v285 = &v274[12 * v279];
      operator delete(v269);
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (0xAAAAAAAAAAAAAAABLL * ((v285 - v275) >> 2) >= v265)
    v286 = v265;
  else
    v286 = 0xAAAAAAAAAAAAAAABLL * ((v285 - v275) >> 2);
  __p = 0;
  v359 = 0;
  v360 = 0;
  if (!v286)
    goto LABEL_362;
  if ((v286 & 0x8000000000000000) != 0)
    sub_20E867F44();
  v287 = (v286 - 1) >> 6;
  v288 = operator new(8 * (v287 + 1));
  v289 = v288;
  v359 = v286;
  v360 = (int *)(v287 + 1);
  __p = v288;
  if (v286 >= 0x41)
    v290 = (v286 - 1) >> 6;
  else
    v290 = 0;
  v288[v290] = 0;
  if (v286 >= 0x40)
    bzero(v288, 8 * (v286 >> 6));
  if ((v286 & 0x3F) != 0)
    v289[v286 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v286 & 0x3F));
  if (4 * v286 == 16 * v286)
  {
    operator delete(v289);
    if (!v275)
      goto LABEL_364;
    goto LABEL_363;
  }
  v343 = v275;
  v291 = 0;
  v292 = 0;
  v293 = 0;
  v294 = 0;
  v295 = -(uint64_t)v286;
  v296 = &v285[-12 * v286];
  v297 = 12 - 12 * v286;
  v346 = v296;
  v350 = -(uint64_t)v286;
  while (1)
  {
LABEL_317:
    v298 = v294 + 1;
    v299 = __p;
    if (~v294 != v295)
    {
      v300 = 0;
      v301 = v294 + 1;
      do
      {
        v302 = v299[v301 >> 6];
        if ((v302 & (1 << v301)) == 0
          && (float)(90.0 - fabsf(vabds_f32(*((float *)v285 - 3), *(float *)&v285[v300 - 24]) + -90.0)) <= v263)
        {
          v303 = *((float *)v285 - 2);
          v304 = *(float *)&v285[v300 - 20];
          v305 = v303 < v304;
          if (v303 == v304)
            goto LABEL_319;
          v306 = v303 - v304;
          v307 = v304 - v303;
          if (!v305)
            v307 = v306;
          if (v307 <= v264)
LABEL_319:
            v299[v301 >> 6] = v302 | (1 << v301);
        }
        ++v301;
        v300 -= 12;
      }
      while (v297 != v300);
    }
    v285 -= 12;
    if (((*(_QWORD *)((char *)v299 + ((v294 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v294) & 1) == 0)
      break;
    v297 += 12;
    ++v294;
    if (v285 == v296)
      goto LABEL_359;
  }
  if (v293 < v292)
  {
    *(_QWORD *)v293 = *(_QWORD *)v285;
    v308 = (uint64_t)(v293 + 8);
    goto LABEL_347;
  }
  v309 = (char *)(v293 - v291);
  v310 = (v293 - v291) >> 3;
  v311 = v310 + 1;
  if ((unint64_t)(v310 + 1) >> 61)
    sub_20EF47464();
  if ((v292 - v291) >> 2 > v311)
    v311 = (v292 - v291) >> 2;
  v312 = (unint64_t)(v292 - v291) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v311;
  v352 = v298;
  if (v312)
  {
    if (v312 >> 61)
      sub_20E877A38();
    v313 = v293;
    v314 = v312;
    v315 = operator new(8 * v312);
    v293 = v313;
    v312 = v314;
    v316 = &v315[8 * v310];
    *(_QWORD *)v316 = *(_QWORD *)v285;
    v308 = (uint64_t)(v316 + 8);
    v317 = (char *)(v293 - v291);
    if (v293 == v291)
      goto LABEL_344;
LABEL_341:
    v318 = (unint64_t)(v317 - 8);
    if (v318 < 0x168)
    {
      v319 = v293;
      goto LABEL_343;
    }
    v323 = (v293 - 8 - v291) & 0xFFFFFFFFFFFFFFF8;
    if (&v309[(_QWORD)v315 - 8 - v323] > &v309[(_QWORD)v315 - 8])
    {
      v319 = v293;
      goto LABEL_343;
    }
    if (&v293[-v323 - 8] > v293 - 8)
    {
      v319 = v293;
      goto LABEL_343;
    }
    if ((unint64_t)(v293 - v315 - (_QWORD)v309) < 0x20)
    {
      v319 = v293;
      goto LABEL_343;
    }
    v324 = (v318 >> 3) + 1;
    v325 = 8 * (v324 & 0x3FFFFFFFFFFFFFFCLL);
    v319 = &v293[-v325];
    v316 -= v325;
    v326 = &v315[8 * v310 - 16];
    v327 = v293 - 16;
    v328 = v324 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v329 = *(_OWORD *)v327;
      *(v326 - 1) = *((_OWORD *)v327 - 1);
      *v326 = v329;
      v326 -= 2;
      v327 -= 32;
      v328 -= 4;
    }
    while (v328);
    if (v324 != (v324 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_343:
        v320 = *((_QWORD *)v319 - 1);
        v319 -= 8;
        *((_QWORD *)v316 - 1) = v320;
        v316 -= 8;
      }
      while (v319 != v291);
    }
  }
  else
  {
    v315 = 0;
    v316 = (char *)(8 * v310);
    *(_QWORD *)(8 * v310) = *(_QWORD *)v285;
    v308 = 8 * v310 + 8;
    v317 = (char *)(v293 - v291);
    if (v293 != v291)
      goto LABEL_341;
  }
LABEL_344:
  v292 = &v315[8 * v312];
  *a4 = v316;
  a4[1] = (char *)v308;
  a4[2] = v292;
  if (v291)
  {
    v321 = v291;
    v322 = v292;
    operator delete(v321);
    v292 = v322;
  }
  v291 = v316;
  v296 = v346;
  v295 = v350;
  v298 = v352;
LABEL_347:
  a4[1] = (char *)v308;
  v293 = (char *)v308;
  v297 += 12;
  v294 = v298;
  if (v285 != v296)
    goto LABEL_317;
LABEL_359:
  v275 = v343;
  if (!__p)
  {
LABEL_362:
    if (v275)
      goto LABEL_363;
    goto LABEL_364;
  }
  operator delete(__p);
  if (!v343)
    goto LABEL_364;
LABEL_363:
  operator delete(v275);
LABEL_364:
  if (v152)
    operator delete(v152);
LABEL_366:
  kdebug_trace();
  sub_20EF471C4(&__p);
  if (**((int **)__p + 7) <= 1)
  {
    v330 = atomic_load((unsigned __int8 *)&qword_254A60330);
    if ((v330 & 1) == 0 && __cxa_guard_acquire(&qword_254A60330))
    {
      qword_254A60328 = (uint64_t)sub_20EF286B8((uint64_t)"AcvSurface_HoughLineDetect");
      __cxa_guard_release(&qword_254A60330);
    }
    v331 = qword_254A60328;
    if (*(_BYTE *)(qword_254A60328 + 16))
    {
      *(_QWORD *)(v331 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v331;
      *(_BYTE *)(v331 + 16) = 0;
    }
  }
}

void sub_20EF4700C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33)
{
  void *v34;

  __cxa_guard_abort(&qword_254A60330);
  v34 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v34;
    operator delete(v34);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EF471C4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60348);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60348))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.acv.trace");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A60340);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A60348);
  }
  *a1 = qword_254A60340;
}

void sub_20EF47260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60348);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60348);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF472B8(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;

  if (a3 == a2)
    return a3;
  v3 = a3 - a2 + 1;
  if (a3 - a2 != -1)
  {
    v4 = __clz(v3);
    v5 = 31;
    if (((v3 << v4) & 0x7FFFFFFF) != 0)
      v5 = 32;
    v6 = v5 - v4;
    v7 = v6 >> 5;
    if ((v6 & 0x1F) != 0)
      ++v7;
    if (v7 <= v6)
      v8 = 0xFFFFFFFF >> -(v6 / v7);
    else
      v8 = 0;
    v9 = *(_QWORD *)(a1 + 2496);
    do
    {
      v10 = 4 * v9;
      v11 = v9 + 397;
      v9 = (v9 + 1) % 0x270;
      v12 = *(_DWORD *)(a1 + 4 * (v11 % 0x270)) ^ ((*(_DWORD *)(a1 + 4 * v9) & 0x7FFFFFFE | *(_DWORD *)(a1 + v10) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v9) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a1 + v10) = v12;
      v13 = ((v12 ^ (v12 >> 11)) << 7) & 0x9D2C5680 ^ v12 ^ (v12 >> 11);
      v14 = ((v13 << 15) & 0xEFC60000 ^ v13 ^ (((v13 << 15) & 0xEFC60000 ^ v13) >> 18)) & v8;
    }
    while (v14 >= v3);
    *(_QWORD *)(a1 + 2496) = v9;
    return (unsigned __int16)(v14 + a2);
  }
  v16 = *(_QWORD *)(a1 + 2496);
  v17 = (v16 + 1) % 0x270uLL;
  v18 = *(_DWORD *)(a1 + 4 * ((v16 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v17) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v17) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v16) = v18;
  *(_QWORD *)(a1 + 2496) = v17;
  v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
  return (((unsigned __int16)v18 ^ (unsigned __int16)(v18 >> 11)) << 7) & 0x5680 ^ (unsigned __int16)(v18 ^ (v18 >> 11)) ^ (((v19 << 15) & 0xEFC40000 ^ v19) >> 18);
}

void sub_20EF47464()
{
  sub_20E860B90("vector");
}

float32x2_t sub_20EF47478(int32x2_t *a1, int32x2_t *a2, unint64_t *a3, uint64_t *a4, _QWORD *a5, float32x2_t *a6, float32x2_t a7, float32_t a8, float32x4_t a9, double a10, float32x4_t a11)
{
  float32x4_t v11;
  float32x4_t v12;
  unint64_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  unsigned __int128 v51;
  float32x4_t v52;
  float32x4_t v53;
  unsigned __int128 v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int32x4_t v91;
  int8x16_t v92;
  int8x16_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int8x16_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x16_t v107;
  float32x2_t result;

  v12.i64[0] = 0;
  a9.i64[0] = *a3;
  a11.i64[0] = a3[1];
  v13 = vnegq_f32(a9).u64[0];
  v14 = vnegq_f32(a11);
  v15 = v14.i64[0];
  v16.i64[0] = 0;
  v14.i64[0] = *a4;
  v11.i64[0] = a4[1];
  v16.i64[1] = *a4;
  v17.i64[0] = 0;
  v17.i64[1] = vnegq_f32(v14).u64[0];
  v18.i64[0] = 0;
  v12.i64[1] = v11.i64[0];
  v18.i64[1] = vnegq_f32(v11).u64[0];
  v19 = (float32x4_t)vdupq_lane_s32(*a1, 0);
  v20 = vaddq_f32(a9, v19);
  v21 = vaddq_f32((float32x4_t)v13, v19);
  v22 = (float32x4_t)vdupq_lane_s32(*a1, 1);
  v23 = vaddq_f32(a11, v22);
  v24 = (float32x4_t)vdupq_lane_s32(*a2, 0);
  v25 = vaddq_f32((float32x4_t)(unint64_t)v15, v22);
  v26 = (float32x4_t)vdupq_lane_s32(*a2, 1);
  a7.f32[1] = a8;
  __asm { FMOV            V1.2S, #1.0 }
  v32 = vdiv_f32(_D1, a7);
  v33 = vsubq_f32(v21, vaddq_f32(v17, v24));
  v34 = vsubq_f32(v20, vaddq_f32(v16, v24));
  v35 = vsubq_f32(v25, vaddq_f32(v18, v26));
  v36 = vsubq_f32(v23, vaddq_f32(v12, v26));
  __asm { FMOV            V19.4S, #1.0 }
  v38 = vdivq_f32(_Q19, vsqrtq_f32(vaddq_f32(vmulq_f32(v33, v33), vmulq_f32(v35, v35))));
  v39 = vdivq_f32(_Q19, vsqrtq_f32(vaddq_f32(vmulq_f32(v34, v34), vmulq_f32(v36, v36))));
  v40 = vmulq_f32(v34, v39);
  v41 = vmulq_f32(v33, v38);
  v42 = vmulq_f32(v36, v39);
  v43 = vmulq_f32(v35, v38);
  v44 = (int8x16_t)vcltzq_f32(v41);
  v45 = (int8x16_t)vcltzq_f32(v40);
  v46 = (float32x4_t)vbslq_s8(v45, (int8x16_t)v42, (int8x16_t)vnegq_f32(v42));
  v47 = (float32x4_t)vbslq_s8(v44, (int8x16_t)v43, (int8x16_t)vnegq_f32(v43));
  v48 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vnegq_f32(v41), (int8x16_t)v41);
  v49 = (float32x4_t)vbslq_s8(v45, (int8x16_t)vnegq_f32(v40), (int8x16_t)v40);
  v50 = vmulq_f32(v23, v49);
  v51 = *(_OWORD *)&v49 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
  v52 = vmulq_f32(v25, v48);
  v53 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v54 = *(_OWORD *)&v48 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
  v55 = (int8x16_t)vcgeq_f32((float32x4_t)v54, v53);
  v56 = (float32x4_t)vandq_s8((int8x16_t)v51, (int8x16_t)vcgeq_f32((float32x4_t)v51, v53));
  v57 = (float32x4_t)vandq_s8((int8x16_t)v54, v55);
  v40.i64[0] = 0x3F0000003F000000;
  v40.i64[1] = 0x3F0000003F000000;
  v58 = (int8x16_t)vcgtq_f32((float32x4_t)v54, v40);
  v59 = (int8x16_t)vcgtq_f32((float32x4_t)v51, v40);
  v60.i64[0] = 0xBF000000BF000000;
  v60.i64[1] = 0xBF000000BF000000;
  v61.i64[0] = 0x3F0000003F000000;
  v61.i64[1] = 0x3F0000003F000000;
  v62 = vmlaq_f32(v61, v60, (float32x4_t)v54);
  v63 = vmlaq_f32(v40, v60, (float32x4_t)v51);
  v64 = (float32x4_t)vbslq_s8(v59, (int8x16_t)v63, (int8x16_t)vmulq_f32(v56, v56));
  v65 = (float32x4_t)vbslq_s8(v58, (int8x16_t)v62, (int8x16_t)vmulq_f32(v57, v57));
  v66 = vsqrtq_f32(v63);
  v67 = vsqrtq_f32(v62);
  v68 = (float32x4_t)vdupq_n_s32(0x3D2CB352u);
  v69 = (float32x4_t)vdupq_n_s32(0x3CC617E3u);
  v70 = vmlaq_f32(v69, v68, v65);
  v71 = vmlaq_f32(v69, v68, v64);
  v72 = (float32x4_t)vdupq_n_s32(0x3D3A3EC7u);
  v73 = vmlaq_f32(v72, v71, v64);
  v74 = (float32x4_t)vdupq_n_s32(0x3D9980F6u);
  v75 = vmlaq_f32(v74, vmlaq_f32(v72, v70, v65), v65);
  v76 = (float32x4_t)vdupq_n_s32(0x3E2AAAE4u);
  v77 = vmulq_f32(vmlaq_f32(v76, v75, v65), v65);
  v78 = vmulq_f32(vmlaq_f32(v76, vmlaq_f32(v74, v73, v64), v64), v64);
  v79 = (float32x4_t)vdupq_n_s32(0x3FC90FDBu);
  v74.i64[0] = 0xC0000000C0000000;
  v74.i64[1] = 0xC0000000C0000000;
  v80 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vmlaq_f32(v79, v74, vmlaq_f32(v66, v66, v78)), (int8x16_t)vmlaq_f32((float32x4_t)v51, (float32x4_t)v51, v78));
  v81 = (float32x4_t)vbslq_s8(v58, (int8x16_t)vmlaq_f32(v79, v74, vmlaq_f32(v67, v67, v77)), (int8x16_t)vmlaq_f32((float32x4_t)v54, (float32x4_t)v54, v77));
  v82 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
  v83 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v46), (int8x16_t)vsubq_f32(v82, v80), (int8x16_t)v80);
  v84 = vmulq_f32(v20, v46);
  v85 = vaddq_f32(vmulq_f32(v21, v47), v52);
  v86 = vaddq_f32(v84, v50);
  v87 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v47), (int8x16_t)vsubq_f32(v82, v81), (int8x16_t)v81), v32.f32[0]);
  v88 = vmulq_n_f32(v83, v32.f32[0]);
  v89 = vmulq_lane_f32(v86, v32, 1);
  v90 = vmulq_lane_f32(v85, v32, 1);
  v91 = vdupq_n_s32((int)(v32.f32[0] * 3.14159265));
  v92 = (int8x16_t)vceqq_s32(v91, vcvtq_s32_f32(vrndaq_f32(v87)));
  v93 = (int8x16_t)vceqq_s32(v91, vcvtq_s32_f32(vrndaq_f32(v88)));
  v94 = (float32x4_t)vbicq_s8((int8x16_t)v88, v93);
  v95 = (float32x4_t)vbicq_s8((int8x16_t)v87, v92);
  v96 = (float32x4_t)vbslq_s8(v93, (int8x16_t)vnegq_f32(v89), (int8x16_t)v89);
  v97 = (float32x4_t)vbslq_s8(v92, (int8x16_t)vnegq_f32(v90), (int8x16_t)v90);
  v98 = (int8x16_t)vaddq_f32(v94, v95);
  *(float32x2_t *)v98.i8 = vadd_f32(*(float32x2_t *)v98.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL));
  v99 = (int8x16_t)vaddq_f32(v96, v97);
  *(float32x2_t *)v99.i8 = vadd_f32(*(float32x2_t *)v99.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL));
  *(float32x2_t *)v98.i8 = vmul_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v98.i8, *(int32x2_t *)v99.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v98.i8, *(int32x2_t *)v99.i8)), (float32x2_t)0x3E0000003E000000);
  v100 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.i8, 0);
  v101 = vsubq_f32(v94, v100);
  v102 = vsubq_f32(v95, v100);
  v103 = (int8x16_t)vaddq_f32(vmulq_f32(v101, v101), vmulq_f32(v102, v102));
  *(float32x2_t *)v103.i8 = vadd_f32(*(float32x2_t *)v103.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v103, v103, 8uLL));
  v104 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.i8, 1);
  v105 = vsubq_f32(v96, v104);
  v106 = vsubq_f32(v97, v104);
  v107 = (int8x16_t)vaddq_f32(vmulq_f32(v105, v105), vmulq_f32(v106, v106));
  *(float32x2_t *)v107.i8 = vadd_f32(*(float32x2_t *)v107.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v107, v107, 8uLL));
  *a5 = v98.i64[0];
  result = vmul_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v103.i8, *(int32x2_t *)v107.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v103.i8, *(int32x2_t *)v107.i8)), (float32x2_t)0x3E0000003E000000);
  *a6 = result;
  return result;
}

uint64_t sub_20EF47798(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  float *v18;
  float v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  float *v27;
  float v28;
  int v29;
  unsigned int v30;
  int v31;
  float v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  float v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  float *v48;
  float v49;
  int v50;
  unsigned int v51;
  float v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  float v57;
  uint64_t v58;
  unsigned int v59;

  v3 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a2 + 32))
  {
    v4 = HIDWORD(*(_QWORD *)(a2 + 32));
    v5 = a3 >> 1;
    v6 = *(_DWORD *)(result + 44);
    v7 = *(_QWORD *)(result + 24);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = v5 + 1;
    v10 = *(_DWORD *)(a2 + 40);
    v11 = *(_DWORD *)(a2 + 44);
    v12 = v4 + ~(_DWORD)v5;
    v13 = v4 - 1;
    if ((_DWORD)v5 + 1 == v12)
    {
      if (a3 > 1)
      {
        v43 = 0;
        v44 = v11 + v11 * v5;
        v45 = ~v5 + v4;
        v46 = *(_DWORD *)(a2 + 44);
        do
        {
          v47 = *(_DWORD *)(result + 40);
          v48 = (float *)(v7 + 4 * (v6 * v43));
          v49 = 0.0;
          v50 = -(int)v5;
          v51 = a3;
          do
          {
            v49 = v49 + v48[(v50 & ~(v50 >> 31)) * v47];
            ++v50;
            --v51;
          }
          while (v51);
          *(float *)(v8 + 4 * (v10 * v43)) = v49;
          v52 = *v48;
          v53 = v9 * v47;
          v54 = v46;
          v55 = a3 >> 1;
          do
          {
            v49 = v49 + (float)(v48[v53] - v52);
            *(float *)(v8 + 4 * v54) = v49;
            v54 += v11;
            v53 += v47;
            --v55;
          }
          while (v55);
          v56 = 0;
          v57 = v48[v47 * v13];
          v58 = v45;
          v59 = v44;
          do
          {
            v49 = v49 + (float)(v57 - v48[v56]);
            *(float *)(v8 + 4 * v59) = v49;
            v59 += v11;
            v56 += v47;
            --v58;
          }
          while (v58);
          ++v43;
          v46 += v10;
          v44 += v10;
        }
        while (v43 != v3);
      }
      else
      {
        v14 = v11 * v9;
        v15 = 0;
        v16 = 0;
        if (a3)
        {
          do
          {
            v17 = *(_DWORD *)(result + 40);
            v18 = (float *)(v7 + 4 * v15);
            v19 = *v18 + 0.0;
            *(float *)(v8 + 4 * v16) = v19;
            *(float *)(v8 + 4 * (v14 + v16)) = v19 + (float)(v18[v17 * v13] - *v18);
            v16 += v10;
            v15 += v6;
            --v3;
          }
          while (v3);
        }
        else
        {
          do
          {
            v20 = *(_DWORD *)(result + 40);
            *(_DWORD *)(v8 + 4 * v16) = 0;
            *(float *)(v8 + 4 * (v14 + v16)) = (float)(*(float *)(v7 + 4 * v15 + 4 * (v20 * v13))
                                                       - *(float *)(v7 + 4 * v15))
                                               + 0.0;
            v16 += v10;
            v15 += v6;
            --v3;
          }
          while (v3);
        }
      }
    }
    else
    {
      v21 = 0;
      v22 = ~v5 + v12;
      v23 = v11 * v12;
      v24 = v4 - 2 * v5 - 2;
      v25 = *(_DWORD *)(a2 + 44);
      do
      {
        v26 = *(_DWORD *)(result + 40);
        v27 = (float *)(v7 + 4 * (v6 * v21));
        if (a3)
        {
          v28 = 0.0;
          v29 = -(int)v5;
          v30 = a3;
          do
          {
            v28 = v28 + v27[(v29 & ~(v29 >> 31)) * v26];
            ++v29;
            --v30;
          }
          while (v30);
          v31 = v10 * v21;
          *(float *)(v8 + 4 * (v10 * v21)) = v28;
          if (a3 >= 2)
          {
            v32 = *v27;
            v33 = v9 * v26;
            v34 = v25;
            v35 = a3 >> 1;
            do
            {
              v28 = v28 + (float)(v27[v33] - v32);
              *(float *)(v8 + 4 * v34) = v28;
              v34 += v11;
              v33 += v26;
              --v35;
            }
            while (v35);
          }
        }
        else
        {
          v31 = v10 * v21;
          *(_DWORD *)(v8 + 4 * (v10 * v21)) = 0;
          v28 = 0.0;
        }
        v36 = 0;
        v37 = v11 * v9 + v31;
        v38 = v22;
        do
        {
          v28 = v28 + (float)(v27[((v9 + v5) * v26 + v36)] - v27[v36]);
          *(float *)(v8 + 4 * v37) = v28;
          v37 += v11;
          v36 += v26;
          --v38;
        }
        while (v38);
        v39 = v27[v26 * v13];
        v40 = v23 + v31;
        v41 = v24 * v26;
        v42 = v5 + 1;
        do
        {
          v28 = v28 + (float)(v39 - v27[v41]);
          *(float *)(v8 + 4 * v40) = v28;
          v40 += v11;
          v41 += v26;
          --v42;
        }
        while (v42);
        ++v21;
        v25 += v10;
      }
      while (v21 != v3);
    }
  }
  return result;
}

void sub_20EF47A98(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, uint64_t *a10)
{
  uint64_t v14;
  size_t v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float v18;
  float v19;
  uint64_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t *v23;
  int32x4_t v24;
  int32x4_t v25;
  uint64_t v26;
  __n128 v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  float v32;
  uint64_t v33;
  float v34;
  float v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  float *v50;
  float v51;
  int v52;
  float *v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  int v58;
  int v59;
  float v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  float v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  float v70;
  float v71;
  float v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  float v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  size_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __int16 v85;
  unint64_t v86;
  float32x4_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  __int16 v92;
  float32x4_t *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  __int16 v100;
  unint64_t v101;
  float32x4_t *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  __int16 v106;
  float32x4_t *v107;
  float *v108;
  int32x2_t v109;
  float *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  float v115;
  float v116;
  float32x4_t *v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  float *v131;
  float v132;
  int v133;
  float *v134;
  uint64_t v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  float v144;
  int v145;
  unsigned int v146;
  int v147;
  float v148;
  float v149;
  float v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  float v154;
  unsigned int v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  unsigned int v167;
  uint64_t v168;
  float v169;
  unsigned int v170;
  int v171;
  float v172;
  float v173;
  float v174;
  std::__shared_weak_count *v175;
  uint64_t *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  __int16 v184;
  unint64_t v185;
  float32x4_t *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  __int16 v191;
  float32x4_t *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  _DWORD *v199;
  unint64_t v200;
  unsigned int v201;
  int v202;
  unint64_t v203;
  unint64_t v204;
  _DWORD *v205;
  unsigned int v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unsigned int v213;
  int v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unsigned int v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  int v231;
  float v232;
  __n128 v233;
  int32x4_t v234;
  int32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x2_t v238;
  float32x2_t v239;
  float32x2_t v240;
  _DWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  float32x4_t v246;
  int8x16_t v247;
  int32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  unint64_t v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  int8x16_t v259;
  int8x16_t v260;
  float32x2_t v261;
  float32x2_t v262;
  float32x4_t v263;
  _DWORD *v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  _DWORD *v271;
  unsigned int v272;
  uint64_t v273;
  unsigned int v274;
  BOOL v275;
  uint64_t v276;
  unint64_t v277;
  __int8 *v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  BOOL v282;
  BOOL v283;
  BOOL v284;
  BOOL v285;
  BOOL v286;
  BOOL v287;
  uint64_t v289;
  float32x4_t v290;
  unsigned int v291;
  unint64_t v292;
  float32x4_t *v293;
  _OWORD *v294;
  float32x4_t v295;
  float32x4_t v296;
  uint64_t __n;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  float32x4_t *__src;
  uint64_t v304;
  unsigned int v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  std::__shared_weak_count *v310;
  unsigned int v311;
  __n128 v312;
  float *__dst;
  _DWORD *__dsta;
  std::__shared_weak_count *v316;
  unsigned int v317;
  std::__shared_weak_count *v318;
  uint64_t (**v319)();
  uint64_t v320;
  std::__shared_weak_count *v321;
  float32x4_t *v322;
  __int128 v323;
  __int16 v324;

  if ((a3 < 2 || (a3 & 1) == 0)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Vision/NormalEstimation.cpp", 555, (uint64_t)"kernelSize > 1 && kernelSize % 2 == 1", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v309 = a3 >> 1;
  a9.n128_f32[0] = (float)v309;
  v312 = a9;
  v14 = a3;
  v15 = 4 * a3;
  v16 = (float32x4_t *)operator new((v15 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
  v17 = v16;
  v317 = a3;
  if (a3)
  {
    bzero(v16, v15);
    v18 = v312.n128_f32[0];
    v19 = 1.0 / (float)((float)(v312.n128_f32[0] * (float)(v309 + 1)) / 3.0);
    if (a3 < 8)
    {
      v20 = 0;
      do
      {
LABEL_10:
        v17->f32[v20] = v19 * (float)((float)v20 - v18);
        ++v20;
      }
      while (a3 != v20);
      goto LABEL_11;
    }
    v20 = a3 & 0xFFFFFFF8;
    v21 = (float32x4_t)vdupq_lane_s32((int32x2_t)v312.n128_u64[0], 0);
    v22 = (int32x4_t)xmmword_210365350;
    v23 = v17 + 1;
    v24.i64[0] = 0x400000004;
    v24.i64[1] = 0x400000004;
    v25.i64[0] = 0x800000008;
    v25.i64[1] = 0x800000008;
    v26 = v20;
    do
    {
      v23[-1] = vmulq_n_f32(vsubq_f32(vcvtq_f32_u32((uint32x4_t)v22), v21), v19);
      *v23 = vmulq_n_f32(vsubq_f32(vcvtq_f32_u32((uint32x4_t)vaddq_s32(v22, v24)), v21), v19);
      v22 = vaddq_s32(v22, v25);
      v23 += 2;
      v26 -= 8;
    }
    while (v26);
    v18 = v312.n128_f32[0];
    if (v20 != a3)
      goto LABEL_10;
  }
LABEL_11:
  __src = v17;
  __dst = (float *)operator new((v15 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
  if (((v15 + 31) & 0x7FFFFFFE0) >> 2 < a3)
  {
    MEMORY[0x212BC6368](__dst, 0x1000C8052888210);
    __dst = (float *)operator new((v15 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
  }
  v300 = a7;
  __n = 4 * a3;
  v298 = a8;
  v304 = a6;
  v299 = (v15 + 31) & 0x7FFFFFFE0;
  if (a3)
  {
    memcpy(__dst, v17, v15);
    v27.n128_f32[0] = *__dst;
  }
  v28 = a3;
  v29 = a1[1];
  v30 = HIDWORD(v29);
  v31 = v309 + 1;
  v32 = (float)(v309 + 1);
  if (HIDWORD(v29))
  {
    v33 = 0;
    v27.n128_f32[0] = __dst[1] - v27.n128_f32[0];
    v34 = v27.n128_f32[0] * v312.n128_f32[0];
    v35 = v27.n128_f32[0] * v32;
    v36 = *((_DWORD *)a1 + 5);
    v37 = *a1;
    v38 = *(_QWORD *)(a4 + 24);
    v39 = *(_QWORD *)(a5 + 24);
    v40 = *(_DWORD *)(a4 + 40);
    v41 = *(_DWORD *)(a4 + 44);
    v42 = *(_DWORD *)(a5 + 40);
    v43 = *(_DWORD *)(a5 + 44);
    v44 = v29 + ~(_DWORD)v309;
    v45 = v29 - 1;
    v46 = v29 - 2 * v309 - 2;
    v47 = v41;
    v48 = v43;
    while (1)
    {
      v49 = *((_DWORD *)a1 + 4);
      v50 = (float *)(v37 + 4 * (v36 * v33));
      if (v28)
        break;
      v58 = v40 * v33;
      *(_DWORD *)(v38 + 4 * (v40 * v33)) = 0;
      v59 = v42 * v33;
      *(_DWORD *)(v39 + 4 * (v42 * v33)) = 0;
      v55 = 0.0;
      v51 = 0.0;
      if (v31 != v44)
        goto LABEL_26;
LABEL_28:
      v72 = 1.0 / v50[v49 * v45];
      v73 = v43 * v44 + v59;
      v74 = v41 * v44 + v58;
      v75 = v46 * v49;
      v76 = v309 + 1;
      do
      {
        v77 = 1.0 / v50[v75];
        v51 = v51 + (float)((float)(v34 * v72) + (float)((float)(v35 * v77) - (float)(v27.n128_f32[0] * v55)));
        v55 = v55 + (float)(v72 - v77);
        *(float *)(v38 + 4 * v74) = v51;
        *(float *)(v39 + 4 * v73) = v55;
        v73 += v43;
        v74 += v41;
        v75 += v49;
        --v76;
      }
      while (v76);
      ++v33;
      v48 += v42;
      v47 += v40;
      v28 = v317;
      if (v33 == v30)
        goto LABEL_31;
    }
    v51 = 0.0;
    v52 = -(int)v309;
    v53 = __dst;
    v54 = v14;
    v55 = 0.0;
    do
    {
      v56 = *v53++;
      v57 = 1.0 / v50[(v52 & ~(v52 >> 31)) * v49];
      v51 = v51 + (float)(v56 * v57);
      v55 = v55 + v57;
      ++v52;
      --v54;
    }
    while (v54);
    v58 = v40 * v33;
    *(float *)(v38 + 4 * (v40 * v33)) = v51;
    v59 = v42 * v33;
    *(float *)(v39 + 4 * (v42 * v33)) = v55;
    if (v28 >= 2)
    {
      v60 = 1.0 / *v50;
      v61 = v31 * v49;
      v62 = v47;
      v63 = v48;
      v64 = v309;
      do
      {
        v65 = 1.0 / v50[v61];
        v51 = v51 + (float)((float)((float)(v35 * v60) - (float)(v27.n128_f32[0] * v55)) + (float)(v34 * v65));
        v55 = v55 + (float)(v65 - v60);
        *(float *)(v38 + 4 * v62) = v51;
        *(float *)(v39 + 4 * v63) = v55;
        v63 += v43;
        v62 += v41;
        v61 += v49;
        --v64;
      }
      while (v64);
    }
    if (v31 == v44)
      goto LABEL_28;
LABEL_26:
    v66 = 0;
    v67 = v43 * v31 + v59;
    v68 = v41 * v31 + v58;
    v69 = v46;
    do
    {
      v70 = 1.0 / v50[v66];
      v71 = 1.0 / v50[((2 * (_DWORD)v309) | 1) * v49 + v66];
      v51 = v51 + (float)((float)((float)(v35 * v70) - (float)(v27.n128_f32[0] * v55)) + (float)(v34 * v71));
      v55 = v55 + (float)(v71 - v70);
      *(float *)(v38 + 4 * v68) = v51;
      *(float *)(v39 + 4 * v67) = v55;
      v67 += v43;
      v68 += v41;
      v66 += v49;
      --v69;
    }
    while (v69);
    goto LABEL_28;
  }
LABEL_31:
  MEMORY[0x212BC6368](__dst, 0x1000C8052888210, v27);
  v319 = &off_24C9AD5F8;
  v78 = *(_QWORD *)(a4 + 8);
  v79 = *(std::__shared_weak_count **)(a4 + 16);
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    v81 = v299;
    v82 = v300;
    v83 = a5;
    do
      v84 = __ldxr(p_shared_owners);
    while (__stxr(v84 + 1, p_shared_owners));
    v85 = *(_WORD *)(a4 + 48);
    do
      v86 = __ldxr(p_shared_owners);
    while (__stxr(v86 + 1, p_shared_owners));
    v87 = *(float32x4_t **)(a4 + 24);
    v323 = *(_OWORD *)(a4 + 32);
    do
      v88 = __ldxr(p_shared_owners);
    while (__stxr(v88 + 1, p_shared_owners));
    v320 = v78;
    v321 = v79;
    v322 = v87;
    v324 = v85;
    do
      v89 = __ldaxr(p_shared_owners);
    while (__stlxr(v89 - 1, p_shared_owners));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
    sub_20EF47798((uint64_t)&v319, v304, v28);
    v91 = v321;
    if (!v321)
      goto LABEL_51;
  }
  else
  {
    v92 = *(_WORD *)(a4 + 48);
    v93 = *(float32x4_t **)(a4 + 24);
    v320 = *(_QWORD *)(a4 + 8);
    v321 = 0;
    v322 = v93;
    v323 = *(_OWORD *)(a4 + 32);
    v324 = v92;
    v81 = v299;
    v82 = v300;
    v83 = a5;
    sub_20EF47798((uint64_t)&v319, v304, v28);
    v91 = v321;
    if (!v321)
      goto LABEL_51;
  }
  v94 = (unint64_t *)&v91->__shared_owners_;
  do
    v95 = __ldaxr(v94);
  while (__stlxr(v95 - 1, v94));
  if (!v95)
  {
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v91);
    v319 = &off_24C9AD5F8;
    v96 = *(_QWORD *)(v83 + 8);
    v97 = *(std::__shared_weak_count **)(v83 + 16);
    if (v97)
    {
LABEL_52:
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
      v100 = *(_WORD *)(v83 + 48);
      do
        v101 = __ldxr(v98);
      while (__stxr(v101 + 1, v98));
      v102 = *(float32x4_t **)(v83 + 24);
      v323 = *(_OWORD *)(v83 + 32);
      do
        v103 = __ldxr(v98);
      while (__stxr(v103 + 1, v98));
      v320 = v96;
      v321 = v97;
      v322 = v102;
      v324 = v100;
      do
        v104 = __ldaxr(v98);
      while (__stlxr(v104 - 1, v98));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
      do
        v105 = __ldaxr(v98);
      while (__stlxr(v105 - 1, v98));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
LABEL_67:
      v108 = (float *)operator new(v81, (std::align_val_t)0x20uLL);
      v110 = v108;
      if (v28)
      {
        memcpy(v108, __src, __n);
        *(float *)v109.i32 = v110[1] - *v110;
        v111 = v309;
        v112 = *(_QWORD *)(v82 + 32);
        v113 = v112;
        if (!(_DWORD)v112)
          goto LABEL_95;
      }
      else
      {
        v111 = v309;
        v112 = *(_QWORD *)(v82 + 32);
        v113 = v112;
        if (!(_DWORD)v112)
          goto LABEL_95;
      }
      v114 = HIDWORD(v112);
      v115 = *(float *)v109.i32 * v312.n128_f32[0];
      v116 = *(float *)v109.i32 * v32;
      v117 = v322;
      v118 = *(_QWORD *)(v82 + 24);
      v119 = *(_DWORD *)(v82 + 40);
      v120 = *(_DWORD *)(v82 + 44);
      v121 = HIDWORD(v112) + ~(_DWORD)v111;
      v123 = DWORD2(v323);
      v122 = HIDWORD(v323);
      v124 = (DWORD2(v323) * (HIDWORD(v112) - 1));
      if (v317)
      {
        v125 = 0;
        v126 = v114 - 2 * v111 - 2;
        v127 = v120 * v31;
        v128 = DWORD2(v323) * ((2 * v111) | 1);
        v129 = v120 * v121;
        v130 = *(_DWORD *)(v82 + 44);
        do
        {
          v131 = &v117->f32[(v122 * v125)];
          v132 = 0.0;
          v133 = -(int)v111;
          v134 = v110;
          v135 = v14;
          v136 = 0.0;
          do
          {
            v137 = v131[(v133 & ~(v133 >> 31)) * v123];
            v138 = *v134++;
            v132 = v132 + (float)(v137 * v138);
            v136 = v136 + v137;
            ++v133;
            --v135;
          }
          while (v135);
          *(float *)(v118 + 4 * (v119 * v125)) = v132;
          if (v317 >= 2)
          {
            v139 = *v131;
            v140 = v116 * *v131;
            v141 = v123 * v31;
            v142 = v130;
            v143 = v111;
            do
            {
              v144 = v131[v141];
              v132 = v132 + (float)((float)(v140 - (float)(*(float *)v109.i32 * v136)) + (float)(v115 * v144));
              v136 = v136 + (float)(v144 - v139);
              *(float *)(v118 + 4 * v142) = v132;
              v142 += v120;
              v141 += v123;
              --v143;
            }
            while (v143);
          }
          if (v31 != v121)
          {
            v145 = 0;
            v146 = v127;
            v147 = v126;
            do
            {
              v148 = v131[v145];
              v149 = v131[v128 + v145];
              v132 = v132
                   + (float)((float)((float)(v116 * v148) - (float)(*(float *)v109.i32 * v136)) + (float)(v115 * v149));
              v136 = v136 + (float)(v149 - v148);
              *(float *)(v118 + 4 * v146) = v132;
              v146 += v120;
              v145 += v123;
              --v147;
            }
            while (v147);
          }
          v150 = v131[v124];
          v151 = v123 * v126;
          v152 = v129;
          v153 = v309 + 1;
          do
          {
            v154 = v131[v151];
            v132 = v132
                 + (float)((float)(v115 * v150) + (float)((float)(v116 * v154) - (float)(*(float *)v109.i32 * v136)));
            v136 = v136 + (float)(v150 - v154);
            *(float *)(v118 + 4 * v152) = v132;
            v152 += v120;
            v151 += v123;
            --v153;
          }
          while (v153);
          ++v125;
          v130 += v119;
          v127 += v119;
          v129 += v119;
        }
        while (v125 != v113);
      }
      else
      {
        if (v31 == v121)
        {
          *(float *)v109.i32 = *(float *)v109.i32 * 0.0;
          v155 = v120 * v31;
          if (v113 >= 0x18)
          {
            v156 = 0;
            v275 = __CFADD__(v155, v113 - 1);
            if (v119 == 1 && HIDWORD(v323) == 1 && !v275 && !((v113 - 1) >> 32))
            {
              v156 = 0;
              v276 = v118 + 4 * v155;
              v277 = v276 - (_QWORD)v322;
              if ((unint64_t)(v276 - (_QWORD)v322) >= 0x10)
              {
                v278 = &v322->i8[4 * v124];
                v279 = v276 - (_QWORD)v278;
                v280 = (unint64_t)v322 - v118;
                v281 = (unint64_t)&v278[-v118];
                v282 = v279 >= 0x10 && v280 >= 0x10;
                v283 = v282 && v281 >= 0x10;
                v284 = v283 && v155 >= 4;
                v285 = v284 && v281 >= 0x10;
                v286 = v285 && v280 >= 0x10;
                v287 = v286 && v279 >= 0x10;
                if (v287 && v277 >= 0x10)
                {
                  v289 = v112 & 3;
                  v290 = (float32x4_t)vdupq_lane_s32(v109, 0);
                  v156 = v113 - v289;
                  v291 = v155;
                  v292 = v113 - v289;
                  v293 = v322;
                  v294 = *(_OWORD **)(v82 + 24);
                  do
                  {
                    *v294++ = 0uLL;
                    v295 = vmulq_n_f32(*(float32x4_t *)((char *)v293 + 4 * v124), v115);
                    v296 = *v293++;
                    *(float32x4_t *)(v118 + 4 * v291) = vaddq_f32(vaddq_f32(v295, vsubq_f32(vmulq_n_f32(v296, v116), v290)), (float32x4_t)0);
                    v291 += 4;
                    v292 -= 4;
                  }
                  while (v292);
                  if (!v289)
                    goto LABEL_95;
                }
              }
            }
          }
          else
          {
            v156 = 0;
          }
          v157 = v113 - v156;
          v158 = v119 * v156;
          v159 = v122 * v156;
          do
          {
            *(_DWORD *)(v118 + 4 * v158) = 0;
            *(float *)(v118 + 4 * (v155 + v158)) = (float)((float)(v115 * v117->f32[v159 + v124])
                                                           + (float)((float)(v116 * v117->f32[v159]) - *(float *)v109.i32))
                                                   + 0.0;
            v158 += v119;
            v159 += v122;
            --v157;
          }
          while (v157);
          goto LABEL_95;
        }
        v160 = 0;
        v161 = v121 + ~(_DWORD)v111;
        v162 = v120 * v121;
        v163 = (DWORD2(v323) * v161);
        v164 = v114 - 2 * v111 - 2;
        v165 = v120 * v31;
        v166 = DWORD2(v323) * ((2 * v111) | 1);
        do
        {
          v167 = 0;
          v168 = (uint64_t)v117->i64 + 4 * (v122 * v160);
          *(_DWORD *)(v118 + 4 * (v119 * v160)) = 0;
          v169 = 0.0;
          v170 = v165;
          v171 = v164;
          v172 = 0.0;
          do
          {
            v173 = *(float *)(v168 + 4 * v167);
            v174 = *(float *)(v168 + 4 * (v166 + v167));
            v169 = v169
                 + (float)((float)((float)(v116 * v173) - (float)(*(float *)v109.i32 * v172)) + (float)(v115 * v174));
            v172 = v172 + (float)(v174 - v173);
            *(float *)(v118 + 4 * v170) = v169;
            v170 += v120;
            v167 += v123;
            --v171;
          }
          while (v171);
          *(float *)(v118 + 4 * (v119 * v160++ + v162)) = v169
                                                                        + (float)((float)(v115
                                                                                        * *(float *)(v168 + 4 * v124))
                                                                                + (float)((float)(v116
                                                                                                * *(float *)(v168 + 4 * v163))
                                                                                        - (float)(*(float *)v109.i32
                                                                                                * v172)));
          v165 += v119;
        }
        while (v160 != v113);
      }
LABEL_95:
      MEMORY[0x212BC6368](v110, 0x1000C8052888210);
      v175 = v321;
      v176 = a10;
      if (!v321)
        goto LABEL_99;
      v177 = (unint64_t *)&v321->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
        v319 = &off_24C9AD5F8;
        v179 = a5;
        v180 = *(_QWORD *)(a5 + 8);
        v181 = *(std::__shared_weak_count **)(a5 + 16);
        if (v181)
          goto LABEL_100;
      }
      else
      {
LABEL_99:
        v319 = &off_24C9AD5F8;
        v179 = a5;
        v180 = *(_QWORD *)(a5 + 8);
        v181 = *(std::__shared_weak_count **)(a5 + 16);
        if (v181)
        {
LABEL_100:
          v182 = (unint64_t *)&v181->__shared_owners_;
          do
            v183 = __ldxr(v182);
          while (__stxr(v183 + 1, v182));
          v184 = *(_WORD *)(a5 + 48);
          do
            v185 = __ldxr(v182);
          while (__stxr(v185 + 1, v182));
          v186 = *(float32x4_t **)(a5 + 24);
          v323 = *(_OWORD *)(a5 + 32);
          do
            v187 = __ldxr(v182);
          while (__stxr(v187 + 1, v182));
          v320 = v180;
          v321 = v181;
          v322 = v186;
          v324 = v184;
          do
            v188 = __ldaxr(v182);
          while (__stlxr(v188 - 1, v182));
          if (!v188)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
          do
            v189 = __ldaxr(v182);
          while (__stlxr(v189 - 1, v182));
          if (!v189)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
          sub_20EF47798((uint64_t)&v319, v298, v317);
          v190 = v321;
          if (!v321)
            goto LABEL_120;
          goto LABEL_117;
        }
      }
      v191 = *(_WORD *)(v179 + 48);
      v192 = *(float32x4_t **)(v179 + 24);
      v320 = v180;
      v321 = 0;
      v322 = v192;
      v323 = *(_OWORD *)(v179 + 32);
      v324 = v191;
      sub_20EF47798((uint64_t)&v319, v298, v317);
      v190 = v321;
      if (!v321)
        goto LABEL_120;
LABEL_117:
      v193 = (unint64_t *)&v190->__shared_owners_;
      do
        v194 = __ldaxr(v193);
      while (__stlxr(v194 - 1, v193));
      if (!v194)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
        v195 = *(std::__shared_weak_count **)(v304 + 16);
        if (v195)
        {
LABEL_121:
          v196 = (unint64_t *)&v195->__shared_owners_;
          do
            v197 = __ldxr(v196);
          while (__stxr(v197 + 1, v196));
          do
            v198 = __ldxr(v196);
          while (__stxr(v198 + 1, v196));
          v199 = *(_DWORD **)(v304 + 24);
          v200 = *(_QWORD *)(v304 + 32);
          v202 = *(_DWORD *)(v304 + 40);
          v201 = *(_DWORD *)(v304 + 44);
          do
            v203 = __ldxr(v196);
          while (__stxr(v203 + 1, v196));
          do
            v204 = __ldaxr(v196);
          while (__stlxr(v204 - 1, v196));
          v307 = v200;
          if (!v204)
          {
            v205 = v199;
            v206 = v201;
            ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
            std::__shared_weak_count::__release_weak(v195);
            v201 = v206;
            v199 = v205;
          }
          do
            v207 = __ldaxr(v196);
          while (__stlxr(v207 - 1, v196));
          if (v207)
          {
            v311 = v201;
            __dsta = v199;
            v208 = *(std::__shared_weak_count **)(v82 + 16);
            if (v208)
              goto LABEL_132;
LABEL_156:
            v214 = *(_DWORD *)(v82 + 40);
            v220 = *(std::__shared_weak_count **)(v298 + 16);
            v316 = v195;
            v318 = v220;
            v308 = *(_QWORD *)(v82 + 24);
            v310 = v208;
            v306 = *(_DWORD *)(v82 + 44);
            if (!v220)
              goto LABEL_157;
            goto LABEL_143;
          }
          v271 = v199;
          v272 = v201;
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
          v311 = v272;
          __dsta = v271;
          v208 = *(std::__shared_weak_count **)(v82 + 16);
          if (!v208)
            goto LABEL_156;
LABEL_132:
          v209 = (unint64_t *)&v208->__shared_owners_;
          do
            v210 = __ldxr(v209);
          while (__stxr(v210 + 1, v209));
          do
            v211 = __ldxr(v209);
          while (__stxr(v211 + 1, v209));
          v212 = *(_QWORD *)(v82 + 24);
          v214 = *(_DWORD *)(v82 + 40);
          v213 = *(_DWORD *)(v82 + 44);
          do
            v215 = __ldxr(v209);
          while (__stxr(v215 + 1, v209));
          do
            v216 = __ldaxr(v209);
          while (__stlxr(v216 - 1, v209));
          if (!v216)
          {
            v217 = v212;
            v218 = v213;
            ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
            std::__shared_weak_count::__release_weak(v208);
            v213 = v218;
            v212 = v217;
          }
          do
            v219 = __ldaxr(v209);
          while (__stlxr(v219 - 1, v209));
          if (v219)
          {
            v220 = *(std::__shared_weak_count **)(v298 + 16);
            v316 = v195;
            v318 = v220;
            v308 = v212;
            v310 = v208;
            v306 = v213;
            if (v220)
              goto LABEL_143;
LABEL_157:
            v224 = *(_QWORD *)(v298 + 24);
            v226 = *(_DWORD *)(v298 + 40);
            v225 = *(_DWORD *)(v298 + 44);
            goto LABEL_158;
          }
          v273 = v212;
          v274 = v213;
          ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
          std::__shared_weak_count::__release_weak(v208);
          v220 = *(std::__shared_weak_count **)(v298 + 16);
          v316 = v195;
          v318 = v220;
          v308 = v273;
          v310 = v208;
          v306 = v274;
          if (!v220)
            goto LABEL_157;
LABEL_143:
          v221 = (unint64_t *)&v220->__shared_owners_;
          do
            v222 = __ldxr(v221);
          while (__stxr(v222 + 1, v221));
          do
            v223 = __ldxr(v221);
          while (__stxr(v223 + 1, v221));
          v224 = *(_QWORD *)(v298 + 24);
          v226 = *(_DWORD *)(v298 + 40);
          v225 = *(_DWORD *)(v298 + 44);
          do
            v227 = __ldxr(v221);
          while (__stxr(v227 + 1, v221));
          do
            v228 = __ldaxr(v221);
          while (__stlxr(v228 - 1, v221));
          if (!v228)
          {
            ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
            v176 = a10;
            std::__shared_weak_count::__release_weak(v318);
          }
          do
            v229 = __ldaxr(v221);
          while (__stlxr(v229 - 1, v221));
          if (!v229)
          {
            ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
            std::__shared_weak_count::__release_weak(v318);
          }
LABEL_158:
          v230 = *v176;
          v231 = *((_DWORD *)v176 + 11);
          v232 = cbrtf(*(float *)a2);
          v233.n128_f32[0] = cbrtf(*(float *)(a2 + 16));
          v241 = __dsta;
          v242 = v311;
          v243 = v308;
          v244 = v306;
          if (HIDWORD(v307) && (_DWORD)v307)
          {
            v245 = 0;
            v234.i64[0] = *(_QWORD *)a2;
            v234.i32[2] = *(_DWORD *)(a2 + 8);
            v235.i64[0] = *(_QWORD *)(a2 + 12);
            v235.i32[2] = *(_DWORD *)(a2 + 20);
            v236.f32[0] = v232 * v233.n128_f32[0];
            v246.i64[0] = vzip1q_s32(v234, v235).u64[0];
            v246.i32[2] = *(_QWORD *)(a2 + 24);
            v247 = (int8x16_t)vtrn2q_s32(v234, v235);
            v247.i32[2] = HIDWORD(*(_QWORD *)(a2 + 24));
            v248 = vzip2q_s32(v234, v235);
            v248.i32[2] = *(_DWORD *)(a2 + 32);
            v249 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v236.f32, 0);
            v246.i32[3] = v247.i32[0];
            v250 = vnegq_f32((float32x4_t)vextq_s8(vextq_s8(v247, v247, 0xCuLL), (int8x16_t)v248, 8uLL));
            v251 = vnegq_f32(v246);
            v252 = vnegq_f32((float32x4_t)vdupq_laneq_s32(v248, 2));
            v233 = (__n128)vdivq_f32(v251, v249);
            v253 = vdivq_f32(v250, v249).u64[0];
            v236.f32[0] = vdivq_f32(v252, v236).f32[0];
            do
            {
              v254 = 0;
              v255 = 0;
              v256 = 0;
              v257 = 0;
              v258 = v230 + 4 * (v231 * v245);
              v259.i32[3] = v312.n128_i32[3];
              v251.f32[0] = v233.n128_f32[2] - (float)(v236.f32[0] * v312.n128_f32[0]);
              v260 = (int8x16_t)v251;
              *(float *)&v260.i32[1] = *((float *)&v253 + 1)
                                     - (float)(v236.f32[0] * (float)(v312.n128_f32[0] + (float)v245));
              v260.i32[2] = v236.i32[0];
              do
              {
                *(float *)v259.i32 = *(float *)v260.i32 - v236.f32[0];
                v237.i32[0] = __dsta[v311 * v245 + v254];
                v238.f32[0] = (float)(*(float *)v260.i32 - v236.f32[0]) * v237.f32[0];
                v259.i32[1] = v260.i32[1];
                v259.i32[2] = v260.i32[2];
                v239.i32[0] = *(_DWORD *)(v308 + 4 * v306 * v245 + 4 * v255);
                v237.f32[0] = v233.n128_f32[0] * v237.f32[0];
                v240.f32[0] = *(float *)&v253 * v239.f32[0];
                v261 = (float32x2_t)vextq_s8(v260, v260, 8uLL).u64[0];
                v262 = vmla_lane_f32(v238, v239, *(float32x2_t *)v260.i8, 1);
                v260.i32[0] = *(_DWORD *)(v224 + 4 * (v225 * v245) + 4 * v256);
                v239.f32[0] = v237.f32[0] * v237.f32[0];
                v237.i32[1] = v240.i32[0];
                v238 = vmla_f32(v262, *(float32x2_t *)v260.i8, v261);
                v237.i32[2] = v238.i32[0];
                v239 = vmla_f32(vmla_f32(v239, v240, v240), v238, v238);
                v263 = vmulq_n_f32(v237, 1.0 / sqrtf(v239.f32[0]));
                *(_DWORD *)(v258 + 4 * v257) = v263.i32[0];
                *(_DWORD *)(v258 + 4 * (v257 + 1)) = v263.i32[1];
                v264 = (_DWORD *)(v258 + 4 * (v257 + 2));
                v257 += 3;
                v256 += v226;
                *v264 = v263.i32[2];
                v255 += v214;
                v254 += v202;
                v260 = v259;
              }
              while (3 * v307 != v257);
              ++v245;
            }
            while (v245 != HIDWORD(v307));
          }
          if (v318)
          {
            v265 = (unint64_t *)&v318->__shared_owners_;
            do
              v266 = __ldaxr(v265);
            while (__stlxr(v266 - 1, v265));
            if (!v266)
            {
              ((void (*)(std::__shared_weak_count *, _DWORD *, _QWORD, uint64_t, _QWORD, __n128))v318->__on_zero_shared)(v318, __dsta, v311, v308, v306, v233);
              std::__shared_weak_count::__release_weak(v318);
            }
          }
          if (v310)
          {
            v267 = (unint64_t *)&v310->__shared_owners_;
            do
              v268 = __ldaxr(v267);
            while (__stlxr(v268 - 1, v267));
            if (!v268)
            {
              ((void (*)(std::__shared_weak_count *, _DWORD *, uint64_t, uint64_t, uint64_t, __n128))v310->__on_zero_shared)(v310, v241, v242, v243, v244, v233);
              std::__shared_weak_count::__release_weak(v310);
            }
          }
          if (v316)
          {
            v269 = (unint64_t *)&v316->__shared_owners_;
            do
              v270 = __ldaxr(v269);
            while (__stlxr(v270 - 1, v269));
            if (!v270)
            {
              ((void (*)(std::__shared_weak_count *, _DWORD *, uint64_t, uint64_t, uint64_t, __n128))v316->__on_zero_shared)(v316, v241, v242, v243, v244, v233);
              std::__shared_weak_count::__release_weak(v316);
            }
          }
          JUMPOUT(0x212BC6368);
        }
LABEL_155:
        v307 = *(_QWORD *)(v304 + 32);
        v202 = *(_DWORD *)(v304 + 40);
        v311 = *(_DWORD *)(v304 + 44);
        __dsta = *(_DWORD **)(v304 + 24);
        v208 = *(std::__shared_weak_count **)(v82 + 16);
        if (!v208)
          goto LABEL_156;
        goto LABEL_132;
      }
LABEL_120:
      v195 = *(std::__shared_weak_count **)(v304 + 16);
      if (v195)
        goto LABEL_121;
      goto LABEL_155;
    }
LABEL_66:
    v106 = *(_WORD *)(v83 + 48);
    v107 = *(float32x4_t **)(v83 + 24);
    v320 = v96;
    v321 = 0;
    v322 = v107;
    v323 = *(_OWORD *)(v83 + 32);
    v324 = v106;
    goto LABEL_67;
  }
LABEL_51:
  v319 = &off_24C9AD5F8;
  v96 = *(_QWORD *)(v83 + 8);
  v97 = *(std::__shared_weak_count **)(v83 + 16);
  if (v97)
    goto LABEL_52;
  goto LABEL_66;
}

void sub_20EF48C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  MEMORY[0x212BC6368](a17, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void sub_20EF48C90(__int128 *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t (**v8)();
  BOOL v9;
  uint64_t (**v10)();
  uint64_t (**v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  int v28;
  unint64_t v29;
  __n128 v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _BOOL4 v52;
  int v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  int v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81[2];
  int v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t (**v87)();
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t (**v90)();
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t (**v93)();
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t (**v96)();
  uint64_t v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t (**v101)();
  __int16 v102;
  std::__shared_weak_count *v103;
  uint64_t (**v104)();
  __int16 v105;
  std::__shared_weak_count *v106;
  uint64_t (**v107)();
  __int16 v108;
  std::__shared_weak_count *v109;
  uint64_t (**v110)();
  __int16 v111;
  std::__shared_weak_count *v112;
  uint64_t (**v113)();
  __int16 v114;
  std::__shared_weak_count *v115;
  _BYTE memptr[12];
  std::__shared_weak_count *v117;
  _BYTE v118[12];
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  if ((a3 < 2 || (a3 & 1) == 0)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Vision/NormalEstimation.cpp", 586, (uint64_t)"kernelSize > 1 && kernelSize % 2 == 1", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = (uint64_t (**)())*((_QWORD *)a1 + 1);
  v110 = (uint64_t (**)())__ROR8__(v8, 32);
  LODWORD(v107) = 0;
  v113 = &off_24C9AD388;
  sub_20E8A5D1C(&v110, &v107, &v114);
  v107 = (uint64_t (**)())__PAIR64__(v8, HIDWORD(v8));
  LODWORD(v104) = 0;
  v110 = &off_24C9AD388;
  sub_20E8A5D1C(&v107, &v104, &v111);
  v78 = a2;
  v79 = a3;
  v104 = v8;
  LODWORD(v101) = 0;
  v107 = &off_24C9AD388;
  sub_20E8A5D1C(&v104, &v101, &v108);
  v101 = v8;
  *(_DWORD *)memptr = 0;
  v104 = &off_24C9AD388;
  sub_20E8A5D1C(&v101, memptr, &v105);
  *(_QWORD *)memptr = v8;
  LODWORD(v96) = 0;
  v101 = &off_24C9AD388;
  sub_20E8A5D1C(memptr, &v96, &v102);
  if (HIDWORD(v8))
    v9 = (_DWORD)v8 == 0;
  else
    v9 = 1;
  if (v9)
    v10 = 0;
  else
    v10 = v8;
  *(_QWORD *)&memptr[4] = v10;
  *(_DWORD *)memptr = 3;
  v11 = v10;
  if ((_DWORD)v10)
    v12 = 3;
  else
    v12 = 0;
  v13 = HIDWORD(*(_QWORD *)&memptr[4]);
  if (HIDWORD(*(_QWORD *)&memptr[4]))
    v14 = (v12 * *(_DWORD *)&memptr[4]);
  else
    v14 = 0;
  v15 = v12 | (v14 << 32);
  *(_DWORD *)memptr = 3;
  v16 = *(_QWORD *)memptr;
  *(_DWORD *)memptr = 1;
  *(_QWORD *)&memptr[4] = v15;
  v74 = *(_QWORD *)memptr;
  if (HIDWORD(v16))
    v17 = (_DWORD)v16 == 0;
  else
    v17 = 1;
  v18 = v17 || (_DWORD)v13 == 0;
  v19 = v18;
  if (v18)
    v20 = 0;
  else
    v20 = v13;
  v21 = 4 * v14;
  v75 = v20;
  v22 = v20 * v14;
  if ((v21 & (v21 - 1)) != 0)
    v23 = 3;
  else
    v23 = v21 - 1;
  v24 = v23 | (v23 >> 1) | ((v23 | (v23 >> 1)) >> 2);
  v25 = v24 | (v24 >> 4) | ((v24 | (v24 >> 4)) >> 8);
  v26 = v25 | (v25 >> 16) | ((v25 | (v25 >> 16)) >> 32);
  if (v26 + 1 > 8)
    v27 = v26 + 1;
  else
    v27 = 8;
  v76 = v27;
  v77 = 4 * v22;
  if (v22)
  {
    *(_QWORD *)memptr = 0;
    v28 = malloc_type_posix_memalign((void **)memptr, v27, 4 * v22, 0x1F88E90uLL);
    if (v28)
      sub_210207B94(v28, v76, v77);
    v80 = *(_QWORD *)memptr;
  }
  else
  {
    v80 = 0;
  }
  if (v19)
    v29 = 0;
  else
    v29 = v16;
  v99 = *a1;
  v100 = *((_QWORD *)a1 + 2);
  *(_QWORD *)memptr = &off_24C9AD6F0;
  sub_20E8A5F70((uint64_t)&v113, (uint64_t *)&memptr[8]);
  v96 = &off_24C9AD6F0;
  sub_20E8A5F70((uint64_t)&v110, &v97);
  v93 = &off_24C9AD6F0;
  sub_20E8A5F70((uint64_t)&v107, &v94);
  v90 = &off_24C9AD6F0;
  sub_20E8A5F70((uint64_t)&v104, &v91);
  v73 = v29;
  v87 = &off_24C9AD6F0;
  sub_20E8A5F70((uint64_t)&v101, &v88);
  if ((_DWORD)v13)
    v31 = (_DWORD)v11 == 0;
  else
    v31 = 1;
  if (v31)
    v32 = 0;
  else
    v32 = (unint64_t)v11;
  *(_QWORD *)&v118[4] = v32;
  v33 = v32;
  *(_DWORD *)v118 = 3;
  v34 = *(_QWORD *)v118;
  v35 = HIDWORD(v32);
  *(_DWORD *)v118 = 1;
  *(_QWORD *)&v118[4] = v15;
  v36 = *(_QWORD *)v118;
  if ((_DWORD)v14 * HIDWORD(v32) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v81[0] = v80;
  v81[1] = v34;
  v82 = v35;
  v83 = v36;
  v84 = v14;
  v85 = v33;
  v86 = v15;
  sub_20EF47A98((uint64_t *)&v99, v78, v79, (uint64_t)memptr, (uint64_t)&v96, (uint64_t)&v93, (uint64_t)&v90, (uint64_t)&v87, v30, v81);
  v37 = v89;
  if (v89)
  {
    p_shared_owners = (unint64_t *)&v89->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v92;
  if (v92)
  {
    v41 = (unint64_t *)&v92->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v95;
  if (v95)
  {
    v44 = (unint64_t *)&v95->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v98;
  if (v98)
  {
    v47 = (unint64_t *)&v98->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v117;
  if (v117)
  {
    v50 = (unint64_t *)&v117->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v16 == 0;
  v53 = HIDWORD(v16) * v16;
  v54 = v16 << 32;
  if (!HIDWORD(v16))
  {
    v54 = 0;
    v52 = 1;
  }
  if (!(_DWORD)v13)
  {
    v53 = 0;
    v52 = 1;
  }
  v55 = !v52;
  if (v52)
    v56 = 0;
  else
    v56 = v16;
  *(_QWORD *)a4 = v56;
  if (v55)
    v57 = v13;
  else
    v57 = 0;
  *(_DWORD *)(a4 + 8) = v57;
  *(_QWORD *)(a4 + 12) = v54 | ((_DWORD)v16 != 0);
  *(_DWORD *)(a4 + 20) = v53;
  *(_BYTE *)(a4 + 24) = 0;
  *(_BYTE *)(a4 + 36) = 0;
  *(_QWORD *)(a4 + 40) = v77;
  *(_QWORD *)(a4 + 48) = v80;
  *(_QWORD *)(a4 + 56) = v76;
  *(_QWORD *)(a4 + 64) = v73;
  *(_DWORD *)(a4 + 72) = v75;
  *(_QWORD *)(a4 + 76) = (4 * v74) & 0xFFFFFFFCFFFFFFFCLL;
  *(_DWORD *)(a4 + 84) = 4 * v14;
  v58 = v103;
  if (v103)
  {
    v59 = (unint64_t *)&v103->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v106;
  if (v106)
  {
    v62 = (unint64_t *)&v106->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v109;
  if (v109)
  {
    v65 = (unint64_t *)&v109->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v112;
  if (v112)
  {
    v68 = (unint64_t *)&v112->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v115;
  if (v115)
  {
    v71 = (unint64_t *)&v115->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_20EF49348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  sub_20E8A5B30((uint64_t)&a36);
  sub_20E8A5B30((uint64_t)&a43);
  sub_20E8A5B30((uint64_t)&a50);
  sub_20E8A5B30(v50 - 176);
  if (a22)
    free(a22);
  sub_20E86665C(a10);
  sub_20E86665C(a11);
  sub_20E86665C(a12);
  sub_20E86665C(a13);
  sub_20E86665C(a14);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EF49430(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  *a1 = &off_24C9F1508;
  v2 = (std::__shared_weak_count *)a1[61];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[50];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[50];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[39];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[28];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[28];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[17];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      *a1 = off_24C9F14E0;
      v17 = (void *)a1[10];
      if (!v17)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  *a1 = off_24C9F14E0;
  v17 = (void *)a1[10];
  if (v17)
LABEL_26:
    free(v17);
LABEL_27:
  a1[10] = 0;
  return a1;
}

void sub_20EF495C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  *a1 = &off_24C9F1508;
  v2 = (std::__shared_weak_count *)a1[61];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[50];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[50];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[39];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[28];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[28];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[17];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    *a1 = off_24C9F14E0;
    v17 = (void *)a1[10];
    if (!v17)
      goto LABEL_27;
  }
  else
  {
LABEL_25:
    *a1 = off_24C9F14E0;
    v17 = (void *)a1[10];
    if (!v17)
    {
LABEL_27:
      a1[10] = 0;
      JUMPOUT(0x212BC6398);
    }
  }
  free(v17);
  goto LABEL_27;
}

_QWORD *sub_20EF49760(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)operator new();
  v7 = operator new();
  sub_20EF49C5C(v7, a2, a3);
  *v6 = v7;
  *a1 = v6;
  a1[1] = sub_20EF49FF0;
  return a1;
}

void sub_20EF497EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v2, 0x10F1C4073A16C8DLL);
  MEMORY[0x212BC6398](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_20EF49830(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  __n128 v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41[2];
  int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t (**v47)();
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t (**v50)();
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t (**v53)();
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t (**v56)();
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  uint64_t v60;
  _BYTE v61[12];
  std::__shared_weak_count *v62;
  _BYTE v63[12];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v59 = *a2;
  v60 = *((_QWORD *)a2 + 2);
  *(_QWORD *)v61 = &off_24C9AD6F0;
  sub_20E8A5F70(a1 + 120, (uint64_t *)&v61[8]);
  v56 = &off_24C9AD6F0;
  sub_20E8A5F70(a1 + 208, &v57);
  v53 = &off_24C9AD6F0;
  sub_20E8A5F70(a1 + 296, &v54);
  v50 = &off_24C9AD6F0;
  sub_20E8A5F70(a1 + 384, &v51);
  v47 = &off_24C9AD6F0;
  sub_20E8A5F70(a1 + 472, &v48);
  v10 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(a1 + 44))
    v11 = *(_DWORD *)(a1 + 40) == 0;
  else
    v11 = 1;
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  if (v11)
    v12 = 0;
  *(_QWORD *)&v63[4] = v12;
  v14 = v12;
  *(_DWORD *)v63 = 3;
  v15 = *(_QWORD *)v63;
  v16 = HIDWORD(v12);
  *(_DWORD *)v63 = 1;
  *(_QWORD *)&v63[4] = v13;
  v17 = *(_QWORD *)v63;
  if (HIDWORD(v13) * HIDWORD(v12) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v41[0] = v10;
  v41[1] = v15;
  v42 = v16;
  v43 = v17;
  v44 = HIDWORD(v13);
  v45 = v14;
  v46 = v13;
  sub_20EF47A98((uint64_t *)&v59, a3, a4, (uint64_t)v61, (uint64_t)&v56, (uint64_t)&v53, (uint64_t)&v50, (uint64_t)&v47, v9, v41);
  v18 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v52;
  if (v52)
  {
    v22 = (unint64_t *)&v52->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v55;
  if (v55)
  {
    v25 = (unint64_t *)&v55->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v58;
  if (v58)
  {
    v28 = (unint64_t *)&v58->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v62;
  if (v62)
  {
    v31 = (unint64_t *)&v62->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(a1 + 44))
    v34 = *(_DWORD *)(a1 + 40) == 0;
  else
    v34 = 1;
  v35 = *(_QWORD *)(a1 + 40);
  v36 = *(_QWORD *)(a1 + 48);
  if (v34)
    v35 = 0;
  *(_QWORD *)&v61[4] = v35;
  v37 = v35;
  *(_DWORD *)v61 = 3;
  v38 = *(_QWORD *)v61;
  v39 = HIDWORD(v35);
  *(_DWORD *)v61 = 1;
  *(_QWORD *)&v61[4] = v36;
  v40 = *(_QWORD *)v61;
  if (HIDWORD(v36) * HIDWORD(v35) == -1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(_QWORD *)a5 = v33;
  *(_QWORD *)(a5 + 8) = v38;
  *(_DWORD *)(a5 + 16) = v39;
  *(_QWORD *)(a5 + 20) = v40;
  *(_DWORD *)(a5 + 28) = HIDWORD(v36);
  *(_QWORD *)(a5 + 32) = v37;
  *(_QWORD *)(a5 + 40) = v36;
}

void sub_20EF49BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  sub_20E8A5B30((uint64_t)&a24);
  sub_20E8A5B30((uint64_t)&a31);
  sub_20E8A5B30((uint64_t)&a38);
  sub_20E8A5B30(v38 - 176);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF49C5C(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t StatusReg;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  _BYTE v28[12];
  _BYTE v29[12];
  _BYTE v30[13];
  _QWORD v31[3];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C9F14E0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  LODWORD(v24) = 0;
  *(_QWORD *)v28 = 1;
  *(_BYTE *)(a1 + 56) = 0;
  v6 = (_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)v28;
  *(_QWORD *)(a1 + 16) = 3;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 28) = v7;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  *(_QWORD *)v28 = v7;
  *(_DWORD *)&v28[8] = 0;
  v26 = 0;
  v27 = 0;
  sub_20EEC78DC(a1 + 72, (unsigned int *)&v26, (uint64_t *)v28, 1, (uint64_t)&v24, 1, 0);
  v8 = (a2 << 32) | 3;
  if ((_DWORD)a2)
    v9 = a3 == 0;
  else
    v9 = 1;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  if (v9)
  {
    v8 = 0;
    v11 = 0;
  }
  else
  {
    v11 = a3;
  }
  v12 = HIDWORD(v8) * v8;
  if (v9)
    v12 = 0;
  v23 = 0;
  if (HIDWORD(v8))
    v13 = v8 << 32;
  else
    v13 = 0;
  if (HIDWORD(v8))
    v14 = v8 == 0;
  else
    v14 = 1;
  *(_QWORD *)v28 = v8;
  *(_DWORD *)&v28[8] = v11;
  *(_QWORD *)v29 = v13 | ((_DWORD)v8 != 0);
  *(_DWORD *)&v29[8] = v12;
  v30[0] = 0;
  v30[12] = 0;
  v26 = *(_QWORD *)v29;
  v27 = v12;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
  if (HIDWORD(v8))
    v15 = v14;
  else
    v15 = 1;
  if (v15)
    v8 = 0;
  v24 = v8;
  if (v15)
    v16 = 0;
  else
    v16 = v11;
  v25 = v16;
  if (((4 * v12) & (4 * v12 - 1)) != 0)
    v17 = 4;
  else
    v17 = 4 * v12;
  sub_20EEC78DC((uint64_t)v31, (unsigned int *)&v24, &v26, 1, (uint64_t)&v23, 1, v17);
  v18 = *(void **)(a1 + 80);
  v19 = *(_QWORD *)&v29[4];
  v20 = v31[0];
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&v28[4];
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 20) = v19;
  *v6 = *(_QWORD *)v30;
  *(_QWORD *)((char *)v6 + 5) = *(_QWORD *)&v30[5];
  *(_OWORD *)(a1 + 96) = v32;
  *(_QWORD *)(a1 + 112) = v33;
  *(_QWORD *)(a1 + 72) = v20;
  if (v18)
    free(v18);
  v21 = v31[2];
  *(_QWORD *)(a1 + 80) = v31[1];
  *(_QWORD *)(a1 + 88) = v21;
  *(_QWORD *)a1 = &off_24C9F1508;
  *(_DWORD *)v28 = a3;
  *(_DWORD *)&v28[4] = a2;
  LODWORD(v26) = 0;
  *(_QWORD *)(a1 + 120) = &off_24C9AD388;
  sub_20E8A5D1C(v28, &v26, (_WORD *)(a1 + 128));
  *(_DWORD *)v28 = a3;
  *(_DWORD *)&v28[4] = a2;
  LODWORD(v26) = 0;
  *(_QWORD *)(a1 + 208) = &off_24C9AD388;
  sub_20E8A5D1C(v28, &v26, (_WORD *)(a1 + 216));
  *(_DWORD *)v28 = a2;
  *(_DWORD *)&v28[4] = a3;
  LODWORD(v26) = 0;
  *(_QWORD *)(a1 + 296) = &off_24C9AD388;
  sub_20E8A5D1C(v28, &v26, (_WORD *)(a1 + 304));
  *(_DWORD *)v28 = a2;
  *(_DWORD *)&v28[4] = a3;
  LODWORD(v26) = 0;
  *(_QWORD *)(a1 + 384) = &off_24C9AD388;
  sub_20E8A5D1C(v28, &v26, (_WORD *)(a1 + 392));
  *(_DWORD *)v28 = a2;
  *(_DWORD *)&v28[4] = a3;
  LODWORD(v26) = 0;
  *(_QWORD *)(a1 + 472) = &off_24C9AD388;
  sub_20E8A5D1C(v28, &v26, (_WORD *)(a1 + 480));
  return a1;
}

void sub_20EF49F78(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v9;

  sub_20E86665C(v5);
  sub_20E86665C(v4);
  sub_20E86665C(v3);
  sub_20E86665C(v2);
  *v1 = v6;
  v9 = (void *)v1[10];
  if (v9)
    free(v9);
  *v7 = 0;
  _Unwind_Resume(a1);
}

void sub_20EF49FD8()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 80))
    JUMPOUT(0x20EF49FCCLL);
  JUMPOUT(0x20EF49FC8);
}

_QWORD *sub_20EF49FF0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    *v1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EF4A040(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 56) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 60);
    if (v4 * (*(_QWORD *)(a1 + 64) >> 37) != -1)
      goto LABEL_11;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(void **)(a1 + 40);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
  return a1;
}

uint64_t sub_20EF4A0DC(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;

  *(_DWORD *)a1 = a2;
  v9 = 0uLL;
  v11 = 0;
  v10 = 0;
  *(_QWORD *)(a1 + 8) = a2 | ((unint64_t)a2 << 32);
  *(_QWORD *)(a1 + 16) = (a2 != 0) | ((unint64_t)a2 << 32);
  v4 = a1 + 8;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v5 = (unint64_t *)(a1 + 40);
  v12 = a2 | ((unint64_t)a2 << 32);
  v13 = (a2 != 0) | ((unint64_t)a2 << 32);
  if (((32 * a2) & (32 * a2 - 1)) != 0)
    v6 = 8;
  else
    v6 = 32 * a2;
  sub_20EF4A2DC(v5, &v12, &v13, 1, &v9, 1, v6);
  LODWORD(v12) = 0;
  *(_BYTE *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = 0;
  *(_QWORD *)&v9 = 0;
  v13 = 0;
  sub_20EF080A0((unint64_t *)(v4 + 104), &v13, (unint64_t *)&v9, 1, &v12, 1, 0);
  v7 = log2((double)a2) + 1;
  *(_DWORD *)(a1 + 152) = v7;
  if (v7 >= 0x10
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/ACV/SurfaceDetection/src/Vision/NormalHistogram.cpp", 75, (uint64_t)"mLinearFactor < 16u && \"The number of bins is too large. Make it less than 2^16.\"", 81, (uint64_t)&unk_210268AB1, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return a1;
}

void sub_20EF4A208(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 + 120);
  if (v4)
    free(v4);
  *(_QWORD *)(v2 + 120) = 0;
  sub_20EF4A040(v1);
  _Unwind_Resume(a1);
}

void sub_20EF4A22C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EF4A040(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF4A240(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 24) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 28);
    if (v4 * (*(_QWORD *)(a1 + 32) >> 37) != -1)
      goto LABEL_11;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = *(void **)(a1 + 8);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

unint64_t *sub_20EF4A2DC(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, __int128 *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  char *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  int v32;
  __int128 v33;
  __int128 v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char *v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *memptr;

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 32 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr = 0;
    v20 = malloc_type_posix_memalign(&memptr, v19, 32 * v14, 0x1F88E90uLL);
    if (v20)
      sub_210207B94(v20, a1[2], v15);
    v21 = (char *)memptr;
    a1[1] = (unint64_t)memptr;
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (32 * v11) & 0xFFFFFFE0FFFFFFE0;
    if (v21)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = v22;
      v25 = HIDWORD(v24) * ((v11 >> 27) >> 5);
      if (a6)
      {
        if (v25 == -1
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if ((_DWORD)v24 && HIDWORD(v24))
        {
          v26 = v24 - 1;
          v27 = HIDWORD(v24) - 1;
          if (HIDWORD(v24) != 1)
          {
            v28 = HIDWORD(v11) & 0x7FFFFFF;
            if ((_DWORD)v24 == 1)
            {
              do
              {
                v42 = *a5;
                *((_QWORD *)v21 + 2) = *((_QWORD *)a5 + 2);
                *(_OWORD *)v21 = v42;
                *((_DWORD *)v21 + 6) = *((_DWORD *)a5 + 6);
                v21 += 32 * v28;
                --v27;
              }
              while (v27);
            }
            else
            {
              v29 = 0;
              v30 = 32 * v28;
              do
              {
                v31 = v21;
                v32 = v24 - 1;
                do
                {
                  v33 = *a5;
                  *((_QWORD *)v31 + 2) = *((_QWORD *)a5 + 2);
                  *(_OWORD *)v31 = v33;
                  *((_DWORD *)v31 + 6) = *((_DWORD *)a5 + 6);
                  v31 += 32 * (v11 & 0x7FFFFFF);
                  --v32;
                }
                while (v32);
                v34 = *a5;
                *((_QWORD *)v31 + 2) = *((_QWORD *)a5 + 2);
                *(_OWORD *)v31 = v34;
                *((_DWORD *)v31 + 6) = *((_DWORD *)a5 + 6);
                v21 += v30;
                ++v29;
              }
              while (v29 != v27);
            }
          }
          if ((_DWORD)v24 != 1)
          {
            do
            {
              v43 = *a5;
              *((_QWORD *)v21 + 2) = *((_QWORD *)a5 + 2);
              *(_OWORD *)v21 = v43;
              *((_DWORD *)v21 + 6) = *((_DWORD *)a5 + 6);
              v21 += 32 * (v11 & 0x7FFFFFF);
              --v26;
            }
            while (v26);
          }
          v44 = *a5;
          *((_QWORD *)v21 + 2) = *((_QWORD *)a5 + 2);
          *(_OWORD *)v21 = v44;
          *((_DWORD *)v21 + 6) = *((_DWORD *)a5 + 6);
        }
      }
      else
      {
        if (v25 == -1
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if ((_DWORD)v24 && HIDWORD(v24))
        {
          v35 = v24 - 1;
          v36 = HIDWORD(v24) - 1;
          if (HIDWORD(v24) != 1)
          {
            v37 = HIDWORD(v11) & 0x7FFFFFF;
            if ((_DWORD)v24 == 1)
            {
              do
              {
                *(_QWORD *)v21 = 0;
                *((_QWORD *)v21 + 1) = 0;
                *((_DWORD *)v21 + 6) = 0;
                *((_QWORD *)v21 + 2) = 0;
                v21 += 32 * v37;
                --v36;
              }
              while (v36);
            }
            else
            {
              v38 = 0;
              v39 = 32 * v37;
              do
              {
                v40 = v21;
                v41 = v24 - 1;
                do
                {
                  *(_QWORD *)v40 = 0;
                  *((_QWORD *)v40 + 1) = 0;
                  *((_DWORD *)v40 + 6) = 0;
                  *((_QWORD *)v40 + 2) = 0;
                  v40 += 32 * (v11 & 0x7FFFFFF);
                  --v41;
                }
                while (v41);
                *(_QWORD *)v40 = 0;
                *((_QWORD *)v40 + 1) = 0;
                *((_DWORD *)v40 + 6) = 0;
                *((_QWORD *)v40 + 2) = 0;
                v21 += v39;
                ++v38;
              }
              while (v38 != v36);
            }
          }
          if ((_DWORD)v24 != 1)
          {
            do
            {
              *(_QWORD *)v21 = 0;
              *((_QWORD *)v21 + 1) = 0;
              *((_DWORD *)v21 + 6) = 0;
              *((_QWORD *)v21 + 2) = 0;
              v21 += 32 * (v11 & 0x7FFFFFF);
              --v35;
            }
            while (v35);
          }
          *(_QWORD *)v21 = 0;
          *((_QWORD *)v21 + 1) = 0;
          *((_DWORD *)v21 + 6) = 0;
          *((_QWORD *)v21 + 2) = 0;
        }
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (32 * v11) & 0xFFFFFFE0FFFFFFE0;
  }
  return a1;
}

void sub_20EF4A648(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EF4A240(v1);
  _Unwind_Resume(a1);
}

void sub_20EF4A65C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EF4A240(v1);
  _Unwind_Resume(a1);
}

float sub_20EF4A670(uint64_t a1, _DWORD *a2, int *a3, _DWORD *a4, _DWORD *a5)
{
  int v7;
  float result;
  int v9;
  _DWORD v10[2];
  _DWORD v11[2];

  v7 = *a3;
  v11[0] = *a2;
  v11[1] = v7;
  if ((*(unsigned int (**)(uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)a1 + 24))(a1, v11, v10))
  {
    result = *(float *)v10;
    v9 = v10[1];
    *a4 = v10[0];
    *a5 = v9;
  }
  return result;
}

float sub_20EF4A6C8(uint64_t a1, _DWORD *a2, int *a3, _DWORD *a4, _DWORD *a5)
{
  int v7;
  float result;
  int v9;
  _DWORD v10[2];
  _DWORD v11[2];

  v7 = *a3;
  v11[0] = *a2;
  v11[1] = v7;
  if ((*(unsigned int (**)(uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)a1 + 40))(a1, v11, v10))
  {
    result = *(float *)v10;
    v9 = v10[1];
    *a4 = v10[0];
    *a5 = v9;
  }
  return result;
}

float sub_20EF4A720(uint64_t a1, _DWORD *a2, int *a3, _DWORD *a4, _DWORD *a5, float *a6)
{
  int v9;
  float result;
  int v11;
  _DWORD v12[2];
  float v13;
  _DWORD v14[2];

  v9 = *a3;
  v14[0] = *a2;
  v14[1] = v9;
  if ((*(unsigned int (**)(uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)a1 + 56))(a1, v14, v12))
  {
    v11 = v12[1];
    *a4 = v12[0];
    *a5 = v11;
    result = v13;
    *a6 = v13;
  }
  return result;
}

uint64_t sub_20EF4A78C(uint64_t a1, _DWORD *a2, int *a3)
{
  int v3;
  _DWORD v5[2];

  v3 = *a3;
  v5[0] = *a2;
  v5[1] = v3;
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 48))(a1, v5);
}

uint64_t sub_20EF4A7C0(uint64_t result, uint64_t a2)
{
  float v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  std::logic_error *exception;

  *(_QWORD *)result = &off_24C9F1578;
  v2 = *(float *)a2;
  if (fabsf(*(float *)a2) < 0.00000011921 || (v3 = *(float *)(a2 + 4), fabsf(v3) < 0.00000011921))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PinholeCameraModel parameters invalid");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 8);
  v5 = *(float *)(a2 + 12);
  *(float *)(result + 8) = v2;
  *(float *)(result + 12) = v3;
  *(_DWORD *)(result + 16) = v4;
  *(float *)(result + 20) = v5;
  LODWORD(v6) = 0;
  *((float *)&v6 + 1) = v3;
  *((float *)&v4 + 1) = v5;
  *(float *)(result + 24) = 1.0 / v2;
  *(float *)(result + 28) = 1.0 / v3;
  *(float *)(result + 32) = -(float)(*(float *)&v4 * (float)(1.0 / v2));
  *(float *)(result + 36) = -(float)(v5 * (float)(1.0 / v3));
  *(_QWORD *)(result + 40) = LODWORD(v2);
  *(_QWORD *)(result + 48) = v6;
  *(_QWORD *)(result + 56) = v4;
  *(float *)(result + 64) = v2 * v3;
  *(float *)(result + 68) = v2;
  *(float *)(result + 72) = v3;
  return result;
}

void sub_20EF4A89C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EF4A8B4()
{
  JUMPOUT(0x212BC6398);
}

BOOL sub_20EF4A8C8(float *a1, float *a2, float *a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v16;
  float v17;
  float v18;

  if ((*(unsigned int (**)(float *))(*(_QWORD *)a2 + 96))(a2) != 1)
    return 0;
  v6 = a1[2];
  v7 = a2[2];
  if (v6 != v7)
  {
    v8 = v6 >= v7 ? v6 - v7 : v7 - v6;
    if (v8 > *a3)
      return 0;
  }
  v9 = a1[3];
  v10 = a2[3];
  if (v9 != v10)
  {
    v11 = v9 >= v10 ? v9 - v10 : v10 - v9;
    if (v11 > *a3)
      return 0;
  }
  v12 = a1[4];
  v13 = a2[4];
  if (v12 != v13)
  {
    v14 = v12 >= v13 ? v12 - v13 : v13 - v12;
    if (v14 > *a3)
      return 0;
  }
  v16 = a1[5];
  v17 = a2[5];
  if (v16 == v17)
    return 1;
  if (v16 >= v17)
    v18 = v16 - v17;
  else
    v18 = v17 - v16;
  return v18 <= *a3;
}

BOOL sub_20EF4A9E4(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;

  v3 = a2[2];
  v4 = fabsf(v3);
  if (v4 >= 0.000001)
  {
    v5 = 1.0 / v3;
    *a3 = a1[4] + (float)(v5 * (float)(a1[2] * *a2));
    a3[1] = a1[5] + (float)(v5 * (float)(a1[3] * a2[1]));
  }
  return v4 >= 0.000001;
}

float32x2_t sub_20EF4AA50(_QWORD *a1, float32x2_t *a2, uint64_t a3, float32x2_t *a4)
{
  float32x2_t result;
  float v8;
  float32x2_t v9;
  float v10;
  float32x2_t v11;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 72))(a1))
  {
    v8 = 1.0 / a2[1].f32[0];
    v9 = (float32x2_t)a1[1];
    v10 = vmuls_lane_f32(v8, v9, 1);
    v11 = vmul_n_f32(vmul_f32(*a2, vneg_f32(v9)), v8);
    a4->f32[0] = v8 * v9.f32[0];
    a4->i32[1] = 0;
    a4[1].i32[0] = 0;
    result = vmul_n_f32(v11, v8);
    a4[1].f32[1] = v10;
    a4[2] = result;
  }
  return result;
}

uint64_t sub_20EF4AAC8(float *a1, float *a2, float *a3)
{
  *a3 = (float)(a1[6] * *a2) + a1[8];
  a3[1] = (float)(a1[7] * a2[1]) + a1[9];
  return 1;
}

uint64_t sub_20EF4AB00(float *a1, float *a2, float *a3)
{
  *a3 = (float)(a1[2] * *a2) + a1[4];
  a3[1] = (float)(a1[3] * a2[1]) + a1[5];
  return 1;
}

uint64_t sub_20EF4AB38(float *a1, float *a2, float32x2_t *a3)
{
  float32x2_t v3;
  float v4;

  a3->f32[0] = (float)(a1[6] * *a2) + a1[8];
  a3->f32[1] = (float)(a1[7] * a2[1]) + a1[9];
  v3 = *a3;
  v4 = 1.0 / sqrtf(vmla_lane_f32(vmul_f32(v3, v3), (float32x2_t)vdup_lane_s32((int32x2_t)*a3, 1), *a3, 1).f32[0] + 1.0);
  if (a1[2] < 0.0)
    v4 = -v4;
  *a3 = vmul_n_f32(v3, v4);
  a3[1].f32[0] = v4;
  return 1;
}

char *sub_20EF4ABAC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  __int128 v5;
  char *result;

  v4 = operator new(0x68uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C9F1688;
  v5 = *(_OWORD *)(a1 + 24);
  *((_OWORD *)v4 + 2) = *(_OWORD *)(a1 + 8);
  *((_OWORD *)v4 + 3) = v5;
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a1 + 40);
  v4[10] = *(_QWORD *)(a1 + 56);
  *((_DWORD *)v4 + 22) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)((char *)v4 + 92) = *(_QWORD *)(a1 + 68);
  a2[1] = v4;
  v4[3] = &off_24C9F1578;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

uint64_t sub_20EF4AC24()
{
  return 1;
}

uint64_t sub_20EF4AC2C(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6) != 1)
    return 0;
  v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v8, a3);
  if (!(_DWORD)result)
    return result;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 80))(&v10, a2);
  if (a1[22] != (_DWORD)v10)
    return 0;
  return a1[23] == HIDWORD(v10);
}

char *sub_20EF4AD10@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  __int128 v5;
  char *result;

  v4 = (char *)operator new(0x80uLL);
  v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)v4 = &off_24C9F16D8;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 4) = &off_24C9F1578;
  *(_OWORD *)(v4 + 56) = v5;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a1 + 48);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a1 + 64);
  *((_DWORD *)v4 + 24) = *(_DWORD *)(a1 + 72);
  *(_QWORD *)(v4 + 100) = *(_QWORD *)(a1 + 76);
  *((_OWORD *)v4 + 7) = *(_OWORD *)(a1 + 88);
  a2[1] = v4;
  *((_QWORD *)v4 + 3) = &off_24C9F15F0;
  result = v4 + 24;
  *a2 = result;
  return result;
}

BOOL sub_20EF4AD9C(uint64_t a1, float *a2, float a3)
{
  float v3;

  if ((float)(*a2 - a3) < -0.5)
    return 0;
  v3 = a2[1];
  return (float)(v3 - a3) >= -0.5
      && (float)(*a2 + a3) < (float)(*(float *)(a1 + 96) + -0.5)
      && (float)(v3 + a3) < (float)(*(float *)(a1 + 100) + -0.5);
}

uint64_t sub_20EF4ADF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __n128 v7;
  __n128 v8;
  BOOL v9;
  __n128 v10;
  __n128 v11;
  BOOL v12;
  uint64_t v13;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v7.n128_u32[0] = *(_DWORD *)(a2 + 8);
  v8.n128_u32[0] = -1249495107;
  v9 = *(float *)(v6 + 8) >= 0.0 || v7.n128_f32[0] <= -0.000001;
  if (v9
    && ((v11.n128_u32[0] = *(_DWORD *)((*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)a1 + 16))(a1, v8, v7)+ 8), v10.n128_u32[0] = *(_DWORD *)(a2 + 8), v9 = v11.n128_f32[0] <= 0.0, v11.n128_u32[0] = 897988541, !v9)? (v12 = v10.n128_f32[0] < 0.000001): (v12 = 0), !v12&& (v13 = (*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)a1 + 16))(a1, v11, v10), (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 72))(v13, a2, a3))))
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 48))(a1, a3, 0.0);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_20EF4AED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 80))(v8, a2, a3, a4);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 48))(a1, a3, 0.0);
  return result;
}

char *sub_20EF4AF4C@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  int v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *result;
  uint32x2_t v15;
  int32x2_t v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[8];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _DWORD v26[4];
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + 8);
  v7 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + 12);
  v8 = *(float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + 16)
     - (float)(**a2 + (*a2[1] & ((int)*a2[1] >> 31)));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v16 = *(int32x2_t *)a2[1];
  v10 = *(float *)(v9 + 20) - (float)((*a2)[1] + (v16.i32[1] & (v16.i32[1] >> 31)));
  v26[0] = v6;
  v26[1] = v7;
  *(float *)&v26[2] = v8;
  *(float *)&v26[3] = v10;
  sub_20EF4A7C0((uint64_t)v19, (uint64_t)v26);
  v17 = v21;
  v18 = v20;
  v27 = v22;
  v11 = v23;
  v12 = v24;
  v13 = v25;
  result = (char *)operator new(0x80uLL);
  v15 = (uint32x2_t)vabs_s32(v16);
  *(_QWORD *)result = &off_24C9F16D8;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 3) = &off_24C9F15F0;
  *((_QWORD *)result + 2) = 0;
  *((_QWORD *)result + 4) = &off_24C9F1578;
  *(_OWORD *)(result + 40) = v18;
  *(_OWORD *)(result + 56) = v17;
  *(_OWORD *)(result + 72) = v27;
  *((_QWORD *)result + 11) = v11;
  *((_DWORD *)result + 24) = v12;
  *(_QWORD *)(result + 100) = v13;
  *((uint32x2_t *)result + 14) = v15;
  *((float32x2_t *)result + 15) = vcvt_f32_u32(v15);
  *a3 = result + 24;
  a3[1] = result;
  return result;
}

_QWORD *sub_20EF4B118(_QWORD *result)
{
  *result = &off_24C9F15F0;
  return result;
}

void sub_20EF4B128(_QWORD *a1)
{
  *a1 = &off_24C9F15F0;
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EF4B148(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_20EF4B150@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 88);
  return result;
}

void sub_20EF4B15C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EF4B16C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EF4B19C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

float sub_20EF4B1AC@<S0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  float result;
  _BYTE v9[24];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;

  v6 = (char *)operator new(0x80uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24C9F16D8;
  v7 = *a2;
  v15 = *a1;
  sub_20EF4A7C0((uint64_t)v9, (uint64_t)&v15);
  *((_QWORD *)v6 + 3) = &off_24C9F15F0;
  *((_QWORD *)v6 + 4) = &off_24C9F1578;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)&v9[8];
  *(_OWORD *)(v6 + 56) = v10;
  *(_OWORD *)(v6 + 72) = v11;
  *((_QWORD *)v6 + 11) = v12;
  *((_DWORD *)v6 + 24) = v13;
  *(_QWORD *)(v6 + 100) = v14;
  *((_QWORD *)v6 + 14) = v7;
  result = (float)v7;
  *((float *)v6 + 30) = (float)v7;
  *((float *)v6 + 31) = (float)HIDWORD(v7);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_20EF4B278(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_20EF4B290(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F16D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EF4B2A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F16D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EF4B2D0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20EF4B2E0(_QWORD *a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;

  v4 = (std::__shared_weak_count *)operator new();
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1778;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  v6 = operator new(0x40uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_24C9F17C8;
  v6[3] = a2;
  v6[4] = v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v6[5] = 0;
  v6[6] = 0;
  v6[7] = 0;
  *a1 = v6 + 3;
  a1[1] = v6;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20EF4B3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF4B3E8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_20EF4B3F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20EF4B408(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;

  v2 = (std::__shared_weak_count *)operator new();
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1728;
  v2->__shared_weak_owners_ = 0;
  v2[1].__vftable = 0;
  v4 = operator new(0x40uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24C9F17C8;
  v4[3] = 0;
  v4[4] = v2;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  v4[5] = 0;
  v4[6] = 0;
  v4[7] = 0;
  *a1 = v4 + 3;
  a1[1] = v4;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_20EF4B4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF4B50C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_20EF4B518(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EF4B530(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EF4B558(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit4lhud6HUDPtrC1EP12LHConnectionE3$_0")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit4lhud6HUDPtrC1EP12LHConnectionE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit4lhud6HUDPtrC1EP12LHConnectionE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit4lhud6HUDPtrC1EP12LHConnectionE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EF4B5CC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EF4B5F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit4lhud6HUDPtrC1EP12LHConnectionNS1_9RetainTagEE3$_0")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit4lhud6HUDPtrC1EP12LHConnectionNS1_9RetainTagEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit4lhud6HUDPtrC1EP12LHConnectionNS1_9RetainTagEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit4lhud6HUDPtrC1EP12LHConnectionNS1_9RetainTagEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20EF4B664(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F17C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EF4B674(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F17C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EF4B6A4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_20EF4B744(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  std::string *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  void (*v23)(uint64_t, _WORD *, int);
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  std::string *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  void (*v36)(uint64_t, _WORD *, int);
  int v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  std::string *v41;
  uint64_t v42;
  void (*v43)(std::string::size_type *, std::string::size_type *, uint64_t);
  uint64_t v44;
  char *v45;
  std::string *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _DWORD *v52;
  void (*v53)(uint64_t, _WORD *, int);
  int v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  std::string *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  void (*v66)(uint64_t, _WORD *, int);
  int v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  std::string *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  _BYTE v80[32];
  __int128 v81;
  uint64_t v82;
  _BYTE __p[32];
  __int128 v84;
  uint64_t v85;
  std::string v86;
  std::string v87;
  uint64_t v88;
  std::string v89;
  std::string v90;
  __int128 v91;
  uint64_t v92;
  std::string __dst;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  std::string __src;
  __int128 v98;
  uint64_t v99;
  uint64_t (**v100)();
  _QWORD v101[3];
  char *v102;
  std::string v103;
  __int128 v104;
  uint64_t v105;
  char *v106;
  std::string v107;
  __int128 v108;
  uint64_t v109;
  char *v110;
  std::string v111;
  __int128 v112;
  uint64_t v113;

  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DBFB0;
  strcpy(*(char **)__p, "MappingIO configurations");
  v78 = a2;
  sub_20E8B30B4(a2, (__int128 *)__p, 180, 160);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_QWORD *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DCA10;
  strcpy(*(char **)__p, "MappingIOInterfaceConfig parameters");
  sub_20E8B30B4(v80, (__int128 *)__p, 180, 160);
  v3 = a1;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    v3 = a1;
  }
  sub_20EF5E16C(v3 + 72, __p);
  sub_20E8B32F0(v80, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  *(_QWORD *)__p = nullsub_1(v80);
  v4 = sub_20EAA14D8((_BYTE *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)__p, "MappingIO.Interface.load_object_anchor_from_map_data", v4, "Flag to determine whether to load the object anchors from the samples when initializing the MapData. The default behavior for ARKit right it does not preload the object anchors, and relies on the user adds back the anchor. In XR, the object anchor will be maintained by the map and surface to the user when the map is merged.");
  *(_QWORD *)__p = nullsub_1(v80);
  v5 = sub_20EA9DB90((double *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)__p, "MappingIO.Interface.save_interval", v5, "Time in seconds between save attempts.");
  *(_QWORD *)__p = nullsub_1(v80);
  v6 = sub_20EA9DB90((double *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)__p, "MappingIO.Interface.submap_load_radius", v6, "Radius for finding submaps to load. Default uses 30 m enlarged radius plus 100 m for CL acc.");
  *(_QWORD *)__p = nullsub_1(v80);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 104));
  sub_20E8B2F9C((uint64_t *)__p, "MappingIO.Interface.is_log_to_file_enabled", v7, "File used too track Mapping IO activity over large period of time.");
  *(_QWORD *)__p = nullsub_1(v80);
  v8 = sub_20EF4E8E4(a1 + 112);
  sub_20E8B2F9C((uint64_t *)__p, "MappingIO.Interface.log_file", v8, "Filepath to save log from MappingIO.");
  *(_QWORD *)__p = nullsub_1(v80);
  v9 = sub_20EAA1CB0((unint64_t *)(a1 + 136));
  sub_20E8B2F9C((uint64_t *)__p, "MappingIO.Interface.max_log_file_size_bytes", v9, "Maximum rolling log file size in bytes (if exceeded, backup copy may be created). Default value is 2.4 Mb (because of sysdiagnose restrictions about 5 Mb for all logs).");
  *(_QWORD *)__p = nullsub_1(v80);
  v10 = sub_20EA9DCF0((unsigned int *)(a1 + 144));
  sub_20E8B2F9C((uint64_t *)__p, "MappingIO.Interface.max_back_up_index", v10, "Maximum number of log file backup copies.\nIt seems implementation specific of TinyLog.hpp. If 0, no copies will be created, but file size will not be limited by max_log_file_size_bytes. So if you set it to 1, the final file size will be limited to max_log_file_size_bytes, but 1 additional copy will be created of size ~max_log_file_size_bytes. In general (max_back_up_index+1)*max_log_file_size_bytes will be occupied on disk.");
  *(_QWORD *)__p = nullsub_1(v80);
  v11 = sub_20EAA1CB0((unint64_t *)(a1 + 152));
  sub_20E8B2F9C((uint64_t *)__p, "MappingIO.Interface.max_disjoint_submap_bytes_to_load", v11, "Limit on the amount of disjoint submaps bytes that will be loaded.");
  *(_QWORD *)__p = nullsub_1(v80);
  v12 = sub_20EAA1CB0((unint64_t *)(a1 + 160));
  sub_20E8B2F9C((uint64_t *)__p, "MappingIO.Interface.max_located_submap_bytes_to_load", v12, "Limit on the amount of located submaps bytes that will be loaded.");
  *(_QWORD *)__p = nullsub_1(v80);
  v13 = sub_20EAA1CB0((unint64_t *)(a1 + 168));
  sub_20E8B2F9C((uint64_t *)__p, "MappingIO.Interface.max_submap_bytes_on_disk", v13, "Limit on the amount of submaps bytes on disk.");
  *(_QWORD *)__p = nullsub_1(v80);
  v14 = sub_20EAA14D8((_BYTE *)(a1 + 176));
  sub_20E8B2F9C((uint64_t *)__p, "MappingIO.Interface.copy_pruned_submaps_to_debug_dir", v14, "Copy the pruned submaps to debug directory.");
  *(_QWORD *)__p = nullsub_1(v80);
  v15 = sub_20EAA1CB0((unint64_t *)(a1 + 184));
  sub_20E8B2F9C((uint64_t *)__p, "MappingIO.Interface.chunk_size", v15, "Chunk size for loading maps.");
  *(_QWORD *)__p = operator new(0x38uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DBF10;
  strcpy(*(char **)__p, "MappingIO.Interface.load_object_anchor_from_map_data");
  v110 = (char *)operator new(0x38uLL);
  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = xmmword_2102DCA50;
  strcpy(v110, "MappingIOConfig.load_object_anchor_from_map_data");
  sub_20EF4F244((uint64_t)v80, (_BYTE *)(a1 + 48), (void **)__p, (char *)&v110);
  if (v111.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v110);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)__p);
LABEL_7:
  *(_QWORD *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DBA80;
  strcpy(*(char **)__p, "MappingIO.Interface.save_interval");
  v110 = (char *)operator new(0x20uLL);
  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = xmmword_2102DC000;
  strcpy(v110, "MappingIOConfig.save_interval");
  sub_20EF55B50((uint64_t)v80, (_QWORD *)(a1 + 56), (void **)__p, (char *)&v110);
  if (v111.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v110);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)__p);
LABEL_9:
  *(_QWORD *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DB450;
  strcpy(*(char **)__p, "MappingIO.Interface.submap_load_radius");
  v110 = (char *)operator new(0x28uLL);
  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = xmmword_2102DC8F0;
  strcpy(v110, "MappingIOConfig.submap_load_radius");
  sub_20EF55B50((uint64_t)v80, (_QWORD *)(a1 + 64), (void **)__p, (char *)&v110);
  if (v111.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v110);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_11;
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*(void **)__p);
LABEL_11:
  *(_QWORD *)__p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_2102E3F90;
  strcpy(*(char **)__p, "MappingIO.Interface.is_log_to_file_enabled");
  v110 = (char *)operator new(0x28uLL);
  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = xmmword_2102DB450;
  strcpy(v110, "MappingIOConfig.is_log_to_file_enabled");
  sub_20EF4F244((uint64_t)v80, (_BYTE *)(a1 + 104), (void **)__p, (char *)&v110);
  if (v111.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v110);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_13;
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(*(void **)__p);
LABEL_13:
  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DB470;
  strcpy(*(char **)__p, "MappingIO.Interface.log_file");
  v110 = (char *)operator new(0x20uLL);
  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = xmmword_2102DBFB0;
  strcpy(v110, "MappingIOConfig.log_file");
  sub_20EF4E9CC((uint64_t)v80, a1 + 112, (void **)__p, (char *)&v110);
  if (v111.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v110);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(*(void **)__p);
LABEL_15:
  v16 = (char *)operator new(0x30uLL);
  strcpy(v16, "MappingIO.Interface.max_log_file_size_bytes");
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v89.__r_.__value_.__r.__words[1] = xmmword_2102DCA20;
  strcpy(v89.__r_.__value_.__l.__data_, "MappingIOConfig.max_log_file_size_bytes");
  sub_210237040("Deprecated config for '%s'", &v86, v16);
  v87.__r_.__value_.__r.__words[0] = nullsub_1(v80);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
  {
    v17 = (std::string *)v89.__r_.__value_.__r.__words[0];
    sub_20E860C04(&__dst, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
  }
  else
  {
    __dst = v89;
    v17 = &v89;
  }
  sub_20E860C04(&v94, v16, 0x2BuLL);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v90, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v90 = __dst;
  if (SHIBYTE(v95) < 0)
  {
    sub_20E860C04(&v91, (void *)v94, *((unint64_t *)&v94 + 1));
  }
  else
  {
    v91 = v94;
    v92 = v95;
  }
  v18 = operator new();
  *(_QWORD *)(v18 + 120) = 0;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_QWORD *)(v18 + 109) = 0;
  *(_QWORD *)v18 = &off_24C9C3188;
  *(_QWORD *)(v18 + 8) = &unk_24C9C3200;
  *(_OWORD *)(v18 + 160) = 0u;
  v19 = (uint64_t *)(v18 + 160);
  *(_QWORD *)(v18 + 152) = &unk_24C9C3228;
  *(_OWORD *)(v18 + 176) = 0u;
  v96 = a1 + 136;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__src, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  else
    __src = v90;
  if (SHIBYTE(v92) < 0)
  {
    sub_20E860C04(&v98, (void *)v91, *((unint64_t *)&v91 + 1));
  }
  else
  {
    v98 = v91;
    v99 = v92;
  }
  v100 = 0;
  v102 = (char *)v96;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v103, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
  else
    v103 = __src;
  if (SHIBYTE(v99) < 0)
  {
    sub_20E860C04(&v104, (void *)v98, *((unint64_t *)&v98 + 1));
  }
  else
  {
    v104 = v98;
    v105 = v99;
  }
  v106 = v102;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v107, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v107 = v103;
  if (SHIBYTE(v105) < 0)
  {
    sub_20E860C04(&v108, (void *)v104, *((unint64_t *)&v104 + 1));
  }
  else
  {
    v108 = v104;
    v109 = v105;
  }
  v110 = v106;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v111, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  else
    v111 = v107;
  if (SHIBYTE(v109) < 0)
  {
    sub_20E860C04(&v112, (void *)v108, *((unint64_t *)&v108 + 1));
  }
  else
  {
    v112 = v108;
    v113 = v109;
  }
  *(_QWORD *)__p = v110;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__p[8], v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  else
    *(std::string *)&__p[8] = v111;
  if (SHIBYTE(v113) < 0)
  {
    sub_20E860C04(&v84, (void *)v112, *((unint64_t *)&v112 + 1));
  }
  else
  {
    v84 = v112;
    v85 = v113;
  }
  v20 = operator new();
  v21 = v20;
  *(_QWORD *)v20 = *(_QWORD *)__p;
  if ((__p[31] & 0x80000000) != 0)
  {
    sub_20E860C04((_BYTE *)(v20 + 8), *(void **)&__p[8], *(unint64_t *)&__p[16]);
  }
  else
  {
    *(_OWORD *)(v20 + 8) = *(_OWORD *)&__p[8];
    *(_QWORD *)(v20 + 24) = *(_QWORD *)&__p[24];
  }
  v22 = (_BYTE *)(v21 + 32);
  if (SHIBYTE(v85) < 0)
  {
    sub_20E860C04(v22, (void *)v84, *((unint64_t *)&v84 + 1));
    v101[0] = v21;
    if (SHIBYTE(v85) < 0)
    {
      operator delete((void *)v84);
      if ((__p[31] & 0x80000000) == 0)
        goto LABEL_78;
    }
    else if ((__p[31] & 0x80000000) == 0)
    {
      goto LABEL_78;
    }
LABEL_69:
    operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v113) < 0)
      goto LABEL_70;
    goto LABEL_79;
  }
  *(_OWORD *)v22 = v84;
  *(_QWORD *)(v21 + 48) = v85;
  v101[0] = v21;
  if ((__p[31] & 0x80000000) != 0)
    goto LABEL_69;
LABEL_78:
  if (SHIBYTE(v113) < 0)
  {
LABEL_70:
    operator delete((void *)v112);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_71;
    goto LABEL_80;
  }
LABEL_79:
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_71:
    operator delete(v111.__r_.__value_.__l.__data_);
    if (SHIBYTE(v109) < 0)
      goto LABEL_72;
    goto LABEL_81;
  }
LABEL_80:
  if (SHIBYTE(v109) < 0)
  {
LABEL_72:
    operator delete((void *)v108);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_73;
    goto LABEL_82;
  }
LABEL_81:
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_73:
    operator delete(v107.__r_.__value_.__l.__data_);
    v100 = off_24C9F1CA8;
    if (SHIBYTE(v105) < 0)
      goto LABEL_74;
    goto LABEL_83;
  }
LABEL_82:
  v100 = off_24C9F1CA8;
  if (SHIBYTE(v105) < 0)
  {
LABEL_74:
    operator delete((void *)v104);
    if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_84;
    goto LABEL_75;
  }
LABEL_83:
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
LABEL_75:
    operator delete(v103.__r_.__value_.__l.__data_);
LABEL_84:
  sub_20EAA6744((uint64_t *)(v18 + 120), (uint64_t *)&v100);
  if (v100)
  {
    if ((v100 & 1) == 0)
    {
      v23 = *(void (**)(uint64_t, _WORD *, int))((unint64_t)v100 & 0xFFFFFFFFFFFFFFFELL);
      if (v23)
        v23((uint64_t)v101, v101, 2);
    }
    v100 = 0;
  }
  if (SHIBYTE(v99) < 0)
  {
    operator delete((void *)v98);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
  }
  else if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_91;
  }
  operator delete(__src.__r_.__value_.__l.__data_);
LABEL_91:
  v110 = *(char **)(a1 + 136);
  v24 = v110;
  v25 = (_QWORD *)operator new();
  *v25 = &off_24C9C3358;
  v25[1] = v24;
  v26 = *v19;
  *v19 = (uint64_t)v25;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  sub_20E9F6B94((unint64_t *)&v110);
  v27 = (void **)(v18 + 168);
  if (*(char *)(v18 + 191) < 0)
  {
    operator delete(*v27);
    *(_OWORD *)v27 = *(_OWORD *)__p;
    *(_QWORD *)(v18 + 184) = *(_QWORD *)&__p[16];
    if ((SHIBYTE(v92) & 0x80000000) == 0)
    {
LABEL_95:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_96;
      goto LABEL_109;
    }
  }
  else
  {
    *(_OWORD *)v27 = *(_OWORD *)__p;
    *(_QWORD *)(v18 + 184) = *(_QWORD *)&__p[16];
    if ((SHIBYTE(v92) & 0x80000000) == 0)
      goto LABEL_95;
  }
  operator delete((void *)v91);
  if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_96:
    if ((SHIBYTE(v95) & 0x80000000) == 0)
      goto LABEL_97;
LABEL_110:
    operator delete((void *)v94);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_98;
    goto LABEL_111;
  }
LABEL_109:
  operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95) < 0)
    goto LABEL_110;
LABEL_97:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_98;
LABEL_111:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_98:
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &v86;
  else
    v28 = (std::string *)v86.__r_.__value_.__r.__words[0];
  sub_20E8B2F9C((uint64_t *)&v87, (char *)v17, v18, (char *)v28);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v86.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_103;
  }
  else if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_103;
  }
  operator delete(v89.__r_.__value_.__l.__data_);
LABEL_103:
  operator delete(v16);
  v29 = (char *)operator new(0x28uLL);
  strcpy(v29, "MappingIO.Interface.max_back_up_index");
  v30 = (char *)operator new(0x28uLL);
  strcpy(v30, "MappingIOConfig.max_back_up_index");
  sub_210237040("Deprecated config for '%s'", &v86, v29);
  v89.__r_.__value_.__r.__words[0] = nullsub_1(v80);
  sub_20E860C04(&__dst, v30, 0x21uLL);
  sub_20E860C04(&v94, v29, 0x25uLL);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v90, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v90 = __dst;
  if (SHIBYTE(v95) < 0)
  {
    sub_20E860C04(&v91, (void *)v94, *((unint64_t *)&v94 + 1));
  }
  else
  {
    v91 = v94;
    v92 = v95;
  }
  v31 = operator new();
  *(_QWORD *)(v31 + 120) = 0;
  *(_OWORD *)(v31 + 16) = 0u;
  *(_OWORD *)(v31 + 32) = 0u;
  *(_OWORD *)(v31 + 48) = 0u;
  *(_OWORD *)(v31 + 64) = 0u;
  *(_OWORD *)(v31 + 80) = 0u;
  *(_OWORD *)(v31 + 96) = 0u;
  *(_QWORD *)(v31 + 109) = 0;
  *(_QWORD *)v31 = &off_24C9C2A50;
  *(_QWORD *)(v31 + 8) = &unk_24C9C2AC8;
  *(_OWORD *)(v31 + 160) = 0u;
  v32 = (uint64_t *)(v31 + 160);
  *(_QWORD *)(v31 + 152) = &unk_24C9C2AF0;
  *(_OWORD *)(v31 + 176) = 0u;
  v96 = a1 + 144;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__src, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  else
    __src = v90;
  if (SHIBYTE(v92) < 0)
  {
    sub_20E860C04(&v98, (void *)v91, *((unint64_t *)&v91 + 1));
  }
  else
  {
    v98 = v91;
    v99 = v92;
  }
  v100 = 0;
  v102 = (char *)v96;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v103, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
  else
    v103 = __src;
  if (SHIBYTE(v99) < 0)
  {
    sub_20E860C04(&v104, (void *)v98, *((unint64_t *)&v98 + 1));
  }
  else
  {
    v104 = v98;
    v105 = v99;
  }
  v106 = v102;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v107, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v107 = v103;
  if (SHIBYTE(v105) < 0)
  {
    sub_20E860C04(&v108, (void *)v104, *((unint64_t *)&v104 + 1));
  }
  else
  {
    v108 = v104;
    v109 = v105;
  }
  v110 = v106;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v111, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  else
    v111 = v107;
  if (SHIBYTE(v109) < 0)
  {
    sub_20E860C04(&v112, (void *)v108, *((unint64_t *)&v108 + 1));
  }
  else
  {
    v112 = v108;
    v113 = v109;
  }
  *(_QWORD *)__p = v110;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__p[8], v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  else
    *(std::string *)&__p[8] = v111;
  if (SHIBYTE(v113) < 0)
  {
    sub_20E860C04(&v84, (void *)v112, *((unint64_t *)&v112 + 1));
  }
  else
  {
    v84 = v112;
    v85 = v113;
  }
  v33 = operator new();
  v34 = v33;
  *(_QWORD *)v33 = *(_QWORD *)__p;
  if ((__p[31] & 0x80000000) != 0)
  {
    sub_20E860C04((_BYTE *)(v33 + 8), *(void **)&__p[8], *(unint64_t *)&__p[16]);
  }
  else
  {
    *(_OWORD *)(v33 + 8) = *(_OWORD *)&__p[8];
    *(_QWORD *)(v33 + 24) = *(_QWORD *)&__p[24];
  }
  v35 = (_BYTE *)(v34 + 32);
  if (SHIBYTE(v85) < 0)
  {
    sub_20E860C04(v35, (void *)v84, *((unint64_t *)&v84 + 1));
    v101[0] = v34;
    if (SHIBYTE(v85) < 0)
    {
      operator delete((void *)v84);
      if ((__p[31] & 0x80000000) == 0)
        goto LABEL_162;
    }
    else if ((__p[31] & 0x80000000) == 0)
    {
      goto LABEL_162;
    }
LABEL_153:
    operator delete(*(void **)&__p[8]);
    if (SHIBYTE(v113) < 0)
      goto LABEL_154;
    goto LABEL_163;
  }
  *(_OWORD *)v35 = v84;
  *(_QWORD *)(v34 + 48) = v85;
  v101[0] = v34;
  if ((__p[31] & 0x80000000) != 0)
    goto LABEL_153;
LABEL_162:
  if (SHIBYTE(v113) < 0)
  {
LABEL_154:
    operator delete((void *)v112);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_155;
    goto LABEL_164;
  }
LABEL_163:
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_155:
    operator delete(v111.__r_.__value_.__l.__data_);
    if (SHIBYTE(v109) < 0)
      goto LABEL_156;
    goto LABEL_165;
  }
LABEL_164:
  if (SHIBYTE(v109) < 0)
  {
LABEL_156:
    operator delete((void *)v108);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_157;
    goto LABEL_166;
  }
LABEL_165:
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_157:
    operator delete(v107.__r_.__value_.__l.__data_);
    v100 = off_24C9F1CC8;
    if (SHIBYTE(v105) < 0)
      goto LABEL_158;
    goto LABEL_167;
  }
LABEL_166:
  v100 = off_24C9F1CC8;
  if (SHIBYTE(v105) < 0)
  {
LABEL_158:
    operator delete((void *)v104);
    if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_168;
    goto LABEL_159;
  }
LABEL_167:
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
LABEL_159:
    operator delete(v103.__r_.__value_.__l.__data_);
LABEL_168:
  sub_20EAA1358((uint64_t *)(v31 + 120), (uint64_t *)&v100);
  if (v100)
  {
    if ((v100 & 1) == 0)
    {
      v36 = *(void (**)(uint64_t, _WORD *, int))((unint64_t)v100 & 0xFFFFFFFFFFFFFFFELL);
      if (v36)
        v36((uint64_t)v101, v101, 2);
    }
    v100 = 0;
  }
  if (SHIBYTE(v99) < 0)
  {
    operator delete((void *)v98);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_175;
  }
  else if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_175;
  }
  operator delete(__src.__r_.__value_.__l.__data_);
LABEL_175:
  LODWORD(v110) = *(_DWORD *)(a1 + 144);
  v37 = (int)v110;
  v38 = operator new();
  *(_QWORD *)v38 = &off_24C9C2C20;
  *(_DWORD *)(v38 + 8) = v37;
  v39 = *v32;
  *v32 = v38;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  sub_20E9F6A6C((unsigned int *)&v110);
  v40 = (void **)(v31 + 168);
  if (*(char *)(v31 + 191) < 0)
  {
    operator delete(*v40);
    *(_OWORD *)v40 = *(_OWORD *)__p;
    *(_QWORD *)(v31 + 184) = *(_QWORD *)&__p[16];
    if ((SHIBYTE(v92) & 0x80000000) == 0)
    {
LABEL_179:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_180;
      goto LABEL_200;
    }
  }
  else
  {
    *(_OWORD *)v40 = *(_OWORD *)__p;
    *(_QWORD *)(v31 + 184) = *(_QWORD *)&__p[16];
    if ((SHIBYTE(v92) & 0x80000000) == 0)
      goto LABEL_179;
  }
  operator delete((void *)v91);
  if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_180:
    if ((SHIBYTE(v95) & 0x80000000) == 0)
      goto LABEL_181;
LABEL_201:
    operator delete((void *)v94);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_182;
    goto LABEL_202;
  }
LABEL_200:
  operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95) < 0)
    goto LABEL_201;
LABEL_181:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_182;
LABEL_202:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_182:
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &v86;
  else
    v41 = (std::string *)v86.__r_.__value_.__r.__words[0];
  sub_20E8B2F9C((uint64_t *)&v89, v30, v31, (char *)v41);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  operator delete(v30);
  operator delete(v29);
  sub_20E8B32F0(v78, (uint64_t)v80);
  sub_20E869298((uint64_t)v80);
  *(_QWORD *)v80 = operator new(0x28uLL);
  *(_OWORD *)&v80[8] = xmmword_2102DCA10;
  strcpy(*(char **)v80, "MappingIO.KeyframeIO configurations");
  sub_20E8B30B4(__p, (__int128 *)v80, 180, 160);
  if ((v80[23] & 0x80000000) != 0)
    operator delete(*(void **)v80);
  *(_QWORD *)v80 = nullsub_1(__p);
  v42 = operator new();
  *(_QWORD *)v42 = &off_24C9C34F8;
  *(_QWORD *)(v42 + 8) = &unk_24C9C3568;
  *(_QWORD *)(v42 + 120) = 0;
  *(_OWORD *)(v42 + 16) = 0u;
  *(_OWORD *)(v42 + 32) = 0u;
  *(_OWORD *)(v42 + 48) = 0u;
  *(_OWORD *)(v42 + 64) = 0u;
  *(_OWORD *)(v42 + 80) = 0u;
  *(_OWORD *)(v42 + 96) = 0u;
  *(_QWORD *)(v42 + 109) = 0;
  v86.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C9F1D08 + 1;
  v86.__r_.__value_.__l.__size_ = a1 + 200;
  sub_20EAA8294((uint64_t *)(v42 + 120), (uint64_t *)&v86);
  sub_20E8B2F9C((uint64_t *)v80, "MappingIO.KeyframeIO.jpeg_compression_method", v42, "Sets Jpeg compression method used to save keyframe images. Available options: 0 (default), 1 (software), 2 (hardware)");
  if (v86.__r_.__value_.__r.__words[0])
  {
    if ((v86.__r_.__value_.__s.__data_[0] & 1) == 0)
    {
      v43 = *(void (**)(std::string::size_type *, std::string::size_type *, uint64_t))(v86.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFFELL);
      if (v43)
        v43(&v86.__r_.__value_.__l.__size_, &v86.__r_.__value_.__l.__size_, 2);
    }
    v86.__r_.__value_.__r.__words[0] = 0;
  }
  *(_QWORD *)v80 = nullsub_1(__p);
  v44 = sub_20EF4E784((float *)(a1 + 204));
  sub_20E8B2F9C((uint64_t *)v80, "MappingIO.KeyframeIO.jpeg_compression_ratio", v44, "Sets Jpeg compression ratio used to save keyframe images. Should be in range [0-1].");
  v45 = (char *)operator new(0x30uLL);
  strcpy(v45, "MappingIO.KeyframeIO.jpeg_compression_ratio");
  v77 = v45;
  v87.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v87.__r_.__value_.__r.__words[1] = xmmword_2102DC8E0;
  strcpy(v87.__r_.__value_.__l.__data_, "MappingManagerConfig.jpeg_compression_ratio");
  sub_210237040("Deprecated config for '%s'", &v89, v45);
  v88 = nullsub_1(__p);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
  {
    v46 = (std::string *)v87.__r_.__value_.__r.__words[0];
    sub_20E860C04(&__dst, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  }
  else
  {
    __dst = v87;
    v46 = &v87;
  }
  sub_20E860C04(&v94, v45, 0x2BuLL);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v90, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v90 = __dst;
  if (SHIBYTE(v95) < 0)
  {
    sub_20E860C04(&v91, (void *)v94, *((unint64_t *)&v94 + 1));
  }
  else
  {
    v91 = v94;
    v92 = v95;
  }
  v47 = operator new();
  *(_QWORD *)(v47 + 120) = 0;
  *(_OWORD *)(v47 + 16) = 0u;
  *(_OWORD *)(v47 + 32) = 0u;
  *(_OWORD *)(v47 + 48) = 0u;
  *(_OWORD *)(v47 + 64) = 0u;
  *(_OWORD *)(v47 + 80) = 0u;
  *(_OWORD *)(v47 + 96) = 0u;
  *(_QWORD *)(v47 + 109) = 0;
  *(_QWORD *)v47 = &off_24C9F1AB0;
  *(_QWORD *)(v47 + 8) = &unk_24C9F1B28;
  *(_OWORD *)(v47 + 160) = 0u;
  v48 = (uint64_t *)(v47 + 160);
  *(_QWORD *)(v47 + 152) = &unk_24C9F1B50;
  *(_OWORD *)(v47 + 176) = 0u;
  v96 = a1 + 204;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__src, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  else
    __src = v90;
  if (SHIBYTE(v92) < 0)
  {
    sub_20E860C04(&v98, (void *)v91, *((unint64_t *)&v91 + 1));
  }
  else
  {
    v98 = v91;
    v99 = v92;
  }
  v100 = 0;
  v102 = (char *)v96;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v103, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
  else
    v103 = __src;
  if (SHIBYTE(v99) < 0)
  {
    sub_20E860C04(&v104, (void *)v98, *((unint64_t *)&v98 + 1));
  }
  else
  {
    v104 = v98;
    v105 = v99;
  }
  v106 = v102;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v107, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v107 = v103;
  if (SHIBYTE(v105) < 0)
  {
    sub_20E860C04(&v108, (void *)v104, *((unint64_t *)&v104 + 1));
  }
  else
  {
    v108 = v104;
    v109 = v105;
  }
  v110 = v106;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v111, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  else
    v111 = v107;
  if (SHIBYTE(v109) < 0)
  {
    sub_20E860C04(&v112, (void *)v108, *((unint64_t *)&v108 + 1));
  }
  else
  {
    v112 = v108;
    v113 = v109;
  }
  *(_QWORD *)v80 = v110;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v80[8], v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  else
    *(std::string *)&v80[8] = v111;
  if (SHIBYTE(v113) < 0)
  {
    sub_20E860C04(&v81, (void *)v112, *((unint64_t *)&v112 + 1));
  }
  else
  {
    v81 = v112;
    v82 = v113;
  }
  v49 = operator new();
  v50 = v49;
  *(_QWORD *)v49 = *(_QWORD *)v80;
  if ((v80[31] & 0x80000000) != 0)
  {
    sub_20E860C04((_BYTE *)(v49 + 8), *(void **)&v80[8], *(unint64_t *)&v80[16]);
  }
  else
  {
    *(_OWORD *)(v49 + 8) = *(_OWORD *)&v80[8];
    *(_QWORD *)(v49 + 24) = *(_QWORD *)&v80[24];
  }
  v51 = (_BYTE *)(v50 + 32);
  if (SHIBYTE(v82) < 0)
  {
    sub_20E860C04(v51, (void *)v81, *((unint64_t *)&v81 + 1));
    v101[0] = v50;
    if (SHIBYTE(v82) < 0)
    {
      operator delete((void *)v81);
      if ((v80[31] & 0x80000000) == 0)
        goto LABEL_254;
    }
    else if ((v80[31] & 0x80000000) == 0)
    {
      goto LABEL_254;
    }
LABEL_245:
    operator delete(*(void **)&v80[8]);
    v52 = (_DWORD *)(a1 + 204);
    if (SHIBYTE(v113) < 0)
      goto LABEL_246;
    goto LABEL_255;
  }
  *(_OWORD *)v51 = v81;
  *(_QWORD *)(v50 + 48) = v82;
  v101[0] = v50;
  if ((v80[31] & 0x80000000) != 0)
    goto LABEL_245;
LABEL_254:
  v52 = (_DWORD *)(a1 + 204);
  if (SHIBYTE(v113) < 0)
  {
LABEL_246:
    operator delete((void *)v112);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_247;
    goto LABEL_256;
  }
LABEL_255:
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_247:
    operator delete(v111.__r_.__value_.__l.__data_);
    if (SHIBYTE(v109) < 0)
      goto LABEL_248;
    goto LABEL_257;
  }
LABEL_256:
  if (SHIBYTE(v109) < 0)
  {
LABEL_248:
    operator delete((void *)v108);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_249;
    goto LABEL_258;
  }
LABEL_257:
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_249:
    operator delete(v107.__r_.__value_.__l.__data_);
    v100 = off_24C9F1C48;
    if (SHIBYTE(v105) < 0)
      goto LABEL_250;
    goto LABEL_259;
  }
LABEL_258:
  v100 = off_24C9F1C48;
  if (SHIBYTE(v105) < 0)
  {
LABEL_250:
    operator delete((void *)v104);
    if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_260;
    goto LABEL_251;
  }
LABEL_259:
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
LABEL_251:
    operator delete(v103.__r_.__value_.__l.__data_);
LABEL_260:
  sub_20EF54250((uint64_t *)(v47 + 120), (uint64_t *)&v100);
  if (v100)
  {
    if ((v100 & 1) == 0)
    {
      v53 = *(void (**)(uint64_t, _WORD *, int))((unint64_t)v100 & 0xFFFFFFFFFFFFFFFELL);
      if (v53)
        v53((uint64_t)v101, v101, 2);
    }
    v100 = 0;
  }
  if (SHIBYTE(v99) < 0)
  {
    operator delete((void *)v98);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_267;
  }
  else if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_267;
  }
  operator delete(__src.__r_.__value_.__l.__data_);
LABEL_267:
  LODWORD(v110) = *v52;
  v54 = (int)v110;
  v55 = operator new();
  *(_QWORD *)v55 = &off_24C9F1C10;
  *(_DWORD *)(v55 + 8) = v54;
  v56 = *v48;
  *v48 = v55;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  sub_20EF54ED8((float *)&v110);
  v57 = (void **)(v47 + 168);
  if (*(char *)(v47 + 191) < 0)
    operator delete(*v57);
  *(_OWORD *)v57 = *(_OWORD *)v80;
  *(_QWORD *)(v47 + 184) = *(_QWORD *)&v80[16];
  if (SHIBYTE(v92) < 0)
  {
    operator delete((void *)v91);
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_273:
      if ((SHIBYTE(v95) & 0x80000000) == 0)
        goto LABEL_274;
LABEL_286:
      operator delete((void *)v94);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_275;
      goto LABEL_287;
    }
  }
  else if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_273;
  }
  operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95) < 0)
    goto LABEL_286;
LABEL_274:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_275;
LABEL_287:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_275:
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v58 = &v89;
  else
    v58 = (std::string *)v89.__r_.__value_.__r.__words[0];
  sub_20E8B2F9C(&v88, (char *)v46, v47, (char *)v58);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v89.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_280;
  }
  else if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_280;
  }
  operator delete(v87.__r_.__value_.__l.__data_);
LABEL_280:
  operator delete(v77);
  v59 = (char *)operator new(0x30uLL);
  strcpy(v59, "MappingIO.KeyframeIO.jpeg_compression_method");
  v60 = (char *)operator new(0x30uLL);
  strcpy(v60, "MappingManagerConfig.jpeg_compression_method");
  sub_210237040("Deprecated config for '%s'", &v89, v59);
  v87.__r_.__value_.__r.__words[0] = nullsub_1(__p);
  sub_20E860C04(&__dst, v60, 0x2CuLL);
  sub_20E860C04(&v94, v59, 0x2CuLL);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v90, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v90 = __dst;
  if (SHIBYTE(v95) < 0)
  {
    sub_20E860C04(&v91, (void *)v94, *((unint64_t *)&v94 + 1));
  }
  else
  {
    v91 = v94;
    v92 = v95;
  }
  v61 = operator new();
  *(_QWORD *)(v61 + 120) = 0;
  *(_OWORD *)(v61 + 16) = 0u;
  *(_OWORD *)(v61 + 32) = 0u;
  *(_OWORD *)(v61 + 48) = 0u;
  *(_OWORD *)(v61 + 64) = 0u;
  *(_OWORD *)(v61 + 80) = 0u;
  *(_OWORD *)(v61 + 96) = 0u;
  *(_QWORD *)(v61 + 109) = 0;
  *(_QWORD *)v61 = &off_24C9C33C0;
  *(_QWORD *)(v61 + 8) = &unk_24C9C3438;
  *(_OWORD *)(v61 + 160) = 0u;
  v62 = (uint64_t *)(v61 + 160);
  *(_QWORD *)(v61 + 152) = &unk_24C9C3460;
  *(_OWORD *)(v61 + 176) = 0u;
  v96 = a1 + 200;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__src, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  else
    __src = v90;
  if (SHIBYTE(v92) < 0)
  {
    sub_20E860C04(&v98, (void *)v91, *((unint64_t *)&v91 + 1));
  }
  else
  {
    v98 = v91;
    v99 = v92;
  }
  v100 = 0;
  v102 = (char *)v96;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v103, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
  else
    v103 = __src;
  if (SHIBYTE(v99) < 0)
  {
    sub_20E860C04(&v104, (void *)v98, *((unint64_t *)&v98 + 1));
  }
  else
  {
    v104 = v98;
    v105 = v99;
  }
  v106 = v102;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v107, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v107 = v103;
  if (SHIBYTE(v105) < 0)
  {
    sub_20E860C04(&v108, (void *)v104, *((unint64_t *)&v104 + 1));
  }
  else
  {
    v108 = v104;
    v109 = v105;
  }
  v110 = v106;
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v111, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
  else
    v111 = v107;
  if (SHIBYTE(v109) < 0)
  {
    sub_20E860C04(&v112, (void *)v108, *((unint64_t *)&v108 + 1));
  }
  else
  {
    v112 = v108;
    v113 = v109;
  }
  *(_QWORD *)v80 = v110;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v80[8], v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
  else
    *(std::string *)&v80[8] = v111;
  if (SHIBYTE(v113) < 0)
  {
    sub_20E860C04(&v81, (void *)v112, *((unint64_t *)&v112 + 1));
  }
  else
  {
    v81 = v112;
    v82 = v113;
  }
  v63 = operator new();
  v64 = v63;
  *(_QWORD *)v63 = *(_QWORD *)v80;
  if ((v80[31] & 0x80000000) != 0)
  {
    sub_20E860C04((_BYTE *)(v63 + 8), *(void **)&v80[8], *(unint64_t *)&v80[16]);
  }
  else
  {
    *(_OWORD *)(v63 + 8) = *(_OWORD *)&v80[8];
    *(_QWORD *)(v63 + 24) = *(_QWORD *)&v80[24];
  }
  v65 = (_BYTE *)(v64 + 32);
  if (SHIBYTE(v82) < 0)
  {
    sub_20E860C04(v65, (void *)v81, *((unint64_t *)&v81 + 1));
    v101[0] = v64;
    if (SHIBYTE(v82) < 0)
    {
      operator delete((void *)v81);
      if ((v80[31] & 0x80000000) == 0)
        goto LABEL_338;
    }
    else if ((v80[31] & 0x80000000) == 0)
    {
      goto LABEL_338;
    }
LABEL_329:
    operator delete(*(void **)&v80[8]);
    if (SHIBYTE(v113) < 0)
      goto LABEL_330;
    goto LABEL_339;
  }
  *(_OWORD *)v65 = v81;
  *(_QWORD *)(v64 + 48) = v82;
  v101[0] = v64;
  if ((v80[31] & 0x80000000) != 0)
    goto LABEL_329;
LABEL_338:
  if (SHIBYTE(v113) < 0)
  {
LABEL_330:
    operator delete((void *)v112);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_331;
    goto LABEL_340;
  }
LABEL_339:
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_331:
    operator delete(v111.__r_.__value_.__l.__data_);
    if (SHIBYTE(v109) < 0)
      goto LABEL_332;
    goto LABEL_341;
  }
LABEL_340:
  if (SHIBYTE(v109) < 0)
  {
LABEL_332:
    operator delete((void *)v108);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_333;
    goto LABEL_342;
  }
LABEL_341:
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_333:
    operator delete(v107.__r_.__value_.__l.__data_);
    v100 = off_24C9F1C68;
    if (SHIBYTE(v105) < 0)
      goto LABEL_334;
    goto LABEL_343;
  }
LABEL_342:
  v100 = off_24C9F1C68;
  if (SHIBYTE(v105) < 0)
  {
LABEL_334:
    operator delete((void *)v104);
    if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_344;
    goto LABEL_335;
  }
LABEL_343:
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
LABEL_335:
    operator delete(v103.__r_.__value_.__l.__data_);
LABEL_344:
  sub_20EAA8294((uint64_t *)(v61 + 120), (uint64_t *)&v100);
  if (v100)
  {
    if ((v100 & 1) == 0)
    {
      v66 = *(void (**)(uint64_t, _WORD *, int))((unint64_t)v100 & 0xFFFFFFFFFFFFFFFELL);
      if (v66)
        v66((uint64_t)v101, v101, 2);
    }
    v100 = 0;
  }
  if (SHIBYTE(v99) < 0)
  {
    operator delete((void *)v98);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_351;
  }
  else if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_351;
  }
  operator delete(__src.__r_.__value_.__l.__data_);
LABEL_351:
  LODWORD(v110) = *(_DWORD *)(a1 + 200);
  v67 = (int)v110;
  v68 = operator new();
  *(_QWORD *)v68 = &off_24C9C3590;
  *(_DWORD *)(v68 + 8) = v67;
  v69 = *v62;
  *v62 = v68;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  sub_20E8A9280((int *)&v110);
  v70 = (void **)(v61 + 168);
  if (*(char *)(v61 + 191) < 0)
  {
    operator delete(*v70);
    *(_OWORD *)v70 = *(_OWORD *)v80;
    *(_QWORD *)(v61 + 184) = *(_QWORD *)&v80[16];
    if ((SHIBYTE(v92) & 0x80000000) == 0)
    {
LABEL_355:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_356;
      goto LABEL_374;
    }
  }
  else
  {
    *(_OWORD *)v70 = *(_OWORD *)v80;
    *(_QWORD *)(v61 + 184) = *(_QWORD *)&v80[16];
    if ((SHIBYTE(v92) & 0x80000000) == 0)
      goto LABEL_355;
  }
  operator delete((void *)v91);
  if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_356:
    if ((SHIBYTE(v95) & 0x80000000) == 0)
      goto LABEL_357;
LABEL_375:
    operator delete((void *)v94);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_358;
    goto LABEL_376;
  }
LABEL_374:
  operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95) < 0)
    goto LABEL_375;
LABEL_357:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_358;
LABEL_376:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_358:
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v71 = &v89;
  else
    v71 = (std::string *)v89.__r_.__value_.__r.__words[0];
  sub_20E8B2F9C((uint64_t *)&v87, v60, v61, (char *)v71);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  operator delete(v60);
  operator delete(v59);
  sub_20E8B32F0(v78, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  v110 = (char *)nullsub_1(v78);
  v72 = operator new();
  *(_QWORD *)(v72 + 120) = 0;
  *(_OWORD *)(v72 + 16) = 0u;
  *(_OWORD *)(v72 + 32) = 0u;
  *(_OWORD *)(v72 + 48) = 0u;
  *(_OWORD *)(v72 + 64) = 0u;
  *(_OWORD *)(v72 + 80) = 0u;
  *(_OWORD *)(v72 + 96) = 0u;
  *(_QWORD *)(v72 + 109) = 0;
  *(_QWORD *)v72 = &off_24C9C50E0;
  *(_QWORD *)(v72 + 8) = &unk_24C9C5158;
  *(_QWORD *)(v72 + 152) = &unk_24C9C5180;
  *(_OWORD *)(v72 + 160) = 0u;
  *(_OWORD *)(v72 + 176) = 0u;
  *(_QWORD *)__p = (char *)off_24C9F1CE8 + 1;
  *(_QWORD *)&__p[8] = a1;
  sub_20EB88EEC((uint64_t *)(v72 + 120), (uint64_t *)__p);
  v73 = a1;
  if (*(_QWORD *)__p)
  {
    if ((__p[0] & 1) == 0)
    {
      v74 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFFELL);
      if (v74)
      {
        v74(&__p[8], &__p[8], 2);
        v73 = a1;
      }
    }
    *(_QWORD *)__p = 0;
  }
  if (*(char *)(v73 + 23) < 0)
  {
    sub_20E860C04(v80, *(void **)v73, *(_QWORD *)(v73 + 8));
  }
  else
  {
    *(_OWORD *)v80 = *(_OWORD *)v73;
    *(_QWORD *)&v80[16] = *(_QWORD *)(v73 + 16);
  }
  v75 = sub_20EB88A84(v72, (uint64_t)v80);
  if ((v80[23] & 0x80000000) != 0)
    operator delete(*(void **)v80);
  sub_20E8B2F9C((uint64_t *)&v110, "MappingIO.map_dir", v75, "Directory containing all map related data. If set, a map is loaded from here and no other mode of map loading is attempted. If no map is found in the directory, an empty map is used. Map data will be periodically saved to this directory.");
  *(_QWORD *)__p = nullsub_1(v78);
  v76 = sub_20EAA14D8((_BYTE *)(a1 + 192));
  sub_20E8B2F9C((uint64_t *)__p, "MappingIO.enable_keyframe_io", v76, "Set to enable Keyframe saving");
  __p[23] = 17;
  strcpy(__p, "MappingIO.map_dir");
  *(_QWORD *)v80 = operator new(0x28uLL);
  *(_OWORD *)&v80[8] = xmmword_2102DBA80;
  strcpy(*(char **)v80, "MappingManagerConfig.map_data_dir");
  sub_20EF4E9CC((uint64_t)v78, a1, (void **)__p, v80);
  if ((v80[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v80);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_382;
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_382;
  }
  operator delete(*(void **)__p);
LABEL_382:
  __p[23] = 17;
  strcpy(__p, "MappingIO.map_dir");
  *(_QWORD *)v80 = operator new(0x20uLL);
  *(_OWORD *)&v80[8] = xmmword_2102DB470;
  strcpy(*(char **)v80, "MappingIOConfig.map_data_dir");
  sub_20EF4E9CC((uint64_t)v78, a1, (void **)__p, v80);
  if ((v80[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v80);
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_384;
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_384;
  }
  operator delete(*(void **)__p);
LABEL_384:
  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DB470;
  strcpy(*(char **)__p, "MappingIO.enable_keyframe_io");
  *(_QWORD *)v80 = operator new(0x30uLL);
  *(_OWORD *)&v80[8] = xmmword_2102DC8E0;
  strcpy(*(char **)v80, "MappingManagerConfig.enable_keyframe_saving");
  sub_20EF4F244((uint64_t)v78, (_BYTE *)(a1 + 192), (void **)__p, v80);
  if ((v80[23] & 0x80000000) == 0)
  {
    if ((__p[23] & 0x80000000) == 0)
      return;
LABEL_392:
    operator delete(*(void **)__p);
    return;
  }
  operator delete(*(void **)v80);
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_392;
}

void sub_20EF4DCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a66;
  char a71;
  void *a72;
  void *a73;
  void *v73;
  void *v74;
  uint64_t v75;
  void **v76;
  uint64_t v77;

  if (*(char *)(v75 + 31) < 0)
    operator delete(*v76);
  MEMORY[0x212BC6398](v75, 0x1092C403F48558ALL);
  if (a37 < 0)
    operator delete(__p);
  if (a31 < 0)
  {
    operator delete(a26);
    if ((*(char *)(v77 - 113) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((*(char *)(v77 - 113) & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v77 - 137) < 0)
      goto LABEL_8;
    goto LABEL_16;
  }
  operator delete(*(void **)(v77 - 136));
  if (*(char *)(v77 - 137) < 0)
  {
LABEL_8:
    operator delete(*(void **)(v77 - 160));
    if ((*(char *)(v77 - 169) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  if ((*(char *)(v77 - 169) & 0x80000000) == 0)
  {
LABEL_9:
    if (*(char *)(v77 - 193) < 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v77 - 192));
  if (*(char *)(v77 - 193) < 0)
  {
LABEL_10:
    operator delete(*(void **)(v77 - 216));
    if ((SLOBYTE(STACK[0x29F]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x29F]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SLOBYTE(STACK[0x287]) & 0x80000000) == 0)
    {
LABEL_13:
      sub_20EDA923C((uint64_t)&STACK[0x210]);
      sub_20E8C8C8C((uint64_t)&a72);
      sub_20E8C8C8C((uint64_t)&a73);
      if (a71 < 0)
        operator delete(a66);
      operator delete(v74);
      operator delete(v73);
      sub_20E869298((uint64_t)&a45);
      sub_20E869298(a23);
      _Unwind_Resume(a1);
    }
LABEL_12:
    operator delete((void *)STACK[0x270]);
    goto LABEL_13;
  }
LABEL_19:
  operator delete((void *)STACK[0x288]);
  if ((SLOBYTE(STACK[0x287]) & 0x80000000) == 0)
    goto LABEL_13;
  goto LABEL_12;
}

uint64_t sub_20EF4E784(float *a1)
{
  uint64_t v2;
  uint64_t *v3;
  void (*v4)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;
  uint64_t v12;

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9F1AB0;
  *(_QWORD *)(v2 + 8) = &unk_24C9F1B28;
  *(_QWORD *)(v2 + 152) = &unk_24C9F1B50;
  *(_OWORD *)(v2 + 160) = 0u;
  v3 = (uint64_t *)(v2 + 160);
  *(_OWORD *)(v2 + 176) = 0u;
  v9 = (uint64_t)off_24C9F1D28 + 1;
  v10[0] = a1;
  sub_20EF54250((uint64_t *)(v2 + 120), &v9);
  if (v9)
  {
    if ((v9 & 1) == 0)
    {
      v4 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 & 0xFFFFFFFFFFFFFFFELL);
      if (v4)
        v4(v10, v10, 2);
    }
    v9 = 0;
  }
  v5 = operator new();
  *(_QWORD *)v5 = &off_24C9F1C10;
  *(float *)(v5 + 8) = *a1;
  v6 = *v3;
  *v3 = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_20EF54ED8(a1);
  v7 = (void **)(v2 + 168);
  if (*(char *)(v2 + 191) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v11;
  *(_QWORD *)(v2 + 184) = v12;
  return v2;
}

void sub_20EF4E8D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EF52F60((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF4E8E4(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v5;
  _QWORD v6[3];

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9F1818;
  *(_QWORD *)(v2 + 8) = &unk_24C9F1890;
  *(_QWORD *)(v2 + 152) = &unk_24C9F18B8;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  v5 = (uint64_t)off_24C9F1D48 + 1;
  v6[0] = a1;
  sub_20EF51144((uint64_t *)(v2 + 120), &v5);
  if (v5)
  {
    if ((v5 & 1) == 0)
    {
      v3 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(v6, v6, 2);
    }
    v5 = 0;
  }
  return sub_20EF4FB3C(v2, a1);
}

void sub_20EF4E9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EF4FAEC(&a9);
  _Unwind_Resume(a1);
}

void sub_20EF4E9CC(uint64_t a1, uint64_t a2, void **a3, char *a4)
{
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void (*v14)(uint64_t, _WORD *, int);
  uint64_t v15;
  std::string *v16;
  uint64_t v17;
  std::string v18;
  void *v19[2];
  uint64_t v20;
  __int128 v21;
  void *v22;
  void *__dst[2];
  uint64_t v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 __p;
  void *v31;
  unint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  void *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  void *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  void *v48;
  _BYTE v49[24];
  uint64_t v50;
  __int128 v51;
  void *v52;

  if (*((char *)a3 + 23) >= 0)
    v8 = a3;
  else
    v8 = *a3;
  sub_210237040("Deprecated config for '%s'", &v18, v8);
  v17 = nullsub_1(a1);
  if (a4[23] < 0)
  {
    v9 = *(char **)a4;
    sub_20E860C04(__dst, *(void **)a4, *((_QWORD *)a4 + 1));
    a4 = v9;
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a4;
    v24 = *((_QWORD *)a4 + 2);
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_20E860C04(&v25, *a3, (unint64_t)a3[1]);
  }
  else
  {
    v25 = *(_OWORD *)a3;
    v26 = a3[2];
  }
  if (SHIBYTE(v24) < 0)
  {
    sub_20E860C04(v19, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)__dst;
    v20 = v24;
  }
  if (SHIBYTE(v26) < 0)
  {
    sub_20E860C04(&v21, (void *)v25, *((unint64_t *)&v25 + 1));
  }
  else
  {
    v21 = v25;
    v22 = v26;
  }
  v10 = operator new();
  *(_QWORD *)(v10 + 120) = 0;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_QWORD *)(v10 + 109) = 0;
  *(_QWORD *)v10 = &off_24C9F1818;
  *(_QWORD *)(v10 + 8) = &unk_24C9F1890;
  *(_QWORD *)(v10 + 152) = &unk_24C9F18B8;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  v27 = a2;
  if (SHIBYTE(v20) < 0)
  {
    sub_20E860C04(&v28, v19[0], (unint64_t)v19[1]);
  }
  else
  {
    v28 = *(_OWORD *)v19;
    v29 = v20;
  }
  if (SHIBYTE(v22) < 0)
  {
    sub_20E860C04(&__p, (void *)v21, *((unint64_t *)&v21 + 1));
  }
  else
  {
    __p = v21;
    v31 = v22;
  }
  v32 = 0;
  v34 = v27;
  if (SHIBYTE(v29) < 0)
  {
    sub_20E860C04(&v35, (void *)v28, *((unint64_t *)&v28 + 1));
  }
  else
  {
    v35 = v28;
    v36 = v29;
  }
  if (SHIBYTE(v31) < 0)
  {
    sub_20E860C04(&v37, (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    v37 = __p;
    v38 = v31;
  }
  v39 = v34;
  if (SHIBYTE(v36) < 0)
  {
    sub_20E860C04(&v40, (void *)v35, *((unint64_t *)&v35 + 1));
  }
  else
  {
    v40 = v35;
    v41 = v36;
  }
  if (SHIBYTE(v38) < 0)
  {
    sub_20E860C04(&v42, (void *)v37, *((unint64_t *)&v37 + 1));
  }
  else
  {
    v42 = v37;
    v43 = v38;
  }
  v44 = v39;
  if (SHIBYTE(v41) < 0)
  {
    sub_20E860C04(&v45, (void *)v40, *((unint64_t *)&v40 + 1));
  }
  else
  {
    v45 = v40;
    v46 = v41;
  }
  if (SHIBYTE(v43) < 0)
  {
    sub_20E860C04(&v47, (void *)v42, *((unint64_t *)&v42 + 1));
  }
  else
  {
    v47 = v42;
    v48 = v43;
  }
  *(_QWORD *)v49 = v44;
  if (SHIBYTE(v46) < 0)
  {
    sub_20E860C04(&v49[8], (void *)v45, *((unint64_t *)&v45 + 1));
  }
  else
  {
    *(_OWORD *)&v49[8] = v45;
    v50 = v46;
  }
  if (SHIBYTE(v48) < 0)
  {
    sub_20E860C04(&v51, (void *)v47, *((unint64_t *)&v47 + 1));
  }
  else
  {
    v51 = v47;
    v52 = v48;
  }
  v11 = operator new();
  v12 = v11;
  *(_QWORD *)v11 = *(_QWORD *)v49;
  if (SHIBYTE(v50) < 0)
  {
    sub_20E860C04((_BYTE *)(v11 + 8), *(void **)&v49[8], *(unint64_t *)&v49[16]);
  }
  else
  {
    *(_OWORD *)(v11 + 8) = *(_OWORD *)&v49[8];
    *(_QWORD *)(v11 + 24) = v50;
  }
  v13 = (_BYTE *)(v12 + 32);
  if (SHIBYTE(v52) < 0)
  {
    sub_20E860C04(v13, (void *)v51, *((unint64_t *)&v51 + 1));
    v33[0] = v12;
    if (SHIBYTE(v52) < 0)
    {
      operator delete((void *)v51);
      if (SHIBYTE(v50) < 0)
        goto LABEL_89;
    }
    else if (SHIBYTE(v50) < 0)
    {
      goto LABEL_89;
    }
LABEL_54:
    if (SHIBYTE(v48) < 0)
      goto LABEL_90;
LABEL_55:
    if (SHIBYTE(v46) < 0)
      goto LABEL_91;
LABEL_56:
    if (SHIBYTE(v43) < 0)
      goto LABEL_92;
LABEL_57:
    if (SHIBYTE(v41) < 0)
      goto LABEL_93;
LABEL_58:
    v32 = (unint64_t)off_24C9F1A30;
    if (SHIBYTE(v38) < 0)
      goto LABEL_94;
    goto LABEL_59;
  }
  *(_OWORD *)v13 = v51;
  *(_QWORD *)(v12 + 48) = v52;
  v33[0] = v12;
  if ((SHIBYTE(v50) & 0x80000000) == 0)
    goto LABEL_54;
LABEL_89:
  operator delete(*(void **)&v49[8]);
  if ((SHIBYTE(v48) & 0x80000000) == 0)
    goto LABEL_55;
LABEL_90:
  operator delete((void *)v47);
  if ((SHIBYTE(v46) & 0x80000000) == 0)
    goto LABEL_56;
LABEL_91:
  operator delete((void *)v45);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
    goto LABEL_57;
LABEL_92:
  operator delete((void *)v42);
  if ((SHIBYTE(v41) & 0x80000000) == 0)
    goto LABEL_58;
LABEL_93:
  operator delete((void *)v40);
  v32 = (unint64_t)off_24C9F1A30;
  if (SHIBYTE(v38) < 0)
  {
LABEL_94:
    operator delete((void *)v37);
    if ((SHIBYTE(v36) & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_95;
  }
LABEL_59:
  if ((SHIBYTE(v36) & 0x80000000) == 0)
    goto LABEL_60;
LABEL_95:
  operator delete((void *)v35);
LABEL_60:
  sub_20EF51144((uint64_t *)(v10 + 120), (uint64_t *)&v32);
  if (v32)
  {
    if ((v32 & 1) == 0)
    {
      v14 = *(void (**)(uint64_t, _WORD *, int))(v32 & 0xFFFFFFFFFFFFFFFELL);
      if (v14)
        v14((uint64_t)v33, v33, 2);
    }
    v32 = 0;
  }
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29) & 0x80000000) == 0)
      goto LABEL_67;
LABEL_70:
    operator delete((void *)v28);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_71;
  }
  operator delete((void *)__p);
  if (SHIBYTE(v29) < 0)
    goto LABEL_70;
LABEL_67:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_68:
    *(_OWORD *)v49 = *(_OWORD *)a2;
    *(_QWORD *)&v49[16] = *(_QWORD *)(a2 + 16);
    goto LABEL_72;
  }
LABEL_71:
  sub_20E860C04(v49, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_72:
  v15 = sub_20EF4FB3C(v10, (uint64_t)v49);
  if ((v49[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v49);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
    {
LABEL_74:
      if ((SHIBYTE(v20) & 0x80000000) == 0)
        goto LABEL_75;
      goto LABEL_85;
    }
  }
  else if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    goto LABEL_74;
  }
  operator delete((void *)v21);
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
LABEL_75:
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      goto LABEL_76;
LABEL_86:
    operator delete((void *)v25);
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_77;
    goto LABEL_87;
  }
LABEL_85:
  operator delete(v19[0]);
  if (SHIBYTE(v26) < 0)
    goto LABEL_86;
LABEL_76:
  if ((SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_77;
LABEL_87:
  operator delete(__dst[0]);
LABEL_77:
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v18;
  else
    v16 = (std::string *)v18.__r_.__value_.__r.__words[0];
  sub_20E8B2F9C(&v17, a4, v15, (char *)v16);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_20EF4F00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;
  void **v63;
  uint64_t v64;

  if (*(char *)(v62 + 31) < 0)
    operator delete(*v63);
  MEMORY[0x212BC6398](v62, 0x1032C40FD4168B5);
  if (*(char *)(v64 - 89) < 0)
    operator delete(*(void **)(v64 - 112));
  if (*(char *)(v64 - 113) < 0)
  {
    operator delete(*(void **)(v64 - 136));
    if ((*(char *)(v64 - 145) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*(char *)(v64 - 169) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_18;
    }
  }
  else if ((*(char *)(v64 - 145) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(v64 - 168));
  if ((*(char *)(v64 - 169) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(v64 - 201) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v64 - 192));
  if ((*(char *)(v64 - 201) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(char *)(v64 - 225) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*(void **)(v64 - 224));
  if ((*(char *)(v64 - 225) & 0x80000000) == 0)
  {
LABEL_12:
    if ((a62 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(v64 - 248));
  if ((a62 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a56 & 0x80000000) == 0)
    {
LABEL_15:
      sub_20EDA923C((uint64_t)&a36);
      sub_20E8C8C8C((uint64_t)&a18);
      sub_20E8C8C8C((uint64_t)&a27);
      if (a17 < 0)
      {
        operator delete(a12);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
LABEL_14:
    operator delete(__p);
    goto LABEL_15;
  }
LABEL_21:
  operator delete(a57);
  if ((a56 & 0x80000000) == 0)
    goto LABEL_15;
  goto LABEL_14;
}

void sub_20EF4F234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x20EF4F224);
  JUMPOUT(0x20EF4F100);
}

void sub_20EF4F244(uint64_t a1, _BYTE *a2, void **a3, char *a4)
{
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  void (*v15)(uint64_t, _WORD *, int);
  char v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  std::string *p_p;
  uint64_t v21;
  std::string __p;
  void *v23[2];
  uint64_t v24;
  __int128 v25;
  void *v26;
  void *__dst[2];
  uint64_t v28;
  __int128 v29;
  void *v30;
  _BYTE *v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  void *v35;
  unint64_t v36;
  _QWORD v37[3];
  _BYTE *v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  void *v42;
  _BYTE *v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  void *v47;
  _BYTE *v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  void *v52;
  _BYTE v53[24];
  uint64_t v54;
  __int128 v55;
  void *v56;

  if (*((char *)a3 + 23) >= 0)
    v8 = a3;
  else
    v8 = *a3;
  sub_210237040("Deprecated config for '%s'", &__p, v8);
  v21 = nullsub_1(a1);
  if (a4[23] < 0)
  {
    v9 = *(char **)a4;
    sub_20E860C04(__dst, *(void **)a4, *((_QWORD *)a4 + 1));
    a4 = v9;
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a4;
    v28 = *((_QWORD *)a4 + 2);
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_20E860C04(&v29, *a3, (unint64_t)a3[1]);
  }
  else
  {
    v29 = *(_OWORD *)a3;
    v30 = a3[2];
  }
  if (SHIBYTE(v28) < 0)
  {
    sub_20E860C04(v23, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)__dst;
    v24 = v28;
  }
  if (SHIBYTE(v30) < 0)
  {
    sub_20E860C04(&v25, (void *)v29, *((unint64_t *)&v29 + 1));
  }
  else
  {
    v25 = v29;
    v26 = v30;
  }
  v10 = operator new();
  *(_QWORD *)(v10 + 120) = 0;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_QWORD *)(v10 + 109) = 0;
  *(_QWORD *)v10 = &off_24C9C2CE8;
  *(_QWORD *)(v10 + 8) = &unk_24C9C2D60;
  *(_OWORD *)(v10 + 160) = 0u;
  v11 = (uint64_t *)(v10 + 160);
  *(_QWORD *)(v10 + 152) = &unk_24C9C2D88;
  *(_OWORD *)(v10 + 176) = 0u;
  v31 = a2;
  if (SHIBYTE(v24) < 0)
  {
    sub_20E860C04(&v32, v23[0], (unint64_t)v23[1]);
  }
  else
  {
    v32 = *(_OWORD *)v23;
    v33 = v24;
  }
  if (SHIBYTE(v26) < 0)
  {
    sub_20E860C04(&v34, (void *)v25, *((unint64_t *)&v25 + 1));
  }
  else
  {
    v34 = v25;
    v35 = v26;
  }
  v36 = 0;
  v38 = v31;
  if (SHIBYTE(v33) < 0)
  {
    sub_20E860C04(&v39, (void *)v32, *((unint64_t *)&v32 + 1));
  }
  else
  {
    v39 = v32;
    v40 = v33;
  }
  if (SHIBYTE(v35) < 0)
  {
    sub_20E860C04(&v41, (void *)v34, *((unint64_t *)&v34 + 1));
  }
  else
  {
    v41 = v34;
    v42 = v35;
  }
  v43 = v38;
  if (SHIBYTE(v40) < 0)
  {
    sub_20E860C04(&v44, (void *)v39, *((unint64_t *)&v39 + 1));
  }
  else
  {
    v44 = v39;
    v45 = v40;
  }
  if (SHIBYTE(v42) < 0)
  {
    sub_20E860C04(&v46, (void *)v41, *((unint64_t *)&v41 + 1));
  }
  else
  {
    v46 = v41;
    v47 = v42;
  }
  v48 = v43;
  if (SHIBYTE(v45) < 0)
  {
    sub_20E860C04(&v49, (void *)v44, *((unint64_t *)&v44 + 1));
  }
  else
  {
    v49 = v44;
    v50 = v45;
  }
  if (SHIBYTE(v47) < 0)
  {
    sub_20E860C04(&v51, (void *)v46, *((unint64_t *)&v46 + 1));
  }
  else
  {
    v51 = v46;
    v52 = v47;
  }
  *(_QWORD *)v53 = v48;
  if (SHIBYTE(v50) < 0)
  {
    sub_20E860C04(&v53[8], (void *)v49, *((unint64_t *)&v49 + 1));
  }
  else
  {
    *(_OWORD *)&v53[8] = v49;
    v54 = v50;
  }
  if (SHIBYTE(v52) < 0)
  {
    sub_20E860C04(&v55, (void *)v51, *((unint64_t *)&v51 + 1));
  }
  else
  {
    v55 = v51;
    v56 = v52;
  }
  v12 = operator new();
  v13 = v12;
  *(_QWORD *)v12 = *(_QWORD *)v53;
  if (SHIBYTE(v54) < 0)
  {
    sub_20E860C04((_BYTE *)(v12 + 8), *(void **)&v53[8], *(unint64_t *)&v53[16]);
  }
  else
  {
    *(_OWORD *)(v12 + 8) = *(_OWORD *)&v53[8];
    *(_QWORD *)(v12 + 24) = v54;
  }
  v14 = (_BYTE *)(v13 + 32);
  if (SHIBYTE(v56) < 0)
  {
    sub_20E860C04(v14, (void *)v55, *((unint64_t *)&v55 + 1));
    v37[0] = v13;
    if (SHIBYTE(v56) < 0)
    {
      operator delete((void *)v55);
      if (SHIBYTE(v54) < 0)
        goto LABEL_88;
    }
    else if (SHIBYTE(v54) < 0)
    {
      goto LABEL_88;
    }
LABEL_54:
    if (SHIBYTE(v52) < 0)
      goto LABEL_89;
LABEL_55:
    if (SHIBYTE(v50) < 0)
      goto LABEL_90;
LABEL_56:
    if (SHIBYTE(v47) < 0)
      goto LABEL_91;
LABEL_57:
    if (SHIBYTE(v45) < 0)
      goto LABEL_92;
LABEL_58:
    v36 = (unint64_t)off_24C9F1A80;
    if (SHIBYTE(v42) < 0)
      goto LABEL_93;
    goto LABEL_59;
  }
  *(_OWORD *)v14 = v55;
  *(_QWORD *)(v13 + 48) = v56;
  v37[0] = v13;
  if ((SHIBYTE(v54) & 0x80000000) == 0)
    goto LABEL_54;
LABEL_88:
  operator delete(*(void **)&v53[8]);
  if ((SHIBYTE(v52) & 0x80000000) == 0)
    goto LABEL_55;
LABEL_89:
  operator delete((void *)v51);
  if ((SHIBYTE(v50) & 0x80000000) == 0)
    goto LABEL_56;
LABEL_90:
  operator delete((void *)v49);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
    goto LABEL_57;
LABEL_91:
  operator delete((void *)v46);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
    goto LABEL_58;
LABEL_92:
  operator delete((void *)v44);
  v36 = (unint64_t)off_24C9F1A80;
  if (SHIBYTE(v42) < 0)
  {
LABEL_93:
    operator delete((void *)v41);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_94;
  }
LABEL_59:
  if ((SHIBYTE(v40) & 0x80000000) == 0)
    goto LABEL_60;
LABEL_94:
  operator delete((void *)v39);
LABEL_60:
  sub_20EAA2AA8((uint64_t *)(v10 + 120), (uint64_t *)&v36);
  if (v36)
  {
    if ((v36 & 1) == 0)
    {
      v15 = *(void (**)(uint64_t, _WORD *, int))(v36 & 0xFFFFFFFFFFFFFFFELL);
      if (v15)
        v15((uint64_t)v37, v37, 2);
    }
    v36 = 0;
  }
  if (SHIBYTE(v35) < 0)
  {
    operator delete((void *)v34);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      goto LABEL_67;
  }
  else if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    goto LABEL_67;
  }
  operator delete((void *)v32);
LABEL_67:
  v16 = *a2;
  LOBYTE(v48) = v16;
  v17 = operator new();
  *(_QWORD *)v17 = &off_24C9AEA48;
  *(_BYTE *)(v17 + 8) = v16;
  v18 = *v11;
  *v11 = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_20EAA2C28(&v48);
  v19 = (void **)(v10 + 168);
  if (*(char *)(v10 + 191) < 0)
  {
    operator delete(*v19);
    *(_OWORD *)v19 = *(_OWORD *)v53;
    *(_QWORD *)(v10 + 184) = *(_QWORD *)&v53[16];
    if ((SHIBYTE(v26) & 0x80000000) == 0)
    {
LABEL_71:
      if ((SHIBYTE(v24) & 0x80000000) == 0)
        goto LABEL_72;
      goto LABEL_84;
    }
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v53;
    *(_QWORD *)(v10 + 184) = *(_QWORD *)&v53[16];
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      goto LABEL_71;
  }
  operator delete((void *)v25);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_72:
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      goto LABEL_73;
LABEL_85:
    operator delete((void *)v29);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
      goto LABEL_74;
    goto LABEL_86;
  }
LABEL_84:
  operator delete(v23[0]);
  if (SHIBYTE(v30) < 0)
    goto LABEL_85;
LABEL_73:
  if ((SHIBYTE(v28) & 0x80000000) == 0)
    goto LABEL_74;
LABEL_86:
  operator delete(__dst[0]);
LABEL_74:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  sub_20E8B2F9C(&v21, a4, v10, (char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EF4F8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;
  void **v63;
  uint64_t v64;

  if (*(char *)(v62 + 31) < 0)
    operator delete(*v63);
  MEMORY[0x212BC6398](v62, 0x1012C4034D1B82FLL);
  if (*(char *)(v64 - 89) < 0)
    operator delete(*(void **)(v64 - 112));
  if (*(char *)(v64 - 113) < 0)
  {
    operator delete(*(void **)(v64 - 136));
    if ((*(char *)(v64 - 145) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*(char *)(v64 - 169) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_18;
    }
  }
  else if ((*(char *)(v64 - 145) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(v64 - 168));
  if ((*(char *)(v64 - 169) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(v64 - 201) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v64 - 192));
  if ((*(char *)(v64 - 201) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(char *)(v64 - 225) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*(void **)(v64 - 224));
  if ((*(char *)(v64 - 225) & 0x80000000) == 0)
  {
LABEL_12:
    if ((a62 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(v64 - 248));
  if ((a62 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a56 & 0x80000000) == 0)
    {
LABEL_15:
      sub_20EDA923C((uint64_t)&a36);
      sub_20E8C8C8C((uint64_t)&a18);
      sub_20E8C8C8C((uint64_t)&a27);
      if (a17 < 0)
      {
        operator delete(a12);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
LABEL_14:
    operator delete(__p);
    goto LABEL_15;
  }
LABEL_21:
  operator delete(a57);
  if ((a56 & 0x80000000) == 0)
    goto LABEL_15;
  goto LABEL_14;
}

uint64_t *sub_20EF4FAEC(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_20EF4FB3C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  __int128 v9;
  uint64_t v10;

  v4 = (_QWORD *)operator new();
  *v4 = off_24C9F19F8;
  v5 = v4 + 1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(v5, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v4[3] = *(_QWORD *)(a2 + 16);
  }
  v6 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v4;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_20EF52090((const std::__fs::filesystem::path *)a2, (uint64_t)&v9);
  v7 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v9;
  *(_QWORD *)(a1 + 184) = v10;
  return a1;
}

void sub_20EF4FC04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

void sub_20EF4FC28(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20EF50138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20EF5023C(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20EF5025C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20EF5027C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20EF50284(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20EF5028C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

void **sub_20EF502E4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void **result;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t (*v11)();
  void *v12;
  size_t v13;
  uint64_t (*v14)();
  uint64_t (*v15)();
  std::runtime_error v16;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  v5 = (const char *)(*(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (v5 == (const char *)(0x800000021038AEA3 & 0x7FFFFFFFFFFFFFFFLL)
    || !strcmp(v5, (const char *)(0x800000021038AEA3 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v6 = *a2 + 8;
    result = *(void ***)(a1 + 16);
    if (!result)
      goto LABEL_23;
  }
  else
  {
    v6 = 0;
    result = *(void ***)(a1 + 16);
    if (!result)
      goto LABEL_23;
  }
  if (result != (void **)v6)
  {
    v8 = *(_BYTE *)(v6 + 23);
    if ((*((char *)result + 23) & 0x80000000) == 0)
    {
      if ((*(_BYTE *)(v6 + 23) & 0x80) != 0)
      {
        result = (void **)sub_20E867BF8(result, *(void **)v6, *(_QWORD *)(v6 + 8));
        v10 = *(_QWORD *)(a1 + 120);
        v15 = nullsub_562;
        if (!v10)
          v15 = 0;
        if (v15)
          goto LABEL_26;
      }
      else
      {
        v9 = *(_OWORD *)v6;
        result[2] = *(void **)(v6 + 16);
        *(_OWORD *)result = v9;
        v10 = *(_QWORD *)(a1 + 120);
        v11 = nullsub_562;
        if (!v10)
          v11 = 0;
        if (v11)
          goto LABEL_26;
      }
      return result;
    }
    if (v8 >= 0)
      v12 = (void *)v6;
    else
      v12 = *(void **)v6;
    if (v8 >= 0)
      v13 = *(unsigned __int8 *)(v6 + 23);
    else
      v13 = *(_QWORD *)(v6 + 8);
    result = sub_20E867CBC(result, v12, v13);
  }
LABEL_23:
  v10 = *(_QWORD *)(a1 + 120);
  v14 = nullsub_562;
  if (!v10)
    v14 = 0;
  if (v14)
  {
LABEL_26:
    if (!v10)
    {
      std::runtime_error::runtime_error(&v16, "call to empty boost::function");
      v16.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v16);
    }
    return (void **)(*(uint64_t (**)(uint64_t, uint64_t))((v10 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20EF5045C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF50470(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F1818;
  *(_QWORD *)(a1 + 8) = &unk_24C9F1890;
  *(_QWORD *)(a1 + 152) = &unk_24C9F18B8;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20EF50838(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EF50838(a1);
}

void sub_20EF504D8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F1818;
  *(_QWORD *)(a1 + 8) = &unk_24C9F1890;
  *(_QWORD *)(a1 + 152) = &unk_24C9F18B8;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20EF50838(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20EF50554(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a3 == a3[1] && (v4 = *(_QWORD *)(a1 + 80)) != 0)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v6 = *a2;
    *a2 = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    sub_20EF50904(a2, a3);
  }
}

void *sub_20EF505D0()
{
  return &unk_24C9F19D8;
}

uint64_t sub_20EF505DC(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20EF505E4()
{
  return &unk_24C9F19D8;
}

uint64_t sub_20EF505F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F1818;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F1890;
  *(_QWORD *)(a1 + 144) = &unk_24C9F18B8;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20EF50838(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EF50838(v2);
}

void sub_20EF50660(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F1818;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F1890;
  *(_QWORD *)(a1 + 144) = &unk_24C9F18B8;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20EF50838(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EF506E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F1818;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F1890;
  *(_QWORD *)a1 = &unk_24C9F18B8;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20EF50838(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EF50838(v2);
}

void sub_20EF50754(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F1818;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F1890;
  *(_QWORD *)a1 = &unk_24C9F18B8;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20EF50838(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EF507D8(uint64_t a1)
{
  return a1 + 16;
}

void sub_20EF507E4(uint64_t a1)
{
  sub_20EF50838(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EF50808(uint64_t a1)
{
  return sub_20EF50838(a1 - 8);
}

void sub_20EF50810(uint64_t a1)
{
  sub_20EF50838(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EF50838(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9F1950;
  *(_QWORD *)(a1 + 8) = &unk_24C9F19C0;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20EF50904(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  __int128 v5;
  uint64_t v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  std::bad_cast v10;
  void *v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  __int128 __dst;
  uint64_t v16;
  uint64_t v17[2];

  sub_20E8B84BC(a1);
  v4 = (char *)sub_20E8B850C(a2, 0);
  if (v4[23] < 0)
  {
    sub_20E860C04(&__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v16 = *((_QWORD *)v4 + 2);
    __dst = v5;
  }
  v13 = 0uLL;
  v14 = 0;
  v6 = HIBYTE(v16);
  p_dst = &__dst;
  if (v16 < 0)
  {
    v6 = *((_QWORD *)&__dst + 1);
    p_dst = (__int128 *)__dst;
  }
  v17[0] = (uint64_t)p_dst;
  v17[1] = (uint64_t)p_dst + v6;
  if (!sub_20EF50AF4(v17, (uint64_t)&v13))
  {
    std::bad_cast::bad_cast(&v10);
    v10.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v11 = &unk_24C9AB9F0;
    v12 = &unk_24C9F19D8;
    sub_20EA9F254((uint64_t)&v10);
  }
  v8 = operator new();
  *(_QWORD *)v8 = off_24C9F19F8;
  *(_OWORD *)(v8 + 8) = v13;
  *(_QWORD *)(v8 + 24) = v14;
  v13 = 0uLL;
  v14 = 0;
  v9 = *a1;
  *a1 = v8;
  if (!v9 || ((*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9), (SHIBYTE(v14) & 0x80000000) == 0))
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_12:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v13);
  if (SHIBYTE(v16) < 0)
    goto LABEL_12;
}

void sub_20EF50A64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  __break(1u);
}

void sub_20EF50AC0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20EF50AD8);
}

BOOL sub_20EF50AF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  uint64_t *v8;
  _BOOL8 v9;
  uint64_t v11[2];
  std::ios_base v12;
  uint64_t v13;
  int v14;
  _QWORD __sb[8];

  std::streambuf::basic_streambuf();
  v4 = *a1;
  v5 = a1[1];
  __sb[0] = &off_24C9C2750;
  __sb[2] = v4;
  __sb[3] = v4;
  __sb[4] = v5;
  v11[1] = 0;
  v12.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v11[0] = MEMORY[0x24BEDB820] + 24;
  std::ios_base::init(&v12, __sb);
  v13 = 0;
  v14 = -1;
  v6 = (std::ios_base *)((char *)v11 + *(_QWORD *)(v11[0] - 24));
  v6->__exceptions_ = 1;
  std::ios_base::clear(v6, v6->__rdstate_);
  v7 = v11[0];
  *(_DWORD *)((char *)&v11[1] + *(_QWORD *)(v11[0] - 24)) &= ~0x1000u;
  *(uint64_t *)((char *)&v11[2] + *(_QWORD *)(v7 - 24)) = 6;
  v8 = sub_20EF50C70(v11, a2);
  v9 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0 && std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  return v9;
}

void sub_20EF50C18(_Unwind_Exception *a1)
{
  std::istream::~istream();
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t *sub_20EF50C70(uint64_t *a1, uint64_t a2)
{
  std::string *p_p;
  uint64_t v5;
  void *__p;
  uint64_t v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_20EF50D40(a1, (uint64_t)&__p, 34, 92);
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  if (v9 >= 0)
    p_p = (std::string *)&__p;
  else
    p_p = (std::string *)__p;
  v5 = HIBYTE(v9);
  if (v9 < 0)
    v5 = v8;
  sub_20E8A9678((std::string *)a2, p_p, (std::string *)((char *)p_p + v5));
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
  return a1;
}

void sub_20EF50D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EF50D40(uint64_t *a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8;
  const std::ios_base *v9;
  std::ios_base::fmtflags fmtflags;
  std::ios_base::fmtflags v11;
  std::ios_base::fmtflags v12;
  const std::locale::facet *v13;
  _QWORD *v14;
  std::string::value_type v15;
  const std::locale::facet *v16;
  std::string::value_type v18;
  std::locale v19;

  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  sub_20E9ED03C(a1, &v18);
  v8 = *(_QWORD *)(*a1 - 24);
  v9 = (const std::ios_base *)((char *)a1 + v8);
  if ((*((_BYTE *)a1 + v8 + 32) & 5) == 0)
  {
    if (v18 == a3)
    {
      fmtflags = v9->__fmtflags_;
      v11 = v9[1].__fmtflags_;
      if (v11 == -1)
      {
        std::ios_base::getloc(v9);
        v13 = std::locale::use_facet(&v19, MEMORY[0x24BEDB350]);
        v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 32);
        std::locale::~locale(&v19);
        v9[1].__fmtflags_ = v11;
        v8 = *(_QWORD *)(*a1 - 24);
        v12 = *(_DWORD *)((char *)a1 + v8 + 8);
      }
      else
      {
        v12 = v9->__fmtflags_;
      }
      *(_DWORD *)((char *)a1 + v8 + 8) = v12 & 0xFFFFEFFF;
      v14 = a1 + 4;
      while (1)
      {
        sub_20E9ED03C(a1, &v18);
        if ((*((_BYTE *)v14 + *(_QWORD *)(*a1 - 24)) & 5) != 0)
          break;
        v15 = v18;
        if (v18 == a4)
        {
          sub_20E9ED03C(a1, &v18);
          if ((*((_BYTE *)v14 + *(_QWORD *)(*a1 - 24)) & 5) != 0)
            break;
          v15 = v18;
        }
        else if (v18 == a3)
        {
          break;
        }
        std::string::push_back((std::string *)a2, v15);
      }
      v9->__fmtflags_ = fmtflags;
      if (v9[1].__fmtflags_ == -1)
      {
        std::ios_base::getloc(v9);
        v16 = std::locale::use_facet(&v19, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 32);
        std::locale::~locale(&v19);
      }
      v9[1].__fmtflags_ = (char)v11;
    }
    else
    {
      std::istream::unget();
      sub_20EA94AF4(a1, a2);
    }
  }
  return a1;
}

void sub_20EF50F40(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  sub_20E860DA4(a1);
}

void sub_20EF50F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

void sub_20EF50F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EF50F7C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF50F7C(uint64_t a1)
{
  const std::ios_base *v2;
  std::ios_base::fmtflags v3;
  const std::locale::facet *v4;
  std::locale v6;

  v2 = *(const std::ios_base **)a1;
  v2->__fmtflags_ = *(_DWORD *)(a1 + 8);
  v3 = *(char *)(a1 + 12);
  if (v2[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v2);
    v4 = std::locale::use_facet(&v6, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
    std::locale::~locale(&v6);
  }
  v2[1].__fmtflags_ = v3;
  return a1;
}

void sub_20EF51004(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  sub_20E860DA4(a1);
}

uint64_t sub_20EF51018(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20EF51058(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

void *sub_20EF51098()
{
  return &unk_24C9F19D8;
}

_QWORD *sub_20EF510A4(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;

  v2 = (_QWORD *)operator new();
  *v2 = off_24C9F19F8;
  v3 = v2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_20E860C04(v3, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_20EF51120(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EF51144(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  __int128 v8;

  if (a2 == a1)
    return a1;
  v4 = *a1;
  if (*a1)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5((uint64_t)(a1 + 1), (uint64_t)(a1 + 1), 2);
    }
    *a1 = 0;
  }
  v6 = *a2;
  if (!*a2)
    return a1;
  *a1 = v6;
  if ((v6 & 1) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 1, 0);
    return a1;
  }
  v8 = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *(_OWORD *)(a1 + 1) = v8;
  return a1;
}

void sub_20EF511E4(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_20EF511F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EF51208(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      v6 = operator new();
      v7 = v6;
      *(_QWORD *)v6 = *(_QWORD *)v5;
      if (*(char *)(v5 + 31) < 0)
      {
        sub_20E860C04((_BYTE *)(v6 + 8), *(void **)(v5 + 8), *(_QWORD *)(v5 + 16));
      }
      else
      {
        v8 = *(_OWORD *)(v5 + 8);
        *(_QWORD *)(v6 + 24) = *(_QWORD *)(v5 + 24);
        *(_OWORD *)(v6 + 8) = v8;
      }
      result = v7 + 32;
      if (*(char *)(v5 + 55) < 0)
      {
        result = (uint64_t)sub_20E860C04((_BYTE *)result, *(void **)(v5 + 32), *(_QWORD *)(v5 + 40));
      }
      else
      {
        v10 = *(_OWORD *)(v5 + 32);
        *(_QWORD *)(v7 + 48) = *(_QWORD *)(v5 + 48);
        *(_OWORD *)result = v10;
      }
      *(_QWORD *)a2 = v7;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v9 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        if (*(char *)(v9 + 55) < 0)
          operator delete(*(void **)(v9 + 32));
        if (*(char *)(v9 + 31) < 0)
          operator delete(*(void **)(v9 + 8));
        result = MEMORY[0x212BC6398](v9, 0x1032C40FD4168B5);
      }
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueINSt3__14__fs10filesyst"
                                        "em4pathES7_ZNS2_23DeprecatedProgramOptionIS7_S7_EEPN5boost15program_options11typ"
                                        "ed_valueIT_cEERT0_RKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEE"
                                        "ESO_EUlvE_EESE_SG_T1_EUlRKS7_E_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueINSt3__14__fs10filesystem4pathES7_ZNS2_23DeprecatedProgramOptionIS7_S7_EEPN5boost15program_options11typed_valueIT_cEERT0_RKNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESO_EUlvE_EESE_SG_T1_EUlRKS7_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_QWORD *)a2 = &unk_24C9F1A40;
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_20EF513D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  MEMORY[0x212BC6398](v1, 0x1032C40FD4168B5);
  _Unwind_Resume(a1);
}

void sub_20EF5140C(char **a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  __int128 v4;
  int v5;
  int v6;
  unint64_t v7;
  const char *v8;
  char *v9;
  const char **v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  char *v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  const char *v20;
  char *v21;
  unint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  char *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  std::__shared_weak_count_vtbl *v46;
  char *v47;
  char *shared_owners;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  const char **v72;
  const char *v73;
  _QWORD v74[3];
  int v75;
  const char *v76;
  int v77;
  const char *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  _BYTE object[24];
  unint64_t v83;
  void *__p[2];
  size_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(object, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)object = *(_OWORD *)a2;
    *(_QWORD *)&object[16] = *(_QWORD *)(a2 + 16);
  }
  v3 = *(_QWORD *)v2;
  if (*(char *)(*(_QWORD *)v2 + 23) < 0)
    operator delete(*(void **)v3);
  v4 = *(_OWORD *)object;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)&object[16];
  *(_OWORD *)v3 = v4;
  sub_20EF51E00(&v81);
  if (**(int **)(v81 + 56) <= 4)
  {
    v5 = *(unsigned __int8 *)(v81 + 72);
    v6 = *(_BYTE *)(v81 + 72) != 0;
    v7 = sub_20E8C31DC(v81, "OSLogSurrogateAppender", 1, 0);
    if (((v7 == 0) & ~v6) == 0)
    {
      v8 = v2 + 8;
      v74[0] = &v81;
      v74[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v74[2] = std::chrono::system_clock::now().__d_.__rep_;
      v75 = 4;
      v76 = "unknown file";
      v77 = 71;
      v79 = 0;
      v80 = 0;
      v78 = "unknown function";
      v9 = v2 + 8;
      if (v2[31] < 0)
      {
        v9 = *(char **)v8;
        v10 = (const char **)(v2 + 32);
        v11 = v2 + 32;
        if ((v2[55] & 0x80000000) == 0)
          goto LABEL_10;
      }
      else
      {
        v10 = (const char **)(v2 + 32);
        v11 = v2 + 32;
        if ((v2[55] & 0x80000000) == 0)
          goto LABEL_10;
      }
      v11 = *v10;
LABEL_10:
      v72 = v10;
      v73 = v11;
      v12 = *(_QWORD *)v74[0];
      v13 = (const char *)(*(_QWORD *)v74[0] + 16);
      v68 = v13;
      v69 = *(_QWORD *)v74[0];
      if (*(char *)(*(_QWORD *)v74[0] + 39) < 0)
      {
        v13 = *(const char **)(v12 + 16);
        v14 = *(_QWORD *)(v12 + 24);
      }
      else
      {
        v14 = *(unsigned __int8 *)(*(_QWORD *)v74[0] + 39);
      }
      v15 = v9;
      v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        if ((_BYTE)v83)
        {
          *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
          *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
        }
        else
        {
          byte_254A4A4F8[23] = 14;
          strcpy(byte_254A4A4F8, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v17 = byte_254A4A4F8;
      else
        v17 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v18 = byte_254A4A4F8[23];
      else
        v18 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v17, v13);
      v19 = &object[8];
      if (v18 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v18 >= 0x17)
      {
        v70 = v2;
        v20 = v13;
        v21 = v15;
        v22 = v7;
        v23 = v5;
        v24 = v8;
        v25 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v25 = v18 | 7;
        v26 = v25 + 1;
        v19 = operator new(v25 + 1);
        *(_QWORD *)&object[16] = v18;
        v83 = v26 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v19;
        v8 = v24;
        v5 = v23;
        v7 = v22;
        v15 = v21;
        v13 = v20;
        v2 = v70;
      }
      else
      {
        HIBYTE(v83) = v18;
        if (!v18)
        {
LABEL_30:
          v19[v18] = 0;
          LOBYTE(__p[0]) = 1;
          v27 = &__p[1];
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v14 >= 0x17)
          {
            v29 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v29 = v14 | 7;
            v30 = v29 + 1;
            v27 = (void **)operator new(v29 + 1);
            v85 = v14;
            v86 = v30 | 0x8000000000000000;
            __p[1] = v27;
          }
          else
          {
            HIBYTE(v86) = v14;
            if (!v14)
            {
              LOBYTE(__p[1]) = 0;
              v87 = 1;
              v28 = *(NSObject **)object;
              if ((SHIBYTE(v86) & 0x80000000) == 0)
                goto LABEL_34;
              goto LABEL_40;
            }
          }
          memmove(v27, v13, v14);
          *((_BYTE *)v27 + v14) = 0;
          v87 = 1;
          v28 = *(NSObject **)object;
          if ((SHIBYTE(v86) & 0x80000000) == 0)
          {
LABEL_34:
            if (!LOBYTE(__p[0]))
              goto LABEL_43;
            goto LABEL_41;
          }
LABEL_40:
          operator delete(__p[1]);
          if (!LOBYTE(__p[0]))
          {
LABEL_43:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v7 && *(_QWORD *)(v7 + 24))
            {
              v71 = v2;
              v31 = _os_log_pack_size();
              v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
              v33 = (std::__shared_weak_count *)operator new();
              v33->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v33->__shared_owners_;
              v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v33->__shared_weak_owners_ = 0;
              v33[1].__vftable = v32;
              sub_20EF51EF4((uint64_t)object, v15, &v73);
              v67 = v8;
              v35 = (char *)operator new(0x50uLL);
              v36 = (std::__shared_weak_count *)v35;
              *((_QWORD *)v35 + 1) = 0;
              v37 = (unint64_t *)(v35 + 8);
              *((_QWORD *)v35 + 2) = 0;
              *(_QWORD *)v35 = &off_24C9EA090;
              *((_QWORD *)v35 + 3) = off_24C9EA0E0;
              v38 = v35 + 24;
              v39 = v35 + 32;
              *((_OWORD *)v35 + 2) = *(_OWORD *)&object[8];
              *((_QWORD *)v35 + 6) = v83;
              v40 = v35 + 56;
              *(_OWORD *)(v35 + 56) = *(_OWORD *)__p;
              *((_QWORD *)v35 + 9) = v85;
              do
                v41 = __ldxr(p_shared_owners);
              while (__stxr(v41 + 1, p_shared_owners));
              do
                v42 = __ldxr(v37);
              while (__stxr(v42 + 1, v37));
              do
                v43 = __ldaxr(v37);
              while (__stlxr(v43 - 1, v37));
              if (!v43)
              {
                v44 = v35 + 56;
                (*(void (**)(char *))(*(_QWORD *)v35 + 16))(v35);
                std::__shared_weak_count::__release_weak(v36);
                v40 = v44;
              }
              v66 = v5;
              do
                v45 = __ldaxr(p_shared_owners);
              while (__stlxr(v45 - 1, p_shared_owners));
              v46 = v32;
              if (!v45)
              {
                v47 = v40;
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
                v40 = v47;
              }
              if (SHIBYTE(v36[2].__vftable) >= 0)
                shared_owners = v39;
              else
                shared_owners = (char *)v36[1].__shared_owners_;
              if (SHIBYTE(v36[3].__vftable) >= 0)
                v49 = v40;
              else
                v49 = (char *)v36[2].__shared_owners_;
              v50 = _os_log_pack_fill();
              *(_DWORD *)v50 = 136315394;
              *(_QWORD *)(v50 + 4) = shared_owners;
              *(_WORD *)(v50 + 12) = 2080;
              *(_QWORD *)(v50 + 14) = v49;
              v51 = operator new();
              v2 = v71;
              v52 = *(unsigned __int8 *)(v69 + 39);
              v53 = v68;
              if ((v52 & 0x80u) != 0)
              {
                v53 = *(const char **)(v69 + 16);
                v52 = *(_QWORD *)(v69 + 24);
              }
              *(_QWORD *)v51 = v46;
              *(_QWORD *)(v51 + 8) = v46;
              *(_QWORD *)(v51 + 16) = v33;
              *(_QWORD *)(v51 + 24) = v38;
              *(_QWORD *)(v51 + 32) = v36;
              *(_QWORD *)(v51 + 40) = v53;
              *(_QWORD *)(v51 + 48) = v52;
              *(_BYTE *)(v51 + 56) = 16;
              *(_QWORD *)object = v51;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), object);
              v54 = *(_QWORD *)object;
              *(_QWORD *)object = 0;
              v8 = v67;
              v55 = (const char *)v72;
              v5 = v66;
              if (v54)
              {
                v56 = *(std::__shared_weak_count **)(v54 + 32);
                if (v56)
                {
                  v57 = (unint64_t *)&v56->__shared_owners_;
                  do
                    v58 = __ldaxr(v57);
                  while (__stlxr(v58 - 1, v57));
                  if (!v58)
                  {
                    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                    std::__shared_weak_count::__release_weak(v56);
                  }
                }
                v59 = *(std::__shared_weak_count **)(v54 + 16);
                if (v59)
                {
                  v60 = (unint64_t *)&v59->__shared_owners_;
                  do
                    v61 = __ldaxr(v60);
                  while (__stlxr(v61 - 1, v60));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v59);
                  }
                }
                MEMORY[0x212BC6398](v54, 0x10F0C40B62ED6C6);
              }
            }
            else
            {
              os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
              *(_DWORD *)object = 136315394;
              *(_QWORD *)&object[4] = v15;
              *(_WORD *)&object[12] = 2080;
              *(_QWORD *)&object[14] = v73;
              v62 = (void *)_os_log_send_and_compose_impl();
              v55 = (const char *)v72;
              if (v62)
                free(v62);
            }
            if (v5)
            {
              if (v2[31] < 0)
                v8 = *(const char **)v8;
              if (v2[55] < 0)
                v55 = *(const char **)v55;
              sub_20E8C003C((uint64_t)v74, "[DEPRECATED] Change '%s' to '%s'", v8, v55);
              sub_20E863570((uint64_t)v74);
            }
            sub_20E863570((uint64_t)v74);
            v63 = v80;
            if (v80)
            {
              v64 = (unint64_t *)&v80->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            return;
          }
LABEL_41:
          if (SHIBYTE(v83) < 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_43;
        }
      }
      memmove(v19, v17, v18);
      goto LABEL_30;
    }
  }
}

void sub_20EF51BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,void *object,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a19);
  v42 = a27;
  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EF51E00(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A608F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A608F8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.mapping_io");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A608F0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A608F8);
  }
  *a1 = qword_254A608F0;
}

void sub_20EF51E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A608F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A608F8);
  _Unwind_Resume(a1);
}

unint64_t sub_20EF51EF4(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  _QWORD *p_dst;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t result;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *__dst;
  __int128 v25;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = operator new(v9 + 1);
    *(_QWORD *)&v25 = v7;
    *((_QWORD *)&v25 + 1) = v10 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v25) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = *a3;
  result = strlen(*a3);
  if (result > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v13 = result;
  if (result >= 0x17)
  {
    v15 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v15 = result | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v16 | 0x8000000000000000;
    v22 = v14;
  }
  else
  {
    HIBYTE(v23) = result;
    v14 = &v22;
    if (!result)
      goto LABEL_17;
  }
  result = (unint64_t)memcpy(v14, v11, v13);
LABEL_17:
  *((_BYTE *)v14 + v13) = 0;
  v17 = HIBYTE(v25);
  v18 = HIBYTE(v23);
  v19 = __dst;
  v20 = v25;
  *(_QWORD *)a1 = off_24C9EA0E0;
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v25 + 7);
  *(_BYTE *)(a1 + 31) = v17;
  v21 = v23;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)&v23 + 7);
  *(_BYTE *)(a1 + 55) = v18;
  return result;
}

void sub_20EF52074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_20EF52090@<X0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string v10;
  void *__p[2];
  int64_t v12;
  void *__dst[2];
  std::string::size_type v14;
  std::__fs::filesystem::path::iterator v15;
  std::__fs::filesystem::path::iterator v16;
  _BYTE v17[24];
  int v18;
  char v19;
  char *v20;

  *(_BYTE *)(a2 + 23) = 1;
  *(_WORD *)a2 = 123;
  std::__fs::filesystem::path::begin(&v16, a1);
  std::__fs::filesystem::path::end(&v15, a1);
  while (v16.__path_ptr_ != v15.__path_ptr_ || v16.__entry_.__data_ != v15.__entry_.__data_)
  {
    if (SHIBYTE(v16.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(__dst, v16.__stashed_elem_.__pn_.__r_.__value_.__l.__data_, v16.__stashed_elem_.__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)&v16.__stashed_elem_.__pn_.__r_.__value_.__l.__data_;
      v14 = v16.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2];
    }
    v18 = 0;
    sub_20EB04FEC((uint64_t)&v20, (uint64_t)v17, (uint64_t)__dst);
    if (v18 == -1)
      sub_20E877AB8();
    v20 = &v19;
    ((void (*)(std::string *__return_ptr, char **, _BYTE *))off_24C9F1A68[v18])(&v10, &v20, v17);
    if (v18 != -1)
      ((void (*)(char **, _BYTE *))off_24C9F1A50[v18])(&v20, v17);
    v5 = std::string::append(&v10, ", ", 2uLL);
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v12 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (v12 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if (v12 >= 0)
      v8 = HIBYTE(v12);
    else
      v8 = (std::string::size_type)__p[1];
    std::string::append((std::string *)a2, (const std::string::value_type *)v7, v8);
    if (SHIBYTE(v12) < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_24:
        operator delete(v10.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_2;
        goto LABEL_25;
      }
    }
    else if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_24;
    }
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      goto LABEL_2;
LABEL_25:
    operator delete(__dst[0]);
LABEL_2:
    std::__fs::filesystem::path::iterator::__increment(&v16);
  }
  if (SHIBYTE(v15.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__stashed_elem_.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v16.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return std::string::append((std::string *)a2, "}", 1uLL);
LABEL_30:
    operator delete(v16.__stashed_elem_.__pn_.__r_.__value_.__l.__data_);
    return std::string::append((std::string *)a2, "}", 1uLL);
  }
  if (SHIBYTE(v16.__stashed_elem_.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_30;
  return std::string::append((std::string *)a2, "}", 1uLL);
}

void sub_20EF52288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if ((*(char *)(v45 + 23) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)v45);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF5239C(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      v6 = operator new();
      v7 = v6;
      *(_QWORD *)v6 = *(_QWORD *)v5;
      if (*(char *)(v5 + 31) < 0)
      {
        sub_20E860C04((_BYTE *)(v6 + 8), *(void **)(v5 + 8), *(_QWORD *)(v5 + 16));
      }
      else
      {
        v8 = *(_OWORD *)(v5 + 8);
        *(_QWORD *)(v6 + 24) = *(_QWORD *)(v5 + 24);
        *(_OWORD *)(v6 + 8) = v8;
      }
      result = v7 + 32;
      if (*(char *)(v5 + 55) < 0)
      {
        result = (uint64_t)sub_20E860C04((_BYTE *)result, *(void **)(v5 + 32), *(_QWORD *)(v5 + 40));
      }
      else
      {
        v10 = *(_OWORD *)(v5 + 32);
        *(_QWORD *)(v7 + 48) = *(_QWORD *)(v5 + 48);
        *(_OWORD *)result = v10;
      }
      *(_QWORD *)a2 = v7;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v9 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        if (*(char *)(v9 + 55) < 0)
          operator delete(*(void **)(v9 + 32));
        if (*(char *)(v9 + 31) < 0)
          operator delete(*(void **)(v9 + 8));
        result = MEMORY[0x212BC6398](v9, 0x1012C4034D1B82FLL);
      }
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueIbbZNS2_23DeprecatedPro"
                                        "gramOptionIbbEEPN5boost15program_options11typed_valueIT_cEERT0_RKNSt3__112basic_"
                                        "stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEESL_EUlvE_EESA_SC_T1_EUlRKbE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueIbbZNS2_23DeprecatedProgramOptionIbbEEPN5boost15program_options11typed_valueIT_cEERT0_RKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEESL_EUlvE_EESA_SC_T1_EUlRKbE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_QWORD *)a2 = &unk_24C9F1A90;
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_20EF52564(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  MEMORY[0x212BC6398](v1, 0x1012C4034D1B82FLL);
  _Unwind_Resume(a1);
}

void sub_20EF525A0(_QWORD *a1, _BYTE *a2)
{
  _BYTE **v2;
  const char *v3;
  int v4;
  unint64_t v5;
  unint64_t v7;
  char *v8;
  const char **v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  char *v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  _BYTE **v19;
  const char *v20;
  char *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  std::__shared_weak_count_vtbl *v44;
  char *v45;
  char *shared_owners;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  int v65;
  const char *v66;
  std::__shared_weak_count *v67;
  const char *v68;
  uint64_t v69;
  const char **v70;
  const char *v71;
  _QWORD v72[3];
  int v73;
  const char *v74;
  int v75;
  const char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  _BYTE object[24];
  unint64_t v81;
  void *__p[2];
  size_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v2 = (_BYTE **)*a1;
  v3 = (const char *)(*a1 + 8);
  **(_BYTE **)*a1 = *a2;
  sub_20EF51E00(&v79);
  if (**(int **)(v79 + 56) > 4)
    return;
  v4 = *(unsigned __int8 *)(v79 + 72);
  v5 = sub_20E8C31DC(v79, "OSLogSurrogateAppender", 1, 0);
  if (!v4 && v5 == 0)
    return;
  v7 = v5;
  v72[0] = &v79;
  v72[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v72[2] = std::chrono::system_clock::now().__d_.__rep_;
  v73 = 4;
  v74 = "unknown file";
  v75 = 71;
  v77 = 0;
  v78 = 0;
  v76 = "unknown function";
  v8 = (char *)v3;
  if (*((char *)v2 + 31) < 0)
  {
    v8 = *(char **)v3;
    v9 = (const char **)(v2 + 4);
    v10 = (const char *)(v2 + 4);
    if ((*((char *)v2 + 55) & 0x80000000) == 0)
      goto LABEL_8;
  }
  else
  {
    v9 = (const char **)(v2 + 4);
    v10 = (const char *)(v2 + 4);
    if ((*((char *)v2 + 55) & 0x80000000) == 0)
      goto LABEL_8;
  }
  v10 = *v9;
LABEL_8:
  v70 = v9;
  v71 = v10;
  v11 = *(_QWORD *)v72[0];
  v12 = (const char *)(*(_QWORD *)v72[0] + 16);
  v68 = v12;
  v69 = *(_QWORD *)v72[0];
  if (*(char *)(*(_QWORD *)v72[0] + 39) < 0)
  {
    v12 = *(const char **)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
  }
  else
  {
    v13 = *(unsigned __int8 *)(*(_QWORD *)v72[0] + 39);
  }
  v14 = v8;
  v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v81)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v16 = byte_254A4A4F8;
  else
    v16 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v17 = byte_254A4A4F8[23];
  else
    v17 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v16, v12);
  v18 = &object[8];
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v17 >= 0x17)
  {
    v66 = v3;
    v19 = v2;
    v20 = v12;
    v21 = v14;
    v22 = v7;
    v23 = v4;
    v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v24 = v17 | 7;
    v25 = v24 + 1;
    v18 = operator new(v24 + 1);
    *(_QWORD *)&object[16] = v17;
    v81 = v25 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v18;
    v4 = v23;
    v7 = v22;
    v14 = v21;
    v12 = v20;
    v2 = v19;
    v3 = v66;
    goto LABEL_27;
  }
  HIBYTE(v81) = v17;
  if (v17)
LABEL_27:
    memmove(v18, v16, v17);
  v18[v17] = 0;
  LOBYTE(__p[0]) = 1;
  v26 = &__p[1];
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 >= 0x17)
  {
    v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v28 = v13 | 7;
    v29 = v28 + 1;
    v26 = (void **)operator new(v28 + 1);
    v83 = v13;
    v84 = v29 | 0x8000000000000000;
    __p[1] = v26;
  }
  else
  {
    HIBYTE(v84) = v13;
    if (!v13)
    {
      LOBYTE(__p[1]) = 0;
      v85 = 1;
      v27 = *(NSObject **)object;
      if ((SHIBYTE(v84) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_38;
    }
  }
  memmove(v26, v12, v13);
  *((_BYTE *)v26 + v13) = 0;
  v85 = 1;
  v27 = *(NSObject **)object;
  if ((SHIBYTE(v84) & 0x80000000) == 0)
  {
LABEL_32:
    if (!LOBYTE(__p[0]))
      goto LABEL_41;
LABEL_39:
    if (SHIBYTE(v81) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_41;
  }
LABEL_38:
  operator delete(__p[1]);
  if (LOBYTE(__p[0]))
    goto LABEL_39;
LABEL_41:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v7 && *(_QWORD *)(v7 + 24))
  {
    v30 = _os_log_pack_size();
    v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
    v32 = (std::__shared_weak_count *)operator new();
    v32->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = v31;
    v67 = v32;
    sub_20EF51EF4((uint64_t)object, v14, &v71);
    v65 = v4;
    v34 = (char *)operator new(0x50uLL);
    v35 = (std::__shared_weak_count *)v34;
    *((_QWORD *)v34 + 1) = 0;
    v36 = (unint64_t *)(v34 + 8);
    *((_QWORD *)v34 + 2) = 0;
    *(_QWORD *)v34 = &off_24C9EA090;
    *((_QWORD *)v34 + 3) = off_24C9EA0E0;
    v64 = v34 + 24;
    v37 = v34 + 32;
    *((_OWORD *)v34 + 2) = *(_OWORD *)&object[8];
    *((_QWORD *)v34 + 6) = v81;
    v38 = v34 + 56;
    *(_OWORD *)(v34 + 56) = *(_OWORD *)__p;
    *((_QWORD *)v34 + 9) = v83;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
    do
      v40 = __ldxr(v36);
    while (__stxr(v40 + 1, v36));
    do
      v41 = __ldaxr(v36);
    while (__stlxr(v41 - 1, v36));
    if (!v41)
    {
      v42 = v34 + 56;
      (*(void (**)(char *))(*(_QWORD *)v34 + 16))(v34);
      std::__shared_weak_count::__release_weak(v35);
      v38 = v42;
    }
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    v44 = v31;
    if (!v43)
    {
      v45 = v38;
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      v38 = v45;
    }
    if (SHIBYTE(v35[2].__vftable) >= 0)
      shared_owners = v37;
    else
      shared_owners = (char *)v35[1].__shared_owners_;
    if (SHIBYTE(v35[3].__vftable) >= 0)
      v47 = v38;
    else
      v47 = (char *)v35[2].__shared_owners_;
    v48 = _os_log_pack_fill();
    *(_DWORD *)v48 = 136315394;
    *(_QWORD *)(v48 + 4) = shared_owners;
    *(_WORD *)(v48 + 12) = 2080;
    *(_QWORD *)(v48 + 14) = v47;
    v49 = operator new();
    v50 = *(unsigned __int8 *)(v69 + 39);
    v51 = v68;
    if ((v50 & 0x80u) != 0)
    {
      v51 = *(const char **)(v69 + 16);
      v50 = *(_QWORD *)(v69 + 24);
    }
    *(_QWORD *)v49 = v44;
    *(_QWORD *)(v49 + 8) = v44;
    *(_QWORD *)(v49 + 16) = v67;
    *(_QWORD *)(v49 + 24) = v64;
    *(_QWORD *)(v49 + 32) = v35;
    *(_QWORD *)(v49 + 40) = v51;
    *(_QWORD *)(v49 + 48) = v50;
    *(_BYTE *)(v49 + 56) = 16;
    *(_QWORD *)object = v49;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), object);
    v52 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    v4 = v65;
    v53 = (const char *)v70;
    if (v52)
    {
      v54 = *(std::__shared_weak_count **)(v52 + 32);
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = *(std::__shared_weak_count **)(v52 + 16);
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    *(_DWORD *)object = 136315394;
    *(_QWORD *)&object[4] = v14;
    *(_WORD *)&object[12] = 2080;
    *(_QWORD *)&object[14] = v71;
    v60 = (void *)_os_log_send_and_compose_impl();
    v53 = (const char *)v70;
    if (v60)
      free(v60);
  }
  if (v4)
  {
    if (*((char *)v2 + 31) < 0)
      v3 = *(const char **)v3;
    if (*((char *)v2 + 55) < 0)
      v53 = *(const char **)v53;
    sub_20E8C003C((uint64_t)v72, "[DEPRECATED] Change '%s' to '%s'", v3, v53);
    sub_20E863570((uint64_t)v72);
  }
  sub_20E863570((uint64_t)v72);
  v61 = v78;
  if (v78)
  {
    v62 = (unint64_t *)&v78->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_20EF52D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,void *object,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a19);
  v42 = a27;
  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20EF52F60(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void sub_20EF52FB0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20EF534C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20EF535C4(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20EF535E4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20EF53604(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20EF5360C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20EF53614(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20EF5366C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t (*v10)();
  std::runtime_error v11;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  v6 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if ((const char *)result == v6 || (result = strcmp((const char *)result, v6), !(_DWORD)result))
  {
    v7 = (_DWORD *)(*a2 + 8);
    v8 = *(_DWORD **)(a1 + 16);
    if (!v8)
      goto LABEL_10;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = *(_DWORD **)(a1 + 16);
  if (v8)
LABEL_9:
    *v8 = *v7;
LABEL_10:
  v9 = *(_QWORD *)(a1 + 120);
  v10 = nullsub_563;
  if (!v9)
    v10 = 0;
  if (v10)
  {
    if (!v9)
    {
      std::runtime_error::runtime_error(&v11, "call to empty boost::function");
      v11.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v11);
    }
    return (*(uint64_t (**)(uint64_t, _DWORD *))((v9 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v7);
  }
  return result;
}

void sub_20EF53768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF5377C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F1AB0;
  *(_QWORD *)(a1 + 8) = &unk_24C9F1B28;
  *(_QWORD *)(a1 + 152) = &unk_24C9F1B50;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20EF53B44(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EF53B44(a1);
}

void sub_20EF537E4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F1AB0;
  *(_QWORD *)(a1 + 8) = &unk_24C9F1B28;
  *(_QWORD *)(a1 + 152) = &unk_24C9F1B50;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20EF53B44(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20EF53860(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a3 == a3[1] && (v4 = *(_QWORD *)(a1 + 80)) != 0)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v6 = *a2;
    *a2 = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    sub_20EF53C10(a2, a3);
  }
}

uint64_t sub_20EF538DC()
{
  return MEMORY[0x24BEDB788];
}

uint64_t sub_20EF538E8(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_20EF538F0()
{
  return MEMORY[0x24BEDB788];
}

uint64_t sub_20EF538FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F1AB0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F1B28;
  *(_QWORD *)(a1 + 144) = &unk_24C9F1B50;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20EF53B44(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EF53B44(v2);
}

void sub_20EF5396C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F1AB0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F1B28;
  *(_QWORD *)(a1 + 144) = &unk_24C9F1B50;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20EF53B44(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EF539F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F1AB0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F1B28;
  *(_QWORD *)a1 = &unk_24C9F1B50;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20EF53B44(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EF53B44(v2);
}

void sub_20EF53A60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F1AB0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F1B28;
  *(_QWORD *)a1 = &unk_24C9F1B50;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20EF53B44(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EF53AE4(uint64_t a1)
{
  return a1 + 16;
}

void sub_20EF53AF0(uint64_t a1)
{
  sub_20EF53B44(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EF53B14(uint64_t a1)
{
  return sub_20EF53B44(a1 - 8);
}

void sub_20EF53B1C(uint64_t a1)
{
  sub_20EF53B44(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EF53B44(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9F1B78;
  *(_QWORD *)(a1 + 8) = &unk_24C9F1BE8;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20EF53C10(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  __int128 v5;
  uint64_t v6;
  unsigned __int8 *p_dst;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::bad_cast v12;
  void *v13;
  uint64_t v14;
  __int128 __dst;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  sub_20E8B84BC(a1);
  v4 = (char *)sub_20E8B850C(a2, 0);
  if (v4[23] < 0)
  {
    sub_20E860C04(&__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v16 = *((_QWORD *)v4 + 2);
    __dst = v5;
  }
  v17 = 0;
  v6 = HIBYTE(v16);
  if (v16 >= 0)
    p_dst = (unsigned __int8 *)&__dst;
  else
    p_dst = (unsigned __int8 *)__dst;
  if (v16 < 0)
    v6 = *((_QWORD *)&__dst + 1);
  v18 = p_dst;
  v19 = &p_dst[v6];
  if (!sub_20EF53FAC(p_dst, &p_dst[v6], (float *)&v17, "NAN", "nan", "INFINITY", "infinity", 0x28u, 0x29u))
  {
    if (!sub_20EF53E30((uint64_t *)&v18, (uint64_t)&v17)
      || (v8 = *(v19 - 1) - 43, v8 <= 0x3A) && ((1 << v8) & 0x400000004000005) != 0)
    {
      std::bad_cast::bad_cast(&v12);
      v12.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
      v13 = &unk_24C9AB9F0;
      v14 = MEMORY[0x24BEDB788];
      sub_20EA9F254((uint64_t)&v12);
    }
  }
  v9 = v17;
  v10 = operator new();
  *(_QWORD *)v10 = &off_24C9F1C10;
  *(_DWORD *)(v10 + 8) = v9;
  v11 = *a1;
  *a1 = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (SHIBYTE(v16) < 0)
    operator delete((void *)__dst);
}

void sub_20EF53DB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
  __break(1u);
}

void sub_20EF53DFC(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20EF53E14);
}

BOOL sub_20EF53E30(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  _QWORD *v8;
  _BOOL8 v9;
  _QWORD v11[2];
  std::ios_base v12;
  uint64_t v13;
  int v14;
  _QWORD __sb[8];

  std::streambuf::basic_streambuf();
  v4 = *a1;
  v5 = a1[1];
  __sb[0] = &off_24C9C2750;
  __sb[2] = v4;
  __sb[3] = v4;
  __sb[4] = v5;
  v11[1] = 0;
  v12.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v11[0] = MEMORY[0x24BEDB820] + 24;
  std::ios_base::init(&v12, __sb);
  v13 = 0;
  v14 = -1;
  v6 = (std::ios_base *)((char *)v11 + *(_QWORD *)(v11[0] - 24));
  v6->__exceptions_ = 1;
  std::ios_base::clear(v6, v6->__rdstate_);
  v7 = v11[0];
  *(_DWORD *)((char *)&v11[1] + *(_QWORD *)(v11[0] - 24)) &= ~0x1000u;
  *(_QWORD *)((char *)&v11[2] + *(_QWORD *)(v7 - 24)) = 9;
  v8 = (_QWORD *)MEMORY[0x212BC5BE8](v11, a2);
  v9 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0 && std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  return v9;
}

void sub_20EF53F54(_Unwind_Exception *a1)
{
  std::istream::~istream();
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

uint64_t sub_20EF53FAC(unsigned __int8 *a1, unsigned __int8 *a2, float *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 a8, unsigned __int8 a9)
{
  int v9;
  BOOL v10;
  unsigned __int8 *v11;
  int64_t v12;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  float v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  float v28;

  if (a1 == a2)
    return 0;
  v9 = *a1;
  v10 = v9 == 45 || v9 == 43;
  v11 = v10 ? a1 + 1 : a1;
  v12 = a2 - v11;
  if (a2 - v11 < 3)
    return 0;
  v14 = *v11;
  if (v14 == *a5 || v14 == *a4)
  {
    v15 = v11[1];
    if (v15 == a5[1] || v15 == a4[1])
    {
      v16 = v11[2];
      if (v16 == a5[2] || v16 == a4[2])
      {
        v17 = v11 + 3;
        if (v17 == a2 || a2 - v17 >= 2 && *v17 == a8 && *(a2 - 1) == a9)
        {
          v18 = NAN;
          if (v9 == 45)
            v18 = NAN;
          *a3 = v18;
          return 1;
        }
        return 0;
      }
    }
  }
  if (v12 == 8)
  {
    if (v14 != *a7 && v14 != *a6)
      return 0;
    v22 = v11[1];
    if (v22 != a7[1] && v22 != a6[1])
      return 0;
    v23 = v11[2];
    if (v23 != a7[2] && v23 != a6[2])
      return 0;
    v24 = v11[3];
    if (v24 != a7[3] && v24 != a6[3])
      return 0;
    v25 = v11[4];
    if (v25 != a7[4] && v25 != a6[4])
      return 0;
    v26 = v11[5];
    if (v26 != a7[5] && v26 != a6[5])
      return 0;
    v27 = v11[6];
    if (v27 != a7[6] && v27 != a6[6])
      return 0;
    v20 = v11[7];
    if (v20 == a7[7])
      goto LABEL_48;
    v21 = a6[7];
  }
  else
  {
    if (v12 != 3 || v14 != *a7 && v14 != *a6)
      return 0;
    v19 = v11[1];
    if (v19 != a7[1] && v19 != a6[1])
      return 0;
    v20 = v11[2];
    if (v20 == a7[2])
      goto LABEL_48;
    v21 = a6[2];
  }
  if (v20 != v21)
    return 0;
LABEL_48:
  v28 = INFINITY;
  if (v9 == 45)
    v28 = -INFINITY;
  *a3 = v28;
  return 1;
}

void sub_20EF541E8()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EF541FC()
{
  return MEMORY[0x24BEDB788];
}

float sub_20EF54208(uint64_t a1)
{
  uint64_t v2;
  float result;

  v2 = operator new();
  *(_QWORD *)v2 = &off_24C9F1C10;
  result = *(float *)(a1 + 8);
  *(float *)(v2 + 8) = result;
  return result;
}

uint64_t *sub_20EF54250(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  __int128 v8;

  if (a2 == a1)
    return a1;
  v4 = *a1;
  if (*a1)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5((uint64_t)(a1 + 1), (uint64_t)(a1 + 1), 2);
    }
    *a1 = 0;
  }
  v6 = *a2;
  if (!*a2)
    return a1;
  *a1 = v6;
  if ((v6 & 1) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 1, 0);
    return a1;
  }
  v8 = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *(_OWORD *)(a1 + 1) = v8;
  return a1;
}

void sub_20EF542F0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_20EF54300(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20EF54314(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      v6 = operator new();
      v7 = v6;
      *(_QWORD *)v6 = *(_QWORD *)v5;
      if (*(char *)(v5 + 31) < 0)
      {
        sub_20E860C04((_BYTE *)(v6 + 8), *(void **)(v5 + 8), *(_QWORD *)(v5 + 16));
      }
      else
      {
        v8 = *(_OWORD *)(v5 + 8);
        *(_QWORD *)(v6 + 24) = *(_QWORD *)(v5 + 24);
        *(_OWORD *)(v6 + 8) = v8;
      }
      result = v7 + 32;
      if (*(char *)(v5 + 55) < 0)
      {
        result = (uint64_t)sub_20E860C04((_BYTE *)result, *(void **)(v5 + 32), *(_QWORD *)(v5 + 40));
      }
      else
      {
        v10 = *(_OWORD *)(v5 + 32);
        *(_QWORD *)(v7 + 48) = *(_QWORD *)(v5 + 48);
        *(_OWORD *)result = v10;
      }
      *(_QWORD *)a2 = v7;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v9 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        if (*(char *)(v9 + 55) < 0)
          operator delete(*(void **)(v9 + 32));
        if (*(char *)(v9 + 31) < 0)
          operator delete(*(void **)(v9 + 8));
        result = MEMORY[0x212BC6398](v9, 0x1092C403F48558ALL);
      }
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueIffZNS2_23DeprecatedPro"
                                        "gramOptionIffEEPN5boost15program_options11typed_valueIT_cEERT0_RKNSt3__112basic_"
                                        "stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEESL_EUlvE_EESA_SC_T1_EUlRKfE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueIffZNS2_23DeprecatedProgramOptionIffEEPN5boost15program_options11typed_valueIT_cEERT0_RKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEESL_EUlvE_EESA_SC_T1_EUlRKfE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_QWORD *)a2 = &unk_24C9F1C58;
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_20EF544DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  MEMORY[0x212BC6398](v1, 0x1092C403F48558ALL);
  _Unwind_Resume(a1);
}

void sub_20EF54518(_QWORD *a1, _DWORD *a2)
{
  _DWORD **v2;
  const char *v3;
  int v4;
  unint64_t v5;
  unint64_t v7;
  char *v8;
  const char **v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  char *v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  _DWORD **v19;
  const char *v20;
  char *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  std::__shared_weak_count_vtbl *v44;
  char *v45;
  char *shared_owners;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  int v65;
  const char *v66;
  std::__shared_weak_count *v67;
  const char *v68;
  uint64_t v69;
  const char **v70;
  const char *v71;
  _QWORD v72[3];
  int v73;
  const char *v74;
  int v75;
  const char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  _BYTE object[24];
  unint64_t v81;
  void *__p[2];
  size_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v2 = (_DWORD **)*a1;
  v3 = (const char *)(*a1 + 8);
  **(_DWORD **)*a1 = *a2;
  sub_20EF51E00(&v79);
  if (**(int **)(v79 + 56) > 4)
    return;
  v4 = *(unsigned __int8 *)(v79 + 72);
  v5 = sub_20E8C31DC(v79, "OSLogSurrogateAppender", 1, 0);
  if (!v4 && v5 == 0)
    return;
  v7 = v5;
  v72[0] = &v79;
  v72[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v72[2] = std::chrono::system_clock::now().__d_.__rep_;
  v73 = 4;
  v74 = "unknown file";
  v75 = 71;
  v77 = 0;
  v78 = 0;
  v76 = "unknown function";
  v8 = (char *)v3;
  if (*((char *)v2 + 31) < 0)
  {
    v8 = *(char **)v3;
    v9 = (const char **)(v2 + 4);
    v10 = (const char *)(v2 + 4);
    if ((*((char *)v2 + 55) & 0x80000000) == 0)
      goto LABEL_8;
  }
  else
  {
    v9 = (const char **)(v2 + 4);
    v10 = (const char *)(v2 + 4);
    if ((*((char *)v2 + 55) & 0x80000000) == 0)
      goto LABEL_8;
  }
  v10 = *v9;
LABEL_8:
  v70 = v9;
  v71 = v10;
  v11 = *(_QWORD *)v72[0];
  v12 = (const char *)(*(_QWORD *)v72[0] + 16);
  v68 = v12;
  v69 = *(_QWORD *)v72[0];
  if (*(char *)(*(_QWORD *)v72[0] + 39) < 0)
  {
    v12 = *(const char **)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
  }
  else
  {
    v13 = *(unsigned __int8 *)(*(_QWORD *)v72[0] + 39);
  }
  v14 = v8;
  v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v81)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v16 = byte_254A4A4F8;
  else
    v16 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v17 = byte_254A4A4F8[23];
  else
    v17 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v16, v12);
  v18 = &object[8];
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v17 >= 0x17)
  {
    v66 = v3;
    v19 = v2;
    v20 = v12;
    v21 = v14;
    v22 = v7;
    v23 = v4;
    v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v24 = v17 | 7;
    v25 = v24 + 1;
    v18 = operator new(v24 + 1);
    *(_QWORD *)&object[16] = v17;
    v81 = v25 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v18;
    v4 = v23;
    v7 = v22;
    v14 = v21;
    v12 = v20;
    v2 = v19;
    v3 = v66;
    goto LABEL_27;
  }
  HIBYTE(v81) = v17;
  if (v17)
LABEL_27:
    memmove(v18, v16, v17);
  v18[v17] = 0;
  LOBYTE(__p[0]) = 1;
  v26 = &__p[1];
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 >= 0x17)
  {
    v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v28 = v13 | 7;
    v29 = v28 + 1;
    v26 = (void **)operator new(v28 + 1);
    v83 = v13;
    v84 = v29 | 0x8000000000000000;
    __p[1] = v26;
  }
  else
  {
    HIBYTE(v84) = v13;
    if (!v13)
    {
      LOBYTE(__p[1]) = 0;
      v85 = 1;
      v27 = *(NSObject **)object;
      if ((SHIBYTE(v84) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_38;
    }
  }
  memmove(v26, v12, v13);
  *((_BYTE *)v26 + v13) = 0;
  v85 = 1;
  v27 = *(NSObject **)object;
  if ((SHIBYTE(v84) & 0x80000000) == 0)
  {
LABEL_32:
    if (!LOBYTE(__p[0]))
      goto LABEL_41;
LABEL_39:
    if (SHIBYTE(v81) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_41;
  }
LABEL_38:
  operator delete(__p[1]);
  if (LOBYTE(__p[0]))
    goto LABEL_39;
LABEL_41:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v7 && *(_QWORD *)(v7 + 24))
  {
    v30 = _os_log_pack_size();
    v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
    v32 = (std::__shared_weak_count *)operator new();
    v32->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = v31;
    v67 = v32;
    sub_20EF51EF4((uint64_t)object, v14, &v71);
    v65 = v4;
    v34 = (char *)operator new(0x50uLL);
    v35 = (std::__shared_weak_count *)v34;
    *((_QWORD *)v34 + 1) = 0;
    v36 = (unint64_t *)(v34 + 8);
    *((_QWORD *)v34 + 2) = 0;
    *(_QWORD *)v34 = &off_24C9EA090;
    *((_QWORD *)v34 + 3) = off_24C9EA0E0;
    v64 = v34 + 24;
    v37 = v34 + 32;
    *((_OWORD *)v34 + 2) = *(_OWORD *)&object[8];
    *((_QWORD *)v34 + 6) = v81;
    v38 = v34 + 56;
    *(_OWORD *)(v34 + 56) = *(_OWORD *)__p;
    *((_QWORD *)v34 + 9) = v83;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
    do
      v40 = __ldxr(v36);
    while (__stxr(v40 + 1, v36));
    do
      v41 = __ldaxr(v36);
    while (__stlxr(v41 - 1, v36));
    if (!v41)
    {
      v42 = v34 + 56;
      (*(void (**)(char *))(*(_QWORD *)v34 + 16))(v34);
      std::__shared_weak_count::__release_weak(v35);
      v38 = v42;
    }
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    v44 = v31;
    if (!v43)
    {
      v45 = v38;
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      v38 = v45;
    }
    if (SHIBYTE(v35[2].__vftable) >= 0)
      shared_owners = v37;
    else
      shared_owners = (char *)v35[1].__shared_owners_;
    if (SHIBYTE(v35[3].__vftable) >= 0)
      v47 = v38;
    else
      v47 = (char *)v35[2].__shared_owners_;
    v48 = _os_log_pack_fill();
    *(_DWORD *)v48 = 136315394;
    *(_QWORD *)(v48 + 4) = shared_owners;
    *(_WORD *)(v48 + 12) = 2080;
    *(_QWORD *)(v48 + 14) = v47;
    v49 = operator new();
    v50 = *(unsigned __int8 *)(v69 + 39);
    v51 = v68;
    if ((v50 & 0x80u) != 0)
    {
      v51 = *(const char **)(v69 + 16);
      v50 = *(_QWORD *)(v69 + 24);
    }
    *(_QWORD *)v49 = v44;
    *(_QWORD *)(v49 + 8) = v44;
    *(_QWORD *)(v49 + 16) = v67;
    *(_QWORD *)(v49 + 24) = v64;
    *(_QWORD *)(v49 + 32) = v35;
    *(_QWORD *)(v49 + 40) = v51;
    *(_QWORD *)(v49 + 48) = v50;
    *(_BYTE *)(v49 + 56) = 16;
    *(_QWORD *)object = v49;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), object);
    v52 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    v4 = v65;
    v53 = (const char *)v70;
    if (v52)
    {
      v54 = *(std::__shared_weak_count **)(v52 + 32);
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = *(std::__shared_weak_count **)(v52 + 16);
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    *(_DWORD *)object = 136315394;
    *(_QWORD *)&object[4] = v14;
    *(_WORD *)&object[12] = 2080;
    *(_QWORD *)&object[14] = v71;
    v60 = (void *)_os_log_send_and_compose_impl();
    v53 = (const char *)v70;
    if (v60)
      free(v60);
  }
  if (v4)
  {
    if (*((char *)v2 + 31) < 0)
      v3 = *(const char **)v3;
    if (*((char *)v2 + 55) < 0)
      v53 = *(const char **)v53;
    sub_20E8C003C((uint64_t)v72, "[DEPRECATED] Change '%s' to '%s'", v3, v53);
    sub_20E863570((uint64_t)v72);
  }
  sub_20E863570((uint64_t)v72);
  v61 = v78;
  if (v78)
  {
    v62 = (unint64_t *)&v78->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_20EF54CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,void *object,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a19);
  v42 = a27;
  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EF54ED8(float *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20E89F7C4((uint64_t)v5, (uint64_t)v2, a1);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9F1A68[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9F1A50[v3])(v5, v2);
  return result;
}

void sub_20EF54F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C9F1A50[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF54FA8(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      v6 = operator new();
      v7 = v6;
      *(_QWORD *)v6 = *(_QWORD *)v5;
      if (*(char *)(v5 + 31) < 0)
      {
        sub_20E860C04((_BYTE *)(v6 + 8), *(void **)(v5 + 8), *(_QWORD *)(v5 + 16));
      }
      else
      {
        v8 = *(_OWORD *)(v5 + 8);
        *(_QWORD *)(v6 + 24) = *(_QWORD *)(v5 + 24);
        *(_OWORD *)(v6 + 8) = v8;
      }
      result = v7 + 32;
      if (*(char *)(v5 + 55) < 0)
      {
        result = (uint64_t)sub_20E860C04((_BYTE *)result, *(void **)(v5 + 32), *(_QWORD *)(v5 + 40));
      }
      else
      {
        v10 = *(_OWORD *)(v5 + 32);
        *(_QWORD *)(v7 + 48) = *(_QWORD *)(v5 + 48);
        *(_OWORD *)result = v10;
      }
      *(_QWORD *)a2 = v7;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v9 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        if (*(char *)(v9 + 55) < 0)
          operator delete(*(void **)(v9 + 32));
        if (*(char *)(v9 + 31) < 0)
          operator delete(*(void **)(v9 + 8));
        result = MEMORY[0x212BC6398](v9, 0x1092C403F48558ALL);
      }
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueIiNS_3kit2mt21JpegCompr"
                                        "essionMethodEZNS2_23DeprecatedProgramOptionIiS6_EEPN5boost15program_options11typ"
                                        "ed_valueIT_cEERT0_RKNSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIc"
                                        "EEEESO_EUlvE_EESD_SF_T1_EUlRKiE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueIiNS_3kit2mt21JpegCompressionMethodEZNS2_23DeprecatedProgramOptionIiS6_EEPN5boost15program_options11typed_valueIT_cEERT0_RKNSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEESO_EUlvE_EESD_SF_T1_EUlRKiE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_QWORD *)a2 = &unk_24C9F1C78;
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_20EF55170(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  MEMORY[0x212BC6398](v1, 0x1092C403F48558ALL);
  _Unwind_Resume(a1);
}

void sub_20EF551AC(_QWORD *a1, _DWORD *a2)
{
  _DWORD **v2;
  int v3;
  unint64_t v4;
  unint64_t v6;
  const char *v7;
  char *v8;
  const char **v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  char *v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  const char *v19;
  char *v20;
  unint64_t v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  std::__shared_weak_count_vtbl *v45;
  char *v46;
  char *shared_owners;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  int v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  _DWORD **v69;
  _DWORD **v70;
  const char **v71;
  const char *v72;
  _QWORD v73[3];
  int v74;
  const char *v75;
  int v76;
  const char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  _BYTE object[24];
  unint64_t v82;
  void *__p[2];
  size_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v2 = (_DWORD **)*a1;
  **(_DWORD **)*a1 = *a2;
  sub_20EF51E00(&v80);
  if (**(int **)(v80 + 56) > 4)
    return;
  v3 = *(unsigned __int8 *)(v80 + 72);
  v4 = sub_20E8C31DC(v80, "OSLogSurrogateAppender", 1, 0);
  if (!v3 && v4 == 0)
    return;
  v6 = v4;
  v7 = (const char *)(v2 + 1);
  v73[0] = &v80;
  v73[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v73[2] = std::chrono::system_clock::now().__d_.__rep_;
  v74 = 4;
  v75 = "unknown file";
  v76 = 71;
  v78 = 0;
  v79 = 0;
  v77 = "unknown function";
  v8 = (char *)(v2 + 1);
  if (*((char *)v2 + 31) < 0)
  {
    v8 = *(char **)v7;
    v9 = (const char **)(v2 + 4);
    v10 = (const char *)(v2 + 4);
    if ((*((char *)v2 + 55) & 0x80000000) == 0)
      goto LABEL_8;
  }
  else
  {
    v9 = (const char **)(v2 + 4);
    v10 = (const char *)(v2 + 4);
    if ((*((char *)v2 + 55) & 0x80000000) == 0)
      goto LABEL_8;
  }
  v10 = *v9;
LABEL_8:
  v71 = v9;
  v72 = v10;
  v11 = *(_QWORD *)v73[0];
  v12 = (const char *)(*(_QWORD *)v73[0] + 16);
  v67 = v12;
  v68 = *(_QWORD *)v73[0];
  if (*(char *)(*(_QWORD *)v73[0] + 39) < 0)
  {
    v12 = *(const char **)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
  }
  else
  {
    v13 = *(unsigned __int8 *)(*(_QWORD *)v73[0] + 39);
  }
  v14 = v8;
  v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v82)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v16 = byte_254A4A4F8;
  else
    v16 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v17 = byte_254A4A4F8[23];
  else
    v17 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v16, v12);
  v18 = &object[8];
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v17 >= 0x17)
  {
    v69 = v2;
    v19 = v12;
    v20 = v14;
    v21 = v6;
    v22 = v3;
    v23 = v7;
    v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v24 = v17 | 7;
    v25 = v24 + 1;
    v18 = operator new(v24 + 1);
    *(_QWORD *)&object[16] = v17;
    v82 = v25 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v18;
    v7 = v23;
    v3 = v22;
    v6 = v21;
    v14 = v20;
    v12 = v19;
    v2 = v69;
    goto LABEL_27;
  }
  HIBYTE(v82) = v17;
  if (v17)
LABEL_27:
    memmove(v18, v16, v17);
  v18[v17] = 0;
  LOBYTE(__p[0]) = 1;
  v26 = &__p[1];
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 >= 0x17)
  {
    v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v28 = v13 | 7;
    v29 = v28 + 1;
    v26 = (void **)operator new(v28 + 1);
    v84 = v13;
    v85 = v29 | 0x8000000000000000;
    __p[1] = v26;
  }
  else
  {
    HIBYTE(v85) = v13;
    if (!v13)
    {
      LOBYTE(__p[1]) = 0;
      v86 = 1;
      v27 = *(NSObject **)object;
      if ((SHIBYTE(v85) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_38;
    }
  }
  memmove(v26, v12, v13);
  *((_BYTE *)v26 + v13) = 0;
  v86 = 1;
  v27 = *(NSObject **)object;
  if ((SHIBYTE(v85) & 0x80000000) == 0)
  {
LABEL_32:
    if (!LOBYTE(__p[0]))
      goto LABEL_41;
LABEL_39:
    if (SHIBYTE(v82) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_41;
  }
LABEL_38:
  operator delete(__p[1]);
  if (LOBYTE(__p[0]))
    goto LABEL_39;
LABEL_41:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v6 && *(_QWORD *)(v6 + 24))
  {
    v70 = v2;
    v30 = _os_log_pack_size();
    v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
    v32 = (std::__shared_weak_count *)operator new();
    v32->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = v31;
    sub_20EF51EF4((uint64_t)object, v14, &v72);
    v66 = v7;
    v34 = (char *)operator new(0x50uLL);
    v35 = (std::__shared_weak_count *)v34;
    *((_QWORD *)v34 + 1) = 0;
    v36 = (unint64_t *)(v34 + 8);
    *((_QWORD *)v34 + 2) = 0;
    *(_QWORD *)v34 = &off_24C9EA090;
    *((_QWORD *)v34 + 3) = off_24C9EA0E0;
    v37 = v34 + 24;
    v38 = v34 + 32;
    *((_OWORD *)v34 + 2) = *(_OWORD *)&object[8];
    *((_QWORD *)v34 + 6) = v82;
    v39 = v34 + 56;
    *(_OWORD *)(v34 + 56) = *(_OWORD *)__p;
    *((_QWORD *)v34 + 9) = v84;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
    do
      v41 = __ldxr(v36);
    while (__stxr(v41 + 1, v36));
    do
      v42 = __ldaxr(v36);
    while (__stlxr(v42 - 1, v36));
    if (!v42)
    {
      v43 = v34 + 56;
      (*(void (**)(char *))(*(_QWORD *)v34 + 16))(v34);
      std::__shared_weak_count::__release_weak(v35);
      v39 = v43;
    }
    v65 = v3;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    v45 = v31;
    if (!v44)
    {
      v46 = v39;
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      v39 = v46;
    }
    if (SHIBYTE(v35[2].__vftable) >= 0)
      shared_owners = v38;
    else
      shared_owners = (char *)v35[1].__shared_owners_;
    if (SHIBYTE(v35[3].__vftable) >= 0)
      v48 = v39;
    else
      v48 = (char *)v35[2].__shared_owners_;
    v49 = _os_log_pack_fill();
    *(_DWORD *)v49 = 136315394;
    *(_QWORD *)(v49 + 4) = shared_owners;
    *(_WORD *)(v49 + 12) = 2080;
    *(_QWORD *)(v49 + 14) = v48;
    v50 = operator new();
    v2 = v70;
    v51 = *(unsigned __int8 *)(v68 + 39);
    v52 = v67;
    if ((v51 & 0x80u) != 0)
    {
      v52 = *(const char **)(v68 + 16);
      v51 = *(_QWORD *)(v68 + 24);
    }
    *(_QWORD *)v50 = v45;
    *(_QWORD *)(v50 + 8) = v45;
    *(_QWORD *)(v50 + 16) = v32;
    *(_QWORD *)(v50 + 24) = v37;
    *(_QWORD *)(v50 + 32) = v35;
    *(_QWORD *)(v50 + 40) = v52;
    *(_QWORD *)(v50 + 48) = v51;
    *(_BYTE *)(v50 + 56) = 16;
    *(_QWORD *)object = v50;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), object);
    v53 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    v7 = v66;
    v54 = (const char *)v71;
    v3 = v65;
    if (v53)
    {
      v55 = *(std::__shared_weak_count **)(v53 + 32);
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = *(std::__shared_weak_count **)(v53 + 16);
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      MEMORY[0x212BC6398](v53, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    *(_DWORD *)object = 136315394;
    *(_QWORD *)&object[4] = v14;
    *(_WORD *)&object[12] = 2080;
    *(_QWORD *)&object[14] = v72;
    v61 = (void *)_os_log_send_and_compose_impl();
    v54 = (const char *)v71;
    if (v61)
      free(v61);
  }
  if (v3)
  {
    if (*((char *)v2 + 31) < 0)
      v7 = *(const char **)v7;
    if (*((char *)v2 + 55) < 0)
      v54 = *(const char **)v54;
    sub_20E8C003C((uint64_t)v73, "[DEPRECATED] Change '%s' to '%s'", v7, v54);
    sub_20E863570((uint64_t)v73);
  }
  sub_20E863570((uint64_t)v73);
  v62 = v79;
  if (v79)
  {
    v63 = (unint64_t *)&v79->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_20EF55934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,void *object,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a19);
  v42 = a27;
  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EF55B50(uint64_t a1, _QWORD *a2, void **a3, char *a4)
{
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  void (*v15)(uint64_t, _WORD *, int);
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void **v19;
  std::string *p_p;
  uint64_t v21;
  std::string __p;
  void *v23[2];
  uint64_t v24;
  __int128 v25;
  void *v26;
  void *__dst[2];
  uint64_t v28;
  __int128 v29;
  void *v30;
  _QWORD *v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  void *v35;
  unint64_t v36;
  _QWORD v37[3];
  _QWORD *v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  void *v42;
  _QWORD *v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  void *v47;
  _QWORD *v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  void *v52;
  _BYTE v53[24];
  uint64_t v54;
  __int128 v55;
  void *v56;

  if (*((char *)a3 + 23) >= 0)
    v8 = a3;
  else
    v8 = *a3;
  sub_210237040("Deprecated config for '%s'", &__p, v8);
  v21 = nullsub_1(a1);
  if (a4[23] < 0)
  {
    v9 = *(char **)a4;
    sub_20E860C04(__dst, *(void **)a4, *((_QWORD *)a4 + 1));
    a4 = v9;
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a4;
    v28 = *((_QWORD *)a4 + 2);
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_20E860C04(&v29, *a3, (unint64_t)a3[1]);
  }
  else
  {
    v29 = *(_OWORD *)a3;
    v30 = a3[2];
  }
  if (SHIBYTE(v28) < 0)
  {
    sub_20E860C04(v23, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)__dst;
    v24 = v28;
  }
  if (SHIBYTE(v30) < 0)
  {
    sub_20E860C04(&v25, (void *)v29, *((unint64_t *)&v29 + 1));
  }
  else
  {
    v25 = v29;
    v26 = v30;
  }
  v10 = operator new();
  *(_QWORD *)(v10 + 120) = 0;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_QWORD *)(v10 + 109) = 0;
  *(_QWORD *)v10 = &off_24C9C2568;
  *(_QWORD *)(v10 + 8) = &unk_24C9C25E0;
  *(_OWORD *)(v10 + 160) = 0u;
  v11 = (uint64_t *)(v10 + 160);
  *(_QWORD *)(v10 + 152) = &unk_24C9C2608;
  *(_OWORD *)(v10 + 176) = 0u;
  v31 = a2;
  if (SHIBYTE(v24) < 0)
  {
    sub_20E860C04(&v32, v23[0], (unint64_t)v23[1]);
  }
  else
  {
    v32 = *(_OWORD *)v23;
    v33 = v24;
  }
  if (SHIBYTE(v26) < 0)
  {
    sub_20E860C04(&v34, (void *)v25, *((unint64_t *)&v25 + 1));
  }
  else
  {
    v34 = v25;
    v35 = v26;
  }
  v36 = 0;
  v38 = v31;
  if (SHIBYTE(v33) < 0)
  {
    sub_20E860C04(&v39, (void *)v32, *((unint64_t *)&v32 + 1));
  }
  else
  {
    v39 = v32;
    v40 = v33;
  }
  if (SHIBYTE(v35) < 0)
  {
    sub_20E860C04(&v41, (void *)v34, *((unint64_t *)&v34 + 1));
  }
  else
  {
    v41 = v34;
    v42 = v35;
  }
  v43 = v38;
  if (SHIBYTE(v40) < 0)
  {
    sub_20E860C04(&v44, (void *)v39, *((unint64_t *)&v39 + 1));
  }
  else
  {
    v44 = v39;
    v45 = v40;
  }
  if (SHIBYTE(v42) < 0)
  {
    sub_20E860C04(&v46, (void *)v41, *((unint64_t *)&v41 + 1));
  }
  else
  {
    v46 = v41;
    v47 = v42;
  }
  v48 = v43;
  if (SHIBYTE(v45) < 0)
  {
    sub_20E860C04(&v49, (void *)v44, *((unint64_t *)&v44 + 1));
  }
  else
  {
    v49 = v44;
    v50 = v45;
  }
  if (SHIBYTE(v47) < 0)
  {
    sub_20E860C04(&v51, (void *)v46, *((unint64_t *)&v46 + 1));
  }
  else
  {
    v51 = v46;
    v52 = v47;
  }
  *(_QWORD *)v53 = v48;
  if (SHIBYTE(v50) < 0)
  {
    sub_20E860C04(&v53[8], (void *)v49, *((unint64_t *)&v49 + 1));
  }
  else
  {
    *(_OWORD *)&v53[8] = v49;
    v54 = v50;
  }
  if (SHIBYTE(v52) < 0)
  {
    sub_20E860C04(&v55, (void *)v51, *((unint64_t *)&v51 + 1));
  }
  else
  {
    v55 = v51;
    v56 = v52;
  }
  v12 = operator new();
  v13 = v12;
  *(_QWORD *)v12 = *(_QWORD *)v53;
  if (SHIBYTE(v54) < 0)
  {
    sub_20E860C04((_BYTE *)(v12 + 8), *(void **)&v53[8], *(unint64_t *)&v53[16]);
  }
  else
  {
    *(_OWORD *)(v12 + 8) = *(_OWORD *)&v53[8];
    *(_QWORD *)(v12 + 24) = v54;
  }
  v14 = (_BYTE *)(v13 + 32);
  if (SHIBYTE(v56) < 0)
  {
    sub_20E860C04(v14, (void *)v55, *((unint64_t *)&v55 + 1));
    v37[0] = v13;
    if (SHIBYTE(v56) < 0)
    {
      operator delete((void *)v55);
      if (SHIBYTE(v54) < 0)
        goto LABEL_88;
    }
    else if (SHIBYTE(v54) < 0)
    {
      goto LABEL_88;
    }
LABEL_54:
    if (SHIBYTE(v52) < 0)
      goto LABEL_89;
LABEL_55:
    if (SHIBYTE(v50) < 0)
      goto LABEL_90;
LABEL_56:
    if (SHIBYTE(v47) < 0)
      goto LABEL_91;
LABEL_57:
    if (SHIBYTE(v45) < 0)
      goto LABEL_92;
LABEL_58:
    v36 = (unint64_t)off_24C9F1C88;
    if (SHIBYTE(v42) < 0)
      goto LABEL_93;
    goto LABEL_59;
  }
  *(_OWORD *)v14 = v55;
  *(_QWORD *)(v13 + 48) = v56;
  v37[0] = v13;
  if ((SHIBYTE(v54) & 0x80000000) == 0)
    goto LABEL_54;
LABEL_88:
  operator delete(*(void **)&v53[8]);
  if ((SHIBYTE(v52) & 0x80000000) == 0)
    goto LABEL_55;
LABEL_89:
  operator delete((void *)v51);
  if ((SHIBYTE(v50) & 0x80000000) == 0)
    goto LABEL_56;
LABEL_90:
  operator delete((void *)v49);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
    goto LABEL_57;
LABEL_91:
  operator delete((void *)v46);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
    goto LABEL_58;
LABEL_92:
  operator delete((void *)v44);
  v36 = (unint64_t)off_24C9F1C88;
  if (SHIBYTE(v42) < 0)
  {
LABEL_93:
    operator delete((void *)v41);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_94;
  }
LABEL_59:
  if ((SHIBYTE(v40) & 0x80000000) == 0)
    goto LABEL_60;
LABEL_94:
  operator delete((void *)v39);
LABEL_60:
  sub_20EA9FD18((uint64_t *)(v10 + 120), (uint64_t *)&v36);
  if (v36)
  {
    if ((v36 & 1) == 0)
    {
      v15 = *(void (**)(uint64_t, _WORD *, int))(v36 & 0xFFFFFFFFFFFFFFFELL);
      if (v15)
        v15((uint64_t)v37, v37, 2);
    }
    v36 = 0;
  }
  if (SHIBYTE(v35) < 0)
  {
    operator delete((void *)v34);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      goto LABEL_67;
  }
  else if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    goto LABEL_67;
  }
  operator delete((void *)v32);
LABEL_67:
  v48 = (_QWORD *)*a2;
  v16 = v48;
  v17 = (_QWORD *)operator new();
  *v17 = &off_24C9C28E8;
  v17[1] = v16;
  v18 = *v11;
  *v11 = (uint64_t)v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_20EA9FE98((double *)&v48);
  v19 = (void **)(v10 + 168);
  if (*(char *)(v10 + 191) < 0)
  {
    operator delete(*v19);
    *(_OWORD *)v19 = *(_OWORD *)v53;
    *(_QWORD *)(v10 + 184) = *(_QWORD *)&v53[16];
    if ((SHIBYTE(v26) & 0x80000000) == 0)
    {
LABEL_71:
      if ((SHIBYTE(v24) & 0x80000000) == 0)
        goto LABEL_72;
      goto LABEL_84;
    }
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v53;
    *(_QWORD *)(v10 + 184) = *(_QWORD *)&v53[16];
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      goto LABEL_71;
  }
  operator delete((void *)v25);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_72:
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      goto LABEL_73;
LABEL_85:
    operator delete((void *)v29);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
      goto LABEL_74;
    goto LABEL_86;
  }
LABEL_84:
  operator delete(v23[0]);
  if (SHIBYTE(v30) < 0)
    goto LABEL_85;
LABEL_73:
  if ((SHIBYTE(v28) & 0x80000000) == 0)
    goto LABEL_74;
LABEL_86:
  operator delete(__dst[0]);
LABEL_74:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  sub_20E8B2F9C(&v21, a4, v10, (char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20EF561E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  uint64_t v66;
  void **v67;
  uint64_t v68;

  if (*(char *)(v66 + 31) < 0)
    operator delete(*v67);
  MEMORY[0x212BC6398](v66, 0x1092C403F48558ALL);
  if (*(char *)(v68 - 105) < 0)
    operator delete(*(void **)(v68 - 128));
  if (*(char *)(v68 - 129) < 0)
  {
    operator delete(*(void **)(v68 - 152));
    if ((*(char *)(v68 - 161) & 0x80000000) == 0)
    {
LABEL_9:
      if ((*(char *)(v68 - 185) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_18;
    }
  }
  else if ((*(char *)(v68 - 161) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(v68 - 184));
  if ((*(char *)(v68 - 185) & 0x80000000) == 0)
  {
LABEL_10:
    if ((a66 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v68 - 208));
  if ((a66 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a60 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a61);
  if ((a60 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a53 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a55);
  if ((a53 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a47 & 0x80000000) == 0)
    {
LABEL_15:
      sub_20EDA923C((uint64_t)&a30);
      sub_20E8C8C8C((uint64_t)&a18);
      sub_20E8C8C8C((uint64_t)&a24);
      if (a17 < 0)
      {
        operator delete(a12);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
LABEL_14:
    operator delete(__p);
    goto LABEL_15;
  }
LABEL_21:
  operator delete(a48);
  if ((a47 & 0x80000000) == 0)
    goto LABEL_15;
  goto LABEL_14;
}

uint64_t sub_20EF56400(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      v6 = operator new();
      v7 = v6;
      *(_QWORD *)v6 = *(_QWORD *)v5;
      if (*(char *)(v5 + 31) < 0)
      {
        sub_20E860C04((_BYTE *)(v6 + 8), *(void **)(v5 + 8), *(_QWORD *)(v5 + 16));
      }
      else
      {
        v8 = *(_OWORD *)(v5 + 8);
        *(_QWORD *)(v6 + 24) = *(_QWORD *)(v5 + 24);
        *(_OWORD *)(v6 + 8) = v8;
      }
      result = v7 + 32;
      if (*(char *)(v5 + 55) < 0)
      {
        result = (uint64_t)sub_20E860C04((_BYTE *)result, *(void **)(v5 + 32), *(_QWORD *)(v5 + 40));
      }
      else
      {
        v10 = *(_OWORD *)(v5 + 32);
        *(_QWORD *)(v7 + 48) = *(_QWORD *)(v5 + 48);
        *(_OWORD *)result = v10;
      }
      *(_QWORD *)a2 = v7;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v9 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        if (*(char *)(v9 + 55) < 0)
          operator delete(*(void **)(v9 + 32));
        if (*(char *)(v9 + 31) < 0)
          operator delete(*(void **)(v9 + 8));
        result = MEMORY[0x212BC6398](v9, 0x1092C403F48558ALL);
      }
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueIddZNS2_23DeprecatedPro"
                                        "gramOptionIddEEPN5boost15program_options11typed_valueIT_cEERT0_RKNSt3__112basic_"
                                        "stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEESL_EUlvE_EESA_SC_T1_EUlRKdE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueIddZNS2_23DeprecatedProgramOptionIddEEPN5boost15program_options11typed_valueIT_cEERT0_RKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEESL_EUlvE_EESA_SC_T1_EUlRKdE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_QWORD *)a2 = &unk_24C9F1C98;
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_20EF565C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  MEMORY[0x212BC6398](v1, 0x1092C403F48558ALL);
  _Unwind_Resume(a1);
}

void sub_20EF56604(_QWORD *a1, _QWORD *a2)
{
  _QWORD **v2;
  const char *v3;
  int v4;
  unint64_t v5;
  unint64_t v7;
  char *v8;
  const char **v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  char *v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  _QWORD **v19;
  const char *v20;
  char *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  std::__shared_weak_count_vtbl *v44;
  char *v45;
  char *shared_owners;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  int v65;
  const char *v66;
  std::__shared_weak_count *v67;
  const char *v68;
  uint64_t v69;
  const char **v70;
  const char *v71;
  _QWORD v72[3];
  int v73;
  const char *v74;
  int v75;
  const char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  _BYTE object[24];
  unint64_t v81;
  void *__p[2];
  size_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD **)*a1;
  v3 = (const char *)(*a1 + 8);
  **(_QWORD **)*a1 = *a2;
  sub_20EF51E00(&v79);
  if (**(int **)(v79 + 56) > 4)
    return;
  v4 = *(unsigned __int8 *)(v79 + 72);
  v5 = sub_20E8C31DC(v79, "OSLogSurrogateAppender", 1, 0);
  if (!v4 && v5 == 0)
    return;
  v7 = v5;
  v72[0] = &v79;
  v72[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v72[2] = std::chrono::system_clock::now().__d_.__rep_;
  v73 = 4;
  v74 = "unknown file";
  v75 = 71;
  v77 = 0;
  v78 = 0;
  v76 = "unknown function";
  v8 = (char *)v3;
  if (*((char *)v2 + 31) < 0)
  {
    v8 = *(char **)v3;
    v9 = (const char **)(v2 + 4);
    v10 = (const char *)(v2 + 4);
    if ((*((char *)v2 + 55) & 0x80000000) == 0)
      goto LABEL_8;
  }
  else
  {
    v9 = (const char **)(v2 + 4);
    v10 = (const char *)(v2 + 4);
    if ((*((char *)v2 + 55) & 0x80000000) == 0)
      goto LABEL_8;
  }
  v10 = *v9;
LABEL_8:
  v70 = v9;
  v71 = v10;
  v11 = *(_QWORD *)v72[0];
  v12 = (const char *)(*(_QWORD *)v72[0] + 16);
  v68 = v12;
  v69 = *(_QWORD *)v72[0];
  if (*(char *)(*(_QWORD *)v72[0] + 39) < 0)
  {
    v12 = *(const char **)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
  }
  else
  {
    v13 = *(unsigned __int8 *)(*(_QWORD *)v72[0] + 39);
  }
  v14 = v8;
  v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v81)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v16 = byte_254A4A4F8;
  else
    v16 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v17 = byte_254A4A4F8[23];
  else
    v17 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v16, v12);
  v18 = &object[8];
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v17 >= 0x17)
  {
    v66 = v3;
    v19 = v2;
    v20 = v12;
    v21 = v14;
    v22 = v7;
    v23 = v4;
    v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v24 = v17 | 7;
    v25 = v24 + 1;
    v18 = operator new(v24 + 1);
    *(_QWORD *)&object[16] = v17;
    v81 = v25 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v18;
    v4 = v23;
    v7 = v22;
    v14 = v21;
    v12 = v20;
    v2 = v19;
    v3 = v66;
    goto LABEL_27;
  }
  HIBYTE(v81) = v17;
  if (v17)
LABEL_27:
    memmove(v18, v16, v17);
  v18[v17] = 0;
  LOBYTE(__p[0]) = 1;
  v26 = &__p[1];
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 >= 0x17)
  {
    v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v28 = v13 | 7;
    v29 = v28 + 1;
    v26 = (void **)operator new(v28 + 1);
    v83 = v13;
    v84 = v29 | 0x8000000000000000;
    __p[1] = v26;
  }
  else
  {
    HIBYTE(v84) = v13;
    if (!v13)
    {
      LOBYTE(__p[1]) = 0;
      v85 = 1;
      v27 = *(NSObject **)object;
      if ((SHIBYTE(v84) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_38;
    }
  }
  memmove(v26, v12, v13);
  *((_BYTE *)v26 + v13) = 0;
  v85 = 1;
  v27 = *(NSObject **)object;
  if ((SHIBYTE(v84) & 0x80000000) == 0)
  {
LABEL_32:
    if (!LOBYTE(__p[0]))
      goto LABEL_41;
LABEL_39:
    if (SHIBYTE(v81) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_41;
  }
LABEL_38:
  operator delete(__p[1]);
  if (LOBYTE(__p[0]))
    goto LABEL_39;
LABEL_41:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v7 && *(_QWORD *)(v7 + 24))
  {
    v30 = _os_log_pack_size();
    v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
    v32 = (std::__shared_weak_count *)operator new();
    v32->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = v31;
    v67 = v32;
    sub_20EF51EF4((uint64_t)object, v14, &v71);
    v65 = v4;
    v34 = (char *)operator new(0x50uLL);
    v35 = (std::__shared_weak_count *)v34;
    *((_QWORD *)v34 + 1) = 0;
    v36 = (unint64_t *)(v34 + 8);
    *((_QWORD *)v34 + 2) = 0;
    *(_QWORD *)v34 = &off_24C9EA090;
    *((_QWORD *)v34 + 3) = off_24C9EA0E0;
    v64 = v34 + 24;
    v37 = v34 + 32;
    *((_OWORD *)v34 + 2) = *(_OWORD *)&object[8];
    *((_QWORD *)v34 + 6) = v81;
    v38 = v34 + 56;
    *(_OWORD *)(v34 + 56) = *(_OWORD *)__p;
    *((_QWORD *)v34 + 9) = v83;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
    do
      v40 = __ldxr(v36);
    while (__stxr(v40 + 1, v36));
    do
      v41 = __ldaxr(v36);
    while (__stlxr(v41 - 1, v36));
    if (!v41)
    {
      v42 = v34 + 56;
      (*(void (**)(char *))(*(_QWORD *)v34 + 16))(v34);
      std::__shared_weak_count::__release_weak(v35);
      v38 = v42;
    }
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    v44 = v31;
    if (!v43)
    {
      v45 = v38;
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      v38 = v45;
    }
    if (SHIBYTE(v35[2].__vftable) >= 0)
      shared_owners = v37;
    else
      shared_owners = (char *)v35[1].__shared_owners_;
    if (SHIBYTE(v35[3].__vftable) >= 0)
      v47 = v38;
    else
      v47 = (char *)v35[2].__shared_owners_;
    v48 = _os_log_pack_fill();
    *(_DWORD *)v48 = 136315394;
    *(_QWORD *)(v48 + 4) = shared_owners;
    *(_WORD *)(v48 + 12) = 2080;
    *(_QWORD *)(v48 + 14) = v47;
    v49 = operator new();
    v50 = *(unsigned __int8 *)(v69 + 39);
    v51 = v68;
    if ((v50 & 0x80u) != 0)
    {
      v51 = *(const char **)(v69 + 16);
      v50 = *(_QWORD *)(v69 + 24);
    }
    *(_QWORD *)v49 = v44;
    *(_QWORD *)(v49 + 8) = v44;
    *(_QWORD *)(v49 + 16) = v67;
    *(_QWORD *)(v49 + 24) = v64;
    *(_QWORD *)(v49 + 32) = v35;
    *(_QWORD *)(v49 + 40) = v51;
    *(_QWORD *)(v49 + 48) = v50;
    *(_BYTE *)(v49 + 56) = 16;
    *(_QWORD *)object = v49;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), object);
    v52 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    v4 = v65;
    v53 = (const char *)v70;
    if (v52)
    {
      v54 = *(std::__shared_weak_count **)(v52 + 32);
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = *(std::__shared_weak_count **)(v52 + 16);
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    *(_DWORD *)object = 136315394;
    *(_QWORD *)&object[4] = v14;
    *(_WORD *)&object[12] = 2080;
    *(_QWORD *)&object[14] = v71;
    v60 = (void *)_os_log_send_and_compose_impl();
    v53 = (const char *)v70;
    if (v60)
      free(v60);
  }
  if (v4)
  {
    if (*((char *)v2 + 31) < 0)
      v3 = *(const char **)v3;
    if (*((char *)v2 + 55) < 0)
      v53 = *(const char **)v53;
    sub_20E8C003C((uint64_t)v72, "[DEPRECATED] Change '%s' to '%s'", v3, v53);
    sub_20E863570((uint64_t)v72);
  }
  sub_20E863570((uint64_t)v72);
  v61 = v78;
  if (v78)
  {
    v62 = (unint64_t *)&v78->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_20EF56DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,void *object,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a19);
  v42 = a27;
  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EF56FC4(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      v6 = operator new();
      v7 = v6;
      *(_QWORD *)v6 = *(_QWORD *)v5;
      if (*(char *)(v5 + 31) < 0)
      {
        sub_20E860C04((_BYTE *)(v6 + 8), *(void **)(v5 + 8), *(_QWORD *)(v5 + 16));
      }
      else
      {
        v8 = *(_OWORD *)(v5 + 8);
        *(_QWORD *)(v6 + 24) = *(_QWORD *)(v5 + 24);
        *(_OWORD *)(v6 + 8) = v8;
      }
      result = v7 + 32;
      if (*(char *)(v5 + 55) < 0)
      {
        result = (uint64_t)sub_20E860C04((_BYTE *)result, *(void **)(v5 + 32), *(_QWORD *)(v5 + 40));
      }
      else
      {
        v10 = *(_OWORD *)(v5 + 32);
        *(_QWORD *)(v7 + 48) = *(_QWORD *)(v5 + 48);
        *(_OWORD *)result = v10;
      }
      *(_QWORD *)a2 = v7;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v9 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        if (*(char *)(v9 + 55) < 0)
          operator delete(*(void **)(v9 + 32));
        if (*(char *)(v9 + 31) < 0)
          operator delete(*(void **)(v9 + 8));
        result = MEMORY[0x212BC6398](v9, 0x1012C4034D1B82FLL);
      }
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueImmZNS2_23DeprecatedPro"
                                        "gramOptionImmEEPN5boost15program_options11typed_valueIT_cEERT0_RKNSt3__112basic_"
                                        "stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEESL_EUlvE_EESA_SC_T1_EUlRKmE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueImmZNS2_23DeprecatedProgramOptionImmEEPN5boost15program_options11typed_valueIT_cEERT0_RKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEESL_EUlvE_EESA_SC_T1_EUlRKmE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_QWORD *)a2 = &unk_24C9F1CB8;
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_20EF5718C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  MEMORY[0x212BC6398](v1, 0x1012C4034D1B82FLL);
  _Unwind_Resume(a1);
}

void sub_20EF571C8(_QWORD *a1, _QWORD *a2)
{
  _QWORD **v2;
  const char *v3;
  int v4;
  unint64_t v5;
  unint64_t v7;
  char *v8;
  const char **v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  char *v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  _QWORD **v19;
  const char *v20;
  char *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  std::__shared_weak_count_vtbl *v44;
  char *v45;
  char *shared_owners;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  int v65;
  const char *v66;
  std::__shared_weak_count *v67;
  const char *v68;
  uint64_t v69;
  const char **v70;
  const char *v71;
  _QWORD v72[3];
  int v73;
  const char *v74;
  int v75;
  const char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  _BYTE object[24];
  unint64_t v81;
  void *__p[2];
  size_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD **)*a1;
  v3 = (const char *)(*a1 + 8);
  **(_QWORD **)*a1 = *a2;
  sub_20EF51E00(&v79);
  if (**(int **)(v79 + 56) > 4)
    return;
  v4 = *(unsigned __int8 *)(v79 + 72);
  v5 = sub_20E8C31DC(v79, "OSLogSurrogateAppender", 1, 0);
  if (!v4 && v5 == 0)
    return;
  v7 = v5;
  v72[0] = &v79;
  v72[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v72[2] = std::chrono::system_clock::now().__d_.__rep_;
  v73 = 4;
  v74 = "unknown file";
  v75 = 71;
  v77 = 0;
  v78 = 0;
  v76 = "unknown function";
  v8 = (char *)v3;
  if (*((char *)v2 + 31) < 0)
  {
    v8 = *(char **)v3;
    v9 = (const char **)(v2 + 4);
    v10 = (const char *)(v2 + 4);
    if ((*((char *)v2 + 55) & 0x80000000) == 0)
      goto LABEL_8;
  }
  else
  {
    v9 = (const char **)(v2 + 4);
    v10 = (const char *)(v2 + 4);
    if ((*((char *)v2 + 55) & 0x80000000) == 0)
      goto LABEL_8;
  }
  v10 = *v9;
LABEL_8:
  v70 = v9;
  v71 = v10;
  v11 = *(_QWORD *)v72[0];
  v12 = (const char *)(*(_QWORD *)v72[0] + 16);
  v68 = v12;
  v69 = *(_QWORD *)v72[0];
  if (*(char *)(*(_QWORD *)v72[0] + 39) < 0)
  {
    v12 = *(const char **)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
  }
  else
  {
    v13 = *(unsigned __int8 *)(*(_QWORD *)v72[0] + 39);
  }
  v14 = v8;
  v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v81)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v16 = byte_254A4A4F8;
  else
    v16 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v17 = byte_254A4A4F8[23];
  else
    v17 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v16, v12);
  v18 = &object[8];
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v17 >= 0x17)
  {
    v66 = v3;
    v19 = v2;
    v20 = v12;
    v21 = v14;
    v22 = v7;
    v23 = v4;
    v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v24 = v17 | 7;
    v25 = v24 + 1;
    v18 = operator new(v24 + 1);
    *(_QWORD *)&object[16] = v17;
    v81 = v25 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v18;
    v4 = v23;
    v7 = v22;
    v14 = v21;
    v12 = v20;
    v2 = v19;
    v3 = v66;
    goto LABEL_27;
  }
  HIBYTE(v81) = v17;
  if (v17)
LABEL_27:
    memmove(v18, v16, v17);
  v18[v17] = 0;
  LOBYTE(__p[0]) = 1;
  v26 = &__p[1];
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 >= 0x17)
  {
    v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v28 = v13 | 7;
    v29 = v28 + 1;
    v26 = (void **)operator new(v28 + 1);
    v83 = v13;
    v84 = v29 | 0x8000000000000000;
    __p[1] = v26;
  }
  else
  {
    HIBYTE(v84) = v13;
    if (!v13)
    {
      LOBYTE(__p[1]) = 0;
      v85 = 1;
      v27 = *(NSObject **)object;
      if ((SHIBYTE(v84) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_38;
    }
  }
  memmove(v26, v12, v13);
  *((_BYTE *)v26 + v13) = 0;
  v85 = 1;
  v27 = *(NSObject **)object;
  if ((SHIBYTE(v84) & 0x80000000) == 0)
  {
LABEL_32:
    if (!LOBYTE(__p[0]))
      goto LABEL_41;
LABEL_39:
    if (SHIBYTE(v81) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_41;
  }
LABEL_38:
  operator delete(__p[1]);
  if (LOBYTE(__p[0]))
    goto LABEL_39;
LABEL_41:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v7 && *(_QWORD *)(v7 + 24))
  {
    v30 = _os_log_pack_size();
    v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
    v32 = (std::__shared_weak_count *)operator new();
    v32->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = v31;
    v67 = v32;
    sub_20EF51EF4((uint64_t)object, v14, &v71);
    v65 = v4;
    v34 = (char *)operator new(0x50uLL);
    v35 = (std::__shared_weak_count *)v34;
    *((_QWORD *)v34 + 1) = 0;
    v36 = (unint64_t *)(v34 + 8);
    *((_QWORD *)v34 + 2) = 0;
    *(_QWORD *)v34 = &off_24C9EA090;
    *((_QWORD *)v34 + 3) = off_24C9EA0E0;
    v64 = v34 + 24;
    v37 = v34 + 32;
    *((_OWORD *)v34 + 2) = *(_OWORD *)&object[8];
    *((_QWORD *)v34 + 6) = v81;
    v38 = v34 + 56;
    *(_OWORD *)(v34 + 56) = *(_OWORD *)__p;
    *((_QWORD *)v34 + 9) = v83;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
    do
      v40 = __ldxr(v36);
    while (__stxr(v40 + 1, v36));
    do
      v41 = __ldaxr(v36);
    while (__stlxr(v41 - 1, v36));
    if (!v41)
    {
      v42 = v34 + 56;
      (*(void (**)(char *))(*(_QWORD *)v34 + 16))(v34);
      std::__shared_weak_count::__release_weak(v35);
      v38 = v42;
    }
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    v44 = v31;
    if (!v43)
    {
      v45 = v38;
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      v38 = v45;
    }
    if (SHIBYTE(v35[2].__vftable) >= 0)
      shared_owners = v37;
    else
      shared_owners = (char *)v35[1].__shared_owners_;
    if (SHIBYTE(v35[3].__vftable) >= 0)
      v47 = v38;
    else
      v47 = (char *)v35[2].__shared_owners_;
    v48 = _os_log_pack_fill();
    *(_DWORD *)v48 = 136315394;
    *(_QWORD *)(v48 + 4) = shared_owners;
    *(_WORD *)(v48 + 12) = 2080;
    *(_QWORD *)(v48 + 14) = v47;
    v49 = operator new();
    v50 = *(unsigned __int8 *)(v69 + 39);
    v51 = v68;
    if ((v50 & 0x80u) != 0)
    {
      v51 = *(const char **)(v69 + 16);
      v50 = *(_QWORD *)(v69 + 24);
    }
    *(_QWORD *)v49 = v44;
    *(_QWORD *)(v49 + 8) = v44;
    *(_QWORD *)(v49 + 16) = v67;
    *(_QWORD *)(v49 + 24) = v64;
    *(_QWORD *)(v49 + 32) = v35;
    *(_QWORD *)(v49 + 40) = v51;
    *(_QWORD *)(v49 + 48) = v50;
    *(_BYTE *)(v49 + 56) = 16;
    *(_QWORD *)object = v49;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), object);
    v52 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    v4 = v65;
    v53 = (const char *)v70;
    if (v52)
    {
      v54 = *(std::__shared_weak_count **)(v52 + 32);
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = *(std::__shared_weak_count **)(v52 + 16);
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    *(_DWORD *)object = 136315394;
    *(_QWORD *)&object[4] = v14;
    *(_WORD *)&object[12] = 2080;
    *(_QWORD *)&object[14] = v71;
    v60 = (void *)_os_log_send_and_compose_impl();
    v53 = (const char *)v70;
    if (v60)
      free(v60);
  }
  if (v4)
  {
    if (*((char *)v2 + 31) < 0)
      v3 = *(const char **)v3;
    if (*((char *)v2 + 55) < 0)
      v53 = *(const char **)v53;
    sub_20E8C003C((uint64_t)v72, "[DEPRECATED] Change '%s' to '%s'", v3, v53);
    sub_20E863570((uint64_t)v72);
  }
  sub_20E863570((uint64_t)v72);
  v61 = v78;
  if (v78)
  {
    v62 = (unint64_t *)&v78->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_20EF57968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,void *object,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a19);
  v42 = a27;
  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EF57B88(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      v6 = operator new();
      v7 = v6;
      *(_QWORD *)v6 = *(_QWORD *)v5;
      if (*(char *)(v5 + 31) < 0)
      {
        sub_20E860C04((_BYTE *)(v6 + 8), *(void **)(v5 + 8), *(_QWORD *)(v5 + 16));
      }
      else
      {
        v8 = *(_OWORD *)(v5 + 8);
        *(_QWORD *)(v6 + 24) = *(_QWORD *)(v5 + 24);
        *(_OWORD *)(v6 + 8) = v8;
      }
      result = v7 + 32;
      if (*(char *)(v5 + 55) < 0)
      {
        result = (uint64_t)sub_20E860C04((_BYTE *)result, *(void **)(v5 + 32), *(_QWORD *)(v5 + 40));
      }
      else
      {
        v10 = *(_OWORD *)(v5 + 32);
        *(_QWORD *)(v7 + 48) = *(_QWORD *)(v5 + 48);
        *(_OWORD *)result = v10;
      }
      *(_QWORD *)a2 = v7;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v9 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        if (*(char *)(v9 + 55) < 0)
          operator delete(*(void **)(v9 + 32));
        if (*(char *)(v9 + 31) < 0)
          operator delete(*(void **)(v9 + 8));
        result = MEMORY[0x212BC6398](v9, 0x1012C4034D1B82FLL);
      }
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueIjjZNS2_23DeprecatedPro"
                                        "gramOptionIjjEEPN5boost15program_options11typed_valueIT_cEERT0_RKNSt3__112basic_"
                                        "stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEESL_EUlvE_EESA_SC_T1_EUlRKjE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueIjjZNS2_23DeprecatedProgramOptionIjjEEPN5boost15program_options11typed_valueIT_cEERT0_RKNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEESL_EUlvE_EESA_SC_T1_EUlRKjE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_QWORD *)a2 = &unk_24C9F1CD8;
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_20EF57D50(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  MEMORY[0x212BC6398](v1, 0x1012C4034D1B82FLL);
  _Unwind_Resume(a1);
}

void sub_20EF57D8C(_QWORD *a1, _DWORD *a2)
{
  _DWORD **v2;
  const char *v3;
  int v4;
  unint64_t v5;
  unint64_t v7;
  char *v8;
  const char **v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  char *v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  _DWORD **v19;
  const char *v20;
  char *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  std::__shared_weak_count_vtbl *v44;
  char *v45;
  char *shared_owners;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  int v65;
  const char *v66;
  std::__shared_weak_count *v67;
  const char *v68;
  uint64_t v69;
  const char **v70;
  const char *v71;
  _QWORD v72[3];
  int v73;
  const char *v74;
  int v75;
  const char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  _BYTE object[24];
  unint64_t v81;
  void *__p[2];
  size_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v2 = (_DWORD **)*a1;
  v3 = (const char *)(*a1 + 8);
  **(_DWORD **)*a1 = *a2;
  sub_20EF51E00(&v79);
  if (**(int **)(v79 + 56) > 4)
    return;
  v4 = *(unsigned __int8 *)(v79 + 72);
  v5 = sub_20E8C31DC(v79, "OSLogSurrogateAppender", 1, 0);
  if (!v4 && v5 == 0)
    return;
  v7 = v5;
  v72[0] = &v79;
  v72[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v72[2] = std::chrono::system_clock::now().__d_.__rep_;
  v73 = 4;
  v74 = "unknown file";
  v75 = 71;
  v77 = 0;
  v78 = 0;
  v76 = "unknown function";
  v8 = (char *)v3;
  if (*((char *)v2 + 31) < 0)
  {
    v8 = *(char **)v3;
    v9 = (const char **)(v2 + 4);
    v10 = (const char *)(v2 + 4);
    if ((*((char *)v2 + 55) & 0x80000000) == 0)
      goto LABEL_8;
  }
  else
  {
    v9 = (const char **)(v2 + 4);
    v10 = (const char *)(v2 + 4);
    if ((*((char *)v2 + 55) & 0x80000000) == 0)
      goto LABEL_8;
  }
  v10 = *v9;
LABEL_8:
  v70 = v9;
  v71 = v10;
  v11 = *(_QWORD *)v72[0];
  v12 = (const char *)(*(_QWORD *)v72[0] + 16);
  v68 = v12;
  v69 = *(_QWORD *)v72[0];
  if (*(char *)(*(_QWORD *)v72[0] + 39) < 0)
  {
    v12 = *(const char **)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
  }
  else
  {
    v13 = *(unsigned __int8 *)(*(_QWORD *)v72[0] + 39);
  }
  v14 = v8;
  v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    if ((_BYTE)v81)
    {
      *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
      *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
    }
    else
    {
      byte_254A4A4F8[23] = 14;
      strcpy(byte_254A4A4F8, "com.apple.cv3d");
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v16 = byte_254A4A4F8;
  else
    v16 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v17 = byte_254A4A4F8[23];
  else
    v17 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v16, v12);
  v18 = &object[8];
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v17 >= 0x17)
  {
    v66 = v3;
    v19 = v2;
    v20 = v12;
    v21 = v14;
    v22 = v7;
    v23 = v4;
    v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v24 = v17 | 7;
    v25 = v24 + 1;
    v18 = operator new(v24 + 1);
    *(_QWORD *)&object[16] = v17;
    v81 = v25 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v18;
    v4 = v23;
    v7 = v22;
    v14 = v21;
    v12 = v20;
    v2 = v19;
    v3 = v66;
    goto LABEL_27;
  }
  HIBYTE(v81) = v17;
  if (v17)
LABEL_27:
    memmove(v18, v16, v17);
  v18[v17] = 0;
  LOBYTE(__p[0]) = 1;
  v26 = &__p[1];
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 >= 0x17)
  {
    v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v28 = v13 | 7;
    v29 = v28 + 1;
    v26 = (void **)operator new(v28 + 1);
    v83 = v13;
    v84 = v29 | 0x8000000000000000;
    __p[1] = v26;
  }
  else
  {
    HIBYTE(v84) = v13;
    if (!v13)
    {
      LOBYTE(__p[1]) = 0;
      v85 = 1;
      v27 = *(NSObject **)object;
      if ((SHIBYTE(v84) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_38;
    }
  }
  memmove(v26, v12, v13);
  *((_BYTE *)v26 + v13) = 0;
  v85 = 1;
  v27 = *(NSObject **)object;
  if ((SHIBYTE(v84) & 0x80000000) == 0)
  {
LABEL_32:
    if (!LOBYTE(__p[0]))
      goto LABEL_41;
LABEL_39:
    if (SHIBYTE(v81) < 0)
      operator delete(*(void **)&object[8]);
    goto LABEL_41;
  }
LABEL_38:
  operator delete(__p[1]);
  if (LOBYTE(__p[0]))
    goto LABEL_39;
LABEL_41:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v7 && *(_QWORD *)(v7 + 24))
  {
    v30 = _os_log_pack_size();
    v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
    v32 = (std::__shared_weak_count *)operator new();
    v32->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = v31;
    v67 = v32;
    sub_20EF51EF4((uint64_t)object, v14, &v71);
    v65 = v4;
    v34 = (char *)operator new(0x50uLL);
    v35 = (std::__shared_weak_count *)v34;
    *((_QWORD *)v34 + 1) = 0;
    v36 = (unint64_t *)(v34 + 8);
    *((_QWORD *)v34 + 2) = 0;
    *(_QWORD *)v34 = &off_24C9EA090;
    *((_QWORD *)v34 + 3) = off_24C9EA0E0;
    v64 = v34 + 24;
    v37 = v34 + 32;
    *((_OWORD *)v34 + 2) = *(_OWORD *)&object[8];
    *((_QWORD *)v34 + 6) = v81;
    v38 = v34 + 56;
    *(_OWORD *)(v34 + 56) = *(_OWORD *)__p;
    *((_QWORD *)v34 + 9) = v83;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
    do
      v40 = __ldxr(v36);
    while (__stxr(v40 + 1, v36));
    do
      v41 = __ldaxr(v36);
    while (__stlxr(v41 - 1, v36));
    if (!v41)
    {
      v42 = v34 + 56;
      (*(void (**)(char *))(*(_QWORD *)v34 + 16))(v34);
      std::__shared_weak_count::__release_weak(v35);
      v38 = v42;
    }
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    v44 = v31;
    if (!v43)
    {
      v45 = v38;
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      v38 = v45;
    }
    if (SHIBYTE(v35[2].__vftable) >= 0)
      shared_owners = v37;
    else
      shared_owners = (char *)v35[1].__shared_owners_;
    if (SHIBYTE(v35[3].__vftable) >= 0)
      v47 = v38;
    else
      v47 = (char *)v35[2].__shared_owners_;
    v48 = _os_log_pack_fill();
    *(_DWORD *)v48 = 136315394;
    *(_QWORD *)(v48 + 4) = shared_owners;
    *(_WORD *)(v48 + 12) = 2080;
    *(_QWORD *)(v48 + 14) = v47;
    v49 = operator new();
    v50 = *(unsigned __int8 *)(v69 + 39);
    v51 = v68;
    if ((v50 & 0x80u) != 0)
    {
      v51 = *(const char **)(v69 + 16);
      v50 = *(_QWORD *)(v69 + 24);
    }
    *(_QWORD *)v49 = v44;
    *(_QWORD *)(v49 + 8) = v44;
    *(_QWORD *)(v49 + 16) = v67;
    *(_QWORD *)(v49 + 24) = v64;
    *(_QWORD *)(v49 + 32) = v35;
    *(_QWORD *)(v49 + 40) = v51;
    *(_QWORD *)(v49 + 48) = v50;
    *(_BYTE *)(v49 + 56) = 16;
    *(_QWORD *)object = v49;
    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), object);
    v52 = *(_QWORD *)object;
    *(_QWORD *)object = 0;
    v4 = v65;
    v53 = (const char *)v70;
    if (v52)
    {
      v54 = *(std::__shared_weak_count **)(v52 + 32);
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = *(std::__shared_weak_count **)(v52 + 16);
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
    *(_DWORD *)object = 136315394;
    *(_QWORD *)&object[4] = v14;
    *(_WORD *)&object[12] = 2080;
    *(_QWORD *)&object[14] = v71;
    v60 = (void *)_os_log_send_and_compose_impl();
    v53 = (const char *)v70;
    if (v60)
      free(v60);
  }
  if (v4)
  {
    if (*((char *)v2 + 31) < 0)
      v3 = *(const char **)v3;
    if (*((char *)v2 + 55) < 0)
      v53 = *(const char **)v53;
    sub_20E8C003C((uint64_t)v72, "[DEPRECATED] Change '%s' to '%s'", v3, v53);
    sub_20E863570((uint64_t)v72);
  }
  sub_20E863570((uint64_t)v72);
  v61 = v78;
  if (v78)
  {
    v62 = (unint64_t *)&v78->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_20EF5852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,void *object,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a19);
  v42 = a27;
  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EF5874C(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F1CF8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueINSt3__112basic_stringIcN"
                                      "S4_11char_traitsIcEENS4_9allocatorIcEEEENS4_4__fs10filesystem4pathEKNS2_3$_0EEEPN5"
                                      "boost15program_options11typed_valueIT_cEERT0_T1_EUlRKSA_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io12_GLOBAL__N_118ProgramOptionValueINSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS4_4__fs10filesystem4pathEKNS2_3$_0EEEPN5boost15program_options11typed_valueIT_cEERT0_T1_EUlRKSA_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

__n128 sub_20EF587F8(uint64_t *a1, std::string *a2)
{
  std::string::size_type v3;
  std::string::size_type size;
  uint64_t v5;
  __n128 result;
  std::string v7;

  memset(&v7, 0, sizeof(v7));
  v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80u) != 0)
  {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    v3 = size;
  }
  sub_20E8A9678(&v7, a2, (std::string *)((char *)a2 + v3));
  v5 = *a1;
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  result = *(__n128 *)&v7.__r_.__value_.__l.__data_;
  *(_QWORD *)(v5 + 16) = *((_QWORD *)&v7.__r_.__value_.__l + 2);
  *(__n128 *)v5 = result;
  return result;
}

void sub_20EF5886C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF58888(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F1D18;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio10mapping_io28GetProgramOptionsDescriptionERNS1_6Config10KeyframeIOEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io28GetProgramOptionsDescriptionERNS1_6Config10KeyframeIOEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_DWORD **sub_20EF58934(_DWORD **result, _DWORD *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20EF58944(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F1D38;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIfEPN5boost15program_options11typed_val"
                                      "ueIT_cEERS3_EUlRKfE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIfEPN5boost15program_options11typed_valueIT_cEERS3_EUlRKfE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

float sub_20EF589F0(_DWORD **a1, float *a2)
{
  float result;

  result = *a2;
  **a1 = *(_DWORD *)a2;
  return result;
}

uint64_t sub_20EF58A00(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F1D58;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentINSt3__14__fs10filesystem4pathEEPN5boos"
                                      "t15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentINSt3__14__fs10filesystem4pathEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

void **sub_20EF58AAC(void ***a1, void **a2)
{
  void **result;
  __int128 v3;
  size_t v4;
  size_t v5;

  result = *a1;
  if (result != a2)
  {
    if (*((char *)result + 23) < 0)
    {
      v4 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v5 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        v5 = v4;
      }
      return sub_20E867CBC(result, a2, v5);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)sub_20E867BF8(result, *a2, (size_t)a2[1]);
    }
    else
    {
      v3 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)result = v3;
    }
  }
  return result;
}

uint64_t sub_20EF58B00(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string *v11;
  std::string::size_type size;
  std::string *p_p;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  __int128 v20;
  __int128 v21;
  int v22;
  char v23;
  std::string::size_type v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  __int128 v31;
  void *v32;
  std::string *v33;
  char *v34;
  std::string *v35;
  std::string *v36;
  uint64_t v37;
  _DWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v46;
  uint64_t v47;
  void *v48[2];
  uint64_t v49;
  _QWORD v50[2];
  void *v51;
  _DWORD *v52;
  uint64_t v53;
  void *v54[2];
  uint64_t v55;
  void *v56[2];
  char v57;
  std::string v58;
  std::string __p;
  void *v60[2];
  unsigned __int8 v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  std::string v67;
  uint64_t v68;
  std::__fs::filesystem::path v69;
  std::string __dst[4];
  _QWORD v71[3];
  _QWORD *v72;
  std::string v73;
  std::string *v74;
  uint64_t v75;

  v44 = result;
  v75 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2)
  {
    v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 32) - *(_QWORD *)(*(_QWORD *)a2 + 24)) >> 3);
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 733223428;
    kdebug_trace();
    v6 = *(_QWORD *)(*(_QWORD *)a2 + 32) - *(_QWORD *)(*(_QWORD *)a2 + 24);
    if (v6)
    {
      v7 = 0;
      v41 = a4;
      v42 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
      v8 = a2;
      v43 = a3;
      while (1)
      {
        v9 = (unint64_t *)(**(_QWORD **)v8 + 32 * v7);
        sub_20E9F6CBC(v9);
        sub_20EF72ED4((uint64_t)v9, (_QWORD *)(v44 + 16), &__p);
        memset(&v69, 0, sizeof(v69));
        v10 = v61;
        if ((v61 & 0x80u) == 0)
          v11 = (std::string *)v60;
        else
          v11 = (std::string *)v60[0];
        if ((v61 & 0x80u) != 0)
          v10 = (unint64_t)v60[1];
        sub_20E8A9678(&v69.__pn_, v11, (std::string *)((char *)v11 + v10));
        if (*(char *)(a3 + 23) < 0)
          sub_20E860C04(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
        else
          __dst[0] = *(std::string *)a3;
        sub_20E8A944C((uint64_t)__dst, &v69);
        sub_20EFA0B5C((uint64_t)__dst, a4, (uint64_t)&v58);
        if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst[0].__r_.__value_.__l.__data_);
          if ((SHIBYTE(v69.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_16;
        }
        else if ((SHIBYTE(v69.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_16;
        }
        operator delete(v69.__pn_.__r_.__value_.__l.__data_);
LABEL_16:
        memset(&v69, 0, sizeof(v69));
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __p.__r_.__value_.__l.__size_;
        sub_20E8A9678(&v69.__pn_, p_p, (std::string *)((char *)p_p + size));
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          sub_20E860C04(__dst, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
        else
          __dst[0] = v58;
        sub_20E8A944C((uint64_t)__dst, &v69);
        memset(&v73, 0, sizeof(v73));
        sub_20E8A9678(&v73, (std::string *)".debug", (std::string *)"");
        sub_20EF72794((uint64_t)__dst, (const char *)&v73, (uint64_t)v56);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v73.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_55:
            operator delete(__dst[0].__r_.__value_.__l.__data_);
            if ((SHIBYTE(v69.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_29;
            goto LABEL_56;
          }
        }
        else if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_55;
        }
        if ((SHIBYTE(v69.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_29;
LABEL_56:
        operator delete(v69.__pn_.__r_.__value_.__l.__data_);
LABEL_29:
        v71[0] = &off_24C9F1DB8;
        v71[1] = v44;
        v71[2] = a4;
        v72 = v71;
        sub_20EF5A50C((uint64_t)v71, *(_QWORD *)(*(_QWORD *)v8 + 24) + 24 * v7, (uint64_t)v56);
        memset(__dst, 0, 24);
        sub_20E8A9678(__dst, (std::string *)".keypoints", (std::string *)"");
        sub_20EF72794((uint64_t)v56, (const char *)__dst, (uint64_t)v54);
        if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst[0].__r_.__value_.__l.__data_);
        v14 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)v8 + 48) + 24 * v7);
        v15 = *v14;
        v16 = v14[1];
        memset(__dst, 0, 24);
        v17 = (char *)v16 - (char *)v15;
        if (v16 != v15)
        {
          if (v17 < 0)
            sub_20E92CED8();
          v18 = v17 >> 5;
          v19 = operator new(24 * (v17 >> 5));
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
          __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)v19;
          __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&v19[6 * v18];
          while (1)
          {
            while (1)
            {
              while (1)
              {
                *(_QWORD *)&v21 = *v15;
                *(_QWORD *)&v20 = v15[2];
                v22 = *((_DWORD *)v15 + 7);
                v23 = *((_BYTE *)v15 + 24);
                if ((unint64_t)v19 >= __dst[0].__r_.__value_.__r.__words[2])
                  break;
                *((_QWORD *)&v21 + 1) = v15[2];
                *(_OWORD *)v19 = v21;
                v19[4] = v22;
                *((_BYTE *)v19 + 20) = v23;
                v19 += 6;
                __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)v19;
                v15 += 4;
                if (v15 == v16)
                  goto LABEL_53;
              }
              v24 = __dst[0].__r_.__value_.__r.__words[0];
              v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v19 - __dst[0].__r_.__value_.__r.__words[0]) >> 3);
              v26 = v25 + 1;
              if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20E92CED8();
              if (0x5555555555555556
                 * ((uint64_t)(__dst[0].__r_.__value_.__r.__words[2] - __dst[0].__r_.__value_.__r.__words[0]) >> 3) > v26)
                v26 = 0x5555555555555556
                    * ((uint64_t)(__dst[0].__r_.__value_.__r.__words[2] - __dst[0].__r_.__value_.__r.__words[0]) >> 3);
              v27 = 0xAAAAAAAAAAAAAAABLL
                  * ((uint64_t)(__dst[0].__r_.__value_.__r.__words[2] - __dst[0].__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555
                  ? 0xAAAAAAAAAAAAAAALL
                  : v26;
              if (v27)
              {
                v46 = v20;
                v47 = *v15;
                if (v27 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E877A38();
                v28 = operator new(24 * v27);
                v20 = v46;
                *(_QWORD *)&v21 = v47;
              }
              else
              {
                v28 = 0;
              }
              v29 = (std::string::size_type)v28 + 24 * v25;
              *((_QWORD *)&v21 + 1) = v20;
              *(_OWORD *)v29 = v21;
              *(_DWORD *)(v29 + 16) = v22;
              *(_BYTE *)(v29 + 20) = v23;
              v30 = v29 + 24;
              if (v19 != (_DWORD *)v24)
                break;
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v28 + 24 * v25;
              __dst[0].__r_.__value_.__l.__size_ = v29 + 24;
              __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v28 + 24 * v27;
LABEL_52:
              operator delete(v19);
              v19 = (_DWORD *)v30;
              __dst[0].__r_.__value_.__l.__size_ = v30;
              v15 += 4;
              if (v15 == v16)
              {
LABEL_53:
                v32 = (void *)__dst[0].__r_.__value_.__r.__words[0];
                v17 = __dst[0].__r_.__value_.__r.__words[2];
                a4 = v41;
                goto LABEL_58;
              }
            }
            do
            {
              v31 = *(_OWORD *)(v19 - 6);
              *(_QWORD *)(v29 - 11) = *(_QWORD *)((char *)v19 - 11);
              *(_OWORD *)(v29 - 24) = v31;
              v29 -= 24;
              v19 -= 6;
            }
            while (v19 != (_DWORD *)v24);
            v19 = (_DWORD *)__dst[0].__r_.__value_.__r.__words[0];
            __dst[0].__r_.__value_.__r.__words[0] = v29;
            __dst[0].__r_.__value_.__l.__size_ = v30;
            __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v28 + 24 * v27;
            if (v19)
              goto LABEL_52;
            v19 = (_DWORD *)v30;
            __dst[0].__r_.__value_.__l.__size_ = v30;
            v15 += 4;
            if (v15 == v16)
              goto LABEL_53;
          }
        }
        v19 = 0;
        v32 = 0;
LABEL_58:
        v51 = v32;
        v52 = v19;
        v53 = v17;
        v50[0] = 0;
        v50[1] = 0;
        a3 = v43;
        v8 = a2;
        if (SHIBYTE(v55) < 0)
        {
          sub_20E860C04(v48, v54[0], (unint64_t)v54[1]);
        }
        else
        {
          *(_OWORD *)v48 = *(_OWORD *)v54;
          v49 = v55;
        }
        v68 = 0;
        v33 = (std::string *)operator new(0x20uLL);
        v33->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C9F1EA8;
        v33->__r_.__value_.__l.__size_ = (std::string::size_type)&v68;
        v33->__r_.__value_.__r.__words[2] = (std::string::size_type)v50;
        v33[1].__r_.__value_.__r.__words[0] = a4;
        v74 = v33;
        memset(&v67, 0, sizeof(v67));
        v34 = (char *)HIBYTE(v49);
        if (v49 >= 0)
          v35 = (std::string *)v48;
        else
          v35 = (std::string *)v48[0];
        if (v49 < 0)
          v34 = (char *)v48[1];
        sub_20E8A9678(&v67, v35, (std::string *)&v34[(_QWORD)v35]);
        if (!v74)
          sub_20E86D37C();
        (*(void (**)(std::string *, void **, std::string *))(v74->__r_.__value_.__r.__words[0] + 48))(v74, &v51, &v67);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v67.__r_.__value_.__l.__data_);
          v36 = v74;
          if (v74 == &v73)
          {
LABEL_72:
            v36 = &v73;
            v37 = 4;
            goto LABEL_73;
          }
        }
        else
        {
          v36 = v74;
          if (v74 == &v73)
            goto LABEL_72;
        }
        if (!v36)
          goto LABEL_74;
        v37 = 5;
LABEL_73:
        (*(void (**)(void))(v36->__r_.__value_.__r.__words[0] + 8 * v37))();
LABEL_74:
        if ((SHIBYTE(v49) & 0x80000000) == 0)
        {
          v38 = v51;
          if (!v51)
            goto LABEL_77;
LABEL_76:
          v52 = v38;
          operator delete(v38);
          goto LABEL_77;
        }
        operator delete(v48[0]);
        v38 = v51;
        if (v51)
          goto LABEL_76;
LABEL_77:
        if (SHIBYTE(v55) < 0)
        {
          operator delete(v54[0]);
          v39 = v72;
          if (v72 == v71)
          {
LABEL_84:
            v39 = v71;
            v40 = 4;
            goto LABEL_85;
          }
        }
        else
        {
          v39 = v72;
          if (v72 == v71)
            goto LABEL_84;
        }
        if (v39)
        {
          v40 = 5;
LABEL_85:
          (*(void (**)(void))(*v39 + 8 * v40))();
        }
        if (v57 < 0)
        {
          operator delete(v56[0]);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_91;
LABEL_88:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_92;
LABEL_4:
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((char)v61 < 0)
            goto LABEL_93;
LABEL_5:
          if (++v7 == v42)
            return kdebug_trace();
        }
        else
        {
          if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_88;
LABEL_91:
          operator delete(v58.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_4;
LABEL_92:
          if (((char)v61 & 0x80000000) == 0)
            goto LABEL_5;
LABEL_93:
          operator delete(v60[0]);
          if (++v7 == v42)
            return kdebug_trace();
        }
      }
    }
    return kdebug_trace();
  }
  return result;
}

void sub_20EF59224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if ((a64 & 0x80000000) == 0)
    JUMPOUT(0x20EF5A45CLL);
  JUMPOUT(0x20EF5A3E4);
}

void sub_20EF59234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (!a27)
    JUMPOUT(0x20EF5A40CLL);
  JUMPOUT(0x20EF5A408);
}

void sub_20EF59B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *__p;

  if (SLOBYTE(STACK[0x207]) < 0)
  {
    operator delete(__p);
    if ((a64 & 0x80000000) == 0)
LABEL_7:
      JUMPOUT(0x20EF5A45CLL);
  }
  else if ((a64 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  JUMPOUT(0x20EF5A3E4);
}

#error "20EF5A058: call analysis failed (funcsize=344)"

void sub_20EF5A168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v71;

  if (LOBYTE(STACK[0x208]) && SLOBYTE(STACK[0x207]) < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  if (*(char *)(v71 - 121) < 0)
    operator delete(*(void **)(v71 - 144));
  sub_20E863714((uint64_t)&a59);
  __cxa_end_catch();
  JUMPOUT(0x20EF5A41CLL);
}

void sub_20EF5A358()
{
  __cxa_end_catch();
  JUMPOUT(0x20EF5A41CLL);
}

void sub_20EF5A364(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20EF5A4A0()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EF5A4B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9F1DB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20EF5A4EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9F1DB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EF5A50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  const char *v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  _BYTE *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  size_t v38;
  size_t v39;
  _BYTE *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  char *v50;
  char *shared_owners;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  const char *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  int v71;
  std::__shared_weak_count_vtbl *v72;
  std::__shared_weak_count *v73;
  const char *v74;
  uint64_t v75;
  _QWORD v76[3];
  int v77;
  const char *v78;
  int v79;
  const char *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  _QWORD v84[2];
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  _BYTE object[24];
  unint64_t v89;
  char v90;
  void *__p[2];
  unint64_t v92;
  char v93;
  _QWORD v94[5];

  v94[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v6 = *(uint64_t **)(a1 + 8);
  v84[0] = &off_24CA1A9A0;
  v84[1] = v5;
  v85 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_20EA75554((const std::__fs::filesystem::path *)a3, (uint64_t)v84, *v6, *(_QWORD *)(a1 + 16), &v86);
  v9 = v87;
  if (v87)
  {
    v10 = (unint64_t *)&v87->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v84[0] = &off_24CA1A9A0;
  v12 = v85;
  if (v85)
  {
    v13 = (unint64_t *)&v85->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  sub_20EF5AFE0(&v83);
  if (**(int **)(v83 + 56) <= 2)
  {
    v15 = *(unsigned __int8 *)(v83 + 72);
    v16 = sub_20E8C31DC(v83, "OSLogSurrogateAppender", 1, 0);
    v17 = v16;
    if (v15 || v16 != 0)
    {
      v76[0] = &v83;
      v76[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v76[2] = std::chrono::system_clock::now().__d_.__rep_;
      v77 = 2;
      v78 = "unknown file";
      v79 = 73;
      v81 = 0;
      v82 = 0;
      v80 = "unknown function";
      if (*(char *)(a3 + 23) >= 0)
        v19 = (const char *)a3;
      else
        v19 = *(const char **)a3;
      v20 = *(_QWORD *)v76[0];
      v21 = (const char *)(*(_QWORD *)v76[0] + 16);
      v74 = v21;
      if (*(char *)(*(_QWORD *)v76[0] + 39) < 0)
      {
        v21 = *(const char **)(v20 + 16);
        v22 = *(_QWORD *)(v20 + 24);
      }
      else
      {
        v22 = *(unsigned __int8 *)(*(_QWORD *)v76[0] + 39);
      }
      v75 = *(_QWORD *)v76[0];
      v23 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        if ((_BYTE)v89)
        {
          *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
          *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
        }
        else
        {
          byte_254A4A4F8[23] = 14;
          strcpy(byte_254A4A4F8, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v24 = byte_254A4A4F8;
      else
        v24 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v25 = byte_254A4A4F8[23];
      else
        v25 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v24, v21);
      v26 = &object[8];
      if (v25 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v25 >= 0x17)
      {
        v27 = v19;
        v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v28 = v25 | 7;
        v29 = v28 + 1;
        v26 = operator new(v28 + 1);
        *(_QWORD *)&object[16] = v25;
        v89 = v29 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v26;
        v19 = v27;
      }
      else
      {
        HIBYTE(v89) = v25;
        if (!v25)
        {
LABEL_40:
          v26[v25] = 0;
          v90 = 1;
          v30 = __p;
          if (v22 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v22 >= 0x17)
          {
            v32 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17)
              v32 = v22 | 7;
            v33 = v32 + 1;
            v30 = operator new(v32 + 1);
            __p[1] = (void *)v22;
            v92 = v33 | 0x8000000000000000;
            __p[0] = v30;
          }
          else
          {
            HIBYTE(v92) = v22;
            if (!v22)
            {
              LOBYTE(__p[0]) = 0;
              v93 = 1;
              v31 = *(NSObject **)object;
              if ((SHIBYTE(v92) & 0x80000000) == 0)
                goto LABEL_44;
              goto LABEL_50;
            }
          }
          memmove(v30, v21, v22);
          *((_BYTE *)v30 + v22) = 0;
          v93 = 1;
          v31 = *(NSObject **)object;
          if ((SHIBYTE(v92) & 0x80000000) == 0)
          {
LABEL_44:
            if (!v90)
              goto LABEL_53;
            goto LABEL_51;
          }
LABEL_50:
          operator delete(__p[0]);
          if (!v90)
            goto LABEL_53;
LABEL_51:
          if (SHIBYTE(v89) < 0)
            operator delete(*(void **)&object[8]);
LABEL_53:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (!v17 || !*(_QWORD *)(v17 + 24))
          {
            os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG);
            *(_DWORD *)object = 136315138;
            *(_QWORD *)&object[4] = v19;
            v41 = (void *)_os_log_send_and_compose_impl();
            if (v41)
              free(v41);
            goto LABEL_93;
          }
          v34 = _os_log_pack_size();
          v35 = (std::__shared_weak_count_vtbl *)operator new(v34, (std::align_val_t)8uLL);
          v36 = (std::__shared_weak_count *)operator new();
          v36->__shared_owners_ = 0;
          v37 = (unint64_t *)&v36->__shared_owners_;
          v36->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v36->__shared_weak_owners_ = 0;
          v36[1].__vftable = v35;
          v72 = v35;
          v38 = strlen(v19);
          v73 = v36;
          if (v38 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v39 = v38;
          v71 = v15;
          if (v38 >= 0x17)
          {
            v42 = v19;
            v43 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v38 | 7) != 0x17)
              v43 = v38 | 7;
            v44 = v43 + 1;
            v40 = operator new(v43 + 1);
            *(_QWORD *)&object[8] = v39;
            *(_QWORD *)&object[16] = v44 | 0x8000000000000000;
            *(_QWORD *)object = v40;
            v19 = v42;
          }
          else
          {
            object[23] = v38;
            v40 = object;
            if (!v38)
            {
LABEL_67:
              v40[v39] = 0;
              v45 = *(_QWORD *)object;
              v94[0] = *(_QWORD *)&object[8];
              *(_QWORD *)((char *)v94 + 7) = *(_QWORD *)&object[15];
              v46 = object[23];
              v47 = operator new(0x38uLL);
              v48 = (std::__shared_weak_count *)v47;
              v47[1] = 0;
              v49 = v47 + 1;
              v47[3] = off_24C9ABC20;
              v50 = (char *)(v47 + 3);
              v47[2] = 0;
              v47[4] = v45;
              shared_owners = (char *)(v47 + 4);
              *v47 = &off_24C9ABBD0;
              v47[5] = v94[0];
              *(_QWORD *)((char *)v47 + 47) = *(_QWORD *)((char *)v94 + 7);
              *((_BYTE *)v47 + 55) = v46;
              do
                v52 = __ldxr(v37);
              while (__stxr(v52 + 1, v37));
              v15 = v71;
              do
                v53 = __ldxr(v49);
              while (__stxr(v53 + 1, v49));
              do
                v54 = __ldaxr(v49);
              while (__stlxr(v54 - 1, v49));
              if (!v54)
              {
                (*(void (**)(_QWORD *))(*v47 + 16))(v47);
                std::__shared_weak_count::__release_weak(v48);
              }
              do
                v55 = __ldaxr(v37);
              while (__stlxr(v55 - 1, v37));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
              if (SHIBYTE(v48[2].__vftable) < 0)
                shared_owners = (char *)v48[1].__shared_owners_;
              v56 = _os_log_pack_fill();
              *(_DWORD *)v56 = 136315138;
              *(_QWORD *)(v56 + 4) = shared_owners;
              v57 = operator new();
              v58 = *(unsigned __int8 *)(v75 + 39);
              v59 = v74;
              if ((v58 & 0x80u) != 0)
              {
                v59 = *(const char **)(v75 + 16);
                v58 = *(_QWORD *)(v75 + 24);
              }
              *(_QWORD *)v57 = v72;
              *(_QWORD *)(v57 + 8) = v72;
              *(_QWORD *)(v57 + 16) = v73;
              *(_QWORD *)(v57 + 24) = v50;
              *(_QWORD *)(v57 + 32) = v48;
              *(_QWORD *)(v57 + 40) = v59;
              *(_QWORD *)(v57 + 48) = v58;
              *(_BYTE *)(v57 + 56) = 2;
              *(_QWORD *)object = v57;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v17 + 24) + 40))(*(_QWORD *)(v17 + 24), object);
              v60 = *(_QWORD *)object;
              *(_QWORD *)object = 0;
              if (v60)
              {
                v61 = *(std::__shared_weak_count **)(v60 + 32);
                if (v61)
                {
                  v62 = (unint64_t *)&v61->__shared_owners_;
                  do
                    v63 = __ldaxr(v62);
                  while (__stlxr(v63 - 1, v62));
                  if (!v63)
                  {
                    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                    std::__shared_weak_count::__release_weak(v61);
                  }
                }
                v64 = *(std::__shared_weak_count **)(v60 + 16);
                if (v64)
                {
                  v65 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v66 = __ldaxr(v65);
                  while (__stlxr(v66 - 1, v65));
                  if (!v66)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
                MEMORY[0x212BC6398](v60, 0x10F0C40B62ED6C6);
              }
LABEL_93:
              if (v15)
              {
                if (*(char *)(a3 + 23) >= 0)
                  v67 = (const char *)a3;
                else
                  v67 = *(const char **)a3;
                sub_20E8C003C((uint64_t)v76, "KeyFrameIO: saved keyframe [%s]", v67);
                sub_20E863570((uint64_t)v76);
              }
              sub_20E863570((uint64_t)v76);
              v68 = v82;
              if (v82)
              {
                v69 = (unint64_t *)&v82->__shared_owners_;
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }
              return;
            }
          }
          memcpy(v40, v19, v39);
          goto LABEL_67;
        }
      }
      memmove(v26, v24, v25);
      goto LABEL_40;
    }
  }
}

void sub_20EF5AD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a18);
  v41 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EF5AF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_21015D41C(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF5AF68(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio10mapping_io19KeyframeIOInterface13SaveKeyframesERKNSt3__110shared_ptrIKNS0_17feature_de"
                     "tection18VIOFrameDebugEventEEERKNS3_4__fs10filesystem4pathERNS_3kit2fs11IFilesystemEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio10mapping_io19KeyframeIOInterface13SaveKeyframesERKNSt3__110shared_ptrIKNS0_1"
                                "7feature_detection18VIOFrameDebugEventEEERKNS3_4__fs10filesystem4pathERNS_3kit2fs11IFilesystemEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio10mapping_io19KeyframeIOInterface13SaveKeyframesERKNSt3__110shared_ptrIKNS0_17feature_detection18VIOFrameDebugEventEEERKNS3_4__fs10filesystem4pathERNS_3kit2fs11IFilesystemEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io19KeyframeIOInterface13SaveKeyframesERKNSt3__110shared_ptrIKNS0_17feature_detection18VIOFrameDebugEventEEERKNS3_4__fs10filesystem4pathERNS_3kit2fs11IFilesystemEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF5AFD4()
{
  return &unk_24C9F1E28;
}

void sub_20EF5AFE0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60908);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60908))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.mapping_io");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A60900);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A60908);
  }
  *a1 = qword_254A60900;
}

void sub_20EF5B07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60908);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60908);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF5B0D4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  _BYTE v5[24];
  int v6;
  _QWORD v7[5];
  _QWORD *v8;

  v6 = 0;
  sub_20EB04FEC((uint64_t)&v4, (uint64_t)v5, a1);
  v7[0] = v5;
  v7[1] = a2;
  v7[2] = v5;
  v7[3] = a2;
  v7[4] = a2;
  if (v6 == -1)
    sub_20E877AB8();
  v8 = v7;
  ((void (*)(_QWORD **, _BYTE *))off_24C9F1E38[v6])(&v8, v5);
  if (v6 == -1)
    sub_20E877AB8();
  v7[0] = &v8;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9F1D90[v6])(v7, v5);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9F1D78[v6])(v7, v5);
  return result;
}

void sub_20EF5B1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5B1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5B1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF5B1F8(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t result;
  char v6;
  _BYTE v7[24];
  int v8;
  _BYTE *v9;
  const char *v10;
  _BYTE *v11;
  const char *v12;
  const char *v13;
  _QWORD *v14;

  v8 = 0;
  sub_20EB04FEC((uint64_t)&v6, (uint64_t)v7, a1);
  v9 = v7;
  v10 = a2;
  v11 = v7;
  v12 = a2;
  v13 = a2;
  if (v8 == -1)
    sub_20E877AB8();
  v14 = &v9;
  ((void (*)(_QWORD **, _BYTE *))off_24C9F1E68[v8])(&v14, v7);
  if (*(_QWORD *)a3)
  {
    v9 = v7;
    v10 = a3;
    v11 = v7;
    v12 = a3;
    v13 = a3;
    if (v8 != -1)
    {
      v14 = &v9;
      ((void (*)(_QWORD **, _BYTE *))off_24C9F1E80[v8])(&v14, v7);
      goto LABEL_7;
    }
LABEL_12:
    sub_20E877AB8();
  }
  v9 = v7;
  v10 = "nullptr";
  v11 = v7;
  v12 = "nullptr";
  v13 = "nullptr";
  if (v8 == -1)
    goto LABEL_12;
  v14 = &v9;
  ((void (*)(_QWORD **, _BYTE *))off_24C9F1E50[v8])(&v14, v7);
LABEL_7:
  if (v8 == -1)
    sub_20E877AB8();
  v9 = &v14;
  result = ((uint64_t (*)(_BYTE **, _BYTE *))off_24C9F1D90[v8])(&v9, v7);
  if (v8 != -1)
    return ((uint64_t (*)(_BYTE **, _BYTE *))off_24C9F1D78[v8])(&v9, v7);
  return result;
}

void sub_20EF5B378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5B38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5B3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5B3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5B3C8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF5B93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF5B960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5B974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF5B9CC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF5BF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF5BF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5BF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF5BFD4()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EF5BFE8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9F1EA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20EF5C028(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9F1EA8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20EF5C050(uint64_t a1, timespec **a2, uint64_t a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  timespec *p_dst;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  timespec *v17;
  int64_t v18;
  uint64_t v19;
  timespec v20;
  void *v21;
  _QWORD *v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  char *v31;
  size_t v32;
  const char *v33;
  unsigned __int8 v34;
  size_t v35;
  const char *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t *v49;
  unsigned __int8 v50;
  std::runtime_error *exception;
  char *v53;
  size_t v54;
  __darwin_time_t tv_sec;
  uint64_t v56;
  uint64_t i;
  uint64_t v58;
  size_t v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  size_t v63;
  size_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *shared_owners;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *__s;
  char *__sa;
  char __sb;
  char *__sc;
  void **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  timespec __dst;
  unint64_t rep;
  int v103;
  const char *v104;
  int v105;
  const char *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  _BYTE object[32];
  void *__p[2];
  __int128 v112;
  void *v113[2];
  __int128 v114;
  void *v115[2];
  void *v116[2];
  uint64_t v117;
  char v118;
  _BYTE v119[15];
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  sub_210224144((const std::__fs::filesystem::path *)a3, 0x30u, *(_QWORD *)(a1 + 24), &v98);
  if (!v99)
  {
    sub_20EF5AFE0(&v97);
    if (**(int **)(v97 + 56) > 5)
      goto LABEL_118;
    v27 = *(unsigned __int8 *)(v97 + 72);
    v28 = sub_20E8C31DC(v97, "OSLogSurrogateAppender", 1, 0);
    v29 = v28;
    if (!v27 && v28 == 0)
      goto LABEL_118;
    __dst.tv_sec = (__darwin_time_t)&v97;
    __dst.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v103 = 5;
    v104 = "unknown file";
    v105 = 83;
    v107 = 0;
    v108 = 0;
    v106 = "unknown function";
    if (*(char *)(a3 + 23) >= 0)
      v31 = (char *)a3;
    else
      v31 = *(char **)a3;
    __sa = v31;
    v95 = *(_QWORD *)__dst.tv_sec + 16;
    v96 = *(_QWORD *)__dst.tv_sec;
    if (*(char *)(*(_QWORD *)__dst.tv_sec + 39) < 0)
    {
      v33 = *(const char **)(v96 + 16);
      v32 = *(_QWORD *)(v96 + 24);
    }
    else
    {
      v32 = *(unsigned __int8 *)(*(_QWORD *)__dst.tv_sec + 39);
      v33 = (const char *)(*(_QWORD *)__dst.tv_sec + 16);
    }
    v34 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      if (object[24])
      {
        *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
        *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v35 = byte_254A4A4F8[23];
    else
      v35 = *(_QWORD *)&byte_254A4A4F8[8];
    if (byte_254A4A4F8[23] >= 0)
      v36 = byte_254A4A4F8;
    else
      v36 = *(const char **)byte_254A4A4F8;
    *(_QWORD *)object = os_log_create(v36, v33);
    v37 = &object[8];
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v35 >= 0x17)
    {
      v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v38 = v35 | 7;
      v39 = v38 + 1;
      v37 = operator new(v38 + 1);
      *(_QWORD *)&object[16] = v35;
      *(_QWORD *)&object[24] = v39 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v37;
    }
    else
    {
      object[31] = v35;
      if (!v35)
      {
LABEL_88:
        v37[v35] = 0;
        LOBYTE(__p[0]) = 1;
        v40 = &__p[1];
        if (v32 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v32 >= 0x17)
        {
          v42 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v32 | 7) != 0x17)
            v42 = v32 | 7;
          v43 = v42 + 1;
          v40 = (void **)operator new(v42 + 1);
          *(_QWORD *)&v112 = v32;
          *((_QWORD *)&v112 + 1) = v43 | 0x8000000000000000;
          __p[1] = v40;
        }
        else
        {
          HIBYTE(v112) = v32;
          if (!v32)
          {
            LOBYTE(__p[1]) = 0;
            LOBYTE(v113[0]) = 1;
            v41 = *(NSObject **)object;
            if (SHIBYTE(v112) < 0)
              goto LABEL_93;
            goto LABEL_99;
          }
        }
        memmove(v40, v33, v32);
        *((_BYTE *)v40 + v32) = 0;
        LOBYTE(v113[0]) = 1;
        v41 = *(NSObject **)object;
        if (SHIBYTE(v112) < 0)
        {
LABEL_93:
          operator delete(__p[1]);
          if (!LOBYTE(__p[0]))
            goto LABEL_102;
          goto LABEL_100;
        }
LABEL_99:
        if (!LOBYTE(__p[0]))
          goto LABEL_102;
LABEL_100:
        if ((object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
LABEL_102:
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (!v29 || !*(_QWORD *)(v29 + 24))
        {
          os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
          *(_DWORD *)object = 136315138;
          *(_QWORD *)&object[4] = __sa;
          v44 = (void *)_os_log_send_and_compose_impl();
          if (v44)
            free(v44);
LABEL_108:
          if (v27)
          {
            if (*(char *)(a3 + 23) >= 0)
              v45 = (const char *)a3;
            else
              v45 = *(const char **)a3;
            sub_20E8C003C((uint64_t)&__dst, "[%s] failed to open stream.", v45);
            sub_20E863570((uint64_t)&__dst);
          }
          sub_20E863570((uint64_t)&__dst);
          v46 = v108;
          if (v108)
          {
            p_shared_owners = (unint64_t *)&v108->__shared_owners_;
            do
              v48 = __ldaxr(p_shared_owners);
            while (__stlxr(v48 - 1, p_shared_owners));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
LABEL_118:
          v49 = sub_210219C18();
          v50 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (!atomic_load(&qword_254A5A450))
          {
LABEL_120:
            if (os_signpost_enabled((os_log_t)*v49))
            {
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = "STRM";
              _os_signpost_emit_unreliably_with_name_impl();
            }
            exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
            sub_20EF5D440(a3, (uint64_t)" failed to open stream.");
            std::runtime_error::runtime_error(exception, (const std::string *)object);
            exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
            LODWORD(exception[1].__vftable) = 0;
            __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
          }
          *(_DWORD *)object = 136315138;
          *(_QWORD *)&object[4] = "STRM";
          v53 = (char *)_os_log_send_and_compose_impl();
          v54 = strlen(v53);
          __dst.tv_sec = 0;
          pthread_threadid_np(0, (__uint64_t *)&__dst);
          tv_sec = __dst.tv_sec;
          timespec_get(&__dst, 1);
          sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v49 + 1), (__int128 *)(v49 + 5), "MappingIOSampleWriteErr:TYPE:%s", 0x1FuLL, v53, v54, tv_sec, &__dst);
          std::mutex::lock(&stru_254A5A410);
          v56 = qword_254A5A458;
          for (i = unk_254A5A460; v56 != i; v56 += 40)
          {
            v58 = *(_QWORD *)(v56 + 32);
            if (!v58)
              sub_20E86D37C();
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 48))(v58, object);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (v118 < 0)
          {
            operator delete(v116[1]);
            if ((SHIBYTE(v116[0]) & 0x80000000) == 0)
              goto LABEL_128;
          }
          else if ((SHIBYTE(v116[0]) & 0x80000000) == 0)
          {
LABEL_128:
            if (!BYTE8(v114))
            {
LABEL_134:
              if (BYTE8(v112) && SBYTE7(v112) < 0)
                operator delete(__p[0]);
              if ((object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (v53)
                free(v53);
              goto LABEL_120;
            }
LABEL_132:
            if (SBYTE7(v114) < 0)
              operator delete(v113[0]);
            goto LABEL_134;
          }
          operator delete(v115[0]);
          if (!BYTE8(v114))
            goto LABEL_134;
          goto LABEL_132;
        }
        v59 = _os_log_pack_size();
        v60 = (std::__shared_weak_count_vtbl *)operator new(v59, (std::align_val_t)8uLL);
        v61 = (std::__shared_weak_count *)operator new();
        v61->__shared_owners_ = 0;
        v62 = (unint64_t *)&v61->__shared_owners_;
        v61->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v61->__shared_weak_owners_ = 0;
        v61[1].__vftable = v60;
        v63 = strlen(__sa);
        if (v63 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v64 = v63;
        if (v63 >= 0x17)
        {
          v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v63 | 7) != 0x17)
            v66 = v63 | 7;
          v67 = v66 + 1;
          v65 = operator new(v66 + 1);
          *(_QWORD *)&object[8] = v64;
          *(_QWORD *)&object[16] = v67 | 0x8000000000000000;
          *(_QWORD *)object = v65;
        }
        else
        {
          object[23] = v63;
          v65 = object;
          if (!v63)
          {
LABEL_151:
            v65[v64] = 0;
            v89 = *(_QWORD *)object;
            *(_QWORD *)v119 = *(_QWORD *)&object[8];
            *(_QWORD *)&v119[7] = *(_QWORD *)&object[15];
            __sb = object[23];
            v68 = operator new(0x38uLL);
            v69 = (std::__shared_weak_count *)v68;
            v68[1] = 0;
            v70 = v68 + 1;
            v68[3] = off_24C9ABC20;
            v87 = (char *)(v68 + 3);
            v68[2] = 0;
            v68[4] = v89;
            v88 = (char *)(v68 + 4);
            *v68 = &off_24C9ABBD0;
            v68[5] = *(_QWORD *)v119;
            *(_QWORD *)((char *)v68 + 47) = *(_QWORD *)&v119[7];
            *((_BYTE *)v68 + 55) = __sb;
            do
              v71 = __ldxr(v62);
            while (__stxr(v71 + 1, v62));
            do
              v72 = __ldxr(v70);
            while (__stxr(v72 + 1, v70));
            do
              v73 = __ldaxr(v70);
            while (__stlxr(v73 - 1, v70));
            if (!v73)
            {
              (*(void (**)(_QWORD *))(*v68 + 16))(v68);
              std::__shared_weak_count::__release_weak(v69);
            }
            do
              v74 = __ldaxr(v62);
            while (__stlxr(v74 - 1, v62));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
            shared_owners = v88;
            if (SHIBYTE(v69[2].__vftable) < 0)
              shared_owners = (char *)v69[1].__shared_owners_;
            __sc = shared_owners;
            v76 = _os_log_pack_fill();
            *(_DWORD *)v76 = 136315138;
            *(_QWORD *)(v76 + 4) = __sc;
            v77 = operator new();
            v78 = *(unsigned __int8 *)(v96 + 39);
            v79 = v95;
            if ((v78 & 0x80u) != 0)
            {
              v79 = *(_QWORD *)(v96 + 16);
              v78 = *(_QWORD *)(v96 + 24);
            }
            *(_QWORD *)v77 = v60;
            *(_QWORD *)(v77 + 8) = v60;
            *(_QWORD *)(v77 + 16) = v61;
            *(_QWORD *)(v77 + 24) = v87;
            *(_QWORD *)(v77 + 32) = v69;
            *(_QWORD *)(v77 + 40) = v79;
            *(_QWORD *)(v77 + 48) = v78;
            *(_BYTE *)(v77 + 56) = 16;
            *(_QWORD *)object = v77;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v29 + 24) + 40))(*(_QWORD *)(v29 + 24), object);
            v80 = *(_QWORD *)object;
            *(_QWORD *)object = 0;
            if (v80)
            {
              v81 = *(std::__shared_weak_count **)(v80 + 32);
              if (v81)
              {
                v82 = (unint64_t *)&v81->__shared_owners_;
                do
                  v83 = __ldaxr(v82);
                while (__stlxr(v83 - 1, v82));
                if (!v83)
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
              }
              v84 = *(std::__shared_weak_count **)(v80 + 16);
              if (v84)
              {
                v85 = (unint64_t *)&v84->__shared_owners_;
                do
                  v86 = __ldaxr(v85);
                while (__stlxr(v86 - 1, v85));
                if (!v86)
                {
                  ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                  std::__shared_weak_count::__release_weak(v84);
                }
              }
              MEMORY[0x212BC6398](v80, 0x10F0C40B62ED6C6);
            }
            goto LABEL_108;
          }
        }
        memcpy(v65, __sa, v64);
        goto LABEL_151;
      }
    }
    memmove(v37, v36, v35);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 16))(v99);
  v7 = (char *)v6 + *(_QWORD *)(*v6 - 24);
  if ((v7[32] & 5) != 0)
  {
    *(_OWORD *)v115 = 0u;
    *(_OWORD *)v116 = 0u;
    *(_OWORD *)v113 = 0u;
    v114 = 0u;
    *(_OWORD *)__p = 0u;
    v112 = 0u;
    memset(object, 0, sizeof(object));
    v117 = -1;
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 5) + 32))(object, *((_QWORD *)v7 + 5), 0, 1, 16);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 16))(v99);
  v9 = *(_QWORD *)(a1 + 16);
  v11 = *(const void **)v9;
  v10 = *(_QWORD *)(v9 + 8);
  v12 = operator new();
  *(_QWORD *)(v12 + 8) = v8;
  *(_QWORD *)v12 = v8;
  *(_BYTE *)(v12 + 16) = 0;
  *(_BYTE *)(v12 + 40) = 0;
  *(_BYTE *)(v12 + 48) = 0;
  *(_BYTE *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 96) = 0;
  __s = (char *)a1;
  v94 = (void **)(v12 + 80);
  if (!v10)
    goto LABEL_17;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v10 >= 0x17)
  {
    v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v14 = v10 | 7;
    v15 = v14 + 1;
    p_dst = (timespec *)operator new(v14 + 1);
    __dst.tv_nsec = v10;
    rep = v15 | 0x8000000000000000;
    __dst.tv_sec = (__darwin_time_t)p_dst;
  }
  else
  {
    HIBYTE(rep) = v10;
    p_dst = &__dst;
  }
  memmove(p_dst, v11, v10);
  *((_BYTE *)&p_dst->tv_sec + v10) = 0;
  sub_20E9F5254((uint64_t)v119, v12 + 8, (uint64_t)&__dst);
  if (SHIBYTE(rep) < 0)
    operator delete((void *)__dst.tv_sec);
  v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3);
  if (*(_BYTE *)(v12 + 40))
  {
    __dst.tv_sec = v12 + 16;
    sub_20E9F472C((uint64_t **)&__dst, v16);
  }
  else
  {
LABEL_17:
    sub_20E9F4A34();
  }
  v17 = *a2;
  v18 = (char *)a2[1] - (char *)*a2;
  if (v18)
  {
    v19 = 24 * (v18 / 24);
    do
    {
      if (*(_BYTE *)(v12 + 40))
      {
        __dst.tv_sec = v12 + 16;
        sub_20E9F3D4C((uint64_t **)&__dst, 2u);
      }
      else
      {
        LOBYTE(__dst.tv_sec) = 2;
        std::ostream::write();
      }
      v20 = *v17;
      rep = v17[1].tv_sec;
      __dst = v20;
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)v119 = v12 + 16;
        sub_20E9F4B2C((uint64_t)&v97, (uint64_t **)v119, (unsigned int *)&__dst);
      }
      else
      {
        v119[0] = -54;
        *(_DWORD *)&v119[1] = bswap32(__dst.tv_sec);
        std::ostream::write();
      }
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)v119 = v12 + 16;
        sub_20E9F4B2C((uint64_t)&v97, (uint64_t **)v119, (unsigned int *)&__dst.tv_sec + 1);
      }
      else
      {
        v119[0] = -54;
        *(_DWORD *)&v119[1] = bswap32(HIDWORD(__dst.tv_sec));
        std::ostream::write();
      }
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)v119 = v12 + 16;
        sub_20E9F4B2C((uint64_t)&v97, (uint64_t **)v119, (unsigned int *)&__dst.tv_nsec);
      }
      else
      {
        v119[0] = -54;
        *(_DWORD *)&v119[1] = bswap32(__dst.tv_nsec);
        std::ostream::write();
      }
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)v119 = v12 + 16;
        sub_20E9F4B2C((uint64_t)&v97, (uint64_t **)v119, (unsigned int *)&__dst.tv_nsec + 1);
      }
      else
      {
        v119[0] = -54;
        *(_DWORD *)&v119[1] = bswap32(HIDWORD(__dst.tv_nsec));
        std::ostream::write();
      }
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)v119 = v12 + 16;
        sub_20E9F4B2C((uint64_t)&v97, (uint64_t **)v119, (unsigned int *)&rep);
      }
      else
      {
        v119[0] = -54;
        *(_DWORD *)&v119[1] = bswap32(rep);
        std::ostream::write();
      }
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)v119 = v12 + 16;
        sub_20E9F4CE4((uint64_t)&v97, (uint64_t **)v119, (_BYTE *)&rep + 4);
      }
      else
      {
        if (BYTE4(rep))
          v119[0] = -61;
        else
          v119[0] = -62;
        std::ostream::write();
      }
      v17 = (timespec *)((char *)v17 + 24);
      v19 -= 24;
    }
    while (v19);
  }
  v21 = *v94;
  if (*v94)
  {
    *(_QWORD *)(v12 + 88) = v21;
    operator delete(v21);
  }
  if (*(_BYTE *)(v12 + 72))
    free(*(void **)(v12 + 56));
  if (*(_BYTE *)(v12 + 40))
    free(*(void **)(v12 + 24));
  MEMORY[0x212BC6398](v12, 0x1030C408C1A3048);
  v22 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 16))(v99);
  v23 = (char *)v22 + *(_QWORD *)(*v22 - 24);
  if ((v23[32] & 5) != 0)
  {
    **((_QWORD **)__s + 1) = -1 - v117;
    v24 = v100;
    if (!v100)
      return;
  }
  else
  {
    (*(void (**)(timespec *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v23 + 5) + 32))(&__dst, *((_QWORD *)v23 + 5), 0, 1, 16);
    **((_QWORD **)__s + 1) = v109 - v117;
    v24 = v100;
    if (!v100)
      return;
  }
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
}

void sub_20EF5CFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a23);
  v32 = (std::__shared_weak_count *)a31;
  if (!a31)
    goto LABEL_7;
  v33 = (unint64_t *)(a31 + 8);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_7:
    v35 = (std::__shared_weak_count *)a22;
    if (!a22)
      goto LABEL_12;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = (std::__shared_weak_count *)a22;
    if (!a22)
      goto LABEL_12;
  }
  p_shared_owners = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(p_shared_owners);
  while (__stlxr(v37 - 1, p_shared_owners));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    _Unwind_Resume(a1);
  }
LABEL_12:
  _Unwind_Resume(a1);
}

uint64_t sub_20EF5D3C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio10mapping_io15SerializeSampleINSt3__16vectorINS0_17feature_detection2v234PointDescriptor"
                     "StoreKeypointSampleENS3_9allocatorIS7_EEEEEEyRKT_RKNS3_17basic_string_viewIcNS3_11char_traitsIcEEEE"
                     "RKNS3_12basic_stringIcSG_NS8_IcEEEERNS_3kit2fs11IFilesystemEEUlRKSA_RKNS3_4__fs10filesystem4pathEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio10mapping_io15SerializeSampleINSt3__16vectorINS0_17feature_detection2v234Poin"
                                "tDescriptorStoreKeypointSampleENS3_9allocatorIS7_EEEEEEyRKT_RKNS3_17basic_string_viewIcN"
                                "S3_11char_traitsIcEEEERKNS3_12basic_stringIcSG_NS8_IcEEEERNS_3kit2fs11IFilesystemEEUlRKS"
                                "A_RKNS3_4__fs10filesystem4pathEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio10mapping_io15SerializeSampleINSt3__16vectorINS0_17feature_detection2v234PointDescriptorStoreKeypointSampleENS3_9allocatorIS7_EEEEEEyRKT_RKNS3_17basic_string_viewIcNS3_11char_traitsIcEEEERKNS3_12basic_stringIcSG_NS8_IcEEEERNS_3kit2fs11IFilesystemEEUlRKSA_RKNS3_4__fs10filesystem4pathEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io15SerializeSampleINSt3__16vectorINS0_17feature_detection2v234PointDescriptorStoreKeypointSampleENS3_9allocatorIS7_EEEEEEyRKT_RKNS3_17basic_string_viewIcNS3_11char_traitsIcEEEERKNS3_12basic_stringIcSG_NS8_IcEEEERNS_3kit2fs11IFilesystemEEUlRKSA_RKNS3_4__fs10filesystem4pathEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF5D434()
{
  return &unk_24C9F1F30;
}

uint64_t sub_20EF5D440(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  _BYTE v5[24];
  int v6;
  _QWORD v7[5];
  _QWORD *v8;

  v6 = 0;
  sub_20EB04FEC((uint64_t)&v4, (uint64_t)v5, a1);
  v7[0] = v5;
  v7[1] = a2;
  v7[2] = v5;
  v7[3] = a2;
  v7[4] = a2;
  if (v6 == -1)
    sub_20E877AB8();
  v8 = v7;
  ((void (*)(_QWORD **, _BYTE *))off_24C9F1F18[v6])(&v8, v5);
  if (v6 == -1)
    sub_20E877AB8();
  v7[0] = &v8;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9F1D90[v6])(v7, v5);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9F1D78[v6])(v7, v5);
  return result;
}

void sub_20EF5D528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5D53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5D550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5D564(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF5DAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF5DAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5DB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF5DB68(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF5E0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF5E100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5E114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EF5E16C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  __int128 v10;

  __p = operator new(0x28uLL);
  v10 = xmmword_2102DC280;
  strcpy((char *)__p, "LocationServiceConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "LocationServiceConfig.service_on", v4, "Boolean to turn on Location Services.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "LocationServiceConfig.longitude", v5, "Longitude in degrees.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "LocationServiceConfig.latitude", v6, "Latitude in degrees.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 24));
  return sub_20E8B2F9C((uint64_t *)&__p, "LocationServiceConfig.timestamp", v7, "Timestamp when this location was determined.");
}

void sub_20EF5E2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF5E2F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  if (*(_BYTE *)(a1 + 600))
  {
    v2 = *(_QWORD *)(a1 + 576);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 584);
      v4 = *(void **)(a1 + 576);
      if (v3 != v2)
      {
        do
        {
          v5 = *(void **)(v3 - 24);
          if (v5)
          {
            *(_QWORD *)(v3 - 16) = v5;
            operator delete(v5);
          }
          v3 -= 48;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 576);
      }
      *(_QWORD *)(a1 + 584) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 568))
  {
    sub_20E86872C(a1 + 488, *(_QWORD **)(a1 + 496));
    v6 = *(_QWORD *)(a1 + 464);
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 472);
      v8 = *(void **)(a1 + 464);
      if (v7 != v6)
      {
        v9 = *(_QWORD *)(a1 + 472);
        do
        {
          v11 = *(void **)(v9 - 48);
          v9 -= 48;
          v10 = v11;
          if (v11)
          {
            *(_QWORD *)(v7 - 40) = v10;
            operator delete(v10);
          }
          v7 = v9;
        }
        while (v9 != v6);
        v8 = *(void **)(a1 + 464);
      }
      *(_QWORD *)(a1 + 472) = v6;
      operator delete(v8);
    }
  }
  if (*(_BYTE *)(a1 + 456))
    sub_20E94FADC(a1 + 8);
  return a1;
}

uint64_t sub_20EF5E3E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v7;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  int v20;
  char v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  char *v30;
  char *v31;
  void *v32;
  void *v33;
  char v34;
  char *v35;
  char *v36;
  void *v37;
  char *v38;
  void *v39;
  void *v40;
  char *v41;
  _QWORD *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  void *v47;
  std::runtime_error *v49;
  std::runtime_error *exception;
  char v53[8];
  _BYTE v54[448];
  char v55;
  __n128 v56;
  _BYTE v57[40];
  __int128 v58;
  __int128 v59;
  int v60;
  char v61;
  void *__p[2];
  uint64_t v63;
  char v64;
  int v65;
  char v66;
  void *v67;
  _QWORD v68[2];
  _QWORD **v69;
  _QWORD *v70[2];
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  _QWORD *v80;
  _QWORD v81[9];
  _QWORD v82[3];
  _QWORD v83[9];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD v91[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  int v95;
  char v96;
  _BYTE v97[112];
  __int128 v98;
  uint64_t v99;
  char v100;
  int v101;
  char v102;
  void *v103[2];
  _QWORD **v104;
  _QWORD *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD v113[9];
  _QWORD v114[3];
  _QWORD v115[9];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  _OWORD v123[4];
  uint64_t v124;
  uint64_t v125;

  v7 = a4;
  v10 = 0;
  v125 = *MEMORY[0x24BDAC8D0];
  v11 = *(unsigned __int8 *)(a1 + 23);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(unsigned __int8 *)(a2 + 16);
  v53[0] = 0;
  v54[0] = 0;
  if ((v11 & 0x80u) != 0)
    v11 = v12;
  v55 = 0;
  v56.n128_u8[0] = 0;
  v61 = 0;
  LOBYTE(__p[0]) = 0;
  v64 = 0;
  LOBYTE(v65) = 0;
  v66 = 0;
  if (v11)
    v14 = 0;
  else
    v14 = v13 == 0;
  if (!v14)
  {
    if (v11)
    {
      sub_20EF65654((uint64_t)&v67, (char *)a1, a6);
      v53[0] = (char)v67;
      sub_20EF67D34((uint64_t)v54, (uint64_t)v68);
      sub_20EF67E7C(&v56, (uint64_t)v97);
      if (v64 == v100)
      {
        if (v64)
        {
          v16 = (char *)__p[0];
          if (__p[0])
          {
            v17 = (char *)__p[1];
            v18 = __p[0];
            if (__p[1] != __p[0])
            {
              do
              {
                v19 = (void *)*((_QWORD *)v17 - 3);
                if (v19)
                {
                  *((_QWORD *)v17 - 2) = v19;
                  operator delete(v19);
                }
                v17 -= 48;
              }
              while (v17 != v16);
              v18 = __p[0];
            }
            __p[1] = v16;
            operator delete(v18);
          }
          *(_OWORD *)__p = v98;
          v63 = v99;
          v99 = 0;
          v98 = 0uLL;
        }
      }
      else if (v64)
      {
        v26 = (char *)__p[0];
        if (__p[0])
        {
          v27 = (char *)__p[1];
          v28 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              v29 = (void *)*((_QWORD *)v27 - 3);
              if (v29)
              {
                *((_QWORD *)v27 - 2) = v29;
                operator delete(v29);
              }
              v27 -= 48;
            }
            while (v27 != v26);
            v28 = __p[0];
          }
          __p[1] = v26;
          operator delete(v28);
        }
        v64 = 0;
      }
      else
      {
        *(_OWORD *)__p = v98;
        v63 = v99;
        v99 = 0;
        v98 = 0uLL;
        v64 = 1;
      }
      v65 = v101;
      v34 = v102;
    }
    else
    {
      LOBYTE(v67) = 0;
      LOBYTE(v68[0]) = 0;
      v96 = 0;
      v97[0] = 0;
      v97[104] = 0;
      LOBYTE(v98) = 0;
      v100 = 0;
      LOBYTE(v101) = 0;
      v102 = 0;
      if (!v13 || !*(_QWORD *)a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Deserializing data to map failed! Empty input");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v106 = 0uLL;
      v105 = 0;
      *(_OWORD *)v103 = 0u;
      *(_QWORD *)&v118 = 0;
      v116 = 0u;
      v117 = 0u;
      *((_QWORD *)&v118 + 1) = -1;
      memset(&v123[2], 0, 32);
      v124 = 0;
      *(_QWORD *)((char *)&v123[2] + 13) = 0;
      memset(v123, 0, 32);
      v85 = 0u;
      v86 = v118;
      v84 = 0u;
      v104 = &v105;
      v111 = 3;
      memset(v113, 0, 64);
      v112 = v113;
      v114[0] = 0;
      v113[8] = v114;
      v115[1] = 0;
      v115[0] = 0;
      v114[1] = 0;
      v114[2] = v115;
      v70[0] = 0;
      v69 = v70;
      v70[1] = 0;
      v71 = 0uLL;
      v72 = 0;
      v107 = 0uLL;
      v74 = 0;
      v73 = 0;
      v108 = 0uLL;
      v75 = 0;
      v76 = 0;
      v77 = 0;
      v78 = 0;
      v109 = 0uLL;
      v110 = 0uLL;
      v79 = 3;
      memset(v81, 0, 64);
      v80 = v81;
      v82[1] = 0;
      v82[0] = 0;
      v81[8] = v82;
      v83[0] = 0;
      v82[2] = v83;
      v83[1] = 0;
      v83[2] = -1;
      memset(&v83[3], 0, 48);
      v115[2] = -1;
      memset(&v115[3], 0, 48);
      v88 = 0;
      v87 = 0;
      v120 = 0;
      v119 = 0;
      v122 = v123;
      v121 = 0;
      v91[1] = 0;
      v91[0] = 0;
      v89 = 0;
      v90 = v91;
      v95 = 0;
      v93 = v123[2];
      v94 = v123[3];
      v92 = 0u;
      v96 = 1;
      sub_20E94FADC((uint64_t)v103);
      v20 = sub_20F438C08((uint64_t *)a2, (uint64_t)v68);
      if (v20 == 1)
        v21 = 2;
      else
        v21 = 1;
      if (v20 == 2)
        v21 = 3;
      LOBYTE(v67) = v21;
      v53[0] = v21;
      sub_20EF67D34((uint64_t)v54, (uint64_t)v68);
      sub_20EF67E7C(&v56, (uint64_t)v97);
      if (v64 == v100)
      {
        v7 = a4;
        if (v64)
        {
          v22 = (char *)__p[0];
          if (__p[0])
          {
            v23 = (char *)__p[1];
            v24 = __p[0];
            if (__p[1] != __p[0])
            {
              do
              {
                v25 = (void *)*((_QWORD *)v23 - 3);
                if (v25)
                {
                  *((_QWORD *)v23 - 2) = v25;
                  operator delete(v25);
                }
                v23 -= 48;
              }
              while (v23 != v22);
              v24 = __p[0];
            }
            __p[1] = v22;
            operator delete(v24);
          }
          *(_OWORD *)__p = v98;
          v63 = v99;
          v99 = 0;
          v98 = 0uLL;
        }
      }
      else
      {
        v7 = a4;
        if (v64)
        {
          v30 = (char *)__p[0];
          if (__p[0])
          {
            v31 = (char *)__p[1];
            v32 = __p[0];
            if (__p[1] != __p[0])
            {
              do
              {
                v33 = (void *)*((_QWORD *)v31 - 3);
                if (v33)
                {
                  *((_QWORD *)v31 - 2) = v33;
                  operator delete(v33);
                }
                v31 -= 48;
              }
              while (v31 != v30);
              v32 = __p[0];
            }
            __p[1] = v30;
            operator delete(v32);
          }
          v64 = 0;
        }
        else
        {
          *(_OWORD *)__p = v98;
          v63 = v99;
          v99 = 0;
          v98 = 0uLL;
          v64 = 1;
        }
      }
      v65 = v101;
      v34 = v102;
    }
    v66 = v34;
    sub_20EF5E2F8((uint64_t)&v67);
    v10 = v53[0];
    if (v53[0] == 3)
    {
      v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v49, "Deserializing data to map failed!");
      __cxa_throw(v49, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if ((*(_QWORD *)a5 || *(_DWORD *)(a5 + 8)) && *(_BYTE *)(a3 + 16))
    {
      sub_20F437910((uint64_t *)a3, (uint64_t)&v67);
      if (!(_BYTE)v77)
      {
        LODWORD(v103[0]) = 0;
        BYTE8(v110) = 0;
        goto LABEL_78;
      }
      if (*(_DWORD *)a5 == (_DWORD)v71 && *(_QWORD *)(a5 + 4) == *(_QWORD *)((char *)&v71 + 4))
      {
        sub_20EF674FC((uint64_t)v103, (uint64_t)&v67);
        BYTE8(v110) = 1;
        if (!(_BYTE)v77)
          goto LABEL_78;
      }
      else
      {
        LODWORD(v103[0]) = 1;
        BYTE8(v110) = 0;
      }
      sub_20E86872C((uint64_t)&v69, v70[0]);
      v35 = (char *)v67;
      if (v67)
      {
        v36 = (char *)v68[0];
        v37 = v67;
        if ((void *)v68[0] != v67)
        {
          v38 = (char *)v68[0];
          do
          {
            v40 = (void *)*((_QWORD *)v38 - 6);
            v38 -= 48;
            v39 = v40;
            if (v40)
            {
              *((_QWORD *)v36 - 5) = v39;
              operator delete(v39);
            }
            v36 = v38;
          }
          while (v38 != v35);
          v37 = v67;
        }
        v68[0] = v35;
        operator delete(v37);
        if (BYTE8(v110))
          goto LABEL_79;
        goto LABEL_84;
      }
LABEL_78:
      if (BYTE8(v110))
      {
LABEL_79:
        if (v61)
        {
          sub_20EF675CC((uint64_t *)&v56, (uint64_t)v103[0], (uint64_t)v103[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v103[1] - (char *)v103[0]) >> 4));
          sub_20EF679A4((uint64_t)v57, v105, &v106);
          *(_OWORD *)&v57[24] = v107;
          v58 = v108;
          v59 = v109;
          v60 = v110;
        }
        else
        {
          sub_20E9950C4((uint64_t)&v56, (uint64_t)v103);
          v61 = 1;
        }
        goto LABEL_85;
      }
LABEL_84:
      v65 = (int)v103[0];
      v66 = 1;
LABEL_85:
      if (BYTE8(v110))
      {
        sub_20E86872C((uint64_t)&v105, (_QWORD *)v106);
        v41 = (char *)v103[0];
        if (v103[0])
        {
          v42 = v103[1];
          v43 = v103[0];
          if (v103[1] != v103[0])
          {
            v44 = (char *)v103[1];
            do
            {
              v46 = (void *)*((_QWORD *)v44 - 6);
              v44 -= 48;
              v45 = v46;
              if (v46)
              {
                *(v42 - 5) = v45;
                operator delete(v45);
              }
              v42 = v44;
            }
            while (v44 != v41);
            v43 = v103[0];
          }
          v103[1] = v41;
          operator delete(v43);
        }
      }
      v10 = v53[0];
    }
  }
  *(_BYTE *)(a7 + 8) = 0;
  *(_BYTE *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 24) = 0;
  *(_BYTE *)a7 = v10;
  *(_DWORD *)(a7 + 32) = v65;
  *(_BYTE *)(a7 + 36) = v66;
  if (v55)
  {
    sub_20F44A49C((uint64_t)v54, v7, (uint64_t)&v56, (uint64_t)__p, (uint64_t *)&v67);
    v47 = v67;
    *(_QWORD *)(a7 + 24) = v67;
    if (!v47)
      *(_BYTE *)a7 = 4;
  }
  return sub_20EF5E2F8((uint64_t)v53);
}

void sub_20EF5EC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EF661F0((char **)&STACK[0x288]);
  sub_20EF5E2F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5ECB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  __cxa_free_exception(v5);
  sub_20EF5E2F8((uint64_t)&STACK[0x288]);
  sub_20EF5E2F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5ED34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20EE5C360(v5);
  sub_20EF5E2F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF5ED50(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, std::string::size_type a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  void *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  __int128 v15;
  std::string::size_type v16;
  void *v17;
  std::string::size_type v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 *v44;
  __int128 *v45;
  std::string::size_type size;
  __int128 *v47;
  __int128 *v48;
  __int128 v49;
  __int128 v50;
  _OWORD *v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t *v57;
  std::string::size_type v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  const char *v62;
  NSObject *v63;
  std::runtime_error *exception;
  _QWORD *v65;
  std::__fs::filesystem::path v66;
  std::__fs::filesystem::path v67;
  int v68;
  const char *v69;
  int v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74[2];
  uint64_t v75;
  std::__fs::filesystem::path __p;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79[4];
  std::__fs::filesystem::path v80;
  __int128 __dst;
  uint64_t v82;

  sub_20EF707E8(a1, a5, (uint64_t)v74);
  v11 = (void *)HIBYTE(v75);
  if (v75 < 0)
    v11 = v74[1];
  if (!v11)
  {
    sub_20EF5F730(&v66);
    if (**(int **)(v66.__pn_.__r_.__value_.__r.__words[0] + 56) <= 5)
    {
      v52 = *(unsigned __int8 *)(v66.__pn_.__r_.__value_.__r.__words[0] + 72);
      v53 = sub_20E8C31DC((uint64_t)v66.__pn_.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
      v54 = v53 ? v53 + 16 : 0;
      if (v52 || v53 != 0)
      {
        v67.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
        v67.__pn_.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v67.__pn_.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v68 = 5;
        v69 = "unknown file";
        v70 = 337;
        v72 = 0;
        v73 = 0;
        v71 = "unknown function";
        v56 = *(_QWORD *)v67.__pn_.__r_.__value_.__l.__data_;
        v57 = (uint64_t *)(*(_QWORD *)v67.__pn_.__r_.__value_.__l.__data_ + 16);
        if (*(char *)(*(_QWORD *)v67.__pn_.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v59 = *(_QWORD *)(v56 + 16);
          v58 = *(_QWORD *)(v56 + 24);
        }
        else
        {
          v58 = *(unsigned __int8 *)(*(_QWORD *)v67.__pn_.__r_.__value_.__l.__data_ + 39);
          v59 = *(_QWORD *)v67.__pn_.__r_.__value_.__l.__data_ + 16;
        }
        v80.__pn_.__r_.__value_.__r.__words[0] = v59;
        v80.__pn_.__r_.__value_.__l.__size_ = v58;
        v60 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v60 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
          if ((_BYTE)v77 && SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__pn_.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v61 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v62 = byte_254A4A4F8;
        }
        else
        {
          v61 = *(_QWORD *)&byte_254A4A4F8[8];
          v62 = *(const char **)byte_254A4A4F8;
        }
        *(_QWORD *)&__dst = v62;
        *((_QWORD *)&__dst + 1) = v61;
        __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v62, v80.__pn_.__r_.__value_.__l.__data_);
        sub_20E86E5A8(&__p.__pn_.__r_.__value_.__l.__size_, (uint64_t)&__dst);
        sub_20E86E5A8(v79, (uint64_t)&v80);
        v63 = __p.__pn_.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&__p);
        sub_20EF6E234(v54, v57, v63, OS_LOG_TYPE_ERROR);
        if (v52)
        {
          sub_20E8C003C((uint64_t)&v67, "Failed to access located directory during load.");
          sub_20E863570((uint64_t)&v67);
        }
        sub_20E863714((uint64_t)&v67);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    sub_20E8610C0(&__p, "Failed to access located directory during load.");
    std::runtime_error::runtime_error(exception, &__p.__pn_);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
    LODWORD(exception[1].__vftable) = 1;
    __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  memset(&v66, 0, sizeof(v66));
  if (!*(_BYTE *)(a2 + 24))
  {
    sub_210224314((uint64_t)v74, 2u, "*", 1uLL, a5, (uint64_t *)&__dst);
    v43 = a6;
    memset(&v67, 0, sizeof(v67));
    sub_20E9099B8((uint64_t)&v67, (uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 5);
    v45 = (__int128 *)*((_QWORD *)&__dst + 1);
    v44 = (__int128 *)__dst;
    if ((_QWORD)__dst == *((_QWORD *)&__dst + 1))
    {
      size = v67.__pn_.__r_.__value_.__l.__size_;
      v17 = (void *)v67.__pn_.__r_.__value_.__r.__words[0];
      v66 = v67;
      if ((_QWORD)__dst)
        goto LABEL_54;
    }
    else
    {
      do
      {
        if (*((char *)v44 + 23) < 0)
        {
          sub_20E860C04(&__p, *(void **)v44, *((_QWORD *)v44 + 1));
        }
        else
        {
          v50 = *v44;
          __p.__pn_.__r_.__value_.__r.__words[2] = *((_QWORD *)v44 + 2);
          *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = v50;
        }
        v51 = (_OWORD *)v67.__pn_.__r_.__value_.__l.__size_;
        if (v67.__pn_.__r_.__value_.__l.__size_ < v67.__pn_.__r_.__value_.__r.__words[2])
        {
          v49 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
          *(_QWORD *)(v67.__pn_.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&__p.__pn_.__r_.__value_.__l + 2);
          *v51 = v49;
          v67.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v51 + 24;
        }
        else
        {
          v67.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)sub_20E8F7CF0((void **)&v67.__pn_.__r_.__value_.__l.__data_, (uint64_t)&__p);
          if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        }
        v44 += 2;
      }
      while (v44 != v45);
      v44 = (__int128 *)__dst;
      size = v67.__pn_.__r_.__value_.__l.__size_;
      v17 = (void *)v67.__pn_.__r_.__value_.__r.__words[0];
      v66 = v67;
      if ((_QWORD)__dst)
      {
LABEL_54:
        v47 = (__int128 *)*((_QWORD *)&__dst + 1);
        v48 = v44;
        if (*((__int128 **)&__dst + 1) != v44)
        {
          do
          {
            if (*((char *)v47 - 9) < 0)
              operator delete(*((void **)v47 - 4));
            v47 -= 2;
          }
          while (v47 != v44);
          v48 = (__int128 *)__dst;
        }
        *((_QWORD *)&__dst + 1) = v44;
        operator delete(v48);
        v18 = v66.__pn_.__r_.__value_.__l.__size_;
        v17 = (void *)v66.__pn_.__r_.__value_.__r.__words[0];
        a6 = v43;
        LOBYTE(__dst) = a3;
        v19 = v66.__pn_.__r_.__value_.__l.__size_ - v66.__pn_.__r_.__value_.__r.__words[0];
        if (v66.__pn_.__r_.__value_.__l.__size_ != v66.__pn_.__r_.__value_.__r.__words[0])
          goto LABEL_22;
        goto LABEL_72;
      }
    }
    v18 = size;
    a6 = v43;
    LOBYTE(__dst) = a3;
    v19 = size - (_QWORD)v17;
    if ((void *)size != v17)
      goto LABEL_22;
LABEL_72:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    if (!v17)
      goto LABEL_74;
    goto LABEL_73;
  }
  v12 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  memset(&v80, 0, sizeof(v80));
  sub_20E9099B8((uint64_t)&v80, v12);
  v13 = *(unint64_t **)a2;
  v14 = *(unint64_t **)(a2 + 8);
  if (v13 != v14)
  {
    while (1)
    {
      sub_20E9F6CBC(v13);
      __p = v67;
      memset(&v67, 0, sizeof(v67));
      if (SHIBYTE(v75) < 0)
      {
        sub_20E860C04(&__dst, v74[0], (unint64_t)v74[1]);
      }
      else
      {
        __dst = *(_OWORD *)v74;
        v82 = v75;
      }
      sub_20E8A944C((uint64_t)&__dst, &__p);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_16;
LABEL_13:
        v16 = v80.__pn_.__r_.__value_.__l.__size_;
        if (v80.__pn_.__r_.__value_.__l.__size_ >= v80.__pn_.__r_.__value_.__r.__words[2])
          goto LABEL_17;
LABEL_7:
        v15 = __dst;
        *(_QWORD *)(v16 + 16) = v82;
        *(_OWORD *)v16 = v15;
        v80.__pn_.__r_.__value_.__l.__size_ = v16 + 24;
        if (++v13 == v14)
          break;
      }
      else
      {
        if ((SHIBYTE(v67.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_13;
LABEL_16:
        operator delete(v67.__pn_.__r_.__value_.__l.__data_);
        v16 = v80.__pn_.__r_.__value_.__l.__size_;
        if (v80.__pn_.__r_.__value_.__l.__size_ < v80.__pn_.__r_.__value_.__r.__words[2])
          goto LABEL_7;
LABEL_17:
        v80.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)sub_20E8F7CF0((void **)&v80.__pn_.__r_.__value_.__l.__data_, (uint64_t)&__dst);
        if (SHIBYTE(v82) < 0)
        {
          operator delete((void *)__dst);
          if (++v13 == v14)
            break;
        }
        else if (++v13 == v14)
        {
          break;
        }
      }
    }
  }
  v66 = v80;
  v18 = v80.__pn_.__r_.__value_.__l.__size_;
  v17 = (void *)v80.__pn_.__r_.__value_.__r.__words[0];
  LOBYTE(__dst) = a3;
  v19 = v80.__pn_.__r_.__value_.__l.__size_ - v80.__pn_.__r_.__value_.__r.__words[0];
  if (v80.__pn_.__r_.__value_.__l.__size_ == v80.__pn_.__r_.__value_.__r.__words[0])
    goto LABEL_72;
LABEL_22:
  v20 = 0xAAAAAAAAAAAAAAABLL * (v19 >> 3);
  if (v20 > 0x666666666666666)
    sub_20E867F44();
  v65 = a6;
  v21 = (char *)operator new(0xAAAAAAAAAAAAAAB8 * (v19 >> 3));
  v22 = &v21[40 * v20];
  v67.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  v67.__pn_.__r_.__value_.__l.__size_ = a4;
  v67.__pn_.__r_.__value_.__r.__words[2] = a5;
  v23 = v21;
  v24 = (uint64_t)v17;
  do
  {
    sub_20EF6807C((uint64_t)&__p, (unsigned __int8 **)&v67, v24);
    if (v23 >= v22)
    {
      v29 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - v21) >> 3) + 1;
      if (v29 > 0x666666666666666)
        sub_20E867F44();
      if (0x999999999999999ALL * ((v22 - v21) >> 3) > v29)
        v29 = 0x999999999999999ALL * ((v22 - v21) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v22 - v21) >> 3) >= 0x333333333333333)
        v30 = 0x666666666666666;
      else
        v30 = v29;
      if (v30 > 0x666666666666666)
        sub_20E877A38();
      v31 = (char *)operator new(40 * v30);
      v32 = &v31[8 * ((v23 - v21) >> 3)];
      *(_OWORD *)v32 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
      v32[16] = __p.__pn_.__r_.__value_.__s.__data_[16];
      v33 = v77;
      v34 = v78;
      v77 = 0;
      *((_QWORD *)v32 + 3) = v33;
      *((_QWORD *)v32 + 4) = v34;
      if (v23 == v21)
      {
        v39 = &v31[8 * ((v23 - v21) >> 3)];
      }
      else
      {
        v35 = 0;
        do
        {
          v36 = &v32[v35];
          v37 = *(_OWORD *)&v23[v35 - 40];
          *(v36 - 24) = v23[v35 - 24];
          *(_OWORD *)(v36 - 40) = v37;
          v38 = *(_QWORD *)&v23[v35 - 16];
          *(_QWORD *)&v23[v35 - 16] = 0;
          *((_QWORD *)v36 - 2) = v38;
          *((_QWORD *)v36 - 1) = *(_QWORD *)&v23[v35 - 8];
          v35 -= 40;
        }
        while (&v23[v35] != v21);
        v39 = &v32[v35];
        do
        {
          v40 = *((_QWORD *)v23 - 2);
          *((_QWORD *)v23 - 2) = 0;
          if (v40)
          {
            v41 = sub_20E9545B0(v40);
            MEMORY[0x212BC6398](v41, 0x10A0C401749CDD1);
          }
          v23 -= 40;
        }
        while (v23 != v21);
      }
      v22 = &v31[40 * v30];
      v23 = v32 + 40;
      if (v21)
        operator delete(v21);
      v21 = v39;
      v28 = v77;
      if (v77)
      {
LABEL_46:
        v42 = sub_20E9545B0(v28);
        MEMORY[0x212BC6398](v42, 0x10A0C401749CDD1);
      }
    }
    else
    {
      v25 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
      v23[16] = __p.__pn_.__r_.__value_.__s.__data_[16];
      *(_OWORD *)v23 = v25;
      v26 = v77;
      v27 = v78;
      v77 = 0;
      *((_QWORD *)v23 + 3) = v26;
      *((_QWORD *)v23 + 4) = v27;
      v23 += 40;
      v28 = v77;
      if (v77)
        goto LABEL_46;
    }
    v24 += 24;
  }
  while (v24 != v18);
  *v65 = v21;
  v65[1] = v23;
  v65[2] = v22;
  if (v17)
  {
    do
    {
      if (*(char *)(v18 - 1) < 0)
        operator delete(*(void **)(v18 - 24));
      v18 -= 24;
    }
    while ((void *)v18 != v17);
LABEL_73:
    v66.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
    operator delete(v17);
  }
LABEL_74:
  if (SHIBYTE(v75) < 0)
    operator delete(v74[0]);
}

void sub_20EF5F510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,void *a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38)
{
  if ((_BYTE)a37 && a36 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(a1);
}

void sub_20EF5F730(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60918);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60918))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.mapping_io");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A60910);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A60918);
  }
  *a1 = qword_254A60910;
}

void sub_20EF5F7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60918);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60918);
  _Unwind_Resume(a1);
}

void sub_20EF5F824(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::string::size_type v11;
  std::string::size_type size;
  void *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  const char *v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  unsigned __int8 v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  const char *v27;
  std::runtime_error *exception;
  const char *v29;
  uint64_t *v30;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v32;
  int v33;
  const char *v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40[2];
  unsigned __int8 v41;
  char *category[2];
  std::string __p;
  char v44;
  _QWORD v45[4];
  _QWORD v46[2];

  sub_20EF707E8(a1, a2, (uint64_t)v40);
  v6 = v41;
  if ((v41 & 0x80u) != 0)
    v6 = (unint64_t)v40[1];
  if (!v6)
  {
    sub_20EF5F730(&v39);
    if (**(int **)(v39 + 56) <= 5)
    {
      v14 = *(unsigned __int8 *)(v39 + 72);
      v15 = sub_20E8C31DC(v39, "OSLogSurrogateAppender", 1, 0);
      v16 = v15 ? v15 + 16 : 0;
      if (v14 || v15 != 0)
      {
        v30 = &v39;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v32 = std::chrono::system_clock::now().__d_.__rep_;
        v33 = 5;
        v34 = "unknown file";
        v35 = 359;
        v37 = 0;
        v38 = 0;
        v36 = "unknown function";
        if (*(char *)(a1 + 23) >= 0)
          v18 = (const char *)a1;
        else
          v18 = *(const char **)a1;
        v29 = v18;
        v19 = *v30;
        v20 = (uint64_t *)(*v30 + 16);
        if (*(char *)(*v30 + 39) < 0)
        {
          v22 = *(char **)(v19 + 16);
          v21 = *(char **)(v19 + 24);
        }
        else
        {
          v21 = (char *)*(unsigned __int8 *)(*v30 + 39);
          v22 = (char *)(*v30 + 16);
        }
        category[0] = v22;
        category[1] = v21;
        v23 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
          if (v44 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v24 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v25 = byte_254A4A4F8;
        }
        else
        {
          v24 = *(_QWORD *)&byte_254A4A4F8[8];
          v25 = *(const char **)byte_254A4A4F8;
        }
        v46[0] = v25;
        v46[1] = v24;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v25, category[0]);
        sub_20E86E5A8(&__p.__r_.__value_.__l.__size_, (uint64_t)v46);
        sub_20E86E5A8(v45, (uint64_t)category);
        v26 = __p.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&__p);
        sub_20EF6E620(v16, v20, v26, OS_LOG_TYPE_ERROR, &v29);
        if (v14)
        {
          if (*(char *)(a1 + 23) >= 0)
            v27 = (const char *)a1;
          else
            v27 = *(const char **)a1;
          sub_20E8C003C((uint64_t)&v30, "[%s] didn't allow access to subdirectories.", v27);
          sub_20E863570((uint64_t)&v30);
        }
        sub_20E863714((uint64_t)&v30);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    sub_20E8610C0(&__p, "Failed to access directories during metadata load.");
    std::runtime_error::runtime_error(exception, &__p);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
    LODWORD(exception[1].__vftable) = 1;
    __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  sub_210224314((uint64_t)v40, 2u, "*", 1uLL, a2, (uint64_t *)&__p);
  v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v8 = *((_QWORD *)&v7 + 1) - v7;
  if (*((_QWORD *)&v7 + 1) != (_QWORD)v7)
  {
    if ((unint64_t)v8 >= 0x3333333333333321)
      sub_20E867F44();
    v9 = v8 >> 5;
    v10 = (char *)operator new(160 * (v8 >> 5));
    *a3 = (uint64_t)v10;
    a3[1] = (uint64_t)v10;
    a3[2] = (uint64_t)&v10[160 * v9];
  }
  v30 = a3;
  rep = a2;
  sub_20EF5FCC4((uint64_t)&v30, v7, *((uint64_t *)&v7 + 1));
  v11 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    size = __p.__r_.__value_.__l.__size_;
    v13 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(size - 9) < 0)
          operator delete(*(void **)(size - 32));
        size -= 32;
      }
      while (size != v11);
      v13 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v11;
    operator delete(v13);
  }
  if ((char)v41 < 0)
    operator delete(v40[0]);
}

void sub_20EF5FBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,void *a30,int a31,__int16 a32,char a33,char a34,char a35,int a36,__int16 a37,char a38,char a39)
{
  if (a35 && a34 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void sub_20EF5FCC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  std::string::size_type *p_size;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  _QWORD *v28;
  size_t v29;
  std::string::size_type v30;
  std::string *p_src;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  std::string::size_type v35;
  char v36;
  char *v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::string::size_type v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  std::string::size_type v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::string::size_type v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  const char *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::string::size_type size;
  std::__fs::filesystem::path::__string_view v83;
  _BYTE *v84;
  std::basic_string_view<_CharT, _Traits>::size_type v85;
  std::basic_string_view<_CharT, _Traits>::size_type v86;
  void *v87;
  int v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  std::string *v93;
  uint64_t v94;
  const char *v95;
  size_t v96;
  unsigned __int8 v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  const char *v104;
  size_t v105;
  unsigned __int8 v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  std::string *v113;
  uint64_t v114;
  const char *v115;
  size_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  unsigned __int8 v119;
  const char *v120;
  size_t v121;
  std::string::size_type *v122;
  uint64_t v123;
  uint64_t v124;
  __int128 *v125;
  NSObject *v126;
  uint64_t v127;
  uint64_t v128;
  size_t v129;
  void *v130;
  _QWORD *v131;
  size_t v132;
  size_t v133;
  _BYTE *v134;
  void *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  void ***v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  const char *v145;
  uint64_t v146;
  const char *v147;
  size_t v148;
  unsigned __int8 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  char *v154;
  char *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  unsigned __int8 v166;
  const char *v167;
  size_t v168;
  std::string::size_type *v169;
  uint64_t v170;
  uint64_t v171;
  __int128 *v172;
  NSObject *v173;
  uint64_t v174;
  uint64_t v175;
  size_t v176;
  void *v177;
  _QWORD *v178;
  size_t v179;
  size_t v180;
  _BYTE *v181;
  void *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::string::size_type v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  std::string::size_type v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  const char *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t *v216;
  unsigned __int8 v217;
  char *v219;
  size_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t i;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  void **v228;
  void **v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  void **v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  char *v240;
  char *v241;
  __int128 v242;
  __int128 v243;
  void **v244;
  uint64_t v245;
  void **v246;
  void **v247;
  unint64_t v248;
  char *v249;
  void **v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  void **v256;
  void **v257;
  void **v258;
  void *v259;
  void **v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  void **v264;
  void **v265;
  void **v266;
  int v267;
  unint64_t v268;
  unint64_t v269;
  const char *v271;
  uint64_t v272;
  const char *v273;
  size_t v274;
  unsigned __int8 v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  char *v280;
  char *v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::string::size_type v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  const char *v300;
  std::string::size_type v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  std::string *v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  uint64_t *v325;
  unsigned __int8 v326;
  char *v328;
  size_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t m;
  uint64_t v333;
  unsigned __int8 v334;
  const char *v335;
  size_t v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  void *v340;
  NSObject *v341;
  uint64_t v342;
  uint64_t v343;
  size_t v344;
  std::__shared_weak_count_vtbl *v345;
  std::__shared_weak_count *v346;
  size_t v347;
  size_t v348;
  _QWORD *v349;
  void *v350;
  unsigned __int8 v351;
  const char *v352;
  size_t v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  void *v357;
  NSObject *v358;
  uint64_t v359;
  uint64_t v360;
  size_t v361;
  std::__shared_weak_count_vtbl *v362;
  std::__shared_weak_count *v363;
  size_t v364;
  size_t v365;
  _QWORD *v366;
  void *v367;
  unsigned __int8 v368;
  const char *v369;
  size_t v370;
  void *v371;
  uint64_t v372;
  uint64_t v373;
  void *v374;
  NSObject *v375;
  uint64_t v376;
  uint64_t v377;
  size_t v378;
  std::__shared_weak_count_vtbl *v379;
  std::__shared_weak_count *v380;
  size_t v381;
  size_t v382;
  _QWORD *v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  _QWORD *v387;
  char v388;
  _QWORD *v389;
  uint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  char *v394;
  unint64_t *v395;
  unint64_t v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  _QWORD *v403;
  char v404;
  _QWORD *v405;
  uint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  char *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _QWORD *v419;
  char v420;
  _QWORD *v421;
  uint64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  char *v426;
  unint64_t *v427;
  unint64_t v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  uint64_t v436;
  char *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  uint64_t v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  std::string *v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  uint64_t *v466;
  unsigned __int8 v467;
  char *v469;
  size_t v470;
  __uint64_t v471;
  uint64_t v472;
  uint64_t j;
  uint64_t v474;
  std::__shared_weak_count *v475;
  unint64_t *v476;
  unint64_t v477;
  uint64_t v478;
  char *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  const char *v483;
  uint64_t v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  unint64_t v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  uint64_t v491;
  std::__shared_weak_count *v492;
  unint64_t *v493;
  unint64_t v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  std::__shared_weak_count *v498;
  unint64_t *v499;
  unint64_t v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  const char *v504;
  std::__shared_weak_count *v505;
  unint64_t *v506;
  unint64_t v507;
  uint64_t *v508;
  unsigned __int8 v509;
  char *v511;
  size_t v512;
  __uint64_t v513;
  uint64_t v514;
  uint64_t k;
  uint64_t v516;
  __int128 *v517;
  __int128 *v518;
  void *v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  std::__shared_weak_count *v523;
  unint64_t *v524;
  unint64_t v525;
  uint64_t v526;
  char *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  const char *v531;
  uint64_t v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  uint64_t v539;
  std::__shared_weak_count *v540;
  unint64_t *v541;
  unint64_t v542;
  std::__shared_weak_count *v543;
  unint64_t *v544;
  unint64_t v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  const char *v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  const char *v556;
  const char *v557;
  const char *v558;
  int v559;
  const char *v560;
  const char *v561;
  const char *v562;
  uint64_t v563;
  const char *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  std::string v570;
  __int128 v571;
  __int128 v572;
  uint64_t v573;
  char v574;
  __int128 v575;
  void *v576;
  __int128 *v577;
  uint64_t v578;
  uint64_t v579[2];
  void *object;
  void *v581[2];
  unint64_t v582;
  char v583;
  void *v584[2];
  unint64_t v585;
  char v586;
  os_log_t oslog;
  void *v588[2];
  unint64_t v589;
  char v590;
  void *v591[2];
  unint64_t v592;
  char v593;
  os_log_t v594;
  void *v595[2];
  unint64_t v596;
  char v597;
  void *v598[2];
  unint64_t v599;
  char v600;
  std::string __src;
  uint64_t v602;
  _BYTE category[24];
  _BYTE v604[24];
  __int128 v605;
  char *v606;
  __int128 v607;
  std::__shared_weak_count *v608;
  char *v609;
  std::__shared_weak_count *v610;
  uint64_t v611;
  uint64_t v612;
  _QWORD *v613;
  __int128 v614;
  _BYTE v615[24];
  __int128 v616;
  char *v617;
  __int128 v618;
  std::__shared_weak_count *v619;
  char *v620;
  std::__shared_weak_count *v621;
  uint64_t v622;
  uint64_t v623;
  _QWORD *v624;
  __int128 v625;
  _BYTE v626[24];
  __int128 v627;
  char *v628;
  __int128 v629;
  std::__shared_weak_count *v630;
  char *v631;
  std::__shared_weak_count *v632;
  uint64_t v633;
  uint64_t v634;
  _QWORD *v635;
  __int128 v636;
  timespec v637;
  __uint64_t v638;
  timespec ts;
  uint64_t v640[2];
  void (**v641)();
  void *v642;
  char *v643;
  uint64_t v644;
  uint64_t v645;
  int v646;
  char v647;
  int v648;
  char v649;
  timespec v650;
  __uint64_t v651;
  timespec v652;
  _BYTE v653[64];
  _BYTE v654[24];
  __int128 v655;
  void *v656;
  __int128 v657;
  char *v658[2];
  std::string __p;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  void *v665;
  __int128 v666;
  void *v667;
  __int128 v668;
  char v669;
  uint64_t v670;

  v670 = *MEMORY[0x24BDAC8D0];
  if (a2 != a3)
  {
    v3 = a3;
    v4 = a2;
    v5 = a1;
    do
    {
      memset(v653, 0, 24);
      sub_20E8A9678((std::string *)v653, (std::string *)"ready_to_commit", (std::string *)"");
      if (*(char *)(v4 + 23) < 0)
        sub_20E860C04(&__p, *(void **)v4, *(_QWORD *)(v4 + 8));
      else
        __p = *(std::string *)v4;
      sub_20E8A944C((uint64_t)&__p, (std::__fs::filesystem::path *)v653);
      v6 = (*(uint64_t (**)(_QWORD, std::string *))(**(_QWORD **)(v5 + 8) + 176))(*(_QWORD *)(v5 + 8), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v653[23] & 0x80000000) == 0)
        {
LABEL_9:
          if (!v6)
            goto LABEL_14;
LABEL_13:
          sub_20EF7290C(v4, *(_QWORD *)(v5 + 8));
          goto LABEL_14;
        }
      }
      else if ((v653[23] & 0x80000000) == 0)
      {
        goto LABEL_9;
      }
      operator delete(*(void **)v653);
      if (v6)
        goto LABEL_13;
LABEL_14:
      sub_20EF5F730(v579);
      if (**(int **)(v579[0] + 56) > 3)
        goto LABEL_133;
      v7 = *(unsigned __int8 *)(v579[0] + 72);
      v8 = sub_20E8C31DC(v579[0], "OSLogSurrogateAppender", 1, 0);
      v9 = v8;
      if (!v7 && !v8)
        goto LABEL_133;
      *(_QWORD *)v653 = v579;
      *(std::chrono::steady_clock::time_point *)&v653[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v653[16] = std::chrono::system_clock::now();
      *(_DWORD *)&v653[24] = 3;
      *(_QWORD *)&v653[32] = "unknown file";
      *(_DWORD *)&v653[40] = 371;
      *(_QWORD *)&v653[48] = "unknown function";
      *(_QWORD *)&v653[56] = 0;
      *(_QWORD *)v654 = 0;
      v10 = v4;
      if (*(char *)(v4 + 23) >= 0)
        v11 = (const char *)v4;
      else
        v11 = *(const char **)v4;
      v12 = **(_QWORD **)v653;
      v13 = (const char *)(**(_QWORD **)v653 + 16);
      v556 = v13;
      v562 = v11;
      if (*(char *)(**(_QWORD **)v653 + 39) < 0)
      {
        v13 = *(const char **)(v12 + 16);
        v14 = *(_QWORD *)(v12 + 24);
        v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v16 & 1) != 0)
          goto LABEL_24;
      }
      else
      {
        v14 = *(unsigned __int8 *)(**(_QWORD **)v653 + 39);
        v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v15 & 1) != 0)
          goto LABEL_24;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v570);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v570);
        if ((_BYTE)v571 && SHIBYTE(v570.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v570.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_24:
      if (byte_254A4A4F8[23] >= 0)
        v17 = byte_254A4A4F8;
      else
        v17 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v18 = byte_254A4A4F8[23];
      else
        v18 = *(_QWORD *)&byte_254A4A4F8[8];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v17, v13);
      if (v18 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v18 >= 0x17)
      {
        v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v20 = v18 | 7;
        v21 = v20 + 1;
        p_size = (std::string::size_type *)operator new(v20 + 1);
        *(_QWORD *)&v660 = v21 | 0x8000000000000000;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
        __p.__r_.__value_.__r.__words[2] = v18;
LABEL_37:
        memmove(p_size, v17, v18);
        goto LABEL_38;
      }
      BYTE7(v660) = v18;
      p_size = &__p.__r_.__value_.__l.__size_;
      if (v18)
        goto LABEL_37;
LABEL_38:
      *((_BYTE *)p_size + v18) = 0;
      BYTE8(v660) = 1;
      if (v14 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v14 >= 0x17)
      {
        v24 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v24 = v14 | 7;
        v25 = v24 + 1;
        v22 = (__int128 *)operator new(v24 + 1);
        *(_QWORD *)&v662 = v25 | 0x8000000000000000;
        *(_QWORD *)&v661 = v22;
        *((_QWORD *)&v661 + 1) = v14;
      }
      else
      {
        BYTE7(v662) = v14;
        v22 = &v661;
        if (!v14)
        {
          LOBYTE(v661) = 0;
          BYTE8(v662) = 1;
          v23 = __p.__r_.__value_.__r.__words[0];
          if ((SBYTE7(v662) & 0x80000000) == 0)
            goto LABEL_42;
          goto LABEL_48;
        }
      }
      memmove(v22, v13, v14);
      *((_BYTE *)v22 + v14) = 0;
      BYTE8(v662) = 1;
      v23 = __p.__r_.__value_.__r.__words[0];
      if ((SBYTE7(v662) & 0x80000000) == 0)
      {
LABEL_42:
        v3 = a3;
        v4 = v10;
        if (!BYTE8(v660))
          goto LABEL_51;
        goto LABEL_49;
      }
LABEL_48:
      operator delete((void *)v661);
      v3 = a3;
      v4 = v10;
      if (!BYTE8(v660))
        goto LABEL_51;
LABEL_49:
      if (SBYTE7(v660) < 0)
        operator delete((void *)__p.__r_.__value_.__l.__size_);
LABEL_51:
      if (__p.__r_.__value_.__r.__words[0])
        os_release(__p.__r_.__value_.__l.__data_);
      if (!v9 || !*(_QWORD *)(v9 + 24))
      {
        os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v562;
        v32 = (void *)_os_log_send_and_compose_impl();
        if (!v32)
          goto LABEL_123;
        free(v32);
        if (!v7)
          goto LABEL_128;
        goto LABEL_124;
      }
      v26 = _os_log_pack_size();
      v27 = operator new(v26, (std::align_val_t)8uLL);
      v28 = (_QWORD *)operator new();
      *v28 = &off_24C9ABB80;
      v28[1] = 0;
      v28[2] = 0;
      v28[3] = v27;
      v570.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      v570.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
      v570.__r_.__value_.__r.__words[2] = (std::string::size_type)v28;
      v571 = 0uLL;
      v29 = strlen(v562);
      if (v29 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v30 = v29;
      if (v29 >= 0x17)
      {
        v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v33 = v29 | 7;
        v34 = v33 + 1;
        p_src = (std::string *)operator new(v33 + 1);
        __src.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)p_src;
        __src.__r_.__value_.__l.__size_ = v30;
LABEL_65:
        memcpy(p_src, v562, v30);
        goto LABEL_66;
      }
      *((_BYTE *)&__src.__r_.__value_.__s + 23) = v29;
      p_src = &__src;
      if (v29)
        goto LABEL_65;
LABEL_66:
      p_src->__r_.__value_.__s.__data_[v30] = 0;
      v658[0] = (char *)__src.__r_.__value_.__l.__size_;
      v35 = __src.__r_.__value_.__r.__words[0];
      *(char **)((char *)v658 + 7) = *(char **)((char *)&__src.__r_.__value_.__r.__words[1] + 7);
      v36 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      v37 = (char *)operator new(0x38uLL);
      *((_QWORD *)v37 + 1) = 0;
      *((_QWORD *)v37 + 2) = 0;
      *((_QWORD *)v37 + 3) = off_24C9ABC20;
      *(_QWORD *)v37 = &off_24C9ABBD0;
      v38 = v658[0];
      *((_QWORD *)v37 + 4) = v35;
      *((_QWORD *)v37 + 5) = v38;
      *(char **)(v37 + 47) = *(char **)((char *)v658 + 7);
      v37[55] = v36;
      memset(v658, 0, 15);
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v571 + 1);
      *(_QWORD *)&v571 = v37 + 24;
      *((_QWORD *)&v571 + 1) = v37;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      __p = v570;
      v42 = v571;
      if (v570.__r_.__value_.__r.__words[2])
      {
        v43 = (unint64_t *)(v570.__r_.__value_.__r.__words[2] + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v571 + 1);
      *(_QWORD *)&v660 = v42;
      *((_QWORD *)&v660 + 1) = *((_QWORD *)&v571 + 1);
      if (*((_QWORD *)&v571 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v571 + 1) + 8);
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        *(_QWORD *)&v661 = v42;
        do
          v48 = __ldaxr(v46);
        while (__stlxr(v48 - 1, v46));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      else
      {
        *(_QWORD *)&v661 = v42;
      }
      v49 = (std::__shared_weak_count *)v570.__r_.__value_.__r.__words[2];
      if (v570.__r_.__value_.__r.__words[2])
      {
        v50 = (unint64_t *)(v570.__r_.__value_.__r.__words[2] + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = __p.__r_.__value_.__r.__words[0];
      if (*(char *)(v661 + 31) >= 0)
        v53 = v661 + 8;
      else
        v53 = *(_QWORD *)(v661 + 8);
      v54 = _os_log_pack_fill();
      *(_DWORD *)v54 = 136315138;
      *(_QWORD *)(v54 + 4) = v53;
      v55 = operator new();
      v56 = *(unsigned __int8 *)(v12 + 39);
      v57 = v556;
      if ((v56 & 0x80u) != 0)
      {
        v57 = *(const char **)(v12 + 16);
        v56 = *(_QWORD *)(v12 + 24);
      }
      *(_QWORD *)v55 = v52;
      *(_OWORD *)(v55 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      *(_OWORD *)(v55 + 24) = v660;
      v660 = 0uLL;
      *(_QWORD *)(v55 + 40) = v57;
      *(_QWORD *)(v55 + 48) = v56;
      *(_BYTE *)(v55 + 56) = 1;
      __src.__r_.__value_.__r.__words[0] = 0;
      v570.__r_.__value_.__r.__words[0] = v55;
      (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), &v570);
      v58 = v570.__r_.__value_.__r.__words[0];
      v570.__r_.__value_.__r.__words[0] = 0;
      if (v58)
      {
        v59 = *(std::__shared_weak_count **)(v58 + 32);
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v62 = *(std::__shared_weak_count **)(v58 + 16);
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        MEMORY[0x212BC6398](v58, 0x10F0C40B62ED6C6);
        v65 = __src.__r_.__value_.__r.__words[0];
        __src.__r_.__value_.__r.__words[0] = 0;
        if (v65)
        {
          v66 = *(std::__shared_weak_count **)(v65 + 32);
          if (v66)
          {
            v67 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          v69 = *(std::__shared_weak_count **)(v65 + 16);
          if (v69)
          {
            v70 = (unint64_t *)&v69->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          MEMORY[0x212BC6398](v65, 0x10F0C40B62ED6C6);
        }
      }
      v72 = (std::__shared_weak_count *)*((_QWORD *)&v660 + 1);
      if (!*((_QWORD *)&v660 + 1))
        goto LABEL_119;
      v73 = (unint64_t *)(*((_QWORD *)&v660 + 1) + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
        v75 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
        if (!__p.__r_.__value_.__r.__words[2])
          goto LABEL_123;
      }
      else
      {
LABEL_119:
        v75 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
        if (!__p.__r_.__value_.__r.__words[2])
          goto LABEL_123;
      }
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (v77)
      {
LABEL_123:
        if (!v7)
          goto LABEL_128;
        goto LABEL_124;
      }
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
      if (!v7)
        goto LABEL_128;
LABEL_124:
      if (*(char *)(v4 + 23) >= 0)
        v78 = (const char *)v4;
      else
        v78 = *(const char **)v4;
      sub_20E8C003C((uint64_t)v653, "[%s] exists in mapping directory.", v78);
      sub_20E863570((uint64_t)v653);
LABEL_128:
      sub_20E863570((uint64_t)v653);
      v79 = *(std::__shared_weak_count **)v654;
      if (*(_QWORD *)v654)
      {
        v80 = (unint64_t *)(*(_QWORD *)v654 + 8);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
LABEL_133:
      v5 = a1;
      sub_20EF70694(v4, *(_QWORD *)(a1 + 8), (uint64_t)&__src);
      size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __src.__r_.__value_.__l.__size_;
      if (!size
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MapLoading.cpp", 374, (uint64_t)"!metadata_path.empty()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v83 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)v4);
      if (v83.__size_ > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v83.__size_ >= 0x17)
      {
        v85 = (v83.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v83.__size_ | 7) != 0x17)
          v85 = v83.__size_ | 7;
        v86 = v85 + 1;
        v84 = operator new(v85 + 1);
        *(_QWORD *)&category[16] = v86 | 0x8000000000000000;
        *(_QWORD *)category = v84;
        *(_QWORD *)&category[8] = v83.__size_;
LABEL_144:
        memmove(v84, v83.__data_, v83.__size_);
        goto LABEL_145;
      }
      category[23] = v83.__size_;
      v84 = category;
      if (v83.__size_)
        goto LABEL_144;
LABEL_145:
      v84[v83.__size_] = 0;
      v87 = *(void **)category;
      *(_DWORD *)v653 = *(_DWORD *)&category[16];
      *(_DWORD *)&v653[3] = *(_DWORD *)&category[19];
      v88 = category[23];
      if ((category[23] & 0x80000000) != 0)
      {
        sub_20E860C04(&__p, *(void **)category, *(unint64_t *)&category[8]);
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)category;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = *(_DWORD *)v653;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v653[3];
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = category[23];
      }
      v89 = std::stoull(&__p, 0, 10);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v88 & 0x80000000) == 0)
          goto LABEL_150;
      }
      else if ((v88 & 0x80000000) == 0)
      {
        goto LABEL_150;
      }
      operator delete(v87);
LABEL_150:
      v579[0] = v89;
      v579[1] = 1;
      if (((*(uint64_t (**)(_QWORD, std::string *))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8), &__src) & 1) == 0)
      {
        sub_20EF5F730(&v602);
        if (**(int **)(v602 + 56) > 5)
          goto LABEL_378;
        v98 = *(unsigned __int8 *)(v602 + 72);
        v99 = sub_20E8C31DC(v602, "OSLogSurrogateAppender", 1, 0);
        v100 = v99;
        if (!v98 && !v99)
          goto LABEL_378;
        *(_QWORD *)v653 = &v602;
        *(std::chrono::steady_clock::time_point *)&v653[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v653[16] = std::chrono::system_clock::now();
        *(_DWORD *)&v653[24] = 5;
        *(_QWORD *)&v653[32] = "unknown file";
        *(_DWORD *)&v653[40] = 392;
        *(_QWORD *)&v653[48] = "unknown function";
        *(_QWORD *)&v653[56] = 0;
        *(_QWORD *)v654 = 0;
        v101 = v4;
        if (*(char *)(v4 + 23) >= 0)
          v102 = (const char *)v4;
        else
          v102 = *(const char **)v4;
        v103 = **(_QWORD **)v653;
        v104 = (const char *)(**(_QWORD **)v653 + 16);
        v558 = v104;
        v564 = v102;
        if (*(char *)(**(_QWORD **)v653 + 39) < 0)
        {
          v104 = *(const char **)(v103 + 16);
          v105 = *(_QWORD *)(v103 + 24);
          v119 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v119 & 1) == 0)
          {
LABEL_979:
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v570);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v570);
              if ((_BYTE)v571 && SHIBYTE(v570.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v570.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
          }
        }
        else
        {
          v105 = *(unsigned __int8 *)(**(_QWORD **)v653 + 39);
          v106 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v106 & 1) == 0)
            goto LABEL_979;
        }
        if (byte_254A4A4F8[23] >= 0)
          v120 = byte_254A4A4F8;
        else
          v120 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v121 = byte_254A4A4F8[23];
        else
          v121 = *(_QWORD *)&byte_254A4A4F8[8];
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v120, v104);
        if (v121 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v121 >= 0x17)
        {
          v123 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v121 | 7) != 0x17)
            v123 = v121 | 7;
          v124 = v123 + 1;
          v122 = (std::string::size_type *)operator new(v123 + 1);
          *(_QWORD *)&v660 = v124 | 0x8000000000000000;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v122;
          __p.__r_.__value_.__r.__words[2] = v121;
        }
        else
        {
          BYTE7(v660) = v121;
          v122 = &__p.__r_.__value_.__l.__size_;
          if (!v121)
          {
LABEL_213:
            *((_BYTE *)v122 + v121) = 0;
            BYTE8(v660) = 1;
            if (v105 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v105 >= 0x17)
            {
              v127 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v105 | 7) != 0x17)
                v127 = v105 | 7;
              v128 = v127 + 1;
              v125 = (__int128 *)operator new(v127 + 1);
              *(_QWORD *)&v662 = v128 | 0x8000000000000000;
              *(_QWORD *)&v661 = v125;
              *((_QWORD *)&v661 + 1) = v105;
            }
            else
            {
              BYTE7(v662) = v105;
              v125 = &v661;
              if (!v105)
              {
                LOBYTE(v661) = 0;
                BYTE8(v662) = 1;
                v126 = __p.__r_.__value_.__r.__words[0];
                if ((SBYTE7(v662) & 0x80000000) == 0)
                  goto LABEL_217;
LABEL_223:
                operator delete((void *)v661);
                v3 = a3;
                v4 = v101;
                if (BYTE8(v660))
                  goto LABEL_224;
                goto LABEL_226;
              }
            }
            memmove(v125, v104, v105);
            *((_BYTE *)v125 + v105) = 0;
            BYTE8(v662) = 1;
            v126 = __p.__r_.__value_.__r.__words[0];
            if (SBYTE7(v662) < 0)
              goto LABEL_223;
LABEL_217:
            v3 = a3;
            v4 = v101;
            if (BYTE8(v660))
            {
LABEL_224:
              if (SBYTE7(v660) < 0)
                operator delete((void *)__p.__r_.__value_.__l.__size_);
            }
LABEL_226:
            if (__p.__r_.__value_.__r.__words[0])
              os_release(__p.__r_.__value_.__l.__data_);
            if (v100 && *(_QWORD *)(v100 + 24))
            {
              v129 = _os_log_pack_size();
              v130 = operator new(v129, (std::align_val_t)8uLL);
              v131 = (_QWORD *)operator new();
              *v131 = &off_24C9ABB80;
              v131[1] = 0;
              v131[2] = 0;
              v131[3] = v130;
              v570.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
              v570.__r_.__value_.__l.__size_ = (std::string::size_type)v130;
              v570.__r_.__value_.__r.__words[2] = (std::string::size_type)v131;
              v571 = 0uLL;
              v132 = strlen(v564);
              if (v132 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v133 = v132;
              if (v132 >= 0x17)
              {
                v150 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v132 | 7) != 0x17)
                  v150 = v132 | 7;
                v151 = v150 + 1;
                v134 = operator new(v150 + 1);
                *(_QWORD *)&category[16] = v151 | 0x8000000000000000;
                *(_QWORD *)category = v134;
                *(_QWORD *)&category[8] = v133;
              }
              else
              {
                category[23] = v132;
                v134 = category;
                if (!v132)
                  goto LABEL_268;
              }
              memcpy(v134, v564, v133);
LABEL_268:
              v134[v133] = 0;
              v152 = *(_QWORD *)category;
              v658[0] = *(char **)&category[8];
              *(char **)((char *)v658 + 7) = *(char **)&category[15];
              v153 = category[23];
              v154 = (char *)operator new(0x38uLL);
              *((_QWORD *)v154 + 1) = 0;
              *((_QWORD *)v154 + 2) = 0;
              *((_QWORD *)v154 + 3) = off_24C9ABC20;
              *(_QWORD *)v154 = &off_24C9ABBD0;
              v155 = v658[0];
              *((_QWORD *)v154 + 4) = v152;
              *((_QWORD *)v154 + 5) = v155;
              *(char **)(v154 + 47) = *(char **)((char *)v658 + 7);
              v154[55] = v153;
              memset(v658, 0, 15);
              v156 = (std::__shared_weak_count *)*((_QWORD *)&v571 + 1);
              *(_QWORD *)&v571 = v154 + 24;
              *((_QWORD *)&v571 + 1) = v154;
              if (v156)
              {
                v157 = (unint64_t *)&v156->__shared_owners_;
                do
                  v158 = __ldaxr(v157);
                while (__stlxr(v158 - 1, v157));
                if (!v158)
                {
                  ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                  std::__shared_weak_count::__release_weak(v156);
                }
              }
              __p = v570;
              v159 = v571;
              if (v570.__r_.__value_.__r.__words[2])
              {
                v160 = (unint64_t *)(v570.__r_.__value_.__r.__words[2] + 8);
                do
                  v161 = __ldxr(v160);
                while (__stxr(v161 + 1, v160));
              }
              v162 = (std::__shared_weak_count *)*((_QWORD *)&v571 + 1);
              *(_QWORD *)&v660 = v159;
              *((_QWORD *)&v660 + 1) = *((_QWORD *)&v571 + 1);
              if (*((_QWORD *)&v571 + 1))
              {
                v163 = (unint64_t *)(*((_QWORD *)&v571 + 1) + 8);
                do
                  v164 = __ldxr(v163);
                while (__stxr(v164 + 1, v163));
                *(_QWORD *)&v661 = v159;
                do
                  v165 = __ldaxr(v163);
                while (__stlxr(v165 - 1, v163));
                if (!v165)
                {
                  ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                  std::__shared_weak_count::__release_weak(v162);
                }
              }
              else
              {
                *(_QWORD *)&v661 = v159;
              }
              v183 = (std::__shared_weak_count *)v570.__r_.__value_.__r.__words[2];
              if (v570.__r_.__value_.__r.__words[2])
              {
                v184 = (unint64_t *)(v570.__r_.__value_.__r.__words[2] + 8);
                do
                  v185 = __ldaxr(v184);
                while (__stlxr(v185 - 1, v184));
                if (!v185)
                {
                  ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                  std::__shared_weak_count::__release_weak(v183);
                }
              }
              v186 = __p.__r_.__value_.__r.__words[0];
              if (*(char *)(v661 + 31) >= 0)
                v187 = v661 + 8;
              else
                v187 = *(_QWORD *)(v661 + 8);
              v188 = _os_log_pack_fill();
              *(_DWORD *)v188 = 136315138;
              *(_QWORD *)(v188 + 4) = v187;
              v189 = operator new();
              v190 = *(unsigned __int8 *)(v103 + 39);
              v191 = v558;
              if ((v190 & 0x80u) != 0)
              {
                v191 = *(const char **)(v103 + 16);
                v190 = *(_QWORD *)(v103 + 24);
              }
              *(_QWORD *)v189 = v186;
              *(_OWORD *)(v189 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
              *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
              *(_OWORD *)(v189 + 24) = v660;
              v660 = 0uLL;
              *(_QWORD *)(v189 + 40) = v191;
              *(_QWORD *)(v189 + 48) = v190;
              *(_BYTE *)(v189 + 56) = 16;
              *(_QWORD *)category = 0;
              v570.__r_.__value_.__r.__words[0] = v189;
              (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v100 + 24) + 40))(*(_QWORD *)(v100 + 24), &v570);
              v192 = v570.__r_.__value_.__r.__words[0];
              v570.__r_.__value_.__r.__words[0] = 0;
              if (v192)
              {
                v193 = *(std::__shared_weak_count **)(v192 + 32);
                if (v193)
                {
                  v194 = (unint64_t *)&v193->__shared_owners_;
                  do
                    v195 = __ldaxr(v194);
                  while (__stlxr(v195 - 1, v194));
                  if (!v195)
                  {
                    ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                    std::__shared_weak_count::__release_weak(v193);
                  }
                }
                v196 = *(std::__shared_weak_count **)(v192 + 16);
                if (v196)
                {
                  v197 = (unint64_t *)&v196->__shared_owners_;
                  do
                    v198 = __ldaxr(v197);
                  while (__stlxr(v198 - 1, v197));
                  if (!v198)
                  {
                    ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                    std::__shared_weak_count::__release_weak(v196);
                  }
                }
                MEMORY[0x212BC6398](v192, 0x10F0C40B62ED6C6);
                v199 = *(_QWORD *)category;
                *(_QWORD *)category = 0;
                if (v199)
                {
                  v200 = *(std::__shared_weak_count **)(v199 + 32);
                  if (v200)
                  {
                    v201 = (unint64_t *)&v200->__shared_owners_;
                    do
                      v202 = __ldaxr(v201);
                    while (__stlxr(v202 - 1, v201));
                    if (!v202)
                    {
                      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                      std::__shared_weak_count::__release_weak(v200);
                    }
                  }
                  v203 = *(std::__shared_weak_count **)(v199 + 16);
                  if (v203)
                  {
                    v204 = (unint64_t *)&v203->__shared_owners_;
                    do
                      v205 = __ldaxr(v204);
                    while (__stlxr(v205 - 1, v204));
                    if (!v205)
                    {
                      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                      std::__shared_weak_count::__release_weak(v203);
                    }
                  }
                  MEMORY[0x212BC6398](v199, 0x10F0C40B62ED6C6);
                }
              }
              v206 = (std::__shared_weak_count *)*((_QWORD *)&v660 + 1);
              if (*((_QWORD *)&v660 + 1))
              {
                v207 = (unint64_t *)(*((_QWORD *)&v660 + 1) + 8);
                do
                  v208 = __ldaxr(v207);
                while (__stlxr(v208 - 1, v207));
                if (!v208)
                {
                  ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                  std::__shared_weak_count::__release_weak(v206);
                  v209 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                  if (__p.__r_.__value_.__r.__words[2])
                    goto LABEL_365;
                  goto LABEL_368;
                }
              }
              v209 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
              if (!__p.__r_.__value_.__r.__words[2])
                goto LABEL_368;
LABEL_365:
              v210 = (unint64_t *)&v209->__shared_owners_;
              do
                v211 = __ldaxr(v210);
              while (__stlxr(v211 - 1, v210));
              if (v211)
              {
LABEL_368:
                if (v98)
                  goto LABEL_369;
LABEL_373:
                sub_20E863570((uint64_t)v653);
                v213 = *(std::__shared_weak_count **)v654;
                if (*(_QWORD *)v654)
                {
                  v214 = (unint64_t *)(*(_QWORD *)v654 + 8);
                  do
                    v215 = __ldaxr(v214);
                  while (__stlxr(v215 - 1, v214));
                  if (!v215)
                  {
                    ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                    std::__shared_weak_count::__release_weak(v213);
                  }
                }
LABEL_378:
                v216 = sub_210219C18();
                v217 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
                v5 = a1;
                if ((v217 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
                {
                  __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DDD0);
                }
                if (atomic_load(&qword_254A5A450))
                {
                  LODWORD(__p.__r_.__value_.__l.__data_) = 134218242;
                  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v579[0];
                  WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"MISS";
                  v219 = (char *)_os_log_send_and_compose_impl();
                  v220 = strlen(v219);
                  *(_QWORD *)v653 = 0;
                  pthread_threadid_np(0, (__uint64_t *)v653);
                  v221 = *(_QWORD *)v653;
                  timespec_get((timespec *)v653, 1);
                  sub_210219E20(&__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v216 + 1), (__int128 *)(v216 + 5), "MappingIOLoadMeta:SID:%llu, TYPE:%s", 0x23uLL, v219, v220, v221, v653);
                  std::mutex::lock(&stru_254A5A410);
                  v222 = qword_254A5A458;
                  for (i = unk_254A5A460; v222 != i; v222 += 40)
                  {
                    v224 = *(_QWORD *)(v222 + 32);
                    if (!v224)
                      sub_20E86D37C();
                    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v224 + 48))(v224, &__p);
                  }
                  std::mutex::unlock(&stru_254A5A410);
                  if (SBYTE7(v668) < 0)
                  {
                    operator delete(*((void **)&v666 + 1));
                    if (SBYTE7(v666) < 0)
                      goto LABEL_388;
LABEL_385:
                    if ((_BYTE)v664)
                    {
LABEL_389:
                      if (SHIBYTE(v663) < 0)
                        operator delete(*((void **)&v662 + 1));
                    }
                  }
                  else
                  {
                    if ((SBYTE7(v666) & 0x80000000) == 0)
                      goto LABEL_385;
LABEL_388:
                    operator delete(*((void **)&v664 + 1));
                    if ((_BYTE)v664)
                      goto LABEL_389;
                  }
                  if ((_BYTE)v662 && SHIBYTE(v661) < 0)
                    operator delete(*((void **)&v660 + 1));
                  if (SBYTE7(v660) < 0)
                  {
                    operator delete((void *)__p.__r_.__value_.__l.__size_);
                    if (v219)
LABEL_396:
                      free(v219);
                  }
                  else if (v219)
                  {
                    goto LABEL_396;
                  }
                }
                if (os_signpost_enabled((os_log_t)*v216))
                {
                  LODWORD(__p.__r_.__value_.__l.__data_) = 134218242;
                  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v579[0];
                  WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"MISS";
                  _os_signpost_emit_unreliably_with_name_impl();
                }
                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 240))(*(_QWORD *)(a1 + 8), v4);
                goto LABEL_400;
              }
              ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
              std::__shared_weak_count::__release_weak(v209);
              if (!v98)
                goto LABEL_373;
            }
            else
            {
              os_log_type_enabled(v126, OS_LOG_TYPE_ERROR);
              LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v564;
              v135 = (void *)_os_log_send_and_compose_impl();
              if (!v135)
                goto LABEL_368;
              free(v135);
              if (!v98)
                goto LABEL_373;
            }
LABEL_369:
            if (*(char *)(v4 + 23) >= 0)
              v212 = (const char *)v4;
            else
              v212 = *(const char **)v4;
            sub_20E8C003C((uint64_t)v653, "[%s] does not have metadata.", v212);
            sub_20E863570((uint64_t)v653);
            goto LABEL_373;
          }
        }
        memmove(v122, v120, v121);
        goto LABEL_213;
      }
      (*(void (**)(std::string *__return_ptr, _QWORD, std::string *))(**(_QWORD **)(a1 + 8) + 272))(&__p, *(_QWORD *)(a1 + 8), &__src);
      if ((__p.__r_.__value_.__r.__words[0] & 0x10000000000) != 0)
      {
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          sub_20E860C04(&__p, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
        else
          __p = __src;
        (*(void (**)(_BYTE *__return_ptr, _QWORD, std::string *, uint64_t))(**(_QWORD **)(a1 + 8) + 368))(category, *(_QWORD *)(a1 + 8), &__p, 8);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v107 = *(_QWORD *)&category[8];
          if (*(_QWORD *)&category[8])
            goto LABEL_177;
LABEL_187:
          sub_20EF5F730(&v570);
          if (**(int **)(v570.__r_.__value_.__r.__words[0] + 56) > 5)
            goto LABEL_801;
          v110 = *(unsigned __int8 *)(v570.__r_.__value_.__r.__words[0] + 72);
          v111 = sub_20E8C31DC((uint64_t)v570.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
          v112 = v111;
          if (!v110 && !v111)
            goto LABEL_801;
          v559 = v110;
          v565 = v4;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v570;
          __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v660) = 5;
          *((_QWORD *)&v660 + 1) = "unknown file";
          LODWORD(v661) = 408;
          *((_QWORD *)&v661 + 1) = "unknown function";
          v662 = 0uLL;
          if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v113 = &__src;
          else
            v113 = (std::string *)__src.__r_.__value_.__r.__words[0];
          v114 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v115 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v117 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
            v115 = *(const char **)(v114 + 16);
            v116 = *(_QWORD *)(v114 + 24);
            v334 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v334 & 1) == 0)
            {
LABEL_995:
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v653);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v653);
                if (v653[24] && (v653[23] & 0x80000000) != 0)
                  operator delete(*(void **)v653);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
            }
          }
          else
          {
            v116 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
            v117 = *(_QWORD *)__p.__r_.__value_.__l.__data_ + 16;
            v118 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v118 & 1) == 0)
              goto LABEL_995;
          }
          if (byte_254A4A4F8[23] >= 0)
            v335 = byte_254A4A4F8;
          else
            v335 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v336 = byte_254A4A4F8[23];
          else
            v336 = *(_QWORD *)&byte_254A4A4F8[8];
          object = os_log_create(v335, v115);
          if (v336 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v336 >= 0x17)
          {
            v338 = (v336 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v336 | 7) != 0x17)
              v338 = v336 | 7;
            v339 = v338 + 1;
            v337 = operator new(v338 + 1);
            v582 = v339 | 0x8000000000000000;
            v581[0] = v337;
            v581[1] = (void *)v336;
          }
          else
          {
            HIBYTE(v582) = v336;
            v337 = v581;
            if (!v336)
            {
LABEL_585:
              *((_BYTE *)v337 + v336) = 0;
              v583 = 1;
              if (v116 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v116 >= 0x17)
              {
                v342 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v116 | 7) != 0x17)
                  v342 = v116 | 7;
                v343 = v342 + 1;
                v340 = operator new(v342 + 1);
                v585 = v343 | 0x8000000000000000;
                v584[0] = v340;
                v584[1] = (void *)v116;
              }
              else
              {
                HIBYTE(v585) = v116;
                v340 = v584;
                if (!v116)
                {
                  LOBYTE(v584[0]) = 0;
                  v586 = 1;
                  v341 = object;
                  if ((SHIBYTE(v585) & 0x80000000) == 0)
                    goto LABEL_589;
LABEL_595:
                  operator delete(v584[0]);
                  v3 = a3;
                  v4 = v565;
                  if (v583)
                    goto LABEL_596;
                  goto LABEL_598;
                }
              }
              memmove(v340, v115, v116);
              *((_BYTE *)v340 + v116) = 0;
              v586 = 1;
              v341 = object;
              if (SHIBYTE(v585) < 0)
                goto LABEL_595;
LABEL_589:
              v3 = a3;
              v4 = v565;
              if (v583)
              {
LABEL_596:
                if (SHIBYTE(v582) < 0)
                  operator delete(v581[0]);
              }
LABEL_598:
              if (object)
                os_release(object);
              if (v112 && *(_QWORD *)(v112 + 24))
              {
                v344 = _os_log_pack_size();
                v345 = (std::__shared_weak_count_vtbl *)operator new(v344, (std::align_val_t)8uLL);
                v346 = (std::__shared_weak_count *)operator new();
                v346->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v346->__shared_owners_ = 0;
                v346->__shared_weak_owners_ = 0;
                v346[1].__vftable = v345;
                *(_QWORD *)&v607 = v345;
                *((_QWORD *)&v607 + 1) = v345;
                v608 = v346;
                v609 = 0;
                v610 = 0;
                v347 = strlen((const char *)v113);
                if (v347 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v348 = v347;
                if (v347 >= 0x17)
                {
                  v385 = (v347 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v347 | 7) != 0x17)
                    v385 = v347 | 7;
                  v386 = v385 + 1;
                  v349 = operator new(v385 + 1);
                  *((_QWORD *)&v614 + 1) = v386 | 0x8000000000000000;
                  v613 = v349;
                  *(_QWORD *)&v614 = v348;
                }
                else
                {
                  HIBYTE(v614) = v347;
                  v349 = &v613;
                  if (!v347)
                    goto LABEL_692;
                }
                memcpy(v349, v113, v348);
LABEL_692:
                *((_BYTE *)v349 + v348) = 0;
                v387 = v613;
                *(_QWORD *)v653 = v614;
                *(_QWORD *)&v653[7] = *(_QWORD *)((char *)&v614 + 7);
                v388 = HIBYTE(v614);
                v389 = operator new(0x38uLL);
                v389[1] = 0;
                v389[2] = 0;
                v389[3] = off_24C9ABC20;
                *v389 = &off_24C9ABBD0;
                v390 = *(_QWORD *)v653;
                v389[4] = v387;
                v389[5] = v390;
                *(_QWORD *)((char *)v389 + 47) = *(_QWORD *)&v653[7];
                *((_BYTE *)v389 + 55) = v388;
                *(_QWORD *)v653 = 0;
                *(_QWORD *)&v653[7] = 0;
                v391 = v610;
                v609 = (char *)(v389 + 3);
                v610 = (std::__shared_weak_count *)v389;
                if (v391)
                {
                  v392 = (unint64_t *)&v391->__shared_owners_;
                  do
                    v393 = __ldaxr(v392);
                  while (__stlxr(v393 - 1, v392));
                  if (!v393)
                  {
                    ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
                    std::__shared_weak_count::__release_weak(v391);
                  }
                }
                *(_OWORD *)v604 = v607;
                v394 = v609;
                *(_QWORD *)&v604[16] = v608;
                if (v608)
                {
                  v395 = (unint64_t *)&v608->__shared_owners_;
                  do
                    v396 = __ldxr(v395);
                  while (__stxr(v396 + 1, v395));
                }
                v397 = v610;
                *(_QWORD *)&v605 = v394;
                *((_QWORD *)&v605 + 1) = v610;
                if (v610)
                {
                  v398 = (unint64_t *)&v610->__shared_owners_;
                  do
                    v399 = __ldxr(v398);
                  while (__stxr(v399 + 1, v398));
                  v606 = v394;
                  do
                    v400 = __ldaxr(v398);
                  while (__stlxr(v400 - 1, v398));
                  if (!v400)
                  {
                    ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
                    std::__shared_weak_count::__release_weak(v397);
                  }
                }
                else
                {
                  v606 = v394;
                }
                v433 = v608;
                if (v608)
                {
                  v434 = (unint64_t *)&v608->__shared_owners_;
                  do
                    v435 = __ldaxr(v434);
                  while (__stlxr(v435 - 1, v434));
                  if (!v435)
                  {
                    ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
                    std::__shared_weak_count::__release_weak(v433);
                  }
                }
                v436 = *(_QWORD *)v604;
                if (v606[31] >= 0)
                  v437 = v606 + 8;
                else
                  v437 = (char *)*((_QWORD *)v606 + 1);
                v438 = _os_log_pack_fill();
                *(_DWORD *)v438 = 136315138;
                *(_QWORD *)(v438 + 4) = v437;
                v439 = operator new();
                v440 = *(unsigned __int8 *)(v114 + 39);
                if ((v440 & 0x80u) == 0)
                  v441 = v117;
                else
                  v441 = *(_QWORD *)(v114 + 16);
                if ((v440 & 0x80u) != 0)
                  v440 = *(_QWORD *)(v114 + 24);
                *(_QWORD *)v439 = v436;
                *(_OWORD *)(v439 + 8) = *(_OWORD *)&v604[8];
                *(_QWORD *)&v604[8] = 0;
                *(_QWORD *)&v604[16] = 0;
                *(_OWORD *)(v439 + 24) = v605;
                v605 = 0uLL;
                *(_QWORD *)(v439 + 40) = v441;
                *(_QWORD *)(v439 + 48) = v440;
                *(_BYTE *)(v439 + 56) = 16;
                v611 = 0;
                v612 = v439;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v112 + 24) + 40))(*(_QWORD *)(v112 + 24), &v612);
                v442 = v612;
                v612 = 0;
                v5 = a1;
                if (v442)
                {
                  v443 = *(std::__shared_weak_count **)(v442 + 32);
                  if (v443)
                  {
                    v444 = (unint64_t *)&v443->__shared_owners_;
                    do
                      v445 = __ldaxr(v444);
                    while (__stlxr(v445 - 1, v444));
                    if (!v445)
                    {
                      ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
                      std::__shared_weak_count::__release_weak(v443);
                    }
                  }
                  v446 = *(std::__shared_weak_count **)(v442 + 16);
                  if (v446)
                  {
                    v447 = (unint64_t *)&v446->__shared_owners_;
                    do
                      v448 = __ldaxr(v447);
                    while (__stlxr(v448 - 1, v447));
                    if (!v448)
                    {
                      ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
                      std::__shared_weak_count::__release_weak(v446);
                    }
                  }
                  MEMORY[0x212BC6398](v442, 0x10F0C40B62ED6C6);
                  v449 = v611;
                  v611 = 0;
                  if (v449)
                  {
                    v450 = *(std::__shared_weak_count **)(v449 + 32);
                    if (v450)
                    {
                      v451 = (unint64_t *)&v450->__shared_owners_;
                      do
                        v452 = __ldaxr(v451);
                      while (__stlxr(v452 - 1, v451));
                      if (!v452)
                      {
                        ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
                        std::__shared_weak_count::__release_weak(v450);
                      }
                    }
                    v453 = *(std::__shared_weak_count **)(v449 + 16);
                    if (v453)
                    {
                      v454 = (unint64_t *)&v453->__shared_owners_;
                      do
                        v455 = __ldaxr(v454);
                      while (__stlxr(v455 - 1, v454));
                      if (!v455)
                      {
                        ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
                        std::__shared_weak_count::__release_weak(v453);
                      }
                    }
                    MEMORY[0x212BC6398](v449, 0x10F0C40B62ED6C6);
                  }
                }
                v456 = (std::__shared_weak_count *)*((_QWORD *)&v605 + 1);
                if (*((_QWORD *)&v605 + 1))
                {
                  v457 = (unint64_t *)(*((_QWORD *)&v605 + 1) + 8);
                  do
                    v458 = __ldaxr(v457);
                  while (__stlxr(v458 - 1, v457));
                  if (!v458)
                  {
                    ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
                    std::__shared_weak_count::__release_weak(v456);
                  }
                }
                v459 = *(std::__shared_weak_count **)&v604[16];
                if (*(_QWORD *)&v604[16])
                {
                  v460 = (unint64_t *)(*(_QWORD *)&v604[16] + 8);
                  do
                    v461 = __ldaxr(v460);
                  while (__stlxr(v461 - 1, v460));
                  if (!v461)
                  {
                    ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
                    std::__shared_weak_count::__release_weak(v459);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v341, OS_LOG_TYPE_ERROR);
                *(_DWORD *)v653 = 136315138;
                *(_QWORD *)&v653[4] = v113;
                v350 = (void *)_os_log_send_and_compose_impl();
                v5 = a1;
                if (v350)
                  free(v350);
              }
              if (v559)
              {
                v462 = &__src;
                if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v462 = (std::string *)__src.__r_.__value_.__r.__words[0];
                sub_20E8C003C((uint64_t)&__p, "[%s] had a bad istream.", (const char *)v462);
                sub_20E863570((uint64_t)&__p);
              }
              sub_20E863570((uint64_t)&__p);
              v463 = (std::__shared_weak_count *)*((_QWORD *)&v662 + 1);
              if (*((_QWORD *)&v662 + 1))
              {
                v464 = (unint64_t *)(*((_QWORD *)&v662 + 1) + 8);
                do
                  v465 = __ldaxr(v464);
                while (__stlxr(v465 - 1, v464));
                if (!v465)
                {
                  ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
                  std::__shared_weak_count::__release_weak(v463);
                }
              }
LABEL_801:
              v466 = sub_210219C18();
              v467 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
              if ((v467 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
              {
                __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DDD0);
              }
              if (atomic_load(&qword_254A5A450))
              {
                LODWORD(__p.__r_.__value_.__l.__data_) = 134218242;
                *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v579[0];
                WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"STRM";
                v469 = (char *)_os_log_send_and_compose_impl();
                v470 = strlen(v469);
                v638 = 0;
                pthread_threadid_np(0, &v638);
                v471 = v638;
                timespec_get(&ts, 1);
                v637 = ts;
                sub_210219E20(&__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v466 + 1), (__int128 *)(v466 + 5), "MappingIOLoadMeta:SID:%llu, TYPE:%s", 0x23uLL, v469, v470, v471, &v637);
                std::mutex::lock(&stru_254A5A410);
                v472 = qword_254A5A458;
                for (j = unk_254A5A460; v472 != j; v472 += 40)
                {
                  v474 = *(_QWORD *)(v472 + 32);
                  if (!v474)
                    sub_20E86D37C();
                  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v474 + 48))(v474, &__p);
                }
                std::mutex::unlock(&stru_254A5A410);
                if (SBYTE7(v668) < 0)
                {
                  operator delete(*((void **)&v666 + 1));
                  if (SBYTE7(v666) < 0)
                    goto LABEL_811;
LABEL_808:
                  if ((_BYTE)v664)
                  {
LABEL_812:
                    if (SHIBYTE(v663) < 0)
                      operator delete(*((void **)&v662 + 1));
                  }
                }
                else
                {
                  if ((SBYTE7(v666) & 0x80000000) == 0)
                    goto LABEL_808;
LABEL_811:
                  operator delete(*((void **)&v664 + 1));
                  if ((_BYTE)v664)
                    goto LABEL_812;
                }
                if ((_BYTE)v662 && SHIBYTE(v661) < 0)
                  operator delete(*((void **)&v660 + 1));
                if (SBYTE7(v660) < 0)
                  operator delete((void *)__p.__r_.__value_.__l.__size_);
                if (v469)
                  free(v469);
              }
              if (os_signpost_enabled((os_log_t)*v466))
              {
                LODWORD(__p.__r_.__value_.__l.__data_) = 134218242;
                *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v579[0];
                WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"STRM";
                _os_signpost_emit_unreliably_with_name_impl();
              }
LABEL_908:
              v520 = *(std::__shared_weak_count **)&category[16];
              if (*(_QWORD *)&category[16])
              {
                v521 = (unint64_t *)(*(_QWORD *)&category[16] + 8);
                do
                  v522 = __ldaxr(v521);
                while (__stlxr(v522 - 1, v521));
                if (!v522)
                {
                  ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
                  std::__shared_weak_count::__release_weak(v520);
                }
              }
              goto LABEL_400;
            }
          }
          memmove(v337, v335, v336);
          goto LABEL_585;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        v107 = *(_QWORD *)&category[8];
        if (!*(_QWORD *)&category[8])
          goto LABEL_187;
LABEL_177:
        v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 16))(v107);
        v645 = 1;
        sub_20E9EECEC(v640, &v645, v108, 0x2800uLL);
        v640[0] = (uint64_t)&off_24C9B0298;
        v641 = (void (**)())&unk_24C9B03E0;
        v570.__r_.__value_.__s.__data_[8] = 0;
        v574 = 0;
        v577 = 0;
        v578 = 0;
        v576 = 0;
        v646 = 2;
        sub_20E9EDADC(v644, &v646);
        v109 = v646;
        sub_20E90A71C(&v641);
        if (v109 >= 2)
          v109 = 2;
        sub_20E9EDE6C(v644, &v570);
        v647 = 0;
        sub_20E9ED7B4(v644, &v647);
        if (v647)
        {
          if (!v574)
          {
            v573 = 0;
            v571 = 0u;
            v572 = 0u;
            *(_OWORD *)&v570.__r_.__value_.__r.__words[1] = 0u;
            v574 = 1;
          }
          v648 = 1;
          sub_20E9EDADC(v644, &v648);
          sub_20E90A71C(&v641);
          sub_20E9EE078(v644, (double *)&v570.__r_.__value_.__l.__size_);
          sub_20E9EE078(v644, (double *)&v570.__r_.__value_.__r.__words[2]);
          sub_20E9EE078(v644, (double *)&v571);
          sub_20E9EE078(v644, (double *)&v571 + 1);
          sub_20E9EE078(v644, (double *)&v572);
          sub_20E9EE078(v644, (double *)&v572 + 1);
          v649 = 0;
          sub_20E9ED7B4(v644, &v649);
          if (v649)
          {
            if (!BYTE4(v573))
            {
              LODWORD(v573) = 0;
              BYTE4(v573) = 1;
            }
            sub_20E9EDA2C(v644, &v573);
          }
          else if (BYTE4(v573))
          {
            BYTE4(v573) = 0;
          }
          v136 = v643;
          v137 = *((_QWORD *)v136 - 2)
               - ((uint64_t (*)(uint64_t))v641[4])((uint64_t)&v641)
               + *((_QWORD *)v136 - 1);
          if (v137)
            ((void (*)(uint64_t, unint64_t))v641[5])((uint64_t)&v641, v137);
          v643 -= 16;
        }
        else if (v574)
        {
          v574 = 0;
        }
        sub_20E9EDD84(v644, &v575);
        sub_20E9EDCA8(v644, (_QWORD *)&v575 + 1);
        if (v109 >= 2)
          sub_20EAC02F0((uint64_t)v640, (uint64_t)&v576);
        v138 = v643;
        v139 = *((_QWORD *)v138 - 2)
             - ((uint64_t (*)(uint64_t))v641[4])((uint64_t)&v641)
             + *((_QWORD *)v138 - 1);
        if (v139)
          ((void (*)(uint64_t, unint64_t))v641[5])((uint64_t)&v641, v139);
        v140 = v644;
        v640[0] = (uint64_t)&off_24C9B71C0;
        v641 = (void (**)())&unk_24C9B7308;
        v643 -= 16;
        v644 = 0;
        if (v140)
        {
          sub_20E9EF740((_QWORD *)(v140 + 8));
          MEMORY[0x212BC6398](v140, 0x10F2C40853B94B7);
        }
        v641 = off_24C9B7428;
        if (v642)
        {
          v643 = (char *)v642;
          operator delete(v642);
        }
        if (v570.__r_.__value_.__r.__words[0] == v89)
        {
          v141 = *(void ****)a1;
          *(_QWORD *)v653 = v89;
          v653[8] = 0;
          v654[0] = 0;
          *(_OWORD *)&v654[8] = v575;
          v656 = 0;
          v655 = 0uLL;
          sub_20E8ADB20((char *)&v655, (__int128 *)v576, v577, 0xAAAAAAAAAAAAAAABLL * (((char *)v577 - (_BYTE *)v576) >> 3));
          v657 = 0uLL;
          if (v574
            && (*(_DWORD *)&v653[56] = v573,
                v653[60] = BYTE4(v573),
                *(_OWORD *)&v653[8] = *(_OWORD *)&v570.__r_.__value_.__r.__words[1],
                *(_OWORD *)&v653[24] = v571,
                *(_OWORD *)&v653[40] = v572,
                !v654[0]))
          {
            v654[0] = 1;
            if (*(char *)(v4 + 23) < 0)
              goto LABEL_405;
LABEL_254:
            __p = *(std::string *)v4;
          }
          else
          {
            if ((*(char *)(v4 + 23) & 0x80000000) == 0)
              goto LABEL_254;
LABEL_405:
            sub_20E860C04(&__p, *(void **)v4, *(_QWORD *)(v4 + 8));
          }
          v662 = *(_OWORD *)&v653[32];
          v663 = *(_OWORD *)&v653[48];
          v664 = *(_OWORD *)v654;
          v225 = v655;
          v665 = *(void **)&v654[16];
          v660 = *(_OWORD *)v653;
          v661 = *(_OWORD *)&v653[16];
          v226 = *((_QWORD *)&v655 + 1);
          v227 = v656;
          v666 = v655;
          v667 = v656;
          v656 = 0;
          v655 = 0uLL;
          v668 = v657;
          v669 = 1;
          v228 = v141[1];
          v229 = v141[2];
          if (v228 >= v229)
          {
            v236 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v228 - (char *)*v141) >> 5);
            v237 = v236 + 1;
            if (v236 + 1 > 0x199999999999999)
              sub_20E867F44();
            v238 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v229 - (char *)*v141) >> 5);
            if (2 * v238 > v237)
              v237 = 2 * v238;
            if (v238 >= 0xCCCCCCCCCCCCCCLL)
              v239 = 0x199999999999999;
            else
              v239 = v237;
            if (v239)
            {
              if (v239 > 0x199999999999999)
                sub_20E877A38();
              v240 = (char *)operator new(160 * v239);
            }
            else
            {
              v240 = 0;
            }
            v241 = &v240[160 * v236];
            *(_OWORD *)v241 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v242 = *(_OWORD *)&v653[48];
            *(_OWORD *)(v241 + 56) = *(_OWORD *)&v653[32];
            *(_OWORD *)(v241 + 72) = v242;
            *(_OWORD *)(v241 + 88) = *(_OWORD *)v654;
            v243 = *(_OWORD *)&v653[16];
            *(_OWORD *)(v241 + 24) = *(_OWORD *)v653;
            v244 = (void **)&v240[160 * v239];
            *((_QWORD *)v241 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            memset(&__p, 0, sizeof(__p));
            v245 = *(_QWORD *)&v654[16];
            *(_OWORD *)(v241 + 40) = v243;
            *((_QWORD *)v241 + 13) = v245;
            *((_QWORD *)v241 + 14) = v225;
            *((_QWORD *)v241 + 15) = v226;
            *((_QWORD *)v241 + 16) = v227;
            v666 = 0uLL;
            v667 = 0;
            *(_OWORD *)(v241 + 136) = v657;
            v241[152] = 1;
            v235 = (void **)(v241 + 160);
            v246 = *v141;
            v247 = v141[1];
            if (v247 == *v141)
            {
              *v141 = (void **)v241;
              v141[1] = v235;
              v141[2] = v244;
            }
            else
            {
              v248 = 0;
              do
              {
                v249 = &v241[v248];
                v250 = &v247[v248 / 8];
                v251 = *(_OWORD *)&v247[v248 / 8 - 20];
                *((_QWORD *)v249 - 18) = v247[v248 / 8 - 18];
                *((_OWORD *)v249 - 10) = v251;
                *(v250 - 19) = 0;
                *(v250 - 18) = 0;
                *(v250 - 20) = 0;
                v241[v248 - 136] = 0;
                *(v249 - 8) = 0;
                if (LOBYTE(v247[v248 / 8 - 1]))
                {
                  v252 = *(_OWORD *)(v250 - 15);
                  *(_OWORD *)&v241[v248 - 136] = *(_OWORD *)(v250 - 17);
                  *(_OWORD *)&v241[v248 - 120] = v252;
                  v253 = *(_OWORD *)(v250 - 13);
                  v254 = *(_OWORD *)(v250 - 11);
                  v255 = *(_OWORD *)(v250 - 9);
                  *(_QWORD *)&v241[v248 - 56] = *(v250 - 7);
                  *(_OWORD *)&v241[v248 - 88] = v254;
                  *(_OWORD *)&v241[v248 - 72] = v255;
                  *(_OWORD *)&v241[v248 - 104] = v253;
                  *((_QWORD *)v249 - 5) = 0;
                  *((_QWORD *)v249 - 4) = 0;
                  *((_OWORD *)v249 - 3) = *((_OWORD *)v250 - 3);
                  *((_QWORD *)v249 - 4) = *(v250 - 4);
                  *(v250 - 5) = 0;
                  *(v250 - 4) = 0;
                  *(v250 - 6) = 0;
                  *(_OWORD *)(v249 - 24) = *(_OWORD *)(v250 - 3);
                  *(v249 - 8) = 1;
                }
                v248 -= 160;
              }
              while (&v247[v248 / 8] != v246);
              v247 = *v141;
              v256 = v141[1];
              *v141 = (void **)&v241[v248];
              v141[1] = v235;
              v141[2] = v244;
              if (v256 != v247)
              {
                do
                {
                  if (*((_BYTE *)v256 - 8))
                  {
                    v257 = (void **)*(v256 - 6);
                    if (v257)
                    {
                      v258 = (void **)*(v256 - 5);
                      v259 = *(v256 - 6);
                      if (v258 != v257)
                      {
                        do
                        {
                          if (*((char *)v258 - 1) < 0)
                            operator delete(*(v258 - 3));
                          v258 -= 3;
                        }
                        while (v258 != v257);
                        v259 = *(v256 - 6);
                      }
                      *(v256 - 5) = v257;
                      operator delete(v259);
                    }
                  }
                  v260 = v256 - 20;
                  if (*((char *)v256 - 137) < 0)
                    operator delete(*v260);
                  v256 -= 20;
                }
                while (v260 != v247);
              }
            }
            v5 = a1;
            if (v247)
              operator delete(v247);
          }
          else
          {
            v230 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v228[2] = (void *)__p.__r_.__value_.__r.__words[2];
            *(_OWORD *)v228 = v230;
            memset(&__p, 0, sizeof(__p));
            *((_BYTE *)v228 + 24) = 0;
            *((_BYTE *)v228 + 152) = 0;
            if (v669)
            {
              v231 = v661;
              *(_OWORD *)(v228 + 3) = v660;
              *(_OWORD *)(v228 + 5) = v231;
              v232 = v662;
              v233 = v663;
              v234 = v664;
              v228[13] = v665;
              *(_OWORD *)(v228 + 9) = v233;
              *(_OWORD *)(v228 + 11) = v234;
              *(_OWORD *)(v228 + 7) = v232;
              v228[15] = 0;
              v228[16] = 0;
              v228[14] = 0;
              *((_OWORD *)v228 + 7) = v666;
              v228[16] = v667;
              v666 = 0uLL;
              v667 = 0;
              *(_OWORD *)(v228 + 17) = v668;
              *((_BYTE *)v228 + 152) = 1;
            }
            v235 = v228 + 20;
            v5 = a1;
          }
          v141[1] = v235;
          if (v669)
          {
            v261 = v666;
            if ((_QWORD)v666)
            {
              v262 = *((_QWORD *)&v666 + 1);
              v263 = (void *)v666;
              if (*((_QWORD *)&v666 + 1) != (_QWORD)v666)
              {
                do
                {
                  if (*(char *)(v262 - 1) < 0)
                    operator delete(*(void **)(v262 - 24));
                  v262 -= 24;
                }
                while (v262 != v261);
                v263 = (void *)v666;
              }
              *((_QWORD *)&v666 + 1) = v261;
              operator delete(v263);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            v264 = (void **)v655;
            if ((_QWORD)v655)
              goto LABEL_455;
          }
          else
          {
            v264 = (void **)v655;
            if (!(_QWORD)v655)
              goto LABEL_462;
LABEL_455:
            v265 = (void **)*((_QWORD *)&v655 + 1);
            v266 = v264;
            if (*((void ***)&v655 + 1) != v264)
            {
              do
              {
                if (*((char *)v265 - 1) < 0)
                  operator delete(*(v265 - 3));
                v265 -= 3;
              }
              while (v265 != v264);
              v266 = (void **)v655;
            }
            *((_QWORD *)&v655 + 1) = v264;
            operator delete(v266);
          }
LABEL_462:
          sub_20EF5F730(v640);
          if (**(int **)(v640[0] + 56) > 3)
            goto LABEL_900;
          v267 = *(unsigned __int8 *)(v640[0] + 72);
          v268 = sub_20E8C31DC(v640[0], "OSLogSurrogateAppender", 1, 0);
          v269 = v268;
          if (!v267 && v268 == 0)
            goto LABEL_900;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v640;
          __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v660) = 3;
          *((_QWORD *)&v660 + 1) = "unknown file";
          LODWORD(v661) = 423;
          *((_QWORD *)&v661 + 1) = "unknown function";
          v662 = 0uLL;
          v567 = v4;
          if (*(char *)(v4 + 23) >= 0)
            v271 = (const char *)v4;
          else
            v271 = *(const char **)v4;
          v272 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
          v273 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
          v561 = v273;
          if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v273 = *(const char **)(v272 + 16);
            v274 = *(_QWORD *)(v272 + 24);
            v368 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v368 & 1) == 0)
            {
LABEL_1009:
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v653);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v653);
                if (v653[24] && (v653[23] & 0x80000000) != 0)
                  operator delete(*(void **)v653);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
            }
          }
          else
          {
            v274 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
            v275 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v275 & 1) == 0)
              goto LABEL_1009;
          }
          if (byte_254A4A4F8[23] >= 0)
            v369 = byte_254A4A4F8;
          else
            v369 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v370 = byte_254A4A4F8[23];
          else
            v370 = *(_QWORD *)&byte_254A4A4F8[8];
          v594 = os_log_create(v369, v273);
          if (v370 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v370 >= 0x17)
          {
            v372 = (v370 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v370 | 7) != 0x17)
              v372 = v370 | 7;
            v373 = v372 + 1;
            v371 = operator new(v372 + 1);
            v596 = v373 | 0x8000000000000000;
            v595[0] = v371;
            v595[1] = (void *)v370;
          }
          else
          {
            HIBYTE(v596) = v370;
            v371 = v595;
            if (!v370)
            {
LABEL_661:
              *((_BYTE *)v371 + v370) = 0;
              v597 = 1;
              if (v274 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v274 >= 0x17)
              {
                v376 = (v274 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v274 | 7) != 0x17)
                  v376 = v274 | 7;
                v377 = v376 + 1;
                v374 = operator new(v376 + 1);
                v599 = v377 | 0x8000000000000000;
                v598[0] = v374;
                v598[1] = (void *)v274;
              }
              else
              {
                HIBYTE(v599) = v274;
                v374 = v598;
                if (!v274)
                {
                  LOBYTE(v598[0]) = 0;
                  v600 = 1;
                  v375 = v594;
                  if ((SHIBYTE(v599) & 0x80000000) == 0)
                    goto LABEL_665;
LABEL_671:
                  operator delete(v598[0]);
                  v3 = a3;
                  v4 = v567;
                  if (v597)
                    goto LABEL_672;
                  goto LABEL_674;
                }
              }
              memmove(v374, v273, v274);
              *((_BYTE *)v374 + v274) = 0;
              v600 = 1;
              v375 = v594;
              if (SHIBYTE(v599) < 0)
                goto LABEL_671;
LABEL_665:
              v3 = a3;
              v4 = v567;
              if (v597)
              {
LABEL_672:
                if (SHIBYTE(v596) < 0)
                  operator delete(v595[0]);
              }
LABEL_674:
              if (v594)
                os_release(v594);
              if (v269 && *(_QWORD *)(v269 + 24))
              {
                v378 = _os_log_pack_size();
                v379 = (std::__shared_weak_count_vtbl *)operator new(v378, (std::align_val_t)8uLL);
                v380 = (std::__shared_weak_count *)operator new();
                v380->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v380->__shared_owners_ = 0;
                v380->__shared_weak_owners_ = 0;
                v380[1].__vftable = v379;
                *(_QWORD *)&v629 = v379;
                *((_QWORD *)&v629 + 1) = v379;
                v630 = v380;
                v631 = 0;
                v632 = 0;
                v381 = strlen(v271);
                if (v381 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v382 = v381;
                if (v381 >= 0x17)
                {
                  v417 = (v381 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v381 | 7) != 0x17)
                    v417 = v381 | 7;
                  v418 = v417 + 1;
                  v383 = operator new(v417 + 1);
                  *((_QWORD *)&v636 + 1) = v418 | 0x8000000000000000;
                  v635 = v383;
                  *(_QWORD *)&v636 = v382;
                }
                else
                {
                  HIBYTE(v636) = v381;
                  v383 = &v635;
                  if (!v381)
                    goto LABEL_730;
                }
                memcpy(v383, v271, v382);
LABEL_730:
                *((_BYTE *)v383 + v382) = 0;
                v419 = v635;
                *(_QWORD *)v653 = v636;
                *(_QWORD *)&v653[7] = *(_QWORD *)((char *)&v636 + 7);
                v420 = HIBYTE(v636);
                v421 = operator new(0x38uLL);
                v421[1] = 0;
                v421[2] = 0;
                v421[3] = off_24C9ABC20;
                *v421 = &off_24C9ABBD0;
                v422 = *(_QWORD *)v653;
                v421[4] = v419;
                v421[5] = v422;
                *(_QWORD *)((char *)v421 + 47) = *(_QWORD *)&v653[7];
                *((_BYTE *)v421 + 55) = v420;
                *(_QWORD *)v653 = 0;
                *(_QWORD *)&v653[7] = 0;
                v423 = v632;
                v631 = (char *)(v421 + 3);
                v632 = (std::__shared_weak_count *)v421;
                if (v423)
                {
                  v424 = (unint64_t *)&v423->__shared_owners_;
                  do
                    v425 = __ldaxr(v424);
                  while (__stlxr(v425 - 1, v424));
                  if (!v425)
                  {
                    ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
                    std::__shared_weak_count::__release_weak(v423);
                  }
                }
                *(_OWORD *)v626 = v629;
                v426 = v631;
                *(_QWORD *)&v626[16] = v630;
                if (v630)
                {
                  v427 = (unint64_t *)&v630->__shared_owners_;
                  do
                    v428 = __ldxr(v427);
                  while (__stxr(v428 + 1, v427));
                }
                v429 = v632;
                *(_QWORD *)&v627 = v426;
                *((_QWORD *)&v627 + 1) = v632;
                if (v632)
                {
                  v430 = (unint64_t *)&v632->__shared_owners_;
                  do
                    v431 = __ldxr(v430);
                  while (__stxr(v431 + 1, v430));
                  v628 = v426;
                  do
                    v432 = __ldaxr(v430);
                  while (__stlxr(v432 - 1, v430));
                  if (!v432)
                  {
                    ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
                    std::__shared_weak_count::__release_weak(v429);
                  }
                }
                else
                {
                  v628 = v426;
                }
                v523 = v630;
                if (v630)
                {
                  v524 = (unint64_t *)&v630->__shared_owners_;
                  do
                    v525 = __ldaxr(v524);
                  while (__stlxr(v525 - 1, v524));
                  if (!v525)
                  {
                    ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
                    std::__shared_weak_count::__release_weak(v523);
                  }
                }
                v526 = *(_QWORD *)v626;
                if (v628[31] >= 0)
                  v527 = v628 + 8;
                else
                  v527 = (char *)*((_QWORD *)v628 + 1);
                v528 = _os_log_pack_fill();
                *(_DWORD *)v528 = 136315138;
                *(_QWORD *)(v528 + 4) = v527;
                v529 = operator new();
                v530 = *(unsigned __int8 *)(v272 + 39);
                v531 = v561;
                if ((v530 & 0x80u) != 0)
                {
                  v531 = *(const char **)(v272 + 16);
                  v530 = *(_QWORD *)(v272 + 24);
                }
                *(_QWORD *)v529 = v526;
                *(_OWORD *)(v529 + 8) = *(_OWORD *)&v626[8];
                *(_QWORD *)&v626[8] = 0;
                *(_QWORD *)&v626[16] = 0;
                *(_OWORD *)(v529 + 24) = v627;
                v627 = 0uLL;
                *(_QWORD *)(v529 + 40) = v531;
                *(_QWORD *)(v529 + 48) = v530;
                *(_BYTE *)(v529 + 56) = 1;
                v633 = 0;
                v634 = v529;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v269 + 24) + 40))(*(_QWORD *)(v269 + 24), &v634);
                v532 = v634;
                v634 = 0;
                v5 = a1;
                if (v532)
                {
                  v533 = *(std::__shared_weak_count **)(v532 + 32);
                  if (v533)
                  {
                    v534 = (unint64_t *)&v533->__shared_owners_;
                    do
                      v535 = __ldaxr(v534);
                    while (__stlxr(v535 - 1, v534));
                    if (!v535)
                    {
                      ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
                      std::__shared_weak_count::__release_weak(v533);
                    }
                  }
                  v536 = *(std::__shared_weak_count **)(v532 + 16);
                  if (v536)
                  {
                    v537 = (unint64_t *)&v536->__shared_owners_;
                    do
                      v538 = __ldaxr(v537);
                    while (__stlxr(v538 - 1, v537));
                    if (!v538)
                    {
                      ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
                      std::__shared_weak_count::__release_weak(v536);
                    }
                  }
                  MEMORY[0x212BC6398](v532, 0x10F0C40B62ED6C6);
                  v539 = v633;
                  v633 = 0;
                  if (v539)
                  {
                    v540 = *(std::__shared_weak_count **)(v539 + 32);
                    if (v540)
                    {
                      v541 = (unint64_t *)&v540->__shared_owners_;
                      do
                        v542 = __ldaxr(v541);
                      while (__stlxr(v542 - 1, v541));
                      if (!v542)
                      {
                        ((void (*)(std::__shared_weak_count *))v540->__on_zero_shared)(v540);
                        std::__shared_weak_count::__release_weak(v540);
                      }
                    }
                    v543 = *(std::__shared_weak_count **)(v539 + 16);
                    if (v543)
                    {
                      v544 = (unint64_t *)&v543->__shared_owners_;
                      do
                        v545 = __ldaxr(v544);
                      while (__stlxr(v545 - 1, v544));
                      if (!v545)
                      {
                        ((void (*)(std::__shared_weak_count *))v543->__on_zero_shared)(v543);
                        std::__shared_weak_count::__release_weak(v543);
                      }
                    }
                    MEMORY[0x212BC6398](v539, 0x10F0C40B62ED6C6);
                  }
                }
                v546 = (std::__shared_weak_count *)*((_QWORD *)&v627 + 1);
                if (*((_QWORD *)&v627 + 1))
                {
                  v547 = (unint64_t *)(*((_QWORD *)&v627 + 1) + 8);
                  do
                    v548 = __ldaxr(v547);
                  while (__stlxr(v548 - 1, v547));
                  if (!v548)
                  {
                    ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
                    std::__shared_weak_count::__release_weak(v546);
                  }
                }
                v549 = *(std::__shared_weak_count **)&v626[16];
                if (*(_QWORD *)&v626[16])
                {
                  v550 = (unint64_t *)(*(_QWORD *)&v626[16] + 8);
                  do
                    v551 = __ldaxr(v550);
                  while (__stlxr(v551 - 1, v550));
                  if (!v551)
                  {
                    ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
                    std::__shared_weak_count::__release_weak(v549);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v375, OS_LOG_TYPE_INFO);
                *(_DWORD *)v653 = 136315138;
                *(_QWORD *)&v653[4] = v271;
                v384 = (void *)_os_log_send_and_compose_impl();
                v5 = a1;
                if (v384)
                  free(v384);
              }
              if (v267)
              {
                if (*(char *)(v4 + 23) >= 0)
                  v552 = (const char *)v4;
                else
                  v552 = *(const char **)v4;
                sub_20E8C003C((uint64_t)&__p, "[%s] contains valid metadata.", v552);
                sub_20E863570((uint64_t)&__p);
              }
              sub_20E863570((uint64_t)&__p);
              v553 = (std::__shared_weak_count *)*((_QWORD *)&v662 + 1);
              if (*((_QWORD *)&v662 + 1))
              {
                v554 = (unint64_t *)(*((_QWORD *)&v662 + 1) + 8);
                do
                  v555 = __ldaxr(v554);
                while (__stlxr(v555 - 1, v554));
                if (!v555)
                {
                  ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
                  std::__shared_weak_count::__release_weak(v553);
                }
              }
LABEL_900:
              v517 = (__int128 *)v576;
              if (v576)
              {
                v518 = v577;
                v519 = v576;
                if (v577 != v576)
                {
                  do
                  {
                    if (*((char *)v518 - 1) < 0)
                      operator delete(*((void **)v518 - 3));
                    v518 = (__int128 *)((char *)v518 - 24);
                  }
                  while (v518 != v517);
                  v519 = v576;
                }
                v577 = v517;
                operator delete(v519);
              }
              goto LABEL_908;
            }
          }
          memmove(v371, v369, v370);
          goto LABEL_661;
        }
        sub_20EF5F730(v640);
        if (**(int **)(v640[0] + 56) > 5)
          goto LABEL_877;
        v142 = *(unsigned __int8 *)(v640[0] + 72);
        v143 = sub_20E8C31DC(v640[0], "OSLogSurrogateAppender", 1, 0);
        v144 = v143;
        if (!v142 && !v143)
          goto LABEL_877;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v640;
        __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v660) = 5;
        *((_QWORD *)&v660 + 1) = "unknown file";
        LODWORD(v661) = 416;
        *((_QWORD *)&v661 + 1) = "unknown function";
        v662 = 0uLL;
        v566 = v4;
        if (*(char *)(v4 + 23) >= 0)
          v145 = (const char *)v4;
        else
          v145 = *(const char **)v4;
        v146 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        v147 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
        v560 = v147;
        if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v147 = *(const char **)(v146 + 16);
          v148 = *(_QWORD *)(v146 + 24);
          v351 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v351 & 1) == 0)
          {
LABEL_1002:
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v653);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v653);
              if (v653[24] && (v653[23] & 0x80000000) != 0)
                operator delete(*(void **)v653);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
          }
        }
        else
        {
          v148 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
          v149 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v149 & 1) == 0)
            goto LABEL_1002;
        }
        if (byte_254A4A4F8[23] >= 0)
          v352 = byte_254A4A4F8;
        else
          v352 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v353 = byte_254A4A4F8[23];
        else
          v353 = *(_QWORD *)&byte_254A4A4F8[8];
        oslog = os_log_create(v352, v147);
        if (v353 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v353 >= 0x17)
        {
          v355 = (v353 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v353 | 7) != 0x17)
            v355 = v353 | 7;
          v356 = v355 + 1;
          v354 = operator new(v355 + 1);
          v589 = v356 | 0x8000000000000000;
          v588[0] = v354;
          v588[1] = (void *)v353;
        }
        else
        {
          HIBYTE(v589) = v353;
          v354 = v588;
          if (!v353)
          {
LABEL_623:
            *((_BYTE *)v354 + v353) = 0;
            v590 = 1;
            if (v148 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v148 >= 0x17)
            {
              v359 = (v148 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v148 | 7) != 0x17)
                v359 = v148 | 7;
              v360 = v359 + 1;
              v357 = operator new(v359 + 1);
              v592 = v360 | 0x8000000000000000;
              v591[0] = v357;
              v591[1] = (void *)v148;
            }
            else
            {
              HIBYTE(v592) = v148;
              v357 = v591;
              if (!v148)
              {
                LOBYTE(v591[0]) = 0;
                v593 = 1;
                v358 = oslog;
                if ((SHIBYTE(v592) & 0x80000000) == 0)
                  goto LABEL_627;
LABEL_633:
                operator delete(v591[0]);
                v3 = a3;
                v4 = v566;
                if (v590)
                  goto LABEL_634;
                goto LABEL_636;
              }
            }
            memmove(v357, v147, v148);
            *((_BYTE *)v357 + v148) = 0;
            v593 = 1;
            v358 = oslog;
            if (SHIBYTE(v592) < 0)
              goto LABEL_633;
LABEL_627:
            v3 = a3;
            v4 = v566;
            if (v590)
            {
LABEL_634:
              if (SHIBYTE(v589) < 0)
                operator delete(v588[0]);
            }
LABEL_636:
            if (oslog)
              os_release(oslog);
            if (v144 && *(_QWORD *)(v144 + 24))
            {
              v361 = _os_log_pack_size();
              v362 = (std::__shared_weak_count_vtbl *)operator new(v361, (std::align_val_t)8uLL);
              v363 = (std::__shared_weak_count *)operator new();
              v363->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v363->__shared_owners_ = 0;
              v363->__shared_weak_owners_ = 0;
              v363[1].__vftable = v362;
              *(_QWORD *)&v618 = v362;
              *((_QWORD *)&v618 + 1) = v362;
              v619 = v363;
              v620 = 0;
              v621 = 0;
              v364 = strlen(v145);
              if (v364 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v365 = v364;
              if (v364 >= 0x17)
              {
                v401 = (v364 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v364 | 7) != 0x17)
                  v401 = v364 | 7;
                v402 = v401 + 1;
                v366 = operator new(v401 + 1);
                *((_QWORD *)&v625 + 1) = v402 | 0x8000000000000000;
                v624 = v366;
                *(_QWORD *)&v625 = v365;
              }
              else
              {
                HIBYTE(v625) = v364;
                v366 = &v624;
                if (!v364)
                  goto LABEL_711;
              }
              memcpy(v366, v145, v365);
LABEL_711:
              *((_BYTE *)v366 + v365) = 0;
              v403 = v624;
              *(_QWORD *)v653 = v625;
              *(_QWORD *)&v653[7] = *(_QWORD *)((char *)&v625 + 7);
              v404 = HIBYTE(v625);
              v405 = operator new(0x38uLL);
              v405[1] = 0;
              v405[2] = 0;
              v405[3] = off_24C9ABC20;
              *v405 = &off_24C9ABBD0;
              v406 = *(_QWORD *)v653;
              v405[4] = v403;
              v405[5] = v406;
              *(_QWORD *)((char *)v405 + 47) = *(_QWORD *)&v653[7];
              *((_BYTE *)v405 + 55) = v404;
              *(_QWORD *)v653 = 0;
              *(_QWORD *)&v653[7] = 0;
              v407 = v621;
              v620 = (char *)(v405 + 3);
              v621 = (std::__shared_weak_count *)v405;
              if (v407)
              {
                v408 = (unint64_t *)&v407->__shared_owners_;
                do
                  v409 = __ldaxr(v408);
                while (__stlxr(v409 - 1, v408));
                if (!v409)
                {
                  ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                  std::__shared_weak_count::__release_weak(v407);
                }
              }
              *(_OWORD *)v615 = v618;
              v410 = v620;
              *(_QWORD *)&v615[16] = v619;
              if (v619)
              {
                v411 = (unint64_t *)&v619->__shared_owners_;
                do
                  v412 = __ldxr(v411);
                while (__stxr(v412 + 1, v411));
              }
              v413 = v621;
              *(_QWORD *)&v616 = v410;
              *((_QWORD *)&v616 + 1) = v621;
              if (v621)
              {
                v414 = (unint64_t *)&v621->__shared_owners_;
                do
                  v415 = __ldxr(v414);
                while (__stxr(v415 + 1, v414));
                v617 = v410;
                do
                  v416 = __ldaxr(v414);
                while (__stlxr(v416 - 1, v414));
                if (!v416)
                {
                  ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
                  std::__shared_weak_count::__release_weak(v413);
                }
              }
              else
              {
                v617 = v410;
              }
              v475 = v619;
              if (v619)
              {
                v476 = (unint64_t *)&v619->__shared_owners_;
                do
                  v477 = __ldaxr(v476);
                while (__stlxr(v477 - 1, v476));
                if (!v477)
                {
                  ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
                  std::__shared_weak_count::__release_weak(v475);
                }
              }
              v478 = *(_QWORD *)v615;
              if (v617[31] >= 0)
                v479 = v617 + 8;
              else
                v479 = (char *)*((_QWORD *)v617 + 1);
              v480 = _os_log_pack_fill();
              *(_DWORD *)v480 = 136315138;
              *(_QWORD *)(v480 + 4) = v479;
              v481 = operator new();
              v482 = *(unsigned __int8 *)(v146 + 39);
              v483 = v560;
              if ((v482 & 0x80u) != 0)
              {
                v483 = *(const char **)(v146 + 16);
                v482 = *(_QWORD *)(v146 + 24);
              }
              *(_QWORD *)v481 = v478;
              *(_OWORD *)(v481 + 8) = *(_OWORD *)&v615[8];
              *(_QWORD *)&v615[8] = 0;
              *(_QWORD *)&v615[16] = 0;
              *(_OWORD *)(v481 + 24) = v616;
              v616 = 0uLL;
              *(_QWORD *)(v481 + 40) = v483;
              *(_QWORD *)(v481 + 48) = v482;
              *(_BYTE *)(v481 + 56) = 16;
              v622 = 0;
              v623 = v481;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v144 + 24) + 40))(*(_QWORD *)(v144 + 24), &v623);
              v484 = v623;
              v623 = 0;
              v5 = a1;
              if (v484)
              {
                v485 = *(std::__shared_weak_count **)(v484 + 32);
                if (v485)
                {
                  v486 = (unint64_t *)&v485->__shared_owners_;
                  do
                    v487 = __ldaxr(v486);
                  while (__stlxr(v487 - 1, v486));
                  if (!v487)
                  {
                    ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
                    std::__shared_weak_count::__release_weak(v485);
                  }
                }
                v488 = *(std::__shared_weak_count **)(v484 + 16);
                if (v488)
                {
                  v489 = (unint64_t *)&v488->__shared_owners_;
                  do
                    v490 = __ldaxr(v489);
                  while (__stlxr(v490 - 1, v489));
                  if (!v490)
                  {
                    ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
                    std::__shared_weak_count::__release_weak(v488);
                  }
                }
                MEMORY[0x212BC6398](v484, 0x10F0C40B62ED6C6);
                v491 = v622;
                v622 = 0;
                if (v491)
                {
                  v492 = *(std::__shared_weak_count **)(v491 + 32);
                  if (v492)
                  {
                    v493 = (unint64_t *)&v492->__shared_owners_;
                    do
                      v494 = __ldaxr(v493);
                    while (__stlxr(v494 - 1, v493));
                    if (!v494)
                    {
                      ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
                      std::__shared_weak_count::__release_weak(v492);
                    }
                  }
                  v495 = *(std::__shared_weak_count **)(v491 + 16);
                  if (v495)
                  {
                    v496 = (unint64_t *)&v495->__shared_owners_;
                    do
                      v497 = __ldaxr(v496);
                    while (__stlxr(v497 - 1, v496));
                    if (!v497)
                    {
                      ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
                      std::__shared_weak_count::__release_weak(v495);
                    }
                  }
                  MEMORY[0x212BC6398](v491, 0x10F0C40B62ED6C6);
                }
              }
              v498 = (std::__shared_weak_count *)*((_QWORD *)&v616 + 1);
              if (*((_QWORD *)&v616 + 1))
              {
                v499 = (unint64_t *)(*((_QWORD *)&v616 + 1) + 8);
                do
                  v500 = __ldaxr(v499);
                while (__stlxr(v500 - 1, v499));
                if (!v500)
                {
                  ((void (*)(std::__shared_weak_count *))v498->__on_zero_shared)(v498);
                  std::__shared_weak_count::__release_weak(v498);
                }
              }
              v501 = *(std::__shared_weak_count **)&v615[16];
              if (*(_QWORD *)&v615[16])
              {
                v502 = (unint64_t *)(*(_QWORD *)&v615[16] + 8);
                do
                  v503 = __ldaxr(v502);
                while (__stlxr(v503 - 1, v502));
                if (!v503)
                {
                  ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
                  std::__shared_weak_count::__release_weak(v501);
                }
              }
            }
            else
            {
              os_log_type_enabled(v358, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v653 = 136315138;
              *(_QWORD *)&v653[4] = v145;
              v367 = (void *)_os_log_send_and_compose_impl();
              v5 = a1;
              if (v367)
                free(v367);
            }
            if (v142)
            {
              if (*(char *)(v4 + 23) >= 0)
                v504 = (const char *)v4;
              else
                v504 = *(const char **)v4;
              sub_20E8C003C((uint64_t)&__p, "Removing [%s] because of directory to session ID mismatch.", v504);
              sub_20E863570((uint64_t)&__p);
            }
            sub_20E863570((uint64_t)&__p);
            v505 = (std::__shared_weak_count *)*((_QWORD *)&v662 + 1);
            if (*((_QWORD *)&v662 + 1))
            {
              v506 = (unint64_t *)(*((_QWORD *)&v662 + 1) + 8);
              do
                v507 = __ldaxr(v506);
              while (__stlxr(v507 - 1, v506));
              if (!v507)
              {
                ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
                std::__shared_weak_count::__release_weak(v505);
              }
            }
LABEL_877:
            v508 = sub_210219C18();
            v509 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
            if ((v509 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
            {
              __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DDD0);
            }
            if (atomic_load(&qword_254A5A450))
            {
              LODWORD(__p.__r_.__value_.__l.__data_) = 134218242;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v579[0];
              WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"BADID";
              v511 = (char *)_os_log_send_and_compose_impl();
              v512 = strlen(v511);
              v651 = 0;
              pthread_threadid_np(0, &v651);
              v513 = v651;
              timespec_get(&v652, 1);
              v650 = v652;
              sub_210219E20(&__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v508 + 1), (__int128 *)(v508 + 5), "MappingIOLoadMeta:SID:%llu, TYPE:%s", 0x23uLL, v511, v512, v513, &v650);
              std::mutex::lock(&stru_254A5A410);
              v514 = qword_254A5A458;
              for (k = unk_254A5A460; v514 != k; v514 += 40)
              {
                v516 = *(_QWORD *)(v514 + 32);
                if (!v516)
                  sub_20E86D37C();
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v516 + 48))(v516, &__p);
              }
              std::mutex::unlock(&stru_254A5A410);
              if (SBYTE7(v668) < 0)
              {
                operator delete(*((void **)&v666 + 1));
                if (SBYTE7(v666) < 0)
                  goto LABEL_887;
LABEL_884:
                if ((_BYTE)v664)
                {
LABEL_888:
                  if (SHIBYTE(v663) < 0)
                    operator delete(*((void **)&v662 + 1));
                }
              }
              else
              {
                if ((SBYTE7(v666) & 0x80000000) == 0)
                  goto LABEL_884;
LABEL_887:
                operator delete(*((void **)&v664 + 1));
                if ((_BYTE)v664)
                  goto LABEL_888;
              }
              if ((_BYTE)v662 && SHIBYTE(v661) < 0)
                operator delete(*((void **)&v660 + 1));
              if (SBYTE7(v660) < 0)
                operator delete((void *)__p.__r_.__value_.__l.__size_);
              if (v511)
                free(v511);
            }
            if (os_signpost_enabled((os_log_t)*v508))
            {
              LODWORD(__p.__r_.__value_.__l.__data_) = 134218242;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v579[0];
              WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"BADID";
              _os_signpost_emit_unreliably_with_name_impl();
            }
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 8) + 240))(*(_QWORD *)(v5 + 8), v4);
            goto LABEL_900;
          }
        }
        memmove(v354, v352, v353);
        goto LABEL_623;
      }
      sub_20EF5F730(&v602);
      if (**(int **)(v602 + 56) <= 5)
      {
        v90 = *(unsigned __int8 *)(v602 + 72);
        v91 = sub_20E8C31DC(v602, "OSLogSurrogateAppender", 1, 0);
        v92 = v91;
        if (v90 || v91)
        {
          v563 = v4;
          *(_QWORD *)v653 = &v602;
          *(std::chrono::steady_clock::time_point *)&v653[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&v653[16] = std::chrono::system_clock::now();
          *(_DWORD *)&v653[24] = 5;
          *(_QWORD *)&v653[32] = "unknown file";
          *(_DWORD *)&v653[40] = 400;
          *(_QWORD *)&v653[48] = "unknown function";
          *(_QWORD *)&v653[56] = 0;
          *(_QWORD *)v654 = 0;
          if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v93 = &__src;
          else
            v93 = (std::string *)__src.__r_.__value_.__r.__words[0];
          v94 = **(_QWORD **)v653;
          v95 = (const char *)(**(_QWORD **)v653 + 16);
          v557 = v95;
          if (*(char *)(**(_QWORD **)v653 + 39) < 0)
          {
            v95 = *(const char **)(v94 + 16);
            v96 = *(_QWORD *)(v94 + 24);
            v166 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v166 & 1) == 0)
            {
LABEL_988:
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)&v570);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v570);
                if ((_BYTE)v571 && SHIBYTE(v570.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v570.__r_.__value_.__l.__data_);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
            }
          }
          else
          {
            v96 = *(unsigned __int8 *)(**(_QWORD **)v653 + 39);
            v97 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v97 & 1) == 0)
              goto LABEL_988;
          }
          if (byte_254A4A4F8[23] >= 0)
            v167 = byte_254A4A4F8;
          else
            v167 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v168 = byte_254A4A4F8[23];
          else
            v168 = *(_QWORD *)&byte_254A4A4F8[8];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v167, v95);
          if (v168 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v168 >= 0x17)
          {
            v170 = (v168 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v168 | 7) != 0x17)
              v170 = v168 | 7;
            v171 = v170 + 1;
            v169 = (std::string::size_type *)operator new(v170 + 1);
            *(_QWORD *)&v660 = v171 | 0x8000000000000000;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v169;
            __p.__r_.__value_.__r.__words[2] = v168;
          }
          else
          {
            BYTE7(v660) = v168;
            v169 = &__p.__r_.__value_.__l.__size_;
            if (!v168)
            {
LABEL_298:
              *((_BYTE *)v169 + v168) = 0;
              BYTE8(v660) = 1;
              if (v96 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v96 >= 0x17)
              {
                v174 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v96 | 7) != 0x17)
                  v174 = v96 | 7;
                v175 = v174 + 1;
                v172 = (__int128 *)operator new(v174 + 1);
                *(_QWORD *)&v662 = v175 | 0x8000000000000000;
                *(_QWORD *)&v661 = v172;
                *((_QWORD *)&v661 + 1) = v96;
              }
              else
              {
                BYTE7(v662) = v96;
                v172 = &v661;
                if (!v96)
                {
                  LOBYTE(v661) = 0;
                  BYTE8(v662) = 1;
                  v173 = __p.__r_.__value_.__r.__words[0];
                  if ((SBYTE7(v662) & 0x80000000) == 0)
                    goto LABEL_302;
LABEL_308:
                  operator delete((void *)v661);
                  v3 = a3;
                  v4 = v563;
                  if (BYTE8(v660))
                    goto LABEL_309;
                  goto LABEL_311;
                }
              }
              memmove(v172, v95, v96);
              *((_BYTE *)v172 + v96) = 0;
              BYTE8(v662) = 1;
              v173 = __p.__r_.__value_.__r.__words[0];
              if (SBYTE7(v662) < 0)
                goto LABEL_308;
LABEL_302:
              v3 = a3;
              v4 = v563;
              if (BYTE8(v660))
              {
LABEL_309:
                if (SBYTE7(v660) < 0)
                  operator delete((void *)__p.__r_.__value_.__l.__size_);
              }
LABEL_311:
              if (__p.__r_.__value_.__r.__words[0])
                os_release(__p.__r_.__value_.__l.__data_);
              if (v92 && *(_QWORD *)(v92 + 24))
              {
                v176 = _os_log_pack_size();
                v177 = operator new(v176, (std::align_val_t)8uLL);
                v178 = (_QWORD *)operator new();
                *v178 = &off_24C9ABB80;
                v178[1] = 0;
                v178[2] = 0;
                v178[3] = v177;
                v570.__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
                v570.__r_.__value_.__l.__size_ = (std::string::size_type)v177;
                v570.__r_.__value_.__r.__words[2] = (std::string::size_type)v178;
                v571 = 0uLL;
                v179 = strlen((const char *)v93);
                if (v179 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v180 = v179;
                if (v179 >= 0x17)
                {
                  v276 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v179 | 7) != 0x17)
                    v276 = v179 | 7;
                  v277 = v276 + 1;
                  v181 = operator new(v276 + 1);
                  *(_QWORD *)&category[16] = v277 | 0x8000000000000000;
                  *(_QWORD *)category = v181;
                  *(_QWORD *)&category[8] = v180;
                }
                else
                {
                  category[23] = v179;
                  v181 = category;
                  if (!v179)
                    goto LABEL_477;
                }
                memcpy(v181, v93, v180);
LABEL_477:
                v181[v180] = 0;
                v278 = *(_QWORD *)category;
                v658[0] = *(char **)&category[8];
                *(char **)((char *)v658 + 7) = *(char **)&category[15];
                v279 = category[23];
                v280 = (char *)operator new(0x38uLL);
                *((_QWORD *)v280 + 1) = 0;
                *((_QWORD *)v280 + 2) = 0;
                *((_QWORD *)v280 + 3) = off_24C9ABC20;
                *(_QWORD *)v280 = &off_24C9ABBD0;
                v281 = v658[0];
                *((_QWORD *)v280 + 4) = v278;
                *((_QWORD *)v280 + 5) = v281;
                *(char **)(v280 + 47) = *(char **)((char *)v658 + 7);
                v280[55] = v279;
                memset(v658, 0, 15);
                v282 = (std::__shared_weak_count *)*((_QWORD *)&v571 + 1);
                *(_QWORD *)&v571 = v280 + 24;
                *((_QWORD *)&v571 + 1) = v280;
                if (v282)
                {
                  v283 = (unint64_t *)&v282->__shared_owners_;
                  do
                    v284 = __ldaxr(v283);
                  while (__stlxr(v284 - 1, v283));
                  if (!v284)
                  {
                    ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                    std::__shared_weak_count::__release_weak(v282);
                  }
                }
                __p = v570;
                v285 = v571;
                if (v570.__r_.__value_.__r.__words[2])
                {
                  v286 = (unint64_t *)(v570.__r_.__value_.__r.__words[2] + 8);
                  do
                    v287 = __ldxr(v286);
                  while (__stxr(v287 + 1, v286));
                }
                v288 = (std::__shared_weak_count *)*((_QWORD *)&v571 + 1);
                *(_QWORD *)&v660 = v285;
                *((_QWORD *)&v660 + 1) = *((_QWORD *)&v571 + 1);
                if (*((_QWORD *)&v571 + 1))
                {
                  v289 = (unint64_t *)(*((_QWORD *)&v571 + 1) + 8);
                  do
                    v290 = __ldxr(v289);
                  while (__stxr(v290 + 1, v289));
                  *(_QWORD *)&v661 = v285;
                  do
                    v291 = __ldaxr(v289);
                  while (__stlxr(v291 - 1, v289));
                  if (!v291)
                  {
                    ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                    std::__shared_weak_count::__release_weak(v288);
                  }
                }
                else
                {
                  *(_QWORD *)&v661 = v285;
                }
                v292 = (std::__shared_weak_count *)v570.__r_.__value_.__r.__words[2];
                if (v570.__r_.__value_.__r.__words[2])
                {
                  v293 = (unint64_t *)(v570.__r_.__value_.__r.__words[2] + 8);
                  do
                    v294 = __ldaxr(v293);
                  while (__stlxr(v294 - 1, v293));
                  if (!v294)
                  {
                    ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                    std::__shared_weak_count::__release_weak(v292);
                  }
                }
                v295 = __p.__r_.__value_.__r.__words[0];
                if (*(char *)(v661 + 31) >= 0)
                  v296 = v661 + 8;
                else
                  v296 = *(_QWORD *)(v661 + 8);
                v297 = _os_log_pack_fill();
                *(_DWORD *)v297 = 136315138;
                *(_QWORD *)(v297 + 4) = v296;
                v298 = operator new();
                v299 = *(unsigned __int8 *)(v94 + 39);
                v300 = v557;
                if ((v299 & 0x80u) != 0)
                {
                  v300 = *(const char **)(v94 + 16);
                  v299 = *(_QWORD *)(v94 + 24);
                }
                *(_QWORD *)v298 = v295;
                *(_OWORD *)(v298 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
                *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v298 + 24) = v660;
                v660 = 0uLL;
                *(_QWORD *)(v298 + 40) = v300;
                *(_QWORD *)(v298 + 48) = v299;
                *(_BYTE *)(v298 + 56) = 16;
                *(_QWORD *)category = 0;
                v570.__r_.__value_.__r.__words[0] = v298;
                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v92 + 24) + 40))(*(_QWORD *)(v92 + 24), &v570);
                v301 = v570.__r_.__value_.__r.__words[0];
                v570.__r_.__value_.__r.__words[0] = 0;
                if (v301)
                {
                  v302 = *(std::__shared_weak_count **)(v301 + 32);
                  if (v302)
                  {
                    v303 = (unint64_t *)&v302->__shared_owners_;
                    do
                      v304 = __ldaxr(v303);
                    while (__stlxr(v304 - 1, v303));
                    if (!v304)
                    {
                      ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                      std::__shared_weak_count::__release_weak(v302);
                    }
                  }
                  v305 = *(std::__shared_weak_count **)(v301 + 16);
                  if (v305)
                  {
                    v306 = (unint64_t *)&v305->__shared_owners_;
                    do
                      v307 = __ldaxr(v306);
                    while (__stlxr(v307 - 1, v306));
                    if (!v307)
                    {
                      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                      std::__shared_weak_count::__release_weak(v305);
                    }
                  }
                  MEMORY[0x212BC6398](v301, 0x10F0C40B62ED6C6);
                  v308 = *(_QWORD *)category;
                  *(_QWORD *)category = 0;
                  if (v308)
                  {
                    v309 = *(std::__shared_weak_count **)(v308 + 32);
                    if (v309)
                    {
                      v310 = (unint64_t *)&v309->__shared_owners_;
                      do
                        v311 = __ldaxr(v310);
                      while (__stlxr(v311 - 1, v310));
                      if (!v311)
                      {
                        ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                        std::__shared_weak_count::__release_weak(v309);
                      }
                    }
                    v312 = *(std::__shared_weak_count **)(v308 + 16);
                    if (v312)
                    {
                      v313 = (unint64_t *)&v312->__shared_owners_;
                      do
                        v314 = __ldaxr(v313);
                      while (__stlxr(v314 - 1, v313));
                      if (!v314)
                      {
                        ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                        std::__shared_weak_count::__release_weak(v312);
                      }
                    }
                    MEMORY[0x212BC6398](v308, 0x10F0C40B62ED6C6);
                  }
                }
                v315 = (std::__shared_weak_count *)*((_QWORD *)&v660 + 1);
                if (*((_QWORD *)&v660 + 1))
                {
                  v316 = (unint64_t *)(*((_QWORD *)&v660 + 1) + 8);
                  do
                    v317 = __ldaxr(v316);
                  while (__stlxr(v317 - 1, v316));
                  if (!v317)
                  {
                    ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
                    std::__shared_weak_count::__release_weak(v315);
                    v318 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                    if (__p.__r_.__value_.__r.__words[2])
                      goto LABEL_535;
                    goto LABEL_538;
                  }
                }
                v318 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
                if (!__p.__r_.__value_.__r.__words[2])
                  goto LABEL_538;
LABEL_535:
                v319 = (unint64_t *)&v318->__shared_owners_;
                do
                  v320 = __ldaxr(v319);
                while (__stlxr(v320 - 1, v319));
                if (v320)
                {
LABEL_538:
                  if (v90)
                    goto LABEL_539;
LABEL_542:
                  sub_20E863570((uint64_t)v653);
                  v322 = *(std::__shared_weak_count **)v654;
                  if (*(_QWORD *)v654)
                  {
                    v323 = (unint64_t *)(*(_QWORD *)v654 + 8);
                    do
                      v324 = __ldaxr(v323);
                    while (__stlxr(v324 - 1, v323));
                    if (!v324)
                    {
                      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                      std::__shared_weak_count::__release_weak(v322);
                    }
                  }
                  goto LABEL_547;
                }
                ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                std::__shared_weak_count::__release_weak(v318);
                if (!v90)
                  goto LABEL_542;
              }
              else
              {
                os_log_type_enabled(v173, OS_LOG_TYPE_ERROR);
                LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v93;
                v182 = (void *)_os_log_send_and_compose_impl();
                if (!v182)
                  goto LABEL_538;
                free(v182);
                if (!v90)
                  goto LABEL_542;
              }
LABEL_539:
              v321 = &__src;
              if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v321 = (std::string *)__src.__r_.__value_.__r.__words[0];
              sub_20E8C003C((uint64_t)v653, "[%s] does not have read permissions.", (const char *)v321);
              sub_20E863570((uint64_t)v653);
              goto LABEL_542;
            }
          }
          memmove(v169, v167, v168);
          goto LABEL_298;
        }
      }
LABEL_547:
      v325 = sub_210219C18();
      v326 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      v5 = a1;
      if ((v326 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_566;
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218242;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v579[0];
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"PERM";
      v328 = (char *)_os_log_send_and_compose_impl();
      v329 = strlen(v328);
      *(_QWORD *)v653 = 0;
      pthread_threadid_np(0, (__uint64_t *)v653);
      v330 = *(_QWORD *)v653;
      timespec_get((timespec *)v653, 1);
      sub_210219E20(&__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v325 + 1), (__int128 *)(v325 + 5), "MappingIOLoadMeta:SID:%llu, TYPE:%s", 0x23uLL, v328, v329, v330, v653);
      std::mutex::lock(&stru_254A5A410);
      v331 = qword_254A5A458;
      for (m = unk_254A5A460; v331 != m; v331 += 40)
      {
        v333 = *(_QWORD *)(v331 + 32);
        if (!v333)
          sub_20E86D37C();
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v333 + 48))(v333, &__p);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (SBYTE7(v668) < 0)
      {
        operator delete(*((void **)&v666 + 1));
        if (SBYTE7(v666) < 0)
        {
LABEL_557:
          operator delete(*((void **)&v664 + 1));
          if (!(_BYTE)v664)
            goto LABEL_560;
          goto LABEL_558;
        }
      }
      else if (SBYTE7(v666) < 0)
      {
        goto LABEL_557;
      }
      if (!(_BYTE)v664)
        goto LABEL_560;
LABEL_558:
      if (SHIBYTE(v663) < 0)
        operator delete(*((void **)&v662 + 1));
LABEL_560:
      if ((_BYTE)v662 && SHIBYTE(v661) < 0)
        operator delete(*((void **)&v660 + 1));
      if ((SBYTE7(v660) & 0x80000000) == 0)
      {
        if (!v328)
          goto LABEL_566;
LABEL_565:
        free(v328);
        goto LABEL_566;
      }
      operator delete((void *)__p.__r_.__value_.__l.__size_);
      if (v328)
        goto LABEL_565;
LABEL_566:
      if (os_signpost_enabled((os_log_t)*v325))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 134218242;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v579[0];
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"PERM";
        _os_signpost_emit_unreliably_with_name_impl();
      }
LABEL_400:
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__src.__r_.__value_.__l.__data_);
      v4 += 32;
    }
    while (v4 != v3);
  }
}

void sub_20EF650BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;
  char a71;

  if (a71 && a70 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x590]);
  __cxa_end_catch();
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF65654(uint64_t a1, char *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v28[9];
  _QWORD v29[3];
  _QWORD v30[9];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD v38[4];
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v15 = 0u;
  v16 = 0;
  v14 = 0u;
  *(_QWORD *)&v33 = 0;
  v31 = 0u;
  v32 = 0u;
  memset(&v38[2], 0, 32);
  v39 = 0;
  *(_QWORD *)((char *)&v38[2] + 13) = 0;
  v6 = v38[2];
  v7 = v38[3];
  memset(v38, 0, 32);
  *(_QWORD *)(a1 + 232) = 0;
  *((_QWORD *)&v33 + 1) = -1;
  v8 = v32;
  *(_OWORD *)(a1 + 336) = v33;
  v9 = v31;
  *(_OWORD *)(a1 + 320) = v8;
  *(_OWORD *)(a1 + 304) = v9;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v10 = a1 + 8;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 612) = 0;
  v27 = v28;
  v28[8] = v29;
  v29[0] = 0;
  v26 = 3;
  v28[0] = 0;
  v28[1] = 0;
  v30[0] = 0;
  v30[1] = 0;
  v29[1] = 0;
  v29[2] = v30;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)&v15 = (char *)&v15 + 8;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v21 = 0;
  v22 = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 120) = 3;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v28[2] = 0;
  v28[3] = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  memset(&v28[4], 0, 32);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = -1;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  v30[2] = -1;
  memset(&v30[3], 0, 24);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  memset(&v30[6], 0, 24);
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = v38;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  *(_DWORD *)(a1 + 448) = v39;
  *(_OWORD *)(a1 + 432) = v7;
  *(_OWORD *)(a1 + 416) = v6;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_BYTE *)(a1 + 456) = 1;
  sub_20E94FADC((uint64_t)&v14);
  if (a2[23] >= 0)
    v11 = a2;
  else
    v11 = *(char **)a2;
  result = sub_20F436D84(v11, v10, a3);
  if ((_DWORD)result == 1)
    v13 = 2;
  else
    v13 = 1;
  if ((_DWORD)result == 2)
    v13 = 3;
  *(_BYTE *)a1 = v13;
  if ((_DWORD)result == 2)
  {
    if (*(_BYTE *)(a1 + 456))
    {
      result = sub_20E94FADC(v10);
      *(_BYTE *)(a1 + 456) = 0;
    }
  }
  return result;
}

#error "20EF65A30: call analysis failed (funcsize=128)"

void sub_20EF65B88(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _BYTE v18[18];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 134218242;
    *(_QWORD *)v18 = v8;
    *(_WORD *)&v18[8] = 2080;
    *(_QWORD *)&v18[10] = "STRM";
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "MappingIOSampleLoadErr:SID:%llu, TYPE:%s", 0x28uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)&v18[4]);
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 134218242;
    *(_QWORD *)v18 = v15;
    *(_WORD *)&v18[8] = 2080;
    *(_QWORD *)&v18[10] = "STRM";
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF65E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF65EBC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _BYTE v18[18];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 134218242;
    *(_QWORD *)v18 = v8;
    *(_WORD *)&v18[8] = 2080;
    *(_QWORD *)&v18[10] = "UPDATE";
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "MappingIOSampleLoadErr:SID:%llu, TYPE:%s", 0x28uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)&v18[4]);
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 134218242;
    *(_QWORD *)v18 = v15;
    *(_WORD *)&v18[8] = 2080;
    *(_QWORD *)&v18[10] = "UPDATE";
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF661B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

char **sub_20EF661F0(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  if (*((_BYTE *)a1 + 104))
  {
    sub_20E86872C((uint64_t)(a1 + 3), a1[4]);
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        v5 = a1[1];
        do
        {
          v7 = (void *)*((_QWORD *)v5 - 6);
          v5 -= 48;
          v6 = v7;
          if (v7)
          {
            *((_QWORD *)v3 - 5) = v6;
            operator delete(v6);
          }
          v3 = v5;
        }
        while (v5 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

char **sub_20EF66278(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  void *v5;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v5 = (void *)*((_QWORD *)v3 - 3);
          if (v5)
          {
            *((_QWORD *)v3 - 2) = v5;
            operator delete(v5);
          }
          v3 -= 48;
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_20EF662F0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF66864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF66888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF6689C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF668F4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF66E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF66E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF66EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF66EF8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF6746C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF67490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF674A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF674FC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = sub_20E994E3C((_QWORD *)a1, (uint64_t *)a2);
  v4[4] = 0;
  v4[3] = (uint64_t)(v4 + 4);
  v4[5] = 0;
  sub_20E94F000(v4 + 3, *(_QWORD **)(a2 + 24), (_QWORD *)(a2 + 32));
  v5 = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  return a1;
}

void sub_20EF67568(_Unwind_Exception *a1)
{
  char **v1;
  uint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;

  sub_20E86872C(v2, v1[4]);
  v4 = *v1;
  if (*v1)
  {
    v5 = v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 6);
        v7 -= 48;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 5) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void sub_20EF675CC(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;

  v6 = a2;
  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 4) < __sz)
  {
    if (v10)
    {
      v11 = a1[1];
      v12 = (void *)*a1;
      if (v11 != v10)
      {
        v13 = a1[1];
        do
        {
          v15 = *(void **)(v13 - 48);
          v13 -= 48;
          v14 = v15;
          if (v15)
          {
            *(_QWORD *)(v11 - 40) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x555555555555555)
      goto LABEL_40;
    v22 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v23 = 2 * v22;
    if (2 * v22 <= __sz)
      v23 = __sz;
    v24 = v22 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v23;
    if (v24 > 0x555555555555555)
LABEL_40:
      sub_20E92CED8();
    v25 = 48 * v24;
    v26 = operator new(48 * v24);
    *a1 = (uint64_t)v26;
    a1[1] = (uint64_t)v26;
    a1[2] = (uint64_t)v26 + v25;
    v27 = sub_20E994F48(v9, v6, a3, (uint64_t)v26);
LABEL_31:
    a1[1] = v27;
    return;
  }
  v16 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v10) >> 4) < __sz)
  {
    v17 = a2 + 16 * ((v16 - v10) >> 4);
    if (v16 != v10)
    {
      v18 = 16 * ((v16 - v10) >> 4);
      do
      {
        if (v6 != v10)
          sub_20EF67860((_QWORD *)v10, *(char **)v6, *(char **)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 6);
        v19 = *(_OWORD *)(v6 + 24);
        *(_DWORD *)(v10 + 40) = *(_DWORD *)(v6 + 40);
        *(_OWORD *)(v10 + 24) = v19;
        v6 += 48;
        v10 += 48;
        v18 -= 48;
      }
      while (v18);
      v10 = a1[1];
    }
    v27 = sub_20E994F48(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != a3)
  {
    v20 = *a1;
    do
    {
      if (v6 != v10)
        sub_20EF67860((_QWORD *)v10, *(char **)v6, *(char **)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 6);
      v21 = *(_OWORD *)(v6 + 24);
      *(_DWORD *)(v10 + 40) = *(_DWORD *)(v6 + 40);
      *(_OWORD *)(v10 + 24) = v21;
      v6 += 48;
      v10 += 48;
      v20 += 48;
    }
    while (v6 != a3);
    v16 = a1[1];
    if (v16 == v20)
      goto LABEL_39;
    goto LABEL_35;
  }
  v20 = *a1;
  if (v16 != v10)
  {
LABEL_35:
    v28 = v16;
    do
    {
      v30 = *(void **)(v28 - 48);
      v28 -= 48;
      v29 = v30;
      if (v30)
      {
        *(_QWORD *)(v16 - 40) = v29;
        operator delete(v29);
      }
      v16 = v28;
    }
    while (v28 != v20);
  }
LABEL_39:
  a1[1] = v20;
}

void sub_20EF67850(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20EF67858(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_20EF67860(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 6)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 58)
      goto LABEL_22;
    v10 = v8 >> 5;
    if (v8 >> 5 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    v12 = 0x3FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 58)
LABEL_22:
      sub_20E92CED8();
    v13 = v12 << 6;
    result = operator new(v12 << 6);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 6;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[64 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_20EF679A4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *i;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t *v42;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v42 = (uint64_t *)v10[1];
            if (!v42)
              break;
            do
            {
              v10 = v42;
              v42 = (uint64_t *)*v42;
            }
            while (v42);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = a2;
        while (1)
        {
          v9 = v10;
          v14 = *((_OWORD *)v13 + 2);
          *((_DWORD *)v12 + 12) = *((_DWORD *)v13 + 12);
          *((_OWORD *)v12 + 2) = v14;
          memcpy(v12 + 7, v13 + 7, 0x200uLL);
          v15 = *v8;
          v16 = a1 + 8;
          v17 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_21:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = v16;
          *v17 = v12;
          v23 = **(_QWORD **)a1;
          if (v23)
            goto LABEL_22;
LABEL_23:
          sub_20E868578(*(uint64_t **)(a1 + 8), v12);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v26 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v27 = (uint64_t *)v10[1];
                  if (!v27)
                    break;
                  do
                  {
                    v10 = v27;
                    v27 = (uint64_t *)*v27;
                  }
                  while (v27);
                }
              }
              else
              {
                for (v10[1] = 0; v26; v26 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v26;
                    v26 = (uint64_t *)*v26;
                  }
                  while (v26);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v24 = (_QWORD *)v13[1];
          if (v24)
          {
            do
            {
              v4 = v24;
              v24 = (_QWORD *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v25 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v25);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_45;
        }
        v18 = v12[4];
        do
        {
          while (1)
          {
            v16 = v15;
            v19 = *(_QWORD *)(v15 + 32);
            v20 = v18 >= v19;
            if (v18 == v19)
            {
              v21 = *((_DWORD *)v12 + 10);
              v22 = *(_DWORD *)(v15 + 40);
              v20 = v21 >= v22;
              if (v21 == v22)
                v20 = *((_DWORD *)v12 + 12) >= *(_DWORD *)(v16 + 48);
            }
            if (v20)
              break;
            v15 = *(_QWORD *)v16;
            v17 = (uint64_t **)v16;
            if (!*(_QWORD *)v16)
              goto LABEL_21;
          }
          v15 = *(_QWORD *)(v16 + 8);
        }
        while (v15);
        v17 = (uint64_t **)(v16 + 8);
        *v12 = 0;
        v12[1] = 0;
        v12[2] = v16;
        *(_QWORD *)(v16 + 8) = v12;
        v23 = **(_QWORD **)a1;
        if (!v23)
          goto LABEL_23;
LABEL_22:
        *(_QWORD *)a1 = v23;
        v12 = *v17;
        goto LABEL_23;
      }
LABEL_45:
      sub_20E86872C(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        sub_20E86872C(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v29 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v30 = (uint64_t *)operator new(0x238uLL);
      memcpy(v30 + 4, v4 + 4, 0x218uLL);
      v31 = *v29;
      v32 = a1 + 8;
      v33 = (uint64_t **)(a1 + 8);
      if (*v29)
        break;
LABEL_60:
      *v30 = 0;
      v30[1] = 0;
      v30[2] = v32;
      *v33 = v30;
      v39 = **(_QWORD **)a1;
      if (v39)
        goto LABEL_61;
LABEL_62:
      sub_20E868578(*(uint64_t **)(a1 + 8), v30);
      ++*(_QWORD *)(a1 + 16);
      v40 = (_QWORD *)v4[1];
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = (_QWORD *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (_QWORD *)v4[2];
          v25 = *v41 == (_QWORD)v4;
          v4 = v41;
        }
        while (!v25);
      }
      v4 = v41;
      if (v41 == a3)
        return;
    }
    v34 = v30[4];
    do
    {
      while (1)
      {
        v32 = v31;
        v35 = *(_QWORD *)(v31 + 32);
        v36 = v34 >= v35;
        if (v34 == v35)
        {
          v37 = *((_DWORD *)v30 + 10);
          v38 = *(_DWORD *)(v31 + 40);
          v36 = v37 >= v38;
          if (v37 == v38)
            v36 = *((_DWORD *)v30 + 12) >= *(_DWORD *)(v32 + 48);
        }
        if (v36)
          break;
        v31 = *(_QWORD *)v32;
        v33 = (uint64_t **)v32;
        if (!*(_QWORD *)v32)
          goto LABEL_60;
      }
      v31 = *(_QWORD *)(v32 + 8);
    }
    while (v31);
    v33 = (uint64_t **)(v32 + 8);
    *v30 = 0;
    v30[1] = 0;
    v30[2] = v32;
    *(_QWORD *)(v32 + 8) = v30;
    v39 = **(_QWORD **)a1;
    if (!v39)
      goto LABEL_62;
LABEL_61:
    *(_QWORD *)a1 = v39;
    v30 = *v33;
    goto LABEL_62;
  }
}

__n128 sub_20EF67D34(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  if (*(unsigned __int8 *)(a1 + 448) == *(unsigned __int8 *)(a2 + 448))
  {
    if (*(_BYTE *)(a1 + 448))
      sub_20E94BF80(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 448))
  {
    sub_20E94FADC(a1);
    *(_BYTE *)(a1 + 448) = 0;
  }
  else
  {
    sub_20EAC7338(a1 + 8, a2 + 8);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 264) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a2 + 272) = 0;
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a2 + 288) = 0;
    v5 = *(_OWORD *)(a2 + 296);
    v6 = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 328) = v6;
    *(_OWORD *)(a1 + 296) = v5;
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    v7 = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 352) = v7;
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a2 + 344) = 0;
    *(_QWORD *)(a2 + 352) = 0;
    *(_QWORD *)(a2 + 360) = 0;
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    v8 = a1 + 376;
    v9 = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 376) = v9;
    v10 = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 384) = v10;
    if (v10)
    {
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(a2 + 368) = a2 + 376;
      *(_QWORD *)(a2 + 376) = 0;
      *(_QWORD *)(a2 + 384) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 368) = v8;
    }
    result = *(__n128 *)(a2 + 392);
    v11 = *(_OWORD *)(a2 + 408);
    v12 = *(_OWORD *)(a2 + 424);
    *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
    *(_OWORD *)(a1 + 408) = v11;
    *(_OWORD *)(a1 + 424) = v12;
    *(__n128 *)(a1 + 392) = result;
    *(_BYTE *)(a1 + 448) = 1;
  }
  return result;
}

__n128 sub_20EF67E7C(__n128 *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  __n128 result;
  char *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  void *v16;
  _QWORD *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  unint64_t v23;
  char *v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;

  if (a1[6].n128_u8[8] == *(unsigned __int8 *)(a2 + 104))
  {
    if (a1[6].n128_u8[8])
    {
      v4 = (char *)a1->n128_u64[0];
      if (a1->n128_u64[0])
      {
        v5 = (char *)a1->n128_u64[1];
        v6 = (char *)a1->n128_u64[0];
        if (v5 != v4)
        {
          v7 = (char *)a1->n128_u64[1];
          do
          {
            v9 = (void *)*((_QWORD *)v7 - 6);
            v7 -= 48;
            v8 = v9;
            if (v9)
            {
              *((_QWORD *)v5 - 5) = v8;
              operator delete(v8);
            }
            v5 = v7;
          }
          while (v7 != v4);
          v6 = (char *)a1->n128_u64[0];
        }
        a1->n128_u64[1] = (unint64_t)v4;
        operator delete(v6);
        a1->n128_u64[0] = 0;
        a1->n128_u64[1] = 0;
        a1[1].n128_u64[0] = 0;
      }
      *a1 = *(__n128 *)a2;
      a1[1].n128_u64[0] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v21 = (char *)&a1[2];
      sub_20E86872C((uint64_t)&a1[1].n128_i64[1], (_QWORD *)a1[2].n128_u64[0]);
      a1[1].n128_u64[1] = *(_QWORD *)(a2 + 24);
      v22 = (_QWORD *)(a2 + 32);
      v23 = *(_QWORD *)(a2 + 32);
      a1[2].n128_u64[0] = v23;
      v24 = *(char **)(a2 + 40);
      a1[2].n128_u64[1] = (unint64_t)v24;
      if (v24)
      {
        *(_QWORD *)(v23 + 16) = v21;
        *(_QWORD *)(a2 + 24) = v22;
        *v22 = 0;
        *(_QWORD *)(a2 + 40) = 0;
      }
      else
      {
        a1[1].n128_u64[1] = (unint64_t)v21;
      }
      result = *(__n128 *)(a2 + 48);
      v25 = *(__n128 *)(a2 + 64);
      v26 = *(__n128 *)(a2 + 80);
      a1[6].n128_u32[0] = *(_DWORD *)(a2 + 96);
      a1[4] = v25;
      a1[5] = v26;
      a1[3] = result;
    }
  }
  else if (a1[6].n128_u8[8])
  {
    sub_20E86872C((uint64_t)&a1[1].n128_i64[1], (_QWORD *)a1[2].n128_u64[0]);
    v11 = (char *)a1->n128_u64[0];
    if (a1->n128_u64[0])
    {
      v12 = (char *)a1->n128_u64[1];
      v13 = (void *)a1->n128_u64[0];
      if (v12 != v11)
      {
        v14 = (char *)a1->n128_u64[1];
        do
        {
          v16 = (void *)*((_QWORD *)v14 - 6);
          v14 -= 48;
          v15 = v16;
          if (v16)
          {
            *((_QWORD *)v12 - 5) = v15;
            operator delete(v15);
          }
          v12 = v14;
        }
        while (v14 != v11);
        v13 = (void *)a1->n128_u64[0];
      }
      a1->n128_u64[1] = (unint64_t)v11;
      operator delete(v13);
    }
    a1[6].n128_u8[8] = 0;
  }
  else
  {
    a1->n128_u64[0] = 0;
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    *a1 = *(__n128 *)a2;
    a1[1].n128_u64[0] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    a1[1].n128_u64[1] = *(_QWORD *)(a2 + 24);
    v17 = (_QWORD *)(a2 + 32);
    v18 = *(_QWORD *)(a2 + 32);
    a1[2].n128_u64[0] = v18;
    v19 = (char *)&a1[2];
    v20 = *(char **)(a2 + 40);
    a1[2].n128_u64[1] = (unint64_t)v20;
    if (v20)
    {
      *(_QWORD *)(v18 + 16) = v19;
      *(_QWORD *)(a2 + 24) = v17;
      *v17 = 0;
      *(_QWORD *)(a2 + 40) = 0;
    }
    else
    {
      a1[1].n128_u64[1] = (unint64_t)v19;
    }
    result = *(__n128 *)(a2 + 48);
    v27 = *(__n128 *)(a2 + 64);
    v28 = *(__n128 *)(a2 + 80);
    a1[6].n128_u32[0] = *(_DWORD *)(a2 + 96);
    a1[4] = v27;
    a1[5] = v28;
    a1[3] = result;
    a1[6].n128_u8[8] = 1;
  }
  return result;
}

double sub_20EF6807C(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  std::string *v7;
  int v8;
  std::string *v9;
  int v10;
  uint64_t *v11;
  unsigned __int8 v12;
  char *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  char *j;
  uint64_t v27;
  void (*v28)(uint64_t);
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  char *k;
  uint64_t v33;
  void (*v34)(uint64_t);
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::string::size_type v43;
  std::string::size_type size;
  void *v45;
  std::string::size_type v46;
  void *v47;
  void *v48;
  uint64_t *v49;
  unsigned __int8 v50;
  char *v52;
  size_t v53;
  __darwin_time_t tv_sec;
  uint64_t v55;
  uint64_t m;
  uint64_t v57;
  std::string::size_type v58;
  std::string::size_type v59;
  void *v60;
  std::string::size_type v61;
  void *v62;
  void *v63;
  std::string::size_type v64;
  std::string::size_type v65;
  void *v66;
  void *v67;
  uint64_t *v68;
  unsigned __int8 v69;
  char *v71;
  size_t v72;
  __darwin_time_t v73;
  uint64_t v74;
  uint64_t n;
  uint64_t v76;
  void *v77;
  std::string::size_type ii;
  void *v79;
  int v80;
  std::string::size_type v81;
  std::string::size_type v82;
  void *v83;
  void *v84;
  char *v85;
  char *v86;
  void *v87;
  char *v88;
  void *v89;
  void *v90;
  unsigned __int8 v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  const char *v95;
  uint64_t v96;
  const char *v97;
  size_t v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  const char *v101;
  size_t v102;
  std::string::size_type *p_size;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  size_t v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  std::__shared_weak_count_vtbl *v114;
  size_t v115;
  std::string::size_type v116;
  std::string *p_object;
  void *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  std::string::size_type v122;
  char v123;
  _QWORD *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  char *v127;
  char *shared_owners;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  std::string::size_type v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  const char *v144;
  uint64_t *v145;
  uint64_t v146;
  _QWORD *v147;
  __int128 v148;
  int v149;
  char *v150;
  int v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *p_shared_owners;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  _QWORD *v168;
  __int128 v169;
  int v170;
  char *v171;
  int v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t *v190;
  unsigned __int8 v191;
  char *v193;
  size_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t jj;
  uint64_t v198;
  std::__fs::filesystem::path::__string_view v199;
  timespec *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v201;
  std::basic_string_view<_CharT, _Traits>::size_type v202;
  void *v203;
  int v204;
  unsigned __int8 v205;
  int v206;
  unint64_t v207;
  unint64_t v208;
  std::string::size_type v209;
  uint64_t v210;
  const char *v211;
  size_t v212;
  unsigned __int8 v213;
  unsigned __int8 v214;
  const char *v215;
  size_t v216;
  std::string::size_type *v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  NSObject *v223;
  const char *v224;
  size_t v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  size_t v229;
  std::string::size_type v230;
  std::string *v231;
  void *v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  std::string::size_type v236;
  char v237;
  _QWORD *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  char *v241;
  char *v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  const char *v250;
  std::string::size_type v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  const char *v258;
  uint64_t *v259;
  uint64_t v260;
  _QWORD *v261;
  __int128 v262;
  int v263;
  char *v264;
  int v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  _QWORD *v282;
  __int128 v283;
  int v284;
  char *v285;
  int v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  double result;
  std::bad_cast *v305;
  std::bad_cast *v306;
  std::bad_cast *v307;
  std::bad_cast *v308;
  int v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  std::runtime_error *exception;
  void **v314;
  uint64_t v315;
  uint64_t *v316;
  char *v317;
  char *v318;
  unsigned __int8 v319;
  uint64_t v320;
  const char *v321;
  NSObject *v322;
  void **v323;
  uint64_t v324;
  std::__shared_weak_count_vtbl *v325;
  std::__shared_weak_count *v326;
  const char *v327;
  std::__shared_weak_count *v328;
  const char *v330;
  int v331;
  int v332;
  int v333;
  __int128 v335;
  std::string::size_type v336;
  uint64_t v337;
  void *v338[2];
  char v339;
  void *v340[2];
  char v341;
  void *v342[2];
  uint64_t v343;
  void *v344[2];
  uint64_t v345;
  void **v346;
  timespec __dst;
  unint64_t v348;
  uint64_t v349;
  char *category[2];
  uint64_t (**v351)();
  uint64_t v352;
  void (**v353)();
  void *v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358[2];
  uint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  std::string __str;
  int v363;
  char v364;
  void *v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  void *v369;
  char v370;
  char v371;
  void *v372;
  char v373;
  void *v374;
  char v375;
  uint64_t v376;
  char v377;
  void *v378;
  char *v379;
  _QWORD *v380[3];
  __int128 v381;
  __int128 v382;
  __int128 v383;
  int v384;
  char v385;
  std::string v386;
  char v387;
  int data;
  char v389;
  char v390;
  std::string __src;
  _QWORD *v392;
  char *v393;
  int v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  int v398;
  char v399;
  std::string object;
  unint64_t v401;
  void *v402;
  void *v403[4];
  __int128 v404;
  char v405;
  void *v406;
  char v407;
  char v408;
  void *__p;
  char v410;
  uint64_t v411;

  v411 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  v5 = **a2;
  v6 = (uint64_t)a2[2];
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 176))(v6, a3)
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 312))(v6, a3) & 1) != 0)
  {
    strcpy((char *)&__src, "map.msgpack");
    memset(&object, 0, sizeof(object));
    v7 = (std::string *)&v390;
    do
    {
      v8 = v7->__r_.__value_.__s.__data_[1];
      v7 = (std::string *)((char *)v7 + 1);
    }
    while (v8);
    sub_20E8A9678(&object, &__src, v7);
    if (*(char *)(a3 + 23) < 0)
    {
      sub_20E860C04(v344, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)v344 = *(_OWORD *)a3;
      v345 = *(_QWORD *)(a3 + 16);
    }
    sub_20E8A944C((uint64_t)v344, (std::__fs::filesystem::path *)&object);
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      operator delete(object.__r_.__value_.__l.__data_);
  }
  else
  {
    v344[0] = 0;
    v344[1] = 0;
    v345 = 0;
  }
  v331 = v5;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 176))(v6, a3)
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 312))(v6, a3) & 1) != 0)
  {
    strcpy((char *)&__src, "map_update.msgpack");
    memset(&object, 0, sizeof(object));
    v9 = (std::string *)&v390;
    do
    {
      v10 = v9->__r_.__value_.__s.__data_[1];
      v9 = (std::string *)((char *)v9 + 1);
    }
    while (v10);
    sub_20E8A9678(&object, &__src, v9);
    if (*(char *)(a3 + 23) < 0)
    {
      sub_20E860C04(v342, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)v342 = *(_OWORD *)a3;
      v343 = *(_QWORD *)(a3 + 16);
    }
    sub_20E8A944C((uint64_t)v342, (std::__fs::filesystem::path *)&object);
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      operator delete(object.__r_.__value_.__l.__data_);
  }
  else
  {
    v342[0] = 0;
    v342[1] = 0;
    v343 = 0;
  }
  sub_20EF703EC(a3, v6, (uint64_t)v340);
  sub_20EF70540(a3, v6, (uint64_t)v338);
  sub_20EF65654((uint64_t)&__str, (char *)v344, v6);
  if (__str.__r_.__value_.__s.__data_[0] == 3)
  {
    v11 = sub_210219C18();
    v12 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_41;
    LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)"MAP";
    v14 = (char *)_os_log_send_and_compose_impl();
    v15 = strlen(v14);
    __src.__r_.__value_.__r.__words[0] = 0;
    pthread_threadid_np(0, (__uint64_t *)&__src);
    v16 = __src.__r_.__value_.__r.__words[0];
    timespec_get((timespec *)&__src, 1);
    sub_210219E20(&object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v11 + 1), (__int128 *)(v11 + 5), "MappingIOSampleLoadErr:TYPE:%s", 0x1EuLL, v14, v15, v16, &__src);
    std::mutex::lock(&stru_254A5A410);
    v17 = qword_254A5A458;
    for (i = unk_254A5A460; v17 != i; v17 += 40)
    {
      v19 = *(_QWORD *)(v17 + 32);
      if (!v19)
        sub_20E86D37C();
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v19 + 48))(v19, &object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v410 < 0)
    {
      operator delete(__p);
      if ((v408 & 0x80000000) == 0)
      {
LABEL_23:
        if (!v405)
        {
LABEL_34:
          if (LOBYTE(v403[2]) && SHIBYTE(v403[1]) < 0)
            operator delete(v402);
          if (SHIBYTE(v401) < 0)
            operator delete((void *)object.__r_.__value_.__l.__size_);
          if (v14)
            free(v14);
LABEL_41:
          if (os_signpost_enabled((os_log_t)*v11))
          {
            LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)"MAP";
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_183;
        }
LABEL_32:
        if (SHIBYTE(v404) < 0)
          operator delete(v403[3]);
        goto LABEL_34;
      }
    }
    else if ((v408 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v406);
    if (!v405)
      goto LABEL_34;
    goto LABEL_32;
  }
  if (v377 && (*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v6 + 176))(v6, v342))
  {
    v349 = v376;
    (*(void (**)(timespec *__return_ptr, uint64_t, void **, uint64_t))(*(_QWORD *)v6 + 368))(&__dst, v6, v342, 8);
    if (!__dst.tv_nsec)
    {
      sub_20EF5F730(v358);
      if (**(int **)(v358[0] + 56) <= 5)
      {
        v309 = *(unsigned __int8 *)(v358[0] + 72);
        v310 = sub_20E8C31DC(v358[0], "OSLogSurrogateAppender", 1, 0);
        v311 = v310 ? v310 + 16 : 0;
        if (v309 || v310)
        {
          object.__r_.__value_.__r.__words[0] = (std::string::size_type)v358;
          object.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
          object.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v401) = 5;
          v402 = "unknown file";
          LODWORD(v403[0]) = 204;
          v403[3] = 0;
          v403[1] = "unknown function";
          v403[2] = 0;
          v314 = v342;
          if (v343 < 0)
            v314 = (void **)v342[0];
          v346 = v314;
          v315 = *(_QWORD *)object.__r_.__value_.__l.__data_;
          v316 = (uint64_t *)(*(_QWORD *)object.__r_.__value_.__l.__data_ + 16);
          if (*(char *)(*(_QWORD *)object.__r_.__value_.__l.__data_ + 39) < 0)
          {
            v318 = *(char **)(v315 + 16);
            v317 = *(char **)(v315 + 24);
          }
          else
          {
            v317 = (char *)*(unsigned __int8 *)(*(_QWORD *)object.__r_.__value_.__l.__data_ + 39);
            v318 = (char *)(*(_QWORD *)object.__r_.__value_.__l.__data_ + 16);
          }
          category[0] = v318;
          category[1] = v317;
          v319 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v319 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&__src);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__src);
            if ((_BYTE)v392 && SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__src.__r_.__value_.__l.__data_);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v320 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v321 = byte_254A4A4F8;
          }
          else
          {
            v320 = *(_QWORD *)&byte_254A4A4F8[8];
            v321 = *(const char **)byte_254A4A4F8;
          }
          v359 = (uint64_t)v321;
          v360 = v320;
          v351 = (uint64_t (**)())os_log_create(v321, category[0]);
          sub_20E86E5A8(&v352, (uint64_t)&v359);
          sub_20E86E5A8(&v356, (uint64_t)category);
          v322 = v351;
          sub_20E86E44C((uint64_t)&v351);
          sub_20EF668F4(v311, v316, v322, OS_LOG_TYPE_ERROR, (const char **)&v346);
          if (v309)
          {
            v323 = v342;
            if (v343 < 0)
              v323 = (void **)v342[0];
            sub_20E8C003C((uint64_t)&object, "[%s] had a bad istream.", (const char *)v323);
            sub_20E863570((uint64_t)&object);
          }
          sub_20E863714((uint64_t)&object);
        }
      }
      v312 = sub_210219C18();
      sub_20EF65B88((uint64_t)v312, 0xEEEEB0B5B2B2EEEELL, &v349);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      sub_20E8610C0(&object, "Failed with bad istream during map sample load.");
      std::runtime_error::runtime_error(exception, &object);
      exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
      LODWORD(exception[1].__vftable) = 1;
      __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)__dst.tv_nsec + 16))(__dst.tv_nsec);
    v359 = 1;
    sub_20E9EECEC(&v351, &v359, v20, 0x2800uLL);
    v351 = &off_24C9B0298;
    v353 = (void (**)())&unk_24C9B03E0;
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = 0xFFFFFFFFFFFFFFFFLL;
    v401 = 0;
    object.__r_.__value_.__r.__words[2] = 0;
    memset(v403, 0, sizeof(v403));
    v402 = v403;
    v404 = 0u;
    LODWORD(v359) = 1;
    sub_20E9EDADC(v357, &v359);
    sub_20E90A71C(&v353);
    sub_20E9EDE6C(v357, &object);
    sub_20E9400E0((uint64_t)&v351, (char **)&object.__r_.__value_.__l.__size_);
    sub_20E94A6AC(&v351, (uint64_t)&v402);
    category[0] = (char *)(((char *)v403[3] - (char *)v403[2]) >> 4);
    sub_20E9EDE6C(v357, category);
    v21 = (char *)v403[3];
    v22 = (char *)v403[2];
    v23 = ((char *)v403[3] - (char *)v403[2]) >> 4;
    if (category[0] <= (char *)v23)
    {
      if (category[0] < (char *)v23)
      {
        v21 = (char *)v403[2] + 16 * (uint64_t)category[0];
        v403[3] = v21;
      }
    }
    else
    {
      sub_20E94A950((char **)&v403[2], (unint64_t)&category[0][-v23]);
      v22 = (char *)v403[2];
      v21 = (char *)v403[3];
    }
    if (v21 != v22)
    {
      v24 = v21;
      do
      {
        sub_20E9EFAC4(v357, (uint64_t)&v359);
        if ((_DWORD)v359 != 2)
        {
          v307 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v307->__vftable = 0;
          v308 = std::bad_cast::bad_cast(v307);
          v308->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v308, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
        }
        *(_QWORD *)v22 = v360;
        v25 = v361;
        v361 = 0;
        if (v25)
        {
          for (j = (char *)v25[4]; j != (char *)v25[6]; j -= 16)
          {
            v28 = (void (*)(uint64_t))*((_QWORD *)j - 2);
            v27 = *((_QWORD *)j - 1);
            v28(v27);
          }
          free(j);
          v29 = (_QWORD *)v25[3];
          if (v29)
          {
            do
            {
              v30 = (_QWORD *)*v29;
              free(v29);
              v29 = v30;
            }
            while (v30);
          }
          free(v25);
        }
        sub_20E9EFAC4(v357, (uint64_t)&v359);
        if ((_DWORD)v359 != 3 && ((_DWORD)v359 != 2 || v360 < 0))
        {
          v305 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v305->__vftable = 0;
          v306 = std::bad_cast::bad_cast(v305);
          v306->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
          __cxa_throw(v306, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
        }
        *((_QWORD *)v22 + 1) = v360;
        v31 = v361;
        v361 = 0;
        if (v31)
        {
          for (k = (char *)v31[4]; k != (char *)v31[6]; k -= 16)
          {
            v34 = (void (*)(uint64_t))*((_QWORD *)k - 2);
            v33 = *((_QWORD *)k - 1);
            v34(v33);
          }
          free(k);
          v35 = (_QWORD *)v31[3];
          if (v35)
          {
            do
            {
              v36 = (_QWORD *)*v35;
              free(v35);
              v35 = v36;
            }
            while (v36);
          }
          free(v31);
        }
        v22 += 16;
      }
      while (v22 != v24);
    }
    sub_20E9EDCA8(v357, (_QWORD *)&v404 + 1);
    v37 = v355;
    v38 = *((_QWORD *)v37 - 2) - ((uint64_t (*)(uint64_t))v353[4])((uint64_t)&v353) + *((_QWORD *)v37 - 1);
    if (v38)
      ((void (*)(uint64_t, unint64_t))v353[5])((uint64_t)&v353, v38);
    v39 = v357;
    v351 = &off_24C9B71C0;
    v353 = (void (**)())&unk_24C9B7308;
    v355 -= 16;
    v357 = 0;
    if (v39)
    {
      sub_20E9EF740((_QWORD *)(v39 + 8));
      MEMORY[0x212BC6398](v39, 0x10F2C40853B94B7);
    }
    v353 = off_24C9B7428;
    if (v354)
    {
      v355 = (char *)v354;
      operator delete(v354);
    }
    sub_20F46018C((uint64_t)&__str.__r_.__value_.__l.__size_, &object);
    sub_20F45FE08((uint64_t)&object, &__str.__r_.__value_.__l.__size_);
    if (v403[2])
    {
      v403[3] = v403[2];
      operator delete(v403[2]);
    }
    sub_20E866B68((uint64_t)&v402, (uint64_t)v403[0]);
    if (object.__r_.__value_.__l.__size_)
    {
      object.__r_.__value_.__r.__words[2] = object.__r_.__value_.__l.__size_;
      operator delete((void *)object.__r_.__value_.__l.__size_);
    }
    v40 = (std::__shared_weak_count *)v348;
    if (v348)
    {
      v41 = (unint64_t *)(v348 + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  if (*(_DWORD *)v4 || *((_DWORD *)v4 + 1) || *((_DWORD *)v4 + 2))
  {
    sub_20F437B08((uint64_t)v340, v6, (uint64_t)&object);
    if (!v407)
    {
      LODWORD(__src.__r_.__value_.__l.__data_) = 0;
      v399 = 0;
      goto LABEL_104;
    }
    if (*(_DWORD *)v4 == LODWORD(v403[1]) && *(void **)(v4 + 4) == *(void **)((char *)&v403[1] + 4))
    {
      sub_20EF674FC((uint64_t)&__src, (uint64_t)&object);
      v399 = 1;
      if (!v407)
        goto LABEL_104;
    }
    else
    {
      LODWORD(__src.__r_.__value_.__l.__data_) = 1;
      v399 = 0;
    }
    sub_20E86872C((uint64_t)&v401, v402);
    v43 = object.__r_.__value_.__r.__words[0];
    if (object.__r_.__value_.__r.__words[0])
    {
      size = object.__r_.__value_.__l.__size_;
      v45 = (void *)object.__r_.__value_.__r.__words[0];
      if (object.__r_.__value_.__l.__size_ != object.__r_.__value_.__r.__words[0])
      {
        v46 = object.__r_.__value_.__l.__size_;
        do
        {
          v48 = *(void **)(v46 - 48);
          v46 -= 48;
          v47 = v48;
          if (v48)
          {
            *(_QWORD *)(size - 40) = v47;
            operator delete(v47);
          }
          size = v46;
        }
        while (v46 != v43);
        v45 = (void *)object.__r_.__value_.__r.__words[0];
      }
      object.__r_.__value_.__l.__size_ = v43;
      operator delete(v45);
      if (v399)
        goto LABEL_105;
      goto LABEL_110;
    }
LABEL_104:
    if (v399)
    {
LABEL_105:
      if (v385)
      {
        sub_20EF675CC((uint64_t *)&v378, (uint64_t)__src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__src.__r_.__value_.__l.__size_ - __src.__r_.__value_.__r.__words[0]) >> 4));
        sub_20EF679A4((uint64_t)v380, v392, &v393);
        v381 = v395;
        v382 = v396;
        v383 = v397;
        v384 = v398;
      }
      else
      {
        sub_20E9950C4((uint64_t)&v378, (uint64_t)&__src);
        v385 = 1;
      }
LABEL_132:
      if (v399)
      {
        sub_20E86872C((uint64_t)&v392, v393);
        v58 = __src.__r_.__value_.__r.__words[0];
        if (__src.__r_.__value_.__r.__words[0])
        {
          v59 = __src.__r_.__value_.__l.__size_;
          v60 = (void *)__src.__r_.__value_.__r.__words[0];
          if (__src.__r_.__value_.__l.__size_ != __src.__r_.__value_.__r.__words[0])
          {
            v61 = __src.__r_.__value_.__l.__size_;
            do
            {
              v63 = *(void **)(v61 - 48);
              v61 -= 48;
              v62 = v63;
              if (v63)
              {
                *(_QWORD *)(v59 - 40) = v62;
                operator delete(v62);
              }
              v59 = v61;
            }
            while (v61 != v58);
            v60 = (void *)__src.__r_.__value_.__r.__words[0];
          }
          __src.__r_.__value_.__l.__size_ = v58;
          operator delete(v60);
        }
      }
      goto LABEL_141;
    }
LABEL_110:
    data = (int)__src.__r_.__value_.__l.__data_;
    v389 = 1;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 232))(v6, v340);
    v49 = sub_210219C18();
    v50 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_130;
    LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ML";
    v52 = (char *)_os_log_send_and_compose_impl();
    v53 = strlen(v52);
    __dst.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&__dst);
    tv_sec = __dst.tv_sec;
    timespec_get(&__dst, 1);
    sub_210219E20(&object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v49 + 1), (__int128 *)(v49 + 5), "MappingIOSampleLoadErr:TYPE:%s", 0x1EuLL, v52, v53, tv_sec, &__dst);
    std::mutex::lock(&stru_254A5A410);
    v55 = qword_254A5A458;
    for (m = unk_254A5A460; v55 != m; v55 += 40)
    {
      v57 = *(_QWORD *)(v55 + 32);
      if (!v57)
        sub_20E86D37C();
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v57 + 48))(v57, &object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v410 < 0)
    {
      operator delete(__p);
      if ((v408 & 0x80000000) == 0)
      {
LABEL_117:
        if (!v405)
        {
LABEL_123:
          if (LOBYTE(v403[2]) && SHIBYTE(v403[1]) < 0)
            operator delete(v402);
          if (SHIBYTE(v401) < 0)
            operator delete((void *)object.__r_.__value_.__l.__size_);
          if (v52)
            free(v52);
LABEL_130:
          if (os_signpost_enabled((os_log_t)*v49))
          {
            LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ML";
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_132;
        }
LABEL_121:
        if (SHIBYTE(v404) < 0)
          operator delete(v403[3]);
        goto LABEL_123;
      }
    }
    else if ((v408 & 0x80000000) == 0)
    {
      goto LABEL_117;
    }
    operator delete(v406);
    if (!v405)
      goto LABEL_123;
    goto LABEL_121;
  }
LABEL_141:
  sub_20F437E68((uint64_t)v338, v6, (uint64_t)&__src);
  if (!(_BYTE)v392)
  {
    v68 = sub_210219C18();
    v69 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_173;
    LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SEM";
    v71 = (char *)_os_log_send_and_compose_impl();
    v72 = strlen(v71);
    __dst.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&__dst);
    v73 = __dst.tv_sec;
    timespec_get(&__dst, 1);
    sub_210219E20(&object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v68 + 1), (__int128 *)(v68 + 5), "MappingIOSampleLoadErr:TYPE:%s", 0x1EuLL, v71, v72, v73, &__dst);
    std::mutex::lock(&stru_254A5A410);
    v74 = qword_254A5A458;
    for (n = unk_254A5A460; v74 != n; v74 += 40)
    {
      v76 = *(_QWORD *)(v74 + 32);
      if (!v76)
        sub_20E86D37C();
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v76 + 48))(v76, &object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v410 < 0)
    {
      operator delete(__p);
      if ((v408 & 0x80000000) == 0)
      {
LABEL_156:
        if (!v405)
        {
LABEL_166:
          if (LOBYTE(v403[2]) && SHIBYTE(v403[1]) < 0)
            operator delete(v402);
          if (SHIBYTE(v401) < 0)
            operator delete((void *)object.__r_.__value_.__l.__size_);
          if (v71)
            free(v71);
LABEL_173:
          if (os_signpost_enabled((os_log_t)*v68))
          {
            LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SEM";
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_175;
        }
LABEL_164:
        if (SHIBYTE(v404) < 0)
          operator delete(v403[3]);
        goto LABEL_166;
      }
    }
    else if ((v408 & 0x80000000) == 0)
    {
      goto LABEL_156;
    }
    operator delete(v406);
    if (!v405)
      goto LABEL_166;
    goto LABEL_164;
  }
  if (v387)
  {
    v64 = v386.__r_.__value_.__r.__words[0];
    if (v386.__r_.__value_.__r.__words[0])
    {
      v65 = v386.__r_.__value_.__l.__size_;
      v66 = (void *)v386.__r_.__value_.__r.__words[0];
      if (v386.__r_.__value_.__l.__size_ != v386.__r_.__value_.__r.__words[0])
      {
        do
        {
          v67 = *(void **)(v65 - 24);
          if (v67)
          {
            *(_QWORD *)(v65 - 16) = v67;
            operator delete(v67);
          }
          v65 -= 48;
        }
        while (v65 != v64);
        v66 = (void *)v386.__r_.__value_.__r.__words[0];
      }
      v386.__r_.__value_.__l.__size_ = v64;
      operator delete(v66);
    }
    v386 = __src;
    memset(&__src, 0, sizeof(__src));
  }
  else
  {
    v386 = __src;
    memset(&__src, 0, sizeof(__src));
    v387 = 1;
  }
LABEL_175:
  if ((_BYTE)v392)
  {
    v77 = (void *)__src.__r_.__value_.__r.__words[0];
    if (__src.__r_.__value_.__r.__words[0])
    {
      for (ii = __src.__r_.__value_.__l.__size_; (void *)ii != v77; ii -= 48)
      {
        v79 = *(void **)(ii - 24);
        if (v79)
        {
          *(_QWORD *)(ii - 16) = v79;
          operator delete(v79);
        }
      }
      operator delete(v77);
    }
  }
LABEL_183:
  if (v339 < 0)
  {
    operator delete(v338[0]);
    if ((v341 & 0x80000000) == 0)
    {
LABEL_185:
      if ((SHIBYTE(v343) & 0x80000000) == 0)
        goto LABEL_186;
LABEL_192:
      operator delete(v342[0]);
      if ((SHIBYTE(v345) & 0x80000000) == 0)
        goto LABEL_187;
LABEL_193:
      operator delete(v344[0]);
      goto LABEL_187;
    }
  }
  else if ((v341 & 0x80000000) == 0)
  {
    goto LABEL_185;
  }
  operator delete(v340[0]);
  if (SHIBYTE(v343) < 0)
    goto LABEL_192;
LABEL_186:
  if (SHIBYTE(v345) < 0)
    goto LABEL_193;
LABEL_187:
  v336 = 0;
  v80 = __str.__r_.__value_.__s.__data_[0];
  LOBYTE(v335) = __str.__r_.__value_.__s.__data_[0];
  LODWORD(v337) = data;
  BYTE4(v337) = v389;
  if (v377)
  {
    sub_20F44A49C((uint64_t)&__str.__r_.__value_.__l.__size_, v331 != 0, (uint64_t)&v378, (uint64_t)&v386, (uint64_t *)&object);
    v336 = object.__r_.__value_.__r.__words[0];
    if (!object.__r_.__value_.__r.__words[0])
    {
      v80 = 4;
      LOBYTE(v335) = 4;
    }
  }
  if (v387)
  {
    v81 = v386.__r_.__value_.__r.__words[0];
    if (v386.__r_.__value_.__r.__words[0])
    {
      v82 = v386.__r_.__value_.__l.__size_;
      v83 = (void *)v386.__r_.__value_.__r.__words[0];
      if (v386.__r_.__value_.__l.__size_ != v386.__r_.__value_.__r.__words[0])
      {
        do
        {
          v84 = *(void **)(v82 - 24);
          if (v84)
          {
            *(_QWORD *)(v82 - 16) = v84;
            operator delete(v84);
          }
          v82 -= 48;
        }
        while (v82 != v81);
        v83 = (void *)v386.__r_.__value_.__r.__words[0];
      }
      v386.__r_.__value_.__l.__size_ = v81;
      operator delete(v83);
    }
  }
  if (v385)
  {
    sub_20E86872C((uint64_t)v380, v380[1]);
    v85 = (char *)v378;
    if (v378)
    {
      v86 = v379;
      v87 = v378;
      if (v379 != v378)
      {
        v88 = v379;
        do
        {
          v90 = (void *)*((_QWORD *)v88 - 6);
          v88 -= 48;
          v89 = v90;
          if (v90)
          {
            *((_QWORD *)v86 - 5) = v89;
            operator delete(v89);
          }
          v86 = v88;
        }
        while (v88 != v85);
        v87 = v378;
      }
      v379 = v85;
      operator delete(v87);
    }
  }
  if (v377)
    sub_20E94FADC((uint64_t)&__str.__r_.__value_.__l.__size_);
  if (v80 == 4)
  {
    v91 = atomic_load((unsigned __int8 *)&qword_254A60918);
    if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_254A60918))
    {
      sub_21021D3D8(&object);
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 19;
      strcpy((char *)&__str, "cv3d.vio.mapping_io");
      sub_20E8C4068((uint64_t **)&object, (uint64_t)&__str, &qword_254A60910);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __cxa_guard_release(&qword_254A60918);
    }
    __dst.tv_sec = qword_254A60910;
    if (**(int **)(qword_254A60910 + 56) > 3
      || (v92 = *(unsigned __int8 *)(qword_254A60910 + 72),
          v93 = sub_20E8C31DC(qword_254A60910, "OSLogSurrogateAppender", 1, 0),
          v94 = v93,
          !v92)
      && !v93)
    {
LABEL_355:
      v190 = sub_210219C18();
      v191 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v191 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_375;
      LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)"CORRUPT";
      v193 = (char *)_os_log_send_and_compose_impl();
      v194 = strlen(v193);
      object.__r_.__value_.__r.__words[0] = 0;
      pthread_threadid_np(0, (__uint64_t *)&object);
      v195 = object.__r_.__value_.__r.__words[0];
      timespec_get((timespec *)&object, 1);
      sub_210219E20(&__str, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v190 + 1), (__int128 *)(v190 + 5), "MappingIOSampleLoadErr:TYPE:%s", 0x1EuLL, v193, v194, v195, &object);
      std::mutex::lock(&stru_254A5A410);
      v196 = qword_254A5A458;
      for (jj = unk_254A5A460; v196 != jj; v196 += 40)
      {
        v198 = *(_QWORD *)(v196 + 32);
        if (!v198)
          sub_20E86D37C();
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v198 + 48))(v198, &__str);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v375 < 0)
      {
        operator delete(v374);
        if ((v373 & 0x80000000) == 0)
        {
LABEL_362:
          if (!v371)
          {
LABEL_368:
            if ((_BYTE)v368 && SHIBYTE(v367) < 0)
              operator delete(v365);
            if (v364 < 0)
              operator delete((void *)__str.__r_.__value_.__l.__size_);
            if (v193)
              free(v193);
LABEL_375:
            if (os_signpost_enabled((os_log_t)*v190))
            {
              LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)"CORRUPT";
              _os_signpost_emit_unreliably_with_name_impl();
            }
            (*(void (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)a2[2] + 240))(a2[2], a3);
            goto LABEL_378;
          }
LABEL_366:
          if (v370 < 0)
            operator delete(v369);
          goto LABEL_368;
        }
      }
      else if ((v373 & 0x80000000) == 0)
      {
        goto LABEL_362;
      }
      operator delete(v372);
      if (!v371)
        goto LABEL_368;
      goto LABEL_366;
    }
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    __src.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    __src.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v392) = 3;
    v393 = "unknown file";
    v394 = 310;
    *(_QWORD *)&v396 = 0;
    *(_QWORD *)&v395 = "unknown function";
    *((_QWORD *)&v395 + 1) = 0;
    if (*(char *)(a3 + 23) >= 0)
      v95 = (const char *)a3;
    else
      v95 = *(const char **)a3;
    v96 = *(_QWORD *)__src.__r_.__value_.__l.__data_;
    v97 = (const char *)(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 16);
    v332 = v92;
    v327 = v97;
    if (*(char *)(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v97 = *(const char **)(v96 + 16);
      v98 = *(_QWORD *)(v96 + 24);
      v100 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v100 & 1) != 0)
        goto LABEL_226;
    }
    else
    {
      v98 = *(unsigned __int8 *)(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 39);
      v99 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v99 & 1) != 0)
        goto LABEL_226;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&__str);
      if ((_BYTE)v363)
      {
        *(std::string *)byte_254A4A4F8 = __str;
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_226:
    if (byte_254A4A4F8[23] >= 0)
      v101 = byte_254A4A4F8;
    else
      v101 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v102 = byte_254A4A4F8[23];
    else
      v102 = *(_QWORD *)&byte_254A4A4F8[8];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v101, v97);
    p_size = &object.__r_.__value_.__l.__size_;
    if (v102 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v102 >= 0x17)
    {
      v104 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v102 | 7) != 0x17)
        v104 = v102 | 7;
      v105 = v104 + 1;
      p_size = (std::string::size_type *)operator new(v104 + 1);
      v401 = v105 | 0x8000000000000000;
      object.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
      object.__r_.__value_.__r.__words[2] = v102;
    }
    else
    {
      HIBYTE(v401) = v102;
      if (!v102)
      {
LABEL_240:
        *((_BYTE *)p_size + v102) = 0;
        LOBYTE(v402) = 1;
        v106 = v403;
        if (v98 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v98 >= 0x17)
        {
          v107 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v98 | 7) != 0x17)
            v107 = v98 | 7;
          v108 = v107 + 1;
          v106 = operator new(v107 + 1);
          v403[2] = (void *)(v108 | 0x8000000000000000);
          v403[0] = v106;
          v403[1] = (void *)v98;
        }
        else
        {
          HIBYTE(v403[2]) = v98;
          if (!v98)
          {
LABEL_248:
            *((_BYTE *)v106 + v98) = 0;
            LOBYTE(v403[3]) = 1;
            v109 = object.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v403[2]) < 0)
              operator delete(v403[0]);
            if ((_BYTE)v402 && SHIBYTE(v401) < 0)
              operator delete((void *)object.__r_.__value_.__l.__size_);
            if (object.__r_.__value_.__r.__words[0])
              os_release(object.__r_.__value_.__l.__data_);
            if (!v94 || !*(_QWORD *)(v94 + 24))
            {
              os_log_type_enabled(v109, OS_LOG_TYPE_INFO);
              LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v95;
              v118 = (void *)_os_log_send_and_compose_impl();
              v119 = v332;
              if (v118)
                free(v118);
LABEL_292:
              if (v119)
              {
                if (*(char *)(a3 + 23) >= 0)
                  v144 = (const char *)a3;
                else
                  v144 = *(const char **)a3;
                sub_20E8C003C((uint64_t)&__src, "[%s] was removed due to failing deserialization.", v144);
                v145 = (uint64_t *)__src.__r_.__value_.__r.__words[0];
                if (!__src.__r_.__value_.__r.__words[0] || (v146 = *((_QWORD *)&v395 + 1)) == 0)
                {
LABEL_350:
                  v187 = (std::__shared_weak_count *)v396;
                  if ((_QWORD)v396)
                  {
                    v188 = (unint64_t *)(v396 + 8);
                    do
                      v189 = __ldaxr(v188);
                    while (__stlxr(v189 - 1, v188));
                    if (!v189)
                    {
                      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                      std::__shared_weak_count::__release_weak(v187);
                    }
                  }
                  goto LABEL_355;
                }
                v147 = (_QWORD *)(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 16);
                if (*(char *)(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 39) < 0)
                  v147 = (_QWORD *)*v147;
                v148 = *(_OWORD *)&__src.__r_.__value_.__r.__words[1];
                v149 = (int)v392;
                v150 = v393;
                v151 = v394;
                v152 = v395;
                v153 = (std::__shared_weak_count *)v396;
                if ((_QWORD)v396)
                {
                  v154 = (unint64_t *)(v396 + 8);
                  do
                    v155 = __ldxr(v154);
                  while (__stxr(v155 + 1, v154));
                }
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v147;
                *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v148;
                v363 = v149;
                v365 = v150;
                v366 = v151;
                v367 = v152;
                v368 = v146;
                v369 = v153;
                if (v153)
                {
                  p_shared_owners = (unint64_t *)&v153->__shared_owners_;
                  do
                    v157 = __ldxr(p_shared_owners);
                  while (__stxr(v157 + 1, p_shared_owners));
                }
                v158 = v153;
                if (v149 >= **(_DWORD **)(*v145 + 56))
                {
                  sub_20E8C3FC4(*v145, (uint64_t)&__str);
                  v158 = (std::__shared_weak_count *)v369;
                }
                if (v158)
                {
                  v159 = (unint64_t *)&v158->__shared_owners_;
                  do
                    v160 = __ldaxr(v159);
                  while (__stlxr(v160 - 1, v159));
                  if (!v160)
                  {
                    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                    std::__shared_weak_count::__release_weak(v158);
                  }
                }
                if (v153)
                {
                  v161 = (unint64_t *)&v153->__shared_owners_;
                  do
                    v162 = __ldaxr(v161);
                  while (__stlxr(v162 - 1, v161));
                  if (!v162)
                  {
                    ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                    std::__shared_weak_count::__release_weak(v153);
                  }
                }
                v163 = (std::__shared_weak_count *)v396;
                *(_QWORD *)&v396 = 0;
                *((_QWORD *)&v395 + 1) = 0;
                if (v163)
                {
                  v164 = (unint64_t *)&v163->__shared_owners_;
                  do
                    v165 = __ldaxr(v164);
                  while (__stlxr(v165 - 1, v164));
                  if (!v165)
                  {
                    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                    std::__shared_weak_count::__release_weak(v163);
                  }
                }
              }
              v166 = (uint64_t *)__src.__r_.__value_.__r.__words[0];
              if (__src.__r_.__value_.__r.__words[0])
              {
                v167 = *((_QWORD *)&v395 + 1);
                if (*((_QWORD *)&v395 + 1))
                {
                  v168 = (_QWORD *)(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 16);
                  if (*(char *)(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 39) < 0)
                    v168 = (_QWORD *)*v168;
                  v169 = *(_OWORD *)&__src.__r_.__value_.__r.__words[1];
                  v170 = (int)v392;
                  v171 = v393;
                  v172 = v394;
                  v173 = v395;
                  v174 = (std::__shared_weak_count *)v396;
                  if ((_QWORD)v396)
                  {
                    v175 = (unint64_t *)(v396 + 8);
                    do
                      v176 = __ldxr(v175);
                    while (__stxr(v176 + 1, v175));
                  }
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v168;
                  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v169;
                  v363 = v170;
                  v365 = v171;
                  v366 = v172;
                  v367 = v173;
                  v368 = v167;
                  v369 = v174;
                  if (v174)
                  {
                    v177 = (unint64_t *)&v174->__shared_owners_;
                    do
                      v178 = __ldxr(v177);
                    while (__stxr(v178 + 1, v177));
                  }
                  v179 = v174;
                  if (v170 >= **(_DWORD **)(*v166 + 56))
                  {
                    sub_20E8C3FC4(*v166, (uint64_t)&__str);
                    v179 = (std::__shared_weak_count *)v369;
                  }
                  if (v179)
                  {
                    v180 = (unint64_t *)&v179->__shared_owners_;
                    do
                      v181 = __ldaxr(v180);
                    while (__stlxr(v181 - 1, v180));
                    if (!v181)
                    {
                      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                      std::__shared_weak_count::__release_weak(v179);
                    }
                  }
                  if (v174)
                  {
                    v182 = (unint64_t *)&v174->__shared_owners_;
                    do
                      v183 = __ldaxr(v182);
                    while (__stlxr(v183 - 1, v182));
                    if (!v183)
                    {
                      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                      std::__shared_weak_count::__release_weak(v174);
                    }
                  }
                  v184 = (std::__shared_weak_count *)v396;
                  *(_QWORD *)&v396 = 0;
                  *((_QWORD *)&v395 + 1) = 0;
                  if (v184)
                  {
                    v185 = (unint64_t *)&v184->__shared_owners_;
                    do
                      v186 = __ldaxr(v185);
                    while (__stlxr(v186 - 1, v185));
                    if (!v186)
                    {
                      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                      std::__shared_weak_count::__release_weak(v184);
                    }
                  }
                }
              }
              goto LABEL_350;
            }
            v110 = _os_log_pack_size();
            v111 = (std::__shared_weak_count_vtbl *)operator new(v110, (std::align_val_t)8uLL);
            v324 = v96;
            v112 = (std::__shared_weak_count *)operator new();
            v112->__shared_owners_ = 0;
            v113 = (unint64_t *)&v112->__shared_owners_;
            v112->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v112->__shared_weak_owners_ = 0;
            v112[1].__vftable = v111;
            v114 = v111;
            v115 = strlen(v95);
            v326 = v112;
            if (v115 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v116 = v115;
            if (v115 >= 0x17)
            {
              v120 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v115 | 7) != 0x17)
                v120 = v115 | 7;
              v121 = v120 + 1;
              p_object = (std::string *)operator new(v120 + 1);
              object.__r_.__value_.__r.__words[2] = v121 | 0x8000000000000000;
              object.__r_.__value_.__r.__words[0] = (std::string::size_type)p_object;
              object.__r_.__value_.__l.__size_ = v116;
            }
            else
            {
              *((_BYTE *)&object.__r_.__value_.__s + 23) = v115;
              p_object = &object;
              if (!v115)
              {
LABEL_267:
                p_object->__r_.__value_.__s.__data_[v116] = 0;
                __str.__r_.__value_.__r.__words[0] = object.__r_.__value_.__l.__size_;
                v122 = object.__r_.__value_.__r.__words[0];
                *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&object.__r_.__value_.__r.__words[1] + 7);
                v123 = HIBYTE(object.__r_.__value_.__r.__words[2]);
                v124 = operator new(0x38uLL);
                v125 = (std::__shared_weak_count *)v124;
                v124[1] = 0;
                v126 = v124 + 1;
                v124[3] = off_24C9ABC20;
                v127 = (char *)(v124 + 3);
                v124[2] = 0;
                v124[4] = v122;
                shared_owners = (char *)(v124 + 4);
                *v124 = &off_24C9ABBD0;
                v124[5] = __str.__r_.__value_.__r.__words[0];
                *(_QWORD *)((char *)v124 + 47) = *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7);
                *((_BYTE *)v124 + 55) = v123;
                do
                  v129 = __ldxr(v113);
                while (__stxr(v129 + 1, v113));
                do
                  v130 = __ldxr(v126);
                while (__stxr(v130 + 1, v126));
                do
                  v131 = __ldaxr(v126);
                while (__stlxr(v131 - 1, v126));
                if (!v131)
                {
                  (*(void (**)(_QWORD *))(*v124 + 16))(v124);
                  std::__shared_weak_count::__release_weak(v125);
                }
                do
                  v132 = __ldaxr(v113);
                while (__stlxr(v132 - 1, v113));
                if (!v132)
                {
                  ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                  std::__shared_weak_count::__release_weak(v326);
                }
                if (SHIBYTE(v125[2].__vftable) < 0)
                  shared_owners = (char *)v125[1].__shared_owners_;
                v133 = _os_log_pack_fill();
                *(_DWORD *)v133 = 136315138;
                *(_QWORD *)(v133 + 4) = shared_owners;
                v134 = operator new();
                v135 = *(unsigned __int8 *)(v324 + 39);
                v136 = v327;
                if ((v135 & 0x80u) != 0)
                {
                  v136 = *(const char **)(v324 + 16);
                  v135 = *(_QWORD *)(v324 + 24);
                }
                *(_QWORD *)v134 = v114;
                *(_QWORD *)(v134 + 8) = v114;
                *(_QWORD *)(v134 + 16) = v326;
                *(_QWORD *)(v134 + 24) = v127;
                *(_QWORD *)(v134 + 32) = v125;
                *(_QWORD *)(v134 + 40) = v136;
                *(_QWORD *)(v134 + 48) = v135;
                *(_BYTE *)(v134 + 56) = 1;
                object.__r_.__value_.__r.__words[0] = v134;
                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v94 + 24) + 40))(*(_QWORD *)(v94 + 24), &object);
                v137 = object.__r_.__value_.__r.__words[0];
                object.__r_.__value_.__r.__words[0] = 0;
                v119 = v332;
                if (v137)
                {
                  v138 = *(std::__shared_weak_count **)(v137 + 32);
                  if (v138)
                  {
                    v139 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v140 = __ldaxr(v139);
                    while (__stlxr(v140 - 1, v139));
                    if (!v140)
                    {
                      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                      std::__shared_weak_count::__release_weak(v138);
                    }
                  }
                  v141 = *(std::__shared_weak_count **)(v137 + 16);
                  if (v141)
                  {
                    v142 = (unint64_t *)&v141->__shared_owners_;
                    do
                      v143 = __ldaxr(v142);
                    while (__stlxr(v143 - 1, v142));
                    if (!v143)
                    {
                      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                      std::__shared_weak_count::__release_weak(v141);
                    }
                  }
                  MEMORY[0x212BC6398](v137, 0x10F0C40B62ED6C6);
                }
                goto LABEL_292;
              }
            }
            memcpy(p_object, v95, v116);
            goto LABEL_267;
          }
        }
        memmove(v106, v97, v98);
        goto LABEL_248;
      }
    }
    memmove(p_size, v101, v102);
    goto LABEL_240;
  }
LABEL_378:
  v199 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)a3);
  if (v199.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v199.__size_ >= 0x17)
  {
    v201 = (v199.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199.__size_ | 7) != 0x17)
      v201 = v199.__size_ | 7;
    v202 = v201 + 1;
    p_dst = (timespec *)operator new(v201 + 1);
    __dst.tv_nsec = v199.__size_;
    v348 = v202 | 0x8000000000000000;
    __dst.tv_sec = (__darwin_time_t)p_dst;
    goto LABEL_385;
  }
  HIBYTE(v348) = v199.__size_;
  p_dst = &__dst;
  if (v199.__size_)
LABEL_385:
    memmove(p_dst, v199.__data_, v199.__size_);
  *((_BYTE *)&p_dst->tv_sec + v199.__size_) = 0;
  v203 = (void *)__dst.tv_sec;
  LODWORD(object.__r_.__value_.__l.__data_) = v348;
  *(_DWORD *)((char *)object.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v348 + 3);
  v204 = SHIBYTE(v348);
  if (SHIBYTE(v348) < 0)
  {
    sub_20E860C04(&__str, (void *)__dst.tv_sec, __dst.tv_nsec);
  }
  else
  {
    *(timespec *)&__str.__r_.__value_.__l.__data_ = __dst;
    LODWORD(__str.__r_.__value_.__r.__words[2]) = object.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)object.__r_.__value_.__r.__words
                                                                             + 3);
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = HIBYTE(v348);
  }
  *((_QWORD *)&v335 + 1) = std::stoull(&__str, 0, 10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v204 < 0)
LABEL_393:
      operator delete(v203);
  }
  else if (v204 < 0)
  {
    goto LABEL_393;
  }
  if (v335 != 1)
  {
    v205 = atomic_load((unsigned __int8 *)&qword_254A60918);
    if ((v205 & 1) == 0 && __cxa_guard_acquire(&qword_254A60918))
    {
      sub_21021D3D8(&object);
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 19;
      strcpy((char *)&__str, "cv3d.vio.mapping_io");
      sub_20E8C4068((uint64_t **)&object, (uint64_t)&__str, &qword_254A60910);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __cxa_guard_release(&qword_254A60918);
    }
    v344[0] = (void *)qword_254A60910;
    if (**(int **)(qword_254A60910 + 56) <= 3)
    {
      v206 = *(unsigned __int8 *)(qword_254A60910 + 72);
      v207 = sub_20E8C31DC(qword_254A60910, "OSLogSurrogateAppender", 1, 0);
      v208 = v207;
      if (v206 || v207)
      {
        v333 = v206;
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v344;
        __src.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        __src.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v392) = 3;
        v393 = "unknown file";
        v394 = 323;
        *(_QWORD *)&v396 = 0;
        *(_QWORD *)&v395 = "unknown function";
        *((_QWORD *)&v395 + 1) = 0;
        if (*(char *)(a3 + 23) >= 0)
          v209 = a3;
        else
          v209 = *(_QWORD *)a3;
        v210 = *(_QWORD *)__src.__r_.__value_.__l.__data_;
        v211 = (const char *)(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 16);
        v330 = v211;
        if (*(char *)(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v211 = *(const char **)(v210 + 16);
          v212 = *(_QWORD *)(v210 + 24);
          v214 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v214 & 1) != 0)
            goto LABEL_406;
        }
        else
        {
          v212 = *(unsigned __int8 *)(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 39);
          v213 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v213 & 1) != 0)
            goto LABEL_406;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&__str);
          if ((_BYTE)v363)
          {
            *(std::string *)byte_254A4A4F8 = __str;
          }
          else
          {
            byte_254A4A4F8[23] = 14;
            strcpy(byte_254A4A4F8, "com.apple.cv3d");
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_406:
        if (byte_254A4A4F8[23] >= 0)
          v215 = byte_254A4A4F8;
        else
          v215 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v216 = byte_254A4A4F8[23];
        else
          v216 = *(_QWORD *)&byte_254A4A4F8[8];
        object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v215, v211);
        v217 = &object.__r_.__value_.__l.__size_;
        if (v216 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v216 >= 0x17)
        {
          v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v216 | 7) != 0x17)
            v218 = v216 | 7;
          v219 = v218 + 1;
          v217 = (std::string::size_type *)operator new(v218 + 1);
          v401 = v219 | 0x8000000000000000;
          object.__r_.__value_.__l.__size_ = (std::string::size_type)v217;
          object.__r_.__value_.__r.__words[2] = v216;
        }
        else
        {
          HIBYTE(v401) = v216;
          if (!v216)
          {
LABEL_420:
            *((_BYTE *)v217 + v216) = 0;
            LOBYTE(v402) = 1;
            v220 = v403;
            if (v212 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v212 >= 0x17)
            {
              v221 = (v212 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v212 | 7) != 0x17)
                v221 = v212 | 7;
              v222 = v221 + 1;
              v220 = operator new(v221 + 1);
              v403[2] = (void *)(v222 | 0x8000000000000000);
              v403[0] = v220;
              v403[1] = (void *)v212;
            }
            else
            {
              HIBYTE(v403[2]) = v212;
              if (!v212)
              {
LABEL_428:
                *((_BYTE *)v220 + v212) = 0;
                LOBYTE(v403[3]) = 1;
                v223 = object.__r_.__value_.__r.__words[0];
                if (SHIBYTE(v403[2]) < 0)
                  operator delete(v403[0]);
                v224 = (const char *)v209;
                if ((_BYTE)v402 && SHIBYTE(v401) < 0)
                  operator delete((void *)object.__r_.__value_.__l.__size_);
                if (object.__r_.__value_.__r.__words[0])
                  os_release(object.__r_.__value_.__l.__data_);
                if (!v208 || !*(_QWORD *)(v208 + 24))
                {
                  os_log_type_enabled(v223, OS_LOG_TYPE_INFO);
                  LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = v209;
                  v232 = (void *)_os_log_send_and_compose_impl();
                  v233 = v333;
                  if (v232)
                    free(v232);
LABEL_472:
                  if (v233)
                  {
                    if (*(char *)(a3 + 23) >= 0)
                      v258 = (const char *)a3;
                    else
                      v258 = *(const char **)a3;
                    sub_20E8C003C((uint64_t)&__src, "[%s] load status was not successful.", v258);
                    v259 = (uint64_t *)__src.__r_.__value_.__r.__words[0];
                    if (!__src.__r_.__value_.__r.__words[0] || (v260 = *((_QWORD *)&v395 + 1)) == 0)
                    {
LABEL_530:
                      v301 = (std::__shared_weak_count *)v396;
                      if ((_QWORD)v396)
                      {
                        v302 = (unint64_t *)(v396 + 8);
                        do
                          v303 = __ldaxr(v302);
                        while (__stlxr(v303 - 1, v302));
                        if (!v303)
                        {
                          ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                          std::__shared_weak_count::__release_weak(v301);
                        }
                      }
                      goto LABEL_535;
                    }
                    v261 = (_QWORD *)(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 16);
                    if (*(char *)(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 39) < 0)
                      v261 = (_QWORD *)*v261;
                    v262 = *(_OWORD *)&__src.__r_.__value_.__r.__words[1];
                    v263 = (int)v392;
                    v264 = v393;
                    v265 = v394;
                    v266 = v395;
                    v267 = (std::__shared_weak_count *)v396;
                    if ((_QWORD)v396)
                    {
                      v268 = (unint64_t *)(v396 + 8);
                      do
                        v269 = __ldxr(v268);
                      while (__stxr(v269 + 1, v268));
                    }
                    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v261;
                    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v262;
                    v363 = v263;
                    v365 = v264;
                    v366 = v265;
                    v367 = v266;
                    v368 = v260;
                    v369 = v267;
                    if (v267)
                    {
                      v270 = (unint64_t *)&v267->__shared_owners_;
                      do
                        v271 = __ldxr(v270);
                      while (__stxr(v271 + 1, v270));
                    }
                    v272 = v267;
                    if (v263 >= **(_DWORD **)(*v259 + 56))
                    {
                      sub_20E8C3FC4(*v259, (uint64_t)&__str);
                      v272 = (std::__shared_weak_count *)v369;
                    }
                    if (v272)
                    {
                      v273 = (unint64_t *)&v272->__shared_owners_;
                      do
                        v274 = __ldaxr(v273);
                      while (__stlxr(v274 - 1, v273));
                      if (!v274)
                      {
                        ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                        std::__shared_weak_count::__release_weak(v272);
                      }
                    }
                    if (v267)
                    {
                      v275 = (unint64_t *)&v267->__shared_owners_;
                      do
                        v276 = __ldaxr(v275);
                      while (__stlxr(v276 - 1, v275));
                      if (!v276)
                      {
                        ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                        std::__shared_weak_count::__release_weak(v267);
                      }
                    }
                    v277 = (std::__shared_weak_count *)v396;
                    *(_QWORD *)&v396 = 0;
                    *((_QWORD *)&v395 + 1) = 0;
                    if (v277)
                    {
                      v278 = (unint64_t *)&v277->__shared_owners_;
                      do
                        v279 = __ldaxr(v278);
                      while (__stlxr(v279 - 1, v278));
                      if (!v279)
                      {
                        ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                        std::__shared_weak_count::__release_weak(v277);
                      }
                    }
                  }
                  v280 = (uint64_t *)__src.__r_.__value_.__r.__words[0];
                  if (__src.__r_.__value_.__r.__words[0])
                  {
                    v281 = *((_QWORD *)&v395 + 1);
                    if (*((_QWORD *)&v395 + 1))
                    {
                      v282 = (_QWORD *)(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 16);
                      if (*(char *)(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 39) < 0)
                        v282 = (_QWORD *)*v282;
                      v283 = *(_OWORD *)&__src.__r_.__value_.__r.__words[1];
                      v284 = (int)v392;
                      v285 = v393;
                      v286 = v394;
                      v287 = v395;
                      v288 = (std::__shared_weak_count *)v396;
                      if ((_QWORD)v396)
                      {
                        v289 = (unint64_t *)(v396 + 8);
                        do
                          v290 = __ldxr(v289);
                        while (__stxr(v290 + 1, v289));
                      }
                      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v282;
                      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v283;
                      v363 = v284;
                      v365 = v285;
                      v366 = v286;
                      v367 = v287;
                      v368 = v281;
                      v369 = v288;
                      if (v288)
                      {
                        v291 = (unint64_t *)&v288->__shared_owners_;
                        do
                          v292 = __ldxr(v291);
                        while (__stxr(v292 + 1, v291));
                      }
                      v293 = v288;
                      if (v284 >= **(_DWORD **)(*v280 + 56))
                      {
                        sub_20E8C3FC4(*v280, (uint64_t)&__str);
                        v293 = (std::__shared_weak_count *)v369;
                      }
                      if (v293)
                      {
                        v294 = (unint64_t *)&v293->__shared_owners_;
                        do
                          v295 = __ldaxr(v294);
                        while (__stlxr(v295 - 1, v294));
                        if (!v295)
                        {
                          ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                          std::__shared_weak_count::__release_weak(v293);
                        }
                      }
                      if (v288)
                      {
                        v296 = (unint64_t *)&v288->__shared_owners_;
                        do
                          v297 = __ldaxr(v296);
                        while (__stlxr(v297 - 1, v296));
                        if (!v297)
                        {
                          ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                          std::__shared_weak_count::__release_weak(v288);
                        }
                      }
                      v298 = (std::__shared_weak_count *)v396;
                      *(_QWORD *)&v396 = 0;
                      *((_QWORD *)&v395 + 1) = 0;
                      if (v298)
                      {
                        v299 = (unint64_t *)&v298->__shared_owners_;
                        do
                          v300 = __ldaxr(v299);
                        while (__stlxr(v300 - 1, v299));
                        if (!v300)
                        {
                          ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                          std::__shared_weak_count::__release_weak(v298);
                        }
                      }
                    }
                  }
                  goto LABEL_530;
                }
                v225 = _os_log_pack_size();
                v226 = (std::__shared_weak_count_vtbl *)operator new(v225, (std::align_val_t)8uLL);
                v227 = (std::__shared_weak_count *)operator new();
                v227->__shared_owners_ = 0;
                v228 = (unint64_t *)&v227->__shared_owners_;
                v227->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v227->__shared_weak_owners_ = 0;
                v227[1].__vftable = v226;
                v325 = v226;
                v229 = strlen(v224);
                v328 = v227;
                if (v229 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v230 = v229;
                if (v229 >= 0x17)
                {
                  v234 = (v229 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v229 | 7) != 0x17)
                    v234 = v229 | 7;
                  v235 = v234 + 1;
                  v231 = (std::string *)operator new(v234 + 1);
                  object.__r_.__value_.__r.__words[2] = v235 | 0x8000000000000000;
                  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v231;
                  object.__r_.__value_.__l.__size_ = v230;
                }
                else
                {
                  *((_BYTE *)&object.__r_.__value_.__s + 23) = v229;
                  v231 = &object;
                  if (!v229)
                  {
LABEL_447:
                    v231->__r_.__value_.__s.__data_[v230] = 0;
                    __str.__r_.__value_.__r.__words[0] = object.__r_.__value_.__l.__size_;
                    v236 = object.__r_.__value_.__r.__words[0];
                    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&object.__r_.__value_.__r.__words[1] + 7);
                    v237 = HIBYTE(object.__r_.__value_.__r.__words[2]);
                    v238 = operator new(0x38uLL);
                    v239 = (std::__shared_weak_count *)v238;
                    v238[1] = 0;
                    v240 = v238 + 1;
                    v238[3] = off_24C9ABC20;
                    v241 = (char *)(v238 + 3);
                    v238[2] = 0;
                    v238[4] = v236;
                    v242 = (char *)(v238 + 4);
                    *v238 = &off_24C9ABBD0;
                    v238[5] = __str.__r_.__value_.__r.__words[0];
                    *(_QWORD *)((char *)v238 + 47) = *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words
                                                                               + 7);
                    *((_BYTE *)v238 + 55) = v237;
                    do
                      v243 = __ldxr(v228);
                    while (__stxr(v243 + 1, v228));
                    do
                      v244 = __ldxr(v240);
                    while (__stxr(v244 + 1, v240));
                    do
                      v245 = __ldaxr(v240);
                    while (__stlxr(v245 - 1, v240));
                    if (!v245)
                    {
                      (*(void (**)(_QWORD *))(*v238 + 16))(v238);
                      std::__shared_weak_count::__release_weak(v239);
                    }
                    do
                      v246 = __ldaxr(v228);
                    while (__stlxr(v246 - 1, v228));
                    if (!v246)
                    {
                      ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                      std::__shared_weak_count::__release_weak(v328);
                    }
                    if (SHIBYTE(v239[2].__vftable) < 0)
                      v242 = (char *)v239[1].__shared_owners_;
                    v247 = _os_log_pack_fill();
                    *(_DWORD *)v247 = 136315138;
                    *(_QWORD *)(v247 + 4) = v242;
                    v248 = operator new();
                    v249 = *(unsigned __int8 *)(v210 + 39);
                    v250 = v330;
                    if ((v249 & 0x80u) != 0)
                    {
                      v250 = *(const char **)(v210 + 16);
                      v249 = *(_QWORD *)(v210 + 24);
                    }
                    *(_QWORD *)v248 = v325;
                    *(_QWORD *)(v248 + 8) = v325;
                    *(_QWORD *)(v248 + 16) = v328;
                    *(_QWORD *)(v248 + 24) = v241;
                    *(_QWORD *)(v248 + 32) = v239;
                    *(_QWORD *)(v248 + 40) = v250;
                    *(_QWORD *)(v248 + 48) = v249;
                    *(_BYTE *)(v248 + 56) = 1;
                    object.__r_.__value_.__r.__words[0] = v248;
                    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v208 + 24) + 40))(*(_QWORD *)(v208 + 24), &object);
                    v251 = object.__r_.__value_.__r.__words[0];
                    object.__r_.__value_.__r.__words[0] = 0;
                    v233 = v333;
                    if (v251)
                    {
                      v252 = *(std::__shared_weak_count **)(v251 + 32);
                      if (v252)
                      {
                        v253 = (unint64_t *)&v252->__shared_owners_;
                        do
                          v254 = __ldaxr(v253);
                        while (__stlxr(v254 - 1, v253));
                        if (!v254)
                        {
                          ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                          std::__shared_weak_count::__release_weak(v252);
                        }
                      }
                      v255 = *(std::__shared_weak_count **)(v251 + 16);
                      if (v255)
                      {
                        v256 = (unint64_t *)&v255->__shared_owners_;
                        do
                          v257 = __ldaxr(v256);
                        while (__stlxr(v257 - 1, v256));
                        if (!v257)
                        {
                          ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                          std::__shared_weak_count::__release_weak(v255);
                        }
                      }
                      MEMORY[0x212BC6398](v251, 0x10F0C40B62ED6C6);
                    }
                    goto LABEL_472;
                  }
                }
                memcpy(v231, v224, v230);
                goto LABEL_447;
              }
            }
            memmove(v220, v211, v212);
            goto LABEL_428;
          }
        }
        memmove(v217, v215, v216);
        goto LABEL_420;
      }
    }
  }
LABEL_535:
  result = *(double *)&v335;
  *(_OWORD *)a1 = v335;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v336;
  *(_QWORD *)(a1 + 32) = v337;
  return result;
}

#error "20EF6CC78: call analysis failed (funcsize=144)"

#error "20EF6CC78: call analysis failed (funcsize=142)"

void sub_20EF6AE64(_Unwind_Exception *a1, int a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x200];
    if (STACK[0x200])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EF6AED8(_Unwind_Exception *a1, int a2)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x200];
    if (STACK[0x200])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)&v2->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EF6AF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a65;
  __int128 a66;
  int a67;
  unint64_t a68;
  int a69;
  unint64_t a70;
  unint64_t a71;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  __int128 v80;
  int v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;

  v72 = (std::__shared_weak_count *)STACK[0x200];
  if (STACK[0x200])
  {
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (v71)
  {
    v75 = (unint64_t *)&v71->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v77 = (uint64_t *)STACK[0x430];
  if (STACK[0x430])
  {
    v78 = STACK[0x468];
    if (STACK[0x468])
    {
      v79 = (_QWORD *)(*v77 + 16);
      if (*(char *)(*v77 + 39) < 0)
        v79 = (_QWORD *)*v79;
      v80 = *(_OWORD *)&STACK[0x438];
      v81 = STACK[0x448];
      v82 = STACK[0x450];
      v83 = STACK[0x458];
      v84 = STACK[0x460];
      v85 = (std::__shared_weak_count *)STACK[0x470];
      if (STACK[0x470])
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      a65 = v79;
      a66 = v80;
      a67 = v81;
      a68 = v82;
      a69 = v83;
      a70 = v84;
      a71 = v78;
      STACK[0x200] = (unint64_t)v85;
      if (v85)
      {
        v88 = (unint64_t *)&v85->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      v90 = v85;
      if (v81 >= **(_DWORD **)(*v77 + 56))
      {
        sub_20E8C3FC4(*v77, (uint64_t)&a65);
        v90 = (std::__shared_weak_count *)STACK[0x200];
      }
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      if (v85)
      {
        v93 = (unint64_t *)&v85->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v95 = (std::__shared_weak_count *)STACK[0x470];
      STACK[0x470] = 0;
      STACK[0x468] = 0;
      if (v95)
      {
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
    }
  }
  if (STACK[0x470])
  {
    v98 = (unint64_t *)(STACK[0x470] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    JUMPOUT(0x20EF6B71CLL);
  }
  JUMPOUT(0x20EF6CE58);
}

void sub_20EF6AFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a65;
  __int128 a66;
  int a67;
  unint64_t a68;
  int a69;
  unint64_t a70;
  unint64_t a71;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  __int128 v80;
  int v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;

  v72 = (std::__shared_weak_count *)STACK[0x200];
  if (STACK[0x200])
  {
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (v71)
  {
    v75 = (unint64_t *)&v71->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v77 = (uint64_t *)STACK[0x430];
  if (STACK[0x430])
  {
    v78 = STACK[0x468];
    if (STACK[0x468])
    {
      v79 = (_QWORD *)(*v77 + 16);
      if (*(char *)(*v77 + 39) < 0)
        v79 = (_QWORD *)*v79;
      v80 = *(_OWORD *)&STACK[0x438];
      v81 = STACK[0x448];
      v82 = STACK[0x450];
      v83 = STACK[0x458];
      v84 = STACK[0x460];
      v85 = (std::__shared_weak_count *)STACK[0x470];
      if (STACK[0x470])
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldxr(v86);
        while (__stxr(v87 + 1, v86));
      }
      a65 = v79;
      a66 = v80;
      a67 = v81;
      a68 = v82;
      a69 = v83;
      a70 = v84;
      a71 = v78;
      STACK[0x200] = (unint64_t)v85;
      if (v85)
      {
        v88 = (unint64_t *)&v85->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      v90 = v85;
      if (v81 >= **(_DWORD **)(*v77 + 56))
      {
        sub_20E8C3FC4(*v77, (uint64_t)&a65);
        v90 = (std::__shared_weak_count *)STACK[0x200];
      }
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      if (v85)
      {
        v93 = (unint64_t *)&v85->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v95 = (std::__shared_weak_count *)STACK[0x470];
      STACK[0x470] = 0;
      STACK[0x468] = 0;
      if (v95)
      {
        v96 = (unint64_t *)&v95->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
    }
  }
  v98 = (std::__shared_weak_count *)STACK[0x470];
  if (STACK[0x470])
  {
    v99 = (unint64_t *)&v98->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  JUMPOUT(0x20EF6CE58);
}

void sub_20EF6B034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  sub_20EF661F0((char **)&STACK[0x4A0]);
  sub_20EF5E2F8((uint64_t)&a72);
  if (a32 < 0)
  {
    operator delete(__p);
    if ((a38 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a38 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a44 & 0x80000000) == 0)
    {
LABEL_8:
      if (a51 < 0)
      {
        operator delete(a46);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a39);
    goto LABEL_8;
  }
  operator delete(a33);
  if ((a44 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20EF6B04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a65;
  __int128 a66;
  int a67;
  unint64_t a68;
  int a69;
  unint64_t a70;
  unint64_t a71;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  __int128 v81;
  int v82;
  unint64_t v83;
  int v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;

  v71 = STACK[0x4A0];
  STACK[0x4A0] = 0;
  if (v71)
  {
    v72 = *(std::__shared_weak_count **)(v71 + 32);
    if (v72)
    {
      p_shared_owners = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(p_shared_owners);
      while (__stlxr(v74 - 1, p_shared_owners));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = *(std::__shared_weak_count **)(v71 + 16);
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    MEMORY[0x212BC6398](v71, 0x10F0C40B62ED6C6);
  }
  v78 = (uint64_t *)STACK[0x430];
  if (STACK[0x430])
  {
    v79 = STACK[0x468];
    if (STACK[0x468])
    {
      v80 = (_QWORD *)(*v78 + 16);
      if (*(char *)(*v78 + 39) < 0)
        v80 = (_QWORD *)*v80;
      v81 = *(_OWORD *)&STACK[0x438];
      v82 = STACK[0x448];
      v83 = STACK[0x450];
      v84 = STACK[0x458];
      v85 = STACK[0x460];
      v86 = (std::__shared_weak_count *)STACK[0x470];
      if (STACK[0x470])
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      a65 = v80;
      a66 = v81;
      a67 = v82;
      a68 = v83;
      a69 = v84;
      a70 = v85;
      a71 = v79;
      STACK[0x200] = (unint64_t)v86;
      if (v86)
      {
        v89 = (unint64_t *)&v86->__shared_owners_;
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      v91 = v86;
      if (v82 >= **(_DWORD **)(*v78 + 56))
      {
        sub_20E8C3FC4(*v78, (uint64_t)&a65);
        v91 = (std::__shared_weak_count *)STACK[0x200];
      }
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      if (v86)
      {
        v94 = (unint64_t *)&v86->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v96 = (std::__shared_weak_count *)STACK[0x470];
      STACK[0x470] = 0;
      STACK[0x468] = 0;
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
    }
  }
  if (STACK[0x470])
  {
    v99 = (unint64_t *)(STACK[0x470] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    JUMPOUT(0x20EF6B71CLL);
  }
  JUMPOUT(0x20EF6CE58);
}

void sub_20EF6B0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a65;
  __int128 a66;
  int a67;
  unint64_t a68;
  int a69;
  unint64_t a70;
  unint64_t a71;
  unint64_t *v71;
  unint64_t *v72;
  std::__shared_weak_count *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  __int128 v79;
  int v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;

  do
    v74 = __ldaxr(v71);
  while (__stlxr(v74 - 1, v71));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
  do
    v75 = __ldaxr(v72);
  while (__stlxr(v75 - 1, v72));
  if (!v75)
  {
    ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
    std::__shared_weak_count::__release_weak(a18);
  }
  v76 = (uint64_t *)STACK[0x430];
  if (STACK[0x430])
  {
    v77 = STACK[0x468];
    if (STACK[0x468])
    {
      v78 = (_QWORD *)(*v76 + 16);
      if (*(char *)(*v76 + 39) < 0)
        v78 = (_QWORD *)*v78;
      v79 = *(_OWORD *)&STACK[0x438];
      v80 = STACK[0x448];
      v81 = STACK[0x450];
      v82 = STACK[0x458];
      v83 = STACK[0x460];
      v84 = (std::__shared_weak_count *)STACK[0x470];
      if (STACK[0x470])
      {
        p_shared_owners = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldxr(p_shared_owners);
        while (__stxr(v86 + 1, p_shared_owners));
      }
      a65 = v78;
      a66 = v79;
      a67 = v80;
      a68 = v81;
      a69 = v82;
      a70 = v83;
      a71 = v77;
      STACK[0x200] = (unint64_t)v84;
      if (v84)
      {
        v87 = (unint64_t *)&v84->__shared_owners_;
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      v89 = v84;
      if (v80 >= **(_DWORD **)(*v76 + 56))
      {
        sub_20E8C3FC4(*v76, (uint64_t)&a65);
        v89 = (std::__shared_weak_count *)STACK[0x200];
      }
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      if (v84)
      {
        v92 = (unint64_t *)&v84->__shared_owners_;
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v94 = (std::__shared_weak_count *)STACK[0x470];
      STACK[0x470] = 0;
      STACK[0x468] = 0;
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
    }
  }
  v97 = (std::__shared_weak_count *)STACK[0x470];
  if (STACK[0x470])
  {
    v98 = (unint64_t *)&v97->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  JUMPOUT(0x20EF6CE58);
}

void sub_20EF6B318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a65;
  __int128 a66;
  int a67;
  unint64_t a68;
  int a69;
  unint64_t a70;
  unint64_t a71;
  uint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  __int128 v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;

  v71 = (uint64_t *)STACK[0x430];
  if (STACK[0x430])
  {
    v72 = STACK[0x468];
    if (STACK[0x468])
    {
      v73 = (_QWORD *)(*v71 + 16);
      if (*(char *)(*v71 + 39) < 0)
        v73 = (_QWORD *)*v73;
      v74 = *(_OWORD *)&STACK[0x438];
      v75 = STACK[0x448];
      v76 = STACK[0x450];
      v77 = STACK[0x458];
      v78 = STACK[0x460];
      v79 = (std::__shared_weak_count *)STACK[0x470];
      if (STACK[0x470])
      {
        p_shared_owners = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(p_shared_owners);
        while (__stxr(v81 + 1, p_shared_owners));
      }
      a65 = v73;
      a66 = v74;
      a67 = v75;
      a68 = v76;
      a69 = v77;
      a70 = v78;
      a71 = v72;
      STACK[0x200] = (unint64_t)v79;
      if (v79)
      {
        v82 = (unint64_t *)&v79->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = v79;
      if (v75 >= **(_DWORD **)(*v71 + 56))
      {
        sub_20E8C3FC4(*v71, (uint64_t)&a65);
        v84 = (std::__shared_weak_count *)STACK[0x200];
      }
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      if (v79)
      {
        v87 = (unint64_t *)&v79->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v89 = (std::__shared_weak_count *)STACK[0x470];
      STACK[0x470] = 0;
      STACK[0x468] = 0;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
    }
  }
  if (STACK[0x470])
  {
    v92 = (unint64_t *)(STACK[0x470] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    JUMPOUT(0x20EF6B71CLL);
  }
  JUMPOUT(0x20EF6CE58);
}

void sub_20EF6B324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a65;
  __int128 a66;
  int a67;
  unint64_t a68;
  int a69;
  unint64_t a70;
  unint64_t a71;
  uint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  __int128 v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;

  v71 = (uint64_t *)STACK[0x430];
  if (STACK[0x430])
  {
    v72 = STACK[0x468];
    if (STACK[0x468])
    {
      v73 = (_QWORD *)(*v71 + 16);
      if (*(char *)(*v71 + 39) < 0)
        v73 = (_QWORD *)*v73;
      v74 = *(_OWORD *)&STACK[0x438];
      v75 = STACK[0x448];
      v76 = STACK[0x450];
      v77 = STACK[0x458];
      v78 = STACK[0x460];
      v79 = (std::__shared_weak_count *)STACK[0x470];
      if (STACK[0x470])
      {
        p_shared_owners = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(p_shared_owners);
        while (__stxr(v81 + 1, p_shared_owners));
      }
      a65 = v73;
      a66 = v74;
      a67 = v75;
      a68 = v76;
      a69 = v77;
      a70 = v78;
      a71 = v72;
      STACK[0x200] = (unint64_t)v79;
      if (v79)
      {
        v82 = (unint64_t *)&v79->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = v79;
      if (v75 >= **(_DWORD **)(*v71 + 56))
      {
        sub_20E8C3FC4(*v71, (uint64_t)&a65);
        v84 = (std::__shared_weak_count *)STACK[0x200];
      }
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      if (v79)
      {
        v87 = (unint64_t *)&v79->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v89 = (std::__shared_weak_count *)STACK[0x470];
      STACK[0x470] = 0;
      STACK[0x468] = 0;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
    }
  }
  v92 = (std::__shared_weak_count *)STACK[0x470];
  if (STACK[0x470])
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  JUMPOUT(0x20EF6CE58);
}

void sub_20EF6B338()
{
  if ((SLOBYTE(STACK[0x4B7]) & 0x80000000) == 0)
    JUMPOUT(0x20EF6CEF4);
  JUMPOUT(0x20EF6CEF0);
}

void sub_20EF6B344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;
  void *v72;

  sub_20E96E218((uint64_t)&STACK[0x4A0]);
  if (v72)
    free(v72);
  sub_20EF66278((char **)&STACK[0x430]);
  sub_20EF5E2F8((uint64_t)&a72);
  if (a32 < 0)
  {
    operator delete(a27);
    if ((a38 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((a38 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a44 & 0x80000000) == 0)
    {
LABEL_10:
      if (a51 < 0)
      {
        operator delete(a46);
        _Unwind_Resume(a1);
      }
      JUMPOUT(0x20EF6CF18);
    }
LABEL_9:
    operator delete(a39);
    goto LABEL_10;
  }
  operator delete(a33);
  if ((a44 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20EF6B34C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  JUMPOUT(0x20EF6CAF8);
}

void sub_20EF6B358()
{
  JUMPOUT(0x20EF6B948);
}

void sub_20EF6B360()
{
  JUMPOUT(0x20EF6B98CLL);
}

void sub_20EF6B368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a65;
  __int128 a66;
  int a67;
  unint64_t a68;
  int a69;
  unint64_t a70;
  unint64_t a71;
  uint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  __int128 v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;

  if (LOBYTE(STACK[0x4C0]) && SLOBYTE(STACK[0x4BF]) < 0)
    operator delete((void *)STACK[0x4A8]);
  if (STACK[0x4A0])
    os_release((void *)STACK[0x4A0]);
  v71 = (uint64_t *)STACK[0x430];
  if (STACK[0x430])
  {
    v72 = STACK[0x468];
    if (STACK[0x468])
    {
      v73 = (_QWORD *)(*v71 + 16);
      if (*(char *)(*v71 + 39) < 0)
        v73 = (_QWORD *)*v73;
      v74 = *(_OWORD *)&STACK[0x438];
      v75 = STACK[0x448];
      v76 = STACK[0x450];
      v77 = STACK[0x458];
      v78 = STACK[0x460];
      v79 = (std::__shared_weak_count *)STACK[0x470];
      if (STACK[0x470])
      {
        p_shared_owners = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(p_shared_owners);
        while (__stxr(v81 + 1, p_shared_owners));
      }
      a65 = v73;
      a66 = v74;
      a67 = v75;
      a68 = v76;
      a69 = v77;
      a70 = v78;
      a71 = v72;
      STACK[0x200] = (unint64_t)v79;
      if (v79)
      {
        v82 = (unint64_t *)&v79->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = v79;
      if (v75 >= **(_DWORD **)(*v71 + 56))
      {
        sub_20E8C3FC4(*v71, (uint64_t)&a65);
        v84 = (std::__shared_weak_count *)STACK[0x200];
      }
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      if (v79)
      {
        v87 = (unint64_t *)&v79->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v89 = (std::__shared_weak_count *)STACK[0x470];
      STACK[0x470] = 0;
      STACK[0x468] = 0;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
    }
  }
  if (STACK[0x470])
  {
    v92 = (unint64_t *)(STACK[0x470] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    JUMPOUT(0x20EF6B71CLL);
  }
  JUMPOUT(0x20EF6CE58);
}

void sub_20EF6B514(_Unwind_Exception *a1, int a2)
{
  unint64_t *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x200];
    if (STACK[0x200])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = v2 + 1;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(unint64_t *))(*v2 + 16))(v2);
        JUMPOUT(0x20EF6B7ACLL);
      }
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EF6B574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _QWORD *a65;
  __int128 a66;
  int a67;
  unint64_t a68;
  int a69;
  unint64_t a70;
  unint64_t a71;
  uint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  __int128 v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;

  if (LOBYTE(STACK[0x4C0]) && SLOBYTE(STACK[0x4BF]) < 0)
    operator delete((void *)STACK[0x4A8]);
  if (STACK[0x4A0])
    os_release((void *)STACK[0x4A0]);
  v71 = (uint64_t *)STACK[0x430];
  if (STACK[0x430])
  {
    v72 = STACK[0x468];
    if (STACK[0x468])
    {
      v73 = (_QWORD *)(*v71 + 16);
      if (*(char *)(*v71 + 39) < 0)
        v73 = (_QWORD *)*v73;
      v74 = *(_OWORD *)&STACK[0x438];
      v75 = STACK[0x448];
      v76 = STACK[0x450];
      v77 = STACK[0x458];
      v78 = STACK[0x460];
      v79 = (std::__shared_weak_count *)STACK[0x470];
      if (STACK[0x470])
      {
        p_shared_owners = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldxr(p_shared_owners);
        while (__stxr(v81 + 1, p_shared_owners));
      }
      a65 = v73;
      a66 = v74;
      a67 = v75;
      a68 = v76;
      a69 = v77;
      a70 = v78;
      a71 = v72;
      STACK[0x200] = (unint64_t)v79;
      if (v79)
      {
        v82 = (unint64_t *)&v79->__shared_owners_;
        do
          v83 = __ldxr(v82);
        while (__stxr(v83 + 1, v82));
      }
      v84 = v79;
      if (v75 >= **(_DWORD **)(*v71 + 56))
      {
        sub_20E8C3FC4(*v71, (uint64_t)&a65);
        v84 = (std::__shared_weak_count *)STACK[0x200];
      }
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      if (v79)
      {
        v87 = (unint64_t *)&v79->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v89 = (std::__shared_weak_count *)STACK[0x470];
      STACK[0x470] = 0;
      STACK[0x468] = 0;
      if (v89)
      {
        v90 = (unint64_t *)&v89->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
    }
  }
  v92 = (std::__shared_weak_count *)STACK[0x470];
  if (STACK[0x470])
  {
    v93 = (unint64_t *)&v92->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  JUMPOUT(0x20EF6CE58);
}

void sub_20EF6B73C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)STACK[0x200];
    if (STACK[0x200])
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v2)
    {
      v7 = (unint64_t *)(v2 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      JUMPOUT(0x20EF6B794);
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EF6B7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;

  sub_20EF5E2F8(&a72);
  if (a32 < 0)
  {
    operator delete(a27);
    if ((a38 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a38 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a44 & 0x80000000) == 0)
    {
LABEL_8:
      if (a51 < 0)
      {
        operator delete(a46);
        _Unwind_Resume(a1);
      }
      JUMPOUT(0x20EF6CF18);
    }
LABEL_7:
    operator delete(a39);
    goto LABEL_8;
  }
  operator delete(a33);
  if ((a44 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20EF6B7C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  if ((SLOBYTE(STACK[0x4B7]) & 0x80000000) == 0)
    JUMPOUT(0x20EF6CEF4);
  JUMPOUT(0x20EF6B7F4);
}

void sub_20EF6B7E8()
{
  if (SLOBYTE(STACK[0x4B7]) < 0)
    JUMPOUT(0x20EF6B7F4);
  JUMPOUT(0x20EF6CEF4);
}

void sub_20EF6B7FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  JUMPOUT(0x20EF6B818);
}

void sub_20EF6B814(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x4B7]) < 0)
  {
    operator delete((void *)STACK[0x4A0]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

#error "20EF6CC78: call analysis failed (funcsize=134)"

void sub_20EF6B844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  char a71;
  void *a72;
  char a73;
  char a74;
  void *v74;
  uint64_t v76;

  if (SLOBYTE(STACK[0x24F]) < 0)
  {
    operator delete((void *)STACK[0x238]);
    if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
  {
LABEL_3:
    if (!LOBYTE(STACK[0x218]))
      goto LABEL_9;
LABEL_7:
    if (SLOBYTE(STACK[0x217]) < 0)
      operator delete((void *)STACK[0x200]);
LABEL_9:
    if (a74 && a73 < 0)
      operator delete(a72);
    if (a71 < 0)
      operator delete(a66);
    if (v74)
      free(v74);
    if (a25)
    {
      v76 = sub_20E9545B0(a25);
      MEMORY[0x212BC6398](v76, 0x10A0C401749CDD1);
      _Unwind_Resume(a1);
    }
    JUMPOUT(0x20EF6CF18);
  }
  operator delete((void *)STACK[0x220]);
  if (!LOBYTE(STACK[0x218]))
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20EF6B84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;
  void *v72;

  sub_20E96E218((uint64_t)&STACK[0x4A0]);
  if (v72)
    free(v72);
  sub_20EF5E2F8((uint64_t)&a72);
  if (a32 < 0)
  {
    operator delete(a27);
    if ((a38 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((a38 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a44 & 0x80000000) == 0)
    {
LABEL_10:
      if (a51 < 0)
      {
        operator delete(a46);
        _Unwind_Resume(a1);
      }
      JUMPOUT(0x20EF6CF18);
    }
LABEL_9:
    operator delete(a39);
    goto LABEL_10;
  }
  operator delete(a33);
  if ((a44 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20EF6B854(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,_QWORD *a44,uint64_t a45,const char *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,const char *a62,uint64_t a63)
{
  uint64_t v64;
  int v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  unsigned __int8 v72;
  uint64_t v73;
  const char *v74;
  NSObject *v75;
  uint64_t v76;

  if (a2)
  {
    sub_21022EAD8(&a46);
    __cxa_begin_catch(a1);
    sub_20EF5F730(&a45);
    v64 = a45;
    if (**(int **)(a45 + 56) <= 3)
    {
      v65 = *(unsigned __int8 *)(a45 + 72);
      v64 = sub_20E8C31DC();
      v66 = v64 ? v64 + 16 : 0;
      if (v65 || v64)
      {
        STACK[0x430] = (unint64_t)&a45;
        STACK[0x438] = std::chrono::steady_clock::now().__d_.__rep_;
        STACK[0x440] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(STACK[0x448]) = 3;
        STACK[0x450] = (unint64_t)"unknown file";
        LODWORD(STACK[0x458]) = 215;
        STACK[0x470] = 0;
        STACK[0x460] = (unint64_t)"unknown function";
        STACK[0x468] = 0;
        v67 = &a33;
        if (a38 < 0)
          v67 = a33;
        a44 = v67;
        v68 = *(_QWORD *)STACK[0x430];
        v69 = (const char *)(v68 + 16);
        if (*(char *)(v68 + 39) < 0)
        {
          v71 = *(const char **)(v68 + 16);
          v70 = *(_QWORD *)(v68 + 24);
        }
        else
        {
          v70 = *(unsigned __int8 *)(v68 + 39);
          v71 = v69;
        }
        a62 = v71;
        a63 = v70;
        v72 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8(&STACK[0x4A0]);
          sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, (int)&STACK[0x4A0], "com.apple.cv3d");
          if (LOBYTE(STACK[0x4B8]) && SLOBYTE(STACK[0x4B7]) < 0)
            operator delete((void *)STACK[0x4A0]);
          __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v73 = byte_254A4A50F;
        if (byte_254A4A50F >= 0)
        {
          v74 = (const char *)&xmmword_254A4A4F8;
        }
        else
        {
          v73 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
          v74 = (const char *)xmmword_254A4A4F8;
        }
        a46 = v74;
        a47 = v73;
        STACK[0x4A0] = (unint64_t)os_log_create(v74, a62);
        sub_20E86E5A8(&STACK[0x4A8]);
        sub_20E86E5A8(&STACK[0x4C8]);
        v75 = STACK[0x4A0];
        sub_20E86E44C(&STACK[0x4A0]);
        sub_20EF66EF8(v66, (int)v69, v75, OS_LOG_TYPE_INFO);
        if (v65)
        {
          sub_20E8C003C((int)&STACK[0x430], "[%s] was not loaded.");
          sub_20E863570(&STACK[0x430]);
        }
        v64 = sub_20E863714(&STACK[0x430]);
      }
    }
    v76 = sub_210219C18(v64);
    sub_20EF65EBC(v76, 0xEEEEB0B5B2B2EEEELL, &a50);
    __cxa_end_catch();
    JUMPOUT(0x20EF6886CLL);
  }
  _Unwind_Resume(a1);
}

void sub_20EF6B860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;

  sub_20EF5E2F8(&a72);
  if (a32 < 0)
  {
    operator delete(a27);
    if ((a38 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a38 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a44 & 0x80000000) == 0)
    {
LABEL_8:
      if (a51 < 0)
      {
        operator delete(a46);
        _Unwind_Resume(a1);
      }
      JUMPOUT(0x20EF6CF18);
    }
LABEL_7:
    operator delete(a39);
    goto LABEL_8;
  }
  operator delete(a33);
  if ((a44 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20EF6B868()
{
  JUMPOUT(0x20EF6B954);
}

void sub_20EF6B870()
{
  JUMPOUT(0x20EF6B980);
}

#error "20EF6BF98: call analysis failed (funcsize=715)"

void sub_20EF6B8FC()
{
  JUMPOUT(0x20EF6CEB0);
}

void sub_20EF6B904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    JUMPOUT(0x20EF6CEDCLL);
  JUMPOUT(0x20EF6CEC8);
}

void sub_20EF6B914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if ((a38 & 0x80000000) == 0)
    JUMPOUT(0x20EF6CEF4);
  JUMPOUT(0x20EF6CEECLL);
}

void sub_20EF6B924()
{
  JUMPOUT(0x20EF6CEF4);
}

void sub_20EF6B92C()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EF6B940);
}

void sub_20EF6B964()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EF6B978);
}

void sub_20EF6B998(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x20EF6B9A8);
  _Unwind_Resume(a1);
}

void sub_20EF6C578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  __int128 a66;
  int a67;
  void *a68;
  int a69;
  uint64_t a70;
  uint64_t a71;
  uint64_t *v72;
  uint64_t v73;
  _QWORD *v74;
  __int128 v75;
  int v76;
  void *v77;
  int v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;

  __cxa_guard_abort(&qword_254A4A510);
  v72 = (uint64_t *)STACK[0x430];
  if (STACK[0x430])
  {
    v73 = STACK[0x468];
    if (STACK[0x468])
    {
      v74 = (_QWORD *)(*v72 + 16);
      if (*(char *)(*v72 + 39) < 0)
        v74 = (_QWORD *)*v74;
      v75 = *(_OWORD *)&STACK[0x438];
      v76 = STACK[0x448];
      v77 = (void *)STACK[0x450];
      v78 = STACK[0x458];
      v79 = STACK[0x460];
      v80 = (std::__shared_weak_count *)STACK[0x470];
      if (STACK[0x470])
      {
        p_shared_owners = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldxr(p_shared_owners);
        while (__stxr(v82 + 1, p_shared_owners));
      }
      __p = v74;
      a66 = v75;
      a67 = v76;
      a68 = v77;
      a69 = v78;
      a70 = v79;
      a71 = v73;
      STACK[0x200] = (unint64_t)v80;
      if (v80)
      {
        v83 = (unint64_t *)&v80->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      v85 = v80;
      if (v76 >= **(_DWORD **)(*v72 + 56))
      {
        sub_20E8C3FC4(*v72, (uint64_t)&__p);
        v85 = (std::__shared_weak_count *)STACK[0x200];
      }
      if (v85)
      {
        v86 = (unint64_t *)&v85->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (v80)
      {
        v88 = (unint64_t *)&v80->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v90 = (std::__shared_weak_count *)STACK[0x470];
      STACK[0x470] = 0;
      STACK[0x468] = 0;
      if (v90)
      {
        v91 = (unint64_t *)&v90->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
    }
  }
  v93 = (std::__shared_weak_count *)STACK[0x470];
  if (STACK[0x470])
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  __cxa_end_catch();
  if (a25)
  {
    v96 = sub_20E9545B0(a25);
    MEMORY[0x212BC6398](v96, 0x10A0C401749CDD1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EF6CAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v26;

  if (a25)
  {
    v26 = sub_20E9545B0();
    MEMORY[0x212BC6398](v26, 0x10A0C401749CDD1);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EF6CF18);
}

void sub_20EF6CAC0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a2)
  {
    sub_20E9F1E54((uint64_t)&a61);
    JUMPOUT(0x20EF6CAE0);
  }
  _Unwind_Resume(a1);
}

void sub_20EF6CAD8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a2)
  {
    sub_20EE66CE8(&STACK[0x4A0]);
    sub_20E9EEE68(&a50);
    JUMPOUT(0x20EF6CAF0);
  }
  _Unwind_Resume(a1);
}

void sub_20EF6CD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;

  if (LOBYTE(STACK[0x4B8]) && SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x430]);
  __cxa_end_catch();
  sub_20EF5E2F8((uint64_t)&a72);
  if (a32 < 0)
  {
    operator delete(a27);
    if ((a38 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a38 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a44 & 0x80000000) == 0)
    {
LABEL_11:
      if (a51 < 0)
      {
        operator delete(a46);
        _Unwind_Resume(a1);
      }
      JUMPOUT(0x20EF6CF18);
    }
LABEL_10:
    operator delete(a39);
    goto LABEL_11;
  }
  operator delete(a33);
  if ((a44 & 0x80000000) == 0)
    goto LABEL_11;
  goto LABEL_10;
}

void sub_20EF6CDC4()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EF6CDD8);
}

void sub_20EF6CE80()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EF6CE94);
}

void sub_20EF6CF10(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20EF6CF18);
  sub_20E860DA4(a1);
}

uint64_t sub_20EF6CF28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(_QWORD *)(a1 + 112);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 120);
      v4 = *(void **)(a1 + 112);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 112);
      }
      *(_QWORD *)(a1 + 120) = v2;
      operator delete(v4);
    }
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20EF6CFC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _BYTE v18[18];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 134218242;
    *(_QWORD *)v18 = v8;
    *(_WORD *)&v18[8] = 2080;
    *(_QWORD *)&v18[10] = "DMG";
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "MappingIOLoadMeta:SID:%llu, TYPE:%s", 0x23uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)&v18[4]);
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 134218242;
    *(_QWORD *)v18 = v15;
    *(_WORD *)&v18[8] = 2080;
    *(_QWORD *)&v18[10] = "DMG";
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF6D2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF6D2F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _BYTE v18[18];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 134218242;
    *(_QWORD *)v18 = v8;
    *(_WORD *)&v18[8] = 2080;
    *(_QWORD *)&v18[10] = "DNAME";
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "MappingIOLoadMeta:SID:%llu, TYPE:%s", 0x23uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)&v18[4]);
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 134218242;
    *(_QWORD *)v18 = v15;
    *(_WORD *)&v18[8] = 2080;
    *(_QWORD *)&v18[10] = "DNAME";
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF6D5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF6D62C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF6DBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF6DBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF6DBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF6DC30(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF6E1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF6E1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF6E1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF6E234(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20EF6E5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF6E5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF6E5FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20EF6E620(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF6EB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF6EBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF6EBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF6EC24(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  double v16;
  uint64_t v17;
  void **v18;
  double v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[2];
  void *v27;
  unsigned __int8 v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  double v31;
  char v32;
  void *v33[3];
  double v34;
  char v35;
  void *v36;
  char v37;
  unint64_t *v38;
  std::__shared_weak_count *v39;

  if (!*((_BYTE *)a1 + 48) || !*((_BYTE *)a1 + 72))
    return;
  v2 = a1[7];
  v3 = a1[4];
  v4 = (*(uint64_t (**)(uint64_t *))(*a1[2] + 16))(a1[2]);
  if (!*((_BYTE *)a1 + 72))
    sub_20E866B34();
  v5 = v4;
  v6 = a1[7];
  v7 = (unint64_t *)**a1;
  v8 = (std::__shared_weak_count *)(*a1)[1];
  v38 = v7;
  v39 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (*(_BYTE *)v7)
  {
    v32 = 0;
    v30 = 0;
    LOBYTE(v31) = 0;
    strcpy((char *)v33, "time_to_load_map");
    HIBYTE(v33[2]) = 16;
    v11 = (char *)operator new(0x20uLL);
    strcpy(v11, "time_to_receive_location");
    LOBYTE(v34) = 0;
    v35 = 0;
    sub_20E860C04(&v36, v11, 0x18uLL);
    operator delete(v11);
    v12 = (std::__shared_weak_count *)operator new(0x348uLL);
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1FA0;
    bzero(&v12[1], 0x330uLL);
    sub_20EF6F198((uint64_t)&v12[1]);
    v13 = v30;
    v29 = &v12[1].__vftable;
    v30 = v12;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    sub_20FDBE67C((uint64_t)v7, (uint64_t)__p);
    v16 = (double)(v5 - (uint64_t)v6);
    v17 = (uint64_t)v29;
    v18 = (void **)(v29 + 14);
    v19 = v16 / 1000000000.0;
    if (*((unsigned __int8 *)v29 + 136) == v28)
    {
      if (*((_BYTE *)v29 + 136))
      {
        if (*((char *)v29 + 135) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)__p;
        v18[2] = v27;
      }
    }
    else if (*((_BYTE *)v29 + 136))
    {
      if (*((char *)v29 + 135) < 0)
        operator delete(*v18);
      *(_BYTE *)(v17 + 136) = 0;
      if (v28 && SHIBYTE(v27) < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)v18 = *(_OWORD *)__p;
      v18[2] = v27;
      *(_BYTE *)(v17 + 136) = 1;
    }
    v20 = atomic_load(v38 + 16);
    *((_WORD *)v29 + 356) = WORD2(v20);
    v31 = v19;
    v32 = 1;
    v34 = (double)((char *)v2 - (char *)v3) / 1000000000.0;
    v35 = 1;
    sub_20FDC3FF4(*a1, (uint64_t *)&v29);
    if (v37 < 0)
    {
      operator delete(v36);
      if ((SHIBYTE(v33[2]) & 0x80000000) == 0)
      {
LABEL_27:
        v21 = v30;
        if (!v30)
          goto LABEL_35;
        goto LABEL_31;
      }
    }
    else if ((SHIBYTE(v33[2]) & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(v33[0]);
    v21 = v30;
    if (!v30)
    {
LABEL_35:
      v8 = v39;
      goto LABEL_36;
    }
LABEL_31:
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    goto LABEL_35;
  }
LABEL_36:
  if (v8)
  {
    v24 = (unint64_t *)&v8->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20EF6EF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20EF6F018((uint64_t)va);
  sub_20E86665C(v5 - 112);
  _Unwind_Resume(a1);
}

void sub_20EF6EFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v26;

  operator delete(v22);
  if (a22 < 0)
    operator delete(__p);
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  sub_20E86665C(v23 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF6F018(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_6;
LABEL_3:
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return a1;
LABEL_7:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EF6F0B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EF6F0C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EF6F0F0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20EF6F14C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1FA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EF6F15C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1FA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EF6F18C(uint64_t a1)
{
  return sub_20EF6F9AC(a1 + 24);
}

uint64_t sub_20EF6F198(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0x6576656C5F78756CLL;
  *(_QWORD *)(a1 + 24) = 108;
  *(_WORD *)(a1 + 39) = 9;
  *(_BYTE *)(a1 + 48) = 0;
  strcpy((char *)(a1 + 56), "num_inlier_tracks");
  *(_WORD *)(a1 + 79) = 17;
  *(_QWORD *)(a1 + 88) = 0x5F74746977657270;
  *(_QWORD *)(a1 + 96) = 28271;
  *(_BYTE *)(a1 + 111) = 10;
  *(_BYTE *)(a1 + 81) = 0;
  sub_20EF6F3E4(a1 + 112);
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 608) = 0x797469636F6C6576;
  *(_QWORD *)(a1 + 616) = 0;
  *(_WORD *)(a1 + 631) = 8;
  *(_BYTE *)(a1 + 640) = 0;
  strcpy((char *)(a1 + 648), "angular_velocity");
  *(_WORD *)(a1 + 671) = 16;
  *(_BYTE *)(a1 + 680) = 0;
  strcpy((char *)(a1 + 688), "distance_traveled");
  *(_WORD *)(a1 + 711) = 17;
  *(_BYTE *)(a1 + 713) = 0;
  *(_QWORD *)(a1 + 720) = 0x6F5F656369766564;
  *(_QWORD *)(a1 + 728) = 110;
  *(_WORD *)(a1 + 743) = 9;
  *(_BYTE *)(a1 + 745) = 0;
  *(_QWORD *)(a1 + 752) = 0x6F6F646E695F7369;
  *(_QWORD *)(a1 + 760) = 114;
  *(_WORD *)(a1 + 775) = 9;
  *(_BYTE *)(a1 + 784) = 0;
  strcpy((char *)(a1 + 792), "total_time_on");
  *(_WORD *)(a1 + 806) = 0;
  *(_BYTE *)(a1 + 815) = 13;
  return a1;
}

void sub_20EF6F360(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EF6F374(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF6F374(uint64_t a1)
{
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_20EF6F3E4(uint64_t a1)
{
  char *v2;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0x646F6D5F6D616C73;
  *(_QWORD *)(a1 + 40) = 101;
  *(_WORD *)(a1 + 55) = 9;
  *(_BYTE *)(a1 + 80) = 0;
  strcpy((char *)(a1 + 88), "vs_platform_type");
  *(_WORD *)(a1 + 111) = 16;
  *(_BYTE *)(a1 + 113) = 0;
  strcpy((char *)(a1 + 120), "is_stationary");
  *(_WORD *)(a1 + 134) = 0;
  *(_WORD *)(a1 + 143) = 13;
  *(_BYTE *)(a1 + 145) = 0;
  strcpy((char *)(a1 + 152), "is_weak_stationary");
  *(_WORD *)(a1 + 175) = 18;
  *(_BYTE *)(a1 + 184) = 0;
  strcpy((char *)(a1 + 192), "num_active_submaps");
  *(_WORD *)(a1 + 215) = 18;
  *(_BYTE *)(a1 + 224) = 0;
  strcpy((char *)(a1 + 232), "num_external_submaps");
  *(_WORD *)(a1 + 255) = 20;
  *(_BYTE *)(a1 + 264) = 0;
  strcpy((char *)(a1 + 272), "num_localized_submaps");
  *(_WORD *)(a1 + 295) = 21;
  *(_BYTE *)(a1 + 297) = 0;
  strcpy((char *)(a1 + 304), "has_lost_tracking");
  *(_WORD *)(a1 + 327) = 17;
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0x6165685F6D616C73;
  *(_QWORD *)(a1 + 352) = 6845548;
  *(_WORD *)(a1 + 367) = 11;
  *(_BYTE *)(a1 + 369) = 0;
  strcpy((char *)(a1 + 376), "smudge_detected");
  *(_WORD *)(a1 + 399) = 15;
  *(_BYTE *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0x656E696764756D73;
  *(_QWORD *)(a1 + 424) = 29555;
  *(_BYTE *)(a1 + 439) = 10;
  v2 = (char *)operator new(0x20uLL);
  strcpy(v2, "percentage_static_points");
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  sub_20E860C04((_BYTE *)(a1 + 456), v2, 0x18uLL);
  operator delete(v2);
  return a1;
}

void sub_20EF6F698(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v5;

  v3 = v2;
  operator delete(v3);
  if (*(char *)(v1 + 439) < 0)
  {
    operator delete(*(void **)(v1 + 416));
    if ((*(char *)(v1 + 399) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 367) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(char *)(v1 + 399) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 376));
  if ((*(char *)(v1 + 367) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 327) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(v1 + 344));
  if ((*(char *)(v1 + 327) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 295) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(v1 + 304));
  if ((*(char *)(v1 + 295) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v1 + 255) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(v1 + 272));
  if ((*(char *)(v1 + 255) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(v1 + 215) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v1 + 232));
  if ((*(char *)(v1 + 215) & 0x80000000) == 0)
  {
LABEL_8:
    v5 = v1 + 56;
    if ((*(char *)(v1 + 175) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v1 + 192));
  v5 = v1 + 56;
  if ((*(char *)(v1 + 175) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(v1 + 143) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v1 + 152));
  if ((*(char *)(v1 + 143) & 0x80000000) == 0)
  {
LABEL_10:
    sub_20EF6F7C0(v5);
    sub_20EF6F7C0(v1);
    _Unwind_Resume(a1);
  }
LABEL_19:
  operator delete(*(void **)(v1 + 120));
  sub_20EF6F7C0(v5);
  sub_20EF6F7C0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF6F7C0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if (!*(_BYTE *)(a1 + 24))
      return a1;
  }
  else if (!*(_BYTE *)(a1 + 24))
  {
    return a1;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EF6F820(uint64_t a1)
{
  if (*(char *)(a1 + 479) < 0)
  {
    operator delete(*(void **)(a1 + 456));
    if ((*(char *)(a1 + 439) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 399) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(char *)(a1 + 439) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 416));
  if ((*(char *)(a1 + 399) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 367) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(a1 + 376));
  if ((*(char *)(a1 + 367) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 327) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 344));
  if ((*(char *)(a1 + 327) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 295) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 304));
  if ((*(char *)(a1 + 295) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 255) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 272));
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 215) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 232));
  if ((*(char *)(a1 + 215) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*(char *)(a1 + 175) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 192));
  if ((*(char *)(a1 + 175) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(*(void **)(a1 + 152));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_24:
    operator delete(*(void **)(a1 + 88));
    if (!*(_BYTE *)(a1 + 80))
      goto LABEL_26;
    goto LABEL_25;
  }
LABEL_23:
  operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 111) < 0)
    goto LABEL_24;
LABEL_12:
  if (!*(_BYTE *)(a1 + 80))
  {
LABEL_26:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_27;
LABEL_30:
    operator delete(*(void **)(a1 + 32));
    if (!*(_BYTE *)(a1 + 24))
      return a1;
    goto LABEL_31;
  }
LABEL_25:
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    goto LABEL_26;
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_30;
LABEL_27:
  if (!*(_BYTE *)(a1 + 24))
    return a1;
LABEL_31:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EF6F9AC(uint64_t a1)
{
  if (*(char *)(a1 + 815) < 0)
  {
    operator delete(*(void **)(a1 + 792));
    if ((*(char *)(a1 + 775) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 743) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a1 + 775) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 752));
  if ((*(char *)(a1 + 743) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 711) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 720));
  if ((*(char *)(a1 + 711) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 671) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 688));
  if ((*(char *)(a1 + 671) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 631) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 648));
  if ((*(char *)(a1 + 631) & 0x80000000) == 0)
  {
LABEL_7:
    sub_20EF6F820(a1 + 112);
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(a1 + 608));
  sub_20EF6F820(a1 + 112);
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_18:
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
    goto LABEL_19;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    goto LABEL_18;
LABEL_9:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
LABEL_19:
  operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_20EF6FABC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = operator new(0x30uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C9F1F50;
  v10 = v8 + 3;
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v8[3] = v11;
    v8[4] = v12;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v8[5] = a3;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    v8[3] = v11;
    v8[4] = 0;
    v8[5] = a3;
  }
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v9;
  v17 = *a4;
  v18 = a4[1];
  *(_QWORD *)(a1 + 16) = *a4;
  *(_QWORD *)(a1 + 24) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v17 = *(_QWORD *)(a1 + 16);
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  if (*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 64) = v22;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = v22;
    *(_BYTE *)(a1 + 72) = 1;
  }
  *(_QWORD *)(a1 + 56) = v21;
  return a1;
}

void sub_20EF6FBF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20E86665C(v2);
  sub_20E86665C(v1);
  _Unwind_Resume(a1);
}

void sub_20EF6FC14(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  void **v15;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void *__p[2];
  void *v24;
  unsigned __int8 v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  uint64_t *v28;
  char v29;
  void *v30[2];
  _BYTE v31[9];
  char v32;
  void *v33[2];
  _BYTE v34[9];
  char v35;
  void *v36[2];
  _BYTE v37[9];
  char v38;
  void *v39[2];
  _BYTE v40[9];
  char v41;
  void *v42[3];
  unint64_t *v43;
  std::__shared_weak_count *v44;

  if (!*((_BYTE *)a1 + 48) || !*((_BYTE *)a1 + 72))
    return;
  v4 = a1[4];
  v5 = a1[7];
  *(_OWORD *)(a1 + 7) = *((_OWORD *)a1 + 2);
  *((_BYTE *)a1 + 72) = *((_BYTE *)a1 + 48);
  *((_BYTE *)a1 + 48) = 0;
  v6 = (unint64_t *)**a1;
  v7 = (std::__shared_weak_count *)(*a1)[1];
  v43 = v6;
  v44 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (*(_BYTE *)v6)
  {
    v29 = 0;
    v27 = 0;
    LOBYTE(v28) = 0;
    strcpy((char *)v30, "num_map_samples");
    *(_WORD *)v31 = 15;
    v32 = 0;
    strcpy((char *)v33, "num_map_updates");
    *(_WORD *)v34 = 15;
    v35 = 0;
    strcpy((char *)v36, "tot_num_states");
    HIBYTE(v36[1]) = 0;
    *(_WORD *)v37 = 14;
    v38 = 0;
    strcpy((char *)v39, "tot_bytes_saved");
    *(_WORD *)v40 = 15;
    v41 = 0;
    strcpy((char *)v42, "time_since_last_save");
    HIBYTE(v42[2]) = 20;
    v10 = (std::__shared_weak_count *)operator new(0x348uLL);
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F1FA0;
    bzero(&v10[1], 0x330uLL);
    sub_20EF6F198((uint64_t)&v10[1]);
    v11 = v27;
    v26 = &v10[1].__vftable;
    v27 = v10;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_20FDBE67C((uint64_t)v6, (uint64_t)__p);
    v14 = v26;
    v15 = (void **)(v26 + 14);
    if (*((unsigned __int8 *)v26 + 136) == v25)
    {
      if (*((_BYTE *)v26 + 136))
      {
        if (*((char *)v26 + 135) < 0)
          operator delete(*v15);
        *(_OWORD *)v15 = *(_OWORD *)__p;
        v15[2] = v24;
      }
    }
    else if (*((_BYTE *)v26 + 136))
    {
      if (*((char *)v26 + 135) < 0)
        operator delete(*v15);
      *((_BYTE *)v14 + 136) = 0;
      if (v25 && SHIBYTE(v24) < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)__p;
      v15[2] = v24;
      *((_BYTE *)v14 + 136) = 1;
    }
    v16 = atomic_load(v43 + 16);
    *((_WORD *)v26 + 356) = WORD2(v16);
    v17 = a1[11];
    v28 = a1[10];
    v29 = 1;
    *(_QWORD *)&v31[1] = v17;
    v32 = 1;
    *(_QWORD *)&v34[1] = a1[12];
    v35 = 1;
    *(_QWORD *)&v37[1] = a2;
    v38 = 1;
    *(double *)&v40[1] = (double)((char *)v4 - (char *)v5) / 1000000000.0;
    v41 = 1;
    sub_20FDC4194(*a1, (uint64_t)&v26);
    if (SHIBYTE(v42[2]) < 0)
    {
      operator delete(v42[0]);
      if ((v40[0] & 0x80000000) == 0)
      {
LABEL_26:
        if ((v37[0] & 0x80000000) == 0)
          goto LABEL_27;
        goto LABEL_33;
      }
    }
    else if ((v40[0] & 0x80000000) == 0)
    {
      goto LABEL_26;
    }
    operator delete(v39[0]);
    if ((v37[0] & 0x80000000) == 0)
    {
LABEL_27:
      if ((v34[0] & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
LABEL_33:
    operator delete(v36[0]);
    if ((v34[0] & 0x80000000) == 0)
    {
LABEL_28:
      if ((v31[0] & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_35;
    }
LABEL_34:
    operator delete(v33[0]);
    if ((v31[0] & 0x80000000) == 0)
    {
LABEL_29:
      v18 = v27;
      if (!v27)
        goto LABEL_40;
      goto LABEL_36;
    }
LABEL_35:
    operator delete(v30[0]);
    v18 = v27;
    if (!v27)
    {
LABEL_40:
      v7 = v44;
      goto LABEL_41;
    }
LABEL_36:
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_40;
  }
LABEL_41:
  if (v7)
  {
    v21 = (unint64_t *)&v7->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20EF70014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20EF70060((uint64_t)va);
  sub_20E86665C(v6 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF70060(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(char *)(a1 + 215) < 0)
  {
    operator delete(*(void **)(a1 + 192));
    if ((*(char *)(a1 + 175) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 135) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 175) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 152));
  if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 112));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_12:
    operator delete(*(void **)(a1 + 32));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_12;
LABEL_6:
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return a1;
LABEL_13:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EF70140(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  int v7;
  std::string __p;
  std::string __src;

  __src.__r_.__value_.__r.__words[2] = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, a1)
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 312))(a2, a1) & 1) != 0)
  {
    strcpy((char *)&__src, "map.msgpack");
    memset(&__p, 0, sizeof(__p));
    v6 = (std::string *)((char *)&__p.__r_.__value_.__r.__words[2] + 7);
    do
    {
      v7 = v6->__r_.__value_.__s.__data_[1];
      v6 = (std::string *)((char *)v6 + 1);
    }
    while (v7);
    sub_20E8A9678(&__p, &__src, v6);
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20E860C04((_BYTE *)a3, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
    }
    sub_20E8A944C(a3, (std::__fs::filesystem::path *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

void sub_20EF7025C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EF70294(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  int v7;
  std::string __p;
  std::string __src;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, a1)
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 312))(a2, a1) & 1) != 0)
  {
    strcpy((char *)&__src, "map_update.msgpack");
    memset(&__p, 0, sizeof(__p));
    v6 = (std::string *)((char *)&__p.__r_.__value_.__r.__words[2] + 7);
    do
    {
      v7 = v6->__r_.__value_.__s.__data_[1];
      v6 = (std::string *)((char *)v6 + 1);
    }
    while (v7);
    sub_20E8A9678(&__p, &__src, v6);
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20E860C04((_BYTE *)a3, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
    }
    sub_20E8A944C(a3, (std::__fs::filesystem::path *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

void sub_20EF703B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EF703EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  int v7;
  std::string __p;
  std::string __src;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, a1)
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 312))(a2, a1) & 1) != 0)
  {
    strcpy((char *)&__src, "ml_descriptors.msgpack");
    memset(&__p, 0, sizeof(__p));
    v6 = (std::string *)((char *)&__p.__r_.__value_.__r.__words[2] + 7);
    do
    {
      v7 = v6->__r_.__value_.__s.__data_[1];
      v6 = (std::string *)((char *)v6 + 1);
    }
    while (v7);
    sub_20E8A9678(&__p, &__src, v6);
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20E860C04((_BYTE *)a3, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
    }
    sub_20E8A944C(a3, (std::__fs::filesystem::path *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

void sub_20EF70508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EF70540(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  int v7;
  std::string __p;
  std::string __src;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, a1)
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 312))(a2, a1) & 1) != 0)
  {
    strcpy((char *)&__src, "ml_semantics.msgpack");
    memset(&__p, 0, sizeof(__p));
    v6 = (std::string *)((char *)&__p.__r_.__value_.__r.__words[2] + 7);
    do
    {
      v7 = v6->__r_.__value_.__s.__data_[1];
      v6 = (std::string *)((char *)v6 + 1);
    }
    while (v7);
    sub_20E8A9678(&__p, &__src, v6);
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20E860C04((_BYTE *)a3, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
    }
    sub_20E8A944C(a3, (std::__fs::filesystem::path *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

void sub_20EF7065C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EF70694(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  int v7;
  std::string __p;
  std::string __src;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, a1)
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 312))(a2, a1) & 1) != 0)
  {
    strcpy((char *)&__src, "submap_metadata.msgpack");
    memset(&__p, 0, sizeof(__p));
    v6 = (std::string *)((char *)&__p.__r_.__value_.__r.__words[2] + 7);
    do
    {
      v7 = v6->__r_.__value_.__s.__data_[1];
      v6 = (std::string *)((char *)v6 + 1);
    }
    while (v7);
    sub_20E8A9678(&__p, &__src, v6);
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20E860C04((_BYTE *)a3, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
    }
    sub_20E8A944C(a3, (std::__fs::filesystem::path *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

void sub_20EF707B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EF707E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *p_src;
  int v7;
  std::__fs::filesystem::path v8;
  void *__p[2];
  uint64_t v10;
  std::string __src;

  __src.__r_.__value_.__l.__size_ = *MEMORY[0x24BDAC8D0];
  __src.__r_.__value_.__r.__words[0] = 0x64657461636F6CLL;
  memset(&v8, 0, sizeof(v8));
  p_src = &__src;
  do
  {
    v7 = p_src->__r_.__value_.__s.__data_[1];
    p_src = (std::string *)((char *)p_src + 1);
  }
  while (v7);
  sub_20E8A9678(&v8.__pn_, &__src, p_src);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20E860C04(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v10 = *(_QWORD *)(a1 + 16);
  }
  sub_20E8A944C((uint64_t)__p, &v8);
  sub_210212AD8((uint64_t)__p, a2, a3);
  if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v8.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_10;
}

void sub_20EF70900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EF7093C(uint64_t a1@<X0>, unint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unsigned __int8 v22;
  std::string::size_type v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  void **v36;
  uint64_t v37;
  const char *v38;
  size_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  std::string::size_type *p_size;
  unint64_t v45;
  void **v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  size_t v55;
  void *v56;
  _QWORD *v57;
  size_t v58;
  size_t v59;
  _QWORD *p_dst;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  void *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::string::size_type v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  __int128 v88;
  std::string::size_type v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void **v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  const char *v114;
  const char *__src;
  void *v116[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v117;
  void *v118[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v120;
  const char *v121;
  int v122;
  const char *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__fs::filesystem::path v127;
  char *v128;
  std::__shared_weak_count *v129;
  _QWORD *__dst;
  __int128 v131;
  _QWORD v132[2];
  std::__fs::filesystem::path __p;
  __int128 v134;
  void *v135;
  size_t v136;
  unint64_t v137;
  void *v138;
  char v139;
  char v140;
  void *v141;
  char v142;
  void *v143;
  char v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  sub_20EF707E8(a1, a3, (uint64_t)v116);
  v7 = (void *)HIBYTE(v117);
  if (v117 < 0)
    v7 = v116[1];
  if (!v7)
  {
    sub_20EF73130(&v126);
    if (**(int **)(v126 + 56) > 3
      || ((v32 = *(unsigned __int8 *)(v126 + 72),
           v33 = sub_20E8C31DC(v126, "OSLogSurrogateAppender", 1, 0),
           v34 = v33,
           !v32)
        ? (v35 = v33 == 0)
        : (v35 = 0),
          v35))
    {
LABEL_184:
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      goto LABEL_185;
    }
    v118[0] = &v126;
    v118[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    v120 = 3;
    v121 = "unknown file";
    v122 = 84;
    v124 = 0;
    v125 = 0;
    v123 = "unknown function";
    if (v117 >= 0)
      v36 = v116;
    else
      v36 = (void **)v116[0];
    v37 = *(_QWORD *)v118[0];
    v38 = (const char *)(*(_QWORD *)v118[0] + 16);
    v113 = *(_QWORD *)v118[0];
    v114 = v38;
    if (*(char *)(*(_QWORD *)v118[0] + 39) < 0)
    {
      v38 = *(const char **)(v37 + 16);
      v39 = *(_QWORD *)(v37 + 24);
      v41 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v41 & 1) != 0)
        goto LABEL_74;
    }
    else
    {
      v39 = *(unsigned __int8 *)(*(_QWORD *)v118[0] + 39);
      v40 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v40 & 1) != 0)
        goto LABEL_74;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&__p);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__p);
      if ((_BYTE)v134 && SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_74:
    if (byte_254A4A4F8[23] >= 0)
      v42 = byte_254A4A4F8;
    else
      v42 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v43 = byte_254A4A4F8[23];
    else
      v43 = *(_QWORD *)&byte_254A4A4F8[8];
    __src = v38;
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v42, v38);
    p_size = &__p.__pn_.__r_.__value_.__l.__size_;
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v43 >= 0x17)
    {
      v45 = v34;
      v46 = v36;
      v47 = v32;
      v48 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v48 = v43 | 7;
      v49 = v48 + 1;
      p_size = (std::string::size_type *)operator new(v48 + 1);
      __p.__pn_.__r_.__value_.__r.__words[2] = v43;
      *(_QWORD *)&v134 = v49 | 0x8000000000000000;
      __p.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
      v32 = v47;
      v36 = v46;
      v34 = v45;
    }
    else
    {
      BYTE7(v134) = v43;
      if (!v43)
      {
LABEL_88:
        *((_BYTE *)p_size + v43) = 0;
        BYTE8(v134) = 1;
        v50 = &v135;
        if (v39 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v39 >= 0x17)
        {
          v52 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17)
            v52 = v39 | 7;
          v53 = v52 + 1;
          v50 = operator new(v52 + 1);
          v136 = v39;
          v137 = v53 | 0x8000000000000000;
          v135 = v50;
          v51 = __src;
        }
        else
        {
          HIBYTE(v137) = v39;
          v51 = __src;
          if (!v39)
          {
LABEL_96:
            *((_BYTE *)v50 + v39) = 0;
            LOBYTE(v138) = 1;
            v54 = __p.__pn_.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v137) < 0)
              operator delete(v135);
            if (BYTE8(v134) && SBYTE7(v134) < 0)
              operator delete((void *)__p.__pn_.__r_.__value_.__l.__size_);
            if (__p.__pn_.__r_.__value_.__r.__words[0])
              os_release(__p.__pn_.__r_.__value_.__l.__data_);
            if (!v34 || !*(_QWORD *)(v34 + 24))
            {
              os_log_type_enabled(v54, OS_LOG_TYPE_INFO);
              LODWORD(__p.__pn_.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
              v61 = (void *)_os_log_send_and_compose_impl();
              if (v61)
                free(v61);
              goto LABEL_175;
            }
            v55 = _os_log_pack_size();
            v56 = operator new(v55, (std::align_val_t)8uLL);
            v57 = (_QWORD *)operator new();
            *v57 = &off_24C9ABB80;
            v57[1] = 0;
            v57[2] = 0;
            v57[3] = v56;
            v127.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
            v127.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v56;
            v128 = 0;
            v129 = 0;
            v127.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v57;
            v58 = strlen((const char *)v36);
            if (v58 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v59 = v58;
            if (v58 >= 0x17)
            {
              v62 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v58 | 7) != 0x17)
                v62 = v58 | 7;
              v63 = v62 + 1;
              p_dst = operator new(v62 + 1);
              *(_QWORD *)&v131 = v59;
              *((_QWORD *)&v131 + 1) = v63 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v131) = v58;
              p_dst = &__dst;
              if (!v58)
              {
LABEL_115:
                *((_BYTE *)p_dst + v59) = 0;
                v64 = __dst;
                v132[0] = v131;
                *(_QWORD *)((char *)v132 + 7) = *(_QWORD *)((char *)&v131 + 7);
                v65 = HIBYTE(v131);
                v66 = operator new(0x38uLL);
                v66[1] = 0;
                v66[2] = 0;
                v66[3] = off_24C9ABC20;
                *v66 = &off_24C9ABBD0;
                v67 = v132[0];
                v66[4] = v64;
                v66[5] = v67;
                *(_QWORD *)((char *)v66 + 47) = *(_QWORD *)((char *)v132 + 7);
                *((_BYTE *)v66 + 55) = v65;
                v132[0] = 0;
                *(_QWORD *)((char *)v132 + 7) = 0;
                v68 = v129;
                v128 = (char *)(v66 + 3);
                v129 = (std::__shared_weak_count *)v66;
                if (v68)
                {
                  p_shared_owners = (unint64_t *)&v68->__shared_owners_;
                  do
                    v70 = __ldaxr(p_shared_owners);
                  while (__stlxr(v70 - 1, p_shared_owners));
                  if (!v70)
                  {
                    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                    std::__shared_weak_count::__release_weak(v68);
                  }
                }
                __p = v127;
                v71 = v128;
                if (v127.__pn_.__r_.__value_.__r.__words[2])
                {
                  v72 = (unint64_t *)(v127.__pn_.__r_.__value_.__r.__words[2] + 8);
                  do
                    v73 = __ldxr(v72);
                  while (__stxr(v73 + 1, v72));
                }
                v74 = v129;
                *(_QWORD *)&v134 = v71;
                *((_QWORD *)&v134 + 1) = v129;
                if (v129)
                {
                  v75 = (unint64_t *)&v129->__shared_owners_;
                  do
                    v76 = __ldxr(v75);
                  while (__stxr(v76 + 1, v75));
                  v135 = v71;
                  do
                    v77 = __ldaxr(v75);
                  while (__stlxr(v77 - 1, v75));
                  if (!v77)
                  {
                    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                    std::__shared_weak_count::__release_weak(v74);
                  }
                }
                else
                {
                  v135 = v71;
                }
                v78 = (std::__shared_weak_count *)v127.__pn_.__r_.__value_.__r.__words[2];
                if (v127.__pn_.__r_.__value_.__r.__words[2])
                {
                  v79 = (unint64_t *)(v127.__pn_.__r_.__value_.__r.__words[2] + 8);
                  do
                    v80 = __ldaxr(v79);
                  while (__stlxr(v80 - 1, v79));
                  if (!v80)
                  {
                    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                    std::__shared_weak_count::__release_weak(v78);
                  }
                }
                v81 = __p.__pn_.__r_.__value_.__r.__words[0];
                if (*((char *)v135 + 31) >= 0)
                  v82 = (char *)v135 + 8;
                else
                  v82 = (char *)*((_QWORD *)v135 + 1);
                v83 = _os_log_pack_fill();
                *(_DWORD *)v83 = 136315138;
                *(_QWORD *)(v83 + 4) = v82;
                v84 = operator new();
                v85 = *(unsigned __int8 *)(v113 + 39);
                v86 = *(const char **)(v113 + 16);
                v87 = *(_QWORD *)(v113 + 24);
                v88 = v134;
                *(_OWORD *)(v84 + 8) = *(_OWORD *)&__p.__pn_.__r_.__value_.__r.__words[1];
                if ((v85 & 0x80u) != 0)
                  v85 = v87;
                else
                  v86 = v114;
                *(_QWORD *)v84 = v81;
                *(_OWORD *)&__p.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v84 + 24) = v88;
                v134 = 0uLL;
                *(_QWORD *)(v84 + 40) = v86;
                *(_QWORD *)(v84 + 48) = v85;
                *(_BYTE *)(v84 + 56) = 1;
                __dst = 0;
                v127.__pn_.__r_.__value_.__r.__words[0] = v84;
                (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v34 + 24) + 40))(*(_QWORD *)(v34 + 24), &v127);
                v89 = v127.__pn_.__r_.__value_.__r.__words[0];
                v127.__pn_.__r_.__value_.__r.__words[0] = 0;
                if (v89)
                {
                  v90 = *(std::__shared_weak_count **)(v89 + 32);
                  if (v90)
                  {
                    v91 = (unint64_t *)&v90->__shared_owners_;
                    do
                      v92 = __ldaxr(v91);
                    while (__stlxr(v92 - 1, v91));
                    if (!v92)
                    {
                      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                      std::__shared_weak_count::__release_weak(v90);
                    }
                  }
                  v93 = *(std::__shared_weak_count **)(v89 + 16);
                  if (v93)
                  {
                    v94 = (unint64_t *)&v93->__shared_owners_;
                    do
                      v95 = __ldaxr(v94);
                    while (__stlxr(v95 - 1, v94));
                    if (!v95)
                    {
                      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                      std::__shared_weak_count::__release_weak(v93);
                    }
                  }
                  MEMORY[0x212BC6398](v89, 0x10F0C40B62ED6C6);
                  v96 = __dst;
                  __dst = 0;
                  if (v96)
                  {
                    v97 = (std::__shared_weak_count *)v96[4];
                    if (v97)
                    {
                      v98 = (unint64_t *)&v97->__shared_owners_;
                      do
                        v99 = __ldaxr(v98);
                      while (__stlxr(v99 - 1, v98));
                      if (!v99)
                      {
                        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                        std::__shared_weak_count::__release_weak(v97);
                      }
                    }
                    v100 = (std::__shared_weak_count *)v96[2];
                    if (v100)
                    {
                      v101 = (unint64_t *)&v100->__shared_owners_;
                      do
                        v102 = __ldaxr(v101);
                      while (__stlxr(v102 - 1, v101));
                      if (!v102)
                      {
                        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                        std::__shared_weak_count::__release_weak(v100);
                      }
                    }
                    MEMORY[0x212BC6398](v96, 0x10F0C40B62ED6C6);
                  }
                }
                v103 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
                if (*((_QWORD *)&v134 + 1))
                {
                  v104 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
                  do
                    v105 = __ldaxr(v104);
                  while (__stlxr(v105 - 1, v104));
                  if (!v105)
                  {
                    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                    std::__shared_weak_count::__release_weak(v103);
                  }
                }
                v106 = (std::__shared_weak_count *)__p.__pn_.__r_.__value_.__r.__words[2];
                if (__p.__pn_.__r_.__value_.__r.__words[2])
                {
                  v107 = (unint64_t *)(__p.__pn_.__r_.__value_.__r.__words[2] + 8);
                  do
                    v108 = __ldaxr(v107);
                  while (__stlxr(v108 - 1, v107));
                  if (!v108)
                  {
                    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                    std::__shared_weak_count::__release_weak(v106);
                  }
                }
LABEL_175:
                if (v32)
                {
                  v109 = v116;
                  if (v117 < 0)
                    v109 = (void **)v116[0];
                  sub_20E8C003C((uint64_t)v118, "Prune path [%s] is non-existent.", (const char *)v109);
                  sub_20E863570((uint64_t)v118);
                }
                sub_20E863570((uint64_t)v118);
                v110 = v125;
                if (v125)
                {
                  v111 = (unint64_t *)&v125->__shared_owners_;
                  do
                    v112 = __ldaxr(v111);
                  while (__stlxr(v112 - 1, v111));
                  if (!v112)
                  {
                    ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                    std::__shared_weak_count::__release_weak(v110);
                  }
                }
                goto LABEL_184;
              }
            }
            memcpy(p_dst, v36, v59);
            goto LABEL_115;
          }
        }
        memmove(v50, v51, v39);
        goto LABEL_96;
      }
    }
    memmove(p_size, v42, v43);
    goto LABEL_88;
  }
  v8 = a2[1] - *a2;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  sub_20E8B3B5C((char **)a4, v8);
  v9 = *a2;
  v10 = a2[1];
  if (v9 != v10)
  {
    while (1)
    {
      sub_20E9F6CBC(v9);
      __p = v127;
      memset(&v127, 0, sizeof(v127));
      if (SHIBYTE(v117) < 0)
      {
        sub_20E860C04(v118, v116[0], (unint64_t)v116[1]);
      }
      else
      {
        *(_OWORD *)v118 = *(_OWORD *)v116;
        rep = v117;
      }
      sub_20E8A944C((uint64_t)v118, &__p);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v127.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_13;
      }
      else if ((SHIBYTE(v127.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_13;
      }
      operator delete(v127.__pn_.__r_.__value_.__l.__data_);
LABEL_13:
      if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a3 + 176))(a3, v118))
      {
        v16 = *(_QWORD *)(a4 + 8);
        v17 = *(_QWORD *)(a4 + 16);
        if (v16 == v17 << 6)
        {
          if ((uint64_t)(v16 + 1) < 0)
            sub_20E867F44();
          if (v16 > 0x3FFFFFFFFFFFFFFELL)
          {
            v20 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v18 = v17 << 7;
            v19 = (v16 & 0xFFFFFFFFFFFFFFC0) + 64;
            if (v18 <= v19)
              v20 = v19;
            else
              v20 = v18;
          }
          sub_20E8B3B5C((char **)a4, v20);
          v16 = *(_QWORD *)(a4 + 8);
        }
        *(_QWORD *)(a4 + 8) = v16 + 1;
        *(_QWORD *)(*(_QWORD *)a4 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v16);
        if (SHIBYTE(rep) < 0)
          goto LABEL_56;
        goto LABEL_7;
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 240))(a3, v118);
      v11 = *(_QWORD *)(a4 + 8);
      v12 = *(_QWORD *)(a4 + 16);
      if (v11 == v12 << 6)
      {
        if ((uint64_t)(v11 + 1) < 0)
          sub_20E867F44();
        if (v11 > 0x3FFFFFFFFFFFFFFELL)
        {
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v13 = v12 << 7;
          v14 = (v11 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v13 <= v14)
            v15 = v14;
          else
            v15 = v13;
        }
        sub_20E8B3B5C((char **)a4, v15);
        v11 = *(_QWORD *)(a4 + 8);
      }
      *(_QWORD *)(a4 + 8) = v11 + 1;
      *(_QWORD *)(*(_QWORD *)a4 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v21 = sub_210219C18();
      v22 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_54;
      v24 = *v9;
      LODWORD(__p.__pn_.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 4) = v24;
      v25 = (char *)_os_log_send_and_compose_impl();
      v26 = strlen(v25);
      v127.__pn_.__r_.__value_.__r.__words[0] = 0;
      pthread_threadid_np(0, (__uint64_t *)&v127);
      v27 = v127.__pn_.__r_.__value_.__r.__words[0];
      timespec_get((timespec *)&v127, 1);
      sub_210219E20(&__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v21 + 1), (__int128 *)(v21 + 5), "MappingIOPrune:ID:%llu", 0x16uLL, v25, v26, v27, &v127);
      std::mutex::lock(&stru_254A5A410);
      v28 = qword_254A5A458;
      v29 = unk_254A5A460;
      while (v28 != v29)
      {
        v30 = *(_QWORD *)(v28 + 32);
        if (!v30)
          sub_20E86D37C();
        (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)v30 + 48))(v30, &__p);
        v28 += 40;
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v144 < 0)
      {
        operator delete(v143);
        if ((v142 & 0x80000000) == 0)
        {
LABEL_42:
          if (v140)
            goto LABEL_46;
          goto LABEL_48;
        }
      }
      else if ((v142 & 0x80000000) == 0)
      {
        goto LABEL_42;
      }
      operator delete(v141);
      if (v140)
      {
LABEL_46:
        if (v139 < 0)
          operator delete(v138);
      }
LABEL_48:
      if ((_BYTE)v137 && SHIBYTE(v136) < 0)
        operator delete(*((void **)&v134 + 1));
      if (SBYTE7(v134) < 0)
      {
        operator delete((void *)__p.__pn_.__r_.__value_.__l.__size_);
        if (!v25)
          goto LABEL_54;
LABEL_53:
        free(v25);
        goto LABEL_54;
      }
      if (v25)
        goto LABEL_53;
LABEL_54:
      if (os_signpost_enabled((os_log_t)*v21))
      {
        v31 = *v9;
        LODWORD(__p.__pn_.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)__p.__pn_.__r_.__value_.__r.__words + 4) = v31;
        _os_signpost_emit_unreliably_with_name_impl();
        if (SHIBYTE(rep) < 0)
          goto LABEL_56;
LABEL_7:
        if (++v9 == v10)
          break;
      }
      else
      {
        if ((SHIBYTE(rep) & 0x80000000) == 0)
          goto LABEL_7;
LABEL_56:
        operator delete(v118[0]);
        if (++v9 == v10)
          break;
      }
    }
  }
LABEL_185:
  if (SHIBYTE(v117) < 0)
    operator delete(v116[0]);
}

void sub_20EF716C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,void *a51,int a52,__int16 a53,char a54,char a55,char a56,int a57,__int16 a58,char a59,char a60)
{
  if (a56 && a55 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a24);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sub_20EF718D4(uint64_t a1, unint64_t **a2, uint64_t a3)
{
  std::string::size_type size;
  std::__fs::filesystem::path::__string_view v6;
  std::string *p_dst;
  int v8;
  unint64_t v9;
  unint64_t v10;
  std::__fs::filesystem::path *v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  unsigned __int8 v16;
  std::basic_string_view<_CharT, _Traits>::size_type v17;
  std::basic_string_view<_CharT, _Traits>::size_type v18;
  __int128 v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unint64_t *v23;
  unint64_t *v24;
  unsigned __int8 v25;
  const char *v26;
  size_t v27;
  std::string::size_type *p_size;
  unint64_t v29;
  uint64_t v30;
  std::__fs::filesystem::path *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  size_t v39;
  void *v40;
  _QWORD *v41;
  size_t v42;
  std::string::size_type v43;
  std::__fs::filesystem::path *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  std::string::size_type v48;
  char v49;
  _QWORD *v50;
  std::string::pointer data;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::string::size_type v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  std::string::size_type v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::string::size_type v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__fs::filesystem::path *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  const char *v95;
  const char *__src;
  std::__fs::filesystem::path v97;
  std::__fs::filesystem::path v98;
  int v99;
  const char *v100;
  int v101;
  const char *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__fs::filesystem::path v106;
  char *v107;
  std::__shared_weak_count *v108;
  std::__fs::filesystem::path __p[2];
  std::string __dst;
  __int128 v111;
  void *v112[2];
  unint64_t v113;
  char v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  sub_20EF707E8(a1, a3, (uint64_t)&v97);
  size = HIBYTE(v97.__pn_.__r_.__value_.__r.__words[2]);
  if ((v97.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v97.__pn_.__r_.__value_.__l.__size_;
  if (size)
  {
    v6 = std::__fs::filesystem::path::__parent_path(&v97);
    if (v6.__size_ > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v6.__size_ >= 0x17)
    {
      v17 = (v6.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6.__size_ | 7) != 0x17)
        v17 = v6.__size_ | 7;
      v18 = v17 + 1;
      p_dst = (std::string *)operator new(v17 + 1);
      __dst.__r_.__value_.__l.__size_ = v6.__size_;
      __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6.__size_;
      p_dst = &__dst;
      if (!v6.__size_)
      {
LABEL_23:
        p_dst->__r_.__value_.__s.__data_[v6.__size_] = 0;
        v19 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        LODWORD(v106.__pn_.__r_.__value_.__l.__data_) = __dst.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v106.__pn_.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2]
                                                                                  + 3);
        v20 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        memset(&__dst, 0, sizeof(__dst));
        sub_20E8A9678(&__dst, (std::string *)"debug", (std::string *)"");
        if (v20 < 0)
        {
          sub_20E860C04(&v98, (void *)v19, *((unint64_t *)&v19 + 1));
        }
        else
        {
          *(_OWORD *)&v98.__pn_.__r_.__value_.__l.__data_ = v19;
          LODWORD(v98.__pn_.__r_.__value_.__r.__words[2]) = v106.__pn_.__r_.__value_.__l.__data_;
          *(_DWORD *)((char *)&v98.__pn_.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v106.__pn_.__r_.__value_.__r.__words
                                                                                       + 3);
          *((_BYTE *)&v98.__pn_.__r_.__value_.__s + 23) = v20;
        }
        sub_20E8A944C((uint64_t)&v98, (std::__fs::filesystem::path *)&__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          if ((v20 & 0x80000000) == 0)
          {
LABEL_28:
            v21 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
            if ((v21 & 1) == 0)
            {
LABEL_173:
              if (__cxa_guard_acquire(&qword_254A6DE08))
              {
                __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE08);
              }
            }
LABEL_32:
            if (!((BOOL (*)(int, std::__fs::filesystem::path *))off_254A5A4B8[22])((int)&off_254A5A4B8, &v98))(*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a3 + 112))(a3, &v98);
            v24 = *a2;
            v23 = a2[1];
            while (1)
            {
              if (v24 == v23)
              {
                if (SHIBYTE(v98.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v98.__pn_.__r_.__value_.__l.__data_);
                goto LABEL_59;
              }
              sub_20E9F6CBC(v24);
              v106 = __p[0];
              memset(__p, 0, 24);
              if (SHIBYTE(v97.__pn_.__r_.__value_.__r.__words[2]) < 0)
                sub_20E860C04(&__dst, v97.__pn_.__r_.__value_.__l.__data_, v97.__pn_.__r_.__value_.__l.__size_);
              else
                __dst = v97.__pn_;
              sub_20E8A944C((uint64_t)&__dst, &v106);
              if (SHIBYTE(v106.__pn_.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v106.__pn_.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_45;
              }
              else if ((SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_45;
              }
              operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
LABEL_45:
              if (!(*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)a3 + 176))(a3, &__dst))
                goto LABEL_36;
              sub_20E9F6CBC(v24);
              __p[0] = __p[1];
              memset(&__p[1], 0, sizeof(std::__fs::filesystem::path));
              if (SHIBYTE(v98.__pn_.__r_.__value_.__r.__words[2]) < 0)
                sub_20E860C04(&v106, v98.__pn_.__r_.__value_.__l.__data_, v98.__pn_.__r_.__value_.__l.__size_);
              else
                v106 = v98;
              sub_20E8A944C((uint64_t)&v106, __p);
              (*(void (**)(uint64_t, std::string *, std::__fs::filesystem::path *))(*(_QWORD *)a3 + 72))(a3, &__dst, &v106);
              if (SHIBYTE(v106.__pn_.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v106.__pn_.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_55:
                  if ((SHIBYTE(__p[1].__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_36;
                  goto LABEL_56;
                }
              }
              else if ((SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_55;
              }
              operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__p[1].__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_36;
LABEL_56:
              operator delete(__p[1].__pn_.__r_.__value_.__l.__data_);
LABEL_36:
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              ++v24;
            }
          }
        }
        else if ((v20 & 0x80000000) == 0)
        {
          goto LABEL_28;
        }
        operator delete((void *)v19);
        v22 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
        if ((v22 & 1) == 0)
          goto LABEL_173;
        goto LABEL_32;
      }
    }
    memmove(p_dst, v6.__data_, v6.__size_);
    goto LABEL_23;
  }
  sub_20EF73130(&v105);
  if (**(int **)(v105 + 56) > 3)
    goto LABEL_59;
  v8 = *(unsigned __int8 *)(v105 + 72);
  v9 = sub_20E8C31DC(v105, "OSLogSurrogateAppender", 1, 0);
  v10 = v9;
  if (!v8 && v9 == 0)
    goto LABEL_59;
  v98.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
  v98.__pn_.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v98.__pn_.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
  v99 = 3;
  v100 = "unknown file";
  v101 = 104;
  v103 = 0;
  v104 = 0;
  v102 = "unknown function";
  if ((v97.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v97;
  else
    v12 = (std::__fs::filesystem::path *)v97.__pn_.__r_.__value_.__r.__words[0];
  v13 = *(_QWORD *)v98.__pn_.__r_.__value_.__l.__data_;
  v14 = (const char *)(*(_QWORD *)v98.__pn_.__r_.__value_.__l.__data_ + 16);
  v95 = v14;
  if (*(char *)(*(_QWORD *)v98.__pn_.__r_.__value_.__l.__data_ + 39) < 0)
  {
    v14 = *(const char **)(v13 + 16);
    v15 = *(_QWORD *)(v13 + 24);
    v25 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v25 & 1) != 0)
      goto LABEL_63;
  }
  else
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)v98.__pn_.__r_.__value_.__l.__data_ + 39);
    v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v16 & 1) != 0)
      goto LABEL_63;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&__dst);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__dst);
    if ((_BYTE)v111 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_63:
  if (byte_254A4A4F8[23] >= 0)
    v26 = byte_254A4A4F8;
  else
    v26 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v27 = byte_254A4A4F8[23];
  else
    v27 = *(_QWORD *)&byte_254A4A4F8[8];
  __src = v14;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v26, v14);
  p_size = &__dst.__r_.__value_.__l.__size_;
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v27 >= 0x17)
  {
    v29 = v10;
    v30 = v13;
    v31 = v12;
    v32 = v8;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    p_size = (std::string::size_type *)operator new(v33 + 1);
    __dst.__r_.__value_.__r.__words[2] = v27;
    *(_QWORD *)&v111 = v34 | 0x8000000000000000;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    v8 = v32;
    v12 = v31;
    v13 = v30;
    v10 = v29;
    goto LABEL_76;
  }
  BYTE7(v111) = v27;
  if (v27)
LABEL_76:
    memmove(p_size, v26, v27);
  *((_BYTE *)p_size + v27) = 0;
  BYTE8(v111) = 1;
  v35 = v112;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v36 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v36 = v15 | 7;
    v37 = v36 + 1;
    v35 = (void **)operator new(v36 + 1);
    v112[1] = (void *)v15;
    v113 = v37 | 0x8000000000000000;
    v112[0] = v35;
    goto LABEL_84;
  }
  HIBYTE(v113) = v15;
  if (v15)
LABEL_84:
    memmove(v35, __src, v15);
  *((_BYTE *)v35 + v15) = 0;
  v114 = 1;
  v38 = __dst.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v113) < 0)
    operator delete(v112[0]);
  if (BYTE8(v111) && SBYTE7(v111) < 0)
    operator delete((void *)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    os_release(__dst.__r_.__value_.__l.__data_);
  if (!v10 || !*(_QWORD *)(v10 + 24))
  {
    os_log_type_enabled(v38, OS_LOG_TYPE_INFO);
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
    v45 = (void *)_os_log_send_and_compose_impl();
    if (v45)
      free(v45);
    goto LABEL_163;
  }
  v39 = _os_log_pack_size();
  v40 = operator new(v39, (std::align_val_t)8uLL);
  v41 = (_QWORD *)operator new();
  *v41 = &off_24C9ABB80;
  v41[1] = 0;
  v41[2] = 0;
  v41[3] = v40;
  v106.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
  v106.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v40;
  v107 = 0;
  v108 = 0;
  v106.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v41;
  v42 = strlen((const char *)v12);
  if (v42 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v43 = v42;
  if (v42 >= 0x17)
  {
    v46 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17)
      v46 = v42 | 7;
    v47 = v46 + 1;
    v44 = (std::__fs::filesystem::path *)operator new(v46 + 1);
    __p[0].__pn_.__r_.__value_.__l.__size_ = v43;
    __p[0].__pn_.__r_.__value_.__r.__words[2] = v47 | 0x8000000000000000;
    __p[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
    goto LABEL_103;
  }
  *((_BYTE *)&__p[0].__pn_.__r_.__value_.__s + 23) = v42;
  v44 = __p;
  if (v42)
LABEL_103:
    memcpy(v44, v12, v43);
  v44->__pn_.__r_.__value_.__s.__data_[v43] = 0;
  __p[1].__pn_.__r_.__value_.__r.__words[0] = __p[0].__pn_.__r_.__value_.__l.__size_;
  v48 = __p[0].__pn_.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)__p[1].__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1] + 7);
  v49 = HIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]);
  v50 = operator new(0x38uLL);
  v50[1] = 0;
  v50[2] = 0;
  v50[3] = off_24C9ABC20;
  *v50 = &off_24C9ABBD0;
  data = __p[1].__pn_.__r_.__value_.__l.__data_;
  v50[4] = v48;
  v50[5] = data;
  *(_QWORD *)((char *)v50 + 47) = *(std::string::size_type *)((char *)__p[1].__pn_.__r_.__value_.__r.__words + 7);
  *((_BYTE *)v50 + 55) = v49;
  __p[1].__pn_.__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)__p[1].__pn_.__r_.__value_.__r.__words + 7) = 0;
  v52 = v108;
  v107 = (char *)(v50 + 3);
  v108 = (std::__shared_weak_count *)v50;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  __dst = v106.__pn_;
  v55 = v107;
  if (v106.__pn_.__r_.__value_.__r.__words[2])
  {
    v56 = (unint64_t *)(v106.__pn_.__r_.__value_.__r.__words[2] + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v58 = v108;
  *(_QWORD *)&v111 = v55;
  *((_QWORD *)&v111 + 1) = v108;
  if (v108)
  {
    v59 = (unint64_t *)&v108->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    v112[0] = v55;
    do
      v61 = __ldaxr(v59);
    while (__stlxr(v61 - 1, v59));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  else
  {
    v112[0] = v55;
  }
  v62 = (std::__shared_weak_count *)v106.__pn_.__r_.__value_.__r.__words[2];
  if (v106.__pn_.__r_.__value_.__r.__words[2])
  {
    v63 = (unint64_t *)(v106.__pn_.__r_.__value_.__r.__words[2] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = __dst.__r_.__value_.__r.__words[0];
  if (*((char *)v112[0] + 31) >= 0)
    v66 = (char *)v112[0] + 8;
  else
    v66 = (char *)*((_QWORD *)v112[0] + 1);
  v67 = _os_log_pack_fill();
  *(_DWORD *)v67 = 136315138;
  *(_QWORD *)(v67 + 4) = v66;
  v68 = operator new();
  v69 = *(unsigned __int8 *)(v13 + 39);
  v70 = v95;
  if ((v69 & 0x80u) != 0)
  {
    v70 = *(const char **)(v13 + 16);
    v69 = *(_QWORD *)(v13 + 24);
  }
  *(_QWORD *)v68 = v65;
  *(_OWORD *)(v68 + 8) = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
  *(_OWORD *)(v68 + 24) = v111;
  v111 = 0uLL;
  *(_QWORD *)(v68 + 40) = v70;
  *(_QWORD *)(v68 + 48) = v69;
  *(_BYTE *)(v68 + 56) = 1;
  __p[0].__pn_.__r_.__value_.__r.__words[0] = 0;
  v106.__pn_.__r_.__value_.__r.__words[0] = v68;
  (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v10 + 24) + 40))(*(_QWORD *)(v10 + 24), &v106);
  v71 = v106.__pn_.__r_.__value_.__r.__words[0];
  v106.__pn_.__r_.__value_.__r.__words[0] = 0;
  if (v71)
  {
    v72 = *(std::__shared_weak_count **)(v71 + 32);
    if (v72)
    {
      v73 = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = *(std::__shared_weak_count **)(v71 + 16);
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    MEMORY[0x212BC6398](v71, 0x10F0C40B62ED6C6);
    v78 = __p[0].__pn_.__r_.__value_.__r.__words[0];
    __p[0].__pn_.__r_.__value_.__r.__words[0] = 0;
    if (v78)
    {
      v79 = *(std::__shared_weak_count **)(v78 + 32);
      if (v79)
      {
        v80 = (unint64_t *)&v79->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
      v82 = *(std::__shared_weak_count **)(v78 + 16);
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      MEMORY[0x212BC6398](v78, 0x10F0C40B62ED6C6);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
  if (*((_QWORD *)&v111 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
  if (__dst.__r_.__value_.__r.__words[2])
  {
    v89 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
LABEL_163:
  if (v8)
  {
    v91 = &v97;
    if ((v97.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v91 = (std::__fs::filesystem::path *)v97.__pn_.__r_.__value_.__r.__words[0];
    sub_20E8C003C((uint64_t)&v98, "Copy path [%s] is non-existent.", (const char *)v91);
    sub_20E863570((uint64_t)&v98);
  }
  sub_20E863570((uint64_t)&v98);
  v92 = v104;
  if (v104)
  {
    v93 = (unint64_t *)&v104->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
LABEL_59:
  if (SHIBYTE(v97.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__pn_.__r_.__value_.__l.__data_);
}

void sub_20EF72518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (*(_BYTE *)(v47 - 152) && *(char *)(v47 - 153) < 0)
    operator delete(*(void **)(v47 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a20);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20EF72794(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  std::string *v6;
  std::string::size_type size;
  const char *v8;
  std::string v9;
  _DWORD v10[6];
  int v11;
  char v12;
  char *v13;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v8 = (const char *)a1;
    v11 = 0;
LABEL_4:
    sub_20E9967C4(v10, &v8);
    goto LABEL_5;
  }
  v8 = *(const char **)a1;
  v11 = 0;
  if (v8)
    goto LABEL_4;
  sub_20E9737A0(v10, "nullptr");
LABEL_5:
  if (v11 == -1)
    sub_20E877AB8();
  v13 = &v12;
  ((void (*)(std::string *__return_ptr, char **, _DWORD *))off_24C9F1FF8[v11])(&v9, &v13, v10);
  if (v11 != -1)
    ((void (*)(char **, _DWORD *))off_24C9F1FE0[v11])(&v13, v10);
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v5 = strlen(a2);
  v6 = std::string::append(&v9, a2, v5);
  size = v6->__r_.__value_.__l.__size_;
  *(_QWORD *)a3 = v6->__r_.__value_.__r.__words[0];
  *(_QWORD *)(a3 + 8) = size;
  *(_QWORD *)(a3 + 15) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
  LOBYTE(size) = *((_BYTE *)&v6->__r_.__value_.__s + 23);
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  *(_BYTE *)(a3 + 23) = size;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_20EF728C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EF728E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF728F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF7290C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  std::__fs::filesystem::path *v10;
  void **v11;
  void **v12;
  void *v13;
  std::runtime_error *v15;
  std::runtime_error *exception;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v18;
  void *v19;
  void **v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__fs::filesystem::path __dst;
  std::string v24;
  std::string v25;
  std::string v26;

  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, a1)
    || ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 312))(a2, a1) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    sub_20E8610C0(&v26, "Bad commit path.");
    std::runtime_error::runtime_error(exception, &v26);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
    LODWORD(exception[1].__vftable) = 1;
    __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  memset(&v26, 0, sizeof(v26));
  sub_20E8A9678(&v26, (std::string *)"ready_to_commit", (std::string *)"");
  if (*(char *)(a1 + 23) < 0)
    sub_20E860C04(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __dst = *(std::__fs::filesystem::path *)a1;
  sub_20E8A944C((uint64_t)&__dst, (std::__fs::filesystem::path *)&v26);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  sub_210224144(&__dst, 0x30u, a2, &v21);
  v4 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_210224314(a1, 1u, "*.tmp", 5uLL, a2, (uint64_t *)&v19);
  v7 = (char *)v19;
  v8 = (char *)v20;
  if (v19 != v20)
  {
    while (1)
    {
      if (v7[23] < 0)
      {
        sub_20E860C04(&v18, *(void **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v9 = *(_OWORD *)v7;
        v18.__pn_.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
        *(_OWORD *)&v18.__pn_.__r_.__value_.__l.__data_ = v9;
      }
      memset(&__p, 0, sizeof(__p));
      v10 = std::__fs::filesystem::path::replace_extension(&v18, &__p);
      memset(&v25, 0, sizeof(v25));
      sub_20E8A9678(&v25, (std::string *)".tmp", (std::string *)"");
      sub_20EF72794((uint64_t)v10, (const char *)&v25, (uint64_t)&v26);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (((*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a2 + 176))(a2, &v26) & 1) == 0)
      {
        v15 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
        sub_20E8610C0(&v25, "Missing temporary files in commit.");
        std::runtime_error::runtime_error(v15, &v25);
        v15->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
        LODWORD(v15[1].__vftable) = 1;
        __cxa_throw(v15, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      if (!(*(unsigned int (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a2 + 176))(a2, v10))
        goto LABEL_26;
      memset(&v24, 0, sizeof(v24));
      sub_20E8A9678(&v24, (std::string *)".bck", (std::string *)"");
      sub_20EF72794((uint64_t)v10, (const char *)&v24, (uint64_t)&v25);
      (*(void (**)(uint64_t, std::__fs::filesystem::path *, std::string *))(*(_QWORD *)a2 + 248))(a2, v10, &v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v25.__r_.__value_.__l.__data_);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
LABEL_34:
          operator delete(v24.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_34;
      }
LABEL_26:
      (*(void (**)(uint64_t, std::string *, std::__fs::filesystem::path *))(*(_QWORD *)a2 + 248))(a2, &v26, v10);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v26.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_15;
LABEL_30:
        if ((SHIBYTE(v18.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_16;
LABEL_31:
        operator delete(v18.__pn_.__r_.__value_.__l.__data_);
        v7 += 32;
        if (v7 == v8)
          break;
      }
      else
      {
        if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_30;
LABEL_15:
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(v18.__pn_.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_31;
LABEL_16:
        v7 += 32;
        if (v7 == v8)
          break;
      }
    }
  }
  if (((*(uint64_t (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a2 + 176))(a2, &__dst) & 1) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingFilesystem.cpp", 163, (uint64_t)"fs::exists(commit_p, f)", 23, (uint64_t)&unk_210269E9D, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)a2 + 232))(a2, &__dst);
  v11 = (void **)v19;
  if (v19)
  {
    v12 = v20;
    v13 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v12 - 9) < 0)
          operator delete(*(v12 - 4));
        v12 -= 4;
      }
      while (v12 != v11);
      v13 = v19;
    }
    v20 = v11;
    operator delete(v13);
  }
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  return 1;
}

void sub_20EF72D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 65) < 0)
    operator delete(*(void **)(v40 - 88));
  _Unwind_Resume(exception_object);
}

void sub_20EF72ED4(uint64_t a1@<X0>, _QWORD *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  std::string __p;
  std::string v20;
  std::string v21;

  v4 = *(unsigned int *)(a1 + 16);
  v5 = (int8x8_t)a2[1];
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = *(unsigned int *)(a1 + 16);
      if (*(_QWORD *)&v5 <= v4)
        v7 = v4 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (v5.i32[0] - 1) & v4;
    }
    v8 = *(uint64_t ***)(*a2 + 8 * v7);
    if (v8)
    {
      v9 = *v8;
      if (v9)
      {
        if (v6.u32[0] < 2uLL)
        {
          v10 = *(_QWORD *)&v5 - 1;
          while (1)
          {
            v12 = v9[1];
            if (v12 == v4)
            {
              if (*((_DWORD *)v9 + 4) == (_DWORD)v4)
                goto LABEL_22;
            }
            else if ((v12 & v10) != v7)
            {
              goto LABEL_23;
            }
            v9 = (uint64_t *)*v9;
            if (!v9)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v9[1];
          if (v11 == v4)
          {
            if (*((_DWORD *)v9 + 4) == (_DWORD)v4)
            {
LABEL_22:
              LODWORD(v4) = *((_DWORD *)v9 + 5);
              break;
            }
          }
          else
          {
            if (v11 >= *(_QWORD *)&v5)
              v11 %= *(_QWORD *)&v5;
            if (v11 != v7)
              break;
          }
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_23:
  v13 = *(_DWORD *)(a1 + 8);
  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = v13;
  sub_210216370((uint64_t)&__p);
  v14 = std::string::append(&v20, "_", 1uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v21, (const std::string::value_type *)p_p, size);
  *a3 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(v20.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_35;
}

void sub_20EF730BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_20EF73130(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60928);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60928))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.mapping_io");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A60920);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A60928);
  }
  *a1 = qword_254A60920;
}

void sub_20EF731CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60928);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60928);
  _Unwind_Resume(a1);
}

void sub_20EF73228(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EF7324C(uint64_t a1, __int128 *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, int a8)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  _OWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  std::chrono::steady_clock::time_point v36;
  std::__fs::filesystem::path::__string_view v37;
  std::__fs::filesystem::path *p_dst;
  int v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  const char *v43;
  std::basic_string_view<_CharT, _Traits>::size_type v44;
  std::basic_string_view<_CharT, _Traits>::size_type v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _BYTE *v54;
  __int128 v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *size;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  BOOL v67;
  uint64_t v68;
  size_t v69;
  const char *v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  void *v75;
  void **v76;
  std::string *p_p;
  std::string::size_type v78;
  char v79;
  size_t v80;
  void *v81;
  unint64_t v82;
  void **v83;
  unsigned __int8 v84;
  const char *v85;
  size_t v86;
  std::string::size_type *v87;
  unint64_t v88;
  const char *v89;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  size_t v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  std::string::size_type v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  int v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  const char *v134;
  size_t v135;
  unsigned __int8 v136;
  const char *v137;
  size_t v138;
  _BYTE *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  NSObject *v146;
  size_t v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  size_t v150;
  size_t v151;
  uint64_t *v152;
  void *v153;
  void *v154;
  void **v155;
  std::string *v156;
  std::string::size_type v157;
  char v158;
  size_t v159;
  void *v160;
  unint64_t v161;
  void **v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  _QWORD *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *p_shared_owners;
  unint64_t v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  const char *v184;
  size_t v185;
  unsigned __int8 v186;
  const char *v187;
  size_t v188;
  _BYTE *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  NSObject *v196;
  size_t v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  size_t v200;
  size_t v201;
  uint64_t *v202;
  void *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  const char *v212;
  void *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  const char *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::string::size_type v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  unsigned __int8 v241;
  size_t v242;
  const char *v243;
  std::string::size_type *p_size;
  unint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  NSObject *v252;
  size_t v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  std::string::size_type v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  std::string::size_type v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  void *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  void *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char v291;
  _QWORD *v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  const char *v312;
  void *v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  uint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  const char *v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::string::size_type v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341;
  double v342;
  unsigned __int8 v343;
  unint64_t v344;
  double v345;
  char *v346;
  size_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t i;
  uint64_t v351;
  uint64_t v353;
  const char *v354;
  const char *v355;
  uint64_t v356;
  unint64_t v357;
  char *v358;
  unint64_t v359;
  uint64_t v360;
  int __s;
  char *__sa;
  char *__sb;
  char *__sc;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v365;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v367;
  uint64_t *v368;
  uint64_t *v369;
  std::string __p;
  int v371;
  const char *v372;
  int v373;
  const char *v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  void *v377;
  size_t v378;
  int64_t v379;
  std::__fs::filesystem::path v380;
  __int128 v381;
  void *v382;
  const char *v383;
  unint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t v386;
  void *v387;
  char v388;
  unint64_t v389;
  int v390;
  _BYTE v391[152];
  uint64_t v392;
  std::error_code v393;
  void *v394[2];
  std::__shared_weak_count *v395;
  char *v396;
  std::__shared_weak_count *v397;
  uint64_t *v398;
  __int128 v399;
  __int128 v400;
  std::__fs::filesystem::path __dst;
  __int128 v402;
  void *v403;
  size_t v404;
  unint64_t v405;
  void *v406;
  char v407;
  char v408;
  void *v409;
  char v410;
  void *v411;
  uint64_t v412;
  char v413;
  uint64_t v414;
  _BYTE v415[24];
  __int128 v416;
  uint64_t v417;
  const char *v418;
  unint64_t v419;
  std::__shared_weak_count *v420;
  uint64_t v421[5];

  v421[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C9F2060;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v16 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v16;
  }
  v17 = *(__int128 *)((char *)a2 + 24);
  v18 = *(__int128 *)((char *)a2 + 40);
  v19 = *(__int128 *)((char *)a2 + 56);
  *(_OWORD *)(a1 + 73) = *(__int128 *)((char *)a2 + 65);
  *(_OWORD *)(a1 + 48) = v18;
  *(_OWORD *)(a1 + 64) = v19;
  *(_OWORD *)(a1 + 32) = v17;
  v20 = (_OWORD *)(a1 + 96);
  if (*((char *)a2 + 111) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 96), *((void **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v21 = *(__int128 *)((char *)a2 + 88);
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 13);
    *v20 = v21;
  }
  v22 = a2[7];
  v23 = a2[8];
  v24 = a2[9];
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 152) = v24;
  *(_OWORD *)(a1 + 136) = v23;
  *(_OWORD *)(a1 + 120) = v22;
  v25 = *a4;
  v26 = *((_DWORD *)a4 + 2);
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 184) = v26;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = v25;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 1;
  *(_BYTE *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(_BYTE *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  v27 = operator new(0x30uLL);
  *v27 = 0u;
  v27[1] = 0u;
  v27[2] = 0u;
  *(_QWORD *)(a1 + 344) = v27;
  *(_QWORD *)(a1 + 352) = v27 + 3;
  *(_QWORD *)(a1 + 360) = v27 + 3;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(std::chrono::steady_clock::time_point *)(a1 + 392) = std::chrono::steady_clock::now();
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = *a5;
  v28 = a5[1];
  *(_QWORD *)(a1 + 416) = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  *(_QWORD *)(a1 + 424) = *a6;
  v31 = a6[1];
  *(_QWORD *)(a1 + 432) = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  *(_QWORD *)(a1 + 440) = a7;
  *(_BYTE *)(a1 + 448) = 0;
  v34 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 456) = v34;
  if (*(char *)(a1 + 31) < 0)
  {
    v35 = (uint64_t *)(a1 + 408);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_18;
  }
  else
  {
    v35 = (uint64_t *)(a1 + 408);
    if (*(_BYTE *)(a1 + 31))
      goto LABEL_18;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 105, (uint64_t)"!config_.map_data_dir.empty()", 29, (uint64_t)"Mapping directory path cannot be empty", 38, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_568;
  }
LABEL_18:
  if (*(double *)(a1 + 40) <= 5.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 107, (uint64_t)"config_.save_interval > kMinSaveInterval", 40, (uint64_t)"Save interval must be greater than kMinSaveInterval.", 52, (void (*)(void **))sub_21023DDB0))
  {
LABEL_568:
    abort();
  }
  v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (!*(_BYTE *)(a1 + 88))
    goto LABEL_537;
  if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)(a1 + 96)).__size_)
  {
    v368 = v35;
    v393.__val_ = 0;
    v393.__cat_ = std::system_category();
    v37 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)(a1 + 96));
    if (v37.__size_ > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v37.__size_ >= 0x17)
    {
      v44 = (v37.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v37.__size_ | 7) != 0x17)
        v44 = v37.__size_ | 7;
      v45 = v44 + 1;
      p_dst = (std::__fs::filesystem::path *)operator new(v44 + 1);
      __dst.__pn_.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
      __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      __dst.__pn_.__r_.__value_.__l.__size_ = v37.__size_;
    }
    else
    {
      *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v37.__size_;
      p_dst = &__dst;
      if (!v37.__size_)
      {
LABEL_35:
        p_dst->__pn_.__r_.__value_.__s.__data_[v37.__size_] = 0;
        v380 = __dst;
        std::__fs::filesystem::__create_directories(&v380, &v393);
        if (SHIBYTE(v380.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v380.__pn_.__r_.__value_.__l.__data_);
        sub_20EF88698(&__dst);
        if (v412)
        {
          v46 = *(_QWORD *)(a1 + 120);
          v47 = *(_DWORD *)(a1 + 128);
          LODWORD(v394[0]) = a8;
          LODWORD(v398) = v47;
          *((_BYTE *)&v380.__pn_.__r_.__value_.__s + 23) = 19;
          strcpy((char *)&v380, "cv3d.vio.mapping_io");
          LOBYTE(v47) = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
          if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
          {
            sub_20E8BFCE4(&qword_254A6DDD8);
            __cxa_guard_release(&qword_254A6DDE0);
          }
          *(_QWORD *)v415 = qword_254A6DDD8;
          sub_20E8C4068((uint64_t **)v415, (uint64_t)&v380, (uint64_t *)&__p);
          v48 = __p.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v380.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v380.__pn_.__r_.__value_.__l.__data_);
          v49 = sub_20E8C475C();
          if (*(char *)(a1 + 119) < 0)
          {
            sub_20E860C04(&v380, *(void **)(a1 + 96), *(_QWORD *)(a1 + 104));
          }
          else
          {
            *(_OWORD *)&v380.__pn_.__r_.__value_.__l.__data_ = *v20;
            v380.__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 112);
          }
          LODWORD(v377) = 63;
          sub_20E8C450C(&__p, &v377);
          v53 = (_QWORD *)operator new();
          *v53 = off_24C9AEF70;
          v54 = v53 + 1;
          if (*((char *)v49 + 31) < 0)
          {
            sub_20E860C04(v54, (void *)v49[1], v49[2]);
          }
          else
          {
            v55 = *(_OWORD *)(v49 + 1);
            v53[3] = v49[3];
            *(_OWORD *)v54 = v55;
          }
          *(_QWORD *)v415 = v53;
          v56 = operator new();
          sub_20E8C712C(v56, (uint64_t *)v415, (__int128 *)&v380, &__p);
          *(_QWORD *)&v400 = v56;
          v57 = (_QWORD *)operator new();
          *v57 = &off_24C9AF778;
          v57[1] = 0;
          v57[2] = 0;
          v57[3] = v56;
          *((_QWORD *)&v400 + 1) = v57;
          v58 = *(_QWORD *)v415;
          *(_QWORD *)v415 = 0;
          if (v58)
            (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
          if (SHIBYTE(v380.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v380.__pn_.__r_.__value_.__l.__data_);
          sub_20E8C75C0(v400, v394);
          sub_20E8C75CC(v400, v46);
          sub_20E8C76D8(v400, &v398);
          *(_OWORD *)&v380.__pn_.__r_.__value_.__l.__data_ = v400;
          if (*((_QWORD *)&v400 + 1))
          {
            v59 = (unint64_t *)(*((_QWORD *)&v400 + 1) + 8);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          v35 = v368;
          sub_20E8C2768(v48, &v380);
          size = (std::__shared_weak_count *)v380.__pn_.__r_.__value_.__l.__size_;
          if (!v380.__pn_.__r_.__value_.__l.__size_)
            goto LABEL_63;
          v62 = (unint64_t *)(v380.__pn_.__r_.__value_.__l.__size_ + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
            if ((_QWORD)v400)
              goto LABEL_72;
          }
          else
          {
LABEL_63:
            if ((_QWORD)v400)
              goto LABEL_72;
          }
          sub_20EF764A8(&v398);
          if (*(int *)v398[7] > 5
            || ((v64 = *((unsigned __int8 *)v398 + 72),
                 v65 = sub_20E8C31DC((uint64_t)v398, "OSLogSurrogateAppender", 1, 0),
                 v66 = v65,
                 !v64)
              ? (v67 = v65 == 0)
              : (v67 = 0),
                v67))
          {
LABEL_72:
            sub_20EF764A8(&v392);
            if (**(int **)(v392 + 56) > 3
              || ((v71 = *(unsigned __int8 *)(v392 + 72),
                   v72 = sub_20E8C31DC(v392, "OSLogSurrogateAppender", 1, 0),
                   v73 = v72,
                   !v71)
                ? (v74 = v72 == 0)
                : (v74 = 0),
                  v74))
            {
LABEL_371:
              v238 = (std::__shared_weak_count *)*((_QWORD *)&v400 + 1);
              if (*((_QWORD *)&v400 + 1))
              {
                v239 = (unint64_t *)(*((_QWORD *)&v400 + 1) + 8);
                do
                  v240 = __ldaxr(v239);
                while (__stlxr(v240 - 1, v239));
                if (!v240)
                {
                  ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                  std::__shared_weak_count::__release_weak(v238);
                }
              }
              goto LABEL_536;
            }
            sub_20E863438((uint64_t)&v380);
            if (*(char *)(a1 + 119) < 0)
            {
              sub_20E860C04(v394, *(void **)(a1 + 96), *(_QWORD *)(a1 + 104));
            }
            else
            {
              *(_OWORD *)v394 = *v20;
              v395 = *(std::__shared_weak_count **)(a1 + 112);
            }
            *(_QWORD *)v415 = "Log file ";
            *(_QWORD *)&v415[8] = 9;
            v75 = (void *)HIBYTE(v395);
            v76 = v394;
            if (SHIBYTE(v395) < 0)
            {
              v76 = (void **)v394[0];
              v75 = v394[1];
            }
            *(_QWORD *)&v415[16] = v76;
            *(_QWORD *)&v416 = v75;
            sub_20E8778D4((uint64_t)v415, (uint64_t)&v416 + 8, 0, 0, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v78 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v78 = __p.__r_.__value_.__l.__size_;
            sub_20E86A980(&v380.__pn_.__r_.__value_.__r.__words[2], (uint64_t)p_p, v78);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v395) & 0x80000000) == 0)
              {
LABEL_90:
                v79 = v390;
                rep = v36.__d_.__rep_;
                v357 = v73;
                if ((v390 & 0x10) == 0)
                {
LABEL_91:
                  if ((v79 & 8) == 0)
                  {
                    v80 = 0;
                    HIBYTE(v379) = 0;
                    v81 = &v377;
                    goto LABEL_180;
                  }
                  v83 = &v382;
                  v82 = v384;
LABEL_172:
                  v129 = *v83;
                  v80 = v82 - (_QWORD)*v83;
                  if (v80 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v80 >= 0x17)
                  {
                    v130 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v80 | 7) != 0x17)
                      v130 = v80 | 7;
                    v131 = v130 + 1;
                    v81 = operator new(v130 + 1);
                    v378 = v80;
                    v379 = v131 | 0x8000000000000000;
                    v377 = v81;
                  }
                  else
                  {
                    HIBYTE(v379) = v82 - *(_BYTE *)v83;
                    v81 = &v377;
                    if (!v80)
                    {
LABEL_180:
                      *((_BYTE *)v81 + v80) = 0;
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v392;
                      __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
                      __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
                      v371 = 3;
                      v372 = "unknown file";
                      v373 = 123;
                      v375 = 0;
                      v376 = 0;
                      v374 = "unknown function";
                      v132 = (char *)&v377;
                      if (v379 < 0)
                        v132 = (char *)v377;
                      __sa = v132;
                      v133 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
                      v134 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
                      v354 = v134;
                      if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
                      {
                        v134 = *(const char **)(v133 + 16);
                        v135 = *(_QWORD *)(v133 + 24);
                      }
                      else
                      {
                        v135 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
                      }
                      v136 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                      if ((v136 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                      {
                        sub_20E9E46F8((uint64_t)v415);
                        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v415);
                        if ((_BYTE)v416 && (v415[23] & 0x80000000) != 0)
                          operator delete(*(void **)v415);
                        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                        __cxa_guard_release(&qword_254A4A510);
                      }
                      if (byte_254A4A4F8[23] >= 0)
                        v137 = byte_254A4A4F8;
                      else
                        v137 = *(const char **)byte_254A4A4F8;
                      if (byte_254A4A4F8[23] >= 0)
                        v138 = byte_254A4A4F8[23];
                      else
                        v138 = *(_QWORD *)&byte_254A4A4F8[8];
                      *(_QWORD *)v415 = os_log_create(v137, v134);
                      v139 = &v415[8];
                      if (v138 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      if (v138 >= 0x17)
                      {
                        v140 = v71;
                        v141 = (v138 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v138 | 7) != 0x17)
                          v141 = v138 | 7;
                        v142 = v141 + 1;
                        v139 = operator new(v141 + 1);
                        *(_QWORD *)&v415[16] = v138;
                        *(_QWORD *)&v416 = v142 | 0x8000000000000000;
                        *(_QWORD *)&v415[8] = v139;
                        v71 = v140;
                      }
                      else
                      {
                        BYTE7(v416) = v138;
                        if (!v138)
                        {
LABEL_200:
                          v139[v138] = 0;
                          BYTE8(v416) = 1;
                          v143 = &v417;
                          if (v135 > 0x7FFFFFFFFFFFFFF7)
                            sub_20E860B7C();
                          if (v135 >= 0x17)
                          {
                            v144 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v135 | 7) != 0x17)
                              v144 = v135 | 7;
                            v145 = v144 + 1;
                            v143 = (uint64_t *)operator new(v144 + 1);
                            v418 = (const char *)v135;
                            v419 = v145 | 0x8000000000000000;
                            v417 = (uint64_t)v143;
                          }
                          else
                          {
                            HIBYTE(v419) = v135;
                            if (!v135)
                            {
LABEL_208:
                              *((_BYTE *)v143 + v135) = 0;
                              LOBYTE(v420) = 1;
                              v146 = *(NSObject **)v415;
                              if (SHIBYTE(v419) < 0)
                                operator delete((void *)v417);
                              v35 = v368;
                              if (BYTE8(v416) && SBYTE7(v416) < 0)
                                operator delete(*(void **)&v415[8]);
                              if (*(_QWORD *)v415)
                                os_release(*(void **)v415);
                              if (!v357 || !*(_QWORD *)(v357 + 24))
                              {
                                os_log_type_enabled(v146, OS_LOG_TYPE_INFO);
                                *(_DWORD *)v415 = 136315138;
                                *(_QWORD *)&v415[4] = __sa;
                                v153 = (void *)_os_log_send_and_compose_impl();
                                if (v153)
                                  free(v153);
                                goto LABEL_357;
                              }
                              v147 = _os_log_pack_size();
                              v148 = (std::__shared_weak_count_vtbl *)operator new(v147, (std::align_val_t)8uLL);
                              v149 = (std::__shared_weak_count *)operator new();
                              v149->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                              v149->__shared_owners_ = 0;
                              v149->__shared_weak_owners_ = 0;
                              v149[1].__vftable = v148;
                              v394[0] = v148;
                              v394[1] = v148;
                              v397 = 0;
                              v395 = v149;
                              v396 = 0;
                              v150 = strlen(__sa);
                              if (v150 > 0x7FFFFFFFFFFFFFF7)
                                sub_20E860B7C();
                              v151 = v150;
                              if (v150 >= 0x17)
                              {
                                v163 = (v150 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v150 | 7) != 0x17)
                                  v163 = v150 | 7;
                                v164 = v163 + 1;
                                v152 = (uint64_t *)operator new(v163 + 1);
                                *((_QWORD *)&v399 + 1) = v164 | 0x8000000000000000;
                                v398 = v152;
                                *(_QWORD *)&v399 = v151;
                              }
                              else
                              {
                                HIBYTE(v399) = v150;
                                v152 = (uint64_t *)&v398;
                                if (!v150)
                                {
LABEL_246:
                                  *((_BYTE *)v152 + v151) = 0;
                                  v165 = (uint64_t)v398;
                                  v421[0] = v399;
                                  *(uint64_t *)((char *)v421 + 7) = *(_QWORD *)((char *)&v399 + 7);
                                  v166 = HIBYTE(v399);
                                  v167 = operator new(0x38uLL);
                                  v167[1] = 0;
                                  v167[2] = 0;
                                  v167[3] = off_24C9ABC20;
                                  *v167 = &off_24C9ABBD0;
                                  v168 = v421[0];
                                  v167[4] = v165;
                                  v167[5] = v168;
                                  *(_QWORD *)((char *)v167 + 47) = *(uint64_t *)((char *)v421 + 7);
                                  *((_BYTE *)v167 + 55) = v166;
                                  memset(v421, 0, 15);
                                  v169 = v397;
                                  v396 = (char *)(v167 + 3);
                                  v397 = (std::__shared_weak_count *)v167;
                                  if (v169)
                                  {
                                    p_shared_owners = (unint64_t *)&v169->__shared_owners_;
                                    do
                                      v171 = __ldaxr(p_shared_owners);
                                    while (__stlxr(v171 - 1, p_shared_owners));
                                    if (!v171)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                                      std::__shared_weak_count::__release_weak(v169);
                                    }
                                  }
                                  *(_OWORD *)v415 = *(_OWORD *)v394;
                                  v172 = (uint64_t)v396;
                                  *(_QWORD *)&v415[16] = v395;
                                  if (v395)
                                  {
                                    v173 = (unint64_t *)&v395->__shared_owners_;
                                    do
                                      v174 = __ldxr(v173);
                                    while (__stxr(v174 + 1, v173));
                                  }
                                  v175 = v397;
                                  *(_QWORD *)&v416 = v172;
                                  *((_QWORD *)&v416 + 1) = v397;
                                  if (v397)
                                  {
                                    v176 = (unint64_t *)&v397->__shared_owners_;
                                    do
                                      v177 = __ldxr(v176);
                                    while (__stxr(v177 + 1, v176));
                                    v417 = v172;
                                    do
                                      v178 = __ldaxr(v176);
                                    while (__stlxr(v178 - 1, v176));
                                    if (!v178)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                                      std::__shared_weak_count::__release_weak(v175);
                                    }
                                  }
                                  else
                                  {
                                    v417 = v172;
                                  }
                                  v204 = v395;
                                  if (v395)
                                  {
                                    v205 = (unint64_t *)&v395->__shared_owners_;
                                    do
                                      v206 = __ldaxr(v205);
                                    while (__stlxr(v206 - 1, v205));
                                    if (!v206)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                                      std::__shared_weak_count::__release_weak(v204);
                                    }
                                  }
                                  v207 = *(_QWORD *)v415;
                                  if (*(char *)(v417 + 31) >= 0)
                                    v208 = (char *)(v417 + 8);
                                  else
                                    v208 = *(char **)(v417 + 8);
                                  v209 = _os_log_pack_fill();
                                  *(_DWORD *)v209 = 136315138;
                                  *(_QWORD *)(v209 + 4) = v208;
                                  v210 = (char *)operator new();
                                  v211 = *(unsigned __int8 *)(v133 + 39);
                                  v212 = v354;
                                  if ((v211 & 0x80u) != 0)
                                  {
                                    v212 = *(const char **)(v133 + 16);
                                    v211 = *(_QWORD *)(v133 + 24);
                                  }
                                  *(_QWORD *)v210 = v207;
                                  *(_OWORD *)(v210 + 8) = *(_OWORD *)&v415[8];
                                  *(_QWORD *)&v415[8] = 0;
                                  *(_QWORD *)&v415[16] = 0;
                                  *(_OWORD *)(v210 + 24) = v416;
                                  v416 = 0uLL;
                                  *((_QWORD *)v210 + 5) = v212;
                                  *((_QWORD *)v210 + 6) = v211;
                                  v210[56] = 1;
                                  v398 = 0;
                                  v394[0] = v210;
                                  v35 = v368;
                                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v357 + 24) + 40))(*(_QWORD *)(v357 + 24), v394);
                                  v213 = v394[0];
                                  v394[0] = 0;
                                  if (v213)
                                  {
                                    v214 = (std::__shared_weak_count *)*((_QWORD *)v213 + 4);
                                    if (v214)
                                    {
                                      v215 = (unint64_t *)&v214->__shared_owners_;
                                      do
                                        v216 = __ldaxr(v215);
                                      while (__stlxr(v216 - 1, v215));
                                      if (!v216)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                                        std::__shared_weak_count::__release_weak(v214);
                                      }
                                    }
                                    v217 = (std::__shared_weak_count *)*((_QWORD *)v213 + 2);
                                    if (v217)
                                    {
                                      v218 = (unint64_t *)&v217->__shared_owners_;
                                      do
                                        v219 = __ldaxr(v218);
                                      while (__stlxr(v219 - 1, v218));
                                      if (!v219)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                                        std::__shared_weak_count::__release_weak(v217);
                                      }
                                    }
                                    MEMORY[0x212BC6398](v213, 0x10F0C40B62ED6C6);
                                    v220 = (uint64_t)v398;
                                    v398 = 0;
                                    if (v220)
                                    {
                                      v221 = *(std::__shared_weak_count **)(v220 + 32);
                                      if (v221)
                                      {
                                        v222 = (unint64_t *)&v221->__shared_owners_;
                                        do
                                          v223 = __ldaxr(v222);
                                        while (__stlxr(v223 - 1, v222));
                                        if (!v223)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                                          std::__shared_weak_count::__release_weak(v221);
                                        }
                                      }
                                      v224 = *(std::__shared_weak_count **)(v220 + 16);
                                      if (v224)
                                      {
                                        v225 = (unint64_t *)&v224->__shared_owners_;
                                        do
                                          v226 = __ldaxr(v225);
                                        while (__stlxr(v226 - 1, v225));
                                        if (!v226)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                                          std::__shared_weak_count::__release_weak(v224);
                                        }
                                      }
                                      MEMORY[0x212BC6398](v220, 0x10F0C40B62ED6C6);
                                    }
                                  }
                                  v227 = (std::__shared_weak_count *)*((_QWORD *)&v416 + 1);
                                  if (*((_QWORD *)&v416 + 1))
                                  {
                                    v228 = (unint64_t *)(*((_QWORD *)&v416 + 1) + 8);
                                    do
                                      v229 = __ldaxr(v228);
                                    while (__stlxr(v229 - 1, v228));
                                    if (!v229)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                                      std::__shared_weak_count::__release_weak(v227);
                                    }
                                  }
                                  v230 = *(std::__shared_weak_count **)&v415[16];
                                  if (*(_QWORD *)&v415[16])
                                  {
                                    v231 = (unint64_t *)(*(_QWORD *)&v415[16] + 8);
                                    do
                                      v232 = __ldaxr(v231);
                                    while (__stlxr(v232 - 1, v231));
                                    if (!v232)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                                      std::__shared_weak_count::__release_weak(v230);
                                    }
                                  }
LABEL_357:
                                  if (v71)
                                  {
                                    v233 = (const char *)&v377;
                                    if (v379 < 0)
                                      v233 = (const char *)v377;
                                    sub_20E8C003C((uint64_t)&__p, "%s", v233);
                                    sub_20E863570((uint64_t)&__p);
                                  }
                                  sub_20E863570((uint64_t)&__p);
                                  v234 = v376;
                                  if (v376)
                                  {
                                    v235 = (unint64_t *)&v376->__shared_owners_;
                                    do
                                      v236 = __ldaxr(v235);
                                    while (__stlxr(v236 - 1, v235));
                                    if (!v236)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                                      std::__shared_weak_count::__release_weak(v234);
                                    }
                                  }
                                  if (SHIBYTE(v379) < 0)
                                    operator delete(v377);
                                  v380.__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
                                  v237 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                                  *(std::string::size_type *)((char *)v380.__pn_.__r_.__value_.__r.__words
                                                            + *(_QWORD *)(v380.__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                                  v380.__pn_.__r_.__value_.__r.__words[2] = v237;
                                  *(_QWORD *)&v381 = MEMORY[0x24BEDB848] + 16;
                                  if (v388 < 0)
                                    operator delete(v387);
                                  std::streambuf::~streambuf();
                                  std::iostream::~basic_iostream();
                                  MEMORY[0x212BC6290](v391);
                                  v36.__d_.__rep_ = rep;
                                  goto LABEL_371;
                                }
                              }
                              memcpy(v152, __sa, v151);
                              goto LABEL_246;
                            }
                          }
                          memmove(v143, v134, v135);
                          goto LABEL_208;
                        }
                      }
                      memmove(v139, v137, v138);
                      goto LABEL_200;
                    }
                  }
                  memmove(v81, v129, v80);
                  goto LABEL_180;
                }
LABEL_95:
                v82 = v389;
                if (v389 < v386)
                {
                  v389 = v386;
                  v82 = v386;
                }
                v83 = (void **)&v385;
                goto LABEL_172;
              }
            }
            else if ((SHIBYTE(v395) & 0x80000000) == 0)
            {
              goto LABEL_90;
            }
            operator delete(v394[0]);
            v79 = v390;
            rep = v36.__d_.__rep_;
            v357 = v73;
            if ((v390 & 0x10) == 0)
              goto LABEL_91;
            goto LABEL_95;
          }
          v365 = v36.__d_.__rep_;
          *(_QWORD *)v415 = &v398;
          *(std::chrono::steady_clock::time_point *)&v415[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&v415[16] = std::chrono::system_clock::now();
          LODWORD(v416) = 5;
          *((_QWORD *)&v416 + 1) = "unknown file";
          LODWORD(v417) = 121;
          v419 = 0;
          v420 = 0;
          v418 = "unknown function";
          v68 = **(_QWORD **)v415;
          if (*(char *)(**(_QWORD **)v415 + 39) < 0)
          {
            v70 = *(const char **)(v68 + 16);
            v69 = *(_QWORD *)(v68 + 24);
          }
          else
          {
            v69 = *(unsigned __int8 *)(**(_QWORD **)v415 + 39);
            v70 = (const char *)(v68 + 16);
          }
          v360 = v68 + 16;
          v241 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v241 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&v380);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v380);
            if ((_BYTE)v381 && SHIBYTE(v380.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v380.__pn_.__r_.__value_.__l.__data_);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v242 = byte_254A4A4F8[23];
          else
            v242 = *(_QWORD *)&byte_254A4A4F8[8];
          if (byte_254A4A4F8[23] >= 0)
            v243 = byte_254A4A4F8;
          else
            v243 = *(const char **)byte_254A4A4F8;
          __sc = (char *)v70;
          v380.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v243, v70);
          p_size = &v380.__pn_.__r_.__value_.__l.__size_;
          if (v242 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v242 >= 0x17)
          {
            v356 = v68;
            v245 = v66;
            v246 = v64;
            v247 = (v242 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v242 | 7) != 0x17)
              v247 = v242 | 7;
            v248 = v247 + 1;
            p_size = (std::string::size_type *)operator new(v247 + 1);
            v380.__pn_.__r_.__value_.__r.__words[2] = v242;
            *(_QWORD *)&v381 = v248 | 0x8000000000000000;
            v380.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
            v64 = v246;
            v66 = v245;
            v68 = v356;
          }
          else
          {
            BYTE7(v381) = v242;
            if (!v242)
            {
LABEL_392:
              *((_BYTE *)p_size + v242) = 0;
              BYTE8(v381) = 1;
              v249 = &v382;
              if (v69 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v69 >= 0x17)
              {
                v250 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v69 | 7) != 0x17)
                  v250 = v69 | 7;
                v251 = v250 + 1;
                v249 = operator new(v250 + 1);
                v383 = (const char *)v69;
                v384 = v251 | 0x8000000000000000;
                v382 = v249;
              }
              else
              {
                HIBYTE(v384) = v69;
                if (!v69)
                  goto LABEL_400;
              }
              memmove(v249, __sc, v69);
LABEL_400:
              *((_BYTE *)v249 + v69) = 0;
              LOBYTE(v385) = 1;
              v252 = v380.__pn_.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v384) < 0)
                operator delete(v382);
              v35 = v368;
              if (BYTE8(v381) && SBYTE7(v381) < 0)
                operator delete((void *)v380.__pn_.__r_.__value_.__l.__size_);
              if (v380.__pn_.__r_.__value_.__r.__words[0])
                os_release(v380.__pn_.__r_.__value_.__l.__data_);
              if (v66 && *(_QWORD *)(v66 + 24))
              {
                v253 = _os_log_pack_size();
                v254 = (std::__shared_weak_count_vtbl *)operator new(v253, (std::align_val_t)8uLL);
                v255 = (std::__shared_weak_count *)operator new();
                v256 = v255;
                v255->__shared_owners_ = 0;
                v257 = (unint64_t *)&v255->__shared_owners_;
                v255->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v255->__shared_weak_owners_ = 0;
                v255[1].__vftable = v254;
                v380.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v254;
                v380.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v254;
                v380.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v255;
                do
                  v258 = __ldxr(v257);
                while (__stxr(v258 + 1, v257));
                v381 = 0uLL;
                v382 = 0;
                v35 = v368;
                do
                  v259 = __ldaxr(v257);
                while (__stlxr(v259 - 1, v257));
                if (!v259)
                {
                  ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                  std::__shared_weak_count::__release_weak(v256);
                }
                v260 = v380.__pn_.__r_.__value_.__r.__words[0];
                *(_WORD *)_os_log_pack_fill() = 0;
                v261 = operator new();
                v262 = *(unsigned __int8 *)(v68 + 39);
                v263 = v360;
                if ((v262 & 0x80u) != 0)
                {
                  v263 = *(_QWORD *)(v68 + 16);
                  v262 = *(_QWORD *)(v68 + 24);
                }
                *(_QWORD *)v261 = v260;
                *(_OWORD *)(v261 + 8) = *(_OWORD *)&v380.__pn_.__r_.__value_.__r.__words[1];
                *(_OWORD *)&v380.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v261 + 24) = v381;
                v381 = 0uLL;
                *(_QWORD *)(v261 + 40) = v263;
                *(_QWORD *)(v261 + 48) = v262;
                *(_BYTE *)(v261 + 56) = 16;
                v394[0] = 0;
                __p.__r_.__value_.__r.__words[0] = v261;
                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v66 + 24) + 40))(*(_QWORD *)(v66 + 24), &__p);
                v264 = __p.__r_.__value_.__r.__words[0];
                __p.__r_.__value_.__r.__words[0] = 0;
                v36.__d_.__rep_ = v365;
                if (v264)
                {
                  v265 = *(std::__shared_weak_count **)(v264 + 32);
                  if (v265)
                  {
                    v266 = (unint64_t *)&v265->__shared_owners_;
                    do
                      v267 = __ldaxr(v266);
                    while (__stlxr(v267 - 1, v266));
                    if (!v267)
                    {
                      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                      std::__shared_weak_count::__release_weak(v265);
                    }
                  }
                  v268 = *(std::__shared_weak_count **)(v264 + 16);
                  if (v268)
                  {
                    v269 = (unint64_t *)&v268->__shared_owners_;
                    do
                      v270 = __ldaxr(v269);
                    while (__stlxr(v270 - 1, v269));
                    if (!v270)
                    {
                      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                      std::__shared_weak_count::__release_weak(v268);
                    }
                  }
                  MEMORY[0x212BC6398](v264, 0x10F0C40B62ED6C6);
                  v271 = v394[0];
                  v394[0] = 0;
                  if (v271)
                  {
                    v272 = (std::__shared_weak_count *)*((_QWORD *)v271 + 4);
                    if (v272)
                    {
                      v273 = (unint64_t *)&v272->__shared_owners_;
                      do
                        v274 = __ldaxr(v273);
                      while (__stlxr(v274 - 1, v273));
                      if (!v274)
                      {
                        ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                        std::__shared_weak_count::__release_weak(v272);
                      }
                    }
                    v275 = (std::__shared_weak_count *)*((_QWORD *)v271 + 2);
                    if (v275)
                    {
                      v276 = (unint64_t *)&v275->__shared_owners_;
                      do
                        v277 = __ldaxr(v276);
                      while (__stlxr(v277 - 1, v276));
                      if (!v277)
                      {
                        ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
                        std::__shared_weak_count::__release_weak(v275);
                      }
                    }
                    MEMORY[0x212BC6398](v271, 0x10F0C40B62ED6C6);
                  }
                }
                v278 = (std::__shared_weak_count *)*((_QWORD *)&v381 + 1);
                if (*((_QWORD *)&v381 + 1))
                {
                  v279 = (unint64_t *)(*((_QWORD *)&v381 + 1) + 8);
                  do
                    v280 = __ldaxr(v279);
                  while (__stlxr(v280 - 1, v279));
                  if (!v280)
                  {
                    ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                    std::__shared_weak_count::__release_weak(v278);
                  }
                }
                v281 = (std::__shared_weak_count *)v380.__pn_.__r_.__value_.__r.__words[2];
                if (v380.__pn_.__r_.__value_.__r.__words[2])
                {
                  v282 = (unint64_t *)(v380.__pn_.__r_.__value_.__r.__words[2] + 8);
                  do
                    v283 = __ldaxr(v282);
                  while (__stlxr(v283 - 1, v282));
                  if (!v283)
                  {
                    ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                    std::__shared_weak_count::__release_weak(v281);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v252, OS_LOG_TYPE_ERROR);
                LOWORD(v380.__pn_.__r_.__value_.__l.__data_) = 0;
                v284 = (void *)_os_log_send_and_compose_impl();
                v36.__d_.__rep_ = v365;
                if (v284)
                  free(v284);
              }
              if (v64)
              {
                sub_20E8C003C((uint64_t)v415, "Failed to add FileAppender");
                sub_20E863570((uint64_t)v415);
              }
              sub_20E863570((uint64_t)v415);
              v285 = v420;
              if (v420)
              {
                v286 = (unint64_t *)&v420->__shared_owners_;
                do
                  v287 = __ldaxr(v286);
                while (__stlxr(v287 - 1, v286));
                if (!v287)
                {
                  ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                  std::__shared_weak_count::__release_weak(v285);
                }
              }
              goto LABEL_72;
            }
          }
          memmove(p_size, v243, v242);
          goto LABEL_392;
        }
        sub_20EF764A8(v421);
        v35 = v368;
        if (**(int **)(v421[0] + 56) > 5
          || (v50 = *(unsigned __int8 *)(v421[0] + 72),
              v51 = sub_20E8C31DC(v421[0], "OSLogSurrogateAppender", 1, 0),
              v52 = v51,
              !v50)
          && !v51)
        {
LABEL_536:
          __dst.__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E8];
          *(std::string::size_type *)((char *)__dst.__pn_.__r_.__value_.__r.__words
                                    + *(_QWORD *)(__dst.__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
          MEMORY[0x212BC5B4C](&__dst.__pn_.__r_.__value_.__r.__words[1]);
          std::ostream::~ostream();
          MEMORY[0x212BC6290](&v414);
          goto LABEL_537;
        }
        sub_20E863438((uint64_t)&v380);
        if (*(char *)(a1 + 119) < 0)
        {
          sub_20E860C04(v394, *(void **)(a1 + 96), *(_QWORD *)(a1 + 104));
        }
        else
        {
          *(_OWORD *)v394 = *v20;
          v395 = *(std::__shared_weak_count **)(a1 + 112);
        }
        *(_QWORD *)v415 = "Failed to create [";
        *(_QWORD *)&v415[8] = 18;
        v154 = (void *)HIBYTE(v395);
        v155 = v394;
        if (SHIBYTE(v395) < 0)
        {
          v155 = (void **)v394[0];
          v154 = v394[1];
        }
        *(_QWORD *)&v415[16] = v155;
        *(_QWORD *)&v416 = v154;
        *((_QWORD *)&v416 + 1) = "] file for MappingIO logging";
        v417 = 28;
        sub_20E8778D4((uint64_t)v415, (uint64_t)&v418, 0, 0, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v156 = &__p;
        else
          v156 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v157 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v157 = __p.__r_.__value_.__l.__size_;
        sub_20E86A980(&v380.__pn_.__r_.__value_.__r.__words[2], (uint64_t)v156, v157);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v395) & 0x80000000) == 0)
          {
LABEL_234:
            v158 = v390;
            v367 = v36.__d_.__rep_;
            v359 = v52;
            if ((v390 & 0x10) == 0)
            {
LABEL_235:
              if ((v158 & 8) == 0)
              {
                v159 = 0;
                HIBYTE(v379) = 0;
                v160 = &v377;
                goto LABEL_270;
              }
              v162 = &v382;
              v161 = v384;
LABEL_262:
              v179 = *v162;
              v159 = v161 - (_QWORD)*v162;
              if (v159 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v159 >= 0x17)
              {
                v180 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v159 | 7) != 0x17)
                  v180 = v159 | 7;
                v181 = v180 + 1;
                v160 = operator new(v180 + 1);
                v378 = v159;
                v379 = v181 | 0x8000000000000000;
                v377 = v160;
              }
              else
              {
                HIBYTE(v379) = v161 - *(_BYTE *)v162;
                v160 = &v377;
                if (!v159)
                {
LABEL_270:
                  *((_BYTE *)v160 + v159) = 0;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v421;
                  __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
                  __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
                  v371 = 5;
                  v372 = "unknown file";
                  v373 = 128;
                  v375 = 0;
                  v376 = 0;
                  v374 = "unknown function";
                  v182 = (char *)&v377;
                  if (v379 < 0)
                    v182 = (char *)v377;
                  __sb = v182;
                  v183 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
                  v184 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
                  v355 = v184;
                  if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
                  {
                    v184 = *(const char **)(v183 + 16);
                    v185 = *(_QWORD *)(v183 + 24);
                  }
                  else
                  {
                    v185 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
                  }
                  v186 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v186 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)v415);
                    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v415);
                    if ((_BYTE)v416 && (v415[23] & 0x80000000) != 0)
                      operator delete(*(void **)v415);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                  }
                  if (byte_254A4A4F8[23] >= 0)
                    v187 = byte_254A4A4F8;
                  else
                    v187 = *(const char **)byte_254A4A4F8;
                  if (byte_254A4A4F8[23] >= 0)
                    v188 = byte_254A4A4F8[23];
                  else
                    v188 = *(_QWORD *)&byte_254A4A4F8[8];
                  *(_QWORD *)v415 = os_log_create(v187, v184);
                  v189 = &v415[8];
                  if (v188 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v188 >= 0x17)
                  {
                    v190 = v50;
                    v191 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v188 | 7) != 0x17)
                      v191 = v188 | 7;
                    v192 = v191 + 1;
                    v189 = operator new(v191 + 1);
                    *(_QWORD *)&v415[16] = v188;
                    *(_QWORD *)&v416 = v192 | 0x8000000000000000;
                    *(_QWORD *)&v415[8] = v189;
                    v50 = v190;
                  }
                  else
                  {
                    BYTE7(v416) = v188;
                    if (!v188)
                    {
LABEL_290:
                      v189[v188] = 0;
                      BYTE8(v416) = 1;
                      v193 = &v417;
                      if (v185 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      if (v185 >= 0x17)
                      {
                        v194 = (v185 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v185 | 7) != 0x17)
                          v194 = v185 | 7;
                        v195 = v194 + 1;
                        v193 = (uint64_t *)operator new(v194 + 1);
                        v418 = (const char *)v185;
                        v419 = v195 | 0x8000000000000000;
                        v417 = (uint64_t)v193;
                      }
                      else
                      {
                        HIBYTE(v419) = v185;
                        if (!v185)
                        {
LABEL_298:
                          *((_BYTE *)v193 + v185) = 0;
                          LOBYTE(v420) = 1;
                          v196 = *(NSObject **)v415;
                          if (SHIBYTE(v419) < 0)
                            operator delete((void *)v417);
                          v35 = v368;
                          if (BYTE8(v416) && SBYTE7(v416) < 0)
                            operator delete(*(void **)&v415[8]);
                          if (*(_QWORD *)v415)
                            os_release(*(void **)v415);
                          if (!v359 || !*(_QWORD *)(v359 + 24))
                          {
                            os_log_type_enabled(v196, OS_LOG_TYPE_ERROR);
                            *(_DWORD *)v415 = 136315138;
                            *(_QWORD *)&v415[4] = __sb;
                            v203 = (void *)_os_log_send_and_compose_impl();
                            if (v203)
                              free(v203);
                            goto LABEL_522;
                          }
                          v197 = _os_log_pack_size();
                          v198 = (std::__shared_weak_count_vtbl *)operator new(v197, (std::align_val_t)8uLL);
                          v199 = (std::__shared_weak_count *)operator new();
                          v199->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                          v199->__shared_owners_ = 0;
                          v199->__shared_weak_owners_ = 0;
                          v199[1].__vftable = v198;
                          v394[0] = v198;
                          v394[1] = v198;
                          v397 = 0;
                          v395 = v199;
                          v396 = 0;
                          v200 = strlen(__sb);
                          if (v200 > 0x7FFFFFFFFFFFFFF7)
                            sub_20E860B7C();
                          v201 = v200;
                          if (v200 >= 0x17)
                          {
                            v288 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v200 | 7) != 0x17)
                              v288 = v200 | 7;
                            v289 = v288 + 1;
                            v202 = (uint64_t *)operator new(v288 + 1);
                            *((_QWORD *)&v399 + 1) = v289 | 0x8000000000000000;
                            v398 = v202;
                            *(_QWORD *)&v399 = v201;
                          }
                          else
                          {
                            HIBYTE(v399) = v200;
                            v202 = (uint64_t *)&v398;
                            if (!v200)
                            {
LABEL_463:
                              *((_BYTE *)v202 + v201) = 0;
                              v290 = (uint64_t)v398;
                              *(_QWORD *)&v400 = v399;
                              *(_QWORD *)((char *)&v400 + 7) = *(_QWORD *)((char *)&v399 + 7);
                              v291 = HIBYTE(v399);
                              v292 = operator new(0x38uLL);
                              v292[1] = 0;
                              v292[2] = 0;
                              v292[3] = off_24C9ABC20;
                              *v292 = &off_24C9ABBD0;
                              v293 = v400;
                              v292[4] = v290;
                              v292[5] = v293;
                              *(_QWORD *)((char *)v292 + 47) = *(_QWORD *)((char *)&v400 + 7);
                              *((_BYTE *)v292 + 55) = v291;
                              *(_QWORD *)&v400 = 0;
                              *(_QWORD *)((char *)&v400 + 7) = 0;
                              v294 = v397;
                              v396 = (char *)(v292 + 3);
                              v397 = (std::__shared_weak_count *)v292;
                              if (v294)
                              {
                                v295 = (unint64_t *)&v294->__shared_owners_;
                                do
                                  v296 = __ldaxr(v295);
                                while (__stlxr(v296 - 1, v295));
                                if (!v296)
                                {
                                  ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                                  std::__shared_weak_count::__release_weak(v294);
                                }
                              }
                              *(_OWORD *)v415 = *(_OWORD *)v394;
                              v297 = (uint64_t)v396;
                              *(_QWORD *)&v415[16] = v395;
                              if (v395)
                              {
                                v298 = (unint64_t *)&v395->__shared_owners_;
                                do
                                  v299 = __ldxr(v298);
                                while (__stxr(v299 + 1, v298));
                              }
                              v300 = v397;
                              *(_QWORD *)&v416 = v297;
                              *((_QWORD *)&v416 + 1) = v397;
                              if (v397)
                              {
                                v301 = (unint64_t *)&v397->__shared_owners_;
                                do
                                  v302 = __ldxr(v301);
                                while (__stxr(v302 + 1, v301));
                                v417 = v297;
                                do
                                  v303 = __ldaxr(v301);
                                while (__stlxr(v303 - 1, v301));
                                if (!v303)
                                {
                                  ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                                  std::__shared_weak_count::__release_weak(v300);
                                }
                              }
                              else
                              {
                                v417 = v297;
                              }
                              v304 = v395;
                              if (v395)
                              {
                                v305 = (unint64_t *)&v395->__shared_owners_;
                                do
                                  v306 = __ldaxr(v305);
                                while (__stlxr(v306 - 1, v305));
                                if (!v306)
                                {
                                  ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                                  std::__shared_weak_count::__release_weak(v304);
                                }
                              }
                              v307 = *(_QWORD *)v415;
                              if (*(char *)(v417 + 31) >= 0)
                                v308 = (char *)(v417 + 8);
                              else
                                v308 = *(char **)(v417 + 8);
                              v309 = _os_log_pack_fill();
                              *(_DWORD *)v309 = 136315138;
                              *(_QWORD *)(v309 + 4) = v308;
                              v310 = (char *)operator new();
                              v311 = *(unsigned __int8 *)(v183 + 39);
                              v312 = v355;
                              if ((v311 & 0x80u) != 0)
                              {
                                v312 = *(const char **)(v183 + 16);
                                v311 = *(_QWORD *)(v183 + 24);
                              }
                              *(_QWORD *)v310 = v307;
                              *(_OWORD *)(v310 + 8) = *(_OWORD *)&v415[8];
                              *(_QWORD *)&v415[8] = 0;
                              *(_QWORD *)&v415[16] = 0;
                              *(_OWORD *)(v310 + 24) = v416;
                              v416 = 0uLL;
                              *((_QWORD *)v310 + 5) = v312;
                              *((_QWORD *)v310 + 6) = v311;
                              v310[56] = 16;
                              v398 = 0;
                              v394[0] = v310;
                              v35 = v368;
                              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v359 + 24) + 40))(*(_QWORD *)(v359 + 24), v394);
                              v313 = v394[0];
                              v394[0] = 0;
                              if (v313)
                              {
                                v314 = (std::__shared_weak_count *)*((_QWORD *)v313 + 4);
                                if (v314)
                                {
                                  v315 = (unint64_t *)&v314->__shared_owners_;
                                  do
                                    v316 = __ldaxr(v315);
                                  while (__stlxr(v316 - 1, v315));
                                  if (!v316)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                                    std::__shared_weak_count::__release_weak(v314);
                                  }
                                }
                                v317 = (std::__shared_weak_count *)*((_QWORD *)v313 + 2);
                                if (v317)
                                {
                                  v318 = (unint64_t *)&v317->__shared_owners_;
                                  do
                                    v319 = __ldaxr(v318);
                                  while (__stlxr(v319 - 1, v318));
                                  if (!v319)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
                                    std::__shared_weak_count::__release_weak(v317);
                                  }
                                }
                                MEMORY[0x212BC6398](v313, 0x10F0C40B62ED6C6);
                                v320 = (uint64_t)v398;
                                v398 = 0;
                                if (v320)
                                {
                                  v321 = *(std::__shared_weak_count **)(v320 + 32);
                                  if (v321)
                                  {
                                    v322 = (unint64_t *)&v321->__shared_owners_;
                                    do
                                      v323 = __ldaxr(v322);
                                    while (__stlxr(v323 - 1, v322));
                                    if (!v323)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                                      std::__shared_weak_count::__release_weak(v321);
                                    }
                                  }
                                  v324 = *(std::__shared_weak_count **)(v320 + 16);
                                  if (v324)
                                  {
                                    v325 = (unint64_t *)&v324->__shared_owners_;
                                    do
                                      v326 = __ldaxr(v325);
                                    while (__stlxr(v326 - 1, v325));
                                    if (!v326)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                                      std::__shared_weak_count::__release_weak(v324);
                                    }
                                  }
                                  MEMORY[0x212BC6398](v320, 0x10F0C40B62ED6C6);
                                }
                              }
                              v327 = (std::__shared_weak_count *)*((_QWORD *)&v416 + 1);
                              if (*((_QWORD *)&v416 + 1))
                              {
                                v328 = (unint64_t *)(*((_QWORD *)&v416 + 1) + 8);
                                do
                                  v329 = __ldaxr(v328);
                                while (__stlxr(v329 - 1, v328));
                                if (!v329)
                                {
                                  ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                                  std::__shared_weak_count::__release_weak(v327);
                                }
                              }
                              v330 = *(std::__shared_weak_count **)&v415[16];
                              if (*(_QWORD *)&v415[16])
                              {
                                v331 = (unint64_t *)(*(_QWORD *)&v415[16] + 8);
                                do
                                  v332 = __ldaxr(v331);
                                while (__stlxr(v332 - 1, v331));
                                if (!v332)
                                {
                                  ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
                                  std::__shared_weak_count::__release_weak(v330);
                                }
                              }
LABEL_522:
                              if (v50)
                              {
                                v333 = (const char *)&v377;
                                if (v379 < 0)
                                  v333 = (const char *)v377;
                                sub_20E8C003C((uint64_t)&__p, "%s", v333);
                                sub_20E863570((uint64_t)&__p);
                              }
                              sub_20E863570((uint64_t)&__p);
                              v334 = v376;
                              if (v376)
                              {
                                v335 = (unint64_t *)&v376->__shared_owners_;
                                do
                                  v336 = __ldaxr(v335);
                                while (__stlxr(v336 - 1, v335));
                                if (!v336)
                                {
                                  ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                                  std::__shared_weak_count::__release_weak(v334);
                                }
                              }
                              if (SHIBYTE(v379) < 0)
                                operator delete(v377);
                              v380.__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
                              v337 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                              *(std::string::size_type *)((char *)v380.__pn_.__r_.__value_.__r.__words
                                                        + *(_QWORD *)(v380.__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                              v380.__pn_.__r_.__value_.__r.__words[2] = v337;
                              *(_QWORD *)&v381 = MEMORY[0x24BEDB848] + 16;
                              if (v388 < 0)
                                operator delete(v387);
                              std::streambuf::~streambuf();
                              std::iostream::~basic_iostream();
                              MEMORY[0x212BC6290](v391);
                              v36.__d_.__rep_ = v367;
                              goto LABEL_536;
                            }
                          }
                          memcpy(v202, __sb, v201);
                          goto LABEL_463;
                        }
                      }
                      memmove(v193, v184, v185);
                      goto LABEL_298;
                    }
                  }
                  memmove(v189, v187, v188);
                  goto LABEL_290;
                }
              }
              memmove(v160, v179, v159);
              goto LABEL_270;
            }
LABEL_239:
            v161 = v389;
            if (v389 < v386)
            {
              v389 = v386;
              v161 = v386;
            }
            v162 = (void **)&v385;
            goto LABEL_262;
          }
        }
        else if ((SHIBYTE(v395) & 0x80000000) == 0)
        {
          goto LABEL_234;
        }
        operator delete(v394[0]);
        v158 = v390;
        v367 = v36.__d_.__rep_;
        v359 = v52;
        if ((v390 & 0x10) == 0)
          goto LABEL_235;
        goto LABEL_239;
      }
    }
    memmove(p_dst, v37.__data_, v37.__size_);
    goto LABEL_35;
  }
  sub_20EF764A8(v394);
  if (**((int **)v394[0] + 7) <= 5)
  {
    v39 = *((unsigned __int8 *)v394[0] + 72);
    v40 = sub_20E8C31DC((uint64_t)v394[0], "OSLogSurrogateAppender", 1, 0);
    v41 = v40;
    if (v39 || v40)
    {
      v369 = v35;
      v380.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v394;
      v380.__pn_.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v380.__pn_.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v381) = 5;
      *((_QWORD *)&v381 + 1) = "unknown file";
      LODWORD(v382) = 111;
      v384 = 0;
      v385 = 0;
      v383 = "unknown function";
      if (*((char *)v394[0] + 39) < 0)
      {
        v43 = (const char *)*((_QWORD *)v394[0] + 2);
        v42 = *((_QWORD *)v394[0] + 3);
      }
      else
      {
        v42 = *((unsigned __int8 *)v394[0] + 39);
        v43 = (const char *)(*(_QWORD *)v380.__pn_.__r_.__value_.__l.__data_ + 16);
      }
      v353 = *(_QWORD *)v380.__pn_.__r_.__value_.__l.__data_;
      v358 = (char *)v394[0] + 16;
      __s = v39;
      v84 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v84 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&__dst);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&__dst);
        if ((_BYTE)v402 && SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v85 = byte_254A4A4F8;
      else
        v85 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v86 = byte_254A4A4F8[23];
      else
        v86 = *(_QWORD *)&byte_254A4A4F8[8];
      __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v85, v43);
      v87 = &__dst.__pn_.__r_.__value_.__l.__size_;
      if (v86 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v86 >= 0x17)
      {
        v88 = v41;
        v89 = v43;
        v90 = v36.__d_.__rep_;
        v91 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v86 | 7) != 0x17)
          v91 = v86 | 7;
        v92 = v91 + 1;
        v87 = (std::string::size_type *)operator new(v91 + 1);
        *(_QWORD *)&v402 = v92 | 0x8000000000000000;
        __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v87;
        __dst.__pn_.__r_.__value_.__r.__words[2] = v86;
        v36.__d_.__rep_ = v90;
        v43 = v89;
        v41 = v88;
      }
      else
      {
        BYTE7(v402) = v86;
        if (!v86)
        {
LABEL_114:
          *((_BYTE *)v87 + v86) = 0;
          BYTE8(v402) = 1;
          v93 = &v403;
          if (v42 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v42 >= 0x17)
          {
            v94 = v36.__d_.__rep_;
            v95 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v42 | 7) != 0x17)
              v95 = v42 | 7;
            v96 = v95 + 1;
            v93 = operator new(v95 + 1);
            v405 = v96 | 0x8000000000000000;
            v403 = v93;
            v404 = v42;
            v36.__d_.__rep_ = v94;
          }
          else
          {
            HIBYTE(v405) = v42;
            if (!v42)
              goto LABEL_122;
          }
          memmove(v93, v43, v42);
LABEL_122:
          *((_BYTE *)v93 + v42) = 0;
          LOBYTE(v406) = 1;
          v97 = __dst.__pn_.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v405) < 0)
            operator delete(v403);
          v35 = v369;
          if (BYTE8(v402) && SBYTE7(v402) < 0)
            operator delete((void *)__dst.__pn_.__r_.__value_.__l.__size_);
          if (__dst.__pn_.__r_.__value_.__r.__words[0])
            os_release(__dst.__pn_.__r_.__value_.__l.__data_);
          if (v41 && *(_QWORD *)(v41 + 24))
          {
            v98 = _os_log_pack_size();
            v99 = (std::__shared_weak_count_vtbl *)operator new(v98, (std::align_val_t)8uLL);
            v100 = (std::__shared_weak_count *)operator new();
            v101 = v100;
            v100->__shared_owners_ = 0;
            v102 = (unint64_t *)&v100->__shared_owners_;
            v100->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v100->__shared_weak_owners_ = 0;
            v100[1].__vftable = v99;
            __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
            __dst.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v99;
            __dst.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v100;
            do
              v103 = __ldxr(v102);
            while (__stxr(v103 + 1, v102));
            v402 = 0uLL;
            v403 = 0;
            do
              v104 = __ldaxr(v102);
            while (__stlxr(v104 - 1, v102));
            if (!v104)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v101);
            }
            v105 = __dst.__pn_.__r_.__value_.__r.__words[0];
            *(_WORD *)_os_log_pack_fill() = 0;
            v106 = operator new();
            v107 = *(unsigned __int8 *)(v353 + 39);
            v108 = *(char **)(v353 + 16);
            v109 = *(_QWORD *)(v353 + 24);
            v110 = v402;
            *(_OWORD *)(v106 + 8) = *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1];
            if ((v107 & 0x80u) != 0)
              v107 = v109;
            else
              v108 = v358;
            *(_QWORD *)v106 = v105;
            *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v106 + 24) = v110;
            v402 = 0uLL;
            *(_QWORD *)(v106 + 40) = v108;
            *(_QWORD *)(v106 + 48) = v107;
            *(_BYTE *)(v106 + 56) = 16;
            __p.__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)v415 = v106;
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v41 + 24) + 40))(*(_QWORD *)(v41 + 24), v415);
            v111 = *(_QWORD *)v415;
            *(_QWORD *)v415 = 0;
            v112 = __s;
            if (v111)
            {
              v113 = *(std::__shared_weak_count **)(v111 + 32);
              if (v113)
              {
                v114 = (unint64_t *)&v113->__shared_owners_;
                do
                  v115 = __ldaxr(v114);
                while (__stlxr(v115 - 1, v114));
                if (!v115)
                {
                  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                  std::__shared_weak_count::__release_weak(v113);
                }
              }
              v116 = *(std::__shared_weak_count **)(v111 + 16);
              if (v116)
              {
                v117 = (unint64_t *)&v116->__shared_owners_;
                do
                  v118 = __ldaxr(v117);
                while (__stlxr(v118 - 1, v117));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
              }
              MEMORY[0x212BC6398](v111, 0x10F0C40B62ED6C6);
              __p.__r_.__value_.__r.__words[0] = 0;
            }
            v119 = (std::__shared_weak_count *)*((_QWORD *)&v402 + 1);
            if (*((_QWORD *)&v402 + 1))
            {
              v120 = (unint64_t *)(*((_QWORD *)&v402 + 1) + 8);
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v119);
              }
            }
            v122 = (std::__shared_weak_count *)__dst.__pn_.__r_.__value_.__r.__words[2];
            if (__dst.__pn_.__r_.__value_.__r.__words[2])
            {
              v123 = (unint64_t *)(__dst.__pn_.__r_.__value_.__r.__words[2] + 8);
              do
                v124 = __ldaxr(v123);
              while (__stlxr(v124 - 1, v123));
              if (!v124)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }
          }
          else
          {
            os_log_type_enabled(v97, OS_LOG_TYPE_ERROR);
            LOWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 0;
            v125 = (void *)_os_log_send_and_compose_impl();
            v112 = __s;
            if (v125)
              free(v125);
          }
          if (v112)
          {
            sub_20E8C003C((uint64_t)&v380, "Bad file name for FileAppender");
            sub_20E863570((uint64_t)&v380);
          }
          sub_20E863570((uint64_t)&v380);
          v126 = v385;
          if (v385)
          {
            v127 = (unint64_t *)&v385->__shared_owners_;
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
            }
          }
          goto LABEL_537;
        }
      }
      memmove(v87, v85, v86);
      goto LABEL_114;
    }
  }
LABEL_537:
  v338 = *v35;
  v339 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v35 + 16) + 16))(*(_QWORD *)(*v35 + 16));
  if (!*(_BYTE *)(v338 + 48))
  {
    *(_QWORD *)(v338 + 32) = v339;
    *(_QWORD *)(v338 + 40) = v340;
    *(_BYTE *)(v338 + 48) = 1;
    if (!*(_BYTE *)(v338 + 72))
      goto LABEL_540;
    goto LABEL_539;
  }
  *(_BYTE *)(v338 + 40) = v340;
  *(_QWORD *)(v338 + 32) = v339;
  if (*(_BYTE *)(v338 + 72))
LABEL_539:
    *(_BYTE *)(v338 + 72) = 0;
LABEL_540:
  *(std::chrono::steady_clock::time_point *)(a1 + 392) = std::chrono::steady_clock::now();
  *(_QWORD *)(a1 + 400) = 0;
  v341 = sub_210219C18();
  v342 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v36.__d_.__rep_);
  v343 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v343 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v344 = atomic_load(&qword_254A5A450);
  v345 = v342 / 1000000.0;
  if (v344)
  {
    LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 134217984;
    *(double *)((char *)__dst.__pn_.__r_.__value_.__r.__words + 4) = v345;
    v346 = (char *)_os_log_send_and_compose_impl();
    v347 = strlen(v346);
    v380.__pn_.__r_.__value_.__r.__words[0] = 0;
    pthread_threadid_np(0, (__uint64_t *)&v380);
    v348 = v380.__pn_.__r_.__value_.__r.__words[0];
    timespec_get((timespec *)&v380, 1);
    sub_210219E20(&__dst, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v341 + 1), (__int128 *)(v341 + 5), "MappingIO construction completed in %f ms", 0x29uLL, v346, v347, v348, &v380);
    std::mutex::lock(&stru_254A5A410);
    v349 = qword_254A5A458;
    for (i = unk_254A5A460; v349 != i; v349 += 40)
    {
      v351 = *(_QWORD *)(v349 + 32);
      if (!v351)
        sub_20E86D37C();
      (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)v351 + 48))(v351, &__dst);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v413 < 0)
    {
      operator delete(v411);
      if ((v410 & 0x80000000) == 0)
      {
LABEL_547:
        if (!v408)
        {
LABEL_555:
          if ((_BYTE)v405 && SHIBYTE(v404) < 0)
            operator delete(*((void **)&v402 + 1));
          if (SBYTE7(v402) < 0)
            operator delete((void *)__dst.__pn_.__r_.__value_.__l.__size_);
          if (v346)
            free(v346);
          goto LABEL_562;
        }
LABEL_553:
        if (v407 < 0)
          operator delete(v406);
        goto LABEL_555;
      }
    }
    else if ((v410 & 0x80000000) == 0)
    {
      goto LABEL_547;
    }
    operator delete(v409);
    if (!v408)
      goto LABEL_555;
    goto LABEL_553;
  }
LABEL_562:
  if (os_signpost_enabled((os_log_t)*v341))
  {
    LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 134217984;
    *(double *)((char *)__dst.__pn_.__r_.__value_.__r.__words + 4) = v345;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  return a1;
}

void sub_20EF75E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,void *a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v43;

  if (a39 && a38 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v41 - 208);
  sub_20E86665C((uint64_t)&STACK[0x230]);
  sub_20EEA00A4(&STACK[0x240]);
  sub_20EF7659C((uint64_t *)(v39 + 456));
  sub_20E86665C(v39 + 424);
  sub_20E86665C(a20);
  sub_20EF76610(a17);
  v43 = *(void **)(v40 + 88);
  if (v43)
  {
    *(_QWORD *)(v39 + 320) = v43;
    operator delete(v43);
  }
  sub_20EF766A8(v40 + 40);
  sub_20EF766A8(v40);
  sub_20E86665C(a18);
  sub_20EF7674C(a19);
  _Unwind_Resume(a1);
}

void sub_20EF764A8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A60938);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A60938))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.mapping_io");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A60930);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A60938);
  }
  *a1 = qword_254A60930;
}

void sub_20EF76544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A60938);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A60938);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EF7659C(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 32);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v5)
      operator delete(v5);
    MEMORY[0x212BC6398](v2, 0x10A0C4007E045F8);
  }
  return a1;
}

void **sub_20EF76610(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EF766A8(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[14];
      if (v7)
      {
        v8 = v2[15];
        v5 = (void *)v2[14];
        if (v8 != v7)
        {
          do
          {
            if (*(char *)(v8 - 1) < 0)
              operator delete(*(void **)(v8 - 24));
            v8 -= 24;
          }
          while (v8 != v7);
          v5 = (void *)v2[14];
        }
        v2[15] = v7;
        operator delete(v5);
      }
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_20EF7674C(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EF767A4(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  int v13;
  size_t v14;
  const char *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t **v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58[2];
  char __p[20];
  char v60;
  uint64_t v61;

  *(_QWORD *)a1 = &off_24C9F2060;
  if (!*(_BYTE *)(a1 + 88))
    goto LABEL_41;
  v60 = 19;
  strcpy(__p, "cv3d.vio.mapping_io");
  v2 = atomic_load((unsigned __int8 *)&qword_254A6DDE0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDE0))
  {
    sub_20E8BFCE4(&qword_254A6DDD8);
    __cxa_guard_release(&qword_254A6DDE0);
  }
  v58[0] = (uint64_t *)qword_254A6DDD8;
  sub_20E8C4068(v58, (uint64_t)__p, &v61);
  v3 = v61;
  if (v60 < 0)
    operator delete(*(void **)__p);
  sub_20E8C2F2C(v3, __p);
  v4 = *(uint64_t ***)__p;
  v5 = *(uint64_t ***)&__p[8];
  if (*(_QWORD *)__p == *(_QWORD *)&__p[8])
  {
    if (!*(_QWORD *)__p)
      goto LABEL_41;
    goto LABEL_31;
  }
  while (1)
  {
    v7 = *v4;
    v6 = v4[1];
    v58[0] = *v4;
    v58[1] = v6;
    if (v6)
    {
      v8 = (unint64_t *)(v6 + 1);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = sub_20E8C7130();
    v11 = (const char *)(*(uint64_t (**)(uint64_t *))(*v7 + 24))(v7);
    v12 = v11;
    v13 = v10[23];
    v14 = v13 >= 0 ? *((unsigned __int8 *)v10 + 23) : *((_QWORD *)v10 + 1);
    if (v14 == strlen(v11))
    {
      v15 = v13 >= 0 ? v10 : *(const char **)v10;
      if (!memcmp(v15, v12, v14))
        break;
    }
    if (v6)
    {
      v16 = (unint64_t *)(v6 + 1);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        (*(void (**)(uint64_t *))(*v6 + 16))(v6);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
      }
    }
    v4 += 2;
    if (v4 == v5)
      goto LABEL_30;
  }
  sub_20E8C2B7C(v3, (unint64_t)v7);
  if (v6)
  {
    v18 = (unint64_t *)(v6 + 1);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      (*(void (**)(uint64_t *))(*v6 + 16))(v6);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
    }
  }
LABEL_30:
  v4 = *(uint64_t ***)__p;
  if (*(_QWORD *)__p)
  {
LABEL_31:
    v20 = *(uint64_t ***)&__p[8];
    v21 = v4;
    if (*(uint64_t ***)&__p[8] != v4)
    {
      do
      {
        v22 = (std::__shared_weak_count *)*(v20 - 1);
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v20 -= 2;
      }
      while (v20 != v4);
      v21 = *(uint64_t ***)__p;
    }
    *(_QWORD *)&__p[8] = v4;
    operator delete(v21);
  }
LABEL_41:
  v25 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;
  if (v25)
  {
    v26 = *(_QWORD **)(v25 + 32);
    if (v26)
    {
      do
      {
        v27 = (_QWORD *)*v26;
        operator delete(v26);
        v26 = v27;
      }
      while (v27);
    }
    v28 = *(void **)(v25 + 16);
    *(_QWORD *)(v25 + 16) = 0;
    if (v28)
      operator delete(v28);
    MEMORY[0x212BC6398](v25, 0x10A0C4007E045F8);
  }
  v29 = *(std::__shared_weak_count **)(a1 + 432);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *(std::__shared_weak_count **)(a1 + 416);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = *(_QWORD *)(a1 + 344);
  if (v35)
  {
    v36 = *(_QWORD *)(a1 + 352);
    v37 = *(void **)(a1 + 344);
    if (v36 != v35)
    {
      do
      {
        v38 = *(std::__shared_weak_count **)(v36 - 8);
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v36 -= 24;
      }
      while (v36 != v35);
      v37 = *(void **)(a1 + 344);
    }
    *(_QWORD *)(a1 + 352) = v35;
    operator delete(v37);
  }
  v41 = *(void **)(a1 + 312);
  if (v41)
  {
    *(_QWORD *)(a1 + 320) = v41;
    operator delete(v41);
  }
  v42 = *(_QWORD **)(a1 + 280);
  if (v42)
  {
    do
    {
      v51 = (_QWORD *)*v42;
      v52 = v42[14];
      if (v52)
      {
        v53 = v42[15];
        v50 = (void *)v42[14];
        if (v53 != v52)
        {
          do
          {
            if (*(char *)(v53 - 1) < 0)
              operator delete(*(void **)(v53 - 24));
            v53 -= 24;
          }
          while (v53 != v52);
          v50 = (void *)v42[14];
        }
        v42[15] = v52;
        operator delete(v50);
      }
      operator delete(v42);
      v42 = v51;
    }
    while (v51);
  }
  v43 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v43)
    operator delete(v43);
  v44 = *(_QWORD **)(a1 + 240);
  if (v44)
  {
    do
    {
      v55 = (_QWORD *)*v44;
      v56 = v44[14];
      if (v56)
      {
        v57 = v44[15];
        v54 = (void *)v44[14];
        if (v57 != v56)
        {
          do
          {
            if (*(char *)(v57 - 1) < 0)
              operator delete(*(void **)(v57 - 24));
            v57 -= 24;
          }
          while (v57 != v56);
          v54 = (void *)v44[14];
        }
        v44[15] = v56;
        operator delete(v54);
      }
      operator delete(v44);
      v44 = v55;
    }
    while (v55);
  }
  v45 = *(void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v45)
    operator delete(v45);
  v46 = *(std::__shared_weak_count **)(a1 + 200);
  if (!v46)
    goto LABEL_80;
  v47 = (unint64_t *)&v46->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (v48)
  {
LABEL_80:
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      goto LABEL_81;
LABEL_102:
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
LABEL_103:
    operator delete(*(void **)(a1 + 8));
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
  std::__shared_weak_count::__release_weak(v46);
  if (*(char *)(a1 + 119) < 0)
    goto LABEL_102;
LABEL_81:
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_103;
  return a1;
}

void sub_20EF76CB0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_guard_abort(&qword_254A6DDE0);
  if (a16 < 0)
    operator delete(__p);
  sub_20E860DA4(a1);
}

void sub_20EF76D08(uint64_t a1)
{
  sub_20EF767A4(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EF76D2C(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, void **a4@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    LOBYTE(v21) = a3;
    *((_QWORD *)&v21 + 1) = a1;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    LOBYTE(v21) = a3;
    *((_QWORD *)&v21 + 1) = a1;
  }
  v23 = 0;
  v10 = (char *)operator new(0x28uLL);
  v11 = (uint64_t)v10;
  *(_QWORD *)v10 = &off_24C9F2118;
  *((_QWORD *)v10 + 1) = v6;
  *((_QWORD *)v10 + 2) = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_OWORD *)(v10 + 24) = v21;
  v23 = v10;
  v20 = (char *)operator new(0x28uLL);
  strcpy(v20, "Failed on location push with msg: ");
  sub_20EF89FB8(v11, a4);
  operator delete(v20);
  v14 = v23;
  if (v23 == v22)
  {
    v15 = 4;
    v14 = v22;
    goto LABEL_15;
  }
  if (v23)
  {
    v15 = 5;
LABEL_15:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  if (v5)
  {
    v16 = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v5)
  {
    v18 = (unint64_t *)&v5->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20EF76F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::string *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,void **__pa,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  std::runtime_error *v30;
  uint64_t *v31;
  void **p_pa;
  std::runtime_error *exception;
  std::runtime_error *v34;
  void *v35;
  uint64_t *v36;
  void **v37;
  std::runtime_error *v38;
  void *v39;
  void *v40;
  uint64_t *v41;
  void **v42;
  std::runtime_error *v43;
  uint64_t *v44;
  void **v45;
  std::runtime_error *v46;

  if (a2)
  {
    if (a2 == 4)
    {
      v30 = (std::runtime_error *)__cxa_begin_catch(exception_object);
      v31 = sub_210219C18();
      a21 = ((uint64_t (*)(std::runtime_error *))v30->what)(v30);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)&a21);
      if (a27 >= 0)
        p_pa = (void **)&__pa;
      else
        p_pa = __pa;
      *(_QWORD *)(v28 - 96) = p_pa;
      sub_20EF8976C((uint64_t)v31, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)(v28 - 96));
      if (a27 < 0)
        operator delete(__pa);
      sub_20EF892B4(v27);
      sub_20EF6FC14(*(uint64_t ***)(v27 + 424), 0);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      v34 = std::runtime_error::runtime_error(exception, v30);
      v34->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
      LODWORD(v34[1].__vftable) = v30[1].__vftable;
      __cxa_throw(v34, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    if (a2 == 3)
    {
      v35 = __cxa_begin_catch(exception_object);
      v36 = sub_210219C18();
      a21 = (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 16))(v35);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)&a21);
      if (a27 >= 0)
        v37 = (void **)&__pa;
      else
        v37 = __pa;
      *(_QWORD *)(v28 - 96) = v37;
      sub_20EF88FA8((uint64_t)v36, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)(v28 - 96));
      if (a27 < 0)
        operator delete(__pa);
      sub_20EF892B4(v27);
      sub_20EF6FC14(*(uint64_t ***)(v27 + 424), 0);
      v38 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      *(_QWORD *)(v28 - 96) = (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 16))(v35);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)(v28 - 96));
      std::runtime_error::runtime_error(v38, (const std::string *)&__pa);
      v38->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
      LODWORD(v38[1].__vftable) = 1;
      __cxa_throw(v38, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v39 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      v40 = v39;
      v41 = sub_210219C18();
      a21 = (*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)&a21);
      if (a27 >= 0)
        v42 = (void **)&__pa;
      else
        v42 = __pa;
      *(_QWORD *)(v28 - 96) = v42;
      sub_20EF88B48((uint64_t)v41, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)(v28 - 96));
      if (a27 < 0)
        operator delete(__pa);
      sub_20EF6FC14(*(uint64_t ***)(v27 + 424), 0);
      v43 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      *(_QWORD *)(v28 - 96) = (*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)(v28 - 96));
      std::runtime_error::runtime_error(v43, (const std::string *)&__pa);
      v43->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
      LODWORD(v43[1].__vftable) = 1;
      __cxa_throw(v43, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v44 = sub_210219C18();
    sub_20EF88AB8((std::string *)&__pa, (uint64_t *)&a10);
    if (a27 >= 0)
      v45 = (void **)&__pa;
    else
      v45 = __pa;
    *(_QWORD *)(v28 - 96) = v45;
    sub_20EF887AC((uint64_t)v44, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)(v28 - 96));
    if (a27 < 0)
      operator delete(__pa);
    sub_20EF6FC14(*(uint64_t ***)(v27 + 424), 0);
    v46 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::runtime_error::runtime_error(v46, (const std::string *)&a10);
    v46->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
    LODWORD(v46[1].__vftable) = 2;
    __cxa_throw(v46, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EF77444(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  std::__shared_weak_count *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v21 = v5;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    v21 = 0;
  }
  v23 = 0;
  v10 = operator new(0x20uLL);
  v11 = (uint64_t)v10;
  *v10 = &off_24C9F21C0;
  v10[1] = v6;
  v10[2] = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v10[3] = a1;
  v23 = v10;
  v20 = (char *)operator new(0x28uLL);
  strcpy(v20, "Failed on save bundle push with msg: ");
  sub_20EF8EA44(v11, a3);
  operator delete(v20);
  v14 = v23;
  if (v23 == v22)
  {
    v15 = 4;
    v14 = v22;
    goto LABEL_15;
  }
  if (v23)
  {
    v15 = 5;
LABEL_15:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v5)
  {
    v18 = (unint64_t *)&v5->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20EF77620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::string *a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, void **__pa,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  std::runtime_error *v28;
  uint64_t *v29;
  void **p_pa;
  std::runtime_error *exception;
  std::runtime_error *v32;
  void *v33;
  uint64_t *v34;
  void **v35;
  std::runtime_error *v36;
  void *v37;
  void *v38;
  uint64_t *v39;
  void **v40;
  std::runtime_error *v41;
  uint64_t *v42;
  void **v43;
  std::runtime_error *v44;

  if (a2)
  {
    if (a2 == 4)
    {
      v28 = (std::runtime_error *)__cxa_begin_catch(exception_object);
      v29 = sub_210219C18();
      a19 = ((uint64_t (*)(std::runtime_error *))v28->what)(v28);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)&a19);
      if (a25 >= 0)
        p_pa = (void **)&__pa;
      else
        p_pa = __pa;
      *(_QWORD *)(v26 - 96) = p_pa;
      sub_20EF8E1F8((uint64_t)v29, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)(v26 - 96));
      if (a25 < 0)
        operator delete(__pa);
      sub_20EF8DD40(v25);
      sub_20EF6FC14(*(uint64_t ***)(v25 + 424), 0);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      v32 = std::runtime_error::runtime_error(exception, v28);
      v32->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
      LODWORD(v32[1].__vftable) = v28[1].__vftable;
      __cxa_throw(v32, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    if (a2 == 3)
    {
      v33 = __cxa_begin_catch(exception_object);
      v34 = sub_210219C18();
      a19 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)&a19);
      if (a25 >= 0)
        v35 = (void **)&__pa;
      else
        v35 = __pa;
      *(_QWORD *)(v26 - 96) = v35;
      sub_20EF8DA34((uint64_t)v34, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)(v26 - 96));
      if (a25 < 0)
        operator delete(__pa);
      sub_20EF8DD40(v25);
      sub_20EF6FC14(*(uint64_t ***)(v25 + 424), 0);
      v36 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      *(_QWORD *)(v26 - 96) = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)(v26 - 96));
      std::runtime_error::runtime_error(v36, (const std::string *)&__pa);
      v36->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
      LODWORD(v36[1].__vftable) = 1;
      __cxa_throw(v36, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v37 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      v38 = v37;
      v39 = sub_210219C18();
      a19 = (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)&a19);
      if (a25 >= 0)
        v40 = (void **)&__pa;
      else
        v40 = __pa;
      *(_QWORD *)(v26 - 96) = v40;
      sub_20EF8D728((uint64_t)v39, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)(v26 - 96));
      if (a25 < 0)
        operator delete(__pa);
      sub_20EF6FC14(*(uint64_t ***)(v25 + 424), 0);
      v41 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      *(_QWORD *)(v26 - 96) = (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)(v26 - 96));
      std::runtime_error::runtime_error(v41, (const std::string *)&__pa);
      v41->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
      LODWORD(v41[1].__vftable) = 1;
      __cxa_throw(v41, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v42 = sub_210219C18();
    sub_20EF88AB8((std::string *)&__pa, (uint64_t *)&a10);
    if (a25 >= 0)
      v43 = (void **)&__pa;
    else
      v43 = __pa;
    *(_QWORD *)(v26 - 96) = v43;
    sub_20EF8D41C((uint64_t)v42, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)(v26 - 96));
    if (a25 < 0)
      operator delete(__pa);
    sub_20EF6FC14(*(uint64_t ***)(v25 + 424), 0);
    v44 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::runtime_error::runtime_error(v44, (const std::string *)&a10);
    v44->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
    LODWORD(v44[1].__vftable) = 2;
    __cxa_throw(v44, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EF77B38(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v19 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v19 = 0;
  }
  v21 = 0;
  v8 = operator new(0x20uLL);
  v9 = (uint64_t)v8;
  *v8 = &off_24C9F22A0;
  v8[1] = v4;
  v8[2] = v3;
  if (v3)
  {
    v10 = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v8[3] = a1;
  v21 = v8;
  v18 = (char *)operator new(0x30uLL);
  strcpy(v18, "Failed on debug frame event push with msg: ");
  sub_20EF918D4(v9);
  operator delete(v18);
  v12 = v21;
  if (v21 == v20)
  {
    v13 = 4;
    v12 = v20;
    goto LABEL_15;
  }
  if (v21)
  {
    v13 = 5;
LABEL_15:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v3)
  {
    v16 = (unint64_t *)&v3->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EF77D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::string *a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, void **__pa,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  std::runtime_error *v28;
  uint64_t *v29;
  void **p_pa;
  std::runtime_error *exception;
  std::runtime_error *v32;
  void *v33;
  uint64_t *v34;
  void **v35;
  std::runtime_error *v36;
  void *v37;
  void *v38;
  uint64_t *v39;
  void **v40;
  std::runtime_error *v41;
  uint64_t *v42;
  void **v43;
  std::runtime_error *v44;

  if (a2)
  {
    if (a2 == 4)
    {
      v28 = (std::runtime_error *)__cxa_begin_catch(exception_object);
      v29 = sub_210219C18();
      a19 = ((uint64_t (*)(std::runtime_error *))v28->what)(v28);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)&a19);
      if (a25 >= 0)
        p_pa = (void **)&__pa;
      else
        p_pa = __pa;
      *(_QWORD *)(v26 - 80) = p_pa;
      sub_20EF91088((uint64_t)v29, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)(v26 - 80));
      if (a25 < 0)
        operator delete(__pa);
      sub_20EF90BD0(v25);
      sub_20EF6FC14(*(uint64_t ***)(v25 + 424), 0);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      v32 = std::runtime_error::runtime_error(exception, v28);
      v32->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
      LODWORD(v32[1].__vftable) = v28[1].__vftable;
      __cxa_throw(v32, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    if (a2 == 3)
    {
      v33 = __cxa_begin_catch(exception_object);
      v34 = sub_210219C18();
      a19 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)&a19);
      if (a25 >= 0)
        v35 = (void **)&__pa;
      else
        v35 = __pa;
      *(_QWORD *)(v26 - 80) = v35;
      sub_20EF908C4((uint64_t)v34, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)(v26 - 80));
      if (a25 < 0)
        operator delete(__pa);
      sub_20EF90BD0(v25);
      sub_20EF6FC14(*(uint64_t ***)(v25 + 424), 0);
      v36 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      *(_QWORD *)(v26 - 80) = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)(v26 - 80));
      std::runtime_error::runtime_error(v36, (const std::string *)&__pa);
      v36->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
      LODWORD(v36[1].__vftable) = 1;
      __cxa_throw(v36, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v37 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      v38 = v37;
      v39 = sub_210219C18();
      a19 = (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)&a19);
      if (a25 >= 0)
        v40 = (void **)&__pa;
      else
        v40 = __pa;
      *(_QWORD *)(v26 - 80) = v40;
      sub_20EF905B8((uint64_t)v39, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)(v26 - 80));
      if (a25 < 0)
        operator delete(__pa);
      sub_20EF6FC14(*(uint64_t ***)(v25 + 424), 0);
      v41 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      *(_QWORD *)(v26 - 80) = (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
      sub_20EF88E54((uint64_t)&__pa, (__int128 *)&a10, (const char *)(v26 - 80));
      std::runtime_error::runtime_error(v41, (const std::string *)&__pa);
      v41->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
      LODWORD(v41[1].__vftable) = 1;
      __cxa_throw(v41, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v42 = sub_210219C18();
    sub_20EF88AB8((std::string *)&__pa, (uint64_t *)&a10);
    if (a25 >= 0)
      v43 = (void **)&__pa;
    else
      v43 = __pa;
    *(_QWORD *)(v26 - 80) = v43;
    sub_20EF902AC((uint64_t)v42, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)(v26 - 80));
    if (a25 < 0)
      operator delete(__pa);
    sub_20EF6FC14(*(uint64_t ***)(v25 + 424), 0);
    v44 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::runtime_error::runtime_error(v44, (const std::string *)&a10);
    v44->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
    LODWORD(v44[1].__vftable) = 2;
    __cxa_throw(v44, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF7821C(uint64_t a1, _BYTE *a2)
{
  uint64_t *v4;
  unsigned __int8 v5;
  int v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t result;
  int v15;
  __uint64_t v16[2];
  void *v17[3];
  char v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  char v24;
  void *v25;
  char v26;
  void *__p;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 304))
  {
    sub_20EF785E4(a1);
    *(_BYTE *)(a1 + 304) = 1;
  }
  *(_BYTE *)(a1 + 448) = *a2;
  v4 = sub_210219C18();
  v5 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v7 = *(unsigned __int8 *)(a1 + 448);
    LODWORD(v17[0]) = 67109120;
    HIDWORD(v17[0]) = v7;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v10 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(v17, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v4 + 1), (__int128 *)(v4 + 5), "MappingIOPRMode:mode:%d", 0x17uLL, v8, v9, v10, v16);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v28 < 0)
    {
      operator delete(__p);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_10:
        if (!v24)
        {
LABEL_16:
          if (v21 && v20 < 0)
            operator delete(v19);
          if (v18 < 0)
            operator delete(v17[1]);
          if (v8)
            free(v8);
          goto LABEL_23;
        }
LABEL_14:
        if (v23 < 0)
          operator delete(v22);
        goto LABEL_16;
      }
    }
    else if ((v26 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v25);
    if (!v24)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_23:
  result = os_signpost_enabled((os_log_t)*v4);
  if ((_DWORD)result)
  {
    v15 = *(unsigned __int8 *)(a1 + 448);
    LODWORD(v17[0]) = 67109120;
    HIDWORD(v17[0]) = v15;
    return _os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EF78528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (v47)
        free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

uint64_t sub_20EF785E4(uint64_t a1)
{
  __darwin_time_t tv_sec;
  uint64_t i;
  void *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 *v11;
  __int128 *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 *v20;
  __int128 *v21;
  void **v22;
  uint64_t *v23;
  double v24;
  unsigned __int8 v25;
  unint64_t v26;
  double v27;
  char *v28;
  size_t v29;
  __darwin_time_t v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  uint64_t result;
  std::chrono::steady_clock::time_point v35;
  timespec v36[7];
  _BYTE v37[24];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  void *__p;
  void **v44;
  uint64_t v45;
  __int128 v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v35.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_20EF5F824(a1 + 8, *(_QWORD *)(a1 + 440), &v36[0].tv_sec);
  tv_sec = v36[0].tv_sec;
  for (i = v36[0].tv_nsec; tv_sec != i; tv_sec += 160)
  {
    if (!*(_BYTE *)(tv_sec + 152))
      continue;
    v5 = (__int128 *)(tv_sec + 24);
    sub_20EF7984C(tv_sec, tv_sec + 24, *(_QWORD *)(a1 + 440));
    if (*(_BYTE *)(tv_sec + 88))
    {
      v6 = *(_QWORD *)(tv_sec + 24);
      v7 = *v5;
      v8 = *(_OWORD *)(tv_sec + 40);
      v9 = *(_OWORD *)(tv_sec + 56);
      v10 = *(_OWORD *)(tv_sec + 88);
      v40 = *(_OWORD *)(tv_sec + 72);
      v41 = v10;
      *(_QWORD *)v37 = v6;
      v42 = *(_QWORD *)(tv_sec + 104);
      v38 = v8;
      v39 = v9;
      *(_OWORD *)&v37[8] = v7;
      v44 = 0;
      v45 = 0;
      v11 = *(__int128 **)(tv_sec + 112);
      v12 = *(__int128 **)(tv_sec + 120);
      __p = 0;
      sub_20E8ADB20((char *)&__p, v11, v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 3));
      v46 = *(_OWORD *)(tv_sec + 136);
      sub_20EF921DC(a1 + 224, *(unint64_t *)v37, (uint64_t)v37);
      v13 = (void **)__p;
      if (!__p)
        continue;
      v14 = v44;
      v4 = __p;
      if (v44 == __p)
        goto LABEL_4;
      do
      {
        if (*((char *)v14 - 1) < 0)
          operator delete(*(v14 - 3));
        v14 -= 3;
      }
      while (v14 != v13);
    }
    else
    {
      v15 = *(_QWORD *)(tv_sec + 24);
      v16 = *v5;
      v17 = *(_OWORD *)(tv_sec + 40);
      v18 = *(_OWORD *)(tv_sec + 56);
      v19 = *(_OWORD *)(tv_sec + 88);
      v40 = *(_OWORD *)(tv_sec + 72);
      v41 = v19;
      *(_QWORD *)v37 = v15;
      v42 = *(_QWORD *)(tv_sec + 104);
      v38 = v17;
      v39 = v18;
      *(_OWORD *)&v37[8] = v16;
      v44 = 0;
      v45 = 0;
      v20 = *(__int128 **)(tv_sec + 112);
      v21 = *(__int128 **)(tv_sec + 120);
      __p = 0;
      sub_20E8ADB20((char *)&__p, v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v20) >> 3));
      v46 = *(_OWORD *)(tv_sec + 136);
      sub_20EF921DC(a1 + 264, *(unint64_t *)v37, (uint64_t)v37);
      v13 = (void **)__p;
      if (!__p)
        continue;
      v22 = v44;
      v4 = __p;
      if (v44 == __p)
        goto LABEL_4;
      do
      {
        if (*((char *)v22 - 1) < 0)
          operator delete(*(v22 - 3));
        v22 -= 3;
      }
      while (v22 != v13);
    }
    v4 = __p;
LABEL_4:
    v44 = v13;
    operator delete(v4);
  }
  *(_QWORD *)v37 = v36;
  sub_20EB9C69C((void ***)v37);
  v23 = sub_210219C18();
  v24 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v35.__d_.__rep_);
  v25 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v26 = atomic_load(&qword_254A5A450);
  v27 = v24 / 1000000.0;
  if (v26)
  {
    *(_DWORD *)v37 = 134217984;
    *(double *)&v37[4] = v27;
    v28 = (char *)_os_log_send_and_compose_impl();
    v29 = strlen(v28);
    v36[0].tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)v36);
    v30 = v36[0].tv_sec;
    timespec_get(v36, 1);
    sub_210219E20(v37, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v23 + 1), (__int128 *)(v23 + 5), "MappingIO metadata load completed in %f ms", 0x2AuLL, v28, v29, v30, v36);
    std::mutex::lock(&stru_254A5A410);
    v31 = qword_254A5A458;
    for (j = unk_254A5A460; v31 != j; v31 += 40)
    {
      v33 = *(_QWORD *)(v31 + 32);
      if (!v33)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v33 + 48))(v33, v37);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v47 < 0)
    {
      operator delete((void *)v46);
      if ((SHIBYTE(v45) & 0x80000000) == 0)
      {
LABEL_27:
        if (!(_BYTE)v42)
        {
LABEL_33:
          if ((_BYTE)v40 && SHIBYTE(v39) < 0)
            operator delete(*((void **)&v38 + 1));
          if (SBYTE7(v38) < 0)
            operator delete(*(void **)&v37[8]);
          if (v28)
            free(v28);
          goto LABEL_40;
        }
LABEL_31:
        if (SHIBYTE(v41) < 0)
          operator delete(*((void **)&v40 + 1));
        goto LABEL_33;
      }
    }
    else if ((SHIBYTE(v45) & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(__p);
    if (!(_BYTE)v42)
      goto LABEL_33;
    goto LABEL_31;
  }
LABEL_40:
  result = os_signpost_enabled((os_log_t)*v23);
  if ((_DWORD)result)
  {
    *(_DWORD *)v37 = 134217984;
    *(double *)&v37[4] = v27;
    return _os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20EF78AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *category, uint64_t a20,uint64_t a21,uint64_t a22,std::string *a23,char a24,uint64_t a25,uint64_t a26,char *categorya,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;

  sub_20E96E218((uint64_t)&a31);
  if (v31)
  {
    free(v31);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EF79524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,void *a32,int a33,__int16 a34,char a35,char a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  if (a37)
  {
    if (a36 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EF797A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;

  if (a36 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v37)
  {
LABEL_6:
    __cxa_end_catch();
    JUMPOUT(0x20EF7983CLL);
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

void sub_20EF797E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;

  if (a36 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v37)
  {
LABEL_6:
    __cxa_end_catch();
    JUMPOUT(0x20EF7983CLL);
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

void sub_20EF7984C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v6;
  void **v7;
  void **v8;
  void *v9;
  void **v10;
  void **v11;
  uint64_t v12;
  void **v13;
  __n128 v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void **v19;
  uint64_t v20;
  void **v21;
  void *v22;
  void **v23;
  void *__p;
  void **v25;
  void **v26;
  void **v27;

  sub_210224314(a1, 1u, "*", 1uLL, a3, (uint64_t *)&__p);
  v6.n128_f64[0] = sub_20EF83A74((uint64_t)&v26, (__int128 **)&__p);
  v7 = (void **)__p;
  if (__p)
  {
    v8 = v25;
    v9 = __p;
    if (v25 != __p)
    {
      do
      {
        if (*((char *)v8 - 9) < 0)
          operator delete(*(v8 - 4));
        v8 -= 4;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v25 = v7;
    operator delete(v9);
  }
  v10 = v26;
  v11 = v27;
  if (v26 == v27)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    v13 = v26;
    do
    {
      v12 += (*(uint64_t (**)(uint64_t, void **, __n128))(*(_QWORD *)a3 + 192))(a3, v13, v6);
      v13 += 3;
    }
    while (v13 != v11);
  }
  *(_QWORD *)(a2 + 112) = v12;
  sub_210224314(a1, 1u, "*.msgpack", 9uLL, a3, (uint64_t *)&v22);
  v14.n128_f64[0] = sub_20EF83A74((uint64_t)&__p, (__int128 **)&v22);
  v15 = (void **)v22;
  if (v22)
  {
    v16 = v23;
    v17 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v16 - 9) < 0)
          operator delete(*(v16 - 4));
        v16 -= 4;
      }
      while (v16 != v15);
      v17 = v22;
    }
    v23 = v15;
    operator delete(v17);
  }
  v18 = (void **)__p;
  v19 = v25;
  if (__p == v25)
  {
    *(_QWORD *)(a2 + 120) = 0;
    if (!v18)
      goto LABEL_32;
    goto LABEL_31;
  }
  v20 = 0;
  v21 = (void **)__p;
  do
  {
    v20 += (*(uint64_t (**)(uint64_t, void **, __n128))(*(_QWORD *)a3 + 192))(a3, v21, v14);
    v21 += 3;
  }
  while (v21 != v19);
  *(_QWORD *)(a2 + 120) = v20;
  if (v18)
  {
    do
    {
      if (*((char *)v19 - 1) < 0)
        operator delete(*(v19 - 3));
      v19 -= 3;
    }
    while (v19 != v18);
LABEL_31:
    operator delete(v18);
  }
LABEL_32:
  if (v10)
  {
    for (; v11 != v10; v11 -= 3)
    {
      if (*((char *)v11 - 1) < 0)
        operator delete(*(v11 - 3));
    }
    operator delete(v10);
  }
}

void sub_20EF79A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EB9B93C((void **)va);
  sub_20E8F74DC((void **)va1);
  _Unwind_Resume(a1);
}

void sub_20EF79A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E8F74DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EF79A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EB9B93C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20EF79AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E8F74DC((void **)va);
  sub_20E8F74DC((void **)va1);
  _Unwind_Resume(a1);
}

void sub_20EF79AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20E8F74DC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF79AD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 104);
    v4 = *(void **)(a1 + 96);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EF79B44(uint64_t a1, char *a2, const char *a3)
{
  uint64_t result;
  _DWORD v5[6];
  int v6;
  _QWORD **v7;
  const char *v8;
  _DWORD *v9;
  const char *v10;
  const char *v11;
  _QWORD *v12;

  v6 = 0;
  sub_20EAA68C4(v5, a2);
  if (*(_QWORD *)a3)
  {
    v7 = (_QWORD **)v5;
    v8 = a3;
    v9 = v5;
    v10 = a3;
    v11 = a3;
    if (v6 != -1)
    {
      v12 = &v7;
      ((void (*)(_QWORD **, _DWORD *))off_24C9F20C0[v6])(&v12, v5);
      goto LABEL_6;
    }
LABEL_10:
    sub_20E877AB8();
  }
  v7 = (_QWORD **)v5;
  v8 = "nullptr";
  v9 = v5;
  v10 = "nullptr";
  v11 = "nullptr";
  if (v6 == -1)
    goto LABEL_10;
  v12 = &v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C9F20D8[v6])(&v12, v5);
LABEL_6:
  if (v6 == -1)
    sub_20E877AB8();
  v7 = &v12;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9F20F0[v6])(&v7, v5);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9F20A8[v6])(&v7, v5);
  return result;
}

void sub_20EF79C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF79C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF79C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF79CA8(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20EA7737C(v4, "Filesystem error during table of contents load: ");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24C9F20C0[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_20E877AB8();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C9F20D8[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_20E877AB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9F20F0[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9F20A8[v5])(&v6, v4);
  return result;
}

void sub_20EF79DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF79DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF79E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF79E14(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20EA76F04(v4, "Memory allocation error during table of contents load: ");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24C9F20C0[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_20E877AB8();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C9F20D8[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_20E877AB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9F20F0[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9F20A8[v5])(&v6, v4);
  return result;
}

void sub_20EF79F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF79F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF79F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20EF79F80(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  unsigned __int8 v5;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __uint64_t v20[2];
  void *v21[3];
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  void *v29;
  char v30;
  void *__p;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 304)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 403, (uint64_t)"has_loaded_toc_ && \"Submap metadata has not been loaded.\"", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v2 = *(_QWORD *)(a1 + 384);
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 448))
    {
      sub_20EF7A3DC(a1, (uint64_t ***)(*(_QWORD *)(a1 + 344)+ 24* (*(_QWORD *)(a1 + 368)% (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 352) - *(_QWORD *)(a1 + 344)) >> 3)))+ 8), *(_QWORD *)(a1 + 440));
LABEL_28:
      v13 = (_QWORD *)(*(_QWORD *)(a1 + 344) + 24 * *(_QWORD *)(a1 + 368));
      *v13 = 0;
      v13[1] = 0;
      v14 = (std::__shared_weak_count *)v13[2];
      v13[2] = 0;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 352) - *(_QWORD *)(a1 + 344)) >> 3);
      v18 = *(_QWORD *)(a1 + 368) + 1;
      if (v18 < v17)
        v17 = 0;
      *(_QWORD *)(a1 + 368) = v18 - v17;
      --*(_QWORD *)(a1 + 384);
      *(_BYTE *)(a1 + 216) = 0;
      return v2 != 0;
    }
    v3 = sub_210219C18();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 344)
                   + 24
                   * (*(_QWORD *)(a1 + 368)
                    % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 352) - *(_QWORD *)(a1 + 344)) >> 3))));
    v5 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_26:
      if (os_signpost_enabled((os_log_t)*v3))
      {
        LODWORD(v21[0]) = 67109120;
        HIDWORD(v21[0]) = v4;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      goto LABEL_28;
    }
    LODWORD(v21[0]) = 67109120;
    HIDWORD(v21[0]) = v4;
    v7 = (char *)_os_log_send_and_compose_impl();
    v8 = strlen(v7);
    v20[0] = 0;
    pthread_threadid_np(0, v20);
    v9 = v20[0];
    timespec_get((timespec *)v20, 1);
    sub_210219E20(v21, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v3 + 1), (__int128 *)(v3 + 5), "MappingIOQueueSaveErr:Dropping save bundle with ID: %u", 0x36uLL, v7, v8, v9, v20);
    std::mutex::lock(&stru_254A5A410);
    v10 = qword_254A5A458;
    for (i = unk_254A5A460; v10 != i; v10 += 40)
    {
      v12 = *(_QWORD *)(v10 + 32);
      if (!v12)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 48))(v12, v21);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v32 < 0)
    {
      operator delete(__p);
      if ((v30 & 0x80000000) == 0)
      {
LABEL_12:
        if (!v28)
        {
LABEL_19:
          if (v25 && v24 < 0)
            operator delete(v23);
          if (v22 < 0)
            operator delete(v21[1]);
          if (v7)
            free(v7);
          goto LABEL_26;
        }
LABEL_17:
        if (v27 < 0)
          operator delete(v26);
        goto LABEL_19;
      }
    }
    else if ((v30 & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(v29);
    if (!v28)
      goto LABEL_19;
    goto LABEL_17;
  }
  return v2 != 0;
}

void sub_20EF7A39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF7A3DC(uint64_t a1, uint64_t ***a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  unsigned __int8 v20;
  int v21;
  unint64_t v22;
  __int128 *v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t ***v38;
  void *v39;
  uint64_t v40;
  int v41;
  uint64_t **v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  std::string *v49;
  uint64_t v50;
  __int128 v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int8x8_t v60;
  uint8x8_t v61;
  uint64_t v62;
  int8x8_t v63;
  unint64_t v64;
  uint8x8_t v65;
  unint64_t v66;
  _QWORD **v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t **v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _QWORD *j;
  int8x8_t v84;
  unint64_t v85;
  uint8x8_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  const char **v93;
  char *v94;
  std::string *v95;
  uint64_t v96;
  uint64_t v97;
  const char **v98;
  uint64_t v99;
  void **v100;
  void **v101;
  uint64_t v102;
  __n128 v103;
  void **v104;
  void **v105;
  void *v106;
  unint64_t v107;
  char v108;
  void *v109;
  std::string::size_type size;
  std::string::size_type v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  void **v115;
  uint64_t v116;
  size_t v117;
  const char *v118;
  unsigned __int8 v119;
  unsigned __int8 v120;
  const char *v121;
  size_t v122;
  std::string::size_type *p_size;
  uint64_t v124;
  uint64_t v125;
  __int128 *v126;
  NSObject *v127;
  uint64_t v128;
  uint64_t v129;
  size_t v130;
  void *v131;
  _QWORD *v132;
  size_t v133;
  size_t v134;
  char *v135;
  void *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  char v141;
  _QWORD *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *p_shared_owners;
  unint64_t v146;
  char *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::string::size_type v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  std::string::size_type v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  const char *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  void **v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::string *v187;
  std::string *v188;
  std::string *v189;
  __int128 *v190;
  __int128 *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  __int128 v196;
  int v198;
  unint64_t v199;
  uint64_t v200;
  std::runtime_error *v201;
  void **v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  const char *v206;
  int v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v211;
  uint64_t *v212;
  std::string::size_type v213;
  uint64_t v214;
  int v215;
  unint64_t v216;
  uint64_t v217;
  std::runtime_error *v218;
  unsigned __int8 v219;
  std::string::size_type v220;
  const char *v221;
  NSObject *v222;
  void **v223;
  uint64_t v224;
  uint64_t *v225;
  std::string::size_type v226;
  uint64_t v227;
  unsigned __int8 v228;
  unint64_t v229;
  char *v230;
  NSObject *v231;
  std::runtime_error *exception;
  unsigned __int8 v233;
  unint64_t v234;
  char *v235;
  NSObject *v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  const char *__src;
  int v242;
  char *__s;
  unint64_t v244;
  _QWORD *v245;
  uint64_t ***v246;
  char *v247;
  unint64_t v248;
  _BOOL4 v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  std::string v254;
  __int128 v255;
  uint64_t v256;
  void *v257[2];
  uint64_t v258;
  _QWORD v259[2];
  void *v260[2];
  char v261;
  uint64_t v262[2];
  uint64_t v263;
  void *v264;
  __int128 *v265;
  void *v266[2];
  char v267;
  void *v268[2];
  unsigned __int8 v269;
  void *v270;
  char *v271;
  _DWORD v272[2];
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  std::string v278;
  uint64_t v279;
  std::string category;
  char *v281;
  std::__shared_weak_count *v282;
  void *v283;
  void **rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v285;
  int v286;
  const char *v287;
  int v288;
  const char *v289;
  uint64_t v290;
  std::__shared_weak_count *v291;
  std::string v292;
  __int128 v293;
  __int128 v294;
  unint64_t v295;
  uint64_t v296;
  __int128 v297;
  void *v298;
  void **v299;
  uint64_t v300;
  _BYTE v301[88];
  std::string *__str[6];
  char v303;
  const char *v304;
  __int128 v305;
  const char **v306;
  uint64_t v307[6];

  v307[3] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 304)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 600, (uint64_t)"has_loaded_toc_ && \"Submap metadata has not been loaded.\"", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v6 = *a2;
  if (!*a2)
  {
    sub_20EF764A8(v262);
    if (**(int **)(v262[0] + 56) <= 5)
    {
      v207 = *(unsigned __int8 *)(v262[0] + 72);
      v208 = sub_20E8C31DC(v262[0], "OSLogSurrogateAppender", 1, 0);
      v209 = v208 ? v208 + 16 : 0;
      if (v207 || v208 != 0)
      {
        v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v262;
        v292.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v292.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v293) = 5;
        *((_QWORD *)&v293 + 1) = "unknown file";
        LODWORD(v294) = 603;
        v296 = 0;
        *((_QWORD *)&v294 + 1) = "unknown function";
        v295 = 0;
        v211 = *(_QWORD *)v292.__r_.__value_.__l.__data_;
        v212 = (uint64_t *)(*(_QWORD *)v292.__r_.__value_.__l.__data_ + 16);
        if (*(char *)(*(_QWORD *)v292.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v214 = *(_QWORD *)(v211 + 16);
          v213 = *(_QWORD *)(v211 + 24);
        }
        else
        {
          v213 = *(unsigned __int8 *)(*(_QWORD *)v292.__r_.__value_.__l.__data_ + 39);
          v214 = *(_QWORD *)v292.__r_.__value_.__l.__data_ + 16;
        }
        category.__r_.__value_.__r.__words[0] = v214;
        category.__r_.__value_.__l.__size_ = v213;
        v228 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v228 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v301);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v301);
          if (v301[24] && (v301[23] & 0x80000000) != 0)
            operator delete(*(void **)v301);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v229 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v230 = byte_254A4A4F8;
        }
        else
        {
          v229 = *(_QWORD *)&byte_254A4A4F8[8];
          v230 = *(char **)byte_254A4A4F8;
        }
        v283 = v230;
        rep = (void **)v229;
        *(_QWORD *)v301 = os_log_create(v230, category.__r_.__value_.__l.__data_);
        sub_20E86E5A8(&v301[8], (uint64_t)&v283);
        sub_20E86E5A8(&v301[40], (uint64_t)&category);
        v231 = *(NSObject **)v301;
        sub_20E86E44C((uint64_t)v301);
        sub_20EF9C1BC(v209, v212, v231, OS_LOG_TYPE_ERROR);
        if (v207)
        {
          sub_20E8C003C((uint64_t)&v292, "Attempt to save empty bundle.");
          sub_20E863570((uint64_t)&v292);
        }
        sub_20E863714((uint64_t)&v292);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    sub_20E8610C0(v301, "Attempt to save empty bundle.");
    std::runtime_error::runtime_error(exception, (const std::string *)v301);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
    LODWORD(exception[1].__vftable) = 1;
    __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v7 = *(_QWORD *)(a1 + 192);
  if (v7)
  {
    v249 = *(unsigned __int8 *)(v7 + 80) != 0;
    v8 = v6[3];
    v9 = v6[4];
    if (v8 != v9)
      goto LABEL_6;
LABEL_9:
    v11 = 0;
    goto LABEL_14;
  }
  v249 = 0;
  v8 = v6[3];
  v9 = v6[4];
  if (v8 == v9)
    goto LABEL_9;
LABEL_6:
  v10 = (char *)v9 - (char *)v8 - 448;
  if (v10 < 0x1C0)
  {
    v11 = 0;
    v12 = v8;
    do
    {
LABEL_13:
      v11 -= 0x70A3D70A3D70A3D7 * ((v12[6] - v12[5]) >> 5);
      v12 += 56;
    }
    while (v12 != v9);
    goto LABEL_14;
  }
  v13 = 0;
  v14 = 0;
  v15 = (((v10 >> 6) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
  v12 = &v8[56 * (v15 & 0x1FFFFFFFFFFFFFELL)];
  v16 = v15 & 0x1FFFFFFFFFFFFFELL;
  v17 = v8;
  do
  {
    v13 -= 0x70A3D70A3D70A3D7 * ((v17[6] - v17[5]) >> 5);
    v14 -= 0x70A3D70A3D70A3D7 * ((v17[62] - v17[61]) >> 5);
    v17 += 112;
    v16 -= 2;
  }
  while (v16);
  v11 = v14 + v13;
  if (v15 != (v15 & 0x1FFFFFFFFFFFFFELL))
    goto LABEL_13;
LABEL_14:
  v273 = 0x6DB6DB6DB6DB6DB7 * (((char *)v9 - (char *)v8) >> 6);
  v274 = v11;
  v276 = 0;
  v275 = 0;
  v277 = 733223372;
  kdebug_trace();
  v18 = sub_210219C18();
  v246 = a2;
  v19 = (unint64_t)((char *)(*a2)[4] - (char *)(*a2)[3]) >> 6;
  v20 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v21 = -1227133513 * v19;
  v22 = atomic_load(&qword_254A5A450);
  v23 = &xmmword_210385000;
  if (v22)
  {
    *(_DWORD *)v301 = 67109632;
    *(_DWORD *)&v301[4] = -1227133513 * v19;
    *(_WORD *)&v301[8] = 1024;
    *(_DWORD *)&v301[10] = v11;
    *(_WORD *)&v301[14] = 1024;
    *(_DWORD *)&v301[16] = v249;
    v24 = (char *)_os_log_send_and_compose_impl();
    v25 = strlen(v24);
    v292.__r_.__value_.__r.__words[0] = 0;
    pthread_threadid_np(0, (__uint64_t *)&v292);
    v26 = v292.__r_.__value_.__r.__words[0];
    timespec_get((timespec *)&v292, 1);
    sub_210219E20(v301, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v18 + 1), (__int128 *)(v18 + 5), "MappingIOSaveMap:NM:%u, NS:%u, IL:%{BOOL}d", 0x2AuLL, v24, v25, v26, &v292);
    std::mutex::lock(&stru_254A5A410);
    v27 = qword_254A5A458;
    for (i = unk_254A5A460; v27 != i; v27 += 40)
    {
      v29 = *(_QWORD *)(v27 + 32);
      if (!v29)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v29 + 48))(v29, v301);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v303 < 0)
    {
      operator delete(__str[4]);
      v23 = &xmmword_210385000;
      if ((SHIBYTE(__str[3]) & 0x80000000) == 0)
      {
LABEL_21:
        if (!LOBYTE(__str[0]))
        {
LABEL_27:
          if (v301[56] && (v301[55] & 0x80000000) != 0)
            operator delete(*(void **)&v301[32]);
          if ((v301[31] & 0x80000000) != 0)
            operator delete(*(void **)&v301[8]);
          if (v24)
            free(v24);
          goto LABEL_34;
        }
LABEL_25:
        if ((v301[87] & 0x80000000) != 0)
          operator delete(*(void **)&v301[64]);
        goto LABEL_27;
      }
    }
    else
    {
      v23 = &xmmword_210385000;
      if ((SHIBYTE(__str[3]) & 0x80000000) == 0)
        goto LABEL_21;
    }
    operator delete(__str[1]);
    if (!LOBYTE(__str[0]))
      goto LABEL_27;
    goto LABEL_25;
  }
LABEL_34:
  if (os_signpost_enabled((os_log_t)*v18))
  {
    *(_DWORD *)v301 = *((_QWORD *)v23 + 507);
    *(_DWORD *)&v301[4] = v21;
    *(_WORD *)&v301[8] = 1024;
    *(_DWORD *)&v301[10] = v11;
    *(_WORD *)&v301[14] = 1024;
    *(_DWORD *)&v301[16] = v249;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v30 = *(_QWORD *)(a1 + 424);
  v32 = (*v246)[3];
  v31 = (*v246)[4];
  v34 = **v246;
  v33 = (*v246)[1];
  v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 16) + 16))(*(_QWORD *)(v30 + 16));
  v37 = 0x9249249249249249 * (((char *)v31 - (char *)v32) >> 6) + 0x2E8BA2E8BA2E8BA3 * (v33 - v34);
  if (*(_BYTE *)(v30 + 48))
  {
    *(_BYTE *)(v30 + 40) = v36;
  }
  else
  {
    *(_QWORD *)(v30 + 40) = v36;
    *(_BYTE *)(v30 + 48) = 1;
  }
  v38 = v246;
  *(_QWORD *)(v30 + 32) = v35;
  *(_QWORD *)(v30 + 80) = 0x6DB6DB6DB6DB6DB7 * (((char *)v31 - (char *)v32) >> 6);
  *(_QWORD *)(v30 + 88) = v37;
  *(_QWORD *)(v30 + 96) = v11;
  sub_20EF707E8(a1 + 8, a3, (uint64_t)v301);
  v39 = *(void **)v301;
  v272[0] = *(_DWORD *)&v301[16];
  *(_DWORD *)((char *)v272 + 3) = *(_DWORD *)&v301[19];
  v40 = v301[23];
  v41 = v301[23];
  v248 = *(_QWORD *)&v301[8];
  if (v301[23] < 0)
    v40 = *(_QWORD *)&v301[8];
  v237 = *(void **)v301;
  v240 = v301[23];
  if (!v40)
  {
    sub_20EF764A8(v262);
    if (**(int **)(v262[0] + 56) <= 5)
    {
      v215 = *(unsigned __int8 *)(v262[0] + 72);
      v216 = sub_20E8C31DC(v262[0], "OSLogSurrogateAppender", 1, 0);
      v217 = v216 ? v216 + 16 : 0;
      if (v215 || v216)
      {
        v292.__r_.__value_.__r.__words[0] = (std::string::size_type)v262;
        v292.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v292.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v293) = 5;
        *((_QWORD *)&v293 + 1) = "unknown file";
        LODWORD(v294) = 624;
        v296 = 0;
        *((_QWORD *)&v294 + 1) = "unknown function";
        v295 = 0;
        v224 = *(_QWORD *)v292.__r_.__value_.__l.__data_;
        v225 = (uint64_t *)(*(_QWORD *)v292.__r_.__value_.__l.__data_ + 16);
        if (*(char *)(*(_QWORD *)v292.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v227 = *(_QWORD *)(v224 + 16);
          v226 = *(_QWORD *)(v224 + 24);
        }
        else
        {
          v226 = *(unsigned __int8 *)(*(_QWORD *)v292.__r_.__value_.__l.__data_ + 39);
          v227 = *(_QWORD *)v292.__r_.__value_.__l.__data_ + 16;
        }
        category.__r_.__value_.__r.__words[0] = v227;
        category.__r_.__value_.__l.__size_ = v226;
        v233 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v233 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v301);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v301);
          if (v301[24] && (v301[23] & 0x80000000) != 0)
            operator delete(*(void **)v301);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v234 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v235 = byte_254A4A4F8;
        }
        else
        {
          v234 = *(_QWORD *)&byte_254A4A4F8[8];
          v235 = *(char **)byte_254A4A4F8;
        }
        v283 = v235;
        rep = (void **)v234;
        *(_QWORD *)v301 = os_log_create(v235, category.__r_.__value_.__l.__data_);
        sub_20E86E5A8(&v301[8], (uint64_t)&v283);
        sub_20E86E5A8(&v301[40], (uint64_t)&category);
        v236 = *(NSObject **)v301;
        sub_20E86E44C((uint64_t)v301);
        sub_20EF9C5A8(v217, v225, v236, OS_LOG_TYPE_ERROR);
        if (v215)
        {
          sub_20E8C003C((uint64_t)&v292, "Failed to access directories during save.");
          sub_20E863570((uint64_t)&v292);
        }
        sub_20E863714((uint64_t)&v292);
      }
    }
    v218 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    sub_20E8610C0(v301, "Failed to access directories during save.");
    std::runtime_error::runtime_error(v218, (const std::string *)v301);
    v218->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
    LODWORD(v218[1].__vftable) = 1;
    __cxa_throw(v218, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v42 = *v246;
  v43 = 0x6DB6DB6DB6DB6DB7 * (((char *)(*v246)[4] - (char *)(*v246)[3]) >> 6);
  if (v43 != 0x4EC4EC4EC4EC4EC5 * ((*v246)[7] - (*v246)[6]))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 627, (uint64_t)"submap_bundle->map_sample.size() == submap_bundle->ml_frames.size()", 67, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_402;
    }
    v42 = *v246;
    v43 = 0x6DB6DB6DB6DB6DB7 * (((char *)(*v246)[4] - (char *)(*v246)[3]) >> 6);
  }
  if (v43 != 0xAAAAAAAAAAAAAAABLL * (v42[10] - v42[9])
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 628, (uint64_t)"submap_bundle->map_sample.size() == submap_bundle->ml_semantics.size()", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_402:
    abort();
  }
  sub_20EFA13E8(v246, &v270);
  v44 = (char *)v270;
  v247 = v271;
  if (v270 != v271)
  {
    v45 = 0;
    v46 = (_QWORD *)(a1 + 224);
    v245 = (_QWORD *)(a1 + 264);
    while (1)
    {
      sub_20E9F6CBC((unint64_t *)v44);
      memset(&v292, 0, sizeof(v292));
      v48 = v269;
      if ((v269 & 0x80u) == 0)
        v49 = (std::string *)v268;
      else
        v49 = (std::string *)v268[0];
      if ((v269 & 0x80u) != 0)
        v48 = (unint64_t)v268[1];
      sub_20E8A9678(&v292, v49, (std::string *)((char *)v49 + v48));
      if (v41 < 0)
      {
        sub_20E860C04(v301, v39, v248);
      }
      else
      {
        *(_QWORD *)v301 = v39;
        *(_QWORD *)&v301[8] = v248;
        *(_DWORD *)&v301[16] = v272[0];
        *(_DWORD *)&v301[19] = *(_DWORD *)((char *)v272 + 3);
        v301[23] = v41;
      }
      sub_20E8A944C((uint64_t)v301, (std::__fs::filesystem::path *)&v292);
      sub_20EFA0B5C((uint64_t)v301, a3, (uint64_t)v266);
      if ((v301[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v301);
        if ((SHIBYTE(v292.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_61;
      }
      else if ((SHIBYTE(v292.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_61;
      }
      operator delete(v292.__r_.__value_.__l.__data_);
LABEL_61:
      sub_20EFA1874((uint64_t)v44, *v38, (uint64_t)v262);
      sub_20EF70694((uint64_t)v266, a3, (uint64_t)v260);
      v50 = *(_QWORD *)(a1 + 192);
      v301[8] = 0;
      v301[64] = 0;
      *(_OWORD *)&v301[72] = 0u;
      memset(__str, 0, 40);
      *(_QWORD *)v301 = v262[0];
      if (v50)
      {
        v51 = *(_OWORD *)(v50 + 40);
        *(_OWORD *)&v301[8] = *(_OWORD *)(v50 + 24);
        *(_OWORD *)&v301[24] = v51;
        *(_OWORD *)&v301[40] = *(_OWORD *)(v50 + 56);
        *(_OWORD *)&v301[49] = *(_OWORD *)(v50 + 65);
      }
      v52 = *(_QWORD **)v263;
      v53 = *(_QWORD **)(v263 + 8);
      if (*(_QWORD **)v263 != v53)
      {
        while (*v52 != v262[0])
        {
          v52 += 2;
          if (v52 == v53)
            goto LABEL_69;
        }
      }
      if (v52 != v53)
        *(_QWORD *)&v301[72] = v52[1];
LABEL_69:
      *(_QWORD *)&v301[80] = v262[1];
      sub_20E8AD1B8((uint64_t)__str, (std::string *)v264, v265, 0xAAAAAAAAAAAAAAABLL * (((char *)v265 - (_BYTE *)v264) >> 3));
      v252 = v45;
      if (v249)
      {
LABEL_70:
        v54 = sub_20EF93DCC(a1 + 224, *(unint64_t *)v301, (uint64_t *)v301);
        v55 = v54;
        v56 = *(_QWORD *)&v301[80];
        v58 = *(_OWORD *)&v301[48];
        v57 = *(_OWORD *)&v301[64];
        *(_OWORD *)(v54 + 7) = *(_OWORD *)&v301[32];
        *(_OWORD *)(v54 + 9) = v58;
        *(_OWORD *)(v54 + 11) = v57;
        v54[13] = v56;
        v59 = *(_OWORD *)&v301[16];
        *(_OWORD *)(v54 + 3) = *(_OWORD *)v301;
        *(_OWORD *)(v54 + 5) = v59;
        v253 = (uint64_t)(v54 + 3);
        if (v54 + 3 != (_QWORD *)v301)
          sub_20E8AD1B8((uint64_t)(v54 + 14), __str[0], (__int128 *)__str[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__str[1] - (char *)__str[0]) >> 3));
        *(_OWORD *)(v55 + 17) = *(_OWORD *)&__str[3];
        v60 = *(int8x8_t *)(a1 + 272);
        if (v60)
        {
          v61 = (uint8x8_t)vcnt_s8(v60);
          v61.i16[0] = vaddlv_u8(v61);
          if (v61.u32[0] > 1uLL)
          {
            v62 = *(_QWORD *)v301;
            if (*(_QWORD *)v301 >= *(_QWORD *)&v60)
              v62 = *(_QWORD *)v301 % *(_QWORD *)&v60;
          }
          else
          {
            v62 = (*(_QWORD *)&v60 - 1) & *(_QWORD *)v301;
          }
          v67 = *(_QWORD ***)(*v245 + 8 * v62);
          if (v67)
          {
            v68 = *v67;
            if (*v67)
            {
              if (v61.u32[0] < 2uLL)
              {
                v69 = *(_QWORD *)&v60 - 1;
                while (1)
                {
                  v71 = v68[1];
                  if (v71 == *(_QWORD *)v301)
                  {
                    if (v68[2] == *(_QWORD *)v301)
                      goto LABEL_340;
                  }
                  else if ((v71 & v69) != v62)
                  {
                    goto LABEL_118;
                  }
                  v68 = (_QWORD *)*v68;
                  if (!v68)
                    goto LABEL_118;
                }
              }
              do
              {
                v70 = v68[1];
                if (v70 == *(_QWORD *)v301)
                {
                  if (v68[2] == *(_QWORD *)v301)
                  {
LABEL_340:
                    sub_20EF9C994((uint64_t)&v292, v245, v68);
                    v192 = (_QWORD *)v292.__r_.__value_.__r.__words[0];
                    if (v292.__r_.__value_.__r.__words[0])
                    {
                      if (v292.__r_.__value_.__s.__data_[16])
                      {
                        v193 = *(_QWORD *)(v292.__r_.__value_.__r.__words[0] + 112);
                        if (v193)
                        {
                          v194 = *(_QWORD *)(v292.__r_.__value_.__r.__words[0] + 120);
                          v195 = *(void **)(v292.__r_.__value_.__r.__words[0] + 112);
                          if (v194 != v193)
                          {
                            do
                            {
                              if (*(char *)(v194 - 1) < 0)
                                operator delete(*(void **)(v194 - 24));
                              v194 -= 24;
                            }
                            while (v194 != v193);
                            v195 = (void *)v192[14];
                          }
                          v192[15] = v193;
                          operator delete(v195);
                          v38 = v246;
                        }
                      }
                      operator delete(v192);
                    }
                    break;
                  }
                }
                else
                {
                  if (v70 >= *(_QWORD *)&v60)
                    v70 %= *(_QWORD *)&v60;
                  if (v70 != v62)
                    break;
                }
                v68 = (_QWORD *)*v68;
              }
              while (v68);
            }
          }
        }
      }
      else
      {
        v63 = *(int8x8_t *)(a1 + 232);
        if (v63)
        {
          v64 = *(_QWORD *)v44;
          v65 = (uint8x8_t)vcnt_s8(v63);
          v65.i16[0] = vaddlv_u8(v65);
          if (v65.u32[0] > 1uLL)
          {
            v66 = *(_QWORD *)v44;
            if (v64 >= *(_QWORD *)&v63)
              v66 = v64 % *(_QWORD *)&v63;
          }
          else
          {
            v66 = (*(_QWORD *)&v63 - 1) & v64;
          }
          v72 = *(uint64_t ***)(*v46 + 8 * v66);
          if (v72)
          {
            v73 = *v72;
            if (v73)
            {
              if (v65.u32[0] < 2uLL)
              {
                v74 = *(_QWORD *)&v63 - 1;
                while (1)
                {
                  v76 = v73[1];
                  if (v76 == v64)
                  {
                    if (v73[2] == v64)
                      goto LABEL_348;
                  }
                  else if ((v76 & v74) != v66)
                  {
                    goto LABEL_115;
                  }
                  v73 = (uint64_t *)*v73;
                  if (!v73)
                    goto LABEL_115;
                }
              }
              do
              {
                v75 = v73[1];
                if (v75 == v64)
                {
                  if (v73[2] == v64)
                  {
LABEL_348:
                    v196 = *((_OWORD *)v73 + 3);
                    *(_OWORD *)&v301[8] = *((_OWORD *)v73 + 2);
                    *(_OWORD *)&v301[24] = v196;
                    *(_OWORD *)&v301[40] = *((_OWORD *)v73 + 4);
                    *(_OWORD *)&v301[49] = *(_OWORD *)((char *)v73 + 73);
                    goto LABEL_70;
                  }
                }
                else
                {
                  if (v75 >= *(_QWORD *)&v63)
                    v75 %= *(_QWORD *)&v63;
                  if (v75 != v66)
                    break;
                }
                v73 = (uint64_t *)*v73;
              }
              while (v73);
            }
          }
        }
LABEL_115:
        v77 = sub_20EF93DCC((uint64_t)v245, *(unint64_t *)v301, (uint64_t *)v301);
        v78 = v77;
        v79 = *(_QWORD *)&v301[80];
        v81 = *(_OWORD *)&v301[48];
        v80 = *(_OWORD *)&v301[64];
        *(_OWORD *)(v77 + 7) = *(_OWORD *)&v301[32];
        *(_OWORD *)(v77 + 9) = v81;
        *(_OWORD *)(v77 + 11) = v80;
        v77[13] = v79;
        v82 = *(_OWORD *)&v301[16];
        *(_OWORD *)(v77 + 3) = *(_OWORD *)v301;
        *(_OWORD *)(v77 + 5) = v82;
        v253 = (uint64_t)(v77 + 3);
        if (v77 + 3 != (_QWORD *)v301)
          sub_20E8AD1B8((uint64_t)(v77 + 14), __str[0], (__int128 *)__str[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__str[1] - (char *)__str[0]) >> 3));
        *(_OWORD *)(v78 + 17) = *(_OWORD *)&__str[3];
      }
LABEL_118:
      for (j = *(_QWORD **)(a1 + 280); j; j = (_QWORD *)*j)
      {
        v84 = *(int8x8_t *)(a1 + 232);
        if (v84)
        {
          v85 = j[2];
          v86 = (uint8x8_t)vcnt_s8(v84);
          v86.i16[0] = vaddlv_u8(v86);
          if (v86.u32[0] > 1uLL)
          {
            v87 = j[2];
            if (v85 >= *(_QWORD *)&v84)
              v87 = v85 % *(_QWORD *)&v84;
          }
          else
          {
            v87 = (*(_QWORD *)&v84 - 1) & v85;
          }
          v88 = *(_QWORD **)(*v46 + 8 * v87);
          if (v88)
          {
            v89 = (_QWORD *)*v88;
            if (v89)
            {
              if (v86.u32[0] < 2uLL)
              {
                v90 = *(_QWORD *)&v84 - 1;
                while (1)
                {
                  v92 = v89[1];
                  if (v92 == v85)
                  {
                    if (v89[2] == v85)
                      goto LABEL_145;
                  }
                  else if ((v92 & v90) != v87)
                  {
                    goto LABEL_123;
                  }
                  v89 = (_QWORD *)*v89;
                  if (!v89)
                    goto LABEL_123;
                }
              }
              do
              {
                v91 = v89[1];
                if (v91 == v85)
                {
                  if (v89[2] == v85)
                  {
LABEL_145:
                    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 663, (uint64_t)"iter == located_submap_toc_.end()", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                    {
                      abort();
                    }
                    break;
                  }
                }
                else
                {
                  if (v91 >= *(_QWORD *)&v84)
                    v91 %= *(_QWORD *)&v84;
                  if (v91 != v87)
                    break;
                }
                v89 = (_QWORD *)*v89;
              }
              while (v89);
            }
          }
        }
LABEL_123:
        ;
      }
      v292.__r_.__value_.__r.__words[0] = *(_QWORD *)v301;
      v292.__r_.__value_.__s.__data_[8] = 0;
      LOBYTE(v296) = 0;
      if (v301[64])
      {
        *(_OWORD *)&v292.__r_.__value_.__r.__words[1] = *(_OWORD *)&v301[8];
        v293 = *(_OWORD *)&v301[24];
        v294 = *(_OWORD *)&v301[40];
        v295 = *(_QWORD *)&v301[56];
        LOBYTE(v296) = 1;
      }
      v297 = *(_OWORD *)&v301[72];
      v299 = 0;
      v300 = 0;
      v298 = 0;
      sub_20E8ADB20((char *)&v298, (__int128 *)__str[0], (__int128 *)__str[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__str[1] - (char *)__str[0]) >> 3));
      v259[0] = 0;
      v259[1] = 0;
      memset(&v254, 0, sizeof(v254));
      sub_20E8A9678(&v254, (std::string *)".tmp", (std::string *)"");
      sub_20EF72794((uint64_t)v260, (const char *)&v254, (uint64_t)&v255);
      if (SHIBYTE(v256) < 0)
      {
        sub_20E860C04(v257, (void *)v255, *((unint64_t *)&v255 + 1));
      }
      else
      {
        *(_OWORD *)v257 = v255;
        v258 = v256;
      }
      v279 = 0;
      v93 = (const char **)operator new(0x20uLL);
      *v93 = (const char *)&off_24C9F2578;
      v93[1] = (const char *)&v279;
      v93[2] = (const char *)v259;
      v93[3] = (const char *)a3;
      v306 = v93;
      memset(&v278, 0, sizeof(v278));
      v94 = (char *)HIBYTE(v258);
      if (v258 >= 0)
        v95 = (std::string *)v257;
      else
        v95 = (std::string *)v257[0];
      if (v258 < 0)
        v94 = (char *)v257[1];
      sub_20E8A9678(&v278, v95, (std::string *)&v94[(_QWORD)v95]);
      if (!v306)
        sub_20E86D37C();
      (*((void (**)(const char **, std::string *, std::string *))*v306 + 6))(v306, &v292, &v278);
      if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v278.__r_.__value_.__l.__data_);
        v97 = v279;
        v98 = v306;
        if (v306 == &v304)
        {
LABEL_159:
          v98 = &v304;
          v99 = 4;
          goto LABEL_160;
        }
      }
      else
      {
        v97 = v279;
        v98 = v306;
        if (v306 == &v304)
          goto LABEL_159;
      }
      if (!v98)
        goto LABEL_161;
      v99 = 5;
LABEL_160:
      (*(void (**)(const char **, uint64_t))&(*v98)[8 * v99])(v98, v96);
LABEL_161:
      if (SHIBYTE(v258) < 0)
      {
        operator delete(v257[0]);
        if ((SHIBYTE(v256) & 0x80000000) == 0)
        {
LABEL_163:
          if ((SHIBYTE(v254.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_164;
          goto LABEL_180;
        }
      }
      else if ((SHIBYTE(v256) & 0x80000000) == 0)
      {
        goto LABEL_163;
      }
      operator delete((void *)v255);
      if ((SHIBYTE(v254.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_164:
        v100 = (void **)v298;
        if (!v298)
          goto LABEL_181;
        goto LABEL_165;
      }
LABEL_180:
      operator delete(v254.__r_.__value_.__l.__data_);
      v100 = (void **)v298;
      if (!v298)
      {
LABEL_181:
        if (v44[8])
          goto LABEL_182;
        goto LABEL_167;
      }
LABEL_165:
      v101 = v299;
      if (v299 == v100)
      {
        v299 = v100;
        operator delete(v100);
        if (v44[8])
          goto LABEL_182;
      }
      else
      {
        do
        {
          if (*((char *)v101 - 1) < 0)
            operator delete(*(v101 - 3));
          v101 -= 3;
        }
        while (v101 != v100);
        v299 = v100;
        operator delete(v298);
        if (v44[8])
        {
LABEL_182:
          if (v44[24])
          {
            v107 = *((_QWORD *)v44 + 4);
            v108 = 1;
          }
          else
          {
            v108 = 0;
            v107 = v244 & 0xFFFFFFFFFFFFFF00;
          }
          v244 = v107;
          v251 = sub_20EF7ECE8((uint64_t)v266, *v38, *((_QWORD *)v44 + 2), v107, v108, a3);
          goto LABEL_200;
        }
      }
LABEL_167:
      v102 = sub_20EF7E1C8((uint64_t)v266, (uint64_t)&(**v38)[11 * *((_QWORD *)v44 + 4)], a3);
      *((_BYTE *)&category.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&category, "*.bck");
      sub_210224314((uint64_t)v266, 1u, (char *)&category, 5uLL, a3, (uint64_t *)&v283);
      v103.n128_f64[0] = sub_20EF83A74((uint64_t)&v292, (__int128 **)&v283);
      v104 = (void **)v283;
      if (v283)
      {
        v105 = rep;
        v106 = v283;
        if (rep != v283)
        {
          do
          {
            if (*((char *)v105 - 9) < 0)
              operator delete(*(v105 - 4));
            v105 -= 4;
          }
          while (v105 != v104);
          v106 = v283;
        }
        rep = v104;
        operator delete(v106);
      }
      v251 = v102;
      size = v292.__r_.__value_.__l.__size_;
      v109 = (void *)v292.__r_.__value_.__r.__words[0];
      v111 = v292.__r_.__value_.__r.__words[0];
      if (v292.__r_.__value_.__r.__words[0] != v292.__r_.__value_.__l.__size_)
      {
        do
        {
          (*(void (**)(uint64_t, std::string::size_type, __n128))(*(_QWORD *)a3 + 232))(a3, v111, v103);
          v111 += 24;
        }
        while (v111 != size);
        if (!v109)
          goto LABEL_197;
        do
        {
          if (*(char *)(size - 1) < 0)
            operator delete(*(void **)(size - 24));
          size -= 24;
        }
        while ((void *)size != v109);
LABEL_196:
        operator delete(v109);
        goto LABEL_197;
      }
      if (v292.__r_.__value_.__r.__words[0])
        goto LABEL_196;
LABEL_197:
      if (SHIBYTE(category.__r_.__value_.__r.__words[2]) < 0)
        operator delete(category.__r_.__value_.__l.__data_);
      v38 = v246;
LABEL_200:
      v250 = v97;
      sub_20EF764A8(&v278);
      if (**(int **)(v278.__r_.__value_.__r.__words[0] + 56) > 3)
        goto LABEL_317;
      v112 = *(unsigned __int8 *)(v278.__r_.__value_.__r.__words[0] + 72);
      v113 = sub_20E8C31DC((uint64_t)v278.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0);
      v114 = v113;
      if (!v112 && !v113)
        goto LABEL_317;
      v242 = v112;
      v283 = &v278;
      rep = (void **)std::chrono::steady_clock::now().__d_.__rep_;
      v285 = std::chrono::system_clock::now().__d_.__rep_;
      v286 = 3;
      v287 = "unknown file";
      v288 = 688;
      v289 = "unknown function";
      v290 = 0;
      v291 = 0;
      v115 = v266;
      if (v267 < 0)
        v115 = (void **)v266[0];
      __s = (char *)v115;
      v116 = *(_QWORD *)v283;
      v239 = *(_QWORD *)v283;
      if (*(char *)(*(_QWORD *)v283 + 39) < 0)
      {
        v118 = *(const char **)(v116 + 16);
        v117 = *(_QWORD *)(v116 + 24);
        v238 = *(_QWORD *)v283 + 16;
        v120 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v120 & 1) != 0)
          goto LABEL_209;
      }
      else
      {
        v117 = *(unsigned __int8 *)(*(_QWORD *)v283 + 39);
        v118 = (const char *)(*(_QWORD *)v283 + 16);
        v238 = (uint64_t)v118;
        v119 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v119 & 1) != 0)
          goto LABEL_209;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&category);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&category);
        if ((_BYTE)v281 && SHIBYTE(category.__r_.__value_.__r.__words[2]) < 0)
          operator delete(category.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
        v38 = v246;
      }
LABEL_209:
      if (byte_254A4A4F8[23] >= 0)
        v121 = byte_254A4A4F8;
      else
        v121 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v122 = byte_254A4A4F8[23];
      else
        v122 = *(_QWORD *)&byte_254A4A4F8[8];
      v292.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v121, v118);
      if (v122 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      __src = v118;
      if (v122 >= 0x17)
      {
        v124 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v122 | 7) != 0x17)
          v124 = v122 | 7;
        v125 = v124 + 1;
        p_size = (std::string::size_type *)operator new(v124 + 1);
        *(_QWORD *)&v293 = v125 | 0x8000000000000000;
        v292.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
        v292.__r_.__value_.__r.__words[2] = v122;
        v38 = v246;
LABEL_222:
        memmove(p_size, v121, v122);
        goto LABEL_223;
      }
      BYTE7(v293) = v122;
      p_size = &v292.__r_.__value_.__l.__size_;
      if (v122)
        goto LABEL_222;
LABEL_223:
      *((_BYTE *)p_size + v122) = 0;
      BYTE8(v293) = 1;
      if (v117 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v39 = v237;
      v41 = v240;
      if (v117 >= 0x17)
      {
        v128 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v117 | 7) != 0x17)
          v128 = v117 | 7;
        v129 = v128 + 1;
        v126 = (__int128 *)operator new(v128 + 1);
        v295 = v129 | 0x8000000000000000;
        *(_QWORD *)&v294 = v126;
        *((_QWORD *)&v294 + 1) = v117;
        v38 = v246;
      }
      else
      {
        HIBYTE(v295) = v117;
        v126 = &v294;
        if (!v117)
        {
          LOBYTE(v294) = 0;
          LOBYTE(v296) = 1;
          v127 = v292.__r_.__value_.__r.__words[0];
          if ((SHIBYTE(v295) & 0x80000000) == 0)
            goto LABEL_227;
          goto LABEL_233;
        }
      }
      memmove(v126, __src, v117);
      *((_BYTE *)v126 + v117) = 0;
      LOBYTE(v296) = 1;
      v127 = v292.__r_.__value_.__r.__words[0];
      if ((SHIBYTE(v295) & 0x80000000) == 0)
      {
LABEL_227:
        if (!BYTE8(v293))
          goto LABEL_236;
        goto LABEL_234;
      }
LABEL_233:
      operator delete((void *)v294);
      if (!BYTE8(v293))
        goto LABEL_236;
LABEL_234:
      if (SBYTE7(v293) < 0)
        operator delete((void *)v292.__r_.__value_.__l.__size_);
LABEL_236:
      if (v292.__r_.__value_.__r.__words[0])
        os_release(v292.__r_.__value_.__l.__data_);
      if (!v114 || !*(_QWORD *)(v114 + 24))
      {
        os_log_type_enabled(v127, OS_LOG_TYPE_INFO);
        LODWORD(v292.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v292.__r_.__value_.__r.__words + 4) = (std::string::size_type)__s;
        v136 = (void *)_os_log_send_and_compose_impl();
        v137 = v242;
        if (v136)
        {
          free(v136);
          if (v242)
            goto LABEL_309;
          goto LABEL_312;
        }
LABEL_308:
        if (v137)
          goto LABEL_309;
        goto LABEL_312;
      }
      v130 = _os_log_pack_size();
      v131 = operator new(v130, (std::align_val_t)8uLL);
      v132 = (_QWORD *)operator new();
      *v132 = &off_24C9ABB80;
      v132[1] = 0;
      v132[2] = 0;
      v132[3] = v131;
      category.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
      category.__r_.__value_.__l.__size_ = (std::string::size_type)v131;
      category.__r_.__value_.__r.__words[2] = (std::string::size_type)v132;
      v281 = 0;
      v282 = 0;
      v133 = strlen(__s);
      if (v133 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v134 = v133;
      if (v133 >= 0x17)
      {
        v138 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v133 | 7) != 0x17)
          v138 = v133 | 7;
        v139 = v138 + 1;
        v135 = (char *)operator new(v138 + 1);
        *(_QWORD *)&v305 = v134;
        *((_QWORD *)&v305 + 1) = v139 | 0x8000000000000000;
        v304 = v135;
      }
      else
      {
        HIBYTE(v305) = v133;
        v135 = (char *)&v304;
        if (!v133)
          goto LABEL_251;
      }
      memcpy(v135, __s, v134);
LABEL_251:
      v135[v134] = 0;
      v140 = v304;
      v307[0] = v305;
      *(uint64_t *)((char *)v307 + 7) = *(_QWORD *)((char *)&v305 + 7);
      v141 = HIBYTE(v305);
      v142 = operator new(0x38uLL);
      v142[1] = 0;
      v142[2] = 0;
      v142[3] = off_24C9ABC20;
      *v142 = &off_24C9ABBD0;
      v143 = v307[0];
      v142[4] = v140;
      v142[5] = v143;
      *(_QWORD *)((char *)v142 + 47) = *(uint64_t *)((char *)v307 + 7);
      *((_BYTE *)v142 + 55) = v141;
      memset(v307, 0, 15);
      v144 = v282;
      v281 = (char *)(v142 + 3);
      v282 = (std::__shared_weak_count *)v142;
      v41 = v240;
      if (v144)
      {
        p_shared_owners = (unint64_t *)&v144->__shared_owners_;
        do
          v146 = __ldaxr(p_shared_owners);
        while (__stlxr(v146 - 1, p_shared_owners));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
        }
      }
      v292 = category;
      v147 = v281;
      if (category.__r_.__value_.__r.__words[2])
      {
        v148 = (unint64_t *)(category.__r_.__value_.__r.__words[2] + 8);
        do
          v149 = __ldxr(v148);
        while (__stxr(v149 + 1, v148));
      }
      v150 = v282;
      *(_QWORD *)&v293 = v147;
      *((_QWORD *)&v293 + 1) = v282;
      if (v282)
      {
        v151 = (unint64_t *)&v282->__shared_owners_;
        do
          v152 = __ldxr(v151);
        while (__stxr(v152 + 1, v151));
        *(_QWORD *)&v294 = v147;
        do
          v153 = __ldaxr(v151);
        while (__stlxr(v153 - 1, v151));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      else
      {
        *(_QWORD *)&v294 = v147;
      }
      v154 = (std::__shared_weak_count *)category.__r_.__value_.__r.__words[2];
      if (category.__r_.__value_.__r.__words[2])
      {
        v155 = (unint64_t *)(category.__r_.__value_.__r.__words[2] + 8);
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      v157 = v292.__r_.__value_.__r.__words[0];
      if (*(char *)(v294 + 31) >= 0)
        v158 = v294 + 8;
      else
        v158 = *(_QWORD *)(v294 + 8);
      v159 = _os_log_pack_fill();
      *(_DWORD *)v159 = 136315138;
      *(_QWORD *)(v159 + 4) = v158;
      v160 = operator new();
      v161 = *(unsigned __int8 *)(v239 + 39);
      v162 = v238;
      if ((v161 & 0x80u) != 0)
      {
        v162 = *(_QWORD *)(v239 + 16);
        v161 = *(_QWORD *)(v239 + 24);
      }
      *(_QWORD *)v160 = v157;
      *(_OWORD *)(v160 + 8) = *(_OWORD *)&v292.__r_.__value_.__r.__words[1];
      *(_OWORD *)&v292.__r_.__value_.__r.__words[1] = 0uLL;
      *(_OWORD *)(v160 + 24) = v293;
      v293 = 0uLL;
      *(_QWORD *)(v160 + 40) = v162;
      *(_QWORD *)(v160 + 48) = v161;
      *(_BYTE *)(v160 + 56) = 1;
      v304 = 0;
      category.__r_.__value_.__r.__words[0] = v160;
      (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v114 + 24) + 40))(*(_QWORD *)(v114 + 24), &category);
      v38 = v246;
      v163 = category.__r_.__value_.__r.__words[0];
      category.__r_.__value_.__r.__words[0] = 0;
      if (v163)
      {
        v164 = *(std::__shared_weak_count **)(v163 + 32);
        if (v164)
        {
          v165 = (unint64_t *)&v164->__shared_owners_;
          do
            v166 = __ldaxr(v165);
          while (__stlxr(v166 - 1, v165));
          if (!v166)
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
        }
        v167 = *(std::__shared_weak_count **)(v163 + 16);
        if (v167)
        {
          v168 = (unint64_t *)&v167->__shared_owners_;
          do
            v169 = __ldaxr(v168);
          while (__stlxr(v169 - 1, v168));
          if (!v169)
          {
            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
            std::__shared_weak_count::__release_weak(v167);
          }
        }
        MEMORY[0x212BC6398](v163, 0x10F0C40B62ED6C6);
        v170 = v304;
        v304 = 0;
        if (v170)
        {
          v171 = (std::__shared_weak_count *)*((_QWORD *)v170 + 4);
          if (v171)
          {
            v172 = (unint64_t *)&v171->__shared_owners_;
            do
              v173 = __ldaxr(v172);
            while (__stlxr(v173 - 1, v172));
            if (!v173)
            {
              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
              std::__shared_weak_count::__release_weak(v171);
            }
          }
          v174 = (std::__shared_weak_count *)*((_QWORD *)v170 + 2);
          if (v174)
          {
            v175 = (unint64_t *)&v174->__shared_owners_;
            do
              v176 = __ldaxr(v175);
            while (__stlxr(v176 - 1, v175));
            if (!v176)
            {
              ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
              std::__shared_weak_count::__release_weak(v174);
            }
          }
          MEMORY[0x212BC6398](v170, 0x10F0C40B62ED6C6);
        }
      }
      v177 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
      v137 = v242;
      if (!*((_QWORD *)&v293 + 1))
        goto LABEL_304;
      v178 = (unint64_t *)(*((_QWORD *)&v293 + 1) + 8);
      do
        v179 = __ldaxr(v178);
      while (__stlxr(v179 - 1, v178));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
        v180 = (std::__shared_weak_count *)v292.__r_.__value_.__r.__words[2];
        if (!v292.__r_.__value_.__r.__words[2])
          goto LABEL_308;
      }
      else
      {
LABEL_304:
        v180 = (std::__shared_weak_count *)v292.__r_.__value_.__r.__words[2];
        if (!v292.__r_.__value_.__r.__words[2])
          goto LABEL_308;
      }
      v181 = (unint64_t *)&v180->__shared_owners_;
      do
        v182 = __ldaxr(v181);
      while (__stlxr(v182 - 1, v181));
      if (v182)
        goto LABEL_308;
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
      if (v242)
      {
LABEL_309:
        v183 = v266;
        if (v267 < 0)
          v183 = (void **)v266[0];
        sub_20E8C003C((uint64_t)&v283, "[%s] was saved successfully.", (const char *)v183);
        sub_20E863570((uint64_t)&v283);
      }
LABEL_312:
      sub_20E863570((uint64_t)&v283);
      v184 = v291;
      if (v291)
      {
        v185 = (unint64_t *)&v291->__shared_owners_;
        do
          v186 = __ldaxr(v185);
        while (__stlxr(v186 - 1, v185));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
      }
LABEL_317:
      if ((sub_20EF7290C((uint64_t)v266, a3) & 1) == 0)
      {
        sub_20EF764A8(v307);
        if (**(int **)(v307[0] + 56) <= 5)
        {
          v198 = *(unsigned __int8 *)(v307[0] + 72);
          v199 = sub_20E8C31DC(v307[0], "OSLogSurrogateAppender", 1, 0);
          v200 = v199 ? v199 + 16 : 0;
          if (v198 || v199)
          {
            v283 = v307;
            rep = (void **)std::chrono::steady_clock::now().__d_.__rep_;
            v285 = std::chrono::system_clock::now().__d_.__rep_;
            v286 = 5;
            v287 = "unknown file";
            v288 = 692;
            v291 = 0;
            v289 = "unknown function";
            v290 = 0;
            v202 = v266;
            if (v267 < 0)
              v202 = (void **)v266[0];
            v278.__r_.__value_.__r.__words[0] = (std::string::size_type)v202;
            v203 = *(_QWORD *)v283;
            v204 = (uint64_t *)(*(_QWORD *)v283 + 16);
            if (*(char *)(*(_QWORD *)v283 + 39) < 0)
            {
              v206 = *(const char **)(v203 + 16);
              v205 = *(_QWORD *)(v203 + 24);
            }
            else
            {
              v205 = *(unsigned __int8 *)(*(_QWORD *)v283 + 39);
              v206 = (const char *)(*(_QWORD *)v283 + 16);
            }
            v304 = v206;
            *(_QWORD *)&v305 = v205;
            v219 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v219 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v292);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v292);
              if ((_BYTE)v293 && SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v292.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v220 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v221 = byte_254A4A4F8;
            }
            else
            {
              v220 = *(_QWORD *)&byte_254A4A4F8[8];
              v221 = *(const char **)byte_254A4A4F8;
            }
            category.__r_.__value_.__r.__words[0] = (std::string::size_type)v221;
            category.__r_.__value_.__l.__size_ = v220;
            v292.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v221, v304);
            sub_20E86E5A8(&v292.__r_.__value_.__l.__size_, (uint64_t)&category);
            sub_20E86E5A8(&v294, (uint64_t)&v304);
            v222 = v292.__r_.__value_.__r.__words[0];
            sub_20E86E44C((uint64_t)&v292);
            sub_20EF9EE94(v200, v204, v222, OS_LOG_TYPE_ERROR, (const char **)&v278.__r_.__value_.__l.__data_);
            if (v198)
            {
              v223 = v266;
              if (v267 < 0)
                v223 = (void **)v266[0];
              sub_20E8C003C((uint64_t)&v283, "[%s] failed to commit temporary mapping IO files.", (const char *)v223);
              sub_20E863570((uint64_t)&v283);
            }
            sub_20E863714((uint64_t)&v283);
          }
        }
        v201 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
        sub_20EF80D88((uint64_t)&v292, (uint64_t)v266);
        std::runtime_error::runtime_error(v201, &v292);
        v201->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
        LODWORD(v201[1].__vftable) = 1;
        __cxa_throw(v201, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      sub_20EF7984C((uint64_t)v266, v253, a3);
      v187 = __str[0];
      if (__str[0])
      {
        v188 = __str[1];
        v189 = __str[0];
        if (__str[1] != __str[0])
        {
          do
          {
            if (SHIBYTE(v188[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v188[-1].__r_.__value_.__l.__data_);
            --v188;
          }
          while (v188 != v187);
          v189 = __str[0];
        }
        __str[1] = v187;
        operator delete(v189);
      }
      if (v261 < 0)
      {
        operator delete(v260[0]);
        v190 = (__int128 *)v264;
        if (!v264)
        {
LABEL_337:
          if (v267 < 0)
            goto LABEL_49;
          goto LABEL_338;
        }
      }
      else
      {
        v190 = (__int128 *)v264;
        if (!v264)
          goto LABEL_337;
      }
      v191 = v265;
      if (v265 == v190)
      {
        v265 = v190;
        operator delete(v190);
        if (v267 < 0)
          goto LABEL_49;
      }
      else
      {
        do
        {
          if (*((char *)v191 - 1) < 0)
            operator delete(*((void **)v191 - 3));
          v191 = (__int128 *)((char *)v191 - 24);
        }
        while (v191 != v190);
        v265 = v190;
        operator delete(v264);
        if (v267 < 0)
        {
LABEL_49:
          operator delete(v266[0]);
          v47 = v252;
          if ((char)v269 < 0)
            goto LABEL_339;
          goto LABEL_50;
        }
      }
LABEL_338:
      v47 = v252;
      if ((char)v269 < 0)
LABEL_339:
        operator delete(v268[0]);
LABEL_50:
      v45 = v250 + v47 + v251;
      v44 += 40;
      if (v44 == v247)
        goto LABEL_362;
    }
  }
  v45 = 0;
LABEL_362:
  sub_20EF6FC14(*(uint64_t ***)(a1 + 424), v45);
  if (v270)
  {
    v271 = (char *)v270;
    operator delete(v270);
  }
  if (v41 < 0)
    operator delete(v39);
  return kdebug_trace();
}

void sub_20EF7C604()
{
  if (LOBYTE(STACK[0x3B8]) && SLOBYTE(STACK[0x3B7]) < 0)
    operator delete((void *)STACK[0x3A0]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x330]);
  JUMPOUT(0x20EF7D478);
}

void sub_20EF7C864(_Unwind_Exception *a1)
{
  void *v1;

  sub_20E96E218((uint64_t)&STACK[0x3A0]);
  if (v1)
  {
    free(v1);
    sub_20E8E69C4((uint64_t)&STACK[0x218]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EF7D484);
}

void sub_20EF7C86C()
{
  sub_20E86E658((uint64_t)&STACK[0x270]);
  JUMPOUT(0x20EF7C9F4);
}

void sub_20EF7C918()
{
  uint64_t v0;

  MEMORY[0x212BC6398](v0, 0x10D0C40B950D02ALL);
  JUMPOUT(0x20EF7C9F4);
}

void sub_20EF7C93C()
{
  JUMPOUT(0x20EF7D478);
}

void sub_20EF7C948()
{
  if (SLOBYTE(STACK[0x34F]) < 0)
    operator delete((void *)STACK[0x338]);
  if (STACK[0x330])
    os_release((void *)STACK[0x330]);
  JUMPOUT(0x20EF7C9F4);
}

void sub_20EF7C9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,int a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  char a64;
  void *a70;
  char a72;
  void *a73;
  char a74;
  void *a75;
  void *v76;

  sub_20E863714((uint64_t)&STACK[0x2D8]);
  sub_20EB9B044((uint64_t)&STACK[0x3A0]);
  if (a63 < 0)
    operator delete(__p);
  sub_20EF80EA8((uint64_t)&a64);
  if (a72 < 0)
  {
    operator delete(a70);
    if ((a74 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((a74 & 0x80000000) == 0)
  {
LABEL_5:
    v76 = a75;
    if (!a75)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(a73);
  v76 = a75;
  if (!a75)
  {
LABEL_7:
    if (a26 < 0)
      operator delete(a22);
    sub_20E8E69C4((uint64_t)&STACK[0x218]);
    _Unwind_Resume(a1);
  }
LABEL_6:
  STACK[0x200] = (unint64_t)v76;
  operator delete(v76);
  goto LABEL_7;
}

void sub_20EF7CA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
  {
    operator delete(a51);
    if ((a50 & 0x80000000) == 0)
      goto LABEL_4;
  }
  else if ((a50 & 0x80000000) == 0)
  {
LABEL_4:
    sub_20EB9B044((uint64_t)&STACK[0x330]);
    JUMPOUT(0x20EF7D430);
  }
  operator delete(__p);
  goto LABEL_4;
}

void sub_20EF7CA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a73;

  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  if (a73 < 0)
    JUMPOUT(0x20EF7D49CLL);
  JUMPOUT(0x20EF7D468);
}

void sub_20EF7CA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  int v75;
  void *v76;
  void *v78;

  sub_20EB9B93C((void **)&STACK[0x2D8]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  sub_20EB9B044((uint64_t)&STACK[0x3A0]);
  if (a62 < 0)
    operator delete(a57);
  sub_20EF80EA8((uint64_t)&a63);
  if (a72 < 0)
  {
    operator delete(a69);
    if ((a74 & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((a74 & 0x80000000) == 0)
  {
LABEL_7:
    v78 = a75;
    if (!a75)
      goto LABEL_9;
    goto LABEL_8;
  }
  operator delete(a73);
  v78 = a75;
  if (!a75)
  {
LABEL_9:
    if (v75 < 0)
      operator delete(v76);
    sub_20E8E69C4((uint64_t)&STACK[0x218]);
    _Unwind_Resume(a1);
  }
LABEL_8:
  STACK[0x200] = (unint64_t)v78;
  operator delete(v78);
  goto LABEL_9;
}

void sub_20EF7CA28()
{
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  JUMPOUT(0x20EF7D430);
}

void sub_20EF7CA3C()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EF7CA50);
}

#error "20EF7CF94: call analysis failed (funcsize=351)"

void sub_20EF7D0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  if (LOBYTE(STACK[0x2F0]) && SLOBYTE(STACK[0x2EF]) < 0)
    operator delete((void *)STACK[0x2D8]);
  __cxa_guard_abort(&qword_254A4A510);
  if (*(char *)(v62 - 105) < 0)
    operator delete(*(void **)(v62 - 128));
  sub_20E863714((uint64_t)&STACK[0x270]);
  __cxa_end_catch();
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  v63 = *(_QWORD **)(v62 - 136);
  if (v63 == (_QWORD *)(v62 - 160))
  {
    v64 = 4;
    v63 = (_QWORD *)(v62 - 160);
  }
  else
  {
    if (!v63)
    {
      if ((a62 & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_12;
    }
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
  if ((a62 & 0x80000000) == 0)
  {
LABEL_18:
    if (a56 < 0)
    {
LABEL_19:
      operator delete(a51);
      if ((a50 & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_14;
    }
LABEL_13:
    if ((a50 & 0x80000000) == 0)
    {
LABEL_15:
      sub_20EB9B044((uint64_t)&STACK[0x330]);
      JUMPOUT(0x20EF7D3F8);
    }
LABEL_14:
    operator delete(a45);
    goto LABEL_15;
  }
LABEL_12:
  operator delete(a57);
  if (a56 < 0)
    goto LABEL_19;
  goto LABEL_13;
}

void sub_20EF7D294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;
  uint64_t v60;

  __cxa_end_catch();
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  v60 = *(_QWORD *)(v59 - 136);
  if (v60 != v59 - 160)
  {
    if (!v60)
    {
      if (a59 < 0)
      {
        operator delete(a54);
        if ((a53 & 0x80000000) == 0)
          JUMPOUT(0x20EF7D33CLL);
        JUMPOUT(0x20EF7D378);
      }
      JUMPOUT(0x20EF7D370);
    }
    JUMPOUT(0x20EF7D358);
  }
  JUMPOUT(0x20EF7D35CLL);
}

void sub_20EF7D2A0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

void sub_20EF7D2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if ((a50 & 0x80000000) == 0)
    JUMPOUT(0x20EF7D34CLL);
  JUMPOUT(0x20EF7D344);
}

void sub_20EF7D2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if ((a50 & 0x80000000) == 0)
    JUMPOUT(0x20EF7D34CLL);
  JUMPOUT(0x20EF7D344);
}

void sub_20EF7D2E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
    JUMPOUT(0x20EF7D32CLL);
  JUMPOUT(0x20EF7D370);
}

void sub_20EF7D39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a73;

  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  if (a73 < 0)
    JUMPOUT(0x20EF7D49CLL);
  JUMPOUT(0x20EF7D468);
}

void sub_20EF7D3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a73;

  if (SLOBYTE(STACK[0x3B7]) < 0)
    operator delete((void *)STACK[0x3A0]);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  if (a73 < 0)
    JUMPOUT(0x20EF7D49CLL);
  JUMPOUT(0x20EF7D468);
}

void sub_20EF7D3E0()
{
  JUMPOUT(0x20EF7D450);
}

void sub_20EF7D3E8()
{
  JUMPOUT(0x20EF7D448);
}

void sub_20EF7D40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  int v75;
  void *v76;
  void *v78;

  sub_20EB9B044(&STACK[0x3A0]);
  if (a62 < 0)
    operator delete(a57);
  sub_20EF80EA8(&a63);
  if (a72 < 0)
  {
    operator delete(a69);
    if ((a74 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((a74 & 0x80000000) == 0)
  {
LABEL_5:
    v78 = a75;
    if (!a75)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(a73);
  v78 = a75;
  if (!a75)
  {
LABEL_7:
    if (v75 < 0)
      operator delete(v76);
    sub_20E8E69C4(&STACK[0x218]);
    _Unwind_Resume(a1);
  }
LABEL_6:
  STACK[0x200] = (unint64_t)v78;
  operator delete(v78);
  goto LABEL_7;
}

void sub_20EF7D414()
{
  sub_20E8F74DC((void **)&STACK[0x330]);
  JUMPOUT(0x20EF7D420);
}

uint64_t sub_20EF7D4B0(_QWORD *a1, uint64_t a2, unint64_t **a3, uint64_t a4)
{
  void *__p[10];
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21[11];

  if (!*(_BYTE *)(a2 + 304)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 739, (uint64_t)"has_loaded_toc_ && \"Submap metadata has not been loaded.\"", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = a3[1] - *a3;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 733223396;
  kdebug_trace();
  while (sub_20EF79F80(a2))
    ;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_20EF81090(*a3, a3[1], (_QWORD *)(a2 + 264), (uint64_t)&v13);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_20EF81090(*a3, a3[1], (_QWORD *)(a2 + 224), (uint64_t)&v10);
  if (*(_BYTE *)(a2 + 160))
  {
    sub_20EF718D4(a2 + 8, (unint64_t **)&v13, a4);
    sub_20EF718D4(a2 + 8, (unint64_t **)&v10, a4);
  }
  sub_20EF7093C(a2 + 8, (unint64_t **)&v13, a4, (uint64_t)v21);
  sub_20EF8131C((uint64_t *)&v13, v21, (_QWORD *)(a2 + 264));
  sub_20EF7093C(a2 + 8, (unint64_t **)&v10, a4, (uint64_t)__p);
  sub_20EF8131C((uint64_t *)&v10, __p, (_QWORD *)(a2 + 224));
  if (__p[0])
    operator delete(__p[0]);
  if (v21[0])
    operator delete(v21[0]);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  return kdebug_trace();
}

#error "20EF7DEC4: call analysis failed (funcsize=485)"

void sub_20EF7E1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E8E69C4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF7E1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char *v6;
  std::string *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::string v12;
  void *v13[2];
  uint64_t v14;
  void *__dst[2];
  uint64_t v16;
  _QWORD v17[2];
  void *v18[2];
  char v19;
  std::string __p;
  uint64_t v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  sub_20EF70294(a1, a3, (uint64_t)v18);
  v17[0] = 0;
  v17[1] = 0;
  memset(&v12, 0, sizeof(v12));
  sub_20E8A9678(&v12, (std::string *)".tmp", (std::string *)"");
  sub_20EF72794((uint64_t)v18, (const char *)&v12, (uint64_t)v13);
  if (SHIBYTE(v14) < 0)
  {
    sub_20E860C04(__dst, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v13;
    v16 = v14;
  }
  v21 = 0;
  v5 = operator new(0x20uLL);
  *v5 = &off_24C9F2338;
  v5[1] = &v21;
  v5[2] = v17;
  v5[3] = a3;
  v23 = v5;
  v6 = (char *)HIBYTE(v16);
  if (v16 >= 0)
    v7 = (std::string *)__dst;
  else
    v7 = (std::string *)__dst[0];
  memset(&__p, 0, sizeof(__p));
  if (v16 < 0)
    v6 = (char *)__dst[1];
  sub_20E8A9678(&__p, v7, (std::string *)&v6[(_QWORD)v7]);
  if (!v23)
    sub_20E86D37C();
  (*(void (**)(_BYTE *, uint64_t, std::string *))(*(_QWORD *)v23 + 48))(v23, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v8 = v21;
    v9 = v23;
    if (v23 != v22)
      goto LABEL_12;
LABEL_15:
    v10 = 4;
    v9 = v22;
    goto LABEL_16;
  }
  v8 = v21;
  v9 = v23;
  if (v23 == v22)
    goto LABEL_15;
LABEL_12:
  if (!v9)
    goto LABEL_17;
  v10 = 5;
LABEL_16:
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_17:
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__dst[0]);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_20;
LABEL_24:
      operator delete(v12.__r_.__value_.__l.__data_);
      if ((v19 & 0x80000000) == 0)
        return v8;
LABEL_25:
      operator delete(v18[0]);
      return v8;
    }
  }
  else if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v13[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_24;
LABEL_20:
  if (v19 < 0)
    goto LABEL_25;
  return v8;
}

void sub_20EF7E3D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,uint64_t a57,int a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  __break(1u);
  JUMPOUT(0x20EF7E6A4);
}

void sub_20EF7EAD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38)
{
  uint64_t v38;

  if (*(_BYTE *)(v38 - 152) && *(char *)(v38 - 153) < 0)
    operator delete(*(void **)(v38 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  if (a36 < 0)
    operator delete(__p);
  sub_20E863714((uint64_t)&a38);
  __cxa_end_catch();
  JUMPOUT(0x20EF7E3ECLL);
}

void sub_20EF7ECC4()
{
  __cxa_end_catch();
  JUMPOUT(0x20EF7E3ECLL);
}

uint64_t sub_20EF7ECE8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::string::size_type size;
  std::string *p_dst;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  std::string::size_type v20;
  std::string *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string::size_type v27;
  std::string *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  std::string v33;
  _QWORD v34[2];
  std::string v35;
  std::string v36;
  std::string v37;
  std::string __dst;
  void *v39[2];
  char v40;
  std::string __p;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[11];
  _QWORD v46[2];
  _BYTE v47[24];
  _BYTE *v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a5)
    v10 = sub_20EF7E1C8(a1, *a2 + 88 * a4, a6);
  else
    v10 = 0;
  sub_20EF70140(a1, a6, (uint64_t)v39);
  v11 = a2[3];
  v46[0] = "MapDataSample";
  v46[1] = 13;
  memset(&v36, 0, sizeof(v36));
  sub_20E8A9678(&v36, (std::string *)".tmp", (std::string *)"");
  sub_20EF72794((uint64_t)v39, (const char *)&v36, (uint64_t)&v37);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__dst, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    __dst = v37;
  v44 = 0;
  v12 = operator new(0x20uLL);
  *v12 = &off_24C9F23C8;
  v12[1] = &v44;
  v12[2] = v46;
  v12[3] = a6;
  v48 = v12;
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  memset(&__p, 0, sizeof(__p));
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  sub_20E8A9678(&__p, p_dst, (std::string *)((char *)p_dst + size));
  if (!v48)
    sub_20E86D37C();
  (*(void (**)(_BYTE *, uint64_t, std::string *))(*(_QWORD *)v48 + 48))(v48, v11 + 448 * a3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v15 = v44;
    v16 = v48;
    if (v48 != v47)
      goto LABEL_15;
LABEL_18:
    v17 = 4;
    v16 = v47;
    goto LABEL_19;
  }
  v15 = v44;
  v16 = v48;
  if (v48 == v47)
    goto LABEL_18;
LABEL_15:
  if (!v16)
    goto LABEL_20;
  v17 = 5;
LABEL_19:
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_20:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_22;
LABEL_26:
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_27;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_26;
LABEL_22:
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_23;
LABEL_27:
  operator delete(v36.__r_.__value_.__l.__data_);
LABEL_23:
  sub_20EF703EC(a1, a6, (uint64_t)&__dst);
  v18 = a2[6];
  v45[0] = 0;
  v45[1] = 0;
  memset(&v35, 0, sizeof(v35));
  sub_20E8A9678(&v35, (std::string *)".tmp", (std::string *)"");
  sub_20EF72794((uint64_t)&__dst, (const char *)&v35, (uint64_t)&v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v37, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  else
    v37 = v36;
  v43 = 0;
  v19 = operator new(0x20uLL);
  *v19 = &off_24C9F2458;
  v19[1] = &v43;
  v19[2] = v45;
  v19[3] = a6;
  v48 = v19;
  v20 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v37;
  else
    v21 = (std::string *)v37.__r_.__value_.__r.__words[0];
  memset(&__p, 0, sizeof(__p));
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = v37.__r_.__value_.__l.__size_;
  sub_20E8A9678(&__p, v21, (std::string *)((char *)v21 + v20));
  if (!v48)
    sub_20E86D37C();
  (*(void (**)(_BYTE *, uint64_t, std::string *))(*(_QWORD *)v48 + 48))(v48, v18 + 104 * a3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v22 = v43;
    v23 = v48;
    if (v48 != v47)
      goto LABEL_37;
LABEL_40:
    v24 = 4;
    v23 = v47;
    goto LABEL_41;
  }
  v22 = v43;
  v23 = v48;
  if (v48 == v47)
    goto LABEL_40;
LABEL_37:
  if (!v23)
    goto LABEL_42;
  v24 = 5;
LABEL_41:
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_42:
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
LABEL_48:
    operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_49;
  }
  operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_48;
LABEL_44:
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_45;
LABEL_49:
  operator delete(v35.__r_.__value_.__l.__data_);
LABEL_45:
  sub_20EF70540(a1, a6, (uint64_t)&v37);
  v25 = a2[9];
  v34[0] = 0;
  v34[1] = 0;
  memset(&v33, 0, sizeof(v33));
  sub_20E8A9678(&v33, (std::string *)".tmp", (std::string *)"");
  sub_20EF72794((uint64_t)&v37, (const char *)&v33, (uint64_t)&v35);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&v36, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  else
    v36 = v35;
  v42 = 0;
  v26 = operator new(0x20uLL);
  *v26 = &off_24C9F24E8;
  v26[1] = &v42;
  v26[2] = v34;
  v26[3] = a6;
  v48 = v26;
  v27 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &v36;
  else
    v28 = (std::string *)v36.__r_.__value_.__r.__words[0];
  memset(&__p, 0, sizeof(__p));
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = v36.__r_.__value_.__l.__size_;
  sub_20E8A9678(&__p, v28, (std::string *)((char *)v28 + v27));
  if (!v48)
    sub_20E86D37C();
  (*(void (**)(_BYTE *, uint64_t, std::string *))(*(_QWORD *)v48 + 48))(v48, v25 + 24 * a3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v29 = v42;
    v30 = v48;
    if (v48 != v47)
      goto LABEL_59;
LABEL_62:
    v31 = 4;
    v30 = v47;
    goto LABEL_63;
  }
  v29 = v42;
  v30 = v48;
  if (v48 == v47)
    goto LABEL_62;
LABEL_59:
  if (!v30)
    goto LABEL_64;
  v31 = 5;
LABEL_63:
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_64:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_67;
      goto LABEL_73;
    }
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_74;
  }
LABEL_73:
  operator delete(v33.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_68:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_69;
LABEL_75:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v40 & 0x80000000) == 0)
      return v15 + v10 + v22 + v29;
LABEL_76:
    operator delete(v39[0]);
    return v15 + v10 + v22 + v29;
  }
LABEL_74:
  operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_75;
LABEL_69:
  if (v40 < 0)
    goto LABEL_76;
  return v15 + v10 + v22 + v29;
}

void sub_20EF7F298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a24 < 0)
  {
    operator delete(a19);
    if (a16 < 0)
    {
LABEL_3:
      operator delete(__p);
      if ((a37 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_7:
      operator delete(a32);
LABEL_8:
      if (a44 < 0)
        operator delete(a39);
      if (a51 < 0)
      {
        operator delete(a46);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (a16 < 0)
  {
    goto LABEL_3;
  }
  if ((a37 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

#error "20EF7FA54: call analysis failed (funcsize=346)"

void sub_20EF7FB64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46)
{
  uint64_t v46;

  if (*(_BYTE *)(v46 - 184) && *(char *)(v46 - 185) < 0)
    operator delete(*(void **)(v46 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  if (a44 < 0)
    operator delete(__p);
  sub_20E863714((uint64_t)&a46);
  __cxa_end_catch();
  JUMPOUT(0x20EF7F2CCLL);
}

void sub_20EF7FD54()
{
  __cxa_end_catch();
  JUMPOUT(0x20EF7F2CCLL);
}

#error "20EF8025C: call analysis failed (funcsize=346)"

void sub_20EF8036C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46)
{
  uint64_t v46;

  if (*(_BYTE *)(v46 - 184) && *(char *)(v46 - 185) < 0)
    operator delete(*(void **)(v46 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  if (a44 < 0)
    operator delete(__p);
  sub_20E863714((uint64_t)&a46);
  __cxa_end_catch();
  JUMPOUT(0x20EF7F3ACLL);
}

void sub_20EF8055C()
{
  __cxa_end_catch();
  JUMPOUT(0x20EF7F3ACLL);
}

#error "20EF80A64: call analysis failed (funcsize=346)"

void sub_20EF80B74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46)
{
  uint64_t v46;

  if (*(_BYTE *)(v46 - 184) && *(char *)(v46 - 185) < 0)
    operator delete(*(void **)(v46 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  if (a44 < 0)
    operator delete(__p);
  sub_20E863714((uint64_t)&a46);
  __cxa_end_catch();
  JUMPOUT(0x20EF7F484);
}

void sub_20EF80D64()
{
  __cxa_end_catch();
  JUMPOUT(0x20EF7F484);
}

void sub_20EF80D70(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20EF80D78);
  sub_20E860DA4(a1);
}

uint64_t sub_20EF80D88(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v3;
  _BYTE v4[24];
  int v5;
  _QWORD v6[5];
  _QWORD *v7;

  v5 = 0;
  sub_20EB04FEC((uint64_t)&v3, (uint64_t)v4, a2);
  v6[0] = v4;
  v6[1] = " failed to commit temporary mapping IO files.";
  v6[2] = v4;
  v6[3] = " failed to commit temporary mapping IO files.";
  v6[4] = " failed to commit temporary mapping IO files.";
  if (v5 == -1)
    sub_20E877AB8();
  v7 = v6;
  ((void (*)(_QWORD **, _BYTE *))off_24C9F2310[v5])(&v7, v4);
  if (v5 == -1)
    sub_20E877AB8();
  v6[0] = &v7;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9F20F0[v5])(v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9F20A8[v5])(v6, v4);
  return result;
}

void sub_20EF80E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF80E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF80E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF80EA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20EF80F18(int a1, unint64_t __val)
{
  uint64_t result;
  _BYTE v3[24];
  int v4;
  std::string v5;
  std::string **v6;
  std::string *v7;
  std::string *v8;
  _BYTE *v9;
  std::string *v10;
  std::string *v11;

  v4 = 0;
  std::to_string(&v5, __val);
  v7 = (std::string *)v3;
  v8 = &v5;
  v9 = v3;
  v10 = &v5;
  v11 = &v5;
  v6 = &v7;
  ((void (*)(std::string ***, _BYTE *))sub_20E877EA0)(&v6, v3);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  v7 = (std::string *)v3;
  v8 = (std::string *)" was in located table of contents but doesn't have any location data.";
  v9 = v3;
  v10 = (std::string *)" was in located table of contents but doesn't have any location data.";
  v11 = (std::string *)" was in located table of contents but doesn't have any location data.";
  if (v4 == -1)
    sub_20E877AB8();
  v5.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
  ((void (*)(std::string *, _BYTE *))off_24C9F25F8[v4])(&v5, v3);
  if (v4 == -1)
    sub_20E877AB8();
  v7 = &v5;
  result = ((uint64_t (*)(std::string **, _BYTE *))off_24C9F20F0[v4])(&v7, v3);
  if (v4 != -1)
    return ((uint64_t (*)(std::string **, _BYTE *))off_24C9F20A8[v4])(&v7, v3);
  return result;
}

void sub_20EF81050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF8106C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20EF8105CLL);
}

void sub_20EF81090(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  int8x8_t v5;
  unint64_t *v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t *v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;

  if (a1 != a2)
  {
    v5 = (int8x8_t)a3[1];
    if (v5)
    {
      v8 = a1;
LABEL_4:
      v9 = *v8;
      v10 = (uint8x8_t)vcnt_s8(v5);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        v11 = *v8;
        if (v9 >= *(_QWORD *)&v5)
          v11 = v9 % *(_QWORD *)&v5;
      }
      else
      {
        v11 = v9 & (*(_QWORD *)&v5 - 1);
      }
      v12 = *(_QWORD **)(*a3 + 8 * v11);
      if (v12)
      {
        v13 = (_QWORD *)*v12;
        if (v13)
        {
          if (v10.u32[0] < 2uLL)
          {
            v14 = *(_QWORD *)&v5 - 1;
            while (1)
            {
              v16 = v13[1];
              if (v9 == v16)
              {
                if (v13[2] == v9)
                  goto LABEL_24;
              }
              else if ((v16 & v14) != v11)
              {
                goto LABEL_45;
              }
              v13 = (_QWORD *)*v13;
              if (!v13)
                goto LABEL_45;
            }
          }
          do
          {
            v15 = v13[1];
            if (v9 == v15)
            {
              if (v13[2] == v9)
              {
LABEL_24:
                v18 = *(char **)(a4 + 8);
                v17 = *(_QWORD *)(a4 + 16);
                if ((unint64_t)v18 < v17)
                {
                  *(_QWORD *)v18 = v9;
                  v19 = (uint64_t)(v18 + 8);
LABEL_44:
                  *(_QWORD *)(a4 + 8) = v19;
                  break;
                }
                v20 = *(char **)a4;
                v21 = (uint64_t)&v18[-*(_QWORD *)a4];
                v22 = v21 >> 3;
                v23 = (v21 >> 3) + 1;
                if (v23 >> 61)
                  sub_20E92CED8();
                v24 = v17 - (_QWORD)v20;
                if (v24 >> 2 > v23)
                  v23 = v24 >> 2;
                if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
                  v23 = 0x1FFFFFFFFFFFFFFFLL;
                v37 = v23;
                if (v23)
                {
                  if (v23 >> 61)
                    sub_20E877A38();
                  v25 = operator new(8 * v23);
                  v26 = (unint64_t *)&v25[8 * v22];
                  *v26 = v9;
                  v19 = (uint64_t)(v26 + 1);
                  v27 = v18 - v20;
                  if (v18 == v20)
                    goto LABEL_42;
LABEL_36:
                  v28 = v27 - 8;
                  if (v28 < 0x58)
                    goto LABEL_53;
                  if ((unint64_t)(v18 - v25 - v21) < 0x20)
                    goto LABEL_53;
                  v29 = (v28 >> 3) + 1;
                  v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
                  v31 = &v18[-v30];
                  v26 = (unint64_t *)((char *)v26 - v30);
                  v32 = &v25[8 * v22 - 16];
                  v33 = v18 - 16;
                  v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v35 = *(_OWORD *)v33;
                    *(v32 - 1) = *((_OWORD *)v33 - 1);
                    *v32 = v35;
                    v32 -= 2;
                    v33 -= 32;
                    v34 -= 4;
                  }
                  while (v34);
                  v18 = v31;
                  if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_53:
                    do
                    {
                      v36 = *((_QWORD *)v18 - 1);
                      v18 -= 8;
                      *--v26 = v36;
                    }
                    while (v18 != v20);
                  }
                }
                else
                {
                  v25 = 0;
                  v26 = (unint64_t *)(8 * v22);
                  *(_QWORD *)(8 * v22) = v9;
                  v19 = 8 * v22 + 8;
                  v27 = v18 - v20;
                  if (v18 != v20)
                    goto LABEL_36;
                }
LABEL_42:
                *(_QWORD *)a4 = v26;
                *(_QWORD *)(a4 + 8) = v19;
                *(_QWORD *)(a4 + 16) = &v25[8 * v37];
                if (v20)
                  operator delete(v20);
                goto LABEL_44;
              }
            }
            else
            {
              if (v15 >= *(_QWORD *)&v5)
                v15 %= *(_QWORD *)&v5;
              if (v15 != v11)
                break;
            }
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
      }
LABEL_45:
      while (++v8 != a2)
      {
        v5 = (int8x8_t)a3[1];
        if (v5)
          goto LABEL_4;
      }
    }
  }
}

void sub_20EF8131C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  size_t v17;
  const char *v18;
  _QWORD **v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  size_t v29;
  const char *v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  std::string::size_type *v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  std::string::size_type v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::string::size_type v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v83;
  size_t v84;
  const char *v85;
  unsigned __int8 v86;
  const char *v87;
  size_t v88;
  std::string::size_type *v89;
  uint64_t v90;
  uint64_t v91;
  void **v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  size_t v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  std::string::size_type v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::string::size_type v129;
  void *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  unsigned __int8 v138;
  const char *v139;
  size_t v140;
  std::string::size_type *p_size;
  uint64_t v142;
  uint64_t v143;
  void **v144;
  NSObject *v145;
  uint64_t v146;
  uint64_t v147;
  size_t v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count *v151;
  unint64_t *p_shared_owners;
  unint64_t v153;
  unint64_t v154;
  std::string::size_type v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::string::size_type v181;
  void *v182;
  unint64_t *v183;
  std::runtime_error *exception;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v193;
  uint64_t *v195;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v197;
  int v198;
  const char *v199;
  int v200;
  const char *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  void *__p[2];
  char v206;
  char v207;
  uint64_t v208;
  std::string v209;
  __int128 v210;
  void **v211;
  size_t v212;
  unint64_t v213;
  char v214;
  uint64_t v215;

  v215 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v4 = (v3 - *a1) >> 3;
  if (v4 != a2[1])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    sub_20E8610C0(&v209, "Prune result size does not match request vector size.");
    std::runtime_error::runtime_error(exception, &v209);
    exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
    LODWORD(exception[1].__vftable) = 2;
    __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (v3 != *a1)
  {
    v5 = a3;
    v6 = a2;
    v7 = 0;
    v193 = (v3 - *a1) >> 3;
    do
    {
      if (((*(_QWORD *)(*v6 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
      {
        sub_20EF764A8(&v204);
        if (**(int **)(v204 + 56) > 3)
          goto LABEL_5;
        v12 = *(unsigned __int8 *)(v204 + 72);
        v13 = sub_20E8C31DC(v204, "OSLogSurrogateAppender", 1, 0);
        v14 = v13;
        if (!v12 && v13 == 0)
          goto LABEL_5;
        v195 = &v204;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v197 = std::chrono::system_clock::now().__d_.__rep_;
        v198 = 3;
        v199 = "unknown file";
        v200 = 776;
        v201 = "unknown function";
        v202 = 0;
        v203 = 0;
        v16 = *v195;
        if (*(char *)(*v195 + 39) < 0)
        {
          v18 = *(const char **)(v16 + 16);
          v17 = *(_QWORD *)(v16 + 24);
        }
        else
        {
          v17 = *(unsigned __int8 *)(*v195 + 39);
          v18 = (const char *)(*v195 + 16);
        }
        v187 = *v195 + 16;
        v191 = *a1;
        v138 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v138 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
          if (v207 && v206 < 0)
            operator delete(__p[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
          v5 = a3;
        }
        if (byte_254A4A4F8[23] >= 0)
          v139 = byte_254A4A4F8;
        else
          v139 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v140 = byte_254A4A4F8[23];
        else
          v140 = *(_QWORD *)&byte_254A4A4F8[8];
        v209.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v139, v18);
        if (v140 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v140 >= 0x17)
        {
          v142 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v140 | 7) != 0x17)
            v142 = v140 | 7;
          v143 = v142 + 1;
          p_size = (std::string::size_type *)operator new(v142 + 1);
          v209.__r_.__value_.__r.__words[2] = v140;
          *(_QWORD *)&v210 = v143 | 0x8000000000000000;
          v209.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
          v5 = a3;
        }
        else
        {
          BYTE7(v210) = v140;
          p_size = &v209.__r_.__value_.__l.__size_;
          if (!v140)
          {
LABEL_238:
            *((_BYTE *)p_size + v140) = 0;
            BYTE8(v210) = 1;
            if (v17 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v17 >= 0x17)
            {
              v146 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v17 | 7) != 0x17)
                v146 = v17 | 7;
              v147 = v146 + 1;
              v144 = (void **)operator new(v146 + 1);
              v212 = v17;
              v213 = v147 | 0x8000000000000000;
              v211 = v144;
            }
            else
            {
              HIBYTE(v213) = v17;
              v144 = (void **)&v211;
              if (!v17)
              {
                LOBYTE(v211) = 0;
                v214 = 1;
                v145 = v209.__r_.__value_.__r.__words[0];
                if ((SHIBYTE(v213) & 0x80000000) == 0)
                  goto LABEL_242;
LABEL_248:
                operator delete(v211);
                if (BYTE8(v210))
                  goto LABEL_249;
                goto LABEL_251;
              }
            }
            memmove(v144, v18, v17);
            *((_BYTE *)v144 + v17) = 0;
            v214 = 1;
            v145 = v209.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v213) < 0)
              goto LABEL_248;
LABEL_242:
            if (BYTE8(v210))
            {
LABEL_249:
              if (SBYTE7(v210) < 0)
                operator delete((void *)v209.__r_.__value_.__l.__size_);
            }
LABEL_251:
            if (v209.__r_.__value_.__r.__words[0])
              os_release(v209.__r_.__value_.__l.__data_);
            if (v14 && *(_QWORD *)(v14 + 24))
            {
              v148 = _os_log_pack_size();
              v149 = (std::__shared_weak_count_vtbl *)operator new(v148, (std::align_val_t)8uLL);
              v150 = (std::__shared_weak_count *)operator new();
              v151 = v150;
              v150->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v150->__shared_owners_;
              v150->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v150->__shared_weak_owners_ = 0;
              v150[1].__vftable = v149;
              v209.__r_.__value_.__r.__words[0] = (std::string::size_type)v149;
              v209.__r_.__value_.__l.__size_ = (std::string::size_type)v149;
              v209.__r_.__value_.__r.__words[2] = (std::string::size_type)v150;
              do
                v153 = __ldxr(p_shared_owners);
              while (__stxr(v153 + 1, p_shared_owners));
              v210 = 0uLL;
              v211 = 0;
              do
                v154 = __ldaxr(p_shared_owners);
              while (__stlxr(v154 - 1, p_shared_owners));
              if (!v154)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v151);
              }
              v155 = v209.__r_.__value_.__r.__words[0];
              v156 = _os_log_pack_fill();
              v157 = *(_QWORD *)(v191 + 8 * v7);
              *(_DWORD *)v156 = 134217984;
              *(_QWORD *)(v156 + 4) = v157;
              v158 = (char *)operator new();
              v159 = *(unsigned __int8 *)(v16 + 39);
              v160 = v187;
              if ((v159 & 0x80u) != 0)
              {
                v160 = *(_QWORD *)(v16 + 16);
                v159 = *(_QWORD *)(v16 + 24);
              }
              *(_QWORD *)v158 = v155;
              *(_OWORD *)(v158 + 8) = *(_OWORD *)&v209.__r_.__value_.__r.__words[1];
              *(_OWORD *)&v209.__r_.__value_.__r.__words[1] = 0uLL;
              *(_OWORD *)(v158 + 24) = v210;
              v210 = 0uLL;
              *((_QWORD *)v158 + 5) = v160;
              *((_QWORD *)v158 + 6) = v159;
              v158[56] = 1;
              v208 = 0;
              __p[0] = v158;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), __p);
              v161 = __p[0];
              __p[0] = 0;
              if (v161)
              {
                v162 = (std::__shared_weak_count *)*((_QWORD *)v161 + 4);
                if (v162)
                {
                  v163 = (unint64_t *)&v162->__shared_owners_;
                  do
                    v164 = __ldaxr(v163);
                  while (__stlxr(v164 - 1, v163));
                  if (!v164)
                  {
                    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                    std::__shared_weak_count::__release_weak(v162);
                  }
                }
                v165 = (std::__shared_weak_count *)*((_QWORD *)v161 + 2);
                if (v165)
                {
                  v166 = (unint64_t *)&v165->__shared_owners_;
                  do
                    v167 = __ldaxr(v166);
                  while (__stlxr(v167 - 1, v166));
                  if (!v167)
                  {
                    ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                    std::__shared_weak_count::__release_weak(v165);
                  }
                }
                MEMORY[0x212BC6398](v161, 0x10F0C40B62ED6C6);
                v168 = v208;
                v208 = 0;
                if (v168)
                {
                  v169 = *(std::__shared_weak_count **)(v168 + 32);
                  if (v169)
                  {
                    v170 = (unint64_t *)&v169->__shared_owners_;
                    do
                      v171 = __ldaxr(v170);
                    while (__stlxr(v171 - 1, v170));
                    if (!v171)
                    {
                      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                      std::__shared_weak_count::__release_weak(v169);
                    }
                  }
                  v172 = *(std::__shared_weak_count **)(v168 + 16);
                  if (v172)
                  {
                    v173 = (unint64_t *)&v172->__shared_owners_;
                    do
                      v174 = __ldaxr(v173);
                    while (__stlxr(v174 - 1, v173));
                    if (!v174)
                    {
                      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                      std::__shared_weak_count::__release_weak(v172);
                    }
                  }
                  MEMORY[0x212BC6398](v168, 0x10F0C40B62ED6C6);
                }
              }
              v175 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
              v4 = v193;
              if (*((_QWORD *)&v210 + 1))
              {
                v176 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
                do
                  v177 = __ldaxr(v176);
                while (__stlxr(v177 - 1, v176));
                if (!v177)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
              v178 = (std::__shared_weak_count *)v209.__r_.__value_.__r.__words[2];
              if (v209.__r_.__value_.__r.__words[2])
              {
                v179 = (unint64_t *)(v209.__r_.__value_.__r.__words[2] + 8);
                do
                  v180 = __ldaxr(v179);
                while (__stlxr(v180 - 1, v179));
                if (!v180)
                {
                  ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                  std::__shared_weak_count::__release_weak(v178);
                }
              }
            }
            else
            {
              os_log_type_enabled(v145, OS_LOG_TYPE_INFO);
              v181 = *(_QWORD *)(v191 + 8 * v7);
              LODWORD(v209.__r_.__value_.__l.__data_) = 134217984;
              *(std::string::size_type *)((char *)v209.__r_.__value_.__r.__words + 4) = v181;
              v182 = (void *)_os_log_send_and_compose_impl();
              v4 = v193;
              if (v182)
                free(v182);
            }
            if (v12)
            {
              sub_20E8C003C((uint64_t)&v195, "Failed to prune submap ID: %llu", *(_QWORD *)(*a1 + 8 * v7));
              sub_20E863570((uint64_t)&v195);
            }
            sub_20E863570((uint64_t)&v195);
            v131 = v203;
            if (v203)
            {
              v183 = (unint64_t *)&v203->__shared_owners_;
              do
                v133 = __ldaxr(v183);
              while (__stlxr(v133 - 1, v183));
LABEL_303:
              if (!v133)
              {
                ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                std::__shared_weak_count::__release_weak(v131);
              }
            }
LABEL_4:
            v6 = a2;
            goto LABEL_5;
          }
        }
        memmove(p_size, v139, v140);
        goto LABEL_238;
      }
      v8 = (int8x8_t)v5[1];
      if (!*(_QWORD *)&v8)
        goto LABEL_34;
      v9 = *(_QWORD *)(*a1 + 8 * v7);
      v10 = (uint8x8_t)vcnt_s8(v8);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        v11 = *(_QWORD *)(*a1 + 8 * v7);
        if (v9 >= *(_QWORD *)&v8)
          v11 = v9 % *(_QWORD *)&v8;
      }
      else
      {
        v11 = (*(_QWORD *)&v8 - 1) & v9;
      }
      v19 = *(_QWORD ***)(*v5 + 8 * v11);
      if (!v19 || (v20 = *v19) == 0)
      {
LABEL_34:
        sub_20EF764A8(&v204);
        if (**(int **)(v204 + 56) > 4)
          goto LABEL_125;
        v24 = *(unsigned __int8 *)(v204 + 72);
        v25 = sub_20E8C31DC(v204, "OSLogSurrogateAppender", 1, 0);
        v26 = v25;
        if (!v24 && v25 == 0)
          goto LABEL_125;
        v195 = &v204;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v197 = std::chrono::system_clock::now().__d_.__rep_;
        v198 = 4;
        v199 = "unknown file";
        v200 = 772;
        v201 = "unknown function";
        v202 = 0;
        v203 = 0;
        v28 = *v195;
        if (*(char *)(*v195 + 39) < 0)
        {
          v30 = *(const char **)(v28 + 16);
          v29 = *(_QWORD *)(v28 + 24);
        }
        else
        {
          v29 = *(unsigned __int8 *)(*v195 + 39);
          v30 = (const char *)(*v195 + 16);
        }
        v185 = *v195 + 16;
        v189 = *a1;
        v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
          if (v207 && v206 < 0)
            operator delete(__p[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
          v5 = a3;
        }
        if (byte_254A4A4F8[23] >= 0)
          v32 = byte_254A4A4F8;
        else
          v32 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v33 = byte_254A4A4F8[23];
        else
          v33 = *(_QWORD *)&byte_254A4A4F8[8];
        v209.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v32, v30);
        if (v33 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v33 >= 0x17)
        {
          v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17)
            v35 = v33 | 7;
          v36 = v35 + 1;
          v34 = (std::string::size_type *)operator new(v35 + 1);
          v209.__r_.__value_.__r.__words[2] = v33;
          *(_QWORD *)&v210 = v36 | 0x8000000000000000;
          v209.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
          v5 = a3;
        }
        else
        {
          BYTE7(v210) = v33;
          v34 = &v209.__r_.__value_.__l.__size_;
          if (!v33)
          {
LABEL_57:
            *((_BYTE *)v34 + v33) = 0;
            BYTE8(v210) = 1;
            if (v29 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v29 >= 0x17)
            {
              v39 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v29 | 7) != 0x17)
                v39 = v29 | 7;
              v40 = v39 + 1;
              v37 = (void **)operator new(v39 + 1);
              v212 = v29;
              v213 = v40 | 0x8000000000000000;
              v211 = v37;
            }
            else
            {
              HIBYTE(v213) = v29;
              v37 = (void **)&v211;
              if (!v29)
              {
                LOBYTE(v211) = 0;
                v214 = 1;
                v38 = v209.__r_.__value_.__r.__words[0];
                if ((SHIBYTE(v213) & 0x80000000) == 0)
                  goto LABEL_61;
LABEL_67:
                operator delete(v211);
                if (BYTE8(v210))
                  goto LABEL_68;
                goto LABEL_70;
              }
            }
            memmove(v37, v30, v29);
            *((_BYTE *)v37 + v29) = 0;
            v214 = 1;
            v38 = v209.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v213) < 0)
              goto LABEL_67;
LABEL_61:
            if (BYTE8(v210))
            {
LABEL_68:
              if (SBYTE7(v210) < 0)
                operator delete((void *)v209.__r_.__value_.__l.__size_);
            }
LABEL_70:
            if (v209.__r_.__value_.__r.__words[0])
              os_release(v209.__r_.__value_.__l.__data_);
            if (v26 && *(_QWORD *)(v26 + 24))
            {
              v41 = _os_log_pack_size();
              v42 = (std::__shared_weak_count_vtbl *)operator new(v41, (std::align_val_t)8uLL);
              v43 = (std::__shared_weak_count *)operator new();
              v44 = v43;
              v43->__shared_owners_ = 0;
              v45 = (unint64_t *)&v43->__shared_owners_;
              v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v43->__shared_weak_owners_ = 0;
              v43[1].__vftable = v42;
              v209.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
              v209.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
              v209.__r_.__value_.__r.__words[2] = (std::string::size_type)v43;
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
              v210 = 0uLL;
              v211 = 0;
              do
                v47 = __ldaxr(v45);
              while (__stlxr(v47 - 1, v45));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v44);
              }
              v48 = v209.__r_.__value_.__r.__words[0];
              v49 = _os_log_pack_fill();
              v50 = *(_QWORD *)(v189 + 8 * v7);
              *(_DWORD *)v49 = 134217984;
              *(_QWORD *)(v49 + 4) = v50;
              v51 = (char *)operator new();
              v52 = *(unsigned __int8 *)(v28 + 39);
              v53 = v185;
              if ((v52 & 0x80u) != 0)
              {
                v53 = *(_QWORD *)(v28 + 16);
                v52 = *(_QWORD *)(v28 + 24);
              }
              *(_QWORD *)v51 = v48;
              *(_OWORD *)(v51 + 8) = *(_OWORD *)&v209.__r_.__value_.__r.__words[1];
              *(_OWORD *)&v209.__r_.__value_.__r.__words[1] = 0uLL;
              *(_OWORD *)(v51 + 24) = v210;
              v210 = 0uLL;
              *((_QWORD *)v51 + 5) = v53;
              *((_QWORD *)v51 + 6) = v52;
              v51[56] = 16;
              v208 = 0;
              __p[0] = v51;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v26 + 24) + 40))(*(_QWORD *)(v26 + 24), __p);
              v54 = __p[0];
              __p[0] = 0;
              if (v54)
              {
                v55 = (std::__shared_weak_count *)*((_QWORD *)v54 + 4);
                if (v55)
                {
                  v56 = (unint64_t *)&v55->__shared_owners_;
                  do
                    v57 = __ldaxr(v56);
                  while (__stlxr(v57 - 1, v56));
                  if (!v57)
                  {
                    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                    std::__shared_weak_count::__release_weak(v55);
                  }
                }
                v58 = (std::__shared_weak_count *)*((_QWORD *)v54 + 2);
                if (v58)
                {
                  v59 = (unint64_t *)&v58->__shared_owners_;
                  do
                    v60 = __ldaxr(v59);
                  while (__stlxr(v60 - 1, v59));
                  if (!v60)
                  {
                    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                    std::__shared_weak_count::__release_weak(v58);
                  }
                }
                MEMORY[0x212BC6398](v54, 0x10F0C40B62ED6C6);
                v61 = v208;
                v208 = 0;
                if (v61)
                {
                  v62 = *(std::__shared_weak_count **)(v61 + 32);
                  if (v62)
                  {
                    v63 = (unint64_t *)&v62->__shared_owners_;
                    do
                      v64 = __ldaxr(v63);
                    while (__stlxr(v64 - 1, v63));
                    if (!v64)
                    {
                      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                      std::__shared_weak_count::__release_weak(v62);
                    }
                  }
                  v65 = *(std::__shared_weak_count **)(v61 + 16);
                  if (v65)
                  {
                    v66 = (unint64_t *)&v65->__shared_owners_;
                    do
                      v67 = __ldaxr(v66);
                    while (__stlxr(v67 - 1, v66));
                    if (!v67)
                    {
                      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                      std::__shared_weak_count::__release_weak(v65);
                    }
                  }
                  MEMORY[0x212BC6398](v61, 0x10F0C40B62ED6C6);
                }
              }
              v68 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
              v4 = v193;
              if (*((_QWORD *)&v210 + 1))
              {
                v69 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }
              v71 = (std::__shared_weak_count *)v209.__r_.__value_.__r.__words[2];
              if (v209.__r_.__value_.__r.__words[2])
              {
                v72 = (unint64_t *)(v209.__r_.__value_.__r.__words[2] + 8);
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
            }
            else
            {
              os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
              v74 = *(_QWORD *)(v189 + 8 * v7);
              LODWORD(v209.__r_.__value_.__l.__data_) = 134217984;
              *(std::string::size_type *)((char *)v209.__r_.__value_.__r.__words + 4) = v74;
              v75 = (void *)_os_log_send_and_compose_impl();
              v4 = v193;
              if (v75)
                free(v75);
            }
            if (v24)
            {
              sub_20E8C003C((uint64_t)&v195, "[%llu] was missing from ToC.\n", *(_QWORD *)(*a1 + 8 * v7));
              sub_20E863570((uint64_t)&v195);
            }
            sub_20E863570((uint64_t)&v195);
            v76 = v203;
            if (v203)
            {
              v77 = (unint64_t *)&v203->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v6 = a2;
            goto LABEL_125;
          }
        }
        memmove(v34, v32, v33);
        goto LABEL_57;
      }
      if (v10.u32[0] < 2uLL)
      {
        v21 = *(_QWORD *)&v8 - 1;
        while (1)
        {
          v23 = v20[1];
          if (v23 == v9)
          {
            if (v20[2] == v9)
              goto LABEL_214;
          }
          else if ((v23 & v21) != v11)
          {
            goto LABEL_34;
          }
          v20 = (_QWORD *)*v20;
          if (!v20)
            goto LABEL_34;
        }
      }
      while (1)
      {
        v22 = v20[1];
        if (v22 == v9)
          break;
        if (v22 >= *(_QWORD *)&v8)
          v22 %= *(_QWORD *)&v8;
        if (v22 != v11)
          goto LABEL_34;
LABEL_24:
        v20 = (_QWORD *)*v20;
        if (!v20)
          goto LABEL_34;
      }
      if (v20[2] != v9)
        goto LABEL_24;
LABEL_214:
      sub_20EF9C994((uint64_t)&v209, v5, v20);
      v134 = (_QWORD *)v209.__r_.__value_.__r.__words[0];
      if (v209.__r_.__value_.__r.__words[0])
      {
        if (v209.__r_.__value_.__s.__data_[16])
        {
          v135 = *(_QWORD *)(v209.__r_.__value_.__r.__words[0] + 112);
          if (v135)
          {
            v136 = *(_QWORD *)(v209.__r_.__value_.__r.__words[0] + 120);
            v137 = *(void **)(v209.__r_.__value_.__r.__words[0] + 112);
            if (v136 != v135)
            {
              do
              {
                if (*(char *)(v136 - 1) < 0)
                  operator delete(*(void **)(v136 - 24));
                v136 -= 24;
              }
              while (v136 != v135);
              v137 = (void *)v134[14];
            }
            v134[15] = v135;
            operator delete(v137);
          }
        }
        operator delete(v134);
      }
LABEL_125:
      sub_20EF764A8(&v204);
      if (**(int **)(v204 + 56) <= 3)
      {
        v79 = *(unsigned __int8 *)(v204 + 72);
        v80 = sub_20E8C31DC(v204, "OSLogSurrogateAppender", 1, 0);
        v81 = v80;
        if (v79 || v80 != 0)
        {
          v195 = &v204;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v197 = std::chrono::system_clock::now().__d_.__rep_;
          v198 = 3;
          v199 = "unknown file";
          v200 = 774;
          v201 = "unknown function";
          v202 = 0;
          v203 = 0;
          v83 = *v195;
          if (*(char *)(*v195 + 39) < 0)
          {
            v85 = *(const char **)(v83 + 16);
            v84 = *(_QWORD *)(v83 + 24);
          }
          else
          {
            v84 = *(unsigned __int8 *)(*v195 + 39);
            v85 = (const char *)(*v195 + 16);
          }
          v186 = *v195 + 16;
          v190 = *a1;
          v86 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v86 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)__p);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
            if (v207 && v206 < 0)
              operator delete(__p[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
            v5 = a3;
          }
          if (byte_254A4A4F8[23] >= 0)
            v87 = byte_254A4A4F8;
          else
            v87 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v88 = byte_254A4A4F8[23];
          else
            v88 = *(_QWORD *)&byte_254A4A4F8[8];
          v209.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v87, v85);
          if (v88 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v88 >= 0x17)
          {
            v90 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v88 | 7) != 0x17)
              v90 = v88 | 7;
            v91 = v90 + 1;
            v89 = (std::string::size_type *)operator new(v90 + 1);
            v209.__r_.__value_.__r.__words[2] = v88;
            *(_QWORD *)&v210 = v91 | 0x8000000000000000;
            v209.__r_.__value_.__l.__size_ = (std::string::size_type)v89;
            v5 = a3;
          }
          else
          {
            BYTE7(v210) = v88;
            v89 = &v209.__r_.__value_.__l.__size_;
            if (!v88)
            {
LABEL_148:
              *((_BYTE *)v89 + v88) = 0;
              BYTE8(v210) = 1;
              if (v84 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v84 >= 0x17)
              {
                v94 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v84 | 7) != 0x17)
                  v94 = v84 | 7;
                v95 = v94 + 1;
                v92 = (void **)operator new(v94 + 1);
                v212 = v84;
                v213 = v95 | 0x8000000000000000;
                v211 = v92;
              }
              else
              {
                HIBYTE(v213) = v84;
                v92 = (void **)&v211;
                if (!v84)
                {
                  LOBYTE(v211) = 0;
                  v214 = 1;
                  v93 = v209.__r_.__value_.__r.__words[0];
                  if ((SHIBYTE(v213) & 0x80000000) == 0)
                    goto LABEL_152;
LABEL_158:
                  operator delete(v211);
                  if (BYTE8(v210))
                    goto LABEL_159;
                  goto LABEL_161;
                }
              }
              memmove(v92, v85, v84);
              *((_BYTE *)v92 + v84) = 0;
              v214 = 1;
              v93 = v209.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v213) < 0)
                goto LABEL_158;
LABEL_152:
              if (BYTE8(v210))
              {
LABEL_159:
                if (SBYTE7(v210) < 0)
                  operator delete((void *)v209.__r_.__value_.__l.__size_);
              }
LABEL_161:
              if (v209.__r_.__value_.__r.__words[0])
                os_release(v209.__r_.__value_.__l.__data_);
              if (v81 && *(_QWORD *)(v81 + 24))
              {
                v96 = _os_log_pack_size();
                v97 = (std::__shared_weak_count_vtbl *)operator new(v96, (std::align_val_t)8uLL);
                v98 = (std::__shared_weak_count *)operator new();
                v99 = v98;
                v98->__shared_owners_ = 0;
                v100 = (unint64_t *)&v98->__shared_owners_;
                v98->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v98->__shared_weak_owners_ = 0;
                v98[1].__vftable = v97;
                v209.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
                v209.__r_.__value_.__l.__size_ = (std::string::size_type)v97;
                v209.__r_.__value_.__r.__words[2] = (std::string::size_type)v98;
                do
                  v101 = __ldxr(v100);
                while (__stxr(v101 + 1, v100));
                v210 = 0uLL;
                v211 = 0;
                do
                  v102 = __ldaxr(v100);
                while (__stlxr(v102 - 1, v100));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v99);
                }
                v103 = v209.__r_.__value_.__r.__words[0];
                v104 = _os_log_pack_fill();
                v105 = *(_QWORD *)(v190 + 8 * v7);
                *(_DWORD *)v104 = 134217984;
                *(_QWORD *)(v104 + 4) = v105;
                v106 = (char *)operator new();
                v107 = *(unsigned __int8 *)(v83 + 39);
                v108 = v186;
                if ((v107 & 0x80u) != 0)
                {
                  v108 = *(_QWORD *)(v83 + 16);
                  v107 = *(_QWORD *)(v83 + 24);
                }
                *(_QWORD *)v106 = v103;
                *(_OWORD *)(v106 + 8) = *(_OWORD *)&v209.__r_.__value_.__r.__words[1];
                *(_OWORD *)&v209.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v106 + 24) = v210;
                v210 = 0uLL;
                *((_QWORD *)v106 + 5) = v108;
                *((_QWORD *)v106 + 6) = v107;
                v106[56] = 1;
                v208 = 0;
                __p[0] = v106;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v81 + 24) + 40))(*(_QWORD *)(v81 + 24), __p);
                v109 = __p[0];
                __p[0] = 0;
                if (v109)
                {
                  v110 = (std::__shared_weak_count *)*((_QWORD *)v109 + 4);
                  if (v110)
                  {
                    v111 = (unint64_t *)&v110->__shared_owners_;
                    do
                      v112 = __ldaxr(v111);
                    while (__stlxr(v112 - 1, v111));
                    if (!v112)
                    {
                      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                      std::__shared_weak_count::__release_weak(v110);
                    }
                  }
                  v113 = (std::__shared_weak_count *)*((_QWORD *)v109 + 2);
                  if (v113)
                  {
                    v114 = (unint64_t *)&v113->__shared_owners_;
                    do
                      v115 = __ldaxr(v114);
                    while (__stlxr(v115 - 1, v114));
                    if (!v115)
                    {
                      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                      std::__shared_weak_count::__release_weak(v113);
                    }
                  }
                  MEMORY[0x212BC6398](v109, 0x10F0C40B62ED6C6);
                  v116 = v208;
                  v208 = 0;
                  if (v116)
                  {
                    v117 = *(std::__shared_weak_count **)(v116 + 32);
                    if (v117)
                    {
                      v118 = (unint64_t *)&v117->__shared_owners_;
                      do
                        v119 = __ldaxr(v118);
                      while (__stlxr(v119 - 1, v118));
                      if (!v119)
                      {
                        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                        std::__shared_weak_count::__release_weak(v117);
                      }
                    }
                    v120 = *(std::__shared_weak_count **)(v116 + 16);
                    if (v120)
                    {
                      v121 = (unint64_t *)&v120->__shared_owners_;
                      do
                        v122 = __ldaxr(v121);
                      while (__stlxr(v122 - 1, v121));
                      if (!v122)
                      {
                        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                        std::__shared_weak_count::__release_weak(v120);
                      }
                    }
                    MEMORY[0x212BC6398](v116, 0x10F0C40B62ED6C6);
                  }
                }
                v123 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
                v4 = v193;
                if (*((_QWORD *)&v210 + 1))
                {
                  v124 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
                  do
                    v125 = __ldaxr(v124);
                  while (__stlxr(v125 - 1, v124));
                  if (!v125)
                  {
                    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                    std::__shared_weak_count::__release_weak(v123);
                  }
                }
                v126 = (std::__shared_weak_count *)v209.__r_.__value_.__r.__words[2];
                if (v209.__r_.__value_.__r.__words[2])
                {
                  v127 = (unint64_t *)(v209.__r_.__value_.__r.__words[2] + 8);
                  do
                    v128 = __ldaxr(v127);
                  while (__stlxr(v128 - 1, v127));
                  if (!v128)
                  {
                    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                    std::__shared_weak_count::__release_weak(v126);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v93, OS_LOG_TYPE_INFO);
                v129 = *(_QWORD *)(v190 + 8 * v7);
                LODWORD(v209.__r_.__value_.__l.__data_) = 134217984;
                *(std::string::size_type *)((char *)v209.__r_.__value_.__r.__words + 4) = v129;
                v130 = (void *)_os_log_send_and_compose_impl();
                v4 = v193;
                if (v130)
                  free(v130);
              }
              if (v79)
              {
                sub_20E8C003C((uint64_t)&v195, "[%llu] has been pruned.\n", *(_QWORD *)(*a1 + 8 * v7));
                sub_20E863570((uint64_t)&v195);
              }
              sub_20E863570((uint64_t)&v195);
              v131 = v203;
              if (v203)
              {
                v132 = (unint64_t *)&v203->__shared_owners_;
                do
                  v133 = __ldaxr(v132);
                while (__stlxr(v133 - 1, v132));
                goto LABEL_303;
              }
              goto LABEL_4;
            }
          }
          memmove(v89, v87, v88);
          goto LABEL_148;
        }
      }
LABEL_5:
      ++v7;
    }
    while (v7 != v4);
  }
}

void sub_20EF82A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a40)
  {
    if (a39 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_20EF82A68(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  if (*(char *)(v3 - 153) < 0)
  {
    operator delete(*(void **)(v3 - 176));
    if ((v2 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20EF82CDC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  __uint64_t v12[2];
  int v13;
  _QWORD v14[3];
  char v15;
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v13 = 136315138;
    v14[0] = "RT";
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v12[0] = 0;
    pthread_threadid_np(0, v12);
    v8 = v12[0];
    timespec_get((timespec *)v12, 1);
    sub_210219E20(&v13, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "MappingIOPruneErr:Type:%s", 0x19uLL, v6, v7, v8, v12);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v11 + 48))(v11, &v13);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v25 < 0)
    {
      operator delete(__p);
      if ((v23 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v21)
        {
LABEL_14:
          if (v18 && v17 < 0)
            operator delete(v16);
          if (v15 < 0)
            operator delete(*(void **)((char *)v14 + 4));
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v20 < 0)
          operator delete(v19);
        goto LABEL_14;
      }
    }
    else if ((v23 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v22);
    if (!v21)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v13 = 136315138;
    v14[0] = "RT";
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF82FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF82FE4(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20E991A58(v4, "Runtime error during prune: ");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24C9F20C0[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_20E877AB8();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C9F20D8[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_20E877AB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9F20F0[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9F20A8[v5])(&v6, v4);
  return result;
}

void sub_20EF83114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF83128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF8313C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF83150(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  __uint64_t v12[2];
  int v13;
  _QWORD v14[3];
  char v15;
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v13 = 136315138;
    v14[0] = "FS";
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v12[0] = 0;
    pthread_threadid_np(0, v12);
    v8 = v12[0];
    timespec_get((timespec *)v12, 1);
    sub_210219E20(&v13, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "MappingIOPruneErr:Type:%s", 0x19uLL, v6, v7, v8, v12);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v11 + 48))(v11, &v13);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v25 < 0)
    {
      operator delete(__p);
      if ((v23 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v21)
        {
LABEL_14:
          if (v18 && v17 < 0)
            operator delete(v16);
          if (v15 < 0)
            operator delete(*(void **)((char *)v14 + 4));
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v20 < 0)
          operator delete(v19);
        goto LABEL_14;
      }
    }
    else if ((v23 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v22);
    if (!v21)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v13 = 136315138;
    v14[0] = "FS";
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF83418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF83458(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  __uint64_t v12[2];
  int v13;
  _QWORD v14[3];
  char v15;
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v13 = 136315138;
    v14[0] = "ALLOC";
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v12[0] = 0;
    pthread_threadid_np(0, v12);
    v8 = v12[0];
    timespec_get((timespec *)v12, 1);
    sub_210219E20(&v13, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "MappingIOPruneErr:Type:%s", 0x19uLL, v6, v7, v8, v12);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v11 + 48))(v11, &v13);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v25 < 0)
    {
      operator delete(__p);
      if ((v23 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v21)
        {
LABEL_14:
          if (v18 && v17 < 0)
            operator delete(v16);
          if (v15 < 0)
            operator delete(*(void **)((char *)v14 + 4));
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v20 < 0)
          operator delete(v19);
        goto LABEL_14;
      }
    }
    else if ((v23 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v22);
    if (!v21)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v13 = 136315138;
    v14[0] = "ALLOC";
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF83720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF83760(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20E995D04(v4, "Memory allocation error during prune: ");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24C9F20C0[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_20E877AB8();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C9F20D8[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_20E877AB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9F20F0[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9F20A8[v5])(&v6, v4);
  return result;
}

void sub_20EF83890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF838A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF838B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EF838CC(_QWORD *a1, unint64_t a2)
{
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v3 = (int8x8_t)a1[34];
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a2;
      if (*(_QWORD *)&v3 <= a2)
        v5 = a2 % *(_QWORD *)&v3;
    }
    else
    {
      v5 = (*(_QWORD *)&v3 - 1) & a2;
    }
    v6 = *(_QWORD **)(a1[33] + 8 * v5);
    if (v6)
    {
      result = (_QWORD *)*v6;
      if (*v6)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v3 - 1;
          while (1)
          {
            v10 = result[1];
            if (v10 == a2)
            {
              if (result[2] == a2)
                return result;
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = result[1];
          if (v9 == a2)
          {
            if (result[2] == a2)
              return result;
          }
          else
          {
            if (v9 >= *(_QWORD *)&v3)
              v9 %= *(_QWORD *)&v3;
            if (v9 != v5)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_21:
  v11 = (int8x8_t)a1[29];
  if (!*(_QWORD *)&v11)
    return 0;
  v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = a2;
    if (*(_QWORD *)&v11 <= a2)
      v13 = a2 % *(_QWORD *)&v11;
  }
  else
  {
    v13 = (*(_QWORD *)&v11 - 1) & a2;
  }
  v14 = *(_QWORD **)(a1[28] + 8 * v13);
  if (!v14)
    return 0;
  result = (_QWORD *)*v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      v15 = *(_QWORD *)&v11 - 1;
      while (1)
      {
        v17 = result[1];
        if (v17 == a2)
        {
          if (result[2] == a2)
            return result;
        }
        else if ((v17 & v15) != v13)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v16 = result[1];
      if (v16 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v16 >= *(_QWORD *)&v11)
          v16 %= *(_QWORD *)&v11;
        if (v16 != v13)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

double sub_20EF83A74(uint64_t a1, __int128 **a2)
{
  unint64_t v4;
  __int128 *i;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  double result;
  __int128 v11;
  unint64_t v12;
  void *__p[2];
  uint64_t v14;

  v4 = ((char *)a2[1] - (char *)*a2) >> 5;
  v12 = 0;
  v11 = 0uLL;
  sub_20E9099B8((uint64_t)&v11, v4);
  v6 = *a2;
  for (i = a2[1]; v6 != i; v6 += 2)
  {
    while (1)
    {
      while (1)
      {
        if (*((char *)v6 + 23) < 0)
        {
          sub_20E860C04(__p, *(void **)v6, *((_QWORD *)v6 + 1));
        }
        else
        {
          v8 = *v6;
          v14 = *((_QWORD *)v6 + 2);
          *(_OWORD *)__p = v8;
        }
        v9 = (_OWORD *)*((_QWORD *)&v11 + 1);
        if (*((_QWORD *)&v11 + 1) >= v12)
          break;
        v7 = *(_OWORD *)__p;
        *(_QWORD *)(*((_QWORD *)&v11 + 1) + 16) = v14;
        *v9 = v7;
        *((_QWORD *)&v11 + 1) = (char *)v9 + 24;
        v6 += 2;
        if (v6 == i)
          goto LABEL_12;
      }
      *((_QWORD *)&v11 + 1) = sub_20E8F7CF0((void **)&v11, (uint64_t)__p);
      if (SHIBYTE(v14) < 0)
        break;
      v6 += 2;
      if (v6 == i)
        goto LABEL_12;
    }
    operator delete(__p[0]);
  }
LABEL_12:
  result = *(double *)&v11;
  *(_OWORD *)a1 = v11;
  *(_QWORD *)(a1 + 16) = v12;
  return result;
}

void sub_20EF83B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void **v19;
  void **v20;

  if (__p)
  {
    v19 = a10;
    v20 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != __p);
      v20 = __p;
    }
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_20EF83C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  __uint64_t v24[2];
  int v25;
  _BYTE v26[18];
  __int16 v27;
  int v28;
  __int16 v29;
  _DWORD v30[6];
  char v31;
  char v32;
  void *v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  void *__p;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  if (a2 == a1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v10 = a1;
    v11 = 0;
    do
    {
      v11 += (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 192))(a5, v10);
      v10 += 24;
    }
    while (v10 != a2);
  }
  v12 = sub_210219C18();
  if (*((char *)a4 + 23) >= 0)
    v13 = a4;
  else
    v13 = (uint64_t *)*a4;
  v14 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v15 = atomic_load(&qword_254A5A450);
  v16 = "717273747576777879808182838485868788899091929394959697989900010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
  if (v15)
  {
    v25 = 134218754;
    *(_QWORD *)v26 = a3;
    *(_WORD *)&v26[8] = 2080;
    *(_QWORD *)&v26[10] = v13;
    v27 = 1024;
    v28 = v7;
    v29 = 1024;
    v30[0] = v11;
    v17 = (char *)_os_log_send_and_compose_impl();
    v18 = strlen(v17);
    v24[0] = 0;
    pthread_threadid_np(0, v24);
    v19 = v24[0];
    timespec_get((timespec *)v24, 1);
    sub_210219E20(&v25, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v12 + 1), (__int128 *)(v12 + 5), "MappingIOAnalytics:SID:%llu, TYPE:%s, NF:%u, TS:%u", 0x32uLL, v17, v18, v19, v24);
    std::mutex::lock(&stru_254A5A410);
    v20 = qword_254A5A458;
    for (i = unk_254A5A460; v20 != i; v20 += 40)
    {
      v22 = *(_QWORD *)(v20 + 32);
      if (!v22)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v22 + 48))(v22, &v25);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v39 < 0)
    {
      operator delete(__p);
      v16 = "717273747576777879808182838485868788899091929394959697989900010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
      if ((v37 & 0x80000000) == 0)
      {
LABEL_16:
        if (!v35)
        {
LABEL_22:
          if (v32 && v31 < 0)
            operator delete(*(void **)((char *)v30 + 2));
          if (SBYTE1(v30[0]) < 0)
            operator delete(*(void **)&v26[4]);
          if (v17)
            free(v17);
          goto LABEL_29;
        }
LABEL_20:
        if (v34 < 0)
          operator delete(v33);
        goto LABEL_22;
      }
    }
    else
    {
      v16 = "000102030405060708091011121314151617181920212223242526272829303132333435363738394041424344454647484950515253"
            "545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798990001020304050607"
            "080910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061"
            "626364656667686970717273747576777879808182838485868788899091929394959697989900010203040506070809101112131415"
            "161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869"
            "707172737475767778798081828384858687888990919293949596979899"
          + 342;
      if ((v37 & 0x80000000) == 0)
        goto LABEL_16;
    }
    operator delete(v36);
    if (!v35)
      goto LABEL_22;
    goto LABEL_20;
  }
LABEL_29:
  if (os_signpost_enabled((os_log_t)*v12))
  {
    v25 = *((_QWORD *)v16 + 192);
    *(_QWORD *)v26 = a3;
    *(_WORD *)&v26[8] = 2080;
    *(_QWORD *)&v26[10] = v13;
    v27 = 1024;
    v28 = v7;
    v29 = 1024;
    v30[0] = v11;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  return v7;
}

void sub_20EF83F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
LABEL_7:
  if (a34 < 0)
    operator delete(a29);
LABEL_9:
  if (a28)
  {
    if (a27 < 0)
      operator delete(a22);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if (!v47)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v47)
  {
    goto LABEL_14;
  }
  free(v47);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EF84054(std::__fs::filesystem::path *this, std::__fs::filesystem::path *a2, uint64_t a3)
{
  uint64_t v3;
  std::__fs::filesystem::path *v4;
  uint64_t result;
  uint64_t v6;
  std::__fs::filesystem::path::__string_view v7;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v9;
  std::basic_string_view<_CharT, _Traits>::size_type v10;
  void *v11;
  int v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  void *v16;
  std::string::size_type size;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  __int128 *v32;
  __int128 *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void **v37;
  void **v38;
  void *v39;
  void **v40;
  void **v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void **v45;
  void **v46;
  void *v47;
  void **v48;
  void **v49;
  uint64_t v50;
  std::__fs::filesystem::path *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  void **v72;
  char v73;
  void *v74;
  void **v75;
  char v76;
  void *__p;
  void **v78;
  char v79;
  __int128 *v80;
  __int128 *v81;
  char v82;
  __int128 *v83;
  __int128 *v84;
  char v85;
  std::string __str;
  __int128 __dst;
  unint64_t v88;

  if (this != a2)
  {
    v3 = a3;
    v4 = this;
    result = 0;
    v6 = 0;
    while (1)
    {
      v65 = result;
      v66 = v6;
      v7 = std::__fs::filesystem::path::__filename(v4);
      if (v7.__size_ >= 0x7FFFFFFFFFFFFFF8)
        sub_20E860B7C();
      if (v7.__size_ >= 0x17)
        break;
      HIBYTE(v88) = v7.__size_;
      p_dst = &__dst;
      if (v7.__size_)
        goto LABEL_12;
LABEL_13:
      *((_BYTE *)p_dst + v7.__size_) = 0;
      v11 = (void *)__dst;
      LODWORD(v83) = v88;
      *(_DWORD *)((char *)&v83 + 3) = *(_DWORD *)((char *)&v88 + 3);
      v12 = SHIBYTE(v88);
      if (SHIBYTE(v88) < 0)
      {
        sub_20E860C04(&__str, (void *)__dst, *((unint64_t *)&__dst + 1));
      }
      else
      {
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = __dst;
        LODWORD(__str.__r_.__value_.__r.__words[2]) = (_DWORD)v83;
        *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v83 + 3);
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = HIBYTE(v88);
      }
      v69 = std::stoull(&__str, 0, 10);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if ((v12 & 0x80000000) == 0)
          goto LABEL_21;
      }
      else if ((v12 & 0x80000000) == 0)
      {
        goto LABEL_21;
      }
      operator delete(v11);
LABEL_21:
      sub_210224314((uint64_t)v4, 1u, "*.msgpack", 9uLL, v3, (uint64_t *)&v83);
      sub_20EF83A74((uint64_t)&__str, &v83);
      v13 = v83;
      if (v83)
      {
        v14 = v84;
        v15 = v83;
        if (v84 != v83)
        {
          do
          {
            if (*((char *)v14 - 9) < 0)
              operator delete(*((void **)v14 - 4));
            v14 -= 2;
          }
          while (v14 != v13);
          v15 = v83;
        }
        v84 = v13;
        operator delete(v15);
      }
      v85 = 2;
      strcpy((char *)&v83, "MP");
      size = __str.__r_.__value_.__l.__size_;
      v16 = (void *)__str.__r_.__value_.__r.__words[0];
      v18 = sub_20EF83C1C((uint64_t)__str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, v69, (uint64_t *)&v83, v3);
      v20 = v19;
      if (v85 < 0)
        operator delete(v83);
      sub_210224314((uint64_t)v4, 1u, "*.tmp", 5uLL, v3, (uint64_t *)&v80);
      sub_20EF83A74((uint64_t)&v83, &v80);
      v21 = v80;
      if (v80)
      {
        v22 = v81;
        v23 = v80;
        if (v81 != v80)
        {
          do
          {
            if (*((char *)v22 - 9) < 0)
              operator delete(*((void **)v22 - 4));
            v22 -= 2;
          }
          while (v22 != v21);
          v23 = v80;
        }
        v81 = v21;
        operator delete(v23);
      }
      v82 = 3;
      LODWORD(v80) = 5262676;
      v24 = v83;
      v25 = v84;
      v26 = sub_20EF83C1C((uint64_t)v83, (uint64_t)v84, v69, (uint64_t *)&v80, v3);
      v28 = v27;
      if (v82 < 0)
        operator delete(v80);
      sub_210224314((uint64_t)v4, 1u, "*.bck", 5uLL, v3, (uint64_t *)&__p);
      v63 = v28;
      v64 = v26;
      sub_20EF83A74((uint64_t)&v80, (__int128 **)&__p);
      v29 = (void **)__p;
      if (__p)
      {
        v30 = v78;
        v31 = __p;
        if (v78 != __p)
        {
          do
          {
            if (*((char *)v30 - 9) < 0)
              operator delete(*(v30 - 4));
            v30 -= 4;
          }
          while (v30 != v29);
          v31 = __p;
        }
        v78 = v29;
        operator delete(v31);
      }
      v62 = v20;
      v79 = 3;
      LODWORD(__p) = 4932418;
      v33 = v80;
      v32 = v81;
      v34 = sub_20EF83C1C((uint64_t)v80, (uint64_t)v81, v69, (uint64_t *)&__p, v3);
      v61 = v35;
      v36 = v34;
      if (v79 < 0)
        operator delete(__p);
      sub_210224314((uint64_t)v4, 1u, "*.regular", 9uLL, v3, (uint64_t *)&v74);
      v59 = v36;
      v60 = v18;
      sub_20EF83A74((uint64_t)&__p, (__int128 **)&v74);
      v37 = (void **)v74;
      if (v74)
      {
        v38 = v75;
        v39 = v74;
        if (v75 != v74)
        {
          do
          {
            if (*((char *)v38 - 9) < 0)
              operator delete(*(v38 - 4));
            v38 -= 4;
          }
          while (v38 != v37);
          v39 = v74;
        }
        v75 = v37;
        operator delete(v39);
      }
      v68 = (uint64_t)v4;
      v76 = 2;
      strcpy((char *)&v74, "KF");
      v41 = (void **)__p;
      v40 = v78;
      v42 = sub_20EF83C1C((uint64_t)__p, (uint64_t)v78, v69, (uint64_t *)&v74, v3);
      v58 = v43;
      v44 = v42;
      if (v76 < 0)
        operator delete(v74);
      sub_210224314(v68, 1u, "*.keypoints", 0xBuLL, v3, (uint64_t *)&v71);
      v57 = v44;
      sub_20EF83A74((uint64_t)&v74, (__int128 **)&v71);
      v45 = (void **)v71;
      if (v71)
      {
        v46 = v72;
        v47 = v71;
        if (v72 != v71)
        {
          do
          {
            if (*((char *)v46 - 9) < 0)
              operator delete(*(v46 - 4));
            v46 -= 4;
          }
          while (v46 != v45);
          v47 = v71;
        }
        v72 = v45;
        operator delete(v47);
      }
      v73 = 2;
      strcpy((char *)&v71, "KP");
      v49 = (void **)v74;
      v48 = v75;
      v56 = sub_20EF83C1C((uint64_t)v74, (uint64_t)v75, v69, (uint64_t *)&v71, a3);
      v70 = v50;
      if (v73 < 0)
      {
        operator delete(v71);
        if (!v49)
        {
LABEL_73:
          v3 = a3;
          if (!v41)
            goto LABEL_80;
          goto LABEL_83;
        }
      }
      else if (!v49)
      {
        goto LABEL_73;
      }
      while (v48 != v49)
      {
        if (*((char *)v48 - 1) < 0)
          operator delete(*(v48 - 3));
        v48 -= 3;
      }
      operator delete(v49);
      v3 = a3;
      if (!v41)
      {
LABEL_80:
        v51 = (std::__fs::filesystem::path *)v68;
        v53 = v65;
        v52 = v66;
        if (!v33)
          goto LABEL_87;
        goto LABEL_90;
      }
LABEL_83:
      while (v40 != v41)
      {
        if (*((char *)v40 - 1) < 0)
          operator delete(*(v40 - 3));
        v40 -= 3;
      }
      operator delete(v41);
      v51 = (std::__fs::filesystem::path *)v68;
      v53 = v65;
      v52 = v66;
      if (!v33)
      {
LABEL_87:
        v54 = v62;
        if (v24)
          goto LABEL_97;
        goto LABEL_94;
      }
LABEL_90:
      while (v32 != v33)
      {
        if (*((char *)v32 - 1) < 0)
          operator delete(*((void **)v32 - 3));
        v32 = (__int128 *)((char *)v32 - 24);
      }
      operator delete(v33);
      v54 = v62;
      if (v24)
      {
LABEL_97:
        while (v25 != v24)
        {
          if (*((char *)v25 - 1) < 0)
            operator delete(*((void **)v25 - 3));
          v25 = (__int128 *)((char *)v25 - 24);
        }
        operator delete(v24);
        if (!v16)
          goto LABEL_4;
LABEL_103:
        while ((void *)size != v16)
        {
          if (*(char *)(size - 1) < 0)
            operator delete(*(void **)(size - 24));
          size -= 24;
        }
        operator delete(v16);
        goto LABEL_4;
      }
LABEL_94:
      if (v16)
        goto LABEL_103;
LABEL_4:
      result = v60 + v53 + v64 + v59 + v57 + v56;
      v6 = v54 + v52 + v63 + v61 + v58 + v70;
      v4 = v51 + 1;
      if (v4 == a2)
        return result;
    }
    v9 = (v7.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7.__size_ | 7) != 0x17)
      v9 = v7.__size_ | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v7.__size_;
    v88 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_12:
    memmove(p_dst, v7.__data_, v7.__size_);
    goto LABEL_13;
  }
  return 0;
}

void sub_20EF847C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (*(char *)(v44 - 113) < 0)
    operator delete(*(void **)(v44 - 136));
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EF848A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  sub_20EB9B93C(&a33);
  JUMPOUT(0x20EF8488CLL);
}

void sub_20EF848B4()
{
  JUMPOUT(0x20EF8488CLL);
}

void sub_20EF848BC()
{
  uint64_t v0;

  if (*(char *)(v0 - 161) < 0)
    operator delete(*(void **)(v0 - 184));
  JUMPOUT(0x20EF8488CLL);
}

void sub_20EF848D4()
{
  uint64_t v0;

  sub_20EB9B93C((void **)(v0 - 184));
  JUMPOUT(0x20EF84894);
}

void sub_20EF848E4()
{
  JUMPOUT(0x20EF84894);
}

void sub_20EF848EC()
{
  uint64_t v0;

  if (*(char *)(v0 - 137) < 0)
    operator delete(*(void **)(v0 - 160));
  JUMPOUT(0x20EF84894);
}

double sub_20EF84904(uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

void sub_20EF849C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _BYTE v18[18];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315394;
    *(_QWORD *)v18 = "BAD_SID";
    *(_WORD *)&v18[8] = 2080;
    *(_QWORD *)&v18[10] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "MappingIOAnalytics:TYPE:%s, DIR:%s", 0x22uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)&v18[4]);
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315394;
    *(_QWORD *)v18 = "BAD_SID";
    *(_WORD *)&v18[8] = 2080;
    *(_QWORD *)&v18[10] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF84CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF84CFC(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  int64_t v17;
  int64_t v18;
  __n128 v19;
  int64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 *v28;
  unint64_t v29;
  __n128 *v30;
  int64_t v31;
  int64_t v32;
  __n128 v33;
  unint64_t v34;
  unint64_t v35;
  __n128 v36;
  __n128 v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  __n128 v41;
  int64_t v42;
  __n128 v43;
  int64_t v44;
  uint64_t v45;
  __n128 v46;
  __n128 *v47;
  unint64_t v48;
  __n128 *v49;
  int64_t v50;
  int64_t v51;
  __n128 v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  __n128 v56;
  unint64_t v57;
  uint64_t v58;
  __n128 v59;
  int64_t v60;
  uint64_t v61;
  __n128 v62;
  int64_t v63;
  int64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __n128 *v69;
  __n128 *v70;
  int64_t v71;
  __n128 *v72;
  int64_t v73;
  unint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  __n128 *v78;
  __n128 v79;
  BOOL v80;
  __n128 v81;
  int64_t v82;
  unint64_t v83;
  int64_t v84;
  unint64_t v85;
  int64_t v86;
  __n128 *v87;
  __n128 *v88;
  int64_t v89;
  __n128 v90;
  int64_t v91;
  int64_t v92;
  __n128 *v93;
  __n128 v94;
  __int128 v95;
  __n128 *v96;
  int64_t v97;
  int64_t v98;
  __n128 v99;
  __n128 v100;
  __n128 *v101;
  __n128 *v102;
  __n128 *v103;
  __n128 v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  __n128 v110;
  __n128 *v111;
  BOOL v113;
  uint64_t v114;
  __n128 *v115;
  uint64_t v116;
  int64_t v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  int64_t v122;
  BOOL v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int64_t v136;
  uint64_t v137;
  unint64_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  __n128 v152;
  unint64_t v153;
  unint64_t v154;
  int64_t v155;
  int64_t v156;
  __n128 *v157;
  int64_t v158;
  unint64_t v159;
  unint64_t v160;
  __n128 v161;
  __n128 v162;
  __int128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __int128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __n128 v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;

BOOL sub_20EF85C48(uint64_t a1, __n128 *a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  unint64_t v7;
  __n128 v8;
  uint64_t v9;
  __n128 *v10;
  __n128 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  unint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __n128 v46;
  unint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  __n128 v53;
  __n128 *v54;
  uint64_t v55;
  int v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;

  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if ((int64_t)a2[-1].n128_u64[1] > *(_QWORD *)(a1 + 16))
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(__n128 *)a1;
        v9 = a2[-1].n128_i64[1];
        *(__n128 *)a1 = *(__n128 *)((char *)a2 - 24);
        *(_QWORD *)(a1 + 16) = v9;
        *(__n128 *)((char *)a2 - 24) = v8;
        a2[-1].n128_u64[1] = v7;
      }
      return result;
    case 3uLL:
      v10 = (__n128 *)(a1 + 24);
      v11 = (__n128 *)((char *)a2 - 24);
      v12 = *(_QWORD *)(a1 + 40);
      v13 = a2[-1].n128_i64[1];
      if (v12 <= *(_QWORD *)(a1 + 16))
      {
        if (v13 > v12)
        {
          v36 = *(_QWORD *)(a1 + 40);
          v37 = *v10;
          v38 = a2[-1].n128_i64[1];
          *v10 = *v11;
          *(_QWORD *)(a1 + 40) = v38;
          *v11 = v37;
          a2[-1].n128_u64[1] = v36;
          if (*(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 16))
          {
            v39 = *(_QWORD *)(a1 + 16);
            v40 = *(__n128 *)a1;
            *(__n128 *)a1 = *v10;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v10 = v40;
            *(_QWORD *)(a1 + 40) = v39;
          }
        }
      }
      else if (v13 <= v12)
      {
        v45 = *(_QWORD *)(a1 + 16);
        v46 = *(__n128 *)a1;
        *(__n128 *)a1 = *v10;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v10 = v46;
        *(_QWORD *)(a1 + 40) = v45;
        if ((int64_t)a2[-1].n128_u64[1] > *(_QWORD *)(a1 + 40))
        {
          v47 = *(_QWORD *)(a1 + 40);
          v48 = *v10;
          v49 = a2[-1].n128_i64[1];
          *v10 = *v11;
          *(_QWORD *)(a1 + 40) = v49;
          *v11 = v48;
          a2[-1].n128_u64[1] = v47;
        }
      }
      else
      {
        v14 = *(_QWORD *)(a1 + 16);
        v15 = *(__n128 *)a1;
        v16 = a2[-1].n128_i64[1];
        *(__n128 *)a1 = *v11;
        *(_QWORD *)(a1 + 16) = v16;
        *v11 = v15;
        a2[-1].n128_u64[1] = v14;
      }
      return result;
    case 4uLL:
      sub_20EF86110((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)((char *)a2 - 24), a3);
      return 1;
    case 5uLL:
      v24 = (__n128 *)(a1 + 24);
      v25 = (__n128 *)(a1 + 48);
      v26 = (__n128 *)(a1 + 72);
      sub_20EF86110((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a3);
      if ((int64_t)a2[-1].n128_u64[1] > *(_QWORD *)(a1 + 88))
      {
        v27 = *(_QWORD *)(a1 + 88);
        v28 = *v26;
        v29 = a2[-1].n128_i64[1];
        *v26 = *(__n128 *)((char *)a2 - 24);
        *(_QWORD *)(a1 + 88) = v29;
        *(__n128 *)((char *)a2 - 24) = v28;
        a2[-1].n128_u64[1] = v27;
        if (*(_QWORD *)(a1 + 88) > *(_QWORD *)(a1 + 64))
        {
          v30 = *(_QWORD *)(a1 + 64);
          v31 = *v25;
          *v25 = *v26;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v26 = v31;
          *(_QWORD *)(a1 + 88) = v30;
          if (*(_QWORD *)(a1 + 64) > *(_QWORD *)(a1 + 40))
          {
            v32 = *(_QWORD *)(a1 + 40);
            v33 = *v24;
            *v24 = *v25;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v25 = v33;
            *(_QWORD *)(a1 + 64) = v32;
            if (*(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 16))
            {
              v34 = *(_QWORD *)(a1 + 16);
              v35 = *(__n128 *)a1;
              *(__n128 *)a1 = *v24;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v24 = v35;
              *(_QWORD *)(a1 + 40) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v17 = (__n128 *)(a1 + 48);
      v18 = (__n128 *)(a1 + 24);
      v19 = *(_QWORD *)(a1 + 40);
      v20 = *(_QWORD *)(a1 + 16);
      v21 = *(_QWORD *)(a1 + 64);
      if (v19 <= v20)
      {
        if (v21 > v19)
        {
          v41 = *(_QWORD *)(a1 + 40);
          v42 = *v18;
          *v18 = *v17;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v17 = v42;
          *(_QWORD *)(a1 + 64) = v41;
          if (*(_QWORD *)(a1 + 40) > v20)
          {
            v43 = *(_QWORD *)(a1 + 16);
            v44 = *(__n128 *)a1;
            *(__n128 *)a1 = *v18;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v18 = v44;
            *(_QWORD *)(a1 + 40) = v43;
          }
        }
      }
      else if (v21 <= v19)
      {
        v50 = *(_QWORD *)(a1 + 16);
        v51 = *(__n128 *)a1;
        *(__n128 *)a1 = *v18;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v18 = v51;
        *(_QWORD *)(a1 + 40) = v50;
        if (v21 > *(_QWORD *)(a1 + 40))
        {
          v52 = *(_QWORD *)(a1 + 40);
          v53 = *v18;
          *v18 = *v17;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v17 = v53;
          *(_QWORD *)(a1 + 64) = v52;
        }
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 16);
        v23 = *(__n128 *)a1;
        *(__n128 *)a1 = *v17;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
        *v17 = v23;
        *(_QWORD *)(a1 + 64) = v22;
      }
      v54 = (__n128 *)(a1 + 72);
      if ((__n128 *)(a1 + 72) == a2)
        return 1;
      v55 = 0;
      v56 = 0;
      break;
  }
  while (1)
  {
    v57 = v54[1].n128_i64[0];
    if (v57 > (int64_t)v17[1].n128_u64[0])
      break;
LABEL_36:
    v17 = v54;
    v55 += 24;
    v54 = (__n128 *)((char *)v54 + 24);
    if (v54 == a2)
      return 1;
  }
  v61 = *v54;
  v58 = v55;
  do
  {
    v59 = a1 + v58;
    *(_OWORD *)(v59 + 72) = *(_OWORD *)(a1 + v58 + 48);
    *(_QWORD *)(v59 + 88) = *(_QWORD *)(a1 + v58 + 64);
    if (v58 == -48)
    {
      *(__n128 *)a1 = v61;
      *(_QWORD *)(a1 + 16) = v57;
      if (++v56 != 8)
        goto LABEL_36;
      return &v54[1].n128_i8[8] == (__int8 *)a2;
    }
    v58 -= 24;
  }
  while (v57 > *(_QWORD *)(v59 + 40));
  v60 = a1 + v58;
  *(__n128 *)(v60 + 72) = v61;
  *(_QWORD *)(v60 + 88) = v57;
  if (++v56 != 8)
    goto LABEL_36;
  return &v54[1].n128_i8[8] == (__int8 *)a2;
}

__n128 sub_20EF86110(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  int64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v5 = a2[1].n128_i64[0];
  v6 = a3[1].n128_i64[0];
  if (v5 <= (int64_t)a1[1].n128_u64[0])
  {
    if (v6 > v5)
    {
      v9 = a2[1].n128_u64[0];
      result = *a2;
      v10 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v10;
      *a3 = result;
      a3[1].n128_u64[0] = v9;
      if ((int64_t)a2[1].n128_u64[0] > (int64_t)a1[1].n128_u64[0])
      {
        v11 = a1[1].n128_u64[0];
        result = *a1;
        v12 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v12;
        *a2 = result;
        a2[1].n128_u64[0] = v11;
      }
    }
  }
  else
  {
    if (v6 > v5)
    {
      v7 = a1[1].n128_u64[0];
      result = *a1;
      v8 = a3[1].n128_u64[0];
      *a1 = *a3;
      a1[1].n128_u64[0] = v8;
LABEL_9:
      *a3 = result;
      a3[1].n128_u64[0] = v7;
      goto LABEL_10;
    }
    v13 = a1[1].n128_u64[0];
    result = *a1;
    v14 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v14;
    *a2 = result;
    a2[1].n128_u64[0] = v13;
    if ((int64_t)a3[1].n128_u64[0] > (int64_t)a2[1].n128_u64[0])
    {
      v7 = a2[1].n128_u64[0];
      result = *a2;
      v15 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if ((int64_t)a4[1].n128_u64[0] > (int64_t)a3[1].n128_u64[0])
  {
    v16 = a3[1].n128_u64[0];
    result = *a3;
    v17 = a4[1].n128_u64[0];
    *a3 = *a4;
    a3[1].n128_u64[0] = v17;
    *a4 = result;
    a4[1].n128_u64[0] = v16;
    if ((int64_t)a3[1].n128_u64[0] > (int64_t)a2[1].n128_u64[0])
    {
      v18 = a2[1].n128_u64[0];
      result = *a2;
      v19 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v19;
      *a3 = result;
      a3[1].n128_u64[0] = v18;
      if ((int64_t)a2[1].n128_u64[0] > (int64_t)a1[1].n128_u64[0])
      {
        v20 = a1[1].n128_u64[0];
        result = *a1;
        v21 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v21;
        *a2 = result;
        a2[1].n128_u64[0] = v20;
      }
    }
  }
  return result;
}

unint64_t sub_20EF86298(unint64_t result, unint64_t *a2, _QWORD ***a3, uint64_t a4, char a5)
{
  _QWORD ***v6;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  BOOL v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t v93;
  int8x8_t v94;
  uint8x8_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD **v138;
  unint64_t *v139;
  _QWORD *v140;
  unint64_t *v141;
  unint64_t *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int8x8_t v148;
  uint8x8_t v149;
  unint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint8x8_t v158;
  unint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  int64_t v167;
  int64_t v168;
  unint64_t *v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  BOOL v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _QWORD **v189;
  int64_t v190;
  unint64_t *v191;
  unint64_t *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  uint8x8_t v197;
  unint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint8x8_t v206;
  unint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  int8x8_t v221;
  uint8x8_t v222;
  unint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint8x8_t v231;
  unint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t *v240;
  _QWORD *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  int8x8_t v246;
  uint8x8_t v247;
  uint64_t v248;
  BOOL v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  _QWORD *v263;
  _QWORD *v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t *v270;
  unint64_t *v271;
  unint64_t *v273;
  unint64_t v274;
  int64_t v275;
  uint64_t v276;
  _QWORD **v277;
  unint64_t *v279;
  unint64_t *v280;
  unint64_t *v281;
  uint64_t v282;
  unint64_t *v283;
  int64_t v284;

  v6 = a3;
  v8 = (unint64_t *)result;
LABEL_2:
  v270 = a2 - 2;
  v271 = a2 - 1;
  v269 = a2 - 3;
  v9 = v8;
  v279 = a2;
  while (2)
  {
    v10 = v9;
    v11 = (char *)a2 - (char *)v9;
    v12 = a2 - v9;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v134 = *(a2 - 1);
        v135 = *v9;
        v136 = **v6;
        v137 = sub_20EF838CC(v136, v134)[12];
        result = (unint64_t)sub_20EF838CC(v136, v135);
        if (v137 > *(_QWORD *)(result + 96))
        {
          *v10 = v134;
          *(a2 - 1) = v135;
        }
        return result;
      case 3uLL:
        return (unint64_t)sub_20EF88260(v9, v9 + 1, v271, **v6);
      case 4uLL:
        return (unint64_t)sub_20EF88598(v9, v9 + 1, v9 + 2, v271, v6);
      case 5uLL:
        return (unint64_t)sub_20EF88120(v9, v9 + 1, v9 + 2, v9 + 3, v271, v6);
      default:
        if (v11 <= 191)
        {
          v138 = *v6;
          if ((a5 & 1) != 0)
          {
            if (v9 != a2)
            {
              v139 = v9 + 1;
              if (v9 + 1 != a2)
              {
                v140 = *v138;
                v141 = v9;
                do
                {
                  v143 = v139;
                  v145 = *v141;
                  v144 = v141[1];
                  v146 = sub_20EF838CC(v140, v144)[12];
                  result = (unint64_t)sub_20EF838CC(v140, v145);
                  if (v146 > *(_QWORD *)(result + 96))
                  {
                    v142 = v143;
                    while (1)
                    {
                      *v142 = v145;
                      if (v141 == v10)
                        break;
                      v142 = v141;
                      v147 = *--v141;
                      v145 = v147;
                      v148 = (int8x8_t)v140[34];
                      if (v148)
                      {
                        v149 = (uint8x8_t)vcnt_s8(v148);
                        v149.i16[0] = vaddlv_u8(v149);
                        if (v149.u32[0] > 1uLL)
                        {
                          v150 = v144;
                          if (*(_QWORD *)&v148 <= v144)
                            v150 = v144 % *(_QWORD *)&v148;
                        }
                        else
                        {
                          v150 = (*(_QWORD *)&v148 - 1) & v144;
                        }
                        v151 = *(_QWORD **)(v140[33] + 8 * v150);
                        if (v151)
                        {
                          v152 = (_QWORD *)*v151;
                          if (v152)
                          {
                            if (v149.u32[0] < 2uLL)
                            {
                              while (1)
                              {
                                v154 = v152[1];
                                if (v154 == v144)
                                {
                                  if (v152[2] == v144)
                                    goto LABEL_400;
                                }
                                else if ((v154 & (*(_QWORD *)&v148 - 1)) != v150)
                                {
                                  goto LABEL_390;
                                }
                                v152 = (_QWORD *)*v152;
                                if (!v152)
                                  goto LABEL_390;
                              }
                            }
                            do
                            {
                              v153 = v152[1];
                              if (v153 == v144)
                              {
                                if (v152[2] == v144)
                                  goto LABEL_400;
                              }
                              else
                              {
                                if (v153 >= *(_QWORD *)&v148)
                                  v153 %= *(_QWORD *)&v148;
                                if (v153 != v150)
                                  break;
                              }
                              v152 = (_QWORD *)*v152;
                            }
                            while (v152);
                          }
                        }
                      }
LABEL_390:
                      v155 = v140[29];
                      if ((v155 & (v155 - 1)) != 0)
                      {
                        v156 = v144;
                        if (v155 <= v144)
                          v156 = v144 % v155;
                        v152 = *(_QWORD **)(v140[28] + 8 * v156);
                        do
                        {
                          do
                            v152 = (_QWORD *)*v152;
                          while (v152[1] != v144);
                        }
                        while (v152[2] != v144);
                      }
                      else
                      {
                        v152 = *(_QWORD **)(v140[28] + 8 * ((v155 - 1) & v144));
                        do
                        {
                          do
                            v152 = (_QWORD *)*v152;
                          while (v152[1] != v144);
                        }
                        while (v152[2] != v144);
                      }
LABEL_400:
                      v157 = v152[12];
                      if (v148)
                      {
                        v158 = (uint8x8_t)vcnt_s8(v148);
                        v158.i16[0] = vaddlv_u8(v158);
                        if (v158.u32[0] > 1uLL)
                        {
                          v159 = v145;
                          if (*(_QWORD *)&v148 <= v145)
                            v159 = v145 % *(_QWORD *)&v148;
                        }
                        else
                        {
                          v159 = (*(_QWORD *)&v148 - 1) & v145;
                        }
                        v160 = *(_QWORD **)(v140[33] + 8 * v159);
                        if (v160)
                        {
                          v161 = (_QWORD *)*v160;
                          if (v161)
                          {
                            if (v158.u32[0] < 2uLL)
                            {
                              v162 = *(_QWORD *)&v148 - 1;
                              while (1)
                              {
                                v164 = v161[1];
                                if (v164 == v145)
                                {
                                  if (v161[2] == v145)
                                    goto LABEL_368;
                                }
                                else if ((v164 & v162) != v159)
                                {
                                  goto LABEL_420;
                                }
                                v161 = (_QWORD *)*v161;
                                if (!v161)
                                  goto LABEL_420;
                              }
                            }
                            do
                            {
                              v163 = v161[1];
                              if (v163 == v145)
                              {
                                if (v161[2] == v145)
                                  goto LABEL_368;
                              }
                              else
                              {
                                if (v163 >= *(_QWORD *)&v148)
                                  v163 %= *(_QWORD *)&v148;
                                if (v163 != v159)
                                  break;
                              }
                              v161 = (_QWORD *)*v161;
                            }
                            while (v161);
                          }
                        }
                      }
LABEL_420:
                      v165 = v140[29];
                      if ((v165 & (v165 - 1)) != 0)
                      {
                        v166 = v145;
                        if (v165 <= v145)
                          v166 = v145 % v165;
                        v161 = *(_QWORD **)(v140[28] + 8 * v166);
                        do
                        {
                          do
                            v161 = (_QWORD *)*v161;
                          while (v161[1] != v145);
                        }
                        while (v161[2] != v145);
                      }
                      else
                      {
                        v161 = *(_QWORD **)(v140[28] + 8 * ((v165 - 1) & v145));
                        do
                        {
                          do
                            v161 = (_QWORD *)*v161;
                          while (v161[1] != v145);
                        }
                        while (v161[2] != v145);
                      }
LABEL_368:
                      if (v157 <= v161[12])
                        goto LABEL_364;
                    }
                    v142 = v10;
LABEL_364:
                    *v142 = v144;
                  }
                  v139 = v143 + 1;
                  v141 = v143;
                }
                while (v143 + 1 != a2);
              }
            }
          }
          else if (v9 != a2)
          {
            v240 = v9 + 1;
            if (v9 + 1 != a2)
            {
              v241 = *v138;
              do
              {
                v242 = v240;
                v244 = *v10;
                v243 = v10[1];
                v245 = sub_20EF838CC(v241, v243)[12];
                result = (unint64_t)sub_20EF838CC(v241, v244);
                if (v245 > *(_QWORD *)(result + 96))
                {
                  v246 = (int8x8_t)v241[34];
                  v247 = (uint8x8_t)vcnt_s8(v246);
                  v247.i16[0] = vaddlv_u8(v247);
                  v248 = *(_QWORD *)&v246 - 1;
                  v249 = v247.u32[0] < 2uLL;
                  if (v247.u32[0] >= 2uLL)
                    v250 = -1;
                  else
                    v250 = *(_QWORD *)&v246 - 1;
                  if (*(_QWORD *)&v246 > v243)
                    v249 = 1;
                  v251 = v250 & v243;
                  v252 = v242;
                  do
                  {
                    *v252 = v244;
                    v252 = v10;
                    v253 = *--v10;
                    v244 = v253;
                    if (v246)
                    {
                      v254 = v251;
                      if (!v249)
                        v254 = v243 % *(_QWORD *)&v246;
                      v255 = *(_QWORD **)(v241[33] + 8 * v254);
                      if (v255)
                      {
                        v256 = (_QWORD *)*v255;
                        if (v256)
                        {
                          if (v247.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v257 = v256[1];
                              if (v257 == v243)
                              {
                                if (v256[2] == v243)
                                  goto LABEL_637;
                              }
                              else if ((v257 & v248) != v254)
                              {
                                goto LABEL_627;
                              }
                              v256 = (_QWORD *)*v256;
                              if (!v256)
                                goto LABEL_627;
                            }
                          }
                          do
                          {
                            v258 = v256[1];
                            if (v258 == v243)
                            {
                              if (v256[2] == v243)
                                goto LABEL_637;
                            }
                            else
                            {
                              if (v258 >= *(_QWORD *)&v246)
                                v258 %= *(_QWORD *)&v246;
                              if (v258 != v254)
                                break;
                            }
                            v256 = (_QWORD *)*v256;
                          }
                          while (v256);
                        }
                      }
                    }
LABEL_627:
                    v259 = v241[29];
                    if ((v259 & (v259 - 1)) != 0)
                    {
                      v260 = v243;
                      if (v259 <= v243)
                        v260 = v243 % v259;
                      v256 = *(_QWORD **)(v241[28] + 8 * v260);
                      do
                      {
                        do
                          v256 = (_QWORD *)*v256;
                        while (v256[1] != v243);
                      }
                      while (v256[2] != v243);
                    }
                    else
                    {
                      v256 = *(_QWORD **)(v241[28] + 8 * ((v259 - 1) & v243));
                      do
                      {
                        do
                          v256 = (_QWORD *)*v256;
                        while (v256[1] != v243);
                      }
                      while (v256[2] != v243);
                    }
LABEL_637:
                    v261 = v256[12];
                    if (v246)
                    {
                      if (v247.u32[0] > 1uLL)
                      {
                        v262 = v244;
                        if (*(_QWORD *)&v246 <= v244)
                          v262 = v244 % *(_QWORD *)&v246;
                      }
                      else
                      {
                        v262 = v244 & v248;
                      }
                      v263 = *(_QWORD **)(v241[33] + 8 * v262);
                      if (v263)
                      {
                        v264 = (_QWORD *)*v263;
                        if (v264)
                        {
                          if (v247.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v265 = v264[1];
                              if (v265 == v244)
                              {
                                if (v264[2] == v244)
                                  goto LABEL_608;
                              }
                              else if ((v265 & v248) != v262)
                              {
                                goto LABEL_657;
                              }
                              v264 = (_QWORD *)*v264;
                              if (!v264)
                                goto LABEL_657;
                            }
                          }
                          do
                          {
                            v266 = v264[1];
                            if (v266 == v244)
                            {
                              if (v264[2] == v244)
                                goto LABEL_608;
                            }
                            else
                            {
                              if (v266 >= *(_QWORD *)&v246)
                              {
                                result = v266 / *(_QWORD *)&v246;
                                v266 %= *(_QWORD *)&v246;
                              }
                              if (v266 != v262)
                                break;
                            }
                            v264 = (_QWORD *)*v264;
                          }
                          while (v264);
                        }
                      }
                    }
LABEL_657:
                    v267 = v241[29];
                    if ((v267 & (v267 - 1)) != 0)
                    {
                      v268 = v244;
                      if (v267 <= v244)
                        v268 = v244 % v267;
                      v264 = *(_QWORD **)(v241[28] + 8 * v268);
                      do
                      {
                        do
                          v264 = (_QWORD *)*v264;
                        while (v264[1] != v244);
                      }
                      while (v264[2] != v244);
                    }
                    else
                    {
                      v264 = *(_QWORD **)(v241[28] + 8 * ((v267 - 1) & v244));
                      do
                      {
                        do
                          v264 = (_QWORD *)*v264;
                        while (v264[1] != v244);
                      }
                      while (v264[2] != v244);
                    }
LABEL_608:
                    ;
                  }
                  while (v261 > v264[12]);
                  *v252 = v243;
                }
                v240 = v242 + 1;
                v10 = v242;
              }
              while (v242 + 1 != a2);
            }
          }
          return result;
        }
        v280 = v9;
        if (!a4)
        {
          if (v9 == a2)
            return result;
          v274 = (char *)a2 - (char *)v9;
          v167 = (v12 - 2) >> 1;
          v277 = *v6;
          v282 = a2 - v9;
          v284 = v167;
          do
          {
            v168 = v167;
            if (v284 >= v167)
            {
              v170 = (2 * v167) | 1;
              v171 = &v10[v170];
              if (2 * v167 + 2 >= (uint64_t)v12)
              {
                v173 = *v171;
                v174 = *v277;
              }
              else
              {
                v172 = *v171;
                v173 = v171[1];
                v174 = *v277;
                v175 = sub_20EF838CC(*v277, *v171)[12];
                v176 = v175 <= sub_20EF838CC(v174, v173)[12];
                v10 = v280;
                if (v176)
                  v173 = v172;
                if (!v176)
                {
                  ++v171;
                  v170 = 2 * v168 + 2;
                }
              }
              v177 = &v10[v168];
              v178 = *v177;
              v179 = sub_20EF838CC(v174, v173)[12];
              result = (unint64_t)sub_20EF838CC(v174, v178);
              v176 = v179 <= *(_QWORD *)(result + 96);
              v6 = a3;
              if (v176)
              {
                v275 = v168;
                do
                {
                  *v177 = v173;
                  v177 = v171;
                  if (v284 < v170)
                    break;
                  v184 = (2 * v170) | 1;
                  v171 = &v280[v184];
                  v185 = 2 * v170 + 2;
                  if (v185 < (uint64_t)v12)
                  {
                    v173 = *v171;
                    v180 = v171[1];
                    v181 = sub_20EF838CC(v174, *v171)[12];
                    v182 = sub_20EF838CC(v174, v180)[12];
                    if (v181 > v182)
                    {
                      v173 = v180;
                      ++v171;
                    }
                    v12 = v282;
                    v170 = v181 <= v182 ? v184 : v185;
                  }
                  else
                  {
                    v173 = *v171;
                    v170 = (2 * v170) | 1;
                  }
                  v183 = sub_20EF838CC(v174, v173)[12];
                  result = (unint64_t)sub_20EF838CC(v174, v178);
                }
                while (v183 <= *(_QWORD *)(result + 96));
                *v177 = v178;
                v6 = a3;
                v277 = *a3;
                v168 = v275;
              }
            }
            v167 = v168 - 1;
            v169 = v279;
            v10 = v280;
          }
          while (v168);
          v186 = v274 >> 3;
          while (2)
          {
            v187 = 0;
            v188 = *v280;
            v189 = *v6;
            v190 = (unint64_t)(v186 - 2) >> 1;
            v191 = v280;
LABEL_461:
            while (1)
            {
              v192 = &v191[v187 + 1];
              v193 = (2 * v187) | 1;
              v187 = 2 * v187 + 2;
              if (v187 < v186)
                break;
              v187 = v193;
              *v191 = *v192;
              v191 = v192;
              if (v193 > v190)
                goto LABEL_528;
            }
            v194 = v192[1];
            v195 = *v192;
            v196 = *v189;
            result = (*v189)[34];
            if (result)
            {
              v197 = (uint8x8_t)vcnt_s8((int8x8_t)result);
              v197.i16[0] = vaddlv_u8(v197);
              if (v197.u32[0] > 1uLL)
              {
                if (result <= v195)
                  v198 = v195 % result;
                else
                  v198 = *v192;
                v199 = *(_QWORD **)(v196[33] + 8 * v198);
                if (v199)
                  goto LABEL_470;
              }
              else
              {
                v198 = (result - 1) & v195;
                v199 = *(_QWORD **)(v196[33] + 8 * v198);
                if (!v199)
                  goto LABEL_484;
LABEL_470:
                v200 = (_QWORD *)*v199;
                if (v200)
                {
                  if (v197.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v202 = v200[1];
                      if (v202 == v195)
                      {
                        if (v200[2] == v195)
                          goto LABEL_494;
                      }
                      else if ((v202 & (result - 1)) != v198)
                      {
                        goto LABEL_484;
                      }
                      v200 = (_QWORD *)*v200;
                      if (!v200)
                        goto LABEL_484;
                    }
                  }
                  do
                  {
                    v201 = v200[1];
                    if (v201 == v195)
                    {
                      if (v200[2] == v195)
                        goto LABEL_494;
                    }
                    else
                    {
                      if (v201 >= result)
                        v201 %= result;
                      if (v201 != v198)
                        break;
                    }
                    v200 = (_QWORD *)*v200;
                  }
                  while (v200);
                }
              }
            }
LABEL_484:
            v203 = v196[29];
            if ((v203 & (v203 - 1)) != 0)
            {
              v204 = *v192;
              if (v203 <= v195)
                v204 = v195 % v203;
              v200 = *(_QWORD **)(v196[28] + 8 * v204);
              do
              {
                do
                  v200 = (_QWORD *)*v200;
                while (v200[1] != v195);
              }
              while (v200[2] != v195);
            }
            else
            {
              v200 = *(_QWORD **)(v196[28] + 8 * ((v203 - 1) & v195));
              do
              {
                do
                  v200 = (_QWORD *)*v200;
                while (v200[1] != v195);
              }
              while (v200[2] != v195);
            }
LABEL_494:
            v205 = v200[12];
            if (result)
            {
              v206 = (uint8x8_t)vcnt_s8((int8x8_t)result);
              v206.i16[0] = vaddlv_u8(v206);
              if (v206.u32[0] > 1uLL)
              {
                v207 = v192[1];
                if (result <= v194)
                  v207 = v194 % result;
              }
              else
              {
                v207 = (result - 1) & v194;
              }
              v208 = *(_QWORD **)(v196[33] + 8 * v207);
              if (v208)
              {
                v209 = (_QWORD *)*v208;
                if (v209)
                {
                  if (v206.u32[0] < 2uLL)
                  {
                    --result;
                    while (1)
                    {
                      v211 = v209[1];
                      if (v211 == v194)
                      {
                        if (v209[2] == v194)
                          goto LABEL_524;
                      }
                      else if ((v211 & result) != v207)
                      {
                        goto LABEL_514;
                      }
                      v209 = (_QWORD *)*v209;
                      if (!v209)
                        goto LABEL_514;
                    }
                  }
                  do
                  {
                    v210 = v209[1];
                    if (v210 == v194)
                    {
                      if (v209[2] == v194)
                        goto LABEL_524;
                    }
                    else
                    {
                      if (v210 >= result)
                        v210 %= result;
                      if (v210 != v207)
                        break;
                    }
                    v209 = (_QWORD *)*v209;
                  }
                  while (v209);
                }
              }
            }
LABEL_514:
            result = v196[29];
            v212 = result - 1;
            if ((result & (result - 1)) != 0)
            {
              v213 = v192[1];
              if (result <= v194)
                v213 = v194 % result;
              v209 = *(_QWORD **)(v196[28] + 8 * v213);
              do
              {
                do
                  v209 = (_QWORD *)*v209;
                while (v209[1] != v194);
              }
              while (v209[2] != v194);
            }
            else
            {
              result = v212 & v194;
              v209 = *(_QWORD **)(v196[28] + 8 * (v212 & v194));
              do
              {
                do
                  v209 = (_QWORD *)*v209;
                while (v209[1] != v194);
              }
              while (v209[2] != v194);
            }
LABEL_524:
            if (v205 > v209[12])
            {
              ++v192;
            }
            else
            {
              v194 = *v192;
              v187 = v193;
            }
            *v191 = v194;
            v191 = v192;
            if (v187 > v190)
            {
LABEL_528:
              if (v192 == --v169)
              {
                *v192 = v188;
              }
              else
              {
                *v192 = *v169;
                *v169 = v188;
                v214 = (char *)v192 - (char *)v280 + 8;
                if (v214 >= 9)
                {
                  v215 = (((unint64_t)v214 >> 3) - 2) >> 1;
                  v216 = &v280[v215];
                  v217 = *v216;
                  v218 = *v192;
                  v219 = **a3;
                  v220 = sub_20EF838CC(v219, *v216)[12];
                  result = (unint64_t)sub_20EF838CC(v219, v218);
                  if (v220 > *(_QWORD *)(result + 96))
                  {
                    do
                    {
                      *v192 = v217;
                      v192 = v216;
                      if (!v215)
                        break;
                      v215 = (v215 - 1) >> 1;
                      v216 = &v280[v215];
                      v217 = *v216;
                      v221 = (int8x8_t)v219[34];
                      if (v221)
                      {
                        v222 = (uint8x8_t)vcnt_s8(v221);
                        v222.i16[0] = vaddlv_u8(v222);
                        if (v222.u32[0] > 1uLL)
                        {
                          v223 = *v216;
                          if (*(_QWORD *)&v221 <= v217)
                            v223 = v217 % *(_QWORD *)&v221;
                        }
                        else
                        {
                          v223 = (*(_QWORD *)&v221 - 1) & v217;
                        }
                        v224 = *(_QWORD **)(v219[33] + 8 * v223);
                        if (v224)
                        {
                          v225 = (_QWORD *)*v224;
                          if (v225)
                          {
                            if (v222.u32[0] < 2uLL)
                            {
                              while (1)
                              {
                                v227 = v225[1];
                                if (v227 == v217)
                                {
                                  if (v225[2] == v217)
                                    goto LABEL_564;
                                }
                                else if ((v227 & (*(_QWORD *)&v221 - 1)) != v223)
                                {
                                  goto LABEL_554;
                                }
                                v225 = (_QWORD *)*v225;
                                if (!v225)
                                  goto LABEL_554;
                              }
                            }
                            do
                            {
                              v226 = v225[1];
                              if (v226 == v217)
                              {
                                if (v225[2] == v217)
                                  goto LABEL_564;
                              }
                              else
                              {
                                if (v226 >= *(_QWORD *)&v221)
                                  v226 %= *(_QWORD *)&v221;
                                if (v226 != v223)
                                  break;
                              }
                              v225 = (_QWORD *)*v225;
                            }
                            while (v225);
                          }
                        }
                      }
LABEL_554:
                      v228 = v219[29];
                      if ((v228 & (v228 - 1)) != 0)
                      {
                        v229 = *v216;
                        if (v228 <= v217)
                          v229 = v217 % v228;
                        v225 = *(_QWORD **)(v219[28] + 8 * v229);
                        do
                        {
                          do
                            v225 = (_QWORD *)*v225;
                          while (v225[1] != v217);
                        }
                        while (v225[2] != v217);
                      }
                      else
                      {
                        v225 = *(_QWORD **)(v219[28] + 8 * ((v228 - 1) & v217));
                        do
                        {
                          do
                            v225 = (_QWORD *)*v225;
                          while (v225[1] != v217);
                        }
                        while (v225[2] != v217);
                      }
LABEL_564:
                      v230 = v225[12];
                      if (v221)
                      {
                        v231 = (uint8x8_t)vcnt_s8(v221);
                        v231.i16[0] = vaddlv_u8(v231);
                        if (v231.u32[0] > 1uLL)
                        {
                          v232 = v218;
                          if (*(_QWORD *)&v221 <= v218)
                            v232 = v218 % *(_QWORD *)&v221;
                        }
                        else
                        {
                          v232 = (*(_QWORD *)&v221 - 1) & v218;
                        }
                        v233 = *(_QWORD **)(v219[33] + 8 * v232);
                        if (v233)
                        {
                          v234 = (_QWORD *)*v233;
                          if (v234)
                          {
                            if (v231.u32[0] < 2uLL)
                            {
                              v235 = *(_QWORD *)&v221 - 1;
                              while (1)
                              {
                                v237 = v234[1];
                                if (v237 == v218)
                                {
                                  if (v234[2] == v218)
                                    goto LABEL_532;
                                }
                                else if ((v237 & v235) != v232)
                                {
                                  goto LABEL_584;
                                }
                                v234 = (_QWORD *)*v234;
                                if (!v234)
                                  goto LABEL_584;
                              }
                            }
                            do
                            {
                              v236 = v234[1];
                              if (v236 == v218)
                              {
                                if (v234[2] == v218)
                                  goto LABEL_532;
                              }
                              else
                              {
                                if (v236 >= *(_QWORD *)&v221)
                                  v236 %= *(_QWORD *)&v221;
                                if (v236 != v232)
                                  break;
                              }
                              v234 = (_QWORD *)*v234;
                            }
                            while (v234);
                          }
                        }
                      }
LABEL_584:
                      v238 = v219[29];
                      if ((v238 & (v238 - 1)) != 0)
                      {
                        v239 = v218;
                        if (v238 <= v218)
                          v239 = v218 % v238;
                        v234 = *(_QWORD **)(v219[28] + 8 * v239);
                        do
                        {
                          do
                            v234 = (_QWORD *)*v234;
                          while (v234[1] != v218);
                        }
                        while (v234[2] != v218);
                      }
                      else
                      {
                        v234 = *(_QWORD **)(v219[28] + 8 * ((v238 - 1) & v218));
                        do
                        {
                          do
                            v234 = (_QWORD *)*v234;
                          while (v234[1] != v218);
                        }
                        while (v234[2] != v218);
                      }
LABEL_532:
                      ;
                    }
                    while (v230 > v234[12]);
                    *v192 = v218;
                  }
                }
              }
              v176 = v186-- <= 2;
              v6 = a3;
              if (v176)
                return result;
              continue;
            }
            goto LABEL_461;
          }
        }
        v13 = v12 >> 1;
        v14 = **v6;
        if ((unint64_t)v11 < 0x401)
        {
          sub_20EF88260(&v9[v12 >> 1], v9, v271, v14);
        }
        else
        {
          sub_20EF88260(v9, &v9[v12 >> 1], v271, v14);
          v15 = v13;
          v16 = &v9[v13];
          sub_20EF88260(v9 + 1, v16 - 1, v270, **v6);
          sub_20EF88260(v9 + 2, &v9[v15 + 1], v269, **v6);
          sub_20EF88260(v16 - 1, &v9[v12 >> 1], &v9[v15 + 1], **v6);
          v17 = *v9;
          *v9 = *v16;
          *v16 = v17;
        }
        v276 = a4 - 1;
        v18 = *v9;
        v19 = **v6;
        if ((a5 & 1) == 0)
        {
          v20 = sub_20EF838CC(**v6, *(v9 - 1))[12];
          v21 = sub_20EF838CC(v19, v18)[12];
          if (v20 <= v21)
          {
            result = (unint64_t)sub_20EF838CC(v19, *v271);
            if (v21 <= *(_QWORD *)(result + 96))
            {
              v91 = v9 + 1;
              do
              {
                v9 = v91;
                if (v91 >= a2)
                  break;
                ++v91;
                result = (unint64_t)sub_20EF838CC(v19, *v9);
              }
              while (v21 <= *(_QWORD *)(result + 96));
            }
            else
            {
              do
              {
                v90 = v9[1];
                ++v9;
                result = (unint64_t)sub_20EF838CC(v19, v90);
              }
              while (v21 <= *(_QWORD *)(result + 96));
            }
            v92 = a2;
            if (v9 < a2)
            {
              v92 = a2;
              do
              {
                v93 = *--v92;
                result = (unint64_t)sub_20EF838CC(v19, v93);
              }
              while (v21 > *(_QWORD *)(result + 96));
            }
            if (v9 < v92)
            {
              v94 = (int8x8_t)v19[34];
              v95 = (uint8x8_t)vcnt_s8(v94);
              v95.i16[0] = vaddlv_u8(v95);
              v96 = *(_QWORD *)&v94 - 1;
              v97 = v95.u32[0] < 2uLL;
              if (v95.u32[0] >= 2uLL)
                v98 = -1;
              else
                v98 = *(_QWORD *)&v94 - 1;
              v99 = *v9;
              v100 = *v92;
              if (*(_QWORD *)&v94 > v18)
                v97 = 1;
              v101 = v98 & v18;
              do
              {
                *v9 = v100;
                *v92 = v99;
                do
                {
                  v102 = v9[1];
                  ++v9;
                  v99 = v102;
                  if (v94)
                  {
                    v103 = v101;
                    if (!v97)
                      v103 = v18 % *(_QWORD *)&v94;
                    v104 = *(_QWORD **)(v19[33] + 8 * v103);
                    if (v104)
                    {
                      v105 = (_QWORD *)*v104;
                      if (v105)
                      {
                        if (v95.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v106 = v105[1];
                            if (v106 == v18)
                            {
                              if (v105[2] == v18)
                                goto LABEL_257;
                            }
                            else if ((v106 & v96) != v103)
                            {
                              goto LABEL_247;
                            }
                            v105 = (_QWORD *)*v105;
                            if (!v105)
                              goto LABEL_247;
                          }
                        }
                        do
                        {
                          v107 = v105[1];
                          if (v107 == v18)
                          {
                            if (v105[2] == v18)
                              goto LABEL_257;
                          }
                          else
                          {
                            if (v107 >= *(_QWORD *)&v94)
                              v107 %= *(_QWORD *)&v94;
                            if (v107 != v103)
                              break;
                          }
                          v105 = (_QWORD *)*v105;
                        }
                        while (v105);
                      }
                    }
                  }
LABEL_247:
                  v108 = v19[29];
                  if ((v108 & (v108 - 1)) != 0)
                  {
                    v109 = v18;
                    if (v108 <= v18)
                      v109 = v18 % v108;
                    v105 = *(_QWORD **)(v19[28] + 8 * v109);
                    do
                    {
                      do
                        v105 = (_QWORD *)*v105;
                      while (v105[1] != v18);
                    }
                    while (v105[2] != v18);
                  }
                  else
                  {
                    v105 = *(_QWORD **)(v19[28] + 8 * ((v108 - 1) & v18));
                    do
                    {
                      do
                        v105 = (_QWORD *)*v105;
                      while (v105[1] != v18);
                    }
                    while (v105[2] != v18);
                  }
LABEL_257:
                  v110 = v105[12];
                  if (v94)
                  {
                    if (v95.u32[0] > 1uLL)
                    {
                      v111 = v99;
                      if (*(_QWORD *)&v94 <= v99)
                        v111 = v99 % *(_QWORD *)&v94;
                    }
                    else
                    {
                      v111 = v99 & v96;
                    }
                    v112 = *(_QWORD **)(v19[33] + 8 * v111);
                    if (v112)
                    {
                      v113 = (_QWORD *)*v112;
                      if (v113)
                      {
                        if (v95.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v114 = v113[1];
                            if (v114 == v99)
                            {
                              if (v113[2] == v99)
                                goto LABEL_228;
                            }
                            else if ((v114 & v96) != v111)
                            {
                              goto LABEL_277;
                            }
                            v113 = (_QWORD *)*v113;
                            if (!v113)
                              goto LABEL_277;
                          }
                        }
                        do
                        {
                          v115 = v113[1];
                          if (v115 == v99)
                          {
                            if (v113[2] == v99)
                              goto LABEL_228;
                          }
                          else
                          {
                            if (v115 >= *(_QWORD *)&v94)
                            {
                              result = v115 / *(_QWORD *)&v94;
                              v115 %= *(_QWORD *)&v94;
                            }
                            if (v115 != v111)
                              break;
                          }
                          v113 = (_QWORD *)*v113;
                        }
                        while (v113);
                      }
                    }
                  }
LABEL_277:
                  v116 = v19[29];
                  if ((v116 & (v116 - 1)) != 0)
                  {
                    v117 = v99;
                    if (v116 <= v99)
                      v117 = v99 % v116;
                    v113 = *(_QWORD **)(v19[28] + 8 * v117);
                    do
                    {
                      do
                        v113 = (_QWORD *)*v113;
                      while (v113[1] != v99);
                    }
                    while (v113[2] != v99);
                  }
                  else
                  {
                    v113 = *(_QWORD **)(v19[28] + 8 * ((v116 - 1) & v99));
                    do
                    {
                      do
                        v113 = (_QWORD *)*v113;
                      while (v113[1] != v99);
                    }
                    while (v113[2] != v99);
                  }
LABEL_228:
                  ;
                }
                while (v110 <= v113[12]);
                do
                {
                  v118 = *--v92;
                  v100 = v118;
                  if (v94)
                  {
                    v119 = v101;
                    if (!v97)
                      v119 = v18 % *(_QWORD *)&v94;
                    v120 = *(_QWORD **)(v19[33] + 8 * v119);
                    if (v120)
                    {
                      v121 = (_QWORD *)*v120;
                      if (v121)
                      {
                        if (v95.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v122 = v121[1];
                            if (v122 == v18)
                            {
                              if (v121[2] == v18)
                                goto LABEL_317;
                            }
                            else if ((v122 & v96) != v119)
                            {
                              goto LABEL_307;
                            }
                            v121 = (_QWORD *)*v121;
                            if (!v121)
                              goto LABEL_307;
                          }
                        }
                        do
                        {
                          v123 = v121[1];
                          if (v123 == v18)
                          {
                            if (v121[2] == v18)
                              goto LABEL_317;
                          }
                          else
                          {
                            if (v123 >= *(_QWORD *)&v94)
                            {
                              result = v123 / *(_QWORD *)&v94;
                              v123 %= *(_QWORD *)&v94;
                            }
                            if (v123 != v119)
                              break;
                          }
                          v121 = (_QWORD *)*v121;
                        }
                        while (v121);
                      }
                    }
                  }
LABEL_307:
                  v124 = v19[29];
                  if ((v124 & (v124 - 1)) != 0)
                  {
                    v125 = v18;
                    if (v124 <= v18)
                      v125 = v18 % v124;
                    v121 = *(_QWORD **)(v19[28] + 8 * v125);
                    do
                    {
                      do
                        v121 = (_QWORD *)*v121;
                      while (v121[1] != v18);
                    }
                    while (v121[2] != v18);
                  }
                  else
                  {
                    v121 = *(_QWORD **)(v19[28] + 8 * ((v124 - 1) & v18));
                    do
                    {
                      do
                        v121 = (_QWORD *)*v121;
                      while (v121[1] != v18);
                    }
                    while (v121[2] != v18);
                  }
LABEL_317:
                  v126 = v121[12];
                  if (v94)
                  {
                    if (v95.u32[0] > 1uLL)
                    {
                      v127 = v100;
                      if (*(_QWORD *)&v94 <= v100)
                        v127 = v100 % *(_QWORD *)&v94;
                    }
                    else
                    {
                      v127 = v100 & v96;
                    }
                    v128 = *(_QWORD **)(v19[33] + 8 * v127);
                    if (v128)
                    {
                      v129 = (_QWORD *)*v128;
                      if (v129)
                      {
                        if (v95.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v130 = v129[1];
                            if (v130 == v100)
                            {
                              result = v129[2];
                              if (result == v100)
                                goto LABEL_288;
                            }
                            else
                            {
                              result = v130 & v96;
                              if (result != v127)
                                goto LABEL_337;
                            }
                            v129 = (_QWORD *)*v129;
                            if (!v129)
                              goto LABEL_337;
                          }
                        }
                        do
                        {
                          result = v129[1];
                          if (result == v100)
                          {
                            result = v129[2];
                            if (result == v100)
                              goto LABEL_288;
                          }
                          else
                          {
                            if (result >= *(_QWORD *)&v94)
                              result %= *(_QWORD *)&v94;
                            if (result != v127)
                              break;
                          }
                          v129 = (_QWORD *)*v129;
                        }
                        while (v129);
                      }
                    }
                  }
LABEL_337:
                  v131 = v19[29];
                  if ((v131 & (v131 - 1)) != 0)
                  {
                    v132 = v100;
                    if (v131 <= v100)
                      v132 = v100 % v131;
                    v129 = *(_QWORD **)(v19[28] + 8 * v132);
                    do
                    {
                      do
                        v129 = (_QWORD *)*v129;
                      while (v129[1] != v100);
                    }
                    while (v129[2] != v100);
                  }
                  else
                  {
                    v129 = *(_QWORD **)(v19[28] + 8 * ((v131 - 1) & v100));
                    do
                    {
                      do
                        v129 = (_QWORD *)*v129;
                      while (v129[1] != v100);
                    }
                    while (v129[2] != v100);
                  }
LABEL_288:
                  ;
                }
                while (v126 > v129[12]);
              }
              while (v9 < v92);
            }
            v133 = v9 - 1;
            if (v9 - 1 != v10)
              *v10 = *v133;
            a5 = 0;
            *v133 = v18;
            a4 = v276;
            continue;
          }
        }
        v22 = (int8x8_t)v19[34];
        v23 = (uint8x8_t)vcnt_s8(v22);
        v23.i16[0] = vaddlv_u8(v23);
        v24 = v23.u32[0];
        v25 = *(_QWORD *)&v22 - 1;
        if (v23.u32[0] >= 2uLL)
          v26 = -1;
        else
          v26 = *(_QWORD *)&v22 - 1;
        v27 = *(_QWORD *)&v22 > v18 || v23.u32[0] < 2uLL;
        v28 = v26 & v18;
        v29 = v10;
        do
        {
          v31 = v29;
          v33 = v29[1];
          ++v29;
          v32 = v33;
          if (v22)
          {
            if (v23.u32[0] > 1uLL)
            {
              v34 = v32;
              if (*(_QWORD *)&v22 <= v32)
                v34 = v32 % *(_QWORD *)&v22;
            }
            else
            {
              v34 = v32 & v25;
            }
            v35 = *(_QWORD **)(v19[33] + 8 * v34);
            if (v35)
            {
              v36 = (_QWORD *)*v35;
              if (v36)
              {
                if (v23.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v37 = v36[1];
                    if (v37 == v32)
                    {
                      if (v36[2] == v32)
                        goto LABEL_49;
                    }
                    else if ((v37 & v25) != v34)
                    {
                      goto LABEL_39;
                    }
                    v36 = (_QWORD *)*v36;
                    if (!v36)
                      goto LABEL_39;
                  }
                }
                do
                {
                  v38 = v36[1];
                  if (v38 == v32)
                  {
                    if (v36[2] == v32)
                      goto LABEL_49;
                  }
                  else
                  {
                    if (v38 >= *(_QWORD *)&v22)
                      v38 %= *(_QWORD *)&v22;
                    if (v38 != v34)
                      break;
                  }
                  v36 = (_QWORD *)*v36;
                }
                while (v36);
              }
            }
          }
LABEL_39:
          v39 = v19[29];
          if ((v39 & (v39 - 1)) != 0)
          {
            v40 = v32;
            if (v39 <= v32)
              v40 = v32 % v39;
            v36 = *(_QWORD **)(v19[28] + 8 * v40);
            do
            {
              do
                v36 = (_QWORD *)*v36;
              while (v36[1] != v32);
            }
            while (v36[2] != v32);
          }
          else
          {
            v36 = *(_QWORD **)(v19[28] + 8 * ((v39 - 1) & v32));
            do
            {
              do
                v36 = (_QWORD *)*v36;
              while (v36[1] != v32);
            }
            while (v36[2] != v32);
          }
LABEL_49:
          v41 = v36[12];
          if (v22)
          {
            v42 = v28;
            if (!v27)
              v42 = v18 % *(_QWORD *)&v22;
            v43 = *(_QWORD **)(v19[33] + 8 * v42);
            if (v43)
            {
              v44 = (_QWORD *)*v43;
              if (v44)
              {
                if (v23.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v45 = v44[1];
                    if (v45 == v18)
                    {
                      if (v44[2] == v18)
                        goto LABEL_18;
                    }
                    else if ((v45 & v25) != v42)
                    {
                      goto LABEL_67;
                    }
                    v44 = (_QWORD *)*v44;
                    if (!v44)
                      goto LABEL_67;
                  }
                }
                do
                {
                  v46 = v44[1];
                  if (v46 == v18)
                  {
                    if (v44[2] == v18)
                      goto LABEL_18;
                  }
                  else
                  {
                    if (v46 >= *(_QWORD *)&v22)
                      v46 %= *(_QWORD *)&v22;
                    if (v46 != v42)
                      break;
                  }
                  v44 = (_QWORD *)*v44;
                }
                while (v44);
              }
            }
          }
LABEL_67:
          v47 = v19[29];
          if ((v47 & (v47 - 1)) != 0)
          {
            v48 = v18;
            if (v47 <= v18)
              v48 = v18 % v47;
            v44 = *(_QWORD **)(v19[28] + 8 * v48);
            do
            {
              do
                v44 = (_QWORD *)*v44;
              while (v44[1] != v18);
            }
            while (v44[2] != v18);
          }
          else
          {
            v44 = *(_QWORD **)(v19[28] + 8 * ((v47 - 1) & v18));
            do
            {
              do
                v44 = (_QWORD *)*v44;
              while (v44[1] != v18);
            }
            while (v44[2] != v18);
          }
LABEL_18:
          v30 = v44[12];
        }
        while (v41 > v30);
        v273 = v31;
        v281 = v29;
        v49 = v279;
        if (v31 == v280)
        {
          v49 = v279;
          do
          {
            if (v281 >= v49)
              break;
            v283 = v49 - 1;
            v52 = sub_20EF838CC(v19, *(v49 - 1))[12];
            v49 = v283;
          }
          while (v52 <= v30);
        }
        else
        {
          do
          {
            v50 = v49 - 1;
            v51 = sub_20EF838CC(v19, *(v49 - 1))[12];
            v49 = v50;
          }
          while (v51 <= v30);
        }
        v53 = v273;
        if (v281 < v49)
        {
          v54 = *v49;
          v55 = v281;
          v56 = v49;
          do
          {
            *v55 = v54;
            *v56 = v32;
            do
            {
              v53 = v55;
              v57 = v55[1];
              ++v55;
              v32 = v57;
              if (v24 > 1)
              {
                v58 = v32;
                if (*(_QWORD *)&v22 <= v32)
                  v58 = v32 % *(_QWORD *)&v22;
              }
              else
              {
                v58 = v32 & v25;
              }
              v59 = *(_QWORD **)(v19[33] + 8 * v58);
              if (v59)
              {
                v60 = (_QWORD *)*v59;
                if (v60)
                {
                  if (v24 < 2)
                  {
                    while (1)
                    {
                      v61 = v60[1];
                      if (v61 == v32)
                      {
                        if (v60[2] == v32)
                          goto LABEL_118;
                      }
                      else if ((v61 & v25) != v58)
                      {
                        goto LABEL_108;
                      }
                      v60 = (_QWORD *)*v60;
                      if (!v60)
                        goto LABEL_108;
                    }
                  }
                  do
                  {
                    v62 = v60[1];
                    if (v62 == v32)
                    {
                      if (v60[2] == v32)
                        goto LABEL_118;
                    }
                    else
                    {
                      if (v62 >= *(_QWORD *)&v22)
                        v62 %= *(_QWORD *)&v22;
                      if (v62 != v58)
                        break;
                    }
                    v60 = (_QWORD *)*v60;
                  }
                  while (v60);
                }
              }
LABEL_108:
              v63 = v19[29];
              if ((v63 & (v63 - 1)) != 0)
              {
                v64 = v32;
                if (v63 <= v32)
                  v64 = v32 % v63;
                v60 = *(_QWORD **)(v19[28] + 8 * v64);
                do
                {
                  do
                    v60 = (_QWORD *)*v60;
                  while (v60[1] != v32);
                }
                while (v60[2] != v32);
              }
              else
              {
                v60 = *(_QWORD **)(v19[28] + 8 * ((v63 - 1) & v32));
                do
                {
                  do
                    v60 = (_QWORD *)*v60;
                  while (v60[1] != v32);
                }
                while (v60[2] != v32);
              }
LABEL_118:
              v65 = v60[12];
              v66 = v28;
              if (!v27)
                v66 = v18 % *(_QWORD *)&v22;
              v67 = *(_QWORD **)(v19[33] + 8 * v66);
              if (v67)
              {
                v68 = (_QWORD *)*v67;
                if (v68)
                {
                  if (v24 < 2)
                  {
                    while (1)
                    {
                      v69 = v68[1];
                      if (v69 == v18)
                      {
                        if (v68[2] == v18)
                          goto LABEL_88;
                      }
                      else if ((v69 & v25) != v66)
                      {
                        goto LABEL_135;
                      }
                      v68 = (_QWORD *)*v68;
                      if (!v68)
                        goto LABEL_135;
                    }
                  }
                  do
                  {
                    v70 = v68[1];
                    if (v70 == v18)
                    {
                      if (v68[2] == v18)
                        goto LABEL_88;
                    }
                    else
                    {
                      if (v70 >= *(_QWORD *)&v22)
                        v70 %= *(_QWORD *)&v22;
                      if (v70 != v66)
                        break;
                    }
                    v68 = (_QWORD *)*v68;
                  }
                  while (v68);
                }
              }
LABEL_135:
              v71 = v19[29];
              if ((v71 & (v71 - 1)) != 0)
              {
                v72 = v18;
                if (v71 <= v18)
                  v72 = v18 % v71;
                v68 = *(_QWORD **)(v19[28] + 8 * v72);
                do
                {
                  do
                    v68 = (_QWORD *)*v68;
                  while (v68[1] != v18);
                }
                while (v68[2] != v18);
              }
              else
              {
                v68 = *(_QWORD **)(v19[28] + 8 * ((v71 - 1) & v18));
                do
                {
                  do
                    v68 = (_QWORD *)*v68;
                  while (v68[1] != v18);
                }
                while (v68[2] != v18);
              }
LABEL_88:
              ;
            }
            while (v65 > v68[12]);
            do
            {
              v73 = *--v56;
              v54 = v73;
              if (v24 > 1)
              {
                v74 = v54;
                if (*(_QWORD *)&v22 <= v54)
                  v74 = v54 % *(_QWORD *)&v22;
              }
              else
              {
                v74 = v54 & v25;
              }
              v75 = *(_QWORD **)(v19[33] + 8 * v74);
              if (v75)
              {
                v76 = (_QWORD *)*v75;
                if (v76)
                {
                  if (v24 < 2)
                  {
                    while (1)
                    {
                      v77 = v76[1];
                      if (v77 == v54)
                      {
                        if (v76[2] == v54)
                          goto LABEL_176;
                      }
                      else if ((v77 & v25) != v74)
                      {
                        goto LABEL_166;
                      }
                      v76 = (_QWORD *)*v76;
                      if (!v76)
                        goto LABEL_166;
                    }
                  }
                  do
                  {
                    v78 = v76[1];
                    if (v78 == v54)
                    {
                      if (v76[2] == v54)
                        goto LABEL_176;
                    }
                    else
                    {
                      if (v78 >= *(_QWORD *)&v22)
                        v78 %= *(_QWORD *)&v22;
                      if (v78 != v74)
                        break;
                    }
                    v76 = (_QWORD *)*v76;
                  }
                  while (v76);
                }
              }
LABEL_166:
              v79 = v19[29];
              if ((v79 & (v79 - 1)) != 0)
              {
                v80 = v54;
                if (v79 <= v54)
                  v80 = v54 % v79;
                v76 = *(_QWORD **)(v19[28] + 8 * v80);
                do
                {
                  do
                    v76 = (_QWORD *)*v76;
                  while (v76[1] != v54);
                }
                while (v76[2] != v54);
              }
              else
              {
                v76 = *(_QWORD **)(v19[28] + 8 * ((v79 - 1) & v54));
                do
                {
                  do
                    v76 = (_QWORD *)*v76;
                  while (v76[1] != v54);
                }
                while (v76[2] != v54);
              }
LABEL_176:
              v81 = v76[12];
              v82 = v28;
              if (!v27)
                v82 = v18 % *(_QWORD *)&v22;
              v83 = *(_QWORD **)(v19[33] + 8 * v82);
              if (v83)
              {
                v84 = (_QWORD *)*v83;
                if (v84)
                {
                  if (v24 < 2)
                  {
                    while (1)
                    {
                      v85 = v84[1];
                      if (v85 == v18)
                      {
                        if (v84[2] == v18)
                          goto LABEL_146;
                      }
                      else if ((v85 & v25) != v82)
                      {
                        goto LABEL_193;
                      }
                      v84 = (_QWORD *)*v84;
                      if (!v84)
                        goto LABEL_193;
                    }
                  }
                  do
                  {
                    v86 = v84[1];
                    if (v86 == v18)
                    {
                      if (v84[2] == v18)
                        goto LABEL_146;
                    }
                    else
                    {
                      if (v86 >= *(_QWORD *)&v22)
                        v86 %= *(_QWORD *)&v22;
                      if (v86 != v82)
                        break;
                    }
                    v84 = (_QWORD *)*v84;
                  }
                  while (v84);
                }
              }
LABEL_193:
              v87 = v19[29];
              if ((v87 & (v87 - 1)) != 0)
              {
                v88 = v18;
                if (v87 <= v18)
                  v88 = v18 % v87;
                v84 = *(_QWORD **)(v19[28] + 8 * v88);
                do
                {
                  do
                    v84 = (_QWORD *)*v84;
                  while (v84[1] != v18);
                }
                while (v84[2] != v18);
              }
              else
              {
                v84 = *(_QWORD **)(v19[28] + 8 * ((v87 - 1) & v18));
                do
                {
                  do
                    v84 = (_QWORD *)*v84;
                  while (v84[1] != v18);
                }
                while (v84[2] != v18);
              }
LABEL_146:
              ;
            }
            while (v81 <= v84[12]);
          }
          while (v55 < v56);
        }
        v8 = v280;
        if (v53 != v280)
          *v280 = *v53;
        *v53 = v18;
        v6 = a3;
        a2 = v279;
        a4 = v276;
        if (v281 < v49)
        {
LABEL_209:
          result = sub_20EF86298(v280, v53, a3, v276, a5 & 1);
          a5 = 0;
          v9 = v53 + 1;
          continue;
        }
        v89 = sub_20EF88384(v280, v53, a3);
        v9 = v53 + 1;
        result = sub_20EF88384(v53 + 1, v279, a3);
        if (!(_DWORD)result)
        {
          if (v89)
            continue;
          goto LABEL_209;
        }
        a2 = v53;
        if (!v89)
          goto LABEL_2;
        return result;
    }
  }
}

_QWORD *sub_20EF88120(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, _QWORD ***a6)
{
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *result;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  sub_20EF88598(a1, a2, a3, a4, a6);
  v12 = *a5;
  v13 = *a4;
  v14 = **a6;
  v15 = sub_20EF838CC(v14, *a5)[12];
  result = sub_20EF838CC(v14, v13);
  if (v15 > result[12])
  {
    *a4 = v12;
    *a5 = v13;
    v17 = *a4;
    v18 = *a3;
    v19 = sub_20EF838CC(v14, *a4)[12];
    result = sub_20EF838CC(v14, v18);
    if (v19 > result[12])
    {
      *a3 = v17;
      *a4 = v18;
      v20 = *a3;
      v21 = *a2;
      v22 = sub_20EF838CC(v14, *a3)[12];
      result = sub_20EF838CC(v14, v21);
      if (v22 > result[12])
      {
        *a2 = v20;
        *a3 = v21;
        v23 = *a2;
        v24 = *a1;
        v25 = sub_20EF838CC(v14, *a2)[12];
        result = sub_20EF838CC(v14, v24);
        if (v25 > result[12])
        {
          *a1 = v23;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20EF88260(unint64_t *a1, unint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v8 = *a2;
  v9 = *a1;
  v10 = sub_20EF838CC(a4, *a2)[12];
  v11 = sub_20EF838CC(a4, v9)[12];
  v12 = *a3;
  result = sub_20EF838CC(a4, *a3);
  v14 = result[12];
  if (v10 <= v11)
  {
    if (v14 > v10)
    {
      *a2 = v12;
      *a3 = v8;
      v15 = *a2;
      v16 = *a1;
      v17 = sub_20EF838CC(a4, *a2)[12];
      result = sub_20EF838CC(a4, v16);
      if (v17 > result[12])
      {
        *a1 = v15;
        *a2 = v16;
      }
    }
  }
  else
  {
    if (v14 <= v10)
    {
      *a1 = v8;
      *a2 = v9;
      v18 = *a3;
      v19 = sub_20EF838CC(a4, *a3)[12];
      result = sub_20EF838CC(a4, v9);
      if (v19 <= result[12])
        return result;
      *a2 = v18;
    }
    else
    {
      *a1 = v12;
    }
    *a3 = v9;
  }
  return result;
}

BOOL sub_20EF88384(unint64_t *a1, unint64_t *a2, _QWORD ***a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = **a3;
      v11 = sub_20EF838CC(v10, v8)[12];
      if (v11 > sub_20EF838CC(v10, v9)[12])
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_20EF88260(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_20EF88598(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20EF88120(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v12 = a1 + 2;
      sub_20EF88260(a1, a1 + 1, a1 + 2, **a3);
      v13 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v14 = 0;
      v15 = **a3;
      v16 = 24;
      break;
  }
  while (1)
  {
    v17 = *v13;
    v18 = *v12;
    v19 = sub_20EF838CC(v15, *v13)[12];
    if (v19 > sub_20EF838CC(v15, v18)[12])
      break;
LABEL_13:
    v12 = v13;
    v16 += 8;
    if (++v13 == a2)
      return 1;
  }
  v20 = v16;
  do
  {
    *(unint64_t *)((char *)a1 + v20) = v18;
    v21 = v20 - 8;
    if (v20 == 8)
    {
      *a1 = v17;
      if (++v14 != 8)
        goto LABEL_13;
      return v13 + 1 == a2;
    }
    v18 = *(unint64_t *)((char *)a1 + v20 - 16);
    v22 = sub_20EF838CC(v15, v17)[12];
    v23 = sub_20EF838CC(v15, v18);
    v20 = v21;
  }
  while (v22 > v23[12]);
  *(unint64_t *)((char *)a1 + v21) = v17;
  if (++v14 != 8)
    goto LABEL_13;
  return v13 + 1 == a2;
}

_QWORD *sub_20EF88598(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, _QWORD ***a5)
{
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *result;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  sub_20EF88260(a1, a2, a3, **a5);
  v10 = *a4;
  v11 = *a3;
  v12 = **a5;
  v13 = sub_20EF838CC(v12, *a4)[12];
  result = sub_20EF838CC(v12, v11);
  if (v13 > result[12])
  {
    *a3 = v10;
    *a4 = v11;
    v15 = *a3;
    v16 = *a2;
    v17 = sub_20EF838CC(v12, *a3)[12];
    result = sub_20EF838CC(v12, v16);
    if (v17 > result[12])
    {
      *a2 = v15;
      *a3 = v16;
      v18 = *a2;
      v19 = *a1;
      v20 = sub_20EF838CC(v12, *a2)[12];
      result = sub_20EF838CC(v12, v19);
      if (v20 > result[12])
      {
        *a1 = v18;
        *a2 = v19;
      }
    }
  }
  return result;
}

_QWORD *sub_20EF88698(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x212BC5B40](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_20EF88768(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x212BC6290](v1 + 416);
  _Unwind_Resume(a1);
}

void sub_20EF887AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315138;
    v18[0] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "TryCatchWithStats:MSG:%s", 0x18uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315138;
    v18[0] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF88A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF88AB8(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[4];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[0] = v3;
  v4[1] = v2;
  v4[2] = "Generic error";
  v4[3] = 13;
  sub_20E8778D4((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

void sub_20EF88B48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315138;
    v18[0] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "TryCatchWithStats:MSG:%s", 0x18uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315138;
    v18[0] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF88E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF88E54(uint64_t a1, __int128 *a2, const char *a3)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  int v7;
  __int128 *v8;
  const char *v9;
  __int128 *v10;
  const char *v11;
  const char *v12;
  char v13;

  v7 = -1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v5, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 2);
  }
  v7 = 1;
  if (*(_QWORD *)a3)
  {
    v8 = &v5;
    v9 = a3;
    v10 = &v5;
    v11 = a3;
    v12 = a3;
    sub_20E9968B8((uint64_t *)&v10, (uint64_t)&v5);
  }
  else
  {
    v8 = &v5;
    v9 = "nullptr";
    v10 = &v5;
    v11 = "nullptr";
    v12 = "nullptr";
    sub_20E991B64((uint64_t *)&v10, (uint64_t)&v5);
  }
  if (v7 == -1)
    sub_20E877AB8();
  v8 = (__int128 *)&v13;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C9F20F0[v7])(&v8, &v5);
  if (v7 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C9F20A8[v7])(&v8, &v5);
  return result;
}

void sub_20EF88F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF88F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF88F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF88FA8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315138;
    v18[0] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "TryCatchWithStats:MSG:%s", 0x18uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315138;
    v18[0] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF89274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF892B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  int v6;
  int v7;
  uint64_t *v8;
  unsigned __int8 v9;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  std::__fs::filesystem::path *v17;
  std::__fs::filesystem::path *j;
  void *v19;
  std::__fs::filesystem::path *v20;
  void *v21[2];
  char v22;
  __uint64_t v23[2];
  _BYTE __p[18];
  __int16 v25;
  int v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  void *v31;
  char v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  sub_20EF707E8(a1 + 8, *(_QWORD *)(a1 + 440), (uint64_t)v21);
  sub_210224314((uint64_t)v21, 2u, "*", 1uLL, *(_QWORD *)(a1 + 440), (uint64_t *)__p);
  sub_20EF83A74((uint64_t)&v19, (__int128 **)__p);
  v2 = *(_QWORD *)__p;
  if (*(_QWORD *)__p)
  {
    v3 = *(_QWORD *)&__p[8];
    v4 = *(void **)__p;
    if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *(void **)__p;
    }
    *(_QWORD *)&__p[8] = v2;
    operator delete(v4);
  }
  v5 = sub_20EF84054((std::__fs::filesystem::path *)v19, v20, *(_QWORD *)(a1 + 440));
  v7 = v6;
  v8 = sub_210219C18();
  v9 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = "TOT";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v5;
    v25 = 1024;
    v26 = v7;
    v11 = (char *)_os_log_send_and_compose_impl();
    v12 = strlen(v11);
    v23[0] = 0;
    pthread_threadid_np(0, v23);
    v13 = v23[0];
    timespec_get((timespec *)v23, 1);
    sub_210219E20(__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v8 + 1), (__int128 *)(v8 + 5), "MappingIOAnalytics:TYPE:%s, NF:%u, TS:%u", 0x28uLL, v11, v12, v13, v23);
    std::mutex::lock(&stru_254A5A410);
    v14 = qword_254A5A458;
    for (i = unk_254A5A460; v14 != i; v14 += 40)
    {
      v16 = *(_QWORD *)(v14 + 32);
      if (!v16)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 48))(v16, __p);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v37 < 0)
    {
      operator delete(v36);
      if ((v35 & 0x80000000) == 0)
      {
LABEL_16:
        if (!v33)
        {
LABEL_22:
          if (v30 && v29 < 0)
            operator delete(v28);
          if (v27 < 0)
            operator delete(*(void **)&__p[8]);
          if (v11)
            free(v11);
          goto LABEL_29;
        }
LABEL_20:
        if (v32 < 0)
          operator delete(v31);
        goto LABEL_22;
      }
    }
    else if ((v35 & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(v34);
    if (!v33)
      goto LABEL_22;
    goto LABEL_20;
  }
LABEL_29:
  if (os_signpost_enabled((os_log_t)*v8))
  {
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = "TOT";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v5;
    v25 = 1024;
    v26 = v7;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v17 = (std::__fs::filesystem::path *)v19;
  if (v19)
  {
    for (j = v20; j != v17; --j)
    {
      if (SHIBYTE(j[-1].__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(j[-1].__pn_.__r_.__value_.__l.__data_);
    }
    operator delete(v17);
  }
  if (v22 < 0)
    operator delete(v21[0]);
}

void sub_20EF89688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  uint64_t *v26;

  if (a2)
  {
    sub_20E96E218((uint64_t)&a24);
    if (v24)
      free(v24);
    sub_20E8F74DC(&a13);
    if (a21 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    v26 = sub_210219C18();
    sub_20EF89A78((uint64_t)v26, 0xEEEEB0B5B2B2EEEELL);
    __cxa_end_catch();
    JUMPOUT(0x20EF89608);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EF8976C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315138;
    v18[0] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "TryCatchWithStats:MSG:%s", 0x18uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315138;
    v18[0] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF89A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF89A78(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  __uint64_t v12[2];
  int v13;
  _QWORD v14[3];
  char v15;
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v13 = 136315138;
    v14[0] = "ANALYTICS_FAIL";
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v12[0] = 0;
    pthread_threadid_np(0, v12);
    v8 = v12[0];
    timespec_get((timespec *)v12, 1);
    sub_210219E20(&v13, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "MappingIOAnalytics:TYPE:%s", 0x1AuLL, v6, v7, v8, v12);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v11 + 48))(v11, &v13);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v25 < 0)
    {
      operator delete(__p);
      if ((v23 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v21)
        {
LABEL_14:
          if (v18 && v17 < 0)
            operator delete(v16);
          if (v15 < 0)
            operator delete(*(void **)((char *)v14 + 4));
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v20 < 0)
          operator delete(v19);
        goto LABEL_14;
      }
    }
    else if ((v23 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v22);
    if (!v21)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v13 = 136315138;
    v14[0] = "ANALYTICS_FAIL";
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF89D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EF89D80(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C9F2118;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EF89DF4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C9F2118;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EF89E68(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C9F2118;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20EF89EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9F2118;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_20EF89EF8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20EF89F50(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20EF89FB8(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __uint64_t *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  std::string::size_type *p_size;
  __uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *p_p;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  size_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  size_t v29;
  std::string::size_type v30;
  std::string *p_object;
  void *v32;
  uint64_t v33;
  __uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  char v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  char *v42;
  char *shared_owners;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  std::string::size_type v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  __uint64_t *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  long double v91;
  double v92;
  _BYTE *v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  int64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  __int128 *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v117;
  const char *v118;
  size_t v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  const char *v122;
  size_t v123;
  std::string::size_type *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 *v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  size_t v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  std::string::size_type v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  __uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  int v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::string::size_type v165;
  void *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t *v170;
  void *v171;
  std::string::size_type v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 *v177;
  __int128 *v178;
  void **v179;
  void **v180;
  unint64_t v181;
  __n128 v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t *v185;
  uint64_t v186;
  __n128 *v187;
  unint64_t v188;
  __n128 *v189;
  __n128 *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  std::string::size_type size;
  void *v209;
  int64_t v210;
  std::string::size_type v211;
  void **v212;
  int v213;
  uint64_t tv_nsec;
  __darwin_time_t tv_sec;
  uint64_t v216;
  uint64_t *v217;
  unsigned __int8 *v218;
  std::string::size_type v219;
  int v220;
  unsigned __int8 v221;
  unsigned __int8 v222;
  char *v224;
  size_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t i;
  uint64_t v229;
  uint64_t v230;
  unint64_t v232;
  _BYTE *v233;
  unint64_t v234;
  __int128 v237;
  std::string::size_type v238;
  __darwin_time_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  char *v243;
  char *v244;
  unint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  _BYTE *v256;
  int64_t v257;
  unint64_t v258;
  char *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _OWORD *v264;
  char *v265;
  uint64_t v266;
  __int128 v267;
  uint64_t v268;
  __darwin_time_t v269;
  uint64_t v270;
  char *v271;
  uint64_t *v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  unint64_t v276;
  void **v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  void *v289;
  void **v290;
  void *v291;
  char *v292;
  char *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  _BYTE *v297;
  _BYTE *v298;
  _BYTE *v299;
  int64_t v300;
  _BYTE *v301;
  char *v302;
  char *v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  void *v307;
  __darwin_time_t v308;
  uint64_t v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  void **v314;
  size_t v315;
  void **v316;
  size_t v317;
  uint64_t *v318;
  int v319;
  unsigned __int8 v320;
  char *v322;
  size_t v323;
  __darwin_time_t v324;
  uint64_t v325;
  uint64_t j;
  uint64_t v327;
  std::string::size_type v328;
  std::chrono::steady_clock::time_point v329;
  double v330;
  double v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::runtime_error *exception;
  void *v336;
  std::__shared_weak_count_vtbl *v337;
  unint64_t v338;
  const char *v339;
  void **v340;
  uint64_t v341;
  const char *v342;
  int v343;
  _QWORD *v344;
  void **v345;
  int v346;
  int v347;
  _QWORD *v348;
  void *v349[2];
  char v350;
  timespec v351;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v353;
  const char *v354;
  int v355;
  const char *v356;
  uint64_t v357;
  std::__shared_weak_count *v358;
  __uint64_t v359[2];
  uint64_t v360;
  char v361;
  void *v362;
  char *v363;
  unint64_t v364;
  __int128 v365;
  char *v366;
  uint64_t v367;
  std::__shared_weak_count *v368;
  __int128 v369;
  char *v370;
  std::string object;
  __int128 v372;
  __int128 __p;
  __int128 v374;
  __int128 v375;
  uint64_t v376;
  void *v377;
  void **v378;
  uint64_t v379;
  __int128 v380;
  char v381;
  uint64_t v382;

  v382 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v4 + 304))
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      goto LABEL_21;
  }
  else
  {
    sub_20EF785E4(*(_QWORD *)(a1 + 32));
    *(_BYTE *)(v4 + 304) = 1;
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
    {
LABEL_21:
      *(_BYTE *)a2 = 0;
      *((_BYTE *)a2 + 24) = 0;
      a2[5] = 0;
      a2[6] = 0;
      a2[4] = 0;
      *((_BYTE *)a2 + 56) = 1;
      return;
    }
  }
  if (*(_QWORD *)(v5 + 16) != *(_QWORD *)(v4 + 208))
  {
    kdebug_trace();
    kdebug_trace();
    goto LABEL_21;
  }
  if (*(_BYTE *)(v5 + 80) && *(_QWORD *)(v4 + 312) == *(_QWORD *)(v4 + 320))
  {
    *(std::chrono::steady_clock::time_point *)(v4 + 392) = std::chrono::steady_clock::now();
    *(_QWORD *)(v4 + 400) = 0;
  }
  v341 = a1;
  sub_20EF764A8(&v365);
  v345 = a2;
  v348 = (_QWORD *)v4;
  if (**(int **)(v365 + 56) <= 3)
  {
    v6 = *(unsigned __int8 *)(v365 + 72);
    v7 = sub_20E8C31DC(v365, "OSLogSurrogateAppender", 1, 0);
    v8 = v7;
    if (v6 || v7)
    {
      v351.tv_sec = (__darwin_time_t)&v365;
      v351.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v353 = 3;
      v354 = "unknown file";
      v355 = 216;
      v357 = 0;
      v358 = 0;
      v356 = "unknown function";
      v9 = *(_QWORD *)(a1 + 8) + 24;
      LODWORD(v372) = 0;
      sub_20EB98A18((uint64_t)&v369, (uint64_t)&object, v9);
      if ((_DWORD)v372 == -1)
        sub_20E877AB8();
      *(_QWORD *)&v369 = v349;
      ((void (*)(__uint64_t *__return_ptr, __int128 *, std::string *))off_24C9F20F0[v372])(v359, &v369, &object);
      if ((_DWORD)v372 != -1)
        ((void (*)(__int128 *, std::string *))off_24C9F20A8[v372])(&v369, &object);
      if (v360 >= 0)
        v10 = v359;
      else
        v10 = (__uint64_t *)v359[0];
      v11 = *(_QWORD *)v351.tv_sec;
      v12 = (const char *)(*(_QWORD *)v351.tv_sec + 16);
      v346 = v6;
      v342 = v12;
      if (*(char *)(*(_QWORD *)v351.tv_sec + 39) < 0)
      {
        v12 = *(const char **)(v11 + 16);
        v13 = *(_QWORD *)(v11 + 24);
      }
      else
      {
        v13 = *(unsigned __int8 *)(*(_QWORD *)v351.tv_sec + 39);
      }
      v14 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        if ((_BYTE)v372)
        {
          *(std::string *)byte_254A4A4F8 = object;
        }
        else
        {
          byte_254A4A4F8[23] = 14;
          strcpy(byte_254A4A4F8, "com.apple.cv3d");
        }
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v15 = byte_254A4A4F8;
      else
        v15 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v16 = byte_254A4A4F8[23];
      else
        v16 = *(_QWORD *)&byte_254A4A4F8[8];
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v15, v12);
      p_size = &object.__r_.__value_.__l.__size_;
      if (v16 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v16 >= 0x17)
      {
        v18 = v10;
        v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v19 = v16 | 7;
        v20 = v19 + 1;
        p_size = (std::string::size_type *)operator new(v19 + 1);
        object.__r_.__value_.__r.__words[2] = v16;
        *(_QWORD *)&v372 = v20 | 0x8000000000000000;
        object.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
        v10 = v18;
      }
      else
      {
        BYTE7(v372) = v16;
        if (!v16)
        {
LABEL_38:
          *((_BYTE *)p_size + v16) = 0;
          BYTE8(v372) = 1;
          p_p = &__p;
          if (v13 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v4 = (uint64_t)v348;
          if (v13 >= 0x17)
          {
            v22 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v13 | 7) != 0x17)
              v22 = v13 | 7;
            v23 = v22 + 1;
            p_p = (__int128 *)operator new(v22 + 1);
            *((_QWORD *)&__p + 1) = v13;
            *(_QWORD *)&v374 = v23 | 0x8000000000000000;
            *(_QWORD *)&__p = p_p;
          }
          else
          {
            BYTE7(v374) = v13;
            if (!v13)
            {
LABEL_46:
              *((_BYTE *)p_p + v13) = 0;
              BYTE8(v374) = 1;
              v24 = object.__r_.__value_.__r.__words[0];
              if (SBYTE7(v374) < 0)
                operator delete((void *)__p);
              if (BYTE8(v372) && SBYTE7(v372) < 0)
                operator delete((void *)object.__r_.__value_.__l.__size_);
              if (object.__r_.__value_.__r.__words[0])
                os_release(object.__r_.__value_.__l.__data_);
              if (!v8 || !*(_QWORD *)(v8 + 24))
              {
                os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
                LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
                v32 = (void *)_os_log_send_and_compose_impl();
                v33 = v341;
                if (v32)
                  free(v32);
                goto LABEL_91;
              }
              v25 = _os_log_pack_size();
              v26 = (std::__shared_weak_count_vtbl *)operator new(v25, (std::align_val_t)8uLL);
              v27 = (std::__shared_weak_count *)operator new();
              v27->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v27->__shared_owners_;
              v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v27->__shared_weak_owners_ = 0;
              v27[1].__vftable = v26;
              v29 = strlen((const char *)v10);
              if (v29 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v30 = v29;
              v337 = v26;
              if (v29 >= 0x17)
              {
                v34 = v10;
                v35 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v29 | 7) != 0x17)
                  v35 = v29 | 7;
                v36 = v35 + 1;
                p_object = (std::string *)operator new(v35 + 1);
                object.__r_.__value_.__l.__size_ = v30;
                object.__r_.__value_.__r.__words[2] = v36 | 0x8000000000000000;
                object.__r_.__value_.__r.__words[0] = (std::string::size_type)p_object;
                v10 = v34;
              }
              else
              {
                *((_BYTE *)&object.__r_.__value_.__s + 23) = v29;
                p_object = &object;
                if (!v29)
                {
LABEL_65:
                  p_object->__r_.__value_.__s.__data_[v30] = 0;
                  *(_QWORD *)&v369 = object.__r_.__value_.__l.__size_;
                  v37 = object.__r_.__value_.__r.__words[0];
                  *(_QWORD *)((char *)&v369 + 7) = *(std::string::size_type *)((char *)&object.__r_.__value_.__r.__words[1]
                                                                             + 7);
                  v38 = HIBYTE(object.__r_.__value_.__r.__words[2]);
                  v39 = operator new(0x38uLL);
                  v40 = (std::__shared_weak_count *)v39;
                  v39[1] = 0;
                  v41 = v39 + 1;
                  v39[3] = off_24C9ABC20;
                  v42 = (char *)(v39 + 3);
                  v39[2] = 0;
                  v39[4] = v37;
                  shared_owners = (char *)(v39 + 4);
                  *v39 = &off_24C9ABBD0;
                  v39[5] = v369;
                  *(_QWORD *)((char *)v39 + 47) = *(_QWORD *)((char *)&v369 + 7);
                  *((_BYTE *)v39 + 55) = v38;
                  do
                    v44 = __ldxr(p_shared_owners);
                  while (__stxr(v44 + 1, p_shared_owners));
                  v4 = (uint64_t)v348;
                  do
                    v45 = __ldxr(v41);
                  while (__stxr(v45 + 1, v41));
                  do
                    v46 = __ldaxr(v41);
                  while (__stlxr(v46 - 1, v41));
                  if (!v46)
                  {
                    (*(void (**)(_QWORD *))(*v39 + 16))(v39);
                    std::__shared_weak_count::__release_weak(v40);
                  }
                  do
                    v47 = __ldaxr(p_shared_owners);
                  while (__stlxr(v47 - 1, p_shared_owners));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                    std::__shared_weak_count::__release_weak(v27);
                  }
                  if (SHIBYTE(v40[2].__vftable) < 0)
                    shared_owners = (char *)v40[1].__shared_owners_;
                  v48 = _os_log_pack_fill();
                  *(_DWORD *)v48 = 136315138;
                  *(_QWORD *)(v48 + 4) = shared_owners;
                  v49 = operator new();
                  v50 = *(unsigned __int8 *)(v11 + 39);
                  v51 = v342;
                  if ((v50 & 0x80u) != 0)
                  {
                    v51 = *(const char **)(v11 + 16);
                    v50 = *(_QWORD *)(v11 + 24);
                  }
                  *(_QWORD *)v49 = v337;
                  *(_QWORD *)(v49 + 8) = v337;
                  *(_QWORD *)(v49 + 16) = v27;
                  *(_QWORD *)(v49 + 24) = v42;
                  *(_QWORD *)(v49 + 32) = v40;
                  *(_QWORD *)(v49 + 40) = v51;
                  *(_QWORD *)(v49 + 48) = v50;
                  *(_BYTE *)(v49 + 56) = 1;
                  object.__r_.__value_.__r.__words[0] = v49;
                  (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &object);
                  v52 = object.__r_.__value_.__r.__words[0];
                  object.__r_.__value_.__r.__words[0] = 0;
                  a2 = v345;
                  v33 = v341;
                  if (v52)
                  {
                    v53 = *(std::__shared_weak_count **)(v52 + 32);
                    if (v53)
                    {
                      v54 = (unint64_t *)&v53->__shared_owners_;
                      do
                        v55 = __ldaxr(v54);
                      while (__stlxr(v55 - 1, v54));
                      if (!v55)
                      {
                        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                        std::__shared_weak_count::__release_weak(v53);
                      }
                    }
                    v56 = *(std::__shared_weak_count **)(v52 + 16);
                    if (v56)
                    {
                      v57 = (unint64_t *)&v56->__shared_owners_;
                      do
                        v58 = __ldaxr(v57);
                      while (__stlxr(v58 - 1, v57));
                      if (!v58)
                      {
                        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                        std::__shared_weak_count::__release_weak(v56);
                      }
                    }
                    MEMORY[0x212BC6398](v52, 0x10F0C40B62ED6C6);
                  }
LABEL_91:
                  if (SHIBYTE(v360) < 0)
                    operator delete((void *)v359[0]);
                  if (v346)
                  {
                    v59 = *(_QWORD *)(v33 + 8) + 24;
                    LODWORD(v372) = 0;
                    sub_20EB98A18((uint64_t)&v369, (uint64_t)&object, v59);
                    if ((_DWORD)v372 == -1)
                      sub_20E877AB8();
                    *(_QWORD *)&v369 = v349;
                    ((void (*)(__uint64_t *__return_ptr, __int128 *, std::string *))off_24C9F20F0[v372])(v359, &v369, &object);
                    if ((_DWORD)v372 != -1)
                      ((void (*)(__int128 *, std::string *))off_24C9F20A8[v372])(&v369, &object);
                    v60 = v359;
                    if (v360 < 0)
                      v60 = (__uint64_t *)v359[0];
                    sub_20E8C003C((uint64_t)&v351, "Location data received: %s", (const char *)v60);
                    if (SHIBYTE(v360) < 0)
                      operator delete((void *)v359[0]);
                    sub_20E863570((uint64_t)&v351);
                  }
                  sub_20E863570((uint64_t)&v351);
                  v61 = v358;
                  if (v358)
                  {
                    v62 = (unint64_t *)&v358->__shared_owners_;
                    do
                      v63 = __ldaxr(v62);
                    while (__stlxr(v63 - 1, v62));
                    if (!v63)
                    {
                      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                      std::__shared_weak_count::__release_weak(v61);
                    }
                  }
                  goto LABEL_107;
                }
              }
              memcpy(p_object, v10, v30);
              goto LABEL_65;
            }
          }
          memmove(p_p, v12, v13);
          goto LABEL_46;
        }
      }
      memmove(p_size, v15, v16);
      goto LABEL_38;
    }
  }
LABEL_107:
  v64 = v341;
  v65 = *(_QWORD *)(v341 + 8);
  LODWORD(v372) = 0;
  sub_20EF8D310((uint64_t)&v351, (uint64_t)&object, v65);
  if ((_DWORD)v372 == -1)
    sub_20E877AB8();
  v351.tv_sec = (__darwin_time_t)&v369;
  ((void (*)(void **__return_ptr, timespec *, std::string *))off_24C9F20F0[v372])(v349, &v351, &object);
  if ((_DWORD)v372 != -1)
    ((void (*)(timespec *, std::string *))off_24C9F20A8[v372])(&v351, &object);
  if (v350 >= 0)
    v66 = v349;
  else
    v66 = (void **)v349[0];
  object.__r_.__value_.__r.__words[0] = 0;
  v67 = strnlen((const char *)v66, 8uLL);
  memcpy(&object, v66, v67);
  kdebug_trace();
  v68 = *(_QWORD *)(v341 + 8);
  if (!v68)
    goto LABEL_327;
  v69 = *(_QWORD *)(v4 + 192);
  if (v69)
  {
    if (*(_BYTE *)(v69 + 80))
    {
      if (*(_BYTE *)(v68 + 80))
      {
        v70 = *(_QWORD *)(v341 + 16);
        if (v70)
        {
          v71 = (unint64_t *)(v70 + 8);
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }
        v73 = *(std::__shared_weak_count **)(v4 + 200);
        *(_QWORD *)(v4 + 192) = v68;
        *(_QWORD *)(v4 + 200) = v70;
        if (v73)
        {
          v74 = (unint64_t *)&v73->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
      }
      goto LABEL_327;
    }
    if (!*(_BYTE *)(v68 + 80))
      goto LABEL_327;
  }
  v76 = *(_QWORD *)(v341 + 16);
  if (v76)
  {
    v77 = (unint64_t *)(v76 + 8);
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  v79 = *(std::__shared_weak_count **)(v4 + 200);
  *(_QWORD *)(v4 + 192) = v68;
  *(_QWORD *)(v4 + 200) = v76;
  if (v79)
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = *(_QWORD *)(v4 + 408);
  if (*(_BYTE *)(*(_QWORD *)(v341 + 8) + 80))
  {
    v83 = *(_QWORD *)(v82 + 40);
    v84 = *(_BYTE *)(v82 + 48);
    *(_QWORD *)(v82 + 56) = *(_QWORD *)(v82 + 32);
    *(_QWORD *)(v82 + 64) = v83;
    *(_BYTE *)(v82 + 72) = v84;
    if (*(_QWORD *)(v341 + 8))
      goto LABEL_139;
  }
  else
  {
    *(_QWORD *)(v82 + 56) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v82 + 16) + 16))(*(_QWORD *)(v82 + 16));
    *(_QWORD *)(v82 + 64) = v85;
    *(_BYTE *)(v82 + 72) = 1;
    if (*(_QWORD *)(v341 + 8))
      goto LABEL_139;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 424, (uint64_t)"location", 8, (uint64_t)"Location input is required.", 27, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_598;
  }
LABEL_139:
  if (!*(_BYTE *)(v4 + 304)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 425, (uint64_t)"has_loaded_toc_ && \"Submap metadata has not been loaded.\"", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_598:
    abort();
  }
  v369 = 0uLL;
  v370 = 0;
  v347 = *(unsigned __int8 *)(*(_QWORD *)(v341 + 8) + 80);
  if (!*(_BYTE *)(*(_QWORD *)(v341 + 8) + 80))
  {
    if (*(_QWORD *)(v4 + 336)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 430, (uint64_t)"bytes_loaded_ == 0", 18, (uint64_t)"Disjoint map load called after a previous load.", 47, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v170 = *(uint64_t **)(v4 + 280);
    for (v351.tv_sec = (__darwin_time_t)&v369; v170; v170 = (uint64_t *)*v170)
    {
      v172 = v170[2];
      v173 = *(_OWORD *)(v170 + 3);
      v174 = *(_OWORD *)(v170 + 5);
      v175 = *(_OWORD *)(v170 + 7);
      v176 = *(_OWORD *)(v170 + 11);
      v374 = *(_OWORD *)(v170 + 9);
      v375 = v176;
      object.__r_.__value_.__r.__words[0] = v172;
      v376 = v170[13];
      v372 = v174;
      __p = v175;
      *(_OWORD *)&object.__r_.__value_.__r.__words[1] = v173;
      v378 = 0;
      v379 = 0;
      v177 = (__int128 *)v170[14];
      v178 = (__int128 *)v170[15];
      v377 = 0;
      sub_20E8ADB20((char *)&v377, v177, v178, 0xAAAAAAAAAAAAAAABLL * (((char *)v178 - (char *)v177) >> 3));
      v380 = *(_OWORD *)(v170 + 17);
      v359[0] = object.__r_.__value_.__r.__words[0];
      sub_20E9B2D04(&v351.tv_sec, v359);
      v179 = (void **)v377;
      if (v377)
      {
        v180 = v378;
        v171 = v377;
        if (v378 != v377)
        {
          do
          {
            if (*((char *)v180 - 1) < 0)
              operator delete(*(v180 - 3));
            v180 -= 3;
          }
          while (v180 != v179);
          v171 = v377;
        }
        v378 = v179;
        operator delete(v171);
      }
    }
    v181 = sub_20EFA10BC((uint64_t *)(v4 + 264), (uint64_t *)&v369, *(_QWORD *)(v4 + 136));
    a2 = v345;
    goto LABEL_286;
  }
  if (!*(_BYTE *)(v4 + 304))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 713, (uint64_t)"has_loaded_toc_ && \"Submap metadata has not been loaded.\"", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v183 = *(_QWORD *)(v341 + 8);
    if (!v183 || !*(_BYTE *)(v183 + 80))
    {
      v365 = 0uLL;
      v366 = 0;
      goto LABEL_283;
    }
  }
  v365 = 0uLL;
  v366 = 0;
  v86 = *(uint64_t **)(v4 + 240);
  if (v86)
  {
    while (1)
    {
      if (!*((_BYTE *)v86 + 88))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
        sub_20EF80F18((int)&object, v86[2]);
        std::runtime_error::runtime_error(exception, &object);
        exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
        LODWORD(exception[1].__vftable) = 1;
        __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      v87 = *(_QWORD *)(v64 + 8);
      v88 = *(double *)(v87 + 24);
      v89 = *((double *)v86 + 4);
      v90 = (*((double *)v86 + 5) - *(double *)(v87 + 32)) * 0.0174532925;
      v91 = cos((v88 + v89) * 0.5 * 0.0174532925);
      v92 = sqrt((v89 - v88) * 0.0174532925 * ((v89 - v88) * 0.0174532925) + v90 * v91 * (v90 * v91)) * 6371000.0;
      if (v92 > *(double *)(v4 + 48))
        goto LABEL_145;
      v93 = (_BYTE *)*((_QWORD *)&v365 + 1);
      if (*((_QWORD *)&v365 + 1) < (unint64_t)v366)
      {
        **((_QWORD **)&v365 + 1) = v86[2];
        v94 = (uint64_t)(v93 + 8);
        goto LABEL_170;
      }
      v95 = (_BYTE *)v365;
      v96 = *((_QWORD *)&v365 + 1) - v365;
      v97 = (uint64_t)(*((_QWORD *)&v365 + 1) - v365) >> 3;
      v98 = v97 + 1;
      if ((unint64_t)(v97 + 1) >> 61)
        sub_20E92CED8();
      v99 = (uint64_t)&v366[-v365];
      if ((uint64_t)&v366[-v365] >> 2 > v98)
        v98 = v99 >> 2;
      v100 = (unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v98;
      if (v100)
        break;
      v101 = 0;
      v102 = (char *)(8 * v97);
      *(_QWORD *)(8 * v97) = v86[2];
      v94 = 8 * v97 + 8;
      v103 = v93 - v95;
      if (v93 != v95)
        goto LABEL_159;
LABEL_168:
      *(_QWORD *)&v365 = v102;
      v366 = &v101[8 * v100];
      if (v95)
        operator delete(v95);
LABEL_170:
      *((_QWORD *)&v365 + 1) = v94;
      sub_20EF764A8(&v367);
      v64 = v341;
      if (**(int **)(v367 + 56) <= 3)
      {
        v113 = *(unsigned __int8 *)(v367 + 72);
        v114 = sub_20E8C31DC(v367, "OSLogSurrogateAppender", 1, 0);
        v115 = v114;
        if (v113 || v114 != 0)
        {
          v343 = v113;
          v351.tv_sec = (__darwin_time_t)&v367;
          v351.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
          rep = std::chrono::system_clock::now().__d_.__rep_;
          v353 = 3;
          v354 = "unknown file";
          v355 = 731;
          v356 = "unknown function";
          v357 = 0;
          v358 = 0;
          v117 = *(_QWORD *)v351.tv_sec;
          v118 = (const char *)(*(_QWORD *)v351.tv_sec + 16);
          v339 = v118;
          if (*(char *)(*(_QWORD *)v351.tv_sec + 39) < 0)
          {
            v118 = *(const char **)(v117 + 16);
            v119 = *(_QWORD *)(v117 + 24);
            v121 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v121 & 1) == 0)
            {
LABEL_260:
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v359);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v359);
                if (v361 && SHIBYTE(v360) < 0)
                  operator delete((void *)v359[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
            }
          }
          else
          {
            v119 = *(unsigned __int8 *)(*(_QWORD *)v351.tv_sec + 39);
            v120 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v120 & 1) == 0)
              goto LABEL_260;
          }
          if (byte_254A4A4F8[23] >= 0)
            v122 = byte_254A4A4F8;
          else
            v122 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v123 = byte_254A4A4F8[23];
          else
            v123 = *(_QWORD *)&byte_254A4A4F8[8];
          object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v122, v118);
          if (v123 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v123 >= 0x17)
          {
            v125 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v123 | 7) != 0x17)
              v125 = v123 | 7;
            v126 = v125 + 1;
            v124 = (std::string::size_type *)operator new(v125 + 1);
            object.__r_.__value_.__r.__words[2] = v123;
            *(_QWORD *)&v372 = v126 | 0x8000000000000000;
            object.__r_.__value_.__l.__size_ = (std::string::size_type)v124;
          }
          else
          {
            BYTE7(v372) = v123;
            v124 = &object.__r_.__value_.__l.__size_;
            if (!v123)
            {
LABEL_193:
              *((_BYTE *)v124 + v123) = 0;
              BYTE8(v372) = 1;
              if (v119 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v119 >= 0x17)
              {
                v128 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v119 | 7) != 0x17)
                  v128 = v119 | 7;
                v129 = v128 + 1;
                v127 = (__int128 *)operator new(v128 + 1);
                *((_QWORD *)&__p + 1) = v119;
                *(_QWORD *)&v374 = v129 | 0x8000000000000000;
                *(_QWORD *)&__p = v127;
              }
              else
              {
                BYTE7(v374) = v119;
                v127 = &__p;
                if (!v119)
                  goto LABEL_201;
              }
              memmove(v127, v118, v119);
LABEL_201:
              *((_BYTE *)v127 + v119) = 0;
              BYTE8(v374) = 1;
              v130 = object.__r_.__value_.__r.__words[0];
              if (SBYTE7(v374) < 0)
                operator delete((void *)__p);
              v64 = v341;
              if (BYTE8(v372) && SBYTE7(v372) < 0)
                operator delete((void *)object.__r_.__value_.__l.__size_);
              if (object.__r_.__value_.__r.__words[0])
                os_release(object.__r_.__value_.__l.__data_);
              if (v115 && *(_QWORD *)(v115 + 24))
              {
                v131 = _os_log_pack_size();
                v132 = (std::__shared_weak_count_vtbl *)operator new(v131, (std::align_val_t)8uLL);
                v133 = (std::__shared_weak_count *)operator new();
                v134 = v133;
                v133->__shared_owners_ = 0;
                v135 = (unint64_t *)&v133->__shared_owners_;
                v133->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v133->__shared_weak_owners_ = 0;
                v133[1].__vftable = v132;
                object.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
                object.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
                object.__r_.__value_.__r.__words[2] = (std::string::size_type)v133;
                do
                  v136 = __ldxr(v135);
                while (__stxr(v136 + 1, v135));
                v372 = 0uLL;
                *(_QWORD *)&__p = 0;
                do
                  v137 = __ldaxr(v135);
                while (__stlxr(v137 - 1, v135));
                if (!v137)
                {
                  ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                  std::__shared_weak_count::__release_weak(v134);
                }
                v138 = object.__r_.__value_.__r.__words[0];
                v139 = _os_log_pack_fill();
                v140 = v86[2];
                *(_DWORD *)v139 = 134218240;
                *(_QWORD *)(v139 + 4) = v140;
                *(_WORD *)(v139 + 12) = 2048;
                *(double *)(v139 + 14) = v92;
                v141 = operator new();
                v142 = *(unsigned __int8 *)(v117 + 39);
                v143 = v339;
                if ((v142 & 0x80u) != 0)
                {
                  v143 = *(const char **)(v117 + 16);
                  v142 = *(_QWORD *)(v117 + 24);
                }
                *(_QWORD *)v141 = v138;
                *(_OWORD *)(v141 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v141 + 24) = v372;
                v372 = 0uLL;
                *(_QWORD *)(v141 + 40) = v143;
                *(_QWORD *)(v141 + 48) = v142;
                *(_BYTE *)(v141 + 56) = 1;
                v362 = 0;
                v359[0] = v141;
                (*(void (**)(_QWORD, __uint64_t *))(**(_QWORD **)(v115 + 24) + 40))(*(_QWORD *)(v115 + 24), v359);
                v144 = v359[0];
                v359[0] = 0;
                v4 = (uint64_t)v348;
                if (v144)
                {
                  v145 = *(std::__shared_weak_count **)(v144 + 32);
                  if (v145)
                  {
                    v146 = (unint64_t *)&v145->__shared_owners_;
                    do
                      v147 = __ldaxr(v146);
                    while (__stlxr(v147 - 1, v146));
                    if (!v147)
                    {
                      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                      std::__shared_weak_count::__release_weak(v145);
                    }
                  }
                  v148 = *(std::__shared_weak_count **)(v144 + 16);
                  if (v148)
                  {
                    v149 = (unint64_t *)&v148->__shared_owners_;
                    do
                      v150 = __ldaxr(v149);
                    while (__stlxr(v150 - 1, v149));
                    if (!v150)
                    {
                      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                      std::__shared_weak_count::__release_weak(v148);
                    }
                  }
                  MEMORY[0x212BC6398](v144, 0x10F0C40B62ED6C6);
                  v151 = v362;
                  v362 = 0;
                  if (v151)
                  {
                    v152 = (std::__shared_weak_count *)*((_QWORD *)v151 + 4);
                    if (v152)
                    {
                      v153 = (unint64_t *)&v152->__shared_owners_;
                      do
                        v154 = __ldaxr(v153);
                      while (__stlxr(v154 - 1, v153));
                      if (!v154)
                      {
                        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                        std::__shared_weak_count::__release_weak(v152);
                      }
                    }
                    v155 = (std::__shared_weak_count *)*((_QWORD *)v151 + 2);
                    if (v155)
                    {
                      v156 = (unint64_t *)&v155->__shared_owners_;
                      do
                        v157 = __ldaxr(v156);
                      while (__stlxr(v157 - 1, v156));
                      if (!v157)
                      {
                        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                        std::__shared_weak_count::__release_weak(v155);
                      }
                    }
                    MEMORY[0x212BC6398](v151, 0x10F0C40B62ED6C6);
                  }
                }
                v158 = (std::__shared_weak_count *)*((_QWORD *)&v372 + 1);
                v159 = v343;
                if (*((_QWORD *)&v372 + 1))
                {
                  v160 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 8);
                  do
                    v161 = __ldaxr(v160);
                  while (__stlxr(v161 - 1, v160));
                  if (!v161)
                  {
                    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                    std::__shared_weak_count::__release_weak(v158);
                  }
                }
                v162 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                if (object.__r_.__value_.__r.__words[2])
                {
                  v163 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                  do
                    v164 = __ldaxr(v163);
                  while (__stlxr(v164 - 1, v163));
                  if (!v164)
                  {
                    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                    std::__shared_weak_count::__release_weak(v162);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v130, OS_LOG_TYPE_INFO);
                v165 = v86[2];
                LODWORD(object.__r_.__value_.__l.__data_) = 134218240;
                *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = v165;
                WORD2(object.__r_.__value_.__r.__words[1]) = 2048;
                *(double *)((char *)&object.__r_.__value_.__r.__words[1] + 6) = v92;
                v166 = (void *)_os_log_send_and_compose_impl();
                v4 = (uint64_t)v348;
                v159 = v343;
                if (v166)
                  free(v166);
              }
              if (v159)
              {
                sub_20E8C003C((uint64_t)&v351, "Attempting to load [%llu] with dist %f m.", v86[2], v92);
                sub_20E863570((uint64_t)&v351);
              }
              sub_20E863570((uint64_t)&v351);
              v167 = v358;
              if (v358)
              {
                v168 = (unint64_t *)&v358->__shared_owners_;
                do
                  v169 = __ldaxr(v168);
                while (__stlxr(v169 - 1, v168));
                if (!v169)
                {
                  ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                  std::__shared_weak_count::__release_weak(v167);
                }
              }
              goto LABEL_145;
            }
          }
          memmove(v124, v122, v123);
          goto LABEL_193;
        }
      }
LABEL_145:
      v86 = (uint64_t *)*v86;
      if (!v86)
        goto LABEL_283;
    }
    if (v100 >> 61)
      sub_20E877A38();
    v101 = (char *)operator new(8 * v100);
    v102 = &v101[8 * v97];
    *(_QWORD *)v102 = v86[2];
    v94 = (uint64_t)(v102 + 8);
    v103 = v93 - v95;
    if (v93 == v95)
      goto LABEL_168;
LABEL_159:
    v104 = v103 - 8;
    if (v104 < 0x58)
      goto LABEL_608;
    if ((unint64_t)(v93 - &v101[v96]) < 0x20)
      goto LABEL_608;
    v105 = (v104 >> 3) + 1;
    v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
    v107 = &v93[-v106];
    v102 -= v106;
    v108 = &v101[8 * v97 - 16];
    v109 = (__int128 *)(v93 - 16);
    v110 = v105 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v111 = *v109;
      *((_OWORD *)v108 - 1) = *(v109 - 1);
      *(_OWORD *)v108 = v111;
      v108 -= 32;
      v109 -= 2;
      v110 -= 4;
    }
    while (v110);
    v93 = v107;
    if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_608:
      do
      {
        v112 = *((_QWORD *)v93 - 1);
        v93 -= 8;
        *((_QWORD *)v102 - 1) = v112;
        v102 -= 8;
      }
      while (v93 != v95);
    }
    goto LABEL_168;
  }
LABEL_283:
  if ((_QWORD)v369)
  {
    *((_QWORD *)&v369 + 1) = v369;
    operator delete((void *)v369);
  }
  v369 = v365;
  v370 = v366;
  v181 = sub_20EFA10BC((uint64_t *)(v4 + 224), (uint64_t *)&v369, *(_QWORD *)(v4 + 136) + *(_QWORD *)(v4 + 144) - *(_QWORD *)(v4 + 336));
  a2 = v345;
LABEL_286:
  *(_QWORD *)(v4 + 336) += v181;
  v185 = (unint64_t *)*((_QWORD *)&v369 + 1);
  v184 = (unint64_t *)v369;
  if ((_QWORD)v369 != *((_QWORD *)&v369 + 1))
  {
    if (v347)
      v186 = v4 + 224;
    else
      v186 = v4 + 264;
    while (1)
    {
      v188 = sub_20EF93DCC(v186, *v184, (uint64_t *)v184)[12];
      v189 = *(__n128 **)(v4 + 312);
      v187 = *(__n128 **)(v4 + 320);
      v190 = v189;
      if (v189 == v187)
      {
LABEL_300:
        if (v190 != v187)
          goto LABEL_292;
        v191 = *v184;
        v192 = v348[41];
        if ((unint64_t)v187 < v192)
        {
LABEL_290:
          v187->n128_u64[0] = v191;
          v187->n128_u8[8] = v347;
          v187[1].n128_u64[0] = v188;
          v187 = (__n128 *)((char *)v187 + 24);
          v4 = (uint64_t)v348;
          goto LABEL_291;
        }
      }
      else
      {
        v191 = *v184;
        v190 = v189;
        do
        {
          if (v190->n128_u64[0] == v191)
          {
            v4 = (uint64_t)v348;
            goto LABEL_300;
          }
          v190 = (__n128 *)((char *)v190 + 24);
        }
        while (v190 != v187);
        v192 = v348[41];
        if ((unint64_t)v187 < v192)
          goto LABEL_290;
      }
      v193 = 0xAAAAAAAAAAAAAAABLL * (((char *)v187 - (char *)v189) >> 3) + 1;
      if (v193 > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      v194 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v192 - (_QWORD)v189) >> 3);
      if (2 * v194 > v193)
        v193 = 2 * v194;
      if (v194 >= 0x555555555555555)
        v195 = 0xAAAAAAAAAAAAAAALL;
      else
        v195 = v193;
      if (v195)
      {
        if (v195 > 0xAAAAAAAAAAAAAAALL)
          sub_20E877A38();
        v196 = (char *)operator new(24 * v195);
      }
      else
      {
        v196 = 0;
      }
      v197 = &v196[8 * (((char *)v187 - (char *)v189) >> 3)];
      *(_QWORD *)v197 = v191;
      v197[8] = v347;
      *((_QWORD *)v197 + 2) = v188;
      v198 = v197;
      if (v189 == v187)
      {
        v4 = (uint64_t)v348;
        v187 = (__n128 *)(v197 + 24);
        v348[39] = v197;
        v348[40] = v197 + 24;
        v348[41] = &v196[24 * v195];
        if (!v189)
          goto LABEL_291;
      }
      else
      {
        v4 = (uint64_t)v348;
        do
        {
          v182 = *(__n128 *)((char *)v187 - 24);
          *((_QWORD *)v198 - 1) = v187[-1].n128_u64[1];
          *(__n128 *)(v198 - 24) = v182;
          v198 -= 24;
          v187 = (__n128 *)((char *)v187 - 24);
        }
        while (v187 != v189);
        v189 = (__n128 *)v348[39];
        v187 = (__n128 *)(v197 + 24);
        v348[39] = v198;
        v348[40] = v197 + 24;
        v348[41] = &v196[24 * v195];
        if (!v189)
          goto LABEL_291;
      }
      operator delete(v189);
LABEL_291:
      *(_QWORD *)(v4 + 320) = v187;
LABEL_292:
      a2 = v345;
      if (++v184 == v185)
        goto LABEL_321;
    }
  }
  v187 = *(__n128 **)(v4 + 320);
LABEL_321:
  v199 = *(_QWORD *)(v4 + 312);
  v200 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v187 - v199) >> 3));
  if (v187 == (__n128 *)v199)
    v201 = 0;
  else
    v201 = v200;
  sub_20EF84CFC(v199, v187, v201, 1, v182);
  if ((_QWORD)v369)
  {
    *((_QWORD *)&v369 + 1) = v369;
    operator delete((void *)v369);
  }
  v64 = v341;
LABEL_327:
  if (*(_BYTE *)(*(_QWORD *)(v64 + 8) + 80))
  {
    while (sub_20EF79F80(v4))
      ;
  }
  *(_BYTE *)a2 = 0;
  a2[4] = 0;
  v340 = a2 + 4;
  *((_BYTE *)a2 + 24) = 0;
  a2[5] = 0;
  a2[6] = 0;
  *((_BYTE *)a2 + 56) = 1;
  if (*(_BYTE *)(v64 + 24))
  {
    v202 = *(_QWORD *)(v4 + 168);
    v203 = *(_QWORD *)(v4 + 440);
    if (*(_BYTE *)(v4 + 304))
      goto LABEL_334;
  }
  else
  {
    v202 = -1;
    v203 = *(_QWORD *)(v4 + 440);
    if (*(_BYTE *)(v4 + 304))
      goto LABEL_334;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 502, (uint64_t)"has_loaded_toc_ && \"Submap metadata has not been loaded.\"", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_583;
  }
LABEL_334:
  if (*(_QWORD *)(v4 + 312) == *(_QWORD *)(v4 + 320))
  {
    v212 = a2;
    v213 = 0;
    *((_BYTE *)v212 + 56) = 1;
    goto LABEL_541;
  }
  kdebug_trace();
  v204 = *(_QWORD *)(v4 + 312);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 320) - v204) >> 3) >= v202)
    v205 = v202;
  else
    v205 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 320) - v204) >> 3);
  v344 = *(_QWORD **)(v4 + 312);
  if (!v204
    && v205
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| !*(_BYTE *)(v4 + 304)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 468, (uint64_t)"has_loaded_toc_ && \"Submap metadata has not been loaded.\"", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_583:
    abort();
  }
  memset(&object, 0, sizeof(object));
  if (v205)
  {
    if (v205 >> 61)
      sub_20E92CED8();
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(8 * v205);
    object.__r_.__value_.__l.__size_ = object.__r_.__value_.__r.__words[0];
    object.__r_.__value_.__r.__words[2] = object.__r_.__value_.__r.__words[0] + 8 * v205;
    v359[0] = (__uint64_t)&object;
    v206 = 24 * v205;
    v207 = v344;
    do
    {
      *(_QWORD *)&v365 = *v207;
      sub_20E9B2D04((uint64_t *)v359, &v365);
      v207 += 3;
      v206 -= 24;
    }
    while (v206);
    size = object.__r_.__value_.__l.__size_;
    v209 = (void *)object.__r_.__value_.__r.__words[0];
    memset(&object, 0, sizeof(object));
    v210 = size - (_QWORD)v209;
    if ((void *)size != v209)
    {
      if (v210 < 0)
        sub_20E92CED8();
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(size - (_QWORD)v209);
      object.__r_.__value_.__l.__size_ = object.__r_.__value_.__r.__words[0];
      v211 = object.__r_.__value_.__r.__words[0] + 8 * (v210 >> 3);
      object.__r_.__value_.__r.__words[2] = v211;
      memcpy(object.__r_.__value_.__l.__data_, v209, v210);
      object.__r_.__value_.__l.__size_ = v211;
    }
  }
  else
  {
    v209 = 0;
    memset(&object, 0, sizeof(object));
  }
  LOBYTE(v372) = 1;
  sub_20EF5ED50(v4 + 8, (uint64_t)&object, *(_BYTE *)(v4 + 32), v4 + 176, v203, &v351);
  if ((_BYTE)v372 && object.__r_.__value_.__r.__words[0])
  {
    object.__r_.__value_.__l.__size_ = object.__r_.__value_.__r.__words[0];
    operator delete(object.__r_.__value_.__l.__data_);
  }
  tv_sec = v351.tv_sec;
  tv_nsec = v351.tv_nsec;
  v338 = v205;
  if (0xCCCCCCCCCCCCCCCDLL * ((v351.tv_nsec - v351.tv_sec) >> 3) != v205)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 474, (uint64_t)"maps.size() == to_load.size()", 29, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    tv_sec = v351.tv_sec;
    tv_nsec = v351.tv_nsec;
    v205 = 0xCCCCCCCCCCCCCCCDLL * ((v351.tv_nsec - v351.tv_sec) >> 3);
  }
  if (tv_nsec != tv_sec)
  {
    v336 = v209;
    v216 = 0;
    while (1)
    {
      v217 = sub_210219C18();
      v218 = (unsigned __int8 *)(v351.tv_sec + 40 * v216);
      if (v218[16])
      {
        v219 = *((_QWORD *)v218 + 1);
        v220 = *v218;
        v221 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v221 & 1) != 0)
          goto LABEL_365;
      }
      else
      {
        v219 = 0;
        v220 = *v218;
        v222 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v222 & 1) != 0)
          goto LABEL_365;
      }
      if (__cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
LABEL_365:
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_383;
      LODWORD(object.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = v219;
      WORD2(object.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&object.__r_.__value_.__r.__words[1] + 6) = v220;
      v224 = (char *)_os_log_send_and_compose_impl();
      v225 = strlen(v224);
      v359[0] = 0;
      pthread_threadid_np(0, v359);
      v226 = v359[0];
      timespec_get((timespec *)v359, 1);
      sub_210219E20(&object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v217 + 1), (__int128 *)(v217 + 5), "MappingIOMapLoad:ID:%llu, STATUS:%hhu", 0x25uLL, v224, v225, v226, v359);
      std::mutex::lock(&stru_254A5A410);
      v227 = qword_254A5A458;
      for (i = unk_254A5A460; v227 != i; v227 += 40)
      {
        v229 = *(_QWORD *)(v227 + 32);
        if (!v229)
          sub_20E86D37C();
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v229 + 48))(v229, &object);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v381 < 0)
      {
        operator delete((void *)v380);
        if (SHIBYTE(v379) < 0)
        {
LABEL_374:
          operator delete(v377);
          if (!(_BYTE)v376)
            goto LABEL_377;
          goto LABEL_375;
        }
      }
      else if (SHIBYTE(v379) < 0)
      {
        goto LABEL_374;
      }
      if (!(_BYTE)v376)
        goto LABEL_377;
LABEL_375:
      if (SHIBYTE(v375) < 0)
        operator delete(*((void **)&v374 + 1));
LABEL_377:
      if ((_BYTE)v374 && SHIBYTE(__p) < 0)
        operator delete(*((void **)&v372 + 1));
      if ((SBYTE7(v372) & 0x80000000) == 0)
      {
        if (!v224)
          goto LABEL_383;
LABEL_382:
        free(v224);
        goto LABEL_383;
      }
      operator delete((void *)object.__r_.__value_.__l.__size_);
      if (v224)
        goto LABEL_382;
LABEL_383:
      if (os_signpost_enabled((os_log_t)*v217))
      {
        LODWORD(object.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = v219;
        WORD2(object.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&object.__r_.__value_.__r.__words[1] + 6) = v220;
        _os_signpost_emit_unreliably_with_name_impl();
        tv_sec = v351.tv_sec;
        if (*(_BYTE *)(v351.tv_sec + 40 * v216) == 1)
          goto LABEL_387;
      }
      else
      {
        tv_sec = v351.tv_sec;
        if (*(_BYTE *)(v351.tv_sec + 40 * v216) == 1)
LABEL_387:
          *(_BYTE *)(*(_QWORD *)(tv_sec + 40 * v216 + 24) + 408) = v344[3 * v216 + 1];
      }
      ++v216;
      v4 = (uint64_t)v348;
      if (v216 == v205)
      {
        v209 = v336;
        break;
      }
    }
  }
  if (v209)
  {
    operator delete(v209);
    tv_sec = v351.tv_sec;
  }
  v230 = v351.tv_nsec;
  if (tv_sec != v351.tv_nsec)
  {
    while (*(_BYTE *)tv_sec != 3 || *(_BYTE *)(tv_sec + 16) == 0)
    {
      tv_sec += 40;
      if (tv_sec == v351.tv_nsec)
        goto LABEL_422;
    }
  }
  if (tv_sec == v351.tv_nsec)
  {
LABEL_422:
    v238 = 0;
    v237 = 0uLL;
  }
  else
  {
    v232 = 0;
    v233 = (_BYTE *)tv_sec;
LABEL_405:
    v234 = v232++;
    while (1)
    {
      v233 += 40;
      if (v233 == (_BYTE *)v351.tv_nsec)
        break;
      if (*v233 == 3 && v233[16] != 0)
      {
        if (v233 != (_BYTE *)v351.tv_nsec)
          goto LABEL_405;
        break;
      }
    }
    memset(&object, 0, sizeof(object));
    if (v234 >= 0x1FFFFFFFFFFFFFFFLL)
      sub_20E92CED8();
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(8 * v232);
    object.__r_.__value_.__l.__size_ = object.__r_.__value_.__r.__words[0];
    object.__r_.__value_.__r.__words[2] = object.__r_.__value_.__r.__words[0] + 8 * v232;
    *(_QWORD *)&v365 = &object;
LABEL_414:
    v362 = *(void **)(tv_sec + 8);
    sub_20E9B2D04((uint64_t *)&v365, &v362);
    while (1)
    {
      tv_sec += 40;
      if (tv_sec == v230)
        break;
      if (*(_BYTE *)tv_sec == 3 && *(_BYTE *)(tv_sec + 16) != 0)
      {
        if (tv_sec != v230)
          goto LABEL_414;
        break;
      }
    }
    v237 = *(_OWORD *)&object.__r_.__value_.__l.__data_;
    v238 = object.__r_.__value_.__r.__words[2];
  }
  *(_OWORD *)v359 = v237;
  v360 = v238;
  sub_20EF7D4B0(&v369, v4, (unint64_t **)v359, *(_QWORD *)(v4 + 440));
  if ((_QWORD)v369)
    operator delete((void *)v369);
  v239 = v351.tv_sec;
  v240 = v351.tv_nsec;
  v366 = 0;
  v365 = 0uLL;
  if (v351.tv_sec != v351.tv_nsec)
  {
    v241 = 0;
    v242 = 0;
    v243 = 0;
    v244 = 0;
    v245 = 0;
    v246 = 0;
    while (1)
    {
      v247 = *(_QWORD *)(v239 + 24);
      if (v247)
      {
        if (*(_BYTE *)(v239 + 36) && *(_DWORD *)(v239 + 32) == 1)
        {
          v249 = *(_QWORD *)(v247 + 160);
          if (v249 != -1)
          {
            if ((unint64_t)v246 >= v245)
            {
              v250 = v242;
              v251 = v241;
              v252 = (v246 - v244) >> 3;
              v253 = v252 + 1;
              if ((unint64_t)(v252 + 1) >> 61)
              {
                *(_QWORD *)&v365 = v243;
                *((_QWORD *)&v365 + 1) = v250;
                v366 = v251;
                sub_20E92CED8();
              }
              v254 = v245 - (_QWORD)v244;
              if (v254 >> 2 > v253)
                v253 = v254 >> 2;
              if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFF8)
                v255 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v255 = v253;
              if (v255)
              {
                if (v255 >> 61)
                {
                  *(_QWORD *)&v365 = v243;
                  v366 = v251;
                  sub_20E877A38();
                }
                v256 = operator new(8 * v255);
                v243 = &v256[8 * v252];
                *(_QWORD *)v243 = v249;
                v242 = (uint64_t)(v243 + 8);
                v257 = v246 - v244;
                if (v246 == v244)
                  goto LABEL_451;
LABEL_448:
                v258 = v257 - 8;
                if (v258 < 0x168)
                {
                  v259 = v246;
                  goto LABEL_450;
                }
                v261 = (v246 - 8 - v244) & 0xFFFFFFFFFFFFFFF8;
                if (&v256[v246 - v244 - 8 - v261] > &v256[v246 - v244 - 8])
                {
                  v259 = v246;
                  goto LABEL_450;
                }
                if (&v246[-v261 - 8] > v246 - 8)
                {
                  v259 = v246;
                  goto LABEL_450;
                }
                if ((unint64_t)(v244 - v256) < 0x20)
                {
                  v259 = v246;
                  goto LABEL_450;
                }
                v262 = (v258 >> 3) + 1;
                v263 = 8 * (v262 & 0x3FFFFFFFFFFFFFFCLL);
                v259 = &v246[-v263];
                v243 -= v263;
                v264 = &v256[8 * v252 - 16];
                v265 = v246 - 16;
                v266 = v262 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v267 = *(_OWORD *)v265;
                  *(v264 - 1) = *((_OWORD *)v265 - 1);
                  *v264 = v267;
                  v264 -= 2;
                  v265 -= 32;
                  v266 -= 4;
                }
                while (v266);
                if (v262 != (v262 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_450:
                    v260 = *((_QWORD *)v259 - 1);
                    v259 -= 8;
                    *((_QWORD *)v243 - 1) = v260;
                    v243 -= 8;
                  }
                  while (v259 != v244);
                }
              }
              else
              {
                v256 = 0;
                v243 = (char *)(8 * v252);
                *(_QWORD *)(8 * v252) = v249;
                v242 = 8 * v252 + 8;
                v257 = v246 - v244;
                if (v246 != v244)
                  goto LABEL_448;
              }
LABEL_451:
              v241 = &v256[8 * v255];
              if (v244)
                operator delete(v244);
              v244 = v243;
              v245 = (unint64_t)v241;
              v246 = (char *)v242;
              goto LABEL_428;
            }
            *(_QWORD *)v246 = v249;
            v246 += 8;
            v242 = (uint64_t)v246;
          }
        }
      }
LABEL_428:
      v239 += 40;
      if (v239 == v240)
      {
        *(_QWORD *)&v365 = v243;
        *((_QWORD *)&v365 + 1) = v242;
        v366 = v241;
        v239 = v351.tv_sec;
        v268 = v351.tv_nsec;
        v4 = (uint64_t)v348;
        goto LABEL_466;
      }
    }
  }
  v268 = v351.tv_sec;
LABEL_466:
  v362 = 0;
  v363 = 0;
  v364 = 0;
  sub_20EA647CC((uint64_t)&v362, 0xCCCCCCCCCCCCCCCDLL * ((v268 - v239) >> 3));
  v269 = v351.tv_sec;
  v270 = v351.tv_nsec;
  if (v351.tv_sec != v351.tv_nsec)
  {
    while (*(_BYTE *)v269 != 1)
    {
      v269 += 40;
      if (v269 == v351.tv_nsec)
        goto LABEL_482;
    }
  }
  if (v269 != v351.tv_nsec)
  {
    v271 = v363;
LABEL_472:
    v272 = (uint64_t *)(v269 + 24);
    if ((unint64_t)v271 >= v364)
    {
      v271 = sub_20EE6740C((char **)&v362, (uint64_t *)(v269 + 24));
    }
    else
    {
      v273 = *v272;
      *(_QWORD *)v271 = *v272;
      if (v273)
      {
        v274 = (_QWORD *)operator new();
        v275 = *v272;
        *v274 = &off_24C9EE890;
        v274[1] = 0;
        v274[2] = 0;
        v274[3] = v275;
      }
      else
      {
        v274 = 0;
      }
      *((_QWORD *)v271 + 1) = v274;
      *v272 = 0;
      v271 += 16;
    }
    v363 = v271;
    while (1)
    {
      v269 += 40;
      if (v269 == v270)
        break;
      if (*(_BYTE *)v269 == 1)
      {
        if (v269 != v270)
          goto LABEL_472;
        break;
      }
    }
  }
LABEL_482:
  if (v363 == v362)
  {
    v277 = v345;
  }
  else
  {
    v276 = v363 - (_BYTE *)v362 - 16;
    v277 = v345;
    if (v276 >= 0x10)
    {
      v280 = 0;
      v281 = 0;
      v282 = (v276 >> 4) + 1;
      v279 = (char *)v362 + 16 * (v282 & 0x1FFFFFFFFFFFFFFELL);
      v283 = (uint64_t *)((char *)v362 + 16);
      v284 = v282 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v285 = *(v283 - 2);
        v286 = *v283;
        v283 += 4;
        v280 += *(_QWORD *)(**(_QWORD **)(v285 + 424) + 64);
        v281 += *(_QWORD *)(**(_QWORD **)(v286 + 424) + 64);
        v284 -= 2;
      }
      while (v284);
      v278 = v281 + v280;
      if (v282 == (v282 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_490;
    }
    else
    {
      v278 = 0;
      v279 = (char *)v362;
    }
    do
    {
      v287 = *(_QWORD *)v279;
      v279 += 16;
      v278 += *(_QWORD *)(**(_QWORD **)(v287 + 424) + 64);
    }
    while (v279 != v363);
  }
LABEL_490:
  kdebug_trace();
  v289 = v362;
  v288 = v363;
  if (v362 != v363)
  {
    v290 = v277;
    v291 = (void *)v364;
    v362 = 0;
    v363 = 0;
    v364 = 0;
    if (*((_BYTE *)v290 + 24))
    {
      v292 = (char *)*v290;
      if (*v290)
      {
        v293 = (char *)v290[1];
        if (v293 == v292)
        {
          v290 = v345;
        }
        else
        {
          do
          {
            v294 = (std::__shared_weak_count *)*((_QWORD *)v293 - 1);
            if (v294)
            {
              v295 = (unint64_t *)&v294->__shared_owners_;
              do
                v296 = __ldaxr(v295);
              while (__stlxr(v296 - 1, v295));
              if (!v296)
              {
                ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                std::__shared_weak_count::__release_weak(v294);
              }
            }
            v293 -= 16;
          }
          while (v293 != v292);
          v290 = v345;
          v292 = (char *)*v345;
        }
        operator delete(v292);
        *v290 = 0;
        v290[1] = 0;
        v290[2] = 0;
      }
      *v290 = v289;
      v290[1] = v288;
      v290[2] = v291;
    }
    else
    {
      *v290 = v289;
      v290[1] = v288;
      v290[2] = v291;
      *((_BYTE *)v290 + 24) = 1;
    }
    v277 = v290;
  }
  if (*v340)
  {
    operator delete(*v340);
    *v340 = 0;
    v340[1] = 0;
    v340[2] = 0;
  }
  *((_OWORD *)v277 + 2) = v365;
  v277[6] = v366;
  v366 = 0;
  v365 = 0uLL;
  v298 = *(_BYTE **)(v4 + 312);
  v297 = *(_BYTE **)(v4 + 320);
  if (v338)
  {
    v299 = &v298[24 * v338];
    v300 = v297 - v299;
    if (v297 != v299)
      memmove(*(void **)(v4 + 312), v299, v297 - v299);
    v301 = *(_BYTE **)(v4 + 312);
    v297 = &v298[v300];
    *(_QWORD *)(v4 + 320) = &v298[v300];
    v298 = v301;
  }
  if (v298 == v297)
  {
    sub_20EF6EC24(*(uint64_t ***)(v4 + 408));
    v328 = *(_QWORD *)(v4 + 336);
    LOBYTE(v372) = 0;
    BYTE4(v372) = 0;
    object.__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)&object.__r_.__value_.__r.__words[1] + 6) = 0;
    object.__r_.__value_.__l.__size_ = v328;
    v329.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v330 = (double)(v329.__d_.__rep_ - *(_QWORD *)(v4 + 392)) / 1000000000.0;
    *(std::chrono::steady_clock::time_point *)(v4 + 392) = v329;
    v331 = *(double *)(v4 + 400) + v330;
    *(double *)(v4 + 400) = v331;
    *(float *)&v331 = v331;
    LODWORD(object.__r_.__value_.__r.__words[2]) = LODWORD(v331);
    sub_20E896804(&v367);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v367 + 72))(v367, &object);
    v332 = v368;
    if (v368)
    {
      v333 = (unint64_t *)&v368->__shared_owners_;
      do
        v334 = __ldaxr(v333);
      while (__stlxr(v334 - 1, v333));
      if (!v334)
      {
        ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
        std::__shared_weak_count::__release_weak(v332);
      }
    }
  }
  v302 = (char *)v362;
  if (v362)
  {
    v303 = v363;
    if (v363 == v362)
    {
      v363 = (char *)v362;
      operator delete(v362);
      v277 = v345;
    }
    else
    {
      do
      {
        v304 = (std::__shared_weak_count *)*((_QWORD *)v303 - 1);
        if (v304)
        {
          v305 = (unint64_t *)&v304->__shared_owners_;
          do
            v306 = __ldaxr(v305);
          while (__stlxr(v306 - 1, v305));
          if (!v306)
          {
            ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
            std::__shared_weak_count::__release_weak(v304);
          }
        }
        v303 -= 16;
      }
      while (v303 != v302);
      v307 = (void *)v365;
      v363 = v302;
      operator delete(v362);
      v277 = v345;
      if (v307)
        operator delete(v307);
    }
  }
  if (v359[0])
    operator delete((void *)v359[0]);
  v308 = v351.tv_sec;
  if (v351.tv_sec)
  {
    v309 = v351.tv_nsec;
    v310 = (void *)v351.tv_sec;
    if (v351.tv_nsec != v351.tv_sec)
    {
      do
      {
        v311 = *(_QWORD *)(v309 - 16);
        *(_QWORD *)(v309 - 16) = 0;
        if (v311)
        {
          v312 = sub_20E9545B0(v311);
          MEMORY[0x212BC6398](v312, 0x10A0C401749CDD1);
        }
        v309 -= 40;
      }
      while (v309 != v308);
      v310 = (void *)v351.tv_sec;
    }
    v351.tv_nsec = v308;
    operator delete(v310);
  }
  v313 = *((unsigned __int8 *)v277 + 24);
  *((_BYTE *)v277 + 56) = v298 == v297;
  if (!v313 || *v277 == v277[1])
  {
    v213 = 0;
  }
  else
  {
    if (v350 >= 0)
      v314 = v349;
    else
      v314 = (void **)v349[0];
    object.__r_.__value_.__r.__words[0] = 0;
    v315 = strnlen((const char *)v314, 8uLL);
    memcpy(&object, v314, v315);
    v213 = 1;
    kdebug_trace();
  }
LABEL_541:
  if (v350 >= 0)
    v316 = v349;
  else
    v316 = (void **)v349[0];
  object.__r_.__value_.__r.__words[0] = 0;
  v317 = strnlen((const char *)v316, 8uLL);
  memcpy(&object, v316, v317);
  kdebug_trace();
  v318 = sub_210219C18();
  v319 = *(unsigned __int8 *)(*(_QWORD *)(v341 + 8) + 80);
  v320 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v320 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(object.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(object.__r_.__value_.__r.__words[0]) = v319;
    LOWORD(object.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&object.__r_.__value_.__r.__words[1] + 2) = v213;
    v322 = (char *)_os_log_send_and_compose_impl();
    v323 = strlen(v322);
    v351.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v351);
    v324 = v351.tv_sec;
    timespec_get(&v351, 1);
    sub_210219E20(&object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v318 + 1), (__int128 *)(v318 + 5), "MappingIOLocRecv:IL:%{BOOL}d, LD:%{BOOL}d", 0x29uLL, v322, v323, v324, &v351);
    std::mutex::lock(&stru_254A5A410);
    v325 = qword_254A5A458;
    for (j = unk_254A5A460; v325 != j; v325 += 40)
    {
      v327 = *(_QWORD *)(v325 + 32);
      if (!v327)
        sub_20E86D37C();
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v327 + 48))(v327, &object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v381 < 0)
    {
      operator delete((void *)v380);
      if ((SHIBYTE(v379) & 0x80000000) == 0)
      {
LABEL_551:
        if (!(_BYTE)v376)
        {
LABEL_557:
          if ((_BYTE)v374 && SHIBYTE(__p) < 0)
            operator delete(*((void **)&v372 + 1));
          if (SBYTE7(v372) < 0)
            operator delete((void *)object.__r_.__value_.__l.__size_);
          if (v322)
            free(v322);
          goto LABEL_564;
        }
LABEL_555:
        if (SHIBYTE(v375) < 0)
          operator delete(*((void **)&v374 + 1));
        goto LABEL_557;
      }
    }
    else if ((SHIBYTE(v379) & 0x80000000) == 0)
    {
      goto LABEL_551;
    }
    operator delete(v377);
    if (!(_BYTE)v376)
      goto LABEL_557;
    goto LABEL_555;
  }
LABEL_564:
  if (os_signpost_enabled((os_log_t)*v318))
  {
    LODWORD(object.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(object.__r_.__value_.__r.__words[0]) = v319;
    LOWORD(object.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&object.__r_.__value_.__r.__words[1] + 2) = v213;
    _os_signpost_emit_unreliably_with_name_impl();
    if (v350 < 0)
LABEL_566:
      operator delete(v349[0]);
  }
  else if (v350 < 0)
  {
    goto LABEL_566;
  }
}

void sub_20EF8CA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;

  __cxa_guard_abort(&qword_254A4A510);
  if (a46 < 0)
    operator delete(__p);
  sub_20E863570((uint64_t)&a31);
  v47 = (std::__shared_weak_count *)a39;
  if (a39)
  {
    v48 = (unint64_t *)(a39 + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EF8D1E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio10mapping_io18MappingIOInterface15ReceiveLocationERKNSt3__110shared_ptrIKNS1_15MapLocationInfoEEEbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio10mapping_io18MappingIOInterface15ReceiveLocationERKNSt3__110shared_ptrIKNS1_"
                                "15MapLocationInfoEEEbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio10mapping_io18MappingIOInterface15ReceiveLocationERKNSt3__110shared_ptrIKNS1_15MapLocationInfoEEEbE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io18MappingIOInterface15ReceiveLocationERKNSt3__110shared_ptrIKNS1_15MapLocationInfoEEEbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF8D254()
{
  return &unk_24C9F21A0;
}

char **sub_20EF8D260(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)a1 + 24))
  {
    v3 = *a1;
    if (*a1)
    {
      v4 = a1[1];
      v5 = *a1;
      if (v4 != v3)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = *a1;
      }
      a1[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_20EF8D310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  uint64_t *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  if (*(_BYTE *)(a3 + 8))
  {
    std::to_string(&v6, *(_QWORD *)a3);
    v8 = a2;
    v9 = &v6;
    v10 = a2;
    v11 = &v6;
    v12 = &v6;
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v7 = &v8;
    ((void (*)(uint64_t **, uint64_t))off_24C9F2188[v4])(&v7, a2);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = a2;
    v9 = (std::string *)"nullopt";
    v10 = a2;
    v11 = (std::string *)"nullopt";
    v12 = (std::string *)"nullopt";
    v5 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v5 == -1)
      sub_20E877AB8();
    v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *, uint64_t))off_24C9F20D8[v5])(&v6, a2);
  }
}

void sub_20EF8D400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20EF8D41C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315138;
    v18[0] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "TryCatchWithStats:MSG:%s", 0x18uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315138;
    v18[0] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF8D6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF8D728(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315138;
    v18[0] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "TryCatchWithStats:MSG:%s", 0x18uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315138;
    v18[0] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF8D9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF8DA34(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315138;
    v18[0] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "TryCatchWithStats:MSG:%s", 0x18uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315138;
    v18[0] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF8DD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF8DD40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  int v6;
  int v7;
  uint64_t *v8;
  unsigned __int8 v9;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  std::__fs::filesystem::path *v17;
  std::__fs::filesystem::path *j;
  void *v19;
  std::__fs::filesystem::path *v20;
  void *v21[2];
  char v22;
  __uint64_t v23[2];
  _BYTE __p[18];
  __int16 v25;
  int v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  void *v31;
  char v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  sub_20EF707E8(a1 + 8, *(_QWORD *)(a1 + 440), (uint64_t)v21);
  sub_210224314((uint64_t)v21, 2u, "*", 1uLL, *(_QWORD *)(a1 + 440), (uint64_t *)__p);
  sub_20EF83A74((uint64_t)&v19, (__int128 **)__p);
  v2 = *(_QWORD *)__p;
  if (*(_QWORD *)__p)
  {
    v3 = *(_QWORD *)&__p[8];
    v4 = *(void **)__p;
    if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *(void **)__p;
    }
    *(_QWORD *)&__p[8] = v2;
    operator delete(v4);
  }
  v5 = sub_20EF84054((std::__fs::filesystem::path *)v19, v20, *(_QWORD *)(a1 + 440));
  v7 = v6;
  v8 = sub_210219C18();
  v9 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = "TOT";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v5;
    v25 = 1024;
    v26 = v7;
    v11 = (char *)_os_log_send_and_compose_impl();
    v12 = strlen(v11);
    v23[0] = 0;
    pthread_threadid_np(0, v23);
    v13 = v23[0];
    timespec_get((timespec *)v23, 1);
    sub_210219E20(__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v8 + 1), (__int128 *)(v8 + 5), "MappingIOAnalytics:TYPE:%s, NF:%u, TS:%u", 0x28uLL, v11, v12, v13, v23);
    std::mutex::lock(&stru_254A5A410);
    v14 = qword_254A5A458;
    for (i = unk_254A5A460; v14 != i; v14 += 40)
    {
      v16 = *(_QWORD *)(v14 + 32);
      if (!v16)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 48))(v16, __p);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v37 < 0)
    {
      operator delete(v36);
      if ((v35 & 0x80000000) == 0)
      {
LABEL_16:
        if (!v33)
        {
LABEL_22:
          if (v30 && v29 < 0)
            operator delete(v28);
          if (v27 < 0)
            operator delete(*(void **)&__p[8]);
          if (v11)
            free(v11);
          goto LABEL_29;
        }
LABEL_20:
        if (v32 < 0)
          operator delete(v31);
        goto LABEL_22;
      }
    }
    else if ((v35 & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(v34);
    if (!v33)
      goto LABEL_22;
    goto LABEL_20;
  }
LABEL_29:
  if (os_signpost_enabled((os_log_t)*v8))
  {
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = "TOT";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v5;
    v25 = 1024;
    v26 = v7;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v17 = (std::__fs::filesystem::path *)v19;
  if (v19)
  {
    for (j = v20; j != v17; --j)
    {
      if (SHIBYTE(j[-1].__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(j[-1].__pn_.__r_.__value_.__l.__data_);
    }
    operator delete(v17);
  }
  if (v22 < 0)
    operator delete(v21[0]);
}

void sub_20EF8E114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  uint64_t *v26;

  if (a2)
  {
    sub_20E96E218((uint64_t)&a24);
    if (v24)
      free(v24);
    sub_20E8F74DC(&a13);
    if (a21 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    v26 = sub_210219C18();
    sub_20EF8E504((uint64_t)v26, 0xEEEEB0B5B2B2EEEELL);
    __cxa_end_catch();
    JUMPOUT(0x20EF8E094);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EF8E1F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315138;
    v18[0] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "TryCatchWithStats:MSG:%s", 0x18uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315138;
    v18[0] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF8E4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF8E504(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  __uint64_t v12[2];
  int v13;
  _QWORD v14[3];
  char v15;
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v13 = 136315138;
    v14[0] = "ANALYTICS_FAIL";
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v12[0] = 0;
    pthread_threadid_np(0, v12);
    v8 = v12[0];
    timespec_get((timespec *)v12, 1);
    sub_210219E20(&v13, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "MappingIOAnalytics:TYPE:%s", 0x1AuLL, v6, v7, v8, v12);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v11 + 48))(v11, &v13);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v25 < 0)
    {
      operator delete(__p);
      if ((v23 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v21)
        {
LABEL_14:
          if (v18 && v17 < 0)
            operator delete(v16);
          if (v15 < 0)
            operator delete(*(void **)((char *)v14 + 4));
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v20 < 0)
          operator delete(v19);
        goto LABEL_14;
      }
    }
    else if ((v23 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v22);
    if (!v21)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v13 = 136315138;
    v14[0] = "ANALYTICS_FAIL";
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF8E7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EF8E80C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C9F21C0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EF8E880(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C9F21C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EF8E8F4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F21C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EF8E94C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F21C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EF8E984(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20EF8E9DC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_20EF8EA44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  int v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  __darwin_time_t tv_sec;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t j;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 *v33;
  __int128 *v34;
  void **v35;
  void **v36;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 *v44;
  __int128 *v45;
  void **v46;
  void **v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  int64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  unsigned __int8 v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  size_t v61;
  __darwin_time_t v62;
  uint64_t v63;
  uint64_t m;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t *v76;
  int64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v118;
  _BOOL4 v119;
  unint64_t v120;
  unint64_t v121;
  void *k;
  char *v123;
  char *v124;
  _QWORD *v125;
  void *v126;
  char *v127;
  char *v128;
  timespec v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  timespec v133;
  _BYTE v134[24];
  _BYTE v135[48];
  __int128 v136;
  uint64_t v137;
  void *v138;
  void **v139;
  uint64_t v140;
  __int128 __p;
  char v142;
  uint64_t v143;

  v2 = a1;
  v143 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v3 + 304))
  {
    sub_20EF785E4(*(_QWORD *)(a1 + 24));
    *(_BYTE *)(v3 + 304) = 1;
    v4 = *(_QWORD *)(v2 + 8);
    if (v4)
      goto LABEL_3;
LABEL_5:
    v5 = 0;
    v119 = 0;
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_5;
LABEL_3:
  v5 = *(unsigned __int8 *)(v4 + 96);
  v119 = *(unsigned __int8 *)(v4 + 128) != 0;
LABEL_6:
  v6 = v5;
  kdebug_trace();
  v7 = sub_210219C18();
  v8 = *(_DWORD *)(v3 + 208);
  v9 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v10 = atomic_load(&qword_254A5A450);
  v118 = (_QWORD *)v3;
  if (v10)
  {
    v11 = v2;
    *(_DWORD *)v134 = 67109632;
    *(_DWORD *)&v134[4] = v6;
    *(_WORD *)&v134[8] = 1024;
    *(_DWORD *)&v134[10] = v119;
    *(_WORD *)&v134[14] = 1024;
    *(_DWORD *)&v134[16] = v8;
    v12 = (char *)_os_log_send_and_compose_impl();
    v13 = strlen(v12);
    v129.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v129);
    tv_sec = v129.tv_sec;
    timespec_get(&v129, 1);
    sub_210219E20(v134, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v7 + 1), (__int128 *)(v7 + 5), "MappingIOSaveReq:SR:%{BOOL}d, SI:%{BOOL}d, RC:%u", 0x30uLL, v12, v13, tv_sec, &v129);
    std::mutex::lock(&stru_254A5A410);
    v15 = qword_254A5A458;
    for (i = unk_254A5A460; v15 != i; v15 += 40)
    {
      v17 = *(_QWORD *)(v15 + 32);
      if (!v17)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v17 + 48))(v17, v134);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v142 < 0)
    {
      operator delete((void *)__p);
      v3 = (uint64_t)v118;
      v2 = v11;
      if ((SHIBYTE(v140) & 0x80000000) == 0)
      {
LABEL_13:
        if (!(_BYTE)v137)
        {
LABEL_19:
          if (v135[32] && (v135[31] & 0x80000000) != 0)
            operator delete(*(void **)&v135[8]);
          if ((v135[7] & 0x80000000) != 0)
            operator delete(*(void **)&v134[8]);
          if (v12)
            free(v12);
          goto LABEL_26;
        }
LABEL_17:
        if (SHIBYTE(v136) < 0)
          operator delete(*(void **)&v135[40]);
        goto LABEL_19;
      }
    }
    else
    {
      v3 = (uint64_t)v118;
      v2 = v11;
      if ((SHIBYTE(v140) & 0x80000000) == 0)
        goto LABEL_13;
    }
    operator delete(v138);
    if (!(_BYTE)v137)
      goto LABEL_19;
    goto LABEL_17;
  }
LABEL_26:
  if (os_signpost_enabled((os_log_t)*v7))
  {
    *(_DWORD *)v134 = 67109632;
    *(_DWORD *)&v134[4] = v6;
    *(_WORD *)&v134[8] = 1024;
    *(_DWORD *)&v134[10] = v119;
    *(_WORD *)&v134[14] = 1024;
    *(_DWORD *)&v134[16] = v8;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v18 = *(_QWORD *)(v3 + 152);
  v19 = *(_QWORD *)(v3 + 440);
  if (!*(_BYTE *)(v3 + 304)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 836, (uint64_t)"has_loaded_toc_ && \"Submap metadata has not been loaded.\"", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v20 = *(_QWORD **)(v3 + 280);
  v21 = *(_QWORD *)(v3 + 248) + *(_QWORD *)(v3 + 288);
  for (j = 0; v20; v20 = (_QWORD *)*v20)
    j += v20[17];
  v23 = *(_QWORD **)(v3 + 240);
  if (v23)
  {
    v24 = 0;
    do
    {
      v24 += v23[17];
      v23 = (_QWORD *)*v23;
    }
    while (v23);
  }
  else
  {
    v24 = 0;
  }
  v25 = v24 + j;
  v129.tv_sec = *(_QWORD *)(v3 + 248) + *(_QWORD *)(v3 + 288);
  v129.tv_nsec = v24 + j;
  v130 = v18;
  v131 = 0;
  v132 = 733223460;
  kdebug_trace();
  if (v25 > v18)
  {
    v126 = 0;
    v127 = 0;
    v128 = 0;
    if (v21)
    {
      if (v21 >> 61)
        sub_20E92CED8();
      v126 = operator new(8 * v21);
      v127 = (char *)v126;
      v128 = (char *)v126 + 8 * v21;
    }
    v120 = v21;
    v121 = v18;
    v116 = v19;
    v115 = v2;
    v26 = *(uint64_t **)(v3 + 280);
    for (k = &v126; v26; v26 = (uint64_t *)*v26)
    {
      v28 = v26[2];
      v29 = *(_OWORD *)(v26 + 3);
      v30 = *(_OWORD *)(v26 + 5);
      v31 = *(_OWORD *)(v26 + 7);
      v32 = *(_OWORD *)(v26 + 11);
      *(_OWORD *)&v135[32] = *(_OWORD *)(v26 + 9);
      v136 = v32;
      *(_QWORD *)v134 = v28;
      v137 = v26[13];
      *(_OWORD *)v135 = v30;
      *(_OWORD *)&v135[16] = v31;
      *(_OWORD *)&v134[8] = v29;
      v139 = 0;
      v140 = 0;
      v33 = (__int128 *)v26[14];
      v34 = (__int128 *)v26[15];
      v138 = 0;
      sub_20E8ADB20((char *)&v138, v33, v34, 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3));
      __p = *(_OWORD *)(v26 + 17);
      v133.tv_sec = *(_QWORD *)v134;
      sub_20E9B2D04((uint64_t *)&k, &v133);
      v35 = (void **)v138;
      if (v138)
      {
        v36 = v139;
        v27 = v138;
        if (v139 != v138)
        {
          do
          {
            if (*((char *)v36 - 1) < 0)
              operator delete(*(v36 - 3));
            v36 -= 3;
          }
          while (v36 != v35);
          v27 = v138;
        }
        v139 = v35;
        operator delete(v27);
        v18 = v121;
      }
    }
    v37 = (uint64_t *)v118[30];
    for (k = &v126; v37; v18 = v121)
    {
      v39 = v37[2];
      v40 = *(_OWORD *)(v37 + 3);
      v41 = *(_OWORD *)(v37 + 5);
      v42 = *(_OWORD *)(v37 + 7);
      v43 = *(_OWORD *)(v37 + 11);
      *(_OWORD *)&v135[32] = *(_OWORD *)(v37 + 9);
      v136 = v43;
      *(_QWORD *)v134 = v39;
      v137 = v37[13];
      *(_OWORD *)v135 = v41;
      *(_OWORD *)&v135[16] = v42;
      *(_OWORD *)&v134[8] = v40;
      v139 = 0;
      v140 = 0;
      v44 = (__int128 *)v37[14];
      v45 = (__int128 *)v37[15];
      v138 = 0;
      sub_20E8ADB20((char *)&v138, v44, v45, 0xAAAAAAAAAAAAAAABLL * (((char *)v45 - (char *)v44) >> 3));
      __p = *(_OWORD *)(v37 + 17);
      v133.tv_sec = *(_QWORD *)v134;
      sub_20E9B2D04((uint64_t *)&k, &v133);
      v46 = (void **)v138;
      if (v138)
      {
        v47 = v139;
        v38 = v138;
        if (v139 != v138)
        {
          do
          {
            if (*((char *)v47 - 1) < 0)
              operator delete(*(v47 - 3));
            v47 -= 3;
          }
          while (v47 != v46);
          v38 = v138;
        }
        v139 = v46;
        operator delete(v38);
      }
      v37 = (uint64_t *)*v37;
    }
    v48 = 126 - 2 * __clz((v127 - (_BYTE *)v126) >> 3);
    v125 = v118;
    *(_QWORD *)v134 = &v125;
    if (v127 == v126)
      v49 = 0;
    else
      v49 = v48;
    sub_20EF86298((unint64_t)v126, (unint64_t *)v127, (_QWORD ***)v134, v49, 1);
    v50 = (unint64_t *)v127;
    v123 = 0;
    v124 = 0;
    k = 0;
    v51 = v127 - (_BYTE *)v126;
    if (v127 != v126)
    {
      if (v51 < 0)
        sub_20E92CED8();
      k = operator new(v127 - (_BYTE *)v126);
      v123 = (char *)k;
      v124 = (char *)k + 8 * (v51 >> 3);
    }
    while (1)
    {
      v53 = *(v50 - 1);
      v54 = sub_20EF838CC(v125, v53);
      v55 = sub_210219C18();
      v56 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_92;
      v58 = v54[12];
      v59 = v54[17];
      *(_DWORD *)v134 = 134219264;
      *(_QWORD *)&v134[4] = v53;
      *(_WORD *)&v134[12] = 2048;
      *(_QWORD *)&v134[14] = v58;
      *(_WORD *)&v134[22] = 2048;
      *(_QWORD *)v135 = v120;
      *(_WORD *)&v135[8] = 2048;
      *(_QWORD *)&v135[10] = v59;
      *(_WORD *)&v135[18] = 2048;
      *(_QWORD *)&v135[20] = v25;
      *(_WORD *)&v135[28] = 2048;
      *(_QWORD *)&v135[30] = v18;
      v60 = (char *)_os_log_send_and_compose_impl();
      v61 = strlen(v60);
      v133.tv_sec = 0;
      pthread_threadid_np(0, (__uint64_t *)&v133);
      v62 = v133.tv_sec;
      timespec_get(&v133, 1);
      sub_210219E20(v134, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v55 + 1), (__int128 *)(v55 + 5), "MappingIOCleanDisk:ID:%llu, TIME:%llu, NM:%lu, SODM:%lu, TODM:%lu, LIMIT:%lu", 0x4CuLL, v60, v61, v62, &v133);
      std::mutex::lock(&stru_254A5A410);
      v63 = qword_254A5A458;
      for (m = unk_254A5A460; v63 != m; v63 += 40)
      {
        v65 = *(_QWORD *)(v63 + 32);
        if (!v65)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v65 + 48))(v65, v134);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v142 < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v140) & 0x80000000) == 0)
        {
LABEL_80:
          if ((_BYTE)v137)
            goto LABEL_84;
          goto LABEL_86;
        }
      }
      else if ((SHIBYTE(v140) & 0x80000000) == 0)
      {
        goto LABEL_80;
      }
      operator delete(v138);
      if ((_BYTE)v137)
      {
LABEL_84:
        if (SHIBYTE(v136) < 0)
          operator delete(*(void **)&v135[40]);
      }
LABEL_86:
      if (v135[32] && (v135[31] & 0x80000000) != 0)
        operator delete(*(void **)&v135[8]);
      if ((v135[7] & 0x80000000) == 0)
      {
        if (!v60)
          goto LABEL_92;
LABEL_91:
        free(v60);
        goto LABEL_92;
      }
      operator delete(*(void **)&v134[8]);
      if (v60)
        goto LABEL_91;
LABEL_92:
      if (os_signpost_enabled((os_log_t)*v55))
      {
        v66 = v54[12];
        v67 = v54[17];
        *(_DWORD *)v134 = 134219264;
        *(_QWORD *)&v134[4] = v53;
        *(_WORD *)&v134[12] = 2048;
        *(_QWORD *)&v134[14] = v66;
        *(_WORD *)&v134[22] = 2048;
        *(_QWORD *)v135 = v120;
        *(_WORD *)&v135[8] = 2048;
        *(_QWORD *)&v135[10] = v67;
        *(_WORD *)&v135[18] = 2048;
        *(_QWORD *)&v135[20] = v25;
        *(_WORD *)&v135[28] = 2048;
        *(_QWORD *)&v135[30] = v18;
        _os_signpost_emit_unreliably_with_name_impl();
      }
      v68 = v123;
      if (v123 >= v124)
      {
        v69 = (char *)k;
        v70 = v123 - (_BYTE *)k;
        v71 = (v123 - (_BYTE *)k) >> 3;
        v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 61)
          sub_20E92CED8();
        v73 = v124 - (_BYTE *)k;
        if ((v124 - (_BYTE *)k) >> 2 > v72)
          v72 = v73 >> 2;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v72;
        if (v74)
        {
          if (v74 >> 61)
            sub_20E877A38();
          v75 = (char *)operator new(8 * v74);
          v76 = (unint64_t *)&v75[8 * v71];
          *v76 = v53;
          v52 = (uint64_t)(v76 + 1);
          v77 = v68 - v69;
          if (v68 != v69)
          {
LABEL_104:
            v78 = v77 - 8;
            if (v78 < 0x58)
            {
              v18 = v121;
              goto LABEL_114;
            }
            v79 = v68 - v75 - v70;
            v18 = v121;
            if (v79 < 0x20)
              goto LABEL_180;
            v80 = (v78 >> 3) + 1;
            v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
            v82 = &v68[-v81];
            v76 = (unint64_t *)((char *)v76 - v81);
            v83 = &v75[8 * v71 - 16];
            v84 = v68 - 16;
            v85 = v80 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v86 = *(_OWORD *)v84;
              *((_OWORD *)v83 - 1) = *((_OWORD *)v84 - 1);
              *(_OWORD *)v83 = v86;
              v83 -= 32;
              v84 -= 32;
              v85 -= 4;
            }
            while (v85);
            v68 = v82;
            if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_180:
              do
              {
LABEL_114:
                v87 = *((_QWORD *)v68 - 1);
                v68 -= 8;
                *--v76 = v87;
              }
              while (v68 != v69);
            }
LABEL_115:
            k = v76;
            v123 = (char *)v52;
            v124 = &v75[8 * v74];
            if (v69)
              operator delete(v69);
            goto LABEL_72;
          }
        }
        else
        {
          v75 = 0;
          v76 = (unint64_t *)(8 * v71);
          *(_QWORD *)(8 * v71) = v53;
          v52 = 8 * v71 + 8;
          v77 = v68 - v69;
          if (v68 != v69)
            goto LABEL_104;
        }
        v18 = v121;
        goto LABEL_115;
      }
      *(_QWORD *)v123 = v53;
      v52 = (uint64_t)(v68 + 8);
LABEL_72:
      v123 = (char *)v52;
      v50 = (unint64_t *)(v127 - 8);
      v127 -= 8;
      v25 -= v54[17];
      if (v25 <= v18)
      {
        v3 = (uint64_t)v118;
        sub_20EF7D4B0(v134, (uint64_t)v118, (unint64_t **)&k, v116);
        v2 = v115;
        if (*(_QWORD *)v134)
          operator delete(*(void **)v134);
        if (k)
        {
          v123 = (char *)k;
          operator delete(k);
        }
        if (v126)
        {
          v127 = (char *)v126;
          operator delete(v126);
        }
        break;
      }
    }
  }
  kdebug_trace();
  v88 = *(_QWORD *)(v2 + 8);
  if (!v88)
  {
    v93 = (unsigned __int8 *)(v3 + 216);
    ++*(_BYTE *)(v3 + 216);
LABEL_134:
    sub_20EF8FCA0(a2, v6, v3, 0);
    if (v119 || *v93 >= 3u)
    {
      while (sub_20EF79F80(v3))
        ;
    }
    return kdebug_trace();
  }
  v90 = *(_QWORD *)(v88 + 104);
  v91 = *(_QWORD *)(v88 + 112);
  v89 = (unint64_t **)(v88 + 104);
  if (v90 != v91)
  {
    sub_20EF7D4B0(v134, v3, v89, *(_QWORD *)(v3 + 440));
    if (*(_QWORD *)v134)
      operator delete(*(void **)v134);
  }
  v92 = *(_QWORD *)(v2 + 8);
  v93 = (unsigned __int8 *)(v3 + 216);
  ++*(_BYTE *)(v3 + 216);
  if (!v92)
    goto LABEL_134;
  v94 = *(_QWORD *)(v92 + 24);
  if (v94 == *(_QWORD *)(v92 + 32))
    goto LABEL_134;
  if (*(_BYTE *)(v3 + 448))
  {
    sub_20EF8FCA0(a2, v6, v3, 0);
    return kdebug_trace();
  }
  if (*(_QWORD *)(v3 + 384) == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 352) - *(_QWORD *)(v3 + 344)) >> 3))
  {
    sub_20EF79F80(v3);
    v92 = *(_QWORD *)(v2 + 8);
    v94 = *(_QWORD *)(v92 + 24);
  }
  v96 = *(_QWORD *)(v94 + 240);
  v97 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v97)
  {
    v105 = (uint64_t *)(*(_QWORD *)(v3 + 344) + 24 * *(_QWORD *)(v3 + 376));
    *v105 = v96;
    v104 = (std::__shared_weak_count *)v105[2];
    v105[1] = v92;
    v105[2] = 0;
    if (!v104)
      goto LABEL_152;
LABEL_148:
    p_shared_owners = (unint64_t *)&v104->__shared_owners_;
    do
      v107 = __ldaxr(p_shared_owners);
    while (__stlxr(v107 - 1, p_shared_owners));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
    goto LABEL_152;
  }
  v98 = (unint64_t *)&v97->__shared_owners_;
  do
    v99 = __ldxr(v98);
  while (__stxr(v99 + 1, v98));
  v100 = *(_QWORD *)(v3 + 344);
  v101 = *(_QWORD *)(v3 + 376);
  do
    v102 = __ldxr(v98);
  while (__stxr(v102 + 1, v98));
  *(_QWORD *)(v100 + 24 * v101) = v96;
  v103 = v100 + 24 * v101;
  v104 = *(std::__shared_weak_count **)(v103 + 16);
  *(_QWORD *)(v103 + 8) = v92;
  *(_QWORD *)(v103 + 16) = v97;
  if (v104)
    goto LABEL_148;
LABEL_152:
  v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 352) - *(_QWORD *)(v3 + 344)) >> 3);
  v109 = *(_QWORD *)(v3 + 384);
  v110 = *(_QWORD *)(v3 + 376) + 1;
  if (v110 >= v108)
    v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 352) - *(_QWORD *)(v3 + 344)) >> 3);
  else
    v111 = 0;
  *(_QWORD *)(v3 + 376) = v110 - v111;
  if (v109 == v108)
  {
    v112 = *(_QWORD *)(v3 + 368) + 1;
    if (v112 < v108)
      v108 = 0;
    *(_QWORD *)(v3 + 368) = v112 - v108;
  }
  else
  {
    *(_QWORD *)(v3 + 384) = v109 + 1;
  }
  if (v97)
  {
    v113 = (unint64_t *)&v97->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  sub_20EF8FCA0(a2, v6, v3, v96);
  if (v119 || *v93 >= 3u)
  {
    while (sub_20EF79F80(v3))
      ;
  }
  return kdebug_trace();
}

void sub_20EF8F8CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20EF8FBC8()
{
  JUMPOUT(0x20EF8FBECLL);
}

void sub_20EF8FBD0()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20EF8FBE4);
}

uint64_t sub_20EF8FC28(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio10mapping_io18MappingIOInterface17ReceiveSaveBundleERKNSt3__110shared_ptrIKNS1_16SubmapS"
                     "aveBundleEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio10mapping_io18MappingIOInterface17ReceiveSaveBundleERKNSt3__110shared_ptrIKNS"
                                "1_16SubmapSaveBundleEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio10mapping_io18MappingIOInterface17ReceiveSaveBundleERKNSt3__110shared_ptrIKNS1_16SubmapSaveBundleEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io18MappingIOInterface17ReceiveSaveBundleERKNSt3__110shared_ptrIKNS1_16SubmapSaveBundleEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF8FC94()
{
  return &unk_24C9F2280;
}

void sub_20EF8FCA0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  _QWORD *v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  std::__shared_weak_count *v40;
  void *v41[2];
  __int128 v42;
  void *__p;
  void *v44;

  if (!a2)
  {
    v38 = *(_QWORD *)(a3 + 208);
    *(_QWORD *)a1 = a4;
    *(_QWORD *)(a1 + 8) = v38;
    *(_BYTE *)(a1 + 16) = 1;
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 88) = 0;
    return;
  }
  *(_OWORD *)v41 = 0u;
  v42 = 0u;
  LODWORD(__p) = 733223388;
  kdebug_trace();
  while (sub_20EF79F80(a3))
    ;
  v6 = *(std::__shared_weak_count **)(a3 + 200);
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)(a3 + 200) = 0;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  ++*(_QWORD *)(a3 + 208);
  *(_BYTE *)(a3 + 216) = 0;
  if (*(_QWORD *)(a3 + 288))
  {
    v9 = *(_QWORD **)(a3 + 280);
    if (v9)
    {
      do
      {
        v31 = (_QWORD *)*v9;
        v32 = v9[14];
        if (v32)
        {
          v33 = v9[15];
          v30 = (void *)v9[14];
          if (v33 != v32)
          {
            do
            {
              if (*(char *)(v33 - 1) < 0)
                operator delete(*(void **)(v33 - 24));
              v33 -= 24;
            }
            while (v33 != v32);
            v30 = (void *)v9[14];
          }
          v9[15] = v32;
          operator delete(v30);
        }
        operator delete(v9);
        v9 = v31;
      }
      while (v31);
    }
    *(_QWORD *)(a3 + 280) = 0;
    v10 = *(_QWORD *)(a3 + 272);
    if (v10)
    {
      for (i = 0; i != v10; ++i)
        *(_QWORD *)(*(_QWORD *)(a3 + 264) + 8 * i) = 0;
    }
    *(_QWORD *)(a3 + 288) = 0;
  }
  if (*(_QWORD *)(a3 + 248))
  {
    v12 = *(_QWORD **)(a3 + 240);
    if (v12)
    {
      do
      {
        v35 = (_QWORD *)*v12;
        v36 = v12[14];
        if (v36)
        {
          v37 = v12[15];
          v34 = (void *)v12[14];
          if (v37 != v36)
          {
            do
            {
              if (*(char *)(v37 - 1) < 0)
                operator delete(*(void **)(v37 - 24));
              v37 -= 24;
            }
            while (v37 != v36);
            v34 = (void *)v12[14];
          }
          v12[15] = v36;
          operator delete(v34);
        }
        operator delete(v12);
        v12 = v35;
      }
      while (v35);
    }
    *(_QWORD *)(a3 + 240) = 0;
    v13 = *(_QWORD *)(a3 + 232);
    if (v13)
    {
      for (j = 0; j != v13; ++j)
        *(_QWORD *)(*(_QWORD *)(a3 + 224) + 8 * j) = 0;
    }
    *(_QWORD *)(a3 + 248) = 0;
  }
  *(_QWORD *)(a3 + 320) = *(_QWORD *)(a3 + 312);
  *(_QWORD *)(a3 + 336) = 0;
  if (*(_QWORD *)(a3 + 384)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MappingIO/src/MappingIOInterface.cpp", 356, (uint64_t)"holding_queue_.empty()", 22, (uint64_t)"Attempted to reinitialize mapping with submaps in the queue.", 60, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20EF785E4(a3);
  *(_BYTE *)(a3 + 304) = 1;
  v15 = *(_QWORD *)(a3 + 408);
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 16) + 16))(*(_QWORD *)(v15 + 16));
  if (*(_BYTE *)(v15 + 48))
  {
    *(_BYTE *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 32) = v16;
    if (!*(_BYTE *)(v15 + 72))
      goto LABEL_26;
    goto LABEL_25;
  }
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v17;
  *(_BYTE *)(v15 + 48) = 1;
  if (*(_BYTE *)(v15 + 72))
LABEL_25:
    *(_BYTE *)(v15 + 72) = 0;
LABEL_26:
  *(std::chrono::steady_clock::time_point *)(a3 + 392) = std::chrono::steady_clock::now();
  *(_QWORD *)(a3 + 400) = 0;
  kdebug_trace();
  v18 = *(_QWORD *)(a3 + 208);
  v19 = operator new(0x70uLL);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = &off_24C9F2240;
  *((_BYTE *)v19 + 32) = 0;
  v19[5] = v18;
  *((_BYTE *)v19 + 48) = 0;
  *((_BYTE *)v19 + 104) = 0;
  v40 = (std::__shared_weak_count *)v19;
  *((_BYTE *)v19 + 24) = 0;
  v39 = (char *)(v19 + 3);
  (*(void (**)(void **__return_ptr, uint64_t, char **, _QWORD))(*(_QWORD *)a3 + 16))(v41, a3, &v39, 0);
  v20 = v40;
  if (v40)
  {
    v21 = (unint64_t *)&v40->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(_QWORD *)(a3 + 208);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 16) = 1;
  sub_20EF90154(a1 + 24, (uint64_t)v41);
  *(_BYTE *)(a1 + 88) = 1;
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  if (BYTE8(v42))
  {
    v24 = (char *)v41[0];
    if (v41[0])
    {
      v25 = (char *)v41[1];
      v26 = v41[0];
      if (v41[1] != v41[0])
      {
        do
        {
          v27 = (std::__shared_weak_count *)*((_QWORD *)v25 - 1);
          if (v27)
          {
            v28 = (unint64_t *)&v27->__shared_owners_;
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          v25 -= 16;
        }
        while (v25 != v24);
        v26 = v41[0];
      }
      v41[1] = v24;
      operator delete(v26);
    }
  }
}

void sub_20EF900B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20EF8D260((char **)va);
  _Unwind_Resume(a1);
}

void sub_20EF900C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EF900E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF900F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8E69C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF9010C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F2240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EF9011C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F2240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EF90154(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    sub_20ECA8424((_QWORD *)a1, a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = *(_BYTE **)(a2 + 32);
  v4 = *(_BYTE **)(a2 + 40);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      sub_20E92CED8();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 48) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 40) = v8;
  }
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

void sub_20EF90204(_Unwind_Exception *exception_object)
{
  char **v1;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*((_BYTE *)v1 + 24))
  {
    v3 = *v1;
    if (*v1)
    {
      v4 = v1[1];
      v5 = *v1;
      if (v4 != v3)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = *v1;
      }
      v1[1] = v3;
      operator delete(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20EF90288(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  sub_20EC06BE0((char **)v1);
  _Unwind_Resume(a1);
}

void sub_20EF902AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315138;
    v18[0] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "TryCatchWithStats:MSG:%s", 0x18uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315138;
    v18[0] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF90578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF905B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315138;
    v18[0] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "TryCatchWithStats:MSG:%s", 0x18uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315138;
    v18[0] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF90884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF908C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315138;
    v18[0] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "TryCatchWithStats:MSG:%s", 0x18uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315138;
    v18[0] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF90B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF90BD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  int v6;
  int v7;
  uint64_t *v8;
  unsigned __int8 v9;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  std::__fs::filesystem::path *v17;
  std::__fs::filesystem::path *j;
  void *v19;
  std::__fs::filesystem::path *v20;
  void *v21[2];
  char v22;
  __uint64_t v23[2];
  _BYTE __p[18];
  __int16 v25;
  int v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  void *v31;
  char v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  sub_20EF707E8(a1 + 8, *(_QWORD *)(a1 + 440), (uint64_t)v21);
  sub_210224314((uint64_t)v21, 2u, "*", 1uLL, *(_QWORD *)(a1 + 440), (uint64_t *)__p);
  sub_20EF83A74((uint64_t)&v19, (__int128 **)__p);
  v2 = *(_QWORD *)__p;
  if (*(_QWORD *)__p)
  {
    v3 = *(_QWORD *)&__p[8];
    v4 = *(void **)__p;
    if (*(_QWORD *)&__p[8] != *(_QWORD *)__p)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *(void **)__p;
    }
    *(_QWORD *)&__p[8] = v2;
    operator delete(v4);
  }
  v5 = sub_20EF84054((std::__fs::filesystem::path *)v19, v20, *(_QWORD *)(a1 + 440));
  v7 = v6;
  v8 = sub_210219C18();
  v9 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = "TOT";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v5;
    v25 = 1024;
    v26 = v7;
    v11 = (char *)_os_log_send_and_compose_impl();
    v12 = strlen(v11);
    v23[0] = 0;
    pthread_threadid_np(0, v23);
    v13 = v23[0];
    timespec_get((timespec *)v23, 1);
    sub_210219E20(__p, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v8 + 1), (__int128 *)(v8 + 5), "MappingIOAnalytics:TYPE:%s, NF:%u, TS:%u", 0x28uLL, v11, v12, v13, v23);
    std::mutex::lock(&stru_254A5A410);
    v14 = qword_254A5A458;
    for (i = unk_254A5A460; v14 != i; v14 += 40)
    {
      v16 = *(_QWORD *)(v14 + 32);
      if (!v16)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 48))(v16, __p);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v37 < 0)
    {
      operator delete(v36);
      if ((v35 & 0x80000000) == 0)
      {
LABEL_16:
        if (!v33)
        {
LABEL_22:
          if (v30 && v29 < 0)
            operator delete(v28);
          if (v27 < 0)
            operator delete(*(void **)&__p[8]);
          if (v11)
            free(v11);
          goto LABEL_29;
        }
LABEL_20:
        if (v32 < 0)
          operator delete(v31);
        goto LABEL_22;
      }
    }
    else if ((v35 & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(v34);
    if (!v33)
      goto LABEL_22;
    goto LABEL_20;
  }
LABEL_29:
  if (os_signpost_enabled((os_log_t)*v8))
  {
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = "TOT";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v5;
    v25 = 1024;
    v26 = v7;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v17 = (std::__fs::filesystem::path *)v19;
  if (v19)
  {
    for (j = v20; j != v17; --j)
    {
      if (SHIBYTE(j[-1].__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(j[-1].__pn_.__r_.__value_.__l.__data_);
    }
    operator delete(v17);
  }
  if (v22 < 0)
    operator delete(v21[0]);
}

void sub_20EF90FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  uint64_t *v26;

  if (a2)
  {
    sub_20E96E218((uint64_t)&a24);
    if (v24)
      free(v24);
    sub_20E8F74DC(&a13);
    if (a21 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    v26 = sub_210219C18();
    sub_20EF91394((uint64_t)v26, 0xEEEEB0B5B2B2EEEELL);
    __cxa_end_catch();
    JUMPOUT(0x20EF90F24);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EF91088(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v8 = *a3;
    v17 = 136315138;
    v18[0] = v8;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "TryCatchWithStats:MSG:%s", 0x18uLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v25)
        {
LABEL_14:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_21;
        }
LABEL_12:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_14;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v15 = *a3;
    v17 = 136315138;
    v18[0] = v15;
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF91354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

void sub_20EF91394(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  __uint64_t v12[2];
  int v13;
  _QWORD v14[3];
  char v15;
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v13 = 136315138;
    v14[0] = "ANALYTICS_FAIL";
    v6 = (char *)_os_log_send_and_compose_impl();
    v7 = strlen(v6);
    v12[0] = 0;
    pthread_threadid_np(0, v12);
    v8 = v12[0];
    timespec_get((timespec *)v12, 1);
    sub_210219E20(&v13, a2, "Trace", 5uLL, (__int128 *)(a1 + 8), (__int128 *)(a1 + 40), "MappingIOAnalytics:TYPE:%s", 0x1AuLL, v6, v7, v8, v12);
    std::mutex::lock(&stru_254A5A410);
    v9 = qword_254A5A458;
    for (i = unk_254A5A460; v9 != i; v9 += 40)
    {
      v11 = *(_QWORD *)(v9 + 32);
      if (!v11)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v11 + 48))(v11, &v13);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v25 < 0)
    {
      operator delete(__p);
      if ((v23 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v21)
        {
LABEL_14:
          if (v18 && v17 < 0)
            operator delete(v16);
          if (v15 < 0)
            operator delete(*(void **)((char *)v14 + 4));
          if (v6)
            free(v6);
          goto LABEL_21;
        }
LABEL_12:
        if (v20 < 0)
          operator delete(v19);
        goto LABEL_14;
      }
    }
    else if ((v23 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v22);
    if (!v21)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if ((unint64_t)(a2 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(*(os_log_t *)a1))
  {
    v13 = 136315138;
    v14[0] = "ANALYTICS_FAIL";
    _os_signpost_emit_unreliably_with_name_impl();
  }
}

void sub_20EF9165C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_20E96E218((uint64_t)va);
  if (v7)
    free(v7);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EF9169C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C9F22A0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EF91710(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C9F22A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EF91784(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9F22A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EF917DC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9F22A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EF91814(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20EF9186C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20EF918D4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  std::runtime_error *exception;
  uint64_t v9;
  size_t v10;
  const char *v11;
  unsigned __int8 v12;
  size_t v13;
  const char *v14;
  std::string::size_type *p_size;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  size_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  void *__p[2];
  unsigned __int8 v45;
  _QWORD v46[3];
  int v47;
  const char *v48;
  int v49;
  const char *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::string v54;
  unint64_t v55;
  char v56;
  void *v57[2];
  unint64_t v58;
  char v59;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v2 + 304))
  {
    if (!*v1)
      return;
  }
  else
  {
    sub_20EF785E4(*(_QWORD *)(a1 + 24));
    *(_BYTE *)(v2 + 304) = 1;
    if (!*v1)
      return;
  }
  v3 = *(_QWORD *)(v2 + 456);
  if (v3)
  {
    sub_20EF707E8(v2 + 8, *(_QWORD *)(v2 + 440), (uint64_t)__p);
    v4 = v45;
    if ((v45 & 0x80u) != 0)
      v4 = (unint64_t)__p[1];
    if (v4)
    {
      sub_20EF58B00(v3, (uint64_t)v1, (uint64_t)__p, *(_QWORD *)(v2 + 440));
      if ((char)v45 < 0)
        operator delete(__p[0]);
      return;
    }
    sub_20EF764A8(&v53);
    if (**(int **)(v53 + 56) > 5
      || (v5 = *(unsigned __int8 *)(v53 + 72), v6 = sub_20E8C31DC(v53, "OSLogSurrogateAppender", 1, 0), v7 = v6, !v5)
      && !v6)
    {
LABEL_15:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
      *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = xmmword_2102DCA60;
      strcpy(v54.__r_.__value_.__l.__data_, "Failed to access directories during keyframe save.");
      std::runtime_error::runtime_error(exception, &v54);
      exception->__vftable = (std::runtime_error_vtbl *)&off_24C9F2020;
      LODWORD(exception[1].__vftable) = 1;
      __cxa_throw(exception, (struct type_info *)&unk_24C9F2038, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v46[0] = &v53;
    v46[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v46[2] = std::chrono::system_clock::now().__d_.__rep_;
    v47 = 5;
    v48 = "unknown file";
    v49 = 324;
    v51 = 0;
    v52 = 0;
    v50 = "unknown function";
    v9 = *(_QWORD *)v46[0];
    v43 = *(_QWORD *)v46[0] + 16;
    if (*(char *)(*(_QWORD *)v46[0] + 39) < 0)
    {
      v11 = *(const char **)(v9 + 16);
      v10 = *(_QWORD *)(v9 + 24);
    }
    else
    {
      v10 = *(unsigned __int8 *)(*(_QWORD *)v46[0] + 39);
      v11 = (const char *)(*(_QWORD *)v46[0] + 16);
    }
    v12 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v54);
      if ((_BYTE)v55)
      {
        *(std::string *)byte_254A4A4F8 = v54;
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v13 = byte_254A4A4F8[23];
    else
      v13 = *(_QWORD *)&byte_254A4A4F8[8];
    if (byte_254A4A4F8[23] >= 0)
      v14 = byte_254A4A4F8;
    else
      v14 = *(const char **)byte_254A4A4F8;
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v14, v11);
    p_size = &v54.__r_.__value_.__l.__size_;
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v13 >= 0x17)
    {
      v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v16 = v13 | 7;
      v17 = v16 + 1;
      p_size = (std::string::size_type *)operator new(v16 + 1);
      v54.__r_.__value_.__r.__words[2] = v13;
      v55 = v17 | 0x8000000000000000;
      v54.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
    }
    else
    {
      HIBYTE(v55) = v13;
      if (!v13)
      {
LABEL_35:
        *((_BYTE *)p_size + v13) = 0;
        v56 = 1;
        v18 = v57;
        if (v10 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v10 >= 0x17)
        {
          v20 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v20 = v10 | 7;
          v21 = v20 + 1;
          v18 = operator new(v20 + 1);
          v57[1] = (void *)v10;
          v58 = v21 | 0x8000000000000000;
          v57[0] = v18;
        }
        else
        {
          HIBYTE(v58) = v10;
          if (!v10)
          {
            LOBYTE(v57[0]) = 0;
            v59 = 1;
            v19 = v54.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v58) < 0)
              goto LABEL_40;
            goto LABEL_46;
          }
        }
        memmove(v18, v11, v10);
        *((_BYTE *)v18 + v10) = 0;
        v59 = 1;
        v19 = v54.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v58) < 0)
        {
LABEL_40:
          operator delete(v57[0]);
          if (!v56)
            goto LABEL_49;
          goto LABEL_47;
        }
LABEL_46:
        if (!v56)
        {
LABEL_49:
          if (v54.__r_.__value_.__r.__words[0])
            os_release(v54.__r_.__value_.__l.__data_);
          if (v7 && *(_QWORD *)(v7 + 24))
          {
            v26 = _os_log_pack_size();
            v27 = (std::__shared_weak_count_vtbl *)operator new(v26, (std::align_val_t)8uLL);
            v28 = (std::__shared_weak_count *)operator new();
            v29 = v28;
            v28->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v28->__shared_weak_owners_ = 0;
            v28[1].__vftable = v27;
            do
              v31 = __ldxr(p_shared_owners);
            while (__stxr(v31 + 1, p_shared_owners));
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v29);
            }
            *(_WORD *)_os_log_pack_fill() = 0;
            v33 = operator new();
            v34 = *(unsigned __int8 *)(v9 + 39);
            v35 = v43;
            if ((v34 & 0x80u) != 0)
            {
              v35 = *(_QWORD *)(v9 + 16);
              v34 = *(_QWORD *)(v9 + 24);
            }
            *(_QWORD *)v33 = v27;
            *(_QWORD *)(v33 + 8) = v27;
            *(_QWORD *)(v33 + 16) = v29;
            *(_QWORD *)(v33 + 24) = 0;
            *(_QWORD *)(v33 + 32) = 0;
            *(_QWORD *)(v33 + 40) = v35;
            *(_QWORD *)(v33 + 48) = v34;
            *(_BYTE *)(v33 + 56) = 16;
            v54.__r_.__value_.__r.__words[0] = v33;
            (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), &v54);
            v36 = v54.__r_.__value_.__r.__words[0];
            v54.__r_.__value_.__r.__words[0] = 0;
            if (v36)
            {
              v37 = *(std::__shared_weak_count **)(v36 + 32);
              if (v37)
              {
                v38 = (unint64_t *)&v37->__shared_owners_;
                do
                  v39 = __ldaxr(v38);
                while (__stlxr(v39 - 1, v38));
                if (!v39)
                {
                  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                  std::__shared_weak_count::__release_weak(v37);
                }
              }
              v40 = *(std::__shared_weak_count **)(v36 + 16);
              if (v40)
              {
                v41 = (unint64_t *)&v40->__shared_owners_;
                do
                  v42 = __ldaxr(v41);
                while (__stlxr(v42 - 1, v41));
                if (!v42)
                {
                  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                  std::__shared_weak_count::__release_weak(v40);
                }
              }
              MEMORY[0x212BC6398](v36, 0x10F0C40B62ED6C6);
            }
          }
          else
          {
            os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
            LOWORD(v54.__r_.__value_.__l.__data_) = 0;
            v22 = (void *)_os_log_send_and_compose_impl();
            if (v22)
              free(v22);
          }
          if (v5)
          {
            sub_20E8C003C((uint64_t)v46, "Failed to access directories during keyframe save.");
            sub_20E863570((uint64_t)v46);
          }
          sub_20E863570((uint64_t)v46);
          v23 = v52;
          if (v52)
          {
            v24 = (unint64_t *)&v52->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          goto LABEL_15;
        }
LABEL_47:
        if (SHIBYTE(v55) < 0)
          operator delete((void *)v54.__r_.__value_.__l.__size_);
        goto LABEL_49;
      }
    }
    memmove(p_size, v14, v13);
    goto LABEL_35;
  }
}

void sub_20EF91F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,void *object,void *a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a18);
  v39 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF92164(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio10mapping_io18MappingIOInterface22ReceiveFrameDebugEventERKNSt3__110shared_ptrIKNS0_17fe"
                     "ature_detection18VIOFrameDebugEventEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio10mapping_io18MappingIOInterface22ReceiveFrameDebugEventERKNSt3__110shared_pt"
                                "rIKNS0_17feature_detection18VIOFrameDebugEventEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio10mapping_io18MappingIOInterface22ReceiveFrameDebugEventERKNSt3__110shared_ptrIKNS0_17feature_detection18VIOFrameDebugEventEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio10mapping_io18MappingIOInterface22ReceiveFrameDebugEventERKNSt3__110shared_ptrIKNS0_17feature_detection18VIOFrameDebugEventEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EF921D0()
{
  return &unk_24C9F2300;
}

void sub_20EF921DC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x98uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = a2;
  *((_QWORD *)v14 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(v14 + 72) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(v14 + 88) = *(_OWORD *)(a3 + 72);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(a3 + 88);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(a3 + 24);
  *((_OWORD *)v14 + 7) = *(_OWORD *)(a3 + 96);
  *((_QWORD *)v14 + 16) = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_OWORD *)(v14 + 136) = *(_OWORD *)(a3 + 120);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
    goto LABEL_50;
  v17 = 1;
  if (v7 >= 3)
    v17 = (v7 & (v7 - 1)) != 0;
  v18 = v17 | (2 * v7);
  v19 = vcvtps_u32_f32(v15 / v16);
  if (v18 <= v19)
    prime = v19;
  else
    prime = v18;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v21 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v21)
    goto LABEL_34;
  if (prime < *(_QWORD *)&v21)
  {
    v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v21 < 3uLL || (v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      v22 = std::__next_prime(v22);
    }
    else
    {
      v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2)
        v22 = v24;
    }
    if (prime <= v22)
      prime = v22;
    if (prime < *(_QWORD *)&v21)
LABEL_34:
      sub_20E8D2B3C(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v25 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= a2)
    {
      v3 = a2 % v7;
      v26 = *(_QWORD *)a1;
      v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (a2 % v7));
      if (!v27)
        goto LABEL_53;
LABEL_51:
      *(_QWORD *)v14 = *v27;
LABEL_59:
      *v27 = v14;
      goto LABEL_60;
    }
    v3 = a2;
LABEL_50:
    v26 = *(_QWORD *)a1;
    v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v27)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = v25 & a2;
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v25 & a2));
  if (v27)
    goto LABEL_51;
LABEL_53:
  *(_QWORD *)v14 = *v13;
  *v13 = v14;
  *(_QWORD *)(v26 + 8 * v3) = v13;
  if (*(_QWORD *)v14)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7)
        v28 %= v7;
    }
    else
    {
      v28 &= v7 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20EF9251C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EF92530((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF92530(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[14];
      if (v3)
      {
        v4 = v2[15];
        v5 = (void *)v2[14];
        if (v4 != v3)
        {
          do
          {
            if (*(char *)(v4 - 1) < 0)
              operator delete(*(void **)(v4 - 24));
            v4 -= 24;
          }
          while (v4 != v3);
          v5 = (void *)v2[14];
        }
        v2[15] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_20EF925BC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF92B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF92B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF92B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF92BC0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF93134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF93158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF9316C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF931C4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20EF93738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20EF9375C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EF93770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20EF937C8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

