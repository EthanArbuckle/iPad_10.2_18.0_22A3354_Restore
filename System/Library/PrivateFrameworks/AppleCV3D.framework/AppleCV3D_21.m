void sub_20F05F470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05F48C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05F4A0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51CA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51CA8))
    return &stru_254A51C90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIsIMUPreintegrationEnabled]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51C90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51C90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51CA8);
  return &stru_254A51C90;
}

void sub_20F05F558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51CA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51CA8);
  _Unwind_Resume(a1);
}

void sub_20F05F598(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05F764();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05F734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05F750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05F764()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51CC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51CC8))
    return &stru_254A51CB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCameraToIMUTimeOffset]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51CB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51CB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51CC8);
  return &stru_254A51CB0;
}

void sub_20F05F81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51CC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51CC8);
  _Unwind_Resume(a1);
}

void sub_20F05F85C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05FA28();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05F9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05FA14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05FA28()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51CE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51CE8))
    return &stru_254A51CD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kBABadGeometryFrame]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51CD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51CD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51CE8);
  return &stru_254A51CD0;
}

void sub_20F05FAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51CE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51CE8);
  _Unwind_Resume(a1);
}

void sub_20F05FB20(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05FCEC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05FCBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05FCD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05FCEC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51D08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51D08))
    return &stru_254A51CF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kWillSlideInNextIteration]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51CF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51CF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51D08);
  return &stru_254A51CF0;
}

void sub_20F05FDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51D08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51D08);
  _Unwind_Resume(a1);
}

void sub_20F05FDE4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05FFB0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05FF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05FF9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05FFB0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51D28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51D28))
    return &stru_254A51D10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera0NumFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51D10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51D10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51D28);
  return &stru_254A51D10;
}

void sub_20F060068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51D28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51D28);
  _Unwind_Resume(a1);
}

void sub_20F0600A8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F060274();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F060244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F060260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F060274()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51D48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51D48))
    return &stru_254A51D30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera0NumStaticFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51D30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51D30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51D48);
  return &stru_254A51D30;
}

void sub_20F06032C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51D48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51D48);
  _Unwind_Resume(a1);
}

void sub_20F06036C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F060538();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F060508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F060524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F060538()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51D68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51D68))
    return &stru_254A51D50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera0MatchedFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51D50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51D50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51D68);
  return &stru_254A51D50;
}

void sub_20F0605F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51D68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51D68);
  _Unwind_Resume(a1);
}

void sub_20F060630(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0607FC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0607CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0607E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0607FC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51D88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51D88))
    return &stru_254A51D70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera0InlierMatchedStereoFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51D70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51D70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51D88);
  return &stru_254A51D70;
}

void sub_20F0608B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51D88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51D88);
  _Unwind_Resume(a1);
}

void sub_20F0608F4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F060AC0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F060A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F060AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F060AC0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51DA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51DA8))
    return &stru_254A51D90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera1NumFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51D90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51D90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51DA8);
  return &stru_254A51D90;
}

void sub_20F060B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51DA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51DA8);
  _Unwind_Resume(a1);
}

void sub_20F060BB8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F060D84();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F060D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F060D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F060D84()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51DC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51DC8))
    return &stru_254A51DB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera1NumStaticFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51DB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51DB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51DC8);
  return &stru_254A51DB0;
}

void sub_20F060E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51DC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51DC8);
  _Unwind_Resume(a1);
}

void sub_20F060E7C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F061048();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F061018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F061034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F061048()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51DE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51DE8))
    return &stru_254A51DD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera1MatchedFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51DD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51DD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51DE8);
  return &stru_254A51DD0;
}

void sub_20F061100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51DE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51DE8);
  _Unwind_Resume(a1);
}

void sub_20F061140(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06130C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0612DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0612F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06130C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51E08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51E08))
    return &stru_254A51DF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera1InlierMatchedStereoFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51DF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51DF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51E08);
  return &stru_254A51DF0;
}

void sub_20F0613C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51E08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51E08);
  _Unwind_Resume(a1);
}

void sub_20F061404(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0615D0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0615A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0615BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0615D0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51E28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51E28))
    return &stru_254A51E10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera2NumFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51E10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51E10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51E28);
  return &stru_254A51E10;
}

void sub_20F061688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51E28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51E28);
  _Unwind_Resume(a1);
}

void sub_20F0616C8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F061894();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F061864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F061880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F061894()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51E48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51E48))
    return &stru_254A51E30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera2NumStaticFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51E30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51E30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51E48);
  return &stru_254A51E30;
}

void sub_20F06194C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51E48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51E48);
  _Unwind_Resume(a1);
}

void sub_20F06198C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F061B58();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F061B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F061B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F061B58()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51E68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51E68))
    return &stru_254A51E50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera2MatchedFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51E50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51E50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51E68);
  return &stru_254A51E50;
}

void sub_20F061C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51E68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51E68);
  _Unwind_Resume(a1);
}

void sub_20F061C50(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F061E1C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F061DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F061E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F061E1C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51E88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51E88))
    return &stru_254A51E70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera2InlierMatchedStereoFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51E70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51E70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51E88);
  return &stru_254A51E70;
}

void sub_20F061ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51E88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51E88);
  _Unwind_Resume(a1);
}

void sub_20F061F14(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0620E0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0620B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0620CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0620E0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51EA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51EA8))
    return &stru_254A51E90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera3NumFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51E90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51E90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51EA8);
  return &stru_254A51E90;
}

void sub_20F062198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51EA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51EA8);
  _Unwind_Resume(a1);
}

void sub_20F0621D8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0623A4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F062374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F062390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0623A4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51EC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51EC8))
    return &stru_254A51EB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera3NumStaticFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51EB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51EB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51EC8);
  return &stru_254A51EB0;
}

void sub_20F06245C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51EC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51EC8);
  _Unwind_Resume(a1);
}

void sub_20F06249C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F062668();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F062638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F062654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F062668()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51EE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51EE8))
    return &stru_254A51ED0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera3MatchedFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51ED0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51ED0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51EE8);
  return &stru_254A51ED0;
}

void sub_20F062720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51EE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51EE8);
  _Unwind_Resume(a1);
}

void sub_20F062760(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06292C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0628FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F062918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06292C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51F08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51F08))
    return &stru_254A51EF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera3InlierMatchedStereoFeatures]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51EF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51EF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51F08);
  return &stru_254A51EF0;
}

void sub_20F0629E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51F08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51F08);
  _Unwind_Resume(a1);
}

void sub_20F062A24(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F062BF0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F062BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F062BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F062BF0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51F28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51F28))
    return &stru_254A51F10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera0InlierTemporalMatches]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51F10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51F10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51F28);
  return &stru_254A51F10;
}

void sub_20F062CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51F28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51F28);
  _Unwind_Resume(a1);
}

void sub_20F062CE8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F062EB4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F062E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F062EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F062EB4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51F48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51F48))
    return &stru_254A51F30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera1InlierTemporalMatches]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51F30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51F30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51F48);
  return &stru_254A51F30;
}

void sub_20F062F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51F48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51F48);
  _Unwind_Resume(a1);
}

void sub_20F062FAC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F063178();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F063148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F063164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F063178()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51F68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51F68))
    return &stru_254A51F50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera2InlierTemporalMatches]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51F50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51F50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51F68);
  return &stru_254A51F50;
}

void sub_20F063230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51F68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51F68);
  _Unwind_Resume(a1);
}

void sub_20F063270(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06343C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06340C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F063428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06343C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51F88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51F88))
    return &stru_254A51F70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera3InlierTemporalMatches]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51F70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51F70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51F88);
  return &stru_254A51F70;
}

void sub_20F0634F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51F88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51F88);
  _Unwind_Resume(a1);
}

void sub_20F063534(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F063700();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0636D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0636EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F063700()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51FA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51FA8))
    return &stru_254A51F90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCameraSetFeaturesPoolSize]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51F90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51F90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51FA8);
  return &stru_254A51F90;
}

void sub_20F0637B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51FA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51FA8);
  _Unwind_Resume(a1);
}

void sub_20F0637F8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0639C4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F063994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0639B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0639C4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51FC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51FC8))
    return &stru_254A51FB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCameraSetFeaturesPoolAvailableSize]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51FB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51FB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51FC8);
  return &stru_254A51FB0;
}

void sub_20F063A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51FC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51FC8);
  _Unwind_Resume(a1);
}

void sub_20F063ABC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F063C88();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F063C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F063C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F063C88()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51FE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51FE8))
    return &stru_254A51FD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kFrontEndKeyframeDataPoolSize]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51FD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51FD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51FE8);
  return &stru_254A51FD0;
}

void sub_20F063D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51FE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51FE8);
  _Unwind_Resume(a1);
}

void sub_20F063D80(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F063F4C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F063F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F063F38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F063F4C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52008);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52008))
    return &stru_254A51FF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kFrontEndKeyframeDataPoolAvailableSize]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51FF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51FF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52008);
  return &stru_254A51FF0;
}

void sub_20F064004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52008);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52008);
  _Unwind_Resume(a1);
}

void sub_20F064044(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F064210();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0641E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0641FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F064210()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52028);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52028))
    return &stru_254A52010;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kFrontEndResetLatestMapKeyframeLatency]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52010);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52010, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52028);
  return &stru_254A52010;
}

void sub_20F0642C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52028);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52028);
  _Unwind_Resume(a1);
}

void sub_20F064308(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0644D4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0644A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0644C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0644D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52048);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52048))
    return &stru_254A52030;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kFrontEndLatestMapTrackingLatency]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52030);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52030, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52048);
  return &stru_254A52030;
}

void sub_20F06458C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52048);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52048);
  _Unwind_Resume(a1);
}

void sub_20F0645CC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F064798();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F064768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F064784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F064798()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52068);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52068))
    return &stru_254A52050;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kFrontEndLocalMapUpdate]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52050);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52050, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52068);
  return &stru_254A52050;
}

void sub_20F064850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52068);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52068);
  _Unwind_Resume(a1);
}

void sub_20F064890(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F064A5C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F064A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F064A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F064A5C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52088);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52088))
    return &stru_254A52070;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kFrontEndLocalMapNumPoints]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52070);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52070, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52088);
  return &stru_254A52070;
}

void sub_20F064B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52088);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52088);
  _Unwind_Resume(a1);
}

void sub_20F064B54(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F064D20();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F064CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F064D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F064D20()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A520A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A520A8))
    return &stru_254A52090;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kReinitTimestampInitialized]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52090);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52090, &dword_20E81F000);
  __cxa_guard_release(&qword_254A520A8);
  return &stru_254A52090;
}

void sub_20F064DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A520A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A520A8);
  _Unwind_Resume(a1);
}

void sub_20F064E18(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F064FE4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F064FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F064FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F064FE4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A520C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A520C8))
    return &stru_254A520B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kReinitTimestampPoorHealth]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A520B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A520B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A520C8);
  return &stru_254A520B0;
}

void sub_20F06509C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A520C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A520C8);
  _Unwind_Resume(a1);
}

void sub_20F0650DC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0652A8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F065278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F065294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0652A8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A520E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A520E8))
    return &stru_254A520D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kReinitTimestampPoorHeuristics]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A520D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A520D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A520E8);
  return &stru_254A520D0;
}

void sub_20F065360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A520E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A520E8);
  _Unwind_Resume(a1);
}

void sub_20F0653A0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06556C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06553C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F065558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06556C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52108);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52108))
    return &stru_254A520F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kReinitTimestampGoodHeuristics]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A520F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A520F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52108);
  return &stru_254A520F0;
}

void sub_20F065624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52108);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52108);
  _Unwind_Resume(a1);
}

void sub_20F065664(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F065830();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F065800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06581C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F065830()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52128);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52128))
    return &stru_254A52110;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIsNormalTrackingMode]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52110);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52110, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52128);
  return &stru_254A52110;
}

void sub_20F0658E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52128);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52128);
  _Unwind_Resume(a1);
}

void sub_20F065928(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F065AF4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F065AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F065AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F065AF4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52148);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52148))
    return &stru_254A52130;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIsConservativeTrackingMode]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52130);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52130, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52148);
  return &stru_254A52130;
}

void sub_20F065BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52148);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52148);
  _Unwind_Resume(a1);
}

void sub_20F065BEC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F065DB8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F065D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F065DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F065DB8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52168);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52168))
    return &stru_254A52150;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIsQuasiStationaryTrackingMode]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52150);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52150, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52168);
  return &stru_254A52150;
}

void sub_20F065E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52168);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52168);
  _Unwind_Resume(a1);
}

void sub_20F065EB0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06607C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06604C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F066068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06607C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52188);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52188))
    return &stru_254A52170;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTimeOffsetEstimationEnabled]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52170);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52170, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52188);
  return &stru_254A52170;
}

void sub_20F066134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52188);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52188);
  _Unwind_Resume(a1);
}

void sub_20F066174(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F066340();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F066310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06632C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F066340()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A521A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A521A8))
    return &stru_254A52190;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIsStereoDominantTrackingState]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52190);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52190, &dword_20E81F000);
  __cxa_guard_release(&qword_254A521A8);
  return &stru_254A52190;
}

void sub_20F0663F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A521A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A521A8);
  _Unwind_Resume(a1);
}

void sub_20F066438(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F066604();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0665D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0665F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F066604()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A521C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A521C8))
    return &stru_254A521B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIsMonoDominantTrackingState]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A521B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A521B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A521C8);
  return &stru_254A521B0;
}

void sub_20F0666BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A521C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A521C8);
  _Unwind_Resume(a1);
}

void sub_20F0666FC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0668C8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F066898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0668B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0668C8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A521E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A521E8))
    return &stru_254A521D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIsTransitionTrackingState]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A521D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A521D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A521E8);
  return &stru_254A521D0;
}

void sub_20F066980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A521E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A521E8);
  _Unwind_Resume(a1);
}

void sub_20F0669C0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F066B8C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F066B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F066B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F066B8C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52208);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52208))
    return &stru_254A521F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::KResetMappingModuleOnly]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A521F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A521F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52208);
  return &stru_254A521F0;
}

void sub_20F066C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52208);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52208);
  _Unwind_Resume(a1);
}

void sub_20F066C84(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F066E50();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F066E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F066E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F066E50()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52228);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52228))
    return &stru_254A52210;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNeedReinitialization]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52210);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52210, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52228);
  return &stru_254A52210;
}

void sub_20F066F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52228);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52228);
  _Unwind_Resume(a1);
}

void sub_20F066F48(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F067114();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0670E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F067100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F067114()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52248);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52248))
    return &stru_254A52230;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kInCurrentWindowValid]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52230);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52230, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52248);
  return &stru_254A52230;
}

void sub_20F0671CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52248);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52248);
  _Unwind_Resume(a1);
}

void sub_20F06720C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0673D8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0673A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0673C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0673D8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52268);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52268))
    return &stru_254A52250;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIsPoseOutOfSpaceBoundaries]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52250);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52250, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52268);
  return &stru_254A52250;
}

void sub_20F067490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52268);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52268);
  _Unwind_Resume(a1);
}

void sub_20F0674D0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06769C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06766C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F067688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06769C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52288);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52288))
    return &stru_254A52270;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kPushedMovablePlatformClassification]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52270);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52270, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52288);
  return &stru_254A52270;
}

void sub_20F067754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52288);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52288);
  _Unwind_Resume(a1);
}

void sub_20F067794(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F067960();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F067930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06794C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F067960()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A522A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A522A8))
    return &stru_254A52290;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kPushedMovablePlatformClassificationConfidence]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52290);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52290, &dword_20E81F000);
  __cxa_guard_release(&qword_254A522A8);
  return &stru_254A52290;
}

void sub_20F067A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A522A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A522A8);
  _Unwind_Resume(a1);
}

void sub_20F067A58(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F067C24();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F067BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F067C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F067C24()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A522C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A522C8))
    return &stru_254A522B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kSendMovingPlatformHintToUserIn3DoFMode]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A522B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A522B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A522C8);
  return &stru_254A522B0;
}

void sub_20F067CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A522C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A522C8);
  _Unwind_Resume(a1);
}

void sub_20F067D1C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F067EE8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F067EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F067ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F067EE8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A522E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A522E8))
    return &stru_254A522D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kSendMovingPlatformHintToUser]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A522D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A522D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A522E8);
  return &stru_254A522D0;
}

void sub_20F067FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A522E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A522E8);
  _Unwind_Resume(a1);
}

void sub_20F067FE0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0681AC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06817C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F068198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0681AC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52308);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52308))
    return &stru_254A522F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMovablePlatformTypeAssociatedToHint]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A522F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A522F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52308);
  return &stru_254A522F0;
}

void sub_20F068264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52308);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52308);
  _Unwind_Resume(a1);
}

void sub_20F0682A4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F068470();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F068440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06845C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F068470()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52328);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52328))
    return &stru_254A52310;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTravelModeHintWithAirplane]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52310);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52310, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52328);
  return &stru_254A52310;
}

void sub_20F068528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52328);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52328);
  _Unwind_Resume(a1);
}

void sub_20F068568(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F068734();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F068704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F068720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F068734()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52348);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52348))
    return &stru_254A52330;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTravelModeHintWithTrain]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52330);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52330, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52348);
  return &stru_254A52330;
}

void sub_20F0687EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52348);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52348);
  _Unwind_Resume(a1);
}

void sub_20F06882C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0689F8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0689C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0689E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0689F8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52368);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52368))
    return &stru_254A52350;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTravelModeHintWithCar]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52350);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52350, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52368);
  return &stru_254A52350;
}

void sub_20F068AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52368);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52368);
  _Unwind_Resume(a1);
}

void sub_20F068AF0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F068CBC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F068C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F068CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F068CBC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52388);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52388))
    return &stru_254A52370;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTravelModeHintWithBus]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52370);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52370, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52388);
  return &stru_254A52370;
}

void sub_20F068D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52388);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52388);
  _Unwind_Resume(a1);
}

void sub_20F068DB4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F068F80();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F068F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F068F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F068F80()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A523A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A523A8))
    return &stru_254A52390;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTravelModeHintWithBoat]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52390);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52390, &dword_20E81F000);
  __cxa_guard_release(&qword_254A523A8);
  return &stru_254A52390;
}

void sub_20F069038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A523A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A523A8);
  _Unwind_Resume(a1);
}

void sub_20F069078(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F069244();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F069214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F069230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F069244()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A523C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A523C8))
    return &stru_254A523B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTravelModeHintWithNotMovable]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A523B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A523B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A523C8);
  return &stru_254A523B0;
}

void sub_20F0692FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A523C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A523C8);
  _Unwind_Resume(a1);
}

void sub_20F06933C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F069508();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0694D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0694F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F069508()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A523E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A523E8))
    return &stru_254A523D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTravelModeHintWithUnknown]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A523D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A523D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A523E8);
  return &stru_254A523D0;
}

void sub_20F0695C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A523E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A523E8);
  _Unwind_Resume(a1);
}

void sub_20F069600(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0697CC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06979C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0697B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0697CC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52408);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52408))
    return &stru_254A523F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCurrentMovablePlatformType]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A523F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A523F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52408);
  return &stru_254A523F0;
}

void sub_20F069884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52408);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52408);
  _Unwind_Resume(a1);
}

void sub_20F0698C4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F069A90();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F069A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F069A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F069A90()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52428);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52428))
    return &stru_254A52410;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIsGeneralVisualSLAMConfig]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52410);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52410, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52428);
  return &stru_254A52410;
}

void sub_20F069B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52428);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52428);
  _Unwind_Resume(a1);
}

void sub_20F069B88(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F069D54();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F069D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F069D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F069D54()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52448);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52448))
    return &stru_254A52430;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMovablePlatformTypeConfidenceAssociatedToHint]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52430);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52430, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52448);
  return &stru_254A52430;
}

void sub_20F069E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52448);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52448);
  _Unwind_Resume(a1);
}

void sub_20F069E4C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06A018();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F069FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06A004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06A018()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52468);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52468))
    return &stru_254A52450;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kSendSLAMBasedMovingPlatformHintToUser]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52450);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52450, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52468);
  return &stru_254A52450;
}

void sub_20F06A0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52468);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52468);
  _Unwind_Resume(a1);
}

void sub_20F06A110(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06A2DC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06A2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06A2C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06A2DC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52488);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52488))
    return &stru_254A52470;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kSendMPCBasedMovingPlatformHintToUser]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52470);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52470, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52488);
  return &stru_254A52470;
}

void sub_20F06A394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52488);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52488);
  _Unwind_Resume(a1);
}

void sub_20F06A3D4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06A5A0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06A570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06A58C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06A5A0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A524A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A524A8))
    return &stru_254A52490;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera0FocalLengthBiasX]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52490);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52490, &dword_20E81F000);
  __cxa_guard_release(&qword_254A524A8);
  return &stru_254A52490;
}

void sub_20F06A658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A524A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A524A8);
  _Unwind_Resume(a1);
}

void sub_20F06A698(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06A864();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06A834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06A850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06A864()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A524C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A524C8))
    return &stru_254A524B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera0FocalLengthBiasY]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A524B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A524B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A524C8);
  return &stru_254A524B0;
}

void sub_20F06A91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A524C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A524C8);
  _Unwind_Resume(a1);
}

void sub_20F06A95C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06AB28();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06AAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06AB14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06AB28()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A524E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A524E8))
    return &stru_254A524D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera0PrincipalPointBiasX]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A524D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A524D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A524E8);
  return &stru_254A524D0;
}

void sub_20F06ABE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A524E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A524E8);
  _Unwind_Resume(a1);
}

void sub_20F06AC20(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06ADEC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06ADBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06ADD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06ADEC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52508);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52508))
    return &stru_254A524F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera0PrincipalPointBiasY]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A524F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A524F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52508);
  return &stru_254A524F0;
}

void sub_20F06AEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52508);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52508);
  _Unwind_Resume(a1);
}

void sub_20F06AEE4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06B0B0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06B080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06B09C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06B0B0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52528);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52528))
    return &stru_254A52510;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera1FocalLengthBiasX]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52510);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52510, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52528);
  return &stru_254A52510;
}

void sub_20F06B168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52528);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52528);
  _Unwind_Resume(a1);
}

void sub_20F06B1A8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06B374();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06B344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06B360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06B374()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52548);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52548))
    return &stru_254A52530;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera1FocalLengthBiasY]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52530);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52530, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52548);
  return &stru_254A52530;
}

void sub_20F06B42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52548);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52548);
  _Unwind_Resume(a1);
}

void sub_20F06B46C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06B638();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06B608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06B624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06B638()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52568);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52568))
    return &stru_254A52550;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera1PrincipalPointBiasX]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52550);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52550, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52568);
  return &stru_254A52550;
}

void sub_20F06B6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52568);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52568);
  _Unwind_Resume(a1);
}

void sub_20F06B730(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06B8FC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06B8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06B8E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06B8FC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52588);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52588))
    return &stru_254A52570;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera1PrincipalPointBiasY]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52570);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52570, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52588);
  return &stru_254A52570;
}

void sub_20F06B9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52588);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52588);
  _Unwind_Resume(a1);
}

void sub_20F06B9F4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06BBC0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06BB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06BBAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06BBC0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A525A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A525A8))
    return &stru_254A52590;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera2FocalLengthBiasX]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52590);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52590, &dword_20E81F000);
  __cxa_guard_release(&qword_254A525A8);
  return &stru_254A52590;
}

void sub_20F06BC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A525A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A525A8);
  _Unwind_Resume(a1);
}

void sub_20F06BCB8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06BE84();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06BE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06BE70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06BE84()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A525C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A525C8))
    return &stru_254A525B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera2FocalLengthBiasY]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A525B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A525B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A525C8);
  return &stru_254A525B0;
}

void sub_20F06BF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A525C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A525C8);
  _Unwind_Resume(a1);
}

void sub_20F06BF7C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06C148();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06C118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06C134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06C148()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A525E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A525E8))
    return &stru_254A525D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera2PrincipalPointBiasX]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A525D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A525D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A525E8);
  return &stru_254A525D0;
}

void sub_20F06C200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A525E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A525E8);
  _Unwind_Resume(a1);
}

void sub_20F06C240(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06C40C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06C3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06C3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06C40C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52608);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52608))
    return &stru_254A525F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera2PrincipalPointBiasY]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A525F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A525F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52608);
  return &stru_254A525F0;
}

void sub_20F06C4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52608);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52608);
  _Unwind_Resume(a1);
}

void sub_20F06C504(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06C6D0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06C6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06C6BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06C6D0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52628);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52628))
    return &stru_254A52610;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera3FocalLengthBiasX]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52610);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52610, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52628);
  return &stru_254A52610;
}

void sub_20F06C788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52628);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52628);
  _Unwind_Resume(a1);
}

void sub_20F06C7C8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06C994();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06C964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06C980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06C994()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52648);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52648))
    return &stru_254A52630;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera3FocalLengthBiasY]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52630);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52630, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52648);
  return &stru_254A52630;
}

void sub_20F06CA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52648);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52648);
  _Unwind_Resume(a1);
}

void sub_20F06CA8C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06CC58();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06CC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06CC44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06CC58()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52668);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52668))
    return &stru_254A52650;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera3PrincipalPointBiasX]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52650);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52650, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52668);
  return &stru_254A52650;
}

void sub_20F06CD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52668);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52668);
  _Unwind_Resume(a1);
}

void sub_20F06CD50(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06CF1C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06CEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06CF08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06CF1C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52688);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52688))
    return &stru_254A52670;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera3PrincipalPointBiasY]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52670);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52670, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52688);
  return &stru_254A52670;
}

void sub_20F06CFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52688);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52688);
  _Unwind_Resume(a1);
}

void sub_20F06D014(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06D1E0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06D1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06D1CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06D1E0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A526A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A526A8))
    return &stru_254A52690;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera0ItoCRotationLogX]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52690);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52690, &dword_20E81F000);
  __cxa_guard_release(&qword_254A526A8);
  return &stru_254A52690;
}

void sub_20F06D298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A526A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A526A8);
  _Unwind_Resume(a1);
}

void sub_20F06D2D8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06D4A4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06D474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06D490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06D4A4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A526C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A526C8))
    return &stru_254A526B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera0ItoCRotationLogY]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A526B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A526B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A526C8);
  return &stru_254A526B0;
}

void sub_20F06D55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A526C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A526C8);
  _Unwind_Resume(a1);
}

void sub_20F06D59C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06D768();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06D738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06D754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06D768()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A526E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A526E8))
    return &stru_254A526D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera0ItoCRotationLogZ]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A526D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A526D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A526E8);
  return &stru_254A526D0;
}

void sub_20F06D820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A526E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A526E8);
  _Unwind_Resume(a1);
}

void sub_20F06D860(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06DA2C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06D9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06DA18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06DA2C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52708);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52708))
    return &stru_254A526F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera1ItoCRotationLogX]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A526F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A526F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52708);
  return &stru_254A526F0;
}

void sub_20F06DAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52708);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52708);
  _Unwind_Resume(a1);
}

void sub_20F06DB24(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06DCF0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06DCC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06DCDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06DCF0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52728);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52728))
    return &stru_254A52710;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera1ItoCRotationLogY]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52710);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52710, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52728);
  return &stru_254A52710;
}

void sub_20F06DDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52728);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52728);
  _Unwind_Resume(a1);
}

void sub_20F06DDE8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06DFB4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06DF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06DFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06DFB4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52748);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52748))
    return &stru_254A52730;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera1ItoCRotationLogZ]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52730);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52730, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52748);
  return &stru_254A52730;
}

void sub_20F06E06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52748);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52748);
  _Unwind_Resume(a1);
}

void sub_20F06E0AC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06E278();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06E248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06E264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06E278()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52768);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52768))
    return &stru_254A52750;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera2ItoCRotationLogX]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52750);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52750, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52768);
  return &stru_254A52750;
}

void sub_20F06E330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52768);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52768);
  _Unwind_Resume(a1);
}

void sub_20F06E370(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06E53C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06E50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06E528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06E53C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52788);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52788))
    return &stru_254A52770;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera2ItoCRotationLogY]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52770);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52770, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52788);
  return &stru_254A52770;
}

void sub_20F06E5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52788);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52788);
  _Unwind_Resume(a1);
}

void sub_20F06E634(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06E800();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06E7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06E7EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06E800()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A527A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A527A8))
    return &stru_254A52790;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera2ItoCRotationLogZ]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52790);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52790, &dword_20E81F000);
  __cxa_guard_release(&qword_254A527A8);
  return &stru_254A52790;
}

void sub_20F06E8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A527A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A527A8);
  _Unwind_Resume(a1);
}

void sub_20F06E8F8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06EAC4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06EA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06EAB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06EAC4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A527C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A527C8))
    return &stru_254A527B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera3ItoCRotationLogX]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A527B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A527B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A527C8);
  return &stru_254A527B0;
}

void sub_20F06EB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A527C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A527C8);
  _Unwind_Resume(a1);
}

void sub_20F06EBBC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06ED88();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06ED58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06ED74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06ED88()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A527E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A527E8))
    return &stru_254A527D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera3ItoCRotationLogY]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A527D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A527D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A527E8);
  return &stru_254A527D0;
}

void sub_20F06EE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A527E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A527E8);
  _Unwind_Resume(a1);
}

void sub_20F06EE80(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06F04C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06F01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06F038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06F04C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52808);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52808))
    return &stru_254A527F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kCamera3ItoCRotationLogZ]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A527F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A527F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52808);
  return &stru_254A527F0;
}

void sub_20F06F104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52808);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52808);
  _Unwind_Resume(a1);
}

void sub_20F06F144(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06F310();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06F2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06F2FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06F310()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52828);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52828))
    return &stru_254A52810;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIMUIntrinsicEstimationToggled]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52810);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52810, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52828);
  return &stru_254A52810;
}

void sub_20F06F3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52828);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52828);
  _Unwind_Resume(a1);
}

void sub_20F06F408(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06F5D4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06F5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06F5C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06F5D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52848);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52848))
    return &stru_254A52830;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kGyroScaleXAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52830);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52830, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52848);
  return &stru_254A52830;
}

void sub_20F06F68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52848);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52848);
  _Unwind_Resume(a1);
}

void sub_20F06F6CC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06F898();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06F868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06F884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06F898()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52868);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52868))
    return &stru_254A52850;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kGyroScaleYAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52850);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52850, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52868);
  return &stru_254A52850;
}

void sub_20F06F950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52868);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52868);
  _Unwind_Resume(a1);
}

void sub_20F06F990(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06FB5C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06FB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06FB48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06FB5C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52888);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52888))
    return &stru_254A52870;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kGyroScaleZAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52870);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52870, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52888);
  return &stru_254A52870;
}

void sub_20F06FC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52888);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52888);
  _Unwind_Resume(a1);
}

void sub_20F06FC54(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F06FE20();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F06FDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F06FE0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F06FE20()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A528A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A528A8))
    return &stru_254A52890;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kGyroScaleConvergedXAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52890);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52890, &dword_20E81F000);
  __cxa_guard_release(&qword_254A528A8);
  return &stru_254A52890;
}

void sub_20F06FED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A528A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A528A8);
  _Unwind_Resume(a1);
}

void sub_20F06FF18(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0700E4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0700B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0700D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0700E4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A528C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A528C8))
    return &stru_254A528B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kGyroScaleConvergedYAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A528B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A528B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A528C8);
  return &stru_254A528B0;
}

void sub_20F07019C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A528C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A528C8);
  _Unwind_Resume(a1);
}

void sub_20F0701DC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0703A8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F070378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F070394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0703A8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A528E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A528E8))
    return &stru_254A528D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kGyroScaleConvergedZAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A528D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A528D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A528E8);
  return &stru_254A528D0;
}

void sub_20F070460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A528E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A528E8);
  _Unwind_Resume(a1);
}

void sub_20F0704A0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07066C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07063C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F070658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07066C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52908);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52908))
    return &stru_254A528F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kGyroScaleXAxisInfield]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A528F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A528F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52908);
  return &stru_254A528F0;
}

void sub_20F070724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52908);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52908);
  _Unwind_Resume(a1);
}

void sub_20F070764(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F070930();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F070900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07091C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F070930()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52928);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52928))
    return &stru_254A52910;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kGyroScaleYAxisInfield]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52910);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52910, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52928);
  return &stru_254A52910;
}

void sub_20F0709E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52928);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52928);
  _Unwind_Resume(a1);
}

void sub_20F070A28(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F070BF4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F070BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F070BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F070BF4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52948);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52948))
    return &stru_254A52930;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kGyroScaleZAxisInfield]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52930);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52930, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52948);
  return &stru_254A52930;
}

void sub_20F070CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52948);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52948);
  _Unwind_Resume(a1);
}

void sub_20F070CEC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F070EB8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F070E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F070EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F070EB8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52968);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52968))
    return &stru_254A52950;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kGyroSkewnessXAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52950);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52950, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52968);
  return &stru_254A52950;
}

void sub_20F070F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52968);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52968);
  _Unwind_Resume(a1);
}

void sub_20F070FB0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07117C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07114C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F071168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07117C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52988);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52988))
    return &stru_254A52970;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kGyroSkewnessYAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52970);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52970, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52988);
  return &stru_254A52970;
}

void sub_20F071234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52988);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52988);
  _Unwind_Resume(a1);
}

void sub_20F071274(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F071440();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F071410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07142C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F071440()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A529A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A529A8))
    return &stru_254A52990;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kGyroSkewnessZAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52990);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52990, &dword_20E81F000);
  __cxa_guard_release(&qword_254A529A8);
  return &stru_254A52990;
}

void sub_20F0714F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A529A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A529A8);
  _Unwind_Resume(a1);
}

void sub_20F071538(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F071704();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0716D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0716F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F071704()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A529C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A529C8))
    return &stru_254A529B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kAccelScaleXAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A529B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A529B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A529C8);
  return &stru_254A529B0;
}

void sub_20F0717BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A529C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A529C8);
  _Unwind_Resume(a1);
}

void sub_20F0717FC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0719C8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F071998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0719B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0719C8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A529E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A529E8))
    return &stru_254A529D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kAccelScaleYAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A529D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A529D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A529E8);
  return &stru_254A529D0;
}

void sub_20F071A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A529E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A529E8);
  _Unwind_Resume(a1);
}

void sub_20F071AC0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F071C8C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F071C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F071C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F071C8C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52A08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52A08))
    return &stru_254A529F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kAccelScaleZAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A529F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A529F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52A08);
  return &stru_254A529F0;
}

void sub_20F071D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52A08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52A08);
  _Unwind_Resume(a1);
}

void sub_20F071D84(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F071F50();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F071F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F071F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F071F50()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52A28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52A28))
    return &stru_254A52A10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kAccelSkewnessXAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52A10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52A10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52A28);
  return &stru_254A52A10;
}

void sub_20F072008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52A28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52A28);
  _Unwind_Resume(a1);
}

void sub_20F072048(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F072214();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0721E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F072200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F072214()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52A48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52A48))
    return &stru_254A52A30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kAccelSkewnessYAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52A30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52A30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52A48);
  return &stru_254A52A30;
}

void sub_20F0722CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52A48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52A48);
  _Unwind_Resume(a1);
}

void sub_20F07230C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0724D8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0724A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0724C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0724D8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52A68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52A68))
    return &stru_254A52A50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kAccelSkewnessZAxis]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52A50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52A50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52A68);
  return &stru_254A52A50;
}

void sub_20F072590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52A68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52A68);
  _Unwind_Resume(a1);
}

void sub_20F0725D0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07279C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07276C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F072788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07279C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52A88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52A88))
    return &stru_254A52A70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kPropagatedPoseErrorPosition]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52A70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52A70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52A88);
  return &stru_254A52A70;
}

void sub_20F072854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52A88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52A88);
  _Unwind_Resume(a1);
}

void sub_20F072894(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F072A60();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F072A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F072A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F072A60()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52AA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52AA8))
    return &stru_254A52A90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kPropagatedPoseErrorOrientation]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52A90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52A90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52AA8);
  return &stru_254A52A90;
}

void sub_20F072B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52AA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52AA8);
  _Unwind_Resume(a1);
}

void sub_20F072B58(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F072D24();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F072CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F072D10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F072D24()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52AC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52AC8))
    return &stru_254A52AB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kPropagatedPoseTimeDuration]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52AB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52AB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52AC8);
  return &stru_254A52AB0;
}

void sub_20F072DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52AC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52AC8);
  _Unwind_Resume(a1);
}

void sub_20F072E1C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F072FE8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F072FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F072FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F072FE8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52AE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52AE8))
    return &stru_254A52AD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kPropagatedPoseAgainstBAPoseErrorPosition]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52AD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52AD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52AE8);
  return &stru_254A52AD0;
}

void sub_20F0730A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52AE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52AE8);
  _Unwind_Resume(a1);
}

void sub_20F0730E0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0732AC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07327C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F073298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0732AC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52B08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52B08))
    return &stru_254A52AF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kPropagatedPoseAgainstBAPoseErrorOrientation]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52AF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52AF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52B08);
  return &stru_254A52AF0;
}

void sub_20F073364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52B08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52B08);
  _Unwind_Resume(a1);
}

void sub_20F0733A4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F073570();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F073540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07355C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F073570()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52B28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52B28))
    return &stru_254A52B10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kPropagatedPoseAgainstBAPoseTimeDuration]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52B10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52B10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52B28);
  return &stru_254A52B10;
}

void sub_20F073628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52B28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52B28);
  _Unwind_Resume(a1);
}

void sub_20F073668(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F073834();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F073804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F073820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F073834()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52B48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52B48))
    return &stru_254A52B30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kLatestStateAngularVelX]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52B30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52B30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52B48);
  return &stru_254A52B30;
}

void sub_20F0738EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52B48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52B48);
  _Unwind_Resume(a1);
}

void sub_20F07392C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F073AF8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F073AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F073AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F073AF8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52B68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52B68))
    return &stru_254A52B50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kLatestStateAngularVelY]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52B50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52B50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52B68);
  return &stru_254A52B50;
}

void sub_20F073BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52B68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52B68);
  _Unwind_Resume(a1);
}

void sub_20F073BF0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F073DBC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F073D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F073DA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F073DBC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52B88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52B88))
    return &stru_254A52B70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kLatestStateAngularVelZ]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52B70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52B70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52B88);
  return &stru_254A52B70;
}

void sub_20F073E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52B88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52B88);
  _Unwind_Resume(a1);
}

void sub_20F073EB4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F074080();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F074050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07406C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F074080()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52BA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52BA8))
    return &stru_254A52B90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kLatestStateRotationRate]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52B90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52B90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52BA8);
  return &stru_254A52B90;
}

void sub_20F074138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52BA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52BA8);
  _Unwind_Resume(a1);
}

void sub_20F074178(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F074344();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F074314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F074330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F074344()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52BC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52BC8))
    return &stru_254A52BB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kLatestStateVelocity]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52BB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52BB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52BC8);
  return &stru_254A52BB0;
}

void sub_20F0743FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52BC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52BC8);
  _Unwind_Resume(a1);
}

void sub_20F07443C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F074608();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0745D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0745F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F074608()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52BE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52BE8))
    return &stru_254A52BD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kAbruptStopIndication]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52BD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52BD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52BE8);
  return &stru_254A52BD0;
}

void sub_20F0746C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52BE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52BE8);
  _Unwind_Resume(a1);
}

void sub_20F074700(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0748CC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07489C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0748B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0748CC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52C08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52C08))
    return &stru_254A52BF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfAllFrontEndTracks]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52BF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52BF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52C08);
  return &stru_254A52BF0;
}

void sub_20F074984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52C08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52C08);
  _Unwind_Resume(a1);
}

void sub_20F0749C4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F074B90();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F074B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F074B7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F074B90()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52C28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52C28))
    return &stru_254A52C10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfValidFrontEndTracks]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52C10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52C10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52C28);
  return &stru_254A52C10;
}

void sub_20F074C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52C28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52C28);
  _Unwind_Resume(a1);
}

void sub_20F074C88(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F074E54();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F074E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F074E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F074E54()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52C48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52C48))
    return &stru_254A52C30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfInlierFrontEndTracks]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52C30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52C30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52C48);
  return &stru_254A52C30;
}

void sub_20F074F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52C48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52C48);
  _Unwind_Resume(a1);
}

void sub_20F074F4C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F075118();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0750E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F075104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F075118()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52C68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52C68))
    return &stru_254A52C50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfMappingFrontEndTracks]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52C50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52C50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52C68);
  return &stru_254A52C50;
}

void sub_20F0751D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52C68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52C68);
  _Unwind_Resume(a1);
}

void sub_20F075210(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0753DC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0753AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0753C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0753DC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52C88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52C88))
    return &stru_254A52C70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfVIOLandmarkVariables]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52C70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52C70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52C88);
  return &stru_254A52C70;
}

void sub_20F075494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52C88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52C88);
  _Unwind_Resume(a1);
}

void sub_20F0754D4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0756A0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F075670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07568C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0756A0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52CA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52CA8))
    return &stru_254A52C90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfVIOLandmarkFactors]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52C90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52C90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52CA8);
  return &stru_254A52C90;
}

void sub_20F075758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52CA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52CA8);
  _Unwind_Resume(a1);
}

void sub_20F075798(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F075964();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F075934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F075950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F075964()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52CC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52CC8))
    return &stru_254A52CB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfStereoVIOLandmarkFactors]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52CB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52CB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52CC8);
  return &stru_254A52CB0;
}

void sub_20F075A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52CC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52CC8);
  _Unwind_Resume(a1);
}

void sub_20F075A5C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F075C28();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F075BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F075C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F075C28()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52CE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52CE8))
    return &stru_254A52CD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfMonoVIOLandmarkFactors]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52CD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52CD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52CE8);
  return &stru_254A52CD0;
}

void sub_20F075CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52CE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52CE8);
  _Unwind_Resume(a1);
}

void sub_20F075D20(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F075EEC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F075EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F075ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F075EEC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52D08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52D08))
    return &stru_254A52CF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfIMUFactorsInMarginalization]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52CF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52CF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52D08);
  return &stru_254A52CF0;
}

void sub_20F075FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52D08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52D08);
  _Unwind_Resume(a1);
}

void sub_20F075FE4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0761B0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F076180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07619C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0761B0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52D28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52D28))
    return &stru_254A52D10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfStereoVIOLandmarkFactorsInMarginalization]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52D10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52D10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52D28);
  return &stru_254A52D10;
}

void sub_20F076268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52D28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52D28);
  _Unwind_Resume(a1);
}

void sub_20F0762A8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F076474();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F076444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F076460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F076474()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52D48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52D48))
    return &stru_254A52D30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfMonoVIOLandmarkFactorsInMarginalization]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52D30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52D30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52D48);
  return &stru_254A52D30;
}

void sub_20F07652C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52D48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52D48);
  _Unwind_Resume(a1);
}

void sub_20F07656C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F076738();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F076708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F076724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F076738()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52D68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52D68))
    return &stru_254A52D50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfSLAMLandmarkFactorsInMarginalization]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52D50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52D50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52D68);
  return &stru_254A52D50;
}

void sub_20F0767F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52D68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52D68);
  _Unwind_Resume(a1);
}

void sub_20F076830(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0769FC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0769CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0769E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0769FC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52D88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52D88))
    return &stru_254A52D70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfMapLandmarkFactorsInMarginalization]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52D70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52D70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52D88);
  return &stru_254A52D70;
}

void sub_20F076AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52D88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52D88);
  _Unwind_Resume(a1);
}

void sub_20F076AF4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F076CC0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F076C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F076CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F076CC0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52DA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52DA8))
    return &stru_254A52D90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualXAxisVIOLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52D90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52D90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52DA8);
  return &stru_254A52D90;
}

void sub_20F076D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52DA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52DA8);
  _Unwind_Resume(a1);
}

void sub_20F076DB8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F076F84();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F076F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F076F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F076F84()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52DC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52DC8))
    return &stru_254A52DB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualYAxisVIOLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52DB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52DB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52DC8);
  return &stru_254A52DB0;
}

void sub_20F07703C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52DC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52DC8);
  _Unwind_Resume(a1);
}

void sub_20F07707C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F077248();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F077218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F077234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F077248()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52DE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52DE8))
    return &stru_254A52DD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSERawResidualVIOLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52DD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52DD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52DE8);
  return &stru_254A52DD0;
}

void sub_20F077300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52DE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52DE8);
  _Unwind_Resume(a1);
}

void sub_20F077340(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07750C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0774DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0774F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07750C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52E08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52E08))
    return &stru_254A52DF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanWhitenedResidualXAxisVIOLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52DF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52DF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52E08);
  return &stru_254A52DF0;
}

void sub_20F0775C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52E08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52E08);
  _Unwind_Resume(a1);
}

void sub_20F077604(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0777D0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0777A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0777BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0777D0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52E28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52E28))
    return &stru_254A52E10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanWhitenedResidualYAxisVIOLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52E10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52E10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52E28);
  return &stru_254A52E10;
}

void sub_20F077888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52E28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52E28);
  _Unwind_Resume(a1);
}

void sub_20F0778C8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F077A94();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F077A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F077A80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F077A94()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52E48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52E48))
    return &stru_254A52E30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSEWhitenedResidualVIOLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52E30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52E30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52E48);
  return &stru_254A52E30;
}

void sub_20F077B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52E48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52E48);
  _Unwind_Resume(a1);
}

void sub_20F077B8C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F077D58();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F077D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F077D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F077D58()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52E68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52E68))
    return &stru_254A52E50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRobustResidualXAxisVIOLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52E50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52E50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52E68);
  return &stru_254A52E50;
}

void sub_20F077E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52E68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52E68);
  _Unwind_Resume(a1);
}

void sub_20F077E50(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07801C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F077FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F078008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07801C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52E88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52E88))
    return &stru_254A52E70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRobustResidualYAxisVIOLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52E70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52E70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52E88);
  return &stru_254A52E70;
}

void sub_20F0780D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52E88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52E88);
  _Unwind_Resume(a1);
}

void sub_20F078114(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0782E0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0782B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0782CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0782E0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52EA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52EA8))
    return &stru_254A52E90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSERobustResidualVIOLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52E90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52E90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52EA8);
  return &stru_254A52E90;
}

void sub_20F078398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52EA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52EA8);
  _Unwind_Resume(a1);
}

void sub_20F0783D8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0785A4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F078574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F078590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0785A4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52EC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52EC8))
    return &stru_254A52EB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualXAxisVIOLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52EB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52EB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52EC8);
  return &stru_254A52EB0;
}

void sub_20F07865C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52EC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52EC8);
  _Unwind_Resume(a1);
}

void sub_20F07869C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F078868();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F078838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F078854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F078868()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52EE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52EE8))
    return &stru_254A52ED0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualYAxisVIOLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52ED0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52ED0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52EE8);
  return &stru_254A52ED0;
}

void sub_20F078920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52EE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52EE8);
  _Unwind_Resume(a1);
}

void sub_20F078960(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F078B2C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F078AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F078B18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F078B2C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52F08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52F08))
    return &stru_254A52EF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSERawResidualVIOLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52EF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52EF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52F08);
  return &stru_254A52EF0;
}

void sub_20F078BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52F08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52F08);
  _Unwind_Resume(a1);
}

void sub_20F078C24(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F078DF0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F078DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F078DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F078DF0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52F28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52F28))
    return &stru_254A52F10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanWhitenedResidualXAxisVIOLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52F10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52F10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52F28);
  return &stru_254A52F10;
}

void sub_20F078EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52F28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52F28);
  _Unwind_Resume(a1);
}

void sub_20F078EE8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0790B4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F079084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0790A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0790B4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52F48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52F48))
    return &stru_254A52F30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanWhitenedResidualYAxisVIOLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52F30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52F30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52F48);
  return &stru_254A52F30;
}

void sub_20F07916C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52F48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52F48);
  _Unwind_Resume(a1);
}

void sub_20F0791AC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F079378();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F079348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F079364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F079378()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52F68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52F68))
    return &stru_254A52F50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSEWhitenedResidualVIOLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52F50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52F50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52F68);
  return &stru_254A52F50;
}

void sub_20F079430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52F68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52F68);
  _Unwind_Resume(a1);
}

void sub_20F079470(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07963C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07960C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F079628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07963C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52F88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52F88))
    return &stru_254A52F70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRobustResidualXAxisVIOLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52F70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52F70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52F88);
  return &stru_254A52F70;
}

void sub_20F0796F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52F88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52F88);
  _Unwind_Resume(a1);
}

void sub_20F079734(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F079900();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0798D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0798EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F079900()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52FA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52FA8))
    return &stru_254A52F90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRobustResidualYAxisVIOLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52F90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52F90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52FA8);
  return &stru_254A52F90;
}

void sub_20F0799B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52FA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52FA8);
  _Unwind_Resume(a1);
}

void sub_20F0799F8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F079BC4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F079B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F079BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F079BC4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52FC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52FC8))
    return &stru_254A52FB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSERobustResidualVIOLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52FB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52FB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52FC8);
  return &stru_254A52FB0;
}

void sub_20F079C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52FC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52FC8);
  _Unwind_Resume(a1);
}

void sub_20F079CBC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F079E88();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F079E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F079E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F079E88()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A52FE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A52FE8))
    return &stru_254A52FD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualXAxisStandardDeviationVIOLandmarkFactors]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52FD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52FD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A52FE8);
  return &stru_254A52FD0;
}

void sub_20F079F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A52FE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A52FE8);
  _Unwind_Resume(a1);
}

void sub_20F079F80(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07A14C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07A11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07A138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07A14C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53008);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53008))
    return &stru_254A52FF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualYAxisStandardDeviationVIOLandmarkFactors]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A52FF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A52FF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53008);
  return &stru_254A52FF0;
}

void sub_20F07A204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53008);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53008);
  _Unwind_Resume(a1);
}

void sub_20F07A244(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07A410();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07A3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07A3FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07A410()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53028);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53028))
    return &stru_254A53010;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfRetainedSLAMLandmarkVariables]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53010);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53010, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53028);
  return &stru_254A53010;
}

void sub_20F07A4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53028);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53028);
  _Unwind_Resume(a1);
}

void sub_20F07A508(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07A6D4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07A6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07A6C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07A6D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53048);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53048))
    return &stru_254A53030;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTotalNumberOfSLAMLandmarkVariables]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53030);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53030, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53048);
  return &stru_254A53030;
}

void sub_20F07A78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53048);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53048);
  _Unwind_Resume(a1);
}

void sub_20F07A7CC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07A998();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07A968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07A984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07A998()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53068);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53068))
    return &stru_254A53050;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfDisabledSLAMLandmarkVariables]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53050);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53050, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53068);
  return &stru_254A53050;
}

void sub_20F07AA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53068);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53068);
  _Unwind_Resume(a1);
}

void sub_20F07AA90(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07AC5C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07AC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07AC48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07AC5C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53088);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53088))
    return &stru_254A53070;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTotalNumberOfSLAMLandmarkFactors]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53070);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53070, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53088);
  return &stru_254A53070;
}

void sub_20F07AD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53088);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53088);
  _Unwind_Resume(a1);
}

void sub_20F07AD54(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07AF20();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07AEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07AF0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07AF20()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A530A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A530A8))
    return &stru_254A53090;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfSLAMLandmarkReobservationFactors]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53090);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53090, &dword_20E81F000);
  __cxa_guard_release(&qword_254A530A8);
  return &stru_254A53090;
}

void sub_20F07AFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A530A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A530A8);
  _Unwind_Resume(a1);
}

void sub_20F07B018(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07B1E4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07B1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07B1D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07B1E4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A530C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A530C8))
    return &stru_254A530B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfDisabledSLAMLandmarkFactors]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A530B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A530B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A530C8);
  return &stru_254A530B0;
}

void sub_20F07B29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A530C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A530C8);
  _Unwind_Resume(a1);
}

void sub_20F07B2DC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07B4A8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07B478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07B494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07B4A8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A530E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A530E8))
    return &stru_254A530D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualXAxisSLAMLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A530D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A530D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A530E8);
  return &stru_254A530D0;
}

void sub_20F07B560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A530E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A530E8);
  _Unwind_Resume(a1);
}

void sub_20F07B5A0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07B76C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07B73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07B758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07B76C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53108);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53108))
    return &stru_254A530F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualYAxisSLAMLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A530F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A530F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53108);
  return &stru_254A530F0;
}

void sub_20F07B824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53108);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53108);
  _Unwind_Resume(a1);
}

void sub_20F07B864(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07BA30();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07BA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07BA1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07BA30()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53128);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53128))
    return &stru_254A53110;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSERawResidualSLAMLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53110);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53110, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53128);
  return &stru_254A53110;
}

void sub_20F07BAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53128);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53128);
  _Unwind_Resume(a1);
}

void sub_20F07BB28(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07BCF4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07BCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07BCE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07BCF4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53148);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53148))
    return &stru_254A53130;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanWhitenedResidualXAxisSLAMLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53130);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53130, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53148);
  return &stru_254A53130;
}

void sub_20F07BDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53148);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53148);
  _Unwind_Resume(a1);
}

void sub_20F07BDEC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07BFB8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07BF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07BFA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07BFB8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53168);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53168))
    return &stru_254A53150;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanWhitenedResidualYAxisSLAMLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53150);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53150, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53168);
  return &stru_254A53150;
}

void sub_20F07C070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53168);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53168);
  _Unwind_Resume(a1);
}

void sub_20F07C0B0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07C27C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07C24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07C268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07C27C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53188);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53188))
    return &stru_254A53170;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSEWhitenedResidualSLAMLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53170);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53170, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53188);
  return &stru_254A53170;
}

void sub_20F07C334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53188);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53188);
  _Unwind_Resume(a1);
}

void sub_20F07C374(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07C540();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07C510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07C52C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07C540()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A531A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A531A8))
    return &stru_254A53190;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRobustResidualXAxisSLAMLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53190);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53190, &dword_20E81F000);
  __cxa_guard_release(&qword_254A531A8);
  return &stru_254A53190;
}

void sub_20F07C5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A531A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A531A8);
  _Unwind_Resume(a1);
}

void sub_20F07C638(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07C804();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07C7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07C7F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07C804()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A531C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A531C8))
    return &stru_254A531B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRobustResidualYAxisSLAMLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A531B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A531B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A531C8);
  return &stru_254A531B0;
}

void sub_20F07C8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A531C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A531C8);
  _Unwind_Resume(a1);
}

void sub_20F07C8FC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07CAC8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07CA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07CAB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07CAC8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A531E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A531E8))
    return &stru_254A531D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSERobustResidualSLAMLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A531D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A531D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A531E8);
  return &stru_254A531D0;
}

void sub_20F07CB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A531E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A531E8);
  _Unwind_Resume(a1);
}

void sub_20F07CBC0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07CD8C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07CD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07CD78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07CD8C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53208);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53208))
    return &stru_254A531F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualXAxisSLAMLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A531F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A531F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53208);
  return &stru_254A531F0;
}

void sub_20F07CE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53208);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53208);
  _Unwind_Resume(a1);
}

void sub_20F07CE84(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07D050();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07D020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07D03C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07D050()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53228);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53228))
    return &stru_254A53210;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualYAxisSLAMLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53210);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53210, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53228);
  return &stru_254A53210;
}

void sub_20F07D108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53228);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53228);
  _Unwind_Resume(a1);
}

void sub_20F07D148(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07D314();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07D2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07D300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07D314()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53248);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53248))
    return &stru_254A53230;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSERawResidualSLAMLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53230);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53230, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53248);
  return &stru_254A53230;
}

void sub_20F07D3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53248);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53248);
  _Unwind_Resume(a1);
}

void sub_20F07D40C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07D5D8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07D5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07D5C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07D5D8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53268);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53268))
    return &stru_254A53250;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanWhitenedResidualXAxisSLAMLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53250);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53250, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53268);
  return &stru_254A53250;
}

void sub_20F07D690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53268);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53268);
  _Unwind_Resume(a1);
}

void sub_20F07D6D0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07D89C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07D86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07D888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07D89C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53288);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53288))
    return &stru_254A53270;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanWhitenedResidualYAxisSLAMLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53270);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53270, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53288);
  return &stru_254A53270;
}

void sub_20F07D954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53288);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53288);
  _Unwind_Resume(a1);
}

void sub_20F07D994(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07DB60();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07DB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07DB4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07DB60()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A532A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A532A8))
    return &stru_254A53290;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSEWhitenedResidualSLAMLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53290);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53290, &dword_20E81F000);
  __cxa_guard_release(&qword_254A532A8);
  return &stru_254A53290;
}

void sub_20F07DC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A532A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A532A8);
  _Unwind_Resume(a1);
}

void sub_20F07DC58(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07DE24();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07DDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07DE10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07DE24()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A532C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A532C8))
    return &stru_254A532B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRobustResidualXAxisSLAMLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A532B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A532B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A532C8);
  return &stru_254A532B0;
}

void sub_20F07DEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A532C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A532C8);
  _Unwind_Resume(a1);
}

void sub_20F07DF1C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07E0E8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07E0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07E0D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07E0E8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A532E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A532E8))
    return &stru_254A532D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRobustResidualYAxisSLAMLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A532D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A532D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A532E8);
  return &stru_254A532D0;
}

void sub_20F07E1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A532E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A532E8);
  _Unwind_Resume(a1);
}

void sub_20F07E1E0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07E3AC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07E37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07E398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07E3AC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53308);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53308))
    return &stru_254A532F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSERobustResidualSLAMLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A532F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A532F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53308);
  return &stru_254A532F0;
}

void sub_20F07E464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53308);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53308);
  _Unwind_Resume(a1);
}

void sub_20F07E4A4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07E670();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07E640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07E65C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07E670()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53328);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53328))
    return &stru_254A53310;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualXAxisStandardDeviationSLAMLandmarkFactors]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53310);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53310, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53328);
  return &stru_254A53310;
}

void sub_20F07E728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53328);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53328);
  _Unwind_Resume(a1);
}

void sub_20F07E768(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07E934();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07E904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07E920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07E934()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53348);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53348))
    return &stru_254A53330;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualYAxisStandardDeviationSLAMLandmarkFactors]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53330);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53330, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53348);
  return &stru_254A53330;
}

void sub_20F07E9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53348);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53348);
  _Unwind_Resume(a1);
}

void sub_20F07EA2C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07EBF8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07EBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07EBE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07EBF8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53368);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53368))
    return &stru_254A53350;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTotalNumberOfMapLandmarkFactors]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53350);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53350, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53368);
  return &stru_254A53350;
}

void sub_20F07ECB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53368);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53368);
  _Unwind_Resume(a1);
}

void sub_20F07ECF0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07EEBC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07EE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07EEA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07EEBC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53388);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53388))
    return &stru_254A53370;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfDisabledMapLandmarkFactors]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53370);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53370, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53388);
  return &stru_254A53370;
}

void sub_20F07EF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53388);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53388);
  _Unwind_Resume(a1);
}

void sub_20F07EFB4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07F180();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07F150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07F16C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07F180()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A533A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A533A8))
    return &stru_254A53390;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualXAxisMapLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53390);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53390, &dword_20E81F000);
  __cxa_guard_release(&qword_254A533A8);
  return &stru_254A53390;
}

void sub_20F07F238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A533A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A533A8);
  _Unwind_Resume(a1);
}

void sub_20F07F278(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07F444();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07F414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07F430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07F444()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A533C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A533C8))
    return &stru_254A533B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualYAxisMapLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A533B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A533B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A533C8);
  return &stru_254A533B0;
}

void sub_20F07F4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A533C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A533C8);
  _Unwind_Resume(a1);
}

void sub_20F07F53C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07F708();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07F6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07F6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07F708()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A533E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A533E8))
    return &stru_254A533D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSERawResidualMapLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A533D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A533D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A533E8);
  return &stru_254A533D0;
}

void sub_20F07F7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A533E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A533E8);
  _Unwind_Resume(a1);
}

void sub_20F07F800(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07F9CC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07F99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07F9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07F9CC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53408);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53408))
    return &stru_254A533F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanWhitenedResidualXAxisMapLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A533F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A533F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53408);
  return &stru_254A533F0;
}

void sub_20F07FA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53408);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53408);
  _Unwind_Resume(a1);
}

void sub_20F07FAC4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07FC90();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07FC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07FC7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07FC90()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53428);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53428))
    return &stru_254A53410;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanWhitenedResidualYAxisMapLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53410);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53410, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53428);
  return &stru_254A53410;
}

void sub_20F07FD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53428);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53428);
  _Unwind_Resume(a1);
}

void sub_20F07FD88(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F07FF54();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F07FF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F07FF40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F07FF54()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53448);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53448))
    return &stru_254A53430;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSEWhitenedResidualMapLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53430);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53430, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53448);
  return &stru_254A53430;
}

void sub_20F08000C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53448);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53448);
  _Unwind_Resume(a1);
}

void sub_20F08004C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F080218();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0801E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F080204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F080218()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53468);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53468))
    return &stru_254A53450;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRobustResidualXAxisMapLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53450);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53450, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53468);
  return &stru_254A53450;
}

void sub_20F0802D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53468);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53468);
  _Unwind_Resume(a1);
}

void sub_20F080310(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0804DC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0804AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0804C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0804DC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53488);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53488))
    return &stru_254A53470;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRobustResidualYAxisMapLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53470);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53470, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53488);
  return &stru_254A53470;
}

void sub_20F080594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53488);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53488);
  _Unwind_Resume(a1);
}

void sub_20F0805D4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0807A0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F080770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08078C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0807A0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A534A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A534A8))
    return &stru_254A53490;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSERobustResidualMapLandmarkFactorsBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53490);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53490, &dword_20E81F000);
  __cxa_guard_release(&qword_254A534A8);
  return &stru_254A53490;
}

void sub_20F080858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A534A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A534A8);
  _Unwind_Resume(a1);
}

void sub_20F080898(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F080A64();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F080A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F080A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F080A64()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A534C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A534C8))
    return &stru_254A534B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualXAxisMapLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A534B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A534B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A534C8);
  return &stru_254A534B0;
}

void sub_20F080B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A534C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A534C8);
  _Unwind_Resume(a1);
}

void sub_20F080B5C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F080D28();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F080CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F080D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F080D28()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A534E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A534E8))
    return &stru_254A534D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualYAxisMapLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A534D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A534D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A534E8);
  return &stru_254A534D0;
}

void sub_20F080DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A534E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A534E8);
  _Unwind_Resume(a1);
}

void sub_20F080E20(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F080FEC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F080FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F080FD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F080FEC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53508);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53508))
    return &stru_254A534F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSERawResidualMapLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A534F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A534F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53508);
  return &stru_254A534F0;
}

void sub_20F0810A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53508);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53508);
  _Unwind_Resume(a1);
}

void sub_20F0810E4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0812B0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F081280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08129C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0812B0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53528);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53528))
    return &stru_254A53510;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanWhitenedResidualXAxisMapLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53510);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53510, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53528);
  return &stru_254A53510;
}

void sub_20F081368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53528);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53528);
  _Unwind_Resume(a1);
}

void sub_20F0813A8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F081574();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F081544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F081560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F081574()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53548);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53548))
    return &stru_254A53530;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanWhitenedResidualYAxisMapLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53530);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53530, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53548);
  return &stru_254A53530;
}

void sub_20F08162C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53548);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53548);
  _Unwind_Resume(a1);
}

void sub_20F08166C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F081838();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F081808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F081824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F081838()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53568);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53568))
    return &stru_254A53550;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSEWhitenedResidualMapLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53550);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53550, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53568);
  return &stru_254A53550;
}

void sub_20F0818F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53568);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53568);
  _Unwind_Resume(a1);
}

void sub_20F081930(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F081AFC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F081ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F081AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F081AFC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53588);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53588))
    return &stru_254A53570;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRobustResidualXAxisMapLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53570);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53570, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53588);
  return &stru_254A53570;
}

void sub_20F081BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53588);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53588);
  _Unwind_Resume(a1);
}

void sub_20F081BF4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F081DC0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F081D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F081DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F081DC0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A535A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A535A8))
    return &stru_254A53590;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRobustResidualYAxisMapLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53590);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53590, &dword_20E81F000);
  __cxa_guard_release(&qword_254A535A8);
  return &stru_254A53590;
}

void sub_20F081E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A535A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A535A8);
  _Unwind_Resume(a1);
}

void sub_20F081EB8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F082084();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F082054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F082070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F082084()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A535C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A535C8))
    return &stru_254A535B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRMSERobustResidualMapLandmarkFactorsAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A535B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A535B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A535C8);
  return &stru_254A535B0;
}

void sub_20F08213C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A535C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A535C8);
  _Unwind_Resume(a1);
}

void sub_20F08217C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F082348();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F082318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F082334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F082348()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A535E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A535E8))
    return &stru_254A535D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualXAxisStandardDeviationMapLandmarkFactors]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A535D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A535D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A535E8);
  return &stru_254A535D0;
}

void sub_20F082400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A535E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A535E8);
  _Unwind_Resume(a1);
}

void sub_20F082440(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08260C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0825DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0825F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08260C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53608);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53608))
    return &stru_254A535F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMeanRawResidualYAxisStandardDeviationMapLandmarkFactors]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A535F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A535F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53608);
  return &stru_254A535F0;
}

void sub_20F0826C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53608);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53608);
  _Unwind_Resume(a1);
}

void sub_20F082704(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0828D0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0828A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0828BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0828D0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53628);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53628))
    return &stru_254A53610;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisOrientationPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53610);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53610, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53628);
  return &stru_254A53610;
}

void sub_20F082988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53628);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53628);
  _Unwind_Resume(a1);
}

void sub_20F0829C8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F082B94();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F082B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F082B80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F082B94()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53648);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53648))
    return &stru_254A53630;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisOrientationPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53630);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53630, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53648);
  return &stru_254A53630;
}

void sub_20F082C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53648);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53648);
  _Unwind_Resume(a1);
}

void sub_20F082C8C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F082E58();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F082E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F082E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F082E58()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53668);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53668))
    return &stru_254A53650;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisOrientationPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53650);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53650, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53668);
  return &stru_254A53650;
}

void sub_20F082F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53668);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53668);
  _Unwind_Resume(a1);
}

void sub_20F082F50(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08311C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0830EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F083108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08311C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53688);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53688))
    return &stru_254A53670;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisPositionPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53670);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53670, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53688);
  return &stru_254A53670;
}

void sub_20F0831D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53688);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53688);
  _Unwind_Resume(a1);
}

void sub_20F083214(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0833E0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0833B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0833CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0833E0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A536A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A536A8))
    return &stru_254A53690;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisPositionPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53690);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53690, &dword_20E81F000);
  __cxa_guard_release(&qword_254A536A8);
  return &stru_254A53690;
}

void sub_20F083498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A536A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A536A8);
  _Unwind_Resume(a1);
}

void sub_20F0834D8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0836A4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F083674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F083690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0836A4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A536C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A536C8))
    return &stru_254A536B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisPositionPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A536B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A536B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A536C8);
  return &stru_254A536B0;
}

void sub_20F08375C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A536C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A536C8);
  _Unwind_Resume(a1);
}

void sub_20F08379C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F083968();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F083938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F083954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F083968()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A536E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A536E8))
    return &stru_254A536D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisVelocityPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A536D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A536D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A536E8);
  return &stru_254A536D0;
}

void sub_20F083A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A536E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A536E8);
  _Unwind_Resume(a1);
}

void sub_20F083A60(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F083C2C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F083BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F083C18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F083C2C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53708);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53708))
    return &stru_254A536F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisVelocityPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A536F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A536F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53708);
  return &stru_254A536F0;
}

void sub_20F083CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53708);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53708);
  _Unwind_Resume(a1);
}

void sub_20F083D24(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F083EF0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F083EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F083EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F083EF0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53728);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53728))
    return &stru_254A53710;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisVelocityPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53710);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53710, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53728);
  return &stru_254A53710;
}

void sub_20F083FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53728);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53728);
  _Unwind_Resume(a1);
}

void sub_20F083FE8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0841B4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F084184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0841A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0841B4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53748);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53748))
    return &stru_254A53730;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisGyroscopeBiasPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53730);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53730, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53748);
  return &stru_254A53730;
}

void sub_20F08426C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53748);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53748);
  _Unwind_Resume(a1);
}

void sub_20F0842AC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F084478();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F084448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F084464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F084478()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53768);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53768))
    return &stru_254A53750;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisGyroscopeBiasPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53750);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53750, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53768);
  return &stru_254A53750;
}

void sub_20F084530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53768);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53768);
  _Unwind_Resume(a1);
}

void sub_20F084570(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08473C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08470C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F084728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08473C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53788);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53788))
    return &stru_254A53770;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisGyroscopeBiasPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53770);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53770, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53788);
  return &stru_254A53770;
}

void sub_20F0847F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53788);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53788);
  _Unwind_Resume(a1);
}

void sub_20F084834(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F084A00();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0849D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0849EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F084A00()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A537A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A537A8))
    return &stru_254A53790;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisAccelerometerBiasPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53790);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53790, &dword_20E81F000);
  __cxa_guard_release(&qword_254A537A8);
  return &stru_254A53790;
}

void sub_20F084AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A537A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A537A8);
  _Unwind_Resume(a1);
}

void sub_20F084AF8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F084CC4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F084C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F084CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F084CC4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A537C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A537C8))
    return &stru_254A537B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisAccelerometerBiasPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A537B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A537B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A537C8);
  return &stru_254A537B0;
}

void sub_20F084D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A537C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A537C8);
  _Unwind_Resume(a1);
}

void sub_20F084DBC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F084F88();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F084F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F084F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F084F88()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A537E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A537E8))
    return &stru_254A537D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisAccelerometerBiasPriorTermBeforeSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A537D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A537D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A537E8);
  return &stru_254A537D0;
}

void sub_20F085040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A537E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A537E8);
  _Unwind_Resume(a1);
}

void sub_20F085080(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08524C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08521C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F085238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08524C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53808);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53808))
    return &stru_254A537F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisOrientationPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A537F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A537F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53808);
  return &stru_254A537F0;
}

void sub_20F085304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53808);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53808);
  _Unwind_Resume(a1);
}

void sub_20F085344(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F085510();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0854E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0854FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F085510()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53828);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53828))
    return &stru_254A53810;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisOrientationPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53810);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53810, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53828);
  return &stru_254A53810;
}

void sub_20F0855C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53828);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53828);
  _Unwind_Resume(a1);
}

void sub_20F085608(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0857D4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0857A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0857C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0857D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53848);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53848))
    return &stru_254A53830;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisOrientationPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53830);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53830, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53848);
  return &stru_254A53830;
}

void sub_20F08588C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53848);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53848);
  _Unwind_Resume(a1);
}

void sub_20F0858CC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F085A98();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F085A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F085A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F085A98()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53868);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53868))
    return &stru_254A53850;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisPositionPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53850);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53850, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53868);
  return &stru_254A53850;
}

void sub_20F085B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53868);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53868);
  _Unwind_Resume(a1);
}

void sub_20F085B90(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F085D5C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F085D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F085D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F085D5C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53888);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53888))
    return &stru_254A53870;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisPositionPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53870);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53870, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53888);
  return &stru_254A53870;
}

void sub_20F085E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53888);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53888);
  _Unwind_Resume(a1);
}

void sub_20F085E54(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F086020();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F085FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08600C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F086020()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A538A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A538A8))
    return &stru_254A53890;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisPositionPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53890);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53890, &dword_20E81F000);
  __cxa_guard_release(&qword_254A538A8);
  return &stru_254A53890;
}

void sub_20F0860D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A538A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A538A8);
  _Unwind_Resume(a1);
}

void sub_20F086118(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0862E4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0862B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0862D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0862E4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A538C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A538C8))
    return &stru_254A538B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisVelocityPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A538B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A538B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A538C8);
  return &stru_254A538B0;
}

void sub_20F08639C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A538C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A538C8);
  _Unwind_Resume(a1);
}

void sub_20F0863DC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0865A8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F086578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F086594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0865A8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A538E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A538E8))
    return &stru_254A538D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisVelocityPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A538D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A538D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A538E8);
  return &stru_254A538D0;
}

void sub_20F086660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A538E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A538E8);
  _Unwind_Resume(a1);
}

void sub_20F0866A0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08686C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08683C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F086858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08686C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53908);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53908))
    return &stru_254A538F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisVelocityPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A538F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A538F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53908);
  return &stru_254A538F0;
}

void sub_20F086924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53908);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53908);
  _Unwind_Resume(a1);
}

void sub_20F086964(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F086B30();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F086B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F086B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F086B30()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53928);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53928))
    return &stru_254A53910;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisGyroscopeBiasPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53910);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53910, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53928);
  return &stru_254A53910;
}

void sub_20F086BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53928);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53928);
  _Unwind_Resume(a1);
}

void sub_20F086C28(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F086DF4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F086DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F086DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F086DF4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53948);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53948))
    return &stru_254A53930;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisGyroscopeBiasPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53930);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53930, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53948);
  return &stru_254A53930;
}

void sub_20F086EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53948);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53948);
  _Unwind_Resume(a1);
}

void sub_20F086EEC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0870B8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F087088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0870A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0870B8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53968);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53968))
    return &stru_254A53950;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisGyroscopeBiasPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53950);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53950, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53968);
  return &stru_254A53950;
}

void sub_20F087170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53968);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53968);
  _Unwind_Resume(a1);
}

void sub_20F0871B0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08737C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08734C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F087368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08737C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53988);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53988))
    return &stru_254A53970;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisAccelerometerBiasPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53970);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53970, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53988);
  return &stru_254A53970;
}

void sub_20F087434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53988);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53988);
  _Unwind_Resume(a1);
}

void sub_20F087474(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F087640();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F087610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08762C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F087640()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A539A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A539A8))
    return &stru_254A53990;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisAccelerometerBiasPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53990);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53990, &dword_20E81F000);
  __cxa_guard_release(&qword_254A539A8);
  return &stru_254A53990;
}

void sub_20F0876F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A539A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A539A8);
  _Unwind_Resume(a1);
}

void sub_20F087738(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F087904();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0878D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0878F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F087904()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A539C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A539C8))
    return &stru_254A539B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisAccelerometerBiasPriorTermAfterSolve]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A539B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A539B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A539C8);
  return &stru_254A539B0;
}

void sub_20F0879BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A539C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A539C8);
  _Unwind_Resume(a1);
}

void sub_20F0879FC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F087BC8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F087B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F087BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F087BC8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A539E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A539E8))
    return &stru_254A539D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisOrientationStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A539D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A539D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A539E8);
  return &stru_254A539D0;
}

void sub_20F087C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A539E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A539E8);
  _Unwind_Resume(a1);
}

void sub_20F087CC0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F087E8C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F087E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F087E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F087E8C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53A08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53A08))
    return &stru_254A539F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisOrientationStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A539F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A539F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53A08);
  return &stru_254A539F0;
}

void sub_20F087F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53A08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53A08);
  _Unwind_Resume(a1);
}

void sub_20F087F84(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F088150();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F088120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08813C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F088150()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53A28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53A28))
    return &stru_254A53A10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisOrientationStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53A10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53A10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53A28);
  return &stru_254A53A10;
}

void sub_20F088208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53A28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53A28);
  _Unwind_Resume(a1);
}

void sub_20F088248(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F088414();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0883E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F088400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F088414()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53A48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53A48))
    return &stru_254A53A30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisPositionStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53A30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53A30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53A48);
  return &stru_254A53A30;
}

void sub_20F0884CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53A48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53A48);
  _Unwind_Resume(a1);
}

void sub_20F08850C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0886D8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0886A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0886C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0886D8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53A68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53A68))
    return &stru_254A53A50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisPositionStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53A50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53A50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53A68);
  return &stru_254A53A50;
}

void sub_20F088790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53A68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53A68);
  _Unwind_Resume(a1);
}

void sub_20F0887D0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08899C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08896C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F088988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08899C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53A88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53A88))
    return &stru_254A53A70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisPositionStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53A70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53A70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53A88);
  return &stru_254A53A70;
}

void sub_20F088A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53A88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53A88);
  _Unwind_Resume(a1);
}

void sub_20F088A94(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F088C60();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F088C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F088C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F088C60()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53AA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53AA8))
    return &stru_254A53A90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisVelocityStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53A90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53A90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53AA8);
  return &stru_254A53A90;
}

void sub_20F088D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53AA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53AA8);
  _Unwind_Resume(a1);
}

void sub_20F088D58(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F088F24();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F088EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F088F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F088F24()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53AC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53AC8))
    return &stru_254A53AB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisVelocityStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53AB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53AB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53AC8);
  return &stru_254A53AB0;
}

void sub_20F088FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53AC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53AC8);
  _Unwind_Resume(a1);
}

void sub_20F08901C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0891E8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0891B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0891D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0891E8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53AE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53AE8))
    return &stru_254A53AD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisVelocityStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53AD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53AD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53AE8);
  return &stru_254A53AD0;
}

void sub_20F0892A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53AE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53AE8);
  _Unwind_Resume(a1);
}

void sub_20F0892E0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0894AC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08947C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F089498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0894AC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53B08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53B08))
    return &stru_254A53AF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisGyroscopeBiasStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53AF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53AF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53B08);
  return &stru_254A53AF0;
}

void sub_20F089564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53B08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53B08);
  _Unwind_Resume(a1);
}

void sub_20F0895A4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F089770();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F089740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08975C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F089770()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53B28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53B28))
    return &stru_254A53B10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisGyroscopeBiasStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53B10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53B10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53B28);
  return &stru_254A53B10;
}

void sub_20F089828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53B28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53B28);
  _Unwind_Resume(a1);
}

void sub_20F089868(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F089A34();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F089A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F089A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F089A34()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53B48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53B48))
    return &stru_254A53B30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisGyroscopeBiasStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53B30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53B30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53B48);
  return &stru_254A53B30;
}

void sub_20F089AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53B48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53B48);
  _Unwind_Resume(a1);
}

void sub_20F089B2C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F089CF8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F089CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F089CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F089CF8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53B68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53B68))
    return &stru_254A53B50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualXAxisAccelerometerBiasStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53B50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53B50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53B68);
  return &stru_254A53B50;
}

void sub_20F089DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53B68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53B68);
  _Unwind_Resume(a1);
}

void sub_20F089DF0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F089FBC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F089F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F089FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F089FBC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53B88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53B88))
    return &stru_254A53B70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualYAxisAccelerometerBiasStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53B70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53B70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53B88);
  return &stru_254A53B70;
}

void sub_20F08A074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53B88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53B88);
  _Unwind_Resume(a1);
}

void sub_20F08A0B4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08A280();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08A250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08A26C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08A280()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53BA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53BA8))
    return &stru_254A53B90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRawResidualZAxisAccelerometerBiasStandardDeviationPriorTerm]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53B90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53B90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53BA8);
  return &stru_254A53B90;
}

void sub_20F08A338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53BA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53BA8);
  _Unwind_Resume(a1);
}

void sub_20F08A378(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08A544();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08A514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08A530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08A544()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53BC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53BC8))
    return &stru_254A53BB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kStationaryIMUGravityCorrection]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53BB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53BB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53BC8);
  return &stru_254A53BB0;
}

void sub_20F08A5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53BC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53BC8);
  _Unwind_Resume(a1);
}

void sub_20F08A63C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08A808();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08A7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08A7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08A808()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53BE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53BE8))
    return &stru_254A53BD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kVisionBasedOrientationCorrection]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53BD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53BD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53BE8);
  return &stru_254A53BD0;
}

void sub_20F08A8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53BE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53BE8);
  _Unwind_Resume(a1);
}

void sub_20F08A900(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08AACC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08AA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08AAB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08AACC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53C08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53C08))
    return &stru_254A53BF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kImuMessageReceived]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53BF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53BF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53C08);
  return &stru_254A53BF0;
}

void sub_20F08AB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53C08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53C08);
  _Unwind_Resume(a1);
}

void sub_20F08ABC4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08AD90();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08AD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08AD7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08AD90()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53C28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53C28))
    return &stru_254A53C10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kImuMessageDropDuration]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53C10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53C10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53C28);
  return &stru_254A53C10;
}

void sub_20F08AE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53C28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53C28);
  _Unwind_Resume(a1);
}

void sub_20F08AE88(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08B054();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08B024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08B040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08B054()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53C48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53C48))
    return &stru_254A53C30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kFrameMessageDropDuration]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53C30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53C30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53C48);
  return &stru_254A53C30;
}

void sub_20F08B10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53C48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53C48);
  _Unwind_Resume(a1);
}

void sub_20F08B14C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08B318();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08B2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08B304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08B318()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53C68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53C68))
    return &stru_254A53C50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIMUCameraDiscrepancyWithStationaryIMU]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53C50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53C50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53C68);
  return &stru_254A53C50;
}

void sub_20F08B3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53C68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53C68);
  _Unwind_Resume(a1);
}

void sub_20F08B410(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08B5DC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08B5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08B5C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08B5DC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53C88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53C88))
    return &stru_254A53C70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIMUCameraDiscrepancyWithStationaryVision]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53C70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53C70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53C88);
  return &stru_254A53C70;
}

void sub_20F08B694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53C88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53C88);
  _Unwind_Resume(a1);
}

void sub_20F08B6D4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08B8A0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08B870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08B88C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08B8A0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53CA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53CA8))
    return &stru_254A53C90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIMUCameraDiscrepancyWithStationaryIMUOccludedCamera]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53C90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53C90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53CA8);
  return &stru_254A53C90;
}

void sub_20F08B958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53CA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53CA8);
  _Unwind_Resume(a1);
}

void sub_20F08B998(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08BB64();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08BB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08BB50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08BB64()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53CC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53CC8))
    return &stru_254A53CB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kVisualSLAMMovingObjectDrift]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53CB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53CB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53CC8);
  return &stru_254A53CB0;
}

void sub_20F08BC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53CC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53CC8);
  _Unwind_Resume(a1);
}

void sub_20F08BC5C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08BE28();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08BDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08BE14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08BE28()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53CE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53CE8))
    return &stru_254A53CD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kVisualSLAMFrameToFramePnPFailure]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53CD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53CD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53CE8);
  return &stru_254A53CD0;
}

void sub_20F08BEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53CE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53CE8);
  _Unwind_Resume(a1);
}

void sub_20F08BF20(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08C0EC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08C0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08C0D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08C0EC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53D08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53D08))
    return &stru_254A53CF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kLargeCameraExtrinsicOffsetWrtDefault]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53CF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53CF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53D08);
  return &stru_254A53CF0;
}

void sub_20F08C1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53D08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53D08);
  _Unwind_Resume(a1);
}

void sub_20F08C1E4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08C3B0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08C380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08C39C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08C3B0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53D28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53D28))
    return &stru_254A53D10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kMaxCameraExtrinsicRotationDiffWrtDefualtinRad]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53D10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53D10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53D28);
  return &stru_254A53D10;
}

void sub_20F08C468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53D28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53D28);
  _Unwind_Resume(a1);
}

void sub_20F08C4A8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08C674();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08C644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08C660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08C674()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53D48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53D48))
    return &stru_254A53D30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kVIOLandmarkRepeatabilityinAllBA]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53D30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53D30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53D48);
  return &stru_254A53D30;
}

void sub_20F08C72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53D48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53D48);
  _Unwind_Resume(a1);
}

void sub_20F08C76C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08C938();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08C908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08C924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08C938()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53D68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53D68))
    return &stru_254A53D50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kSLAMLandmarkRepeatabilityinAllBA]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53D50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53D50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53D68);
  return &stru_254A53D50;
}

void sub_20F08C9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53D68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53D68);
  _Unwind_Resume(a1);
}

void sub_20F08CA30(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08CBFC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08CBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08CBE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08CBFC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53D88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53D88))
    return &stru_254A53D70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kVIOLandmarkRepeatabilityinRegularBA]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53D70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53D70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53D88);
  return &stru_254A53D70;
}

void sub_20F08CCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53D88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53D88);
  _Unwind_Resume(a1);
}

void sub_20F08CCF4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08CEC0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08CE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08CEAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08CEC0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53DA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53DA8))
    return &stru_254A53D90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kSLAMLandmarkRepeatabilityinRegularBA]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53D90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53D90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53DA8);
  return &stru_254A53D90;
}

void sub_20F08CF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53DA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53DA8);
  _Unwind_Resume(a1);
}

void sub_20F08CFB8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08D184();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08D154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08D170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08D184()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53DC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53DC8))
    return &stru_254A53DB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kDeviceOn]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53DB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53DB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53DC8);
  return &stru_254A53DB0;
}

void sub_20F08D23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53DC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53DC8);
  _Unwind_Resume(a1);
}

void sub_20F08D27C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08D448();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08D418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08D434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08D448()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53DE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53DE8))
    return &stru_254A53DD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kOahuCameraLux]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53DD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53DD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53DE8);
  return &stru_254A53DD0;
}

void sub_20F08D500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53DE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53DE8);
  _Unwind_Resume(a1);
}

void sub_20F08D540(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08D70C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08D6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08D6F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08D70C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53E08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53E08))
    return &stru_254A53DF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kKauaiCameraLux]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53DF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53DF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53E08);
  return &stru_254A53DF0;
}

void sub_20F08D7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53E08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53E08);
  _Unwind_Resume(a1);
}

void sub_20F08D804(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08D9D0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08D9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08D9BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08D9D0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53E28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53E28))
    return &stru_254A53E10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kHintElapsedTimeSinceStartOfSession]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53E10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53E10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53E28);
  return &stru_254A53E10;
}

void sub_20F08DA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53E28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53E28);
  _Unwind_Resume(a1);
}

void sub_20F08DAC8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08DC94();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08DC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08DC80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08DC94()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53E48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53E48))
    return &stru_254A53E30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kHintElapsedTimeSinceLastReinit]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53E30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53E30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53E48);
  return &stru_254A53E30;
}

void sub_20F08DD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53E48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53E48);
  _Unwind_Resume(a1);
}

void sub_20F08DD8C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08DF58();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08DF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08DF44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08DF58()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53E68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53E68))
    return &stru_254A53E50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kDelayReinitDueToSevereLuxFluctuations]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53E50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53E50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53E68);
  return &stru_254A53E50;
}

void sub_20F08E010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53E68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53E68);
  _Unwind_Resume(a1);
}

void sub_20F08E050(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08E21C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08E1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08E208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08E21C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53E88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53E88))
    return &stru_254A53E70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kSlidingStationaryPositionXStd]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53E70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53E70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53E88);
  return &stru_254A53E70;
}

void sub_20F08E2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53E88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53E88);
  _Unwind_Resume(a1);
}

void sub_20F08E314(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08E4E0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08E4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08E4CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08E4E0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53EA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53EA8))
    return &stru_254A53E90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kSlidingStationaryPositionYStd]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53E90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53E90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53EA8);
  return &stru_254A53E90;
}

void sub_20F08E598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53EA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53EA8);
  _Unwind_Resume(a1);
}

void sub_20F08E5D8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08E7A4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08E774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08E790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08E7A4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53EC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53EC8))
    return &stru_254A53EB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kSlidingStationaryPositionZStd]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53EB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53EB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53EC8);
  return &stru_254A53EB0;
}

void sub_20F08E85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53EC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53EC8);
  _Unwind_Resume(a1);
}

void sub_20F08E89C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08EA68();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08EA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08EA54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08EA68()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53EE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53EE8))
    return &stru_254A53ED0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kPlaneBasedRejectionCentroidToCameraDistance]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53ED0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53ED0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53EE8);
  return &stru_254A53ED0;
}

void sub_20F08EB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53EE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53EE8);
  _Unwind_Resume(a1);
}

void sub_20F08EB60(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08ED2C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08ECFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08ED18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08ED2C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53F08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53F08))
    return &stru_254A53EF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kPlaneBasedRejectionAvgInlierPointToCentroidDistance]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53EF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53EF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53F08);
  return &stru_254A53EF0;
}

void sub_20F08EDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53F08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53F08);
  _Unwind_Resume(a1);
}

void sub_20F08EE24(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08EFF0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08EFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08EFDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08EFF0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53F28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53F28))
    return &stru_254A53F10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kPlaneBasedRejectionInlierCount]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53F10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53F10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53F28);
  return &stru_254A53F10;
}

void sub_20F08F0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53F28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53F28);
  _Unwind_Resume(a1);
}

void sub_20F08F0E8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08F2B4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08F284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08F2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08F2B4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53F48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53F48))
    return &stru_254A53F30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kPlaneBasedRejectionInlierRatio]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53F30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53F30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53F48);
  return &stru_254A53F30;
}

void sub_20F08F36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53F48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53F48);
  _Unwind_Resume(a1);
}

void sub_20F08F3AC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08F578();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08F548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08F564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08F578()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53F68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53F68))
    return &stru_254A53F50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kOneTimeLocationRequest]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53F50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53F50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53F68);
  return &stru_254A53F50;
}

void sub_20F08F630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53F68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53F68);
  _Unwind_Resume(a1);
}

void sub_20F08F670(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08F83C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08F80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08F828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08F83C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53F88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53F88))
    return &stru_254A53F70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIsLowStereoCoverage]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53F70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53F70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53F88);
  return &stru_254A53F70;
}

void sub_20F08F8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53F88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53F88);
  _Unwind_Resume(a1);
}

void sub_20F08F934(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08FB00();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08FAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08FAEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08FB00()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53FA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53FA8))
    return &stru_254A53F90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kLSExecutableTarget]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53F90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53F90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53FA8);
  return &stru_254A53F90;
}

void sub_20F08FBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53FA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53FA8);
  _Unwind_Resume(a1);
}

void sub_20F08FBF8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F08FDC4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F08FD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F08FDB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F08FDC4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53FC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53FC8))
    return &stru_254A53FB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTotalLSOffloadedIterationNum]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53FB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53FB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53FC8);
  return &stru_254A53FB0;
}

void sub_20F08FE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53FC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53FC8);
  _Unwind_Resume(a1);
}

void sub_20F08FEBC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F090088();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F090058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F090074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F090088()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A53FE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A53FE8))
    return &stru_254A53FD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTotalLSFallbackIterationNum]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53FD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53FD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A53FE8);
  return &stru_254A53FD0;
}

void sub_20F090140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A53FE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A53FE8);
  _Unwind_Resume(a1);
}

void sub_20F090180(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F09034C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F09031C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F090338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F09034C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54008);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54008))
    return &stru_254A53FF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfSemanticsOutliers]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A53FF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A53FF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54008);
  return &stru_254A53FF0;
}

void sub_20F090404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54008);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54008);
  _Unwind_Resume(a1);
}

void sub_20F090444(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F090610();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0905E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0905FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F090610()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54028);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54028))
    return &stru_254A54010;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfNearbySemanticsKeyframes]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54010);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54010, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54028);
  return &stru_254A54010;
}

void sub_20F0906C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54028);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54028);
  _Unwind_Resume(a1);
}

void sub_20F090708(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0908D4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0908A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0908C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0908D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54048);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54048))
    return &stru_254A54030;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfSemanticsKeyframes]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A54030);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54030, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54048);
  return &stru_254A54030;
}

void sub_20F09098C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A54048);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A54048);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0909CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  char *v7;
  size_t v8;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (*(_BYTE *)(a2 + 312))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(const void **)a2;
    v4 = *(_QWORD *)(a2 + 8);
    v6 = v4 - *(_QWORD *)a2;
    if (v4 != *(_QWORD *)a2)
    {
      if (v6 < 0)
        sub_20E867F44();
      v7 = (char *)operator new(v4 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = &v7[128 * (v6 >> 7)];
      v8 = v6 & 0xFFFFFFFFFFFFFF80;
      memcpy(v7, v5, v8);
      *(_QWORD *)(a1 + 8) = &v7[v8];
    }
    memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x120uLL);
    *(_BYTE *)(a1 + 312) = 1;
  }
  return a1;
}

void sub_20F090A80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(v1 + 312))
  {
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20F090AB8()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F090ACC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C9F83D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20F090B0C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9F83D8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20F090B34(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  _QWORD *result;
  _DWORD *v12;
  _DWORD *v13;
  std::logic_error *exception;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int8x8_t *v18;
  int8x8_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __n128 v40;
  __n128 v41;
  uint64_t v42;
  int8x8_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _OWORD v51[4];
  uint64_t v52;
  unint64_t v53;

  v5 = *a2;
  v6 = v5 >> 16;
  v53 = (v5 >> 16) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)*a2 << 32);
  v7 = *(_QWORD **)(a1 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 744) + 24 * (v5 >> 16));
  v9 = *(_DWORD **)(a3 + 24);
  v10 = v9[248];
  if (v10 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_69;
    }
    v10 = v9[248];
  }
  if (!v10)
    goto LABEL_68;
  result = memmove((void *)(v8 + 216 * (unsigned __int16)v5 + 112), v9, 0x48uLL);
  v12 = (_DWORD *)v7[1];
  v13 = (_DWORD *)v7[2];
  if (v12 != v13)
  {
    while (*v12 != (_DWORD)v6)
    {
      v12 += 272;
      if (v12 == v13)
        goto LABEL_8;
    }
  }
  if (v12 == v13)
  {
LABEL_8:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E92751C(exception, "Requested camera id not found.");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v15 = v12 + 132;
  v16 = v12 + 264;
  if (!(_WORD)v5)
    v16 = v15;
  *(_QWORD *)(v8 + 216 * (unsigned __int16)v5 + 184) = *v16;
  if (*(_QWORD *)(v7[921] + 23224))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 432))(v7);
    v17 = result[608];
    if (!*(_BYTE *)(v17 + 11664)
      && *(_DWORD *)(v17 + 1936) == (uint64_t)(*(_QWORD *)(v17 + 2864) - *(_QWORD *)(v17 + 2856)) >> 2)
    {
      v18 = *(int8x8_t **)(a1 + 8);
      v19 = v18[49];
      if (!*(_QWORD *)&v19)
        goto LABEL_67;
      v20 = (uint8x8_t)vcnt_s8(v19);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        v21 = v5;
        if (*(_QWORD *)&v19 <= v5)
          v21 = v5 % *(_QWORD *)&v19;
      }
      else
      {
        v21 = (v19.i32[0] - 1) & v5;
      }
      v22 = *(uint64_t ***)(*(_QWORD *)&v18[48] + 8 * v21);
      if (!v22)
        goto LABEL_67;
      v23 = *v22;
      if (!v23)
        goto LABEL_67;
      if (v20.u32[0] < 2uLL)
      {
        v24 = *(_QWORD *)&v19 - 1;
        while (1)
        {
          v26 = v23[1];
          if (v26 == v5)
          {
            if (*((_DWORD *)v23 + 4) == (_DWORD)v5)
              goto LABEL_35;
          }
          else if ((v26 & v24) != v21)
          {
            goto LABEL_67;
          }
          v23 = (uint64_t *)*v23;
          if (!v23)
            goto LABEL_67;
        }
      }
      while (1)
      {
        v25 = v23[1];
        if (v25 == v5)
        {
          if (*((_DWORD *)v23 + 4) == (_DWORD)v5)
          {
LABEL_35:
            if (!*((_BYTE *)v23 + 28))
              return result;
            **(_BYTE **)(a1 + 24) = 1;
            v27 = **(_QWORD **)(a1 + 32);
            v28 = *(_QWORD *)(v27 + 24);
            if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(v27 + 32) - v28) >> 4) <= v6)
              sub_20EDB40C4();
            v29 = v28 + 240 * v6;
            v30 = *(_QWORD *)(v29 + 192);
            if ((unsigned __int16)v5 >= (unint64_t)((*(_QWORD *)(v29 + 200) - v30) >> 4))
              sub_20EDB40C4();
            if (*(_BYTE *)((*(uint64_t (**)(_QWORD *))(*v7 + 432))(v7) + 4944))
            {
              v31 = *(double *)((*(uint64_t (**)(_QWORD *))(*v7 + 432))(v7) + 4928);
              v32 = *(_QWORD *)(v7[921] + 23224);
              v33 = *(_QWORD *)(a3 + 24);
              v34 = *(_DWORD *)(v33 + 992);
              if (v34 != -1)
                goto LABEL_44;
LABEL_42:
              if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                v34 = *(_DWORD *)(v33 + 992);
                goto LABEL_44;
              }
LABEL_69:
              abort();
            }
            v31 = 1.79769313e308;
            v32 = *(_QWORD *)(v7[921] + 23224);
            v33 = *(_QWORD *)(a3 + 24);
            v34 = *(_DWORD *)(v33 + 992);
            if (v34 == -1)
              goto LABEL_42;
LABEL_44:
            if (v34)
            {
              v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7[921] + 23216) + 4824) + 32 * v6 + 8)
                  + 1664 * (unsigned __int16)v5;
              v51[0] = *(_OWORD *)v35;
              v37 = *(_OWORD *)(v35 + 32);
              v36 = *(_OWORD *)(v35 + 48);
              v38 = *(_OWORD *)(v35 + 16);
              v52 = *(_QWORD *)(v35 + 64);
              v51[2] = v37;
              v51[3] = v36;
              v51[1] = v38;
              v39 = (*(uint64_t (**)(_QWORD *))(*v7 + 432))(v7);
              v42 = *(_QWORD *)(a1 + 8);
              v43 = *(int8x8_t *)(v42 + 392);
              if (v43)
              {
                v44 = (uint8x8_t)vcnt_s8(v43);
                v44.i16[0] = vaddlv_u8(v44);
                if (v44.u32[0] > 1uLL)
                {
                  v45 = v5;
                  if (*(_QWORD *)&v43 <= v5)
                    v45 = v5 % *(_QWORD *)&v43;
                }
                else
                {
                  v45 = (v43.i32[0] - 1) & v5;
                }
                v46 = *(uint64_t ***)(*(_QWORD *)(v42 + 384) + 8 * v45);
                if (v46)
                {
                  v47 = *v46;
                  if (v47)
                  {
                    if (v44.u32[0] < 2uLL)
                    {
                      v48 = *(_QWORD *)&v43 - 1;
                      while (1)
                      {
                        v50 = v47[1];
                        if (v50 == v5)
                        {
                          if (*((_DWORD *)v47 + 4) == (_DWORD)v5)
                            goto LABEL_65;
                        }
                        else if ((v50 & v48) != v45)
                        {
                          goto LABEL_67;
                        }
                        v47 = (uint64_t *)*v47;
                        if (!v47)
                          goto LABEL_67;
                      }
                    }
                    do
                    {
                      v49 = v47[1];
                      if (v49 == v5)
                      {
                        if (*((_DWORD *)v47 + 4) == (_DWORD)v5)
                        {
LABEL_65:
                          v40.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 4864) + 2512) - 8);
                          v41.n128_u64[0] = *(_QWORD *)(v42 + 344);
                          return (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t, _OWORD *, _QWORD, BOOL, _QWORD, __n128, __n128, double, double))(*(_QWORD *)v32 + 24))(v32, &v53, v30 + 16 * (unsigned __int16)v5, v33, v51, *(unsigned int *)(v42 + 360), *(_BYTE *)(v42 + 369) != 0, *((unsigned __int8 *)v47 + 28), v40, v41, *(double *)(v42 + 352), v31);
                        }
                      }
                      else
                      {
                        if (v49 >= *(_QWORD *)&v43)
                          v49 %= *(_QWORD *)&v43;
                        if (v49 != v45)
                          break;
                      }
                      v47 = (uint64_t *)*v47;
                    }
                    while (v47);
                  }
                }
              }
LABEL_67:
              sub_20E89FD20("unordered_map::at: key not found");
            }
LABEL_68:
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            goto LABEL_69;
          }
        }
        else
        {
          if (v25 >= *(_QWORD *)&v19)
            v25 %= *(_QWORD *)&v19;
          if (v25 != v21)
            goto LABEL_67;
        }
        v23 = (uint64_t *)*v23;
        if (!v23)
          goto LABEL_67;
      }
    }
  }
  return result;
}

void sub_20F091050(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F091064(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry25FrontEndOdometryInterface33UpdateLatestStateCameraIntrinsicsERNS0_8metadata16"
                     "OdometryMetadataEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry25FrontEndOdometryInterface33UpdateLatestStateCameraIntrinsicsERNS0_"
                                "8metadata16OdometryMetadataEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry25FrontEndOdometryInterface33UpdateLatestStateCameraIntrinsicsERNS0_8metadata16OdometryMetadataEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry25FrontEndOdometryInterface33UpdateLatestStateCameraIntrinsicsERNS0_8metadata16OdometryMetadataEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F0910D0()
{
  return &unk_24C9F8438;
}

void sub_20F0910DC(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__dst[2];
  unint64_t v19;
  _QWORD v20[5];
  _QWORD *v21;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20E863438(v4);
  v20[0] = v4;
  sub_20EFE877C((_QWORD *)(v4 + 16), a2);
  v5 = *(_DWORD *)(v4 + 120);
  if ((v5 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v4 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v4 + 64);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v19) = 0;
      v7 = __dst;
      goto LABEL_14;
    }
    v10 = *(const void **)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    v19 = v12 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_13;
  }
  HIBYTE(v19) = v6;
  v7 = __dst;
  if (v6)
LABEL_13:
    memmove(v7, v10, v6);
LABEL_14:
  *((_BYTE *)v7 + v6) = 0;
  v13 = v20[0];
  if (v20[0])
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v20[0] = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)(v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v13 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v13 + 16) = v16;
    if (*(char *)(v13 + 111) < 0)
      operator delete(*(void **)(v13 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v13 + 128);
    MEMORY[0x212BC6398](v13, 0x10B2C40EED050F3);
  }
  v20[0] = a1;
  v20[1] = __dst;
  v20[2] = a1;
  v20[3] = __dst;
  v20[4] = __dst;
  v17 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v17 == -1)
    sub_20E877AB8();
  v21 = v20;
  ((void (*)(_QWORD **, uint64_t))off_24C9F8380[v17])(&v21, a1);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_20F09132C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20F091350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F09136C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F091380(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  const void *v7;
  int64_t v8;
  char *v9;
  char *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  void **p_dst;
  unint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  size_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  const char *v26;
  size_t v27;
  _BYTE *v28;
  const char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  size_t v40;
  size_t v41;
  _QWORD *v42;
  void *v43;
  const char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  char *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  const char *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  size_t v101;
  void **v102;
  unint64_t v103;
  const void *v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  const char *v109;
  size_t v110;
  unint64_t v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  const char *v114;
  size_t v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  NSObject *v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  size_t v127;
  size_t v128;
  _QWORD *v129;
  void *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  char v135;
  _QWORD *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  char *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  _QWORD *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  const char *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  int v184;
  unint64_t v185;
  unint64_t v186;
  size_t v187;
  void **v188;
  unint64_t v189;
  const void *v190;
  uint64_t v191;
  uint64_t v192;
  const char *v193;
  uint64_t v194;
  size_t v195;
  const char *v196;
  unsigned __int8 v197;
  unsigned __int8 v198;
  const char *v199;
  size_t v200;
  _BYTE *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  NSObject *v205;
  uint64_t v206;
  uint64_t v207;
  size_t v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  size_t v211;
  size_t v212;
  _QWORD *v213;
  void *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  char v219;
  _QWORD *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  char *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  __int128 v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  _QWORD *v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  const char *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v269;
  uint64_t v270;
  const char *v271;
  const char *v272;
  uint64_t v273;
  unint64_t v274;
  int v275;
  int v276;
  uint64_t *v277;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v279;
  int v280;
  const char *v281;
  int v282;
  const char *v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  void **__dst;
  size_t v287;
  int64_t v288;
  _QWORD v289[2];
  uint64_t v290;
  uint64_t v291;
  const void *v292;
  uint64_t v293;
  const void *v294;
  unint64_t v295;
  void *__p;
  char v297;
  unint64_t v298;
  int v299;
  _BYTE v300[152];
  uint64_t v301;
  __int128 v302;
  std::__shared_weak_count *v303;
  char *v304;
  std::__shared_weak_count *v305;
  _QWORD *v306;
  __int128 v307;
  _BYTE v308[24];
  __int128 v309;
  char *v310;
  size_t v311;
  unint64_t v312;
  char v313;
  _QWORD v314[5];

  v314[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C9F84A8;
  sub_20E8A1408(a1 + 8, a2);
  *(_QWORD *)(a1 + 2440) = 0;
  sub_20E86B320(a1 + 2448, a3);
  *(_QWORD *)(a1 + 7208) = 0;
  *(_OWORD *)(a1 + 7192) = 0u;
  v7 = *(const void **)a4;
  v8 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v8)
  {
    if (v8 < 0)
      sub_20E867F44();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 7192) = v9;
    *(_QWORD *)(a1 + 7200) = v9;
    v10 = &v9[4 * (v8 >> 2)];
    *(_QWORD *)(a1 + 7208) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 7200) = v10;
  }
  *(_QWORD *)(a1 + 7240) = 0;
  *(_QWORD *)(a1 + 7272) = 0;
  *(_QWORD *)(a1 + 7304) = 0;
  *(_QWORD *)(a1 + 7336) = 0;
  *(_QWORD *)(a1 + 7344) = -1;
  *(_QWORD *)(a1 + 7352) = -1;
  *(_WORD *)(a1 + 7360) = 0;
  kdebug_trace();
  sub_20F093528(&v301);
  if (**(int **)(v301 + 56) <= 2)
  {
    v11 = *(unsigned __int8 *)(v301 + 72);
    v12 = sub_20E8C31DC(v301, "OSLogSurrogateAppender", 1, 0);
    v13 = v12;
    if (v11 || v12)
    {
      sub_20E863438((uint64_t)v289);
      sub_20E86A980(&v290, (uint64_t)"WindowSize ", 11);
      std::ostream::operator<<();
      if ((v299 & 0x10) != 0)
      {
        v16 = v298;
        if (v298 < v295)
        {
          v298 = v295;
          v16 = v295;
        }
        v17 = v294;
        v14 = v16 - (_QWORD)v294;
        if (v16 - (unint64_t)v294 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_65;
      }
      else
      {
        if ((v299 & 8) == 0)
        {
          v14 = 0;
          HIBYTE(v288) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_20;
        }
        v17 = v292;
        v14 = v293 - (_QWORD)v292;
        if ((unint64_t)(v293 - (_QWORD)v292) > 0x7FFFFFFFFFFFFFF7)
LABEL_65:
          sub_20E860B7C();
      }
      if (v14 >= 0x17)
      {
        v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v18 = v14 | 7;
        v19 = v18 + 1;
        p_dst = (void **)operator new(v18 + 1);
        v287 = v14;
        v288 = v19 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v288) = v14;
        p_dst = (void **)&__dst;
        if (!v14)
        {
LABEL_20:
          *((_BYTE *)p_dst + v14) = 0;
          v277 = &v301;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v279 = std::chrono::system_clock::now().__d_.__rep_;
          v280 = 2;
          v281 = "unknown file";
          v282 = 42;
          v284 = 0;
          v285 = 0;
          v283 = "unknown function";
          if (v288 >= 0)
            v20 = (const char *)&__dst;
          else
            v20 = (const char *)__dst;
          v21 = *v277;
          v22 = (const char *)(*v277 + 16);
          v271 = v22;
          if (*(char *)(*v277 + 39) < 0)
          {
            v22 = *(const char **)(v21 + 16);
            v23 = *(_QWORD *)(v21 + 24);
            v269 = *v277;
            v274 = v13;
            v25 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v25 & 1) != 0)
              goto LABEL_27;
          }
          else
          {
            v23 = *(unsigned __int8 *)(*v277 + 39);
            v269 = *v277;
            v274 = v13;
            v24 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v24 & 1) != 0)
              goto LABEL_27;
          }
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v308);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v308);
            if ((_BYTE)v309 && (v308[23] & 0x80000000) != 0)
              operator delete(*(void **)v308);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_27:
          if (byte_254A4A4F8[23] >= 0)
            v26 = byte_254A4A4F8;
          else
            v26 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v27 = byte_254A4A4F8[23];
          else
            v27 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v308 = os_log_create(v26, v22);
          v28 = &v308[8];
          if (v27 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v27 >= 0x17)
          {
            v29 = v20;
            v30 = v11;
            v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17)
              v31 = v27 | 7;
            v32 = v31 + 1;
            v28 = operator new(v31 + 1);
            *(_QWORD *)&v308[16] = v27;
            *(_QWORD *)&v309 = v32 | 0x8000000000000000;
            *(_QWORD *)&v308[8] = v28;
            v11 = v30;
            v20 = v29;
          }
          else
          {
            BYTE7(v309) = v27;
            if (!v27)
            {
LABEL_41:
              v28[v27] = 0;
              BYTE8(v309) = 1;
              v33 = (char *)&v310;
              if (v23 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v23 >= 0x17)
              {
                v35 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v23 | 7) != 0x17)
                  v35 = v23 | 7;
                v36 = v35 + 1;
                v33 = (char *)operator new(v35 + 1);
                v311 = v23;
                v312 = v36 | 0x8000000000000000;
                v310 = v33;
              }
              else
              {
                HIBYTE(v312) = v23;
                if (!v23)
                {
                  LOBYTE(v310) = 0;
                  v313 = 1;
                  v34 = *(NSObject **)v308;
                  if ((SHIBYTE(v312) & 0x80000000) == 0)
                    goto LABEL_45;
                  goto LABEL_51;
                }
              }
              memmove(v33, v22, v23);
              v33[v23] = 0;
              v313 = 1;
              v34 = *(NSObject **)v308;
              if ((SHIBYTE(v312) & 0x80000000) == 0)
              {
LABEL_45:
                if (!BYTE8(v309))
                  goto LABEL_54;
                goto LABEL_52;
              }
LABEL_51:
              operator delete(v310);
              if (!BYTE8(v309))
                goto LABEL_54;
LABEL_52:
              if (SBYTE7(v309) < 0)
                operator delete(*(void **)&v308[8]);
LABEL_54:
              if (*(_QWORD *)v308)
                os_release(*(void **)v308);
              if (!v274 || !*(_QWORD *)(v274 + 24))
              {
                os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG);
                *(_DWORD *)v308 = 136315138;
                *(_QWORD *)&v308[4] = v20;
                v43 = (void *)_os_log_send_and_compose_impl();
                if (v43)
                  free(v43);
                goto LABEL_130;
              }
              v37 = _os_log_pack_size();
              v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
              v39 = (std::__shared_weak_count *)operator new();
              v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v39->__shared_owners_ = 0;
              v39->__shared_weak_owners_ = 0;
              v39[1].__vftable = v38;
              *(_QWORD *)&v302 = v38;
              *((_QWORD *)&v302 + 1) = v38;
              v304 = 0;
              v305 = 0;
              v303 = v39;
              v40 = strlen(v20);
              if (v40 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v41 = v40;
              if (v40 >= 0x17)
              {
                v44 = v20;
                v45 = v11;
                v46 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v40 | 7) != 0x17)
                  v46 = v40 | 7;
                v47 = v46 + 1;
                v42 = operator new(v46 + 1);
                *(_QWORD *)&v307 = v41;
                *((_QWORD *)&v307 + 1) = v47 | 0x8000000000000000;
                v306 = v42;
                v11 = v45;
                v20 = v44;
              }
              else
              {
                HIBYTE(v307) = v40;
                v42 = &v306;
                if (!v40)
                {
LABEL_70:
                  *((_BYTE *)v42 + v41) = 0;
                  v48 = v306;
                  v314[0] = v307;
                  *(_QWORD *)((char *)v314 + 7) = *(_QWORD *)((char *)&v307 + 7);
                  v49 = HIBYTE(v307);
                  v50 = operator new(0x38uLL);
                  v50[1] = 0;
                  v50[2] = 0;
                  v50[3] = off_24C9ABC20;
                  *v50 = &off_24C9ABBD0;
                  v51 = v314[0];
                  v50[4] = v48;
                  v50[5] = v51;
                  *(_QWORD *)((char *)v50 + 47) = *(_QWORD *)((char *)v314 + 7);
                  *((_BYTE *)v50 + 55) = v49;
                  v314[0] = 0;
                  *(_QWORD *)((char *)v314 + 7) = 0;
                  v52 = v305;
                  v304 = (char *)(v50 + 3);
                  v305 = (std::__shared_weak_count *)v50;
                  if (v52)
                  {
                    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
                    do
                      v54 = __ldaxr(p_shared_owners);
                    while (__stlxr(v54 - 1, p_shared_owners));
                    if (!v54)
                    {
                      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                      std::__shared_weak_count::__release_weak(v52);
                    }
                  }
                  *(_OWORD *)v308 = v302;
                  v55 = v304;
                  *(_QWORD *)&v308[16] = v303;
                  if (v303)
                  {
                    v56 = (unint64_t *)&v303->__shared_owners_;
                    do
                      v57 = __ldxr(v56);
                    while (__stxr(v57 + 1, v56));
                  }
                  v58 = v305;
                  *(_QWORD *)&v309 = v55;
                  *((_QWORD *)&v309 + 1) = v305;
                  if (v305)
                  {
                    v59 = (unint64_t *)&v305->__shared_owners_;
                    do
                      v60 = __ldxr(v59);
                    while (__stxr(v60 + 1, v59));
                    v310 = v55;
                    do
                      v61 = __ldaxr(v59);
                    while (__stlxr(v61 - 1, v59));
                    if (!v61)
                    {
                      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                      std::__shared_weak_count::__release_weak(v58);
                    }
                  }
                  else
                  {
                    v310 = v55;
                  }
                  v62 = v303;
                  if (v303)
                  {
                    v63 = (unint64_t *)&v303->__shared_owners_;
                    do
                      v64 = __ldaxr(v63);
                    while (__stlxr(v64 - 1, v63));
                    if (!v64)
                    {
                      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                      std::__shared_weak_count::__release_weak(v62);
                    }
                  }
                  v65 = *(_QWORD *)v308;
                  if (v310[31] >= 0)
                    v66 = v310 + 8;
                  else
                    v66 = (char *)*((_QWORD *)v310 + 1);
                  v67 = _os_log_pack_fill();
                  *(_DWORD *)v67 = 136315138;
                  *(_QWORD *)(v67 + 4) = v66;
                  v68 = operator new();
                  v69 = *(unsigned __int8 *)(v269 + 39);
                  v70 = *(const char **)(v269 + 16);
                  v71 = *(_QWORD *)(v269 + 24);
                  v72 = v309;
                  *(_OWORD *)(v68 + 8) = *(_OWORD *)&v308[8];
                  if ((v69 & 0x80u) != 0)
                    v69 = v71;
                  else
                    v70 = v271;
                  *(_QWORD *)v68 = v65;
                  *(_QWORD *)&v308[8] = 0;
                  *(_QWORD *)&v308[16] = 0;
                  *(_OWORD *)(v68 + 24) = v72;
                  v309 = 0uLL;
                  *(_QWORD *)(v68 + 40) = v70;
                  *(_QWORD *)(v68 + 48) = v69;
                  *(_BYTE *)(v68 + 56) = 2;
                  v306 = 0;
                  *(_QWORD *)&v302 = v68;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v274 + 24) + 40))(*(_QWORD *)(v274 + 24), &v302);
                  v73 = v302;
                  *(_QWORD *)&v302 = 0;
                  if (v73)
                  {
                    v74 = *(std::__shared_weak_count **)(v73 + 32);
                    if (v74)
                    {
                      v75 = (unint64_t *)&v74->__shared_owners_;
                      do
                        v76 = __ldaxr(v75);
                      while (__stlxr(v76 - 1, v75));
                      if (!v76)
                      {
                        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                        std::__shared_weak_count::__release_weak(v74);
                      }
                    }
                    v77 = *(std::__shared_weak_count **)(v73 + 16);
                    if (v77)
                    {
                      v78 = (unint64_t *)&v77->__shared_owners_;
                      do
                        v79 = __ldaxr(v78);
                      while (__stlxr(v79 - 1, v78));
                      if (!v79)
                      {
                        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                        std::__shared_weak_count::__release_weak(v77);
                      }
                    }
                    MEMORY[0x212BC6398](v73, 0x10F0C40B62ED6C6);
                    v80 = v306;
                    v306 = 0;
                    if (v80)
                    {
                      v81 = (std::__shared_weak_count *)v80[4];
                      if (v81)
                      {
                        v82 = (unint64_t *)&v81->__shared_owners_;
                        do
                          v83 = __ldaxr(v82);
                        while (__stlxr(v83 - 1, v82));
                        if (!v83)
                        {
                          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                          std::__shared_weak_count::__release_weak(v81);
                        }
                      }
                      v84 = (std::__shared_weak_count *)v80[2];
                      if (v84)
                      {
                        v85 = (unint64_t *)&v84->__shared_owners_;
                        do
                          v86 = __ldaxr(v85);
                        while (__stlxr(v86 - 1, v85));
                        if (!v86)
                        {
                          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                          std::__shared_weak_count::__release_weak(v84);
                        }
                      }
                      MEMORY[0x212BC6398](v80, 0x10F0C40B62ED6C6);
                    }
                  }
                  v87 = (std::__shared_weak_count *)*((_QWORD *)&v309 + 1);
                  if (*((_QWORD *)&v309 + 1))
                  {
                    v88 = (unint64_t *)(*((_QWORD *)&v309 + 1) + 8);
                    do
                      v89 = __ldaxr(v88);
                    while (__stlxr(v89 - 1, v88));
                    if (!v89)
                    {
                      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                      std::__shared_weak_count::__release_weak(v87);
                    }
                  }
                  v90 = *(std::__shared_weak_count **)&v308[16];
                  if (*(_QWORD *)&v308[16])
                  {
                    v91 = (unint64_t *)(*(_QWORD *)&v308[16] + 8);
                    do
                      v92 = __ldaxr(v91);
                    while (__stlxr(v92 - 1, v91));
                    if (!v92)
                    {
                      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                      std::__shared_weak_count::__release_weak(v90);
                    }
                  }
LABEL_130:
                  if (v11)
                  {
                    v93 = (const char *)&__dst;
                    if (v288 < 0)
                      v93 = (const char *)__dst;
                    sub_20E8C003C((uint64_t)&v277, "%s", v93);
                    sub_20E863570((uint64_t)&v277);
                  }
                  sub_20E863570((uint64_t)&v277);
                  v94 = v285;
                  if (v285)
                  {
                    v95 = (unint64_t *)&v285->__shared_owners_;
                    do
                      v96 = __ldaxr(v95);
                    while (__stlxr(v96 - 1, v95));
                    if (!v96)
                    {
                      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                      std::__shared_weak_count::__release_weak(v94);
                    }
                  }
                  if (SHIBYTE(v288) < 0)
                    operator delete(__dst);
                  v289[0] = *MEMORY[0x24BEDB7F0];
                  v97 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                  *(_QWORD *)((char *)v289 + *(_QWORD *)(v289[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                  v290 = v97;
                  v291 = MEMORY[0x24BEDB848] + 16;
                  if (v297 < 0)
                    operator delete(__p);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x212BC6290](v300);
                  goto LABEL_144;
                }
              }
              memcpy(v42, v20, v41);
              goto LABEL_70;
            }
          }
          memmove(v28, v26, v27);
          goto LABEL_41;
        }
      }
      memmove(p_dst, v17, v14);
      goto LABEL_20;
    }
  }
LABEL_144:
  sub_20F093528(&v301);
  if (**(int **)(v301 + 56) > 2)
    goto LABEL_284;
  v98 = *(unsigned __int8 *)(v301 + 72);
  v99 = sub_20E8C31DC(v301, "OSLogSurrogateAppender", 1, 0);
  v100 = v99;
  if (!v98 && !v99)
    goto LABEL_284;
  sub_20E863438((uint64_t)v289);
  sub_20E86A980(&v290, (uint64_t)"MaxNumFeatures ", 15);
  std::ostream::operator<<();
  v275 = v98;
  if ((v299 & 0x10) != 0)
  {
    v103 = v298;
    if (v298 < v295)
    {
      v298 = v295;
      v103 = v295;
    }
    v104 = v294;
    v101 = v103 - (_QWORD)v294;
    if (v103 - (unint64_t)v294 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_205;
  }
  else
  {
    if ((v299 & 8) == 0)
    {
      v101 = 0;
      HIBYTE(v288) = 0;
      v102 = (void **)&__dst;
      goto LABEL_160;
    }
    v104 = v292;
    v101 = v293 - (_QWORD)v292;
    if ((unint64_t)(v293 - (_QWORD)v292) > 0x7FFFFFFFFFFFFFF7)
LABEL_205:
      sub_20E860B7C();
  }
  if (v101 >= 0x17)
  {
    v105 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v101 | 7) != 0x17)
      v105 = v101 | 7;
    v106 = v105 + 1;
    v102 = (void **)operator new(v105 + 1);
    v287 = v101;
    v288 = v106 | 0x8000000000000000;
    __dst = v102;
    goto LABEL_159;
  }
  HIBYTE(v288) = v101;
  v102 = (void **)&__dst;
  if (v101)
LABEL_159:
    memmove(v102, v104, v101);
LABEL_160:
  *((_BYTE *)v102 + v101) = 0;
  v277 = &v301;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v279 = std::chrono::system_clock::now().__d_.__rep_;
  v280 = 2;
  v281 = "unknown file";
  v282 = 44;
  v284 = 0;
  v285 = 0;
  v283 = "unknown function";
  if (v288 >= 0)
    v107 = (const char *)&__dst;
  else
    v107 = (const char *)__dst;
  v108 = *v277;
  v109 = (const char *)(*v277 + 16);
  v270 = *v277;
  v272 = v109;
  if (*(char *)(*v277 + 39) < 0)
  {
    v109 = *(const char **)(v108 + 16);
    v110 = *(_QWORD *)(v108 + 24);
    v111 = v100;
    v113 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v113 & 1) != 0)
      goto LABEL_167;
  }
  else
  {
    v110 = *(unsigned __int8 *)(*v277 + 39);
    v111 = v100;
    v112 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v112 & 1) != 0)
      goto LABEL_167;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v308);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v308);
    if ((_BYTE)v309 && (v308[23] & 0x80000000) != 0)
      operator delete(*(void **)v308);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_167:
  if (byte_254A4A4F8[23] >= 0)
    v114 = byte_254A4A4F8;
  else
    v114 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v115 = byte_254A4A4F8[23];
  else
    v115 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v308 = os_log_create(v114, v109);
  v116 = &v308[8];
  if (v115 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v115 >= 0x17)
  {
    v117 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v115 | 7) != 0x17)
      v117 = v115 | 7;
    v118 = v117 + 1;
    v116 = operator new(v117 + 1);
    *(_QWORD *)&v308[16] = v115;
    *(_QWORD *)&v309 = v118 | 0x8000000000000000;
    *(_QWORD *)&v308[8] = v116;
    goto LABEL_180;
  }
  BYTE7(v309) = v115;
  if (v115)
LABEL_180:
    memmove(v116, v114, v115);
  v116[v115] = 0;
  BYTE8(v309) = 1;
  v119 = (char *)&v310;
  if (v110 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v120 = v111;
  if (v110 >= 0x17)
  {
    v122 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v110 | 7) != 0x17)
      v122 = v110 | 7;
    v123 = v122 + 1;
    v119 = (char *)operator new(v122 + 1);
    v311 = v110;
    v312 = v123 | 0x8000000000000000;
    v310 = v119;
  }
  else
  {
    HIBYTE(v312) = v110;
    if (!v110)
    {
      LOBYTE(v310) = 0;
      v313 = 1;
      v121 = *(NSObject **)v308;
      if ((SHIBYTE(v312) & 0x80000000) == 0)
        goto LABEL_185;
      goto LABEL_191;
    }
  }
  memmove(v119, v109, v110);
  v119[v110] = 0;
  v313 = 1;
  v121 = *(NSObject **)v308;
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_185:
    if (!BYTE8(v309))
      goto LABEL_194;
    goto LABEL_192;
  }
LABEL_191:
  operator delete(v310);
  if (!BYTE8(v309))
    goto LABEL_194;
LABEL_192:
  if (SBYTE7(v309) < 0)
    operator delete(*(void **)&v308[8]);
LABEL_194:
  if (*(_QWORD *)v308)
    os_release(*(void **)v308);
  if (!v111 || !*(_QWORD *)(v111 + 24))
  {
    os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v308 = 136315138;
    *(_QWORD *)&v308[4] = v107;
    v130 = (void *)_os_log_send_and_compose_impl();
    v131 = v275;
    if (v130)
      free(v130);
    goto LABEL_270;
  }
  v124 = _os_log_pack_size();
  v125 = (std::__shared_weak_count_vtbl *)operator new(v124, (std::align_val_t)8uLL);
  v126 = (std::__shared_weak_count *)operator new();
  v126->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v126->__shared_owners_ = 0;
  v126->__shared_weak_owners_ = 0;
  v126[1].__vftable = v125;
  *(_QWORD *)&v302 = v125;
  *((_QWORD *)&v302 + 1) = v125;
  v304 = 0;
  v305 = 0;
  v303 = v126;
  v127 = strlen(v107);
  if (v127 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v128 = v127;
  if (v127 >= 0x17)
  {
    v132 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v127 | 7) != 0x17)
      v132 = v127 | 7;
    v133 = v132 + 1;
    v129 = operator new(v132 + 1);
    *(_QWORD *)&v307 = v128;
    *((_QWORD *)&v307 + 1) = v133 | 0x8000000000000000;
    v306 = v129;
    goto LABEL_209;
  }
  HIBYTE(v307) = v127;
  v129 = &v306;
  if (v127)
LABEL_209:
    memcpy(v129, v107, v128);
  *((_BYTE *)v129 + v128) = 0;
  v134 = v306;
  v314[0] = v307;
  *(_QWORD *)((char *)v314 + 7) = *(_QWORD *)((char *)&v307 + 7);
  v135 = HIBYTE(v307);
  v136 = operator new(0x38uLL);
  v136[1] = 0;
  v136[2] = 0;
  v136[3] = off_24C9ABC20;
  *v136 = &off_24C9ABBD0;
  v137 = v314[0];
  v136[4] = v134;
  v136[5] = v137;
  *(_QWORD *)((char *)v136 + 47) = *(_QWORD *)((char *)v314 + 7);
  *((_BYTE *)v136 + 55) = v135;
  v314[0] = 0;
  *(_QWORD *)((char *)v314 + 7) = 0;
  v138 = v305;
  v304 = (char *)(v136 + 3);
  v305 = (std::__shared_weak_count *)v136;
  if (v138)
  {
    v139 = (unint64_t *)&v138->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  *(_OWORD *)v308 = v302;
  v141 = v304;
  *(_QWORD *)&v308[16] = v303;
  if (v303)
  {
    v142 = (unint64_t *)&v303->__shared_owners_;
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
  }
  v144 = v305;
  *(_QWORD *)&v309 = v141;
  *((_QWORD *)&v309 + 1) = v305;
  if (v305)
  {
    v145 = (unint64_t *)&v305->__shared_owners_;
    do
      v146 = __ldxr(v145);
    while (__stxr(v146 + 1, v145));
    v310 = v141;
    do
      v147 = __ldaxr(v145);
    while (__stlxr(v147 - 1, v145));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  else
  {
    v310 = v141;
  }
  v148 = v303;
  if (v303)
  {
    v149 = (unint64_t *)&v303->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = *(_QWORD *)v308;
  if (v310[31] >= 0)
    v152 = v310 + 8;
  else
    v152 = (char *)*((_QWORD *)v310 + 1);
  v153 = _os_log_pack_fill();
  *(_DWORD *)v153 = 136315138;
  *(_QWORD *)(v153 + 4) = v152;
  v154 = operator new();
  v155 = *(unsigned __int8 *)(v270 + 39);
  v156 = *(const char **)(v270 + 16);
  v157 = *(_QWORD *)(v270 + 24);
  v158 = v309;
  *(_OWORD *)(v154 + 8) = *(_OWORD *)&v308[8];
  if ((v155 & 0x80u) != 0)
    v155 = v157;
  else
    v156 = v272;
  *(_QWORD *)v154 = v151;
  *(_QWORD *)&v308[8] = 0;
  *(_QWORD *)&v308[16] = 0;
  *(_OWORD *)(v154 + 24) = v158;
  v309 = 0uLL;
  *(_QWORD *)(v154 + 40) = v156;
  *(_QWORD *)(v154 + 48) = v155;
  *(_BYTE *)(v154 + 56) = 2;
  v306 = 0;
  *(_QWORD *)&v302 = v154;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v120 + 24) + 40))(*(_QWORD *)(v120 + 24), &v302);
  v159 = v302;
  *(_QWORD *)&v302 = 0;
  if (v159)
  {
    v160 = *(std::__shared_weak_count **)(v159 + 32);
    if (v160)
    {
      v161 = (unint64_t *)&v160->__shared_owners_;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
        std::__shared_weak_count::__release_weak(v160);
      }
    }
    v163 = *(std::__shared_weak_count **)(v159 + 16);
    if (v163)
    {
      v164 = (unint64_t *)&v163->__shared_owners_;
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
    MEMORY[0x212BC6398](v159, 0x10F0C40B62ED6C6);
    v166 = v306;
    v306 = 0;
    if (v166)
    {
      v167 = (std::__shared_weak_count *)v166[4];
      if (v167)
      {
        v168 = (unint64_t *)&v167->__shared_owners_;
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      v170 = (std::__shared_weak_count *)v166[2];
      if (v170)
      {
        v171 = (unint64_t *)&v170->__shared_owners_;
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        if (!v172)
        {
          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
          std::__shared_weak_count::__release_weak(v170);
        }
      }
      MEMORY[0x212BC6398](v166, 0x10F0C40B62ED6C6);
    }
  }
  v173 = (std::__shared_weak_count *)*((_QWORD *)&v309 + 1);
  v131 = v275;
  if (*((_QWORD *)&v309 + 1))
  {
    v174 = (unint64_t *)(*((_QWORD *)&v309 + 1) + 8);
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = *(std::__shared_weak_count **)&v308[16];
  if (*(_QWORD *)&v308[16])
  {
    v177 = (unint64_t *)(*(_QWORD *)&v308[16] + 8);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
LABEL_270:
  if (v131)
  {
    v179 = (const char *)&__dst;
    if (v288 < 0)
      v179 = (const char *)__dst;
    sub_20E8C003C((uint64_t)&v277, "%s", v179);
    sub_20E863570((uint64_t)&v277);
  }
  sub_20E863570((uint64_t)&v277);
  v180 = v285;
  if (v285)
  {
    v181 = (unint64_t *)&v285->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  if (SHIBYTE(v288) < 0)
    operator delete(__dst);
  v289[0] = *MEMORY[0x24BEDB7F0];
  v183 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v289 + *(_QWORD *)(v289[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v290 = v183;
  v291 = MEMORY[0x24BEDB848] + 16;
  if (v297 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v300);
LABEL_284:
  sub_20F093528(&v301);
  if (**(int **)(v301 + 56) > 2)
    return a1;
  v184 = *(unsigned __int8 *)(v301 + 72);
  v185 = sub_20E8C31DC(v301, "OSLogSurrogateAppender", 1, 0);
  v186 = v185;
  if (!v184 && !v185)
    return a1;
  sub_20E863438((uint64_t)v289);
  sub_20E86A980(&v290, (uint64_t)"MaxNumTracks ", 13);
  std::ostream::operator<<();
  v276 = v184;
  if ((v299 & 0x10) != 0)
  {
    v189 = v298;
    if (v298 < v295)
    {
      v298 = v295;
      v189 = v295;
    }
    v190 = v294;
    v187 = v189 - (_QWORD)v294;
    if (v189 - (unint64_t)v294 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_345;
  }
  else
  {
    if ((v299 & 8) == 0)
    {
      v187 = 0;
      HIBYTE(v288) = 0;
      v188 = (void **)&__dst;
      goto LABEL_300;
    }
    v190 = v292;
    v187 = v293 - (_QWORD)v292;
    if ((unint64_t)(v293 - (_QWORD)v292) > 0x7FFFFFFFFFFFFFF7)
LABEL_345:
      sub_20E860B7C();
  }
  if (v187 >= 0x17)
  {
    v191 = (v187 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v187 | 7) != 0x17)
      v191 = v187 | 7;
    v192 = v191 + 1;
    v188 = (void **)operator new(v191 + 1);
    v287 = v187;
    v288 = v192 | 0x8000000000000000;
    __dst = v188;
    goto LABEL_299;
  }
  HIBYTE(v288) = v187;
  v188 = (void **)&__dst;
  if (v187)
LABEL_299:
    memmove(v188, v190, v187);
LABEL_300:
  *((_BYTE *)v188 + v187) = 0;
  v277 = &v301;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v279 = std::chrono::system_clock::now().__d_.__rep_;
  v280 = 2;
  v281 = "unknown file";
  v282 = 46;
  v284 = 0;
  v285 = 0;
  v283 = "unknown function";
  if (v288 >= 0)
    v193 = (const char *)&__dst;
  else
    v193 = (const char *)__dst;
  v194 = *v277;
  if (*(char *)(*v277 + 39) < 0)
  {
    v196 = *(const char **)(v194 + 16);
    v195 = *(_QWORD *)(v194 + 24);
    v273 = *v277 + 16;
    v198 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v198 & 1) != 0)
      goto LABEL_307;
  }
  else
  {
    v195 = *(unsigned __int8 *)(*v277 + 39);
    v196 = (const char *)(*v277 + 16);
    v273 = (uint64_t)v196;
    v197 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v197 & 1) != 0)
      goto LABEL_307;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v308);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v308);
    if ((_BYTE)v309 && (v308[23] & 0x80000000) != 0)
      operator delete(*(void **)v308);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_307:
  if (byte_254A4A4F8[23] >= 0)
    v199 = byte_254A4A4F8;
  else
    v199 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v200 = byte_254A4A4F8[23];
  else
    v200 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v308 = os_log_create(v199, v196);
  v201 = &v308[8];
  if (v200 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v200 >= 0x17)
  {
    v202 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v200 | 7) != 0x17)
      v202 = v200 | 7;
    v203 = v202 + 1;
    v201 = operator new(v202 + 1);
    *(_QWORD *)&v308[16] = v200;
    *(_QWORD *)&v309 = v203 | 0x8000000000000000;
    *(_QWORD *)&v308[8] = v201;
    goto LABEL_320;
  }
  BYTE7(v309) = v200;
  if (v200)
LABEL_320:
    memmove(v201, v199, v200);
  v201[v200] = 0;
  BYTE8(v309) = 1;
  v204 = (char *)&v310;
  if (v195 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v195 >= 0x17)
  {
    v206 = (v195 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v195 | 7) != 0x17)
      v206 = v195 | 7;
    v207 = v206 + 1;
    v204 = (char *)operator new(v206 + 1);
    v311 = v195;
    v312 = v207 | 0x8000000000000000;
    v310 = v204;
  }
  else
  {
    HIBYTE(v312) = v195;
    if (!v195)
    {
      LOBYTE(v310) = 0;
      v313 = 1;
      v205 = *(NSObject **)v308;
      if ((SHIBYTE(v312) & 0x80000000) == 0)
        goto LABEL_325;
      goto LABEL_331;
    }
  }
  memmove(v204, v196, v195);
  v204[v195] = 0;
  v313 = 1;
  v205 = *(NSObject **)v308;
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_325:
    if (!BYTE8(v309))
      goto LABEL_334;
    goto LABEL_332;
  }
LABEL_331:
  operator delete(v310);
  if (!BYTE8(v309))
    goto LABEL_334;
LABEL_332:
  if (SBYTE7(v309) < 0)
    operator delete(*(void **)&v308[8]);
LABEL_334:
  if (*(_QWORD *)v308)
    os_release(*(void **)v308);
  if (!v186 || !*(_QWORD *)(v186 + 24))
  {
    os_log_type_enabled(v205, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v308 = 136315138;
    *(_QWORD *)&v308[4] = v193;
    v214 = (void *)_os_log_send_and_compose_impl();
    v215 = v276;
    if (v214)
      free(v214);
    goto LABEL_410;
  }
  v208 = _os_log_pack_size();
  v209 = (std::__shared_weak_count_vtbl *)operator new(v208, (std::align_val_t)8uLL);
  v210 = (std::__shared_weak_count *)operator new();
  v210->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v210->__shared_owners_ = 0;
  v210->__shared_weak_owners_ = 0;
  v210[1].__vftable = v209;
  *(_QWORD *)&v302 = v209;
  *((_QWORD *)&v302 + 1) = v209;
  v304 = 0;
  v305 = 0;
  v303 = v210;
  v211 = strlen(v193);
  if (v211 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v212 = v211;
  if (v211 >= 0x17)
  {
    v216 = (v211 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v211 | 7) != 0x17)
      v216 = v211 | 7;
    v217 = v216 + 1;
    v213 = operator new(v216 + 1);
    *(_QWORD *)&v307 = v212;
    *((_QWORD *)&v307 + 1) = v217 | 0x8000000000000000;
    v306 = v213;
    goto LABEL_349;
  }
  HIBYTE(v307) = v211;
  v213 = &v306;
  if (v211)
LABEL_349:
    memcpy(v213, v193, v212);
  *((_BYTE *)v213 + v212) = 0;
  v218 = v306;
  v314[0] = v307;
  *(_QWORD *)((char *)v314 + 7) = *(_QWORD *)((char *)&v307 + 7);
  v219 = HIBYTE(v307);
  v220 = operator new(0x38uLL);
  v220[1] = 0;
  v220[2] = 0;
  v220[3] = off_24C9ABC20;
  *v220 = &off_24C9ABBD0;
  v221 = v314[0];
  v220[4] = v218;
  v220[5] = v221;
  *(_QWORD *)((char *)v220 + 47) = *(_QWORD *)((char *)v314 + 7);
  *((_BYTE *)v220 + 55) = v219;
  v314[0] = 0;
  *(_QWORD *)((char *)v314 + 7) = 0;
  v222 = v305;
  v304 = (char *)(v220 + 3);
  v305 = (std::__shared_weak_count *)v220;
  if (v222)
  {
    v223 = (unint64_t *)&v222->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  *(_OWORD *)v308 = v302;
  v225 = v304;
  *(_QWORD *)&v308[16] = v303;
  if (v303)
  {
    v226 = (unint64_t *)&v303->__shared_owners_;
    do
      v227 = __ldxr(v226);
    while (__stxr(v227 + 1, v226));
  }
  v228 = v305;
  *(_QWORD *)&v309 = v225;
  *((_QWORD *)&v309 + 1) = v305;
  if (v305)
  {
    v229 = (unint64_t *)&v305->__shared_owners_;
    do
      v230 = __ldxr(v229);
    while (__stxr(v230 + 1, v229));
    v310 = v225;
    do
      v231 = __ldaxr(v229);
    while (__stlxr(v231 - 1, v229));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  else
  {
    v310 = v225;
  }
  v232 = v303;
  if (v303)
  {
    v233 = (unint64_t *)&v303->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  v235 = *(_QWORD *)v308;
  if (v310[31] >= 0)
    v236 = v310 + 8;
  else
    v236 = (char *)*((_QWORD *)v310 + 1);
  v237 = _os_log_pack_fill();
  *(_DWORD *)v237 = 136315138;
  *(_QWORD *)(v237 + 4) = v236;
  v238 = operator new();
  v239 = *(unsigned __int8 *)(v194 + 39);
  v240 = *(_QWORD *)(v194 + 16);
  v241 = *(_QWORD *)(v194 + 24);
  v242 = v309;
  *(_OWORD *)(v238 + 8) = *(_OWORD *)&v308[8];
  if ((v239 & 0x80u) != 0)
    v239 = v241;
  else
    v240 = v273;
  *(_QWORD *)v238 = v235;
  *(_QWORD *)&v308[8] = 0;
  *(_QWORD *)&v308[16] = 0;
  *(_OWORD *)(v238 + 24) = v242;
  v309 = 0uLL;
  *(_QWORD *)(v238 + 40) = v240;
  *(_QWORD *)(v238 + 48) = v239;
  *(_BYTE *)(v238 + 56) = 2;
  v306 = 0;
  *(_QWORD *)&v302 = v238;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v186 + 24) + 40))(*(_QWORD *)(v186 + 24), &v302);
  v243 = v302;
  *(_QWORD *)&v302 = 0;
  v215 = v276;
  if (v243)
  {
    v244 = *(std::__shared_weak_count **)(v243 + 32);
    if (v244)
    {
      v245 = (unint64_t *)&v244->__shared_owners_;
      do
        v246 = __ldaxr(v245);
      while (__stlxr(v246 - 1, v245));
      if (!v246)
      {
        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
        std::__shared_weak_count::__release_weak(v244);
      }
    }
    v247 = *(std::__shared_weak_count **)(v243 + 16);
    if (v247)
    {
      v248 = (unint64_t *)&v247->__shared_owners_;
      do
        v249 = __ldaxr(v248);
      while (__stlxr(v249 - 1, v248));
      if (!v249)
      {
        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
        std::__shared_weak_count::__release_weak(v247);
      }
    }
    MEMORY[0x212BC6398](v243, 0x10F0C40B62ED6C6);
    v250 = v306;
    v306 = 0;
    if (v250)
    {
      v251 = (std::__shared_weak_count *)v250[4];
      if (v251)
      {
        v252 = (unint64_t *)&v251->__shared_owners_;
        do
          v253 = __ldaxr(v252);
        while (__stlxr(v253 - 1, v252));
        if (!v253)
        {
          ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
          std::__shared_weak_count::__release_weak(v251);
        }
      }
      v254 = (std::__shared_weak_count *)v250[2];
      if (v254)
      {
        v255 = (unint64_t *)&v254->__shared_owners_;
        do
          v256 = __ldaxr(v255);
        while (__stlxr(v256 - 1, v255));
        if (!v256)
        {
          ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
          std::__shared_weak_count::__release_weak(v254);
        }
      }
      MEMORY[0x212BC6398](v250, 0x10F0C40B62ED6C6);
    }
  }
  v257 = (std::__shared_weak_count *)*((_QWORD *)&v309 + 1);
  if (*((_QWORD *)&v309 + 1))
  {
    v258 = (unint64_t *)(*((_QWORD *)&v309 + 1) + 8);
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v260 = *(std::__shared_weak_count **)&v308[16];
  if (*(_QWORD *)&v308[16])
  {
    v261 = (unint64_t *)(*(_QWORD *)&v308[16] + 8);
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
LABEL_410:
  if (v215)
  {
    v263 = (const char *)&__dst;
    if (v288 < 0)
      v263 = (const char *)__dst;
    sub_20E8C003C((uint64_t)&v277, "%s", v263);
    sub_20E863570((uint64_t)&v277);
  }
  sub_20E863570((uint64_t)&v277);
  v264 = v285;
  if (v285)
  {
    v265 = (unint64_t *)&v285->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  if (SHIBYTE(v288) < 0)
    operator delete(__dst);
  v289[0] = *MEMORY[0x24BEDB7F0];
  v267 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v289 + *(_QWORD *)(v289[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v290 = v267;
  v291 = MEMORY[0x24BEDB848] + 16;
  if (v297 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v300);
  return a1;
}

void sub_20F093280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  uint64_t *v32;
  uint64_t v33;
  void *v35;

  if (*(_BYTE *)(v33 - 168) && *(char *)(v33 - 169) < 0)
    operator delete(*(void **)(v33 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  if (a31 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a32);
  sub_20F09361C(v32 + 902);
  v35 = *a14;
  if (*a14)
  {
    v32[900] = (uint64_t)v35;
    operator delete(v35);
  }
  sub_20E86989C(a15);
  sub_20F0936F8(v32 + 305);
  sub_20E86A810(a16);
  _Unwind_Resume(a1);
}

void sub_20F09350C()
{
  JUMPOUT(0x20F0934E4);
}

void sub_20F093514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  if (!*a14)
    JUMPOUT(0x20F0934DCLL);
  JUMPOUT(0x20F0934D4);
}

void sub_20F093528(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A61A20);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A61A20))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A61A18);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A61A20);
  }
  *a1 = qword_254A61A18;
}

void sub_20F0935C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A61A20);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A61A20);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F09361C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = a1 + 12;
  v3 = (_QWORD *)a1[15];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[11];
  if (v5 == a1 + 8)
  {
    v6 = 4;
    v5 = a1 + 8;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[7];
  if (v7 == a1 + 4)
  {
    v8 = 4;
    v7 = a1 + 4;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[3];
  if (v9 == a1)
  {
    v10 = 4;
    v9 = a1;
    goto LABEL_20;
  }
  if (v9)
  {
    v10 = 5;
LABEL_20:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

uint64_t *sub_20F0936F8(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 160);
    if (v3 == (_QWORD *)(v2 + 136))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 136);
    }
    else
    {
      if (!v3)
      {
LABEL_7:
        MEMORY[0x212BC6398](v2, 0x1020C4027D33E7ELL);
        return a1;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }
  return a1;
}

uint64_t sub_20F09376C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;

  *(_QWORD *)a1 = off_24C9F84A8;
  v2 = (_QWORD *)(a1 + 7312);
  v3 = *(_QWORD **)(a1 + 7336);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 7304);
  if (v5 == (_QWORD *)(a1 + 7280))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 7280);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *(_QWORD **)(a1 + 7272);
  if (v7 == (_QWORD *)(a1 + 7248))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 7248);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = *(_QWORD **)(a1 + 7240);
  if (v9 == (_QWORD *)(a1 + 7216))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 7216);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = *(void **)(a1 + 7192);
  if (v11)
  {
    *(_QWORD *)(a1 + 7200) = v11;
    operator delete(v11);
  }
  sub_20E86872C(a1 + 7080, *(_QWORD **)(a1 + 7088));
  v12 = *(void **)(a1 + 6528);
  if (v12)
  {
    *(_QWORD *)(a1 + 6536) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 6504);
  if (v13)
  {
    *(_QWORD *)(a1 + 6512) = v13;
    operator delete(v13);
  }
  sub_20E869D64(a1 + 3920);
  if (*(char *)(a1 + 3767) < 0)
  {
    operator delete(*(void **)(a1 + 3744));
    sub_20E869EA0(a1 + 2704);
    v14 = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2440) = 0;
    if (!v14)
      goto LABEL_29;
  }
  else
  {
    sub_20E869EA0(a1 + 2704);
    v14 = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2440) = 0;
    if (!v14)
    {
LABEL_29:
      sub_20E86A810(a1 + 8);
      return a1;
    }
  }
  v16 = *(_QWORD **)(v14 + 160);
  if (v16 == (_QWORD *)(v14 + 136))
  {
    v17 = 4;
    v16 = (_QWORD *)(v14 + 136);
    goto LABEL_35;
  }
  if (v16)
  {
    v17 = 5;
LABEL_35:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  MEMORY[0x212BC6398](v14, 0x1020C4027D33E7ELL);
  sub_20E86A810(a1 + 8);
  return a1;
}

unint64_t sub_20F093958(unint64_t result, int8x8_t **a2, _QWORD *a3)
{
  unint64_t v3;
  int8x8_t **v4;
  unint64_t v5;
  uint64_t v6;
  int8x8_t *v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unint64_t v12;
  size_t v13;
  void **v14;
  unint64_t v15;
  const void **v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  const char *v22;
  size_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  const char *v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  NSObject *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  size_t v40;
  size_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  const char *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int8x8_t *v97;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  _QWORD v103[3];
  int v104;
  const char *v105;
  int v106;
  const char *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  void *__dst[2];
  int64_t v111;
  _QWORD v112[2];
  _QWORD v113[3];
  _QWORD v114[3];
  uint64_t v115;
  unint64_t v116;
  void *__p;
  char v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  __int128 v123;
  std::__shared_weak_count *v124;
  char *v125;
  std::__shared_weak_count *v126;
  _QWORD *v127;
  __int128 v128;
  _BYTE v129[24];
  __int128 v130;
  void *v131[2];
  unint64_t v132;
  char v133;
  _QWORD v134[5];

  v134[2] = *MEMORY[0x24BDAC8D0];
  v3 = a3[1] - *a3;
  if ((v3 & 0xFFFFFFFF0) != 0)
  {
    v4 = a2;
    v5 = result;
    v6 = 0;
    v7 = *a2;
    v96 = *MEMORY[0x24BEDB7F0];
    v94 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v95 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v8 = (v3 >> 4);
    v93 = MEMORY[0x24BEDB848] + 16;
    v97 = *a2;
    v101 = v8;
    while (1)
    {
      sub_20FCBA6DC(v7, v4[2][15 * v6].u32[0], v4[2][15 * v6].u32[1]);
      if (!v9
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterfaceBase.cpp", 77, (uint64_t)"current_frame", 13, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      (*(void (**)(unint64_t))(*(_QWORD *)v5 + 64))(v5);
      sub_20F093528(&v122);
      result = v122;
      if (**(int **)(v122 + 56) > 2)
        goto LABEL_4;
      v10 = *(unsigned __int8 *)(v122 + 72);
      v11 = *(_BYTE *)(v122 + 72) != 0;
      result = sub_20E8C31DC(v122, "OSLogSurrogateAppender", 1, 0);
      v12 = result;
      if (((result == 0) & ~v11) != 0)
        goto LABEL_4;
      sub_20E863438((uint64_t)v112);
      sub_20E86A980(v113, (uint64_t)"Adding map measurement for frame ", 33);
      std::ostream::operator<<();
      v102 = v10;
      if ((v120 & 0x10) != 0)
      {
        v15 = v119;
        v16 = (const void **)&v115;
        if (v119 < v116)
        {
          v119 = v116;
          v15 = v116;
          v16 = (const void **)&v115;
        }
      }
      else
      {
        if ((v120 & 8) == 0)
        {
          v13 = 0;
          HIBYTE(v111) = 0;
          v14 = __dst;
          goto LABEL_23;
        }
        v15 = v114[2];
        v16 = (const void **)v114;
      }
      v17 = *v16;
      v13 = v15 - (_QWORD)*v16;
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v13 >= 0x17)
        break;
      HIBYTE(v111) = v15 - *(_BYTE *)v16;
      v14 = __dst;
      if (v13)
        goto LABEL_22;
LABEL_23:
      *((_BYTE *)v14 + v13) = 0;
      v103[0] = &v122;
      v103[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v103[2] = std::chrono::system_clock::now().__d_.__rep_;
      v104 = 2;
      v105 = "unknown file";
      v106 = 86;
      v107 = "unknown function";
      v108 = 0;
      v109 = 0;
      if (v111 >= 0)
        v20 = __dst;
      else
        v20 = (void **)__dst[0];
      v21 = *(_QWORD *)v103[0];
      v22 = (const char *)(*(_QWORD *)v103[0] + 16);
      v99 = v22;
      v100 = *(_QWORD *)v103[0];
      if (*(char *)(*(_QWORD *)v103[0] + 39) < 0)
      {
        v22 = *(const char **)(v21 + 16);
        v23 = *(_QWORD *)(v21 + 24);
        v24 = v5;
        v26 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v26 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        v23 = *(unsigned __int8 *)(*(_QWORD *)v103[0] + 39);
        v24 = v5;
        v25 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v25 & 1) != 0)
          goto LABEL_30;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v123);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v123);
        if ((_BYTE)v125 && SHIBYTE(v124) < 0)
          operator delete((void *)v123);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_30:
      if (byte_254A4A4F8[23] >= 0)
        v27 = byte_254A4A4F8;
      else
        v27 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v28 = byte_254A4A4F8[23];
      else
        v28 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v129 = os_log_create(v27, v22);
      if (v28 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v28 >= 0x17)
      {
        v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17)
          v30 = v28 | 7;
        v31 = v30 + 1;
        v29 = operator new(v30 + 1);
        *(_QWORD *)&v129[16] = v28;
        *(_QWORD *)&v130 = v31 | 0x8000000000000000;
        *(_QWORD *)&v129[8] = v29;
LABEL_43:
        memmove(v29, v27, v28);
        goto LABEL_44;
      }
      BYTE7(v130) = v28;
      v29 = &v129[8];
      if (v28)
        goto LABEL_43;
LABEL_44:
      v29[v28] = 0;
      BYTE8(v130) = 1;
      if (v23 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v5 = v24;
      v8 = v101;
      if (v23 >= 0x17)
      {
        v35 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17)
          v35 = v23 | 7;
        v36 = v35 + 1;
        v32 = (void **)operator new(v35 + 1);
        v131[1] = (void *)v23;
        v132 = v36 | 0x8000000000000000;
        v131[0] = v32;
      }
      else
      {
        HIBYTE(v132) = v23;
        v32 = v131;
        if (!v23)
        {
          LOBYTE(v131[0]) = 0;
          v133 = 1;
          v33 = *(NSObject **)v129;
          if ((SHIBYTE(v132) & 0x80000000) == 0)
            goto LABEL_48;
          goto LABEL_54;
        }
      }
      memmove(v32, v22, v23);
      *((_BYTE *)v32 + v23) = 0;
      v133 = 1;
      v33 = *(NSObject **)v129;
      if ((SHIBYTE(v132) & 0x80000000) == 0)
      {
LABEL_48:
        v34 = (const char *)v20;
        if (!BYTE8(v130))
          goto LABEL_57;
        goto LABEL_55;
      }
LABEL_54:
      operator delete(v131[0]);
      v34 = (const char *)v20;
      if (!BYTE8(v130))
        goto LABEL_57;
LABEL_55:
      if (SBYTE7(v130) < 0)
        operator delete(*(void **)&v129[8]);
LABEL_57:
      if (*(_QWORD *)v129)
        os_release(*(void **)v129);
      if (!v12 || !*(_QWORD *)(v12 + 24))
      {
        os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG);
        *(_DWORD *)v129 = 136315138;
        *(_QWORD *)&v129[4] = v34;
        v43 = (void *)_os_log_send_and_compose_impl();
        v4 = a2;
        if (!v43)
          goto LABEL_129;
        free(v43);
        if (!v102)
          goto LABEL_133;
        goto LABEL_130;
      }
      v37 = _os_log_pack_size();
      v38 = (std::__shared_weak_count_vtbl *)operator new(v37, (std::align_val_t)8uLL);
      v39 = (std::__shared_weak_count *)operator new();
      v39->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
      v39->__shared_owners_ = 0;
      v39->__shared_weak_owners_ = 0;
      v39[1].__vftable = v38;
      *(_QWORD *)&v123 = v38;
      *((_QWORD *)&v123 + 1) = v38;
      v124 = v39;
      v125 = 0;
      v126 = 0;
      v40 = strlen(v34);
      if (v40 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v41 = v40;
      if (v40 >= 0x17)
      {
        v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v40 | 7) != 0x17)
          v44 = v40 | 7;
        v45 = v44 + 1;
        v42 = operator new(v44 + 1);
        *(_QWORD *)&v128 = v41;
        *((_QWORD *)&v128 + 1) = v45 | 0x8000000000000000;
        v127 = v42;
LABEL_71:
        memcpy(v42, v34, v41);
        goto LABEL_72;
      }
      HIBYTE(v128) = v40;
      v42 = &v127;
      if (v40)
        goto LABEL_71;
LABEL_72:
      *((_BYTE *)v42 + v41) = 0;
      v46 = v127;
      v134[0] = v128;
      *(_QWORD *)((char *)v134 + 7) = *(_QWORD *)((char *)&v128 + 7);
      v47 = HIBYTE(v128);
      v48 = operator new(0x38uLL);
      v48[1] = 0;
      v48[2] = 0;
      v48[3] = off_24C9ABC20;
      *v48 = &off_24C9ABBD0;
      v49 = v134[0];
      v48[4] = v46;
      v48[5] = v49;
      *(_QWORD *)((char *)v48 + 47) = *(_QWORD *)((char *)v134 + 7);
      *((_BYTE *)v48 + 55) = v47;
      v134[0] = 0;
      *(_QWORD *)((char *)v134 + 7) = 0;
      v50 = v126;
      v125 = (char *)(v48 + 3);
      v126 = (std::__shared_weak_count *)v48;
      v8 = v101;
      if (v50)
      {
        p_shared_owners = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(p_shared_owners);
        while (__stlxr(v52 - 1, p_shared_owners));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      *(_OWORD *)v129 = v123;
      v53 = v125;
      *(_QWORD *)&v129[16] = v124;
      if (v124)
      {
        v54 = (unint64_t *)&v124->__shared_owners_;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      v56 = v126;
      *(_QWORD *)&v130 = v53;
      *((_QWORD *)&v130 + 1) = v126;
      if (v126)
      {
        v57 = (unint64_t *)&v126->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
        v131[0] = v53;
        do
          v59 = __ldaxr(v57);
        while (__stlxr(v59 - 1, v57));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      else
      {
        v131[0] = v53;
      }
      v60 = v124;
      if (v124)
      {
        v61 = (unint64_t *)&v124->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = *(_QWORD *)v129;
      if (*((char *)v131[0] + 31) >= 0)
        v64 = (char *)v131[0] + 8;
      else
        v64 = (char *)*((_QWORD *)v131[0] + 1);
      v65 = _os_log_pack_fill();
      *(_DWORD *)v65 = 136315138;
      *(_QWORD *)(v65 + 4) = v64;
      v66 = operator new();
      v67 = *(unsigned __int8 *)(v100 + 39);
      v68 = v99;
      if ((v67 & 0x80u) != 0)
      {
        v68 = *(const char **)(v100 + 16);
        v67 = *(_QWORD *)(v100 + 24);
      }
      *(_QWORD *)v66 = v63;
      *(_OWORD *)(v66 + 8) = *(_OWORD *)&v129[8];
      *(_QWORD *)&v129[8] = 0;
      *(_QWORD *)&v129[16] = 0;
      *(_OWORD *)(v66 + 24) = v130;
      v130 = 0uLL;
      *(_QWORD *)(v66 + 40) = v68;
      *(_QWORD *)(v66 + 48) = v67;
      *(_BYTE *)(v66 + 56) = 2;
      v127 = 0;
      *(_QWORD *)&v123 = v66;
      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), &v123);
      v69 = v123;
      *(_QWORD *)&v123 = 0;
      v4 = a2;
      if (v69)
      {
        v70 = *(std::__shared_weak_count **)(v69 + 32);
        if (v70)
        {
          v71 = (unint64_t *)&v70->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        v73 = *(std::__shared_weak_count **)(v69 + 16);
        if (v73)
        {
          v74 = (unint64_t *)&v73->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        MEMORY[0x212BC6398](v69, 0x10F0C40B62ED6C6);
        v76 = v127;
        v127 = 0;
        if (v76)
        {
          v77 = (std::__shared_weak_count *)v76[4];
          if (v77)
          {
            v78 = (unint64_t *)&v77->__shared_owners_;
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          v80 = (std::__shared_weak_count *)v76[2];
          if (v80)
          {
            v81 = (unint64_t *)&v80->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          MEMORY[0x212BC6398](v76, 0x10F0C40B62ED6C6);
        }
      }
      v83 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
      if (!*((_QWORD *)&v130 + 1))
        goto LABEL_125;
      v84 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
        v86 = *(std::__shared_weak_count **)&v129[16];
        if (!*(_QWORD *)&v129[16])
          goto LABEL_129;
      }
      else
      {
LABEL_125:
        v86 = *(std::__shared_weak_count **)&v129[16];
        if (!*(_QWORD *)&v129[16])
          goto LABEL_129;
      }
      v87 = (unint64_t *)&v86->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (v88)
      {
LABEL_129:
        if (!v102)
          goto LABEL_133;
        goto LABEL_130;
      }
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
      if (!v102)
        goto LABEL_133;
LABEL_130:
      v89 = (const char *)__dst;
      if (v111 < 0)
        v89 = (const char *)__dst[0];
      sub_20E8C003C((uint64_t)v103, "%s", v89);
      sub_20E863570((uint64_t)v103);
LABEL_133:
      sub_20E863570((uint64_t)v103);
      v90 = v109;
      if (v109)
      {
        v91 = (unint64_t *)&v109->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
          if ((SHIBYTE(v111) & 0x80000000) == 0)
            goto LABEL_139;
LABEL_138:
          operator delete(__dst[0]);
          goto LABEL_139;
        }
      }
      if (SHIBYTE(v111) < 0)
        goto LABEL_138;
LABEL_139:
      v112[0] = v96;
      *(_QWORD *)((char *)v112 + *(_QWORD *)(v96 - 24)) = v95;
      v113[0] = v94;
      v113[1] = v93;
      v7 = v97;
      if (v118 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      result = MEMORY[0x212BC6290](&v121);
LABEL_4:
      if (++v6 == v8)
        return result;
    }
    v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v18 = v13 | 7;
    v19 = v18 + 1;
    v14 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)v13;
    v111 = v19 | 0x8000000000000000;
    __dst[0] = v14;
LABEL_22:
    memmove(v14, v17, v13);
    goto LABEL_23;
  }
  return result;
}

void sub_20F09455C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  uint64_t v52;

  if (*(_BYTE *)(v52 - 232) && *(char *)(v52 - 233) < 0)
    operator delete(*(void **)(v52 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a37);
  if (a51 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a52);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a52);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0946E4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 v7;
  char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  __uint64_t v16[2];
  int v17;
  _QWORD v18[3];
  char v19;
  void *v20;
  char v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = *(_QWORD *)(a1 + 7344);
    if (v5 != a2)
      *(_QWORD *)(a1 + 7352) = v5;
  }
  v6 = sub_210219C18();
  v7 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v17 = 134217984;
    v18[0] = a2;
    v9 = (char *)_os_log_send_and_compose_impl();
    v10 = strlen(v9);
    v16[0] = 0;
    pthread_threadid_np(0, v16);
    v11 = v16[0];
    timespec_get((timespec *)v16, 1);
    sub_210219E20(&v17, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v6 + 1), (__int128 *)(v6 + 5), "FE:MS:%llu", 0xAuLL, v9, v10, v11, v16);
    std::mutex::lock(&stru_254A5A410);
    v12 = qword_254A5A458;
    for (i = unk_254A5A460; v12 != i; v12 += 40)
    {
      v14 = *(_QWORD *)(v12 + 32);
      if (!v14)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v14 + 48))(v14, &v17);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v29 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_11:
        if (!v25)
        {
LABEL_17:
          if (v22 && v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(*(void **)((char *)v18 + 4));
          if (v9)
            free(v9);
          goto LABEL_24;
        }
LABEL_15:
        if (v24 < 0)
          operator delete(v23);
        goto LABEL_17;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v26);
    if (!v25)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_24:
  if (os_signpost_enabled((os_log_t)*v6))
  {
    v17 = 134217984;
    v18[0] = a2;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  *(_QWORD *)(a1 + 7344) = a2;
  return a2;
}

void sub_20F0949CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
LABEL_7:
  if (a34 < 0)
    operator delete(a29);
LABEL_9:
  if (a28)
  {
    if (a27 < 0)
      operator delete(a22);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if (!v47)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v47)
  {
    goto LABEL_14;
  }
  free(v47);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F094A88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;

  kdebug_trace();
  (*(void (**)(_QWORD *))(*a1 + 488))(a1);
  if (*(_BYTE *)(a2 + 4104) && *(_QWORD *)(a2 + 4008) == a1[919])
  {
    v4 = *(void **)(a2 + 3984);
    if (v4)
    {
      *(_QWORD *)(a2 + 3992) = v4;
      operator delete(v4);
    }
    *(_BYTE *)(a2 + 4104) = 0;
  }
  return kdebug_trace();
}

void sub_20F094B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8E69C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20F094B68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *result;
  unsigned int *v5;
  unsigned int *i;
  uint64_t v7;
  uint64_t v8;
  float64x2_t v9;
  uint64_t v10;
  unsigned int v11;
  float64x2_t v13;
  float64x2_t v14;
  int8x16_t v16;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v27;
  float64x2_t v30;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v41;
  double v42;
  __double2 v43;
  __double2 v44;
  char *v45;
  float64x2_t v47;
  float64x2_t v48;
  double v50;
  int64x2_t v53;
  int64x2_t v54;
  unint64_t v55;
  int64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  int8x16_t v62;
  int64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  unint64_t v68;
  float64x2_t v69;
  float64x2_t v75;
  float64x2_t v77;
  float64x2_t v78;
  uint64_t v79;
  int8x16_t v80;
  float64x2_t v81;
  float64x2_t v82;
  double v83;
  int8x16_t v84;
  int64x2_t v85;
  int8x16_t v86;
  double v87;
  int64x2_t v88;
  double v89;
  float64x2_t v90;
  float64x2_t v91;
  double v92;
  float64x2_t v93;
  double v94;
  double v95;
  double v96;
  float64x2_t v97;
  float64x2_t v98;
  double v99;
  int8x16_t v100;
  float64x2_t v101;
  float64x2_t v102;
  double v103;
  double v104;
  double v105;
  double sinval;
  float64x2_t v107;
  float64x2_t v108;
  double cosval;
  double v110;
  double v111;
  float64x2_t v112;
  double v113;
  float64x2_t v114;
  float64x2_t v115;
  double v116;
  double v117;
  float64x2_t v118;
  double v119;
  double v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  unsigned int v124;
  unsigned int v125;
  float64x2_t v126;
  _BYTE v127[32];
  float64x2_t v128;
  double v129;
  char v130;
  _QWORD *v131[2];

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  v5 = (unsigned int *)*((_QWORD *)result + 603);
  for (i = (unsigned int *)*((_QWORD *)result + 604); v5 != i; v5 += 8)
  {
    v8 = *((_QWORD *)v5 + 1);
    v7 = *((_QWORD *)v5 + 2);
    if (v7 - v8 == 3328)
    {
      v9.f64[0] = *(float64_t *)(v8 + 16);
      v85 = *(int64x2_t *)(v8 + 24);
      v88 = *(int64x2_t *)v8;
      v120 = *(double *)(v8 + 64);
      v118 = *(float64x2_t *)(v8 + 48);
      v9.f64[1] = *(float64_t *)(v8 + 40);
      v122 = v9;
      v94 = *(double *)(v8 + 88);
      v91 = *(float64x2_t *)(v8 + 72);
      v10 = v7 - 1664;
      v105 = *(double *)(v10 + 16);
      v111 = *(double *)(v10 + 40);
      v108 = *(float64x2_t *)(v10 + 24);
      v116 = *(double *)(v10 + 64);
      v114 = *(float64x2_t *)(v10 + 48);
      v99 = *(double *)(v10 + 88);
      v102 = *(float64x2_t *)v10;
      v97 = *(float64x2_t *)(v10 + 72);
      v11 = *v5;
      result = (char *)(*(_QWORD *(**)(float64x2_t *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 208))(&v126, a1, *v5, 0);
      if (v130)
      {
        v13 = v118;
        _D22 = v120;
        v14 = (float64x2_t)vzip1q_s64(v88, v85);
        _Q2 = (float64x2_t)vzip2q_s64(v88, v85);
        v16 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q2, 1);
        _Q5 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q2.f64[0], 0);
        _V16.D[1] = v91.f64[1];
        _D7 = v94;
        v20 = vnegq_f64(v91);
        v21 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v14, v20.f64[0]), _Q2, v91, 1), v122, v94, 0);
        _Q18 = vmulq_f64(v118, v20);
        _Q2.f64[0] = v118.f64[1];
        __asm
        {
          FMLS            D18, D2, V16.D[1]
          FMLS            D18, D22, V7.D[0]
        }
        v27 = (float64x2_t)vextq_s8(_Q5, v16, 8uLL);
        v16.i64[0] = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).i64[0];
        _Q5.i64[0] = vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL).i64[0];
        v20.f64[0] = *(double *)vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).i64;
        _V24.D[1] = v97.f64[1];
        _D30 = v99;
        v30.f64[0] = v105;
        v30.f64[1] = v111;
        _Q19 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v102, (int64x2_t)v108), vnegq_f64(v97).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v102, (int64x2_t)v108), v97, 1), v30, v99, 0);
        _D7 = v114.f64[1];
        __asm { FMLS            D20, D7, V24.D[1] }
        _D24 = v116;
        __asm { FMLS            D20, D24, V30.D[0] }
        *(_QWORD *)&v14.f64[1] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
        v36 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v14, v102.f64[0]), v27, *(double *)v16.i64), v122, v105);
        v13.f64[1] = *(double *)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).i64;
        v37 = vmulq_f64(v13, v102);
        v37.f64[0] = v37.f64[0] + v13.f64[1] * *(double *)v16.i64 + v120 * v105;
        v38 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v14, v108.f64[0]), v27, *(double *)_Q5.i64), v122, v111);
        *(double *)_Q5.i64 = vmulq_f64(v13, v108).f64[0] + v13.f64[1] * *(double *)_Q5.i64 + v120 * v111;
        v39 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v14, v114.f64[0]), v27, v20.f64[0]), v122, v116);
        _Q1 = vmulq_f64(v13, v114);
        v27.f64[0] = _Q1.f64[0] + v13.f64[1] * v20.f64[0] + v120 * v116;
        v77 = v36;
        v78 = vmulq_n_f64(v36, _Q19.f64[0]);
        v115 = v38;
        v121 = v39;
        v123 = v37;
        v117 = *(double *)_Q5.i64;
        v119 = v27.f64[0];
        *(double *)&v79 = _D20;
        v80 = (int8x16_t)_Q19;
        __asm { FMLA            D1, D5, V19.D[1] }
        _Q1.f64[0] = _Q1.f64[0] + v27.f64[0] * _D20;
        v81 = _Q18;
        v82 = v21;
        v41 = vsubq_f64(v21, vmlaq_n_f64(vmlaq_laneq_f64(v78, v38, _Q19, 1), v39, _D20));
        v97.f64[0] = *(float64_t *)&v127[16];
        v100 = (int8x16_t)v128;
        v89 = *(double *)&v127[8];
        v92 = *(double *)&v127[24];
        v84.i64[0] = *(_QWORD *)v127;
        v86 = (int8x16_t)v126;
        v103 = v129;
        *(_QWORD *)&v95 = vextq_s8(v100, v100, 8uLL).u64[0];
        *(_QWORD *)&v83 = vextq_s8(v86, v86, 8uLL).u64[0];
        v112 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v126, v41.f64[0]), *(float64x2_t *)&v127[8], v41, 1), v128, vsubq_f64(_Q18, _Q1).f64[0]);
        v42 = atan2(v112.f64[0], v112.f64[1]);
        v43 = __sincos_stret(v42);
        sinval = v43.__sinval;
        cosval = v43.__cosval;
        if (v43.__sinval * v112.f64[0] + vmuld_lane_f64(v43.__cosval, v112, 1) < 0.0)
        {
          v44 = __sincos_stret(v42 + 3.14159265);
          sinval = v44.__sinval;
          cosval = v44.__cosval;
          if (v112.f64[0] * v44.__sinval + v112.f64[1] * v44.__cosval <= 0.0)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Math/src/GeometryUtilities.cpp", 100, (uint64_t)"sin(yaw) * G_t_CL_to_CR(0) + cos(yaw) * G_t_CL_to_CR(1) > 0", 59, (uint64_t)&unk_2102D576B, 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v103 = v129;
            v97 = *(float64x2_t *)&v127[16];
            v100 = (int8x16_t)v128;
            *(_QWORD *)&v92 = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u64[0];
            *(_QWORD *)&v95 = vextq_s8(v100, v100, 8uLL).u64[0];
            v84 = *(int8x16_t *)v127;
            v86 = (int8x16_t)v126;
            *(_QWORD *)&v89 = vextq_s8(v84, v84, 8uLL).u64[0];
            *(_QWORD *)&v83 = vextq_s8(v86, v86, 8uLL).u64[0];
          }
        }
        v124 = v11;
        v125 = 0;
        if (v11 >= 0x10000
          && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| v125 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)))
        {
          abort();
        }
        v131[0] = &v124;
        v45 = sub_20F095398((float *)a2, (int *)&v124, v131);
        _Q6 = v82;
        v47.f64[0] = cosval;
        v48.f64[0] = -sinval;
        v48.f64[1] = cosval;
        v47.f64[1] = sinval;
        _Q0.f64[1] = v123.f64[1];
        _Q0.f64[0] = v123.f64[0] * *(double *)v80.i64
                   + v117 * *(double *)vextq_s8(v80, v80, 8uLL).i64
                   + v119 * *(double *)&v79;
        *(_QWORD *)&v50 = *(_OWORD *)&vsubq_f64(v81, _Q0);
        *(_QWORD *)&_Q6.f64[1] = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
        _Q21 = vsubq_f64(_Q6, vmlaq_f64(vmlaq_f64(v78, (float64x2_t)vdupq_laneq_s64((int64x2_t)v80, 1), v115), (float64x2_t)vdupq_lane_s64(v79, 0), v121));
        _Q7 = (int64x2_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v47, *(double *)v86.i64), v48, v83), (float64x2_t)0, *(double *)v84.i64);
        v53 = (int64x2_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v47, v89), v48, v97.f64[0]), (float64x2_t)0, v92);
        _Q6.f64[0] = v92 + v89 * 0.0 + v97.f64[0] * 0.0;
        v54 = (int64x2_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v47, *(double *)v100.i64), v48, v95), (float64x2_t)0, v103);
        *(double *)&v55 = v103 + *(double *)v100.i64 * 0.0 + v95 * 0.0;
        _D1 = _Q21.f64[1];
        v90 = _Q21;
        __asm { FMLA            D0, D1, V21.D[1] }
        v96 = v50;
        _Q1.f64[0] = 0.0;
        _Q1.f64[1] = sqrt(vmlad_n_f64(_Q0.f64[0], v50, v50)) * -0.5;
        v98 = (float64x2_t)v54;
        v101 = (float64x2_t)v53;
        v58 = (int64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(v53.i64[0], 0), (int8x16_t)vdupq_laneq_s64(v53, 1), 8uLL);
        v59 = (float64x2_t)vzip1q_s64(_Q7, v58);
        v107 = (float64x2_t)_Q7;
        v110 = _Q6.f64[0];
        v60 = (float64x2_t)vzip2q_s64(_Q7, v58);
        v113 = *(double *)v84.i64 + *(double *)v86.i64 * 0.0 + v83 * 0.0;
        v61.f64[0] = v113;
        v61.f64[1] = _Q6.f64[0];
        v62 = vextq_s8((int8x16_t)v60, (int8x16_t)vdupq_laneq_s64(v54, 1), 8uLL);
        v63 = vzip1q_s64(v54, (int64x2_t)v60);
        v64 = vmlsq_laneq_f64(vmulq_n_f64(v59, vnegq_f64(_Q1).f64[0]), v60, _Q1, 1);
        _Q7.i64[0] = v54.i64[1];
        __asm { FMLS            D6, D7, V1.D[1] }
        *(double *)_Q7.i64 = _Q6.f64[0] + *(double *)&v55 * -0.0;
        *(_QWORD *)&_Q1.f64[0] = vdupq_laneq_s64(v63, 1).u64[0];
        *(_QWORD *)&_Q1.f64[1] = v62.i64[0];
        v104 = *(double *)&v55;
        v87 = *(double *)_Q7.i64;
        _Q7.i64[1] = 1.0;
        *(float64x2_t *)(v45 + 24) = v59;
        *(_OWORD *)(v45 + 40) = v63.u64[0];
        *(float64x2_t *)(v45 + 56) = _Q1;
        *(_OWORD *)(v45 + 72) = v62.u64[1];
        *(float64x2_t *)(v45 + 88) = v61;
        *(_OWORD *)(v45 + 104) = v55;
        v93 = vmlaq_f64(v64, (float64x2_t)vdupq_n_s64(0x8000000000000000), v61);
        *(float64x2_t *)(v45 + 120) = v93;
        *(int64x2_t *)(v45 + 136) = _Q7;
        v124 = v11;
        v125 = 1;
        if (v11 >= 0x10000
          && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| v125 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)))
        {
          abort();
        }
        v131[0] = &v124;
        result = sub_20F095398((float *)a2, (int *)&v124, v131);
        v65 = v77;
        *(_QWORD *)&v66.f64[0] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
        v65.f64[1] = v115.f64[0];
        *(_QWORD *)&v66.f64[1] = vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL).u64[0];
        _D22 = v119;
        v68 = vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u64[0];
        v69.f64[0] = v123.f64[0];
        v69.f64[1] = v117;
        _V5.D[1] = v90.f64[1];
        _D3 = v121.f64[1];
        __asm { FMLS            D4, D3, V5.D[1] }
        _D5 = v96;
        __asm { FMLS            D4, D22, V5.D[0] }
        v75 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v65, vnegq_f64(v90).f64[0]), v66, v90, 1), v69, v96, 0);
        __asm { FMOV            V3.2D, #1.0 }
        _Q3.f64[0] = _D4;
        *(float64x2_t *)(result + 24) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v65, v107.f64[0]), v66, v101.f64[0]), v69, v98.f64[0]), (float64x2_t)0, v75);
        *(float64x2_t *)(result + 40) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v121.f64[0], v107.f64[0]), (float64x2_t)v68, v101.f64[0]), (float64x2_t)*(unint64_t *)&v119, v98.f64[0]), (float64x2_t)0, _Q3);
        *(float64x2_t *)(result + 56) = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v65, v107, 1), v66, v101, 1), v69, v98, 1), (float64x2_t)0, v75);
        *(float64x2_t *)(result + 72) = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v121.f64[0], v107, 1), (float64x2_t)v68, v101, 1), (float64x2_t)*(unint64_t *)&v119, v98, 1), (float64x2_t)0, _Q3);
        *(float64x2_t *)(result + 88) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v65, v113), v66, v110), v69, v104), (float64x2_t)0, v75);
        *(float64x2_t *)(result + 104) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v121.f64[0], v113), (float64x2_t)v68, v110), (float64x2_t)*(unint64_t *)&v119, v104), (float64x2_t)0, _Q3);
        *(float64x2_t *)(result + 120) = vaddq_f64(v75, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v65, v93.f64[0]), v66, v93, 1), v69, v87));
        *(float64x2_t *)(result + 136) = vaddq_f64(_Q3, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v121.f64[0], v93.f64[0]), (float64x2_t)v68, v93, 1), (float64x2_t)*(unint64_t *)&v119, v87));
      }
    }
  }
  return result;
}

void sub_20F0952F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20F09530C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20F095320(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20F095334(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20F095348(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20F09535C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20F095370(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

void sub_20F095384(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E8C25A8(v1);
  _Unwind_Resume(a1);
}

char *sub_20F095398(float *a1, int *a2, _QWORD **a3)
{
  unint64_t v3;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  char *v13;
  unint64_t v15;
  uint64_t v17;
  float v18;
  float v19;
  _QWORD *v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  _QWORD *i;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  size_t v42;
  _QWORD *v43;
  unint64_t v44;

  if (*a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_104;
  }
  v7 = a2[1];
  if (v7 >= 0x10000)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v7 = a2[1];
      goto LABEL_6;
    }
LABEL_104:
    abort();
  }
LABEL_6:
  v8 = *a2;
  v9 = (unsigned __int16)v7 | ((unsigned __int16)*a2 << 16);
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = (unsigned __int16)v7 | ((unsigned __int16)v8 << 16);
      if (v10 <= v9)
        v3 = v9 % v10;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v9;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = *((_QWORD *)v13 + 1);
            if (v17 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v8 && *((_DWORD *)v13 + 5) == v7)
                return v13;
            }
            else if ((v17 & (v10 - 1)) != v3)
            {
              goto LABEL_33;
            }
            v13 = *(char **)v13;
            if (!v13)
              goto LABEL_33;
          }
        }
        do
        {
          v15 = *((_QWORD *)v13 + 1);
          if (v15 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v8 && *((_DWORD *)v13 + 5) == v7)
              return v13;
          }
          else
          {
            if (v15 >= v10)
              v15 %= v10;
            if (v15 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_33:
  v13 = (char *)operator new(0x98uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  *((_QWORD *)v13 + 2) = **a3;
  *(_OWORD *)(v13 + 72) = unk_21039B6B8;
  *(_OWORD *)(v13 + 56) = xmmword_21039B6A8;
  *(_OWORD *)(v13 + 40) = unk_21039B698;
  *(_OWORD *)(v13 + 24) = xmmword_21039B688;
  *(_OWORD *)(v13 + 136) = unk_21039B6F8;
  *(_OWORD *)(v13 + 120) = xmmword_21039B6E8;
  *(_OWORD *)(v13 + 104) = unk_21039B6D8;
  *(_OWORD *)(v13 + 88) = xmmword_21039B6C8;
  v18 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v19 = a1[8];
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v9 = v3;
    v20 = *(_QWORD **)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v21)
      goto LABEL_95;
LABEL_83:
    *(_QWORD *)v13 = *v21;
LABEL_101:
    *v21 = v13;
    goto LABEL_102;
  }
  v22 = 1;
  if (v10 >= 3)
    v22 = (v10 & (v10 - 1)) != 0;
  v23 = v22 | (2 * v10);
  v24 = vcvtps_u32_f32(v18 / v19);
  if (v23 <= v24)
    prime = v24;
  else
    prime = v23;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v10 = *((_QWORD *)a1 + 1);
  }
  if (prime > v10)
  {
LABEL_47:
    if (prime >> 61)
      sub_20E877A38();
    v26 = operator new(8 * prime);
    v27 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v26;
    if (v27)
      operator delete(v27);
    v28 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
    while (prime != v28);
    v30 = (uint64_t *)(a1 + 4);
    v29 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v29)
      goto LABEL_79;
    v31 = v29[1];
    v32 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v33 = v31 & v32;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v30;
      for (i = (_QWORD *)*v29; *v29; i = (_QWORD *)*v29)
      {
        v35 = i[1] & v32;
        if (v35 == v33)
        {
          v29 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *v29 = *i;
          v36 = 8 * v35;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v36);
          **(_QWORD **)(*(_QWORD *)a1 + v36) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v29;
          v29 = i;
          v33 = v35;
        }
      }
      goto LABEL_79;
    }
    if (v31 >= prime)
      v31 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v30;
    v40 = (_QWORD *)*v29;
    if (!*v29)
    {
LABEL_79:
      v10 = prime;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_80;
LABEL_94:
      v9 = ((_DWORD)v10 - 1) & v9;
      v20 = *(_QWORD **)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
      if (!v21)
        goto LABEL_95;
      goto LABEL_83;
    }
    while (1)
    {
      v42 = v40[1];
      if (v42 >= prime)
        v42 %= prime;
      if (v42 == v31)
        goto LABEL_73;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v42))
      {
        *v29 = *v40;
        v41 = 8 * v42;
        *v40 = **(_QWORD **)(*(_QWORD *)a1 + v41);
        **(_QWORD **)(*(_QWORD *)a1 + v41) = v40;
        v40 = v29;
LABEL_73:
        v29 = v40;
        v40 = (_QWORD *)*v40;
        if (!v40)
          goto LABEL_79;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v29;
        v29 = v40;
        v40 = (_QWORD *)*v40;
        v31 = v42;
        if (!v40)
          goto LABEL_79;
      }
    }
  }
  if (prime < v10)
  {
    v37 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v10 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
    {
      v37 = std::__next_prime(v37);
    }
    else
    {
      v39 = 1 << -(char)__clz(v37 - 1);
      if (v37 >= 2)
        v37 = v39;
    }
    if (prime <= v37)
      prime = v37;
    if (prime < v10)
    {
      if (!prime)
      {
        v43 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v43)
          operator delete(v43);
        v10 = 0;
        *((_QWORD *)a1 + 1) = 0;
        goto LABEL_94;
      }
      goto LABEL_47;
    }
    v10 = *((_QWORD *)a1 + 1);
  }
  if ((v10 & (v10 - 1)) == 0)
    goto LABEL_94;
LABEL_80:
  if (v10 <= v9)
    v9 %= v10;
  v20 = *(_QWORD **)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v21)
    goto LABEL_83;
LABEL_95:
  *(_QWORD *)v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v20[v9] = a1 + 4;
  if (*(_QWORD *)v13)
  {
    v44 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v44 >= v10)
        v44 %= v10;
    }
    else
    {
      v44 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v44);
    goto LABEL_101;
  }
LABEL_102:
  ++*((_QWORD *)a1 + 3);
  return v13;
}

void sub_20F0958F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep sub_20F095908(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result, double a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v3;
  char v4;
  double v5;
  double v6;
  unsigned __int8 v7;
  _QWORD *v8;
  int v9;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v10;
  uint64_t *v11;
  unsigned __int8 v12;
  int v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  __uint64_t v23[2];
  int v24;
  _BYTE v25[18];
  __int16 v26;
  int v27;
  char v28;
  void *v29;
  char v30;
  char v31;
  void *v32;
  char v33;
  char v34;
  void *v35;
  char v36;
  void *__p;
  char v38;
  uint64_t v39;

  v3 = result;
  v39 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(result + 88))
  {
    if (!*(_BYTE *)(result + 80)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/GeolocationManager.cpp", 74, (uint64_t)"opt_last_geo_location_.has_value()", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = a2 - *(double *)v3;
    v6 = *(double *)(v3 + 64);
    *(_BYTE *)(v3 + 88) = 1;
    *(_BYTE *)(v3 + 89) = v6 > v5;
    v7 = atomic_load((unsigned __int8 *)&qword_254A61A28);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A61A28))
    {
      v22 = operator new(0x28uLL);
      v22[1] = 0;
      v22[2] = 0;
      *v22 = &off_24C9C4340;
      *((_BYTE *)v22 + 24) = 0;
      *((_BYTE *)v22 + 32) = 0;
      qword_254A61A30 = (uint64_t)(v22 + 3);
      qword_254A61A38 = (uint64_t)v22;
      unk_254A61A40 = 5000000000;
      __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A61A30, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61A28);
    }
    v8 = (_QWORD *)qword_254A61A30;
    v9 = *(unsigned __int8 *)(qword_254A61A30 + 8);
    result = std::chrono::steady_clock::now().__d_.__rep_;
    if (v9)
    {
      if (result - *v8 < 5000000000)
        goto LABEL_2;
      v10 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)qword_254A61A30;
    }
    else
    {
      v10 = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)qword_254A61A30;
      if (!*(_BYTE *)(qword_254A61A30 + 8))
        *(_BYTE *)(qword_254A61A30 + 8) = 1;
    }
    *v10 = result;
    v11 = sub_210219C18();
    v12 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_37;
    v14 = *(unsigned __int8 *)(v3 + 89);
    v24 = 134218496;
    *(double *)v25 = v6;
    *(_WORD *)&v25[8] = 2048;
    *(double *)&v25[10] = v5;
    v26 = 1024;
    v27 = v14;
    v15 = (char *)_os_log_send_and_compose_impl();
    v16 = strlen(v15);
    v23[0] = 0;
    pthread_threadid_np(0, v23);
    v17 = v23[0];
    timespec_get((timespec *)v23, 1);
    sub_210219E20(&v24, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v11 + 1), (__int128 *)(v11 + 5), "ICDVS: Last loc_time: %f vs valid time %f, ground: %d", 0x35uLL, v15, v16, v17, v23);
    std::mutex::lock(&stru_254A5A410);
    v18 = qword_254A5A458;
    for (i = unk_254A5A460; v18 != i; v18 += 40)
    {
      v20 = *(_QWORD *)(v18 + 32);
      if (!v20)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v20 + 48))(v20, &v24);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v38 < 0)
    {
      operator delete(__p);
      if ((v36 & 0x80000000) == 0)
      {
LABEL_24:
        if (!v34)
        {
LABEL_30:
          if (v31 && v30 < 0)
            operator delete(v29);
          if (v28 < 0)
            operator delete(*(void **)&v25[4]);
          if (v15)
            free(v15);
LABEL_37:
          result = os_signpost_enabled((os_log_t)*v11);
          if ((_DWORD)result)
          {
            v21 = *(unsigned __int8 *)(v3 + 89);
            v24 = 134218496;
            *(double *)v25 = v6;
            *(_WORD *)&v25[8] = 2048;
            *(double *)&v25[10] = v5;
            v26 = 1024;
            v27 = v21;
            result = _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_2;
        }
LABEL_28:
        if (v33 < 0)
          operator delete(v32);
        goto LABEL_30;
      }
    }
    else if ((v36 & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v35);
    if (!v34)
      goto LABEL_30;
    goto LABEL_28;
  }
LABEL_2:
  if (!*(_BYTE *)(v3 + 91))
    return result;
  if (*(_BYTE *)(v3 + 104))
  {
    if (a2 - *(double *)(v3 + 96) < *(double *)(v3 + 8))
      return result;
    v4 = 0;
    *(_BYTE *)(v3 + 112) = 1;
    *(_BYTE *)(v3 + 91) = 0;
  }
  else
  {
    *(double *)(v3 + 96) = a2;
    v4 = 1;
  }
  *(_BYTE *)(v3 + 104) = v4;
  return result;
}

void sub_20F095D98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A61A28);
  _Unwind_Resume(a1);
}

void sub_20F095DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

uint64_t sub_20F095E64(uint64_t result)
{
  uint64_t v1;
  char *v2;
  char *v3;
  double *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t *v15;
  unsigned __int8 v16;
  char *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *v28[3];
  char v29;
  void *v30;
  char v31;
  char v32;
  void *v33;
  char v34;
  char v35;
  void *v36;
  char v37;
  void *__p;
  char v39;
  __uint64_t v40[2];

  if (*(_BYTE *)(result + 89))
  {
    v1 = result;
    v24 = *(_OWORD *)(result + 24);
    v25 = *(_OWORD *)(result + 40);
    v26 = *(_OWORD *)(result + 56);
    v27 = *(_QWORD *)(result + 72);
    if (!*(_BYTE *)(result + 80))
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/GeolocationManager.cpp", 139, (uint64_t)"opt_last_geo_location.has_value()", 33, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        abort();
    }
    v2 = *(char **)(v1 + 120);
    v3 = *(char **)(v1 + 128);
    v4 = (double *)v2;
    if (v2 != v3)
    {
      v4 = *(double **)(v1 + 120);
      while (v4[5] != *(double *)(v1 + 64))
      {
        v4 += 7;
        if (v4 == (double *)v3)
          goto LABEL_10;
      }
    }
    if (v4 == (double *)v3)
    {
LABEL_10:
      v5 = *(_QWORD *)(v1 + 136);
      if ((unint64_t)v3 >= v5)
      {
        v7 = 0x6DB6DB6DB6DB6DB7 * ((v3 - v2) >> 3) + 1;
        if (v7 > 0x492492492492492)
          sub_20E867F44();
        v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - (_QWORD)v2) >> 3);
        if (2 * v8 > v7)
          v7 = 2 * v8;
        if (v8 >= 0x249249249249249)
          v9 = 0x492492492492492;
        else
          v9 = v7;
        if (v9)
        {
          if (v9 > 0x492492492492492)
            sub_20E877A38();
          v10 = (char *)operator new(56 * v9);
        }
        else
        {
          v10 = 0;
        }
        v11 = &v10[8 * ((v3 - v2) >> 3)];
        *(_OWORD *)v11 = v24;
        *((_OWORD *)v11 + 1) = v25;
        *((_OWORD *)v11 + 2) = v26;
        *((_QWORD *)v11 + 6) = v27;
        v6 = v11 + 56;
        if (v2 != v3)
        {
          do
          {
            v12 = *(_OWORD *)(v3 - 56);
            v13 = *(_OWORD *)(v3 - 40);
            v14 = *(_OWORD *)(v3 - 24);
            *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
            *(_OWORD *)(v11 - 24) = v14;
            *(_OWORD *)(v11 - 40) = v13;
            *(_OWORD *)(v11 - 56) = v12;
            v11 -= 56;
            v3 -= 56;
          }
          while (v3 != v2);
          v2 = *(char **)(v1 + 120);
        }
        *(_QWORD *)(v1 + 120) = v11;
        *(_QWORD *)(v1 + 128) = v6;
        *(_QWORD *)(v1 + 136) = &v10[56 * v9];
        if (v2)
          operator delete(v2);
      }
      else
      {
        *(_OWORD *)v3 = v24;
        *((_OWORD *)v3 + 1) = v25;
        *((_OWORD *)v3 + 2) = v26;
        *((_QWORD *)v3 + 6) = v27;
        v6 = v3 + 56;
      }
      *(_QWORD *)(v1 + 128) = v6;
      v15 = sub_210219C18();
      v16 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_47;
      LOWORD(v28[0]) = 0;
      v18 = (char *)_os_log_send_and_compose_impl();
      v19 = strlen(v18);
      v40[0] = 0;
      pthread_threadid_np(0, v40);
      v20 = v40[0];
      timespec_get((timespec *)v40, 1);
      sub_210219E20(v28, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v15 + 1), (__int128 *)(v15 + 5), "MPC: Add suppressed location", 0x1CuLL, v18, v19, v20, v40);
      std::mutex::lock(&stru_254A5A410);
      v21 = qword_254A5A458;
      for (i = unk_254A5A460; v21 != i; v21 += 40)
      {
        v23 = *(_QWORD *)(v21 + 32);
        if (!v23)
          sub_20E86D37C();
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, v28);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v39 < 0)
      {
        operator delete(__p);
        if ((v37 & 0x80000000) == 0)
        {
LABEL_34:
          if (!v35)
          {
LABEL_40:
            if (v32 && v31 < 0)
              operator delete(v30);
            if (v29 < 0)
              operator delete(v28[1]);
            if (v18)
              free(v18);
LABEL_47:
            result = os_signpost_enabled((os_log_t)*v15);
            if ((_DWORD)result)
            {
              LOWORD(v28[0]) = 0;
              return _os_signpost_emit_unreliably_with_name_impl();
            }
            return result;
          }
LABEL_38:
          if (v34 < 0)
            operator delete(v33);
          goto LABEL_40;
        }
      }
      else if ((v37 & 0x80000000) == 0)
      {
        goto LABEL_34;
      }
      operator delete(v36);
      if (!v35)
        goto LABEL_40;
      goto LABEL_38;
    }
  }
  return result;
}

void sub_20F0962BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);
  sub_20E96E218((uint64_t)va);
  if (v13)
    free(v13);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F0962FC@<X0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  __int128 v9;

  __p = operator new(0x28uLL);
  v9 = xmmword_2102DCA10;
  strcpy((char *)__p, "GeolocationManagerConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90(a1);
  sub_20E8B2F9C((uint64_t *)&__p, "GeolocationManagerConfig.max_time_difference_for_valid_geo_location_s", v4, "Maximum time difference allowed for location timestamp.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90(a1 + 1);
  sub_20E8B2F9C((uint64_t *)&__p, "GeolocationManagerConfig.wait_time_to_request_location_after_first_one_s", v5, "Time duration to wait before requesting the second location after first one.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90(a1 + 2);
  return sub_20E8B2F9C((uint64_t *)&__p, "GeolocationManagerConfig.max_distance_to_suppress_mpc_hint_in_meters", v6, "Maximum distance to suppress MPC-hint in meters.");
}

void sub_20F096418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

void sub_20F09645C(int a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, uint64_t a11, _QWORD *a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  double v28;
  double v29;
  int v30;
  int v31;
  unsigned __int8 v32;
  double v33;
  uint64_t v34;
  BOOL v35;
  unsigned __int8 v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  double v40;
  unsigned __int8 v41;
  uint64_t v42;
  double v43;
  unsigned __int8 v44;
  uint64_t v45;
  double v46;
  unsigned __int8 v47;
  uint64_t v48;
  double v49;
  unsigned __int8 v50;
  uint64_t v51;
  double v52;
  unsigned __int8 v53;
  uint64_t v54;
  double v55;
  unsigned __int8 v56;
  uint64_t v57;
  double v58;
  unsigned __int8 v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  double v63;
  unsigned __int8 v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  unsigned __int8 v72;
  double v73;
  uint64_t v74;
  unsigned __int8 v75;
  uint64_t v76;
  double v77;
  unsigned __int8 v78;
  uint64_t v79;
  double v80;
  double v81;
  unsigned __int8 v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  double v86;
  unsigned __int8 v87;
  uint64_t v88;
  double v89;
  unsigned __int8 v90;
  uint64_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  unsigned __int8 v96;
  uint64_t v97;
  unsigned __int8 v98;
  double v99;
  uint64_t v100;
  unsigned __int8 v101;
  uint64_t v102;
  unsigned __int8 v103;
  uint64_t v104;
  double v105;
  unsigned __int8 v106;
  uint64_t v107;
  unsigned __int8 v108;
  double v109;
  uint64_t v110;
  double v111;
  unsigned __int8 v112;
  uint64_t v113;
  double v114;
  unsigned __int8 v115;
  uint64_t v116;
  unsigned __int8 v117;
  uint64_t v118;
  double v119;
  unsigned __int8 v120;
  uint64_t v121;
  double v122;
  unsigned __int8 v123;
  uint64_t v124;
  double v125;
  unsigned __int8 v126;
  uint64_t v127;
  int v128;
  int v129;
  char v131;
  char v132;

  v22 = *(_QWORD *)(a2 + 416);
  v23 = 0.0;
  v24 = 0.0;
  if (v22 != *(_QWORD *)(a2 + 424) && *(_BYTE *)(v22 + 8))
    v24 = *(double *)v22;
  if (*(_BYTE *)(a2 + 168))
    v25 = *(double *)(a2 + 48);
  else
    v25 = 0.0;
  if (!a13)
  {
    v28 = 0.0;
    goto LABEL_13;
  }
  v26 = a12[4];
  if (!v26)
  {
    v28 = 0.0;
    v29 = *(double *)(a6 + 8);
    v30 = *(unsigned __int8 *)(a6 + 16);
    v31 = *(unsigned __int8 *)(a6 + 25);
    if (!*(_BYTE *)(a15 + 80))
      goto LABEL_22;
    goto LABEL_14;
  }
  v27 = a12[5];
  v28 = (double)v27 / (double)v26;
  if (!v27)
  {
LABEL_13:
    v29 = *(double *)(a6 + 8);
    v30 = *(unsigned __int8 *)(a6 + 16);
    v31 = *(unsigned __int8 *)(a6 + 25);
    if (!*(_BYTE *)(a15 + 80))
      goto LABEL_22;
    goto LABEL_14;
  }
  v23 = (double)(unint64_t)a12[6] / (double)v27;
  v29 = *(double *)(a6 + 8);
  v30 = *(unsigned __int8 *)(a6 + 16);
  v31 = *(unsigned __int8 *)(a6 + 25);
  if (!*(_BYTE *)(a15 + 80))
  {
LABEL_22:
    if (*(_BYTE *)(a15 + 200))
      v35 = *(_QWORD *)(a15 + 184) == 0;
    else
      v35 = 1;
    if (v35 || *(_QWORD *)(a15 + 136) == *(_QWORD *)(a15 + 144))
      goto LABEL_27;
  }
LABEL_14:
  v32 = atomic_load((unsigned __int8 *)&qword_254A61A60);
  if ((v32 & 1) == 0)
  {
    v128 = a1;
    v129 = __cxa_guard_acquire(&qword_254A61A60);
    a1 = v128;
    if (v129)
    {
      qword_254A61BD8 = 0;
      qword_254A61BE0 = 0;
      qword_254A61BE8 = 0;
      sub_20EAC040C((char **)&qword_254A61BD8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61BD8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61BD8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61A60);
      a1 = v128;
    }
  }
  v33 = (double)a1;
  v34 = qword_254A61BD8;
  if (*(_BYTE *)(a15 + 80))
    sub_20FDBBC20(a15, (unsigned __int8 *)qword_254A61BD8, v33);
  if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
    sub_210214860(a15 + 88, v34, v33);
LABEL_27:
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v36 = atomic_load((unsigned __int8 *)&qword_254A61A68);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A61A68))
    {
      qword_254A61BF0 = 0;
      qword_254A61BF8 = 0;
      qword_254A61C00 = 0;
      sub_20EAC040C((char **)&qword_254A61BF0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61BF0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61BF0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61A68);
    }
    v37 = qword_254A61BF0 + 24;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61BF0 + 24), a8);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v37, a8);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v38 = atomic_load((unsigned __int8 *)&qword_254A61A70);
    if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_254A61A70))
    {
      qword_254A61C08 = 0;
      qword_254A61C10 = 0;
      qword_254A61C18 = 0;
      sub_20EAC040C((char **)&qword_254A61C08, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61C08);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61C08, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61A70);
    }
    v39 = qword_254A61C08 + 48;
    v40 = *(double *)(a2 + 32);
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61C08 + 48), *(double *)(a2 + 32));
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v39, v40);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v41 = atomic_load((unsigned __int8 *)&qword_254A61A78);
    if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_254A61A78))
    {
      qword_254A61C20 = 0;
      qword_254A61C28 = 0;
      qword_254A61C30 = 0;
      sub_20EAC040C((char **)&qword_254A61C20, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61C20);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61C20, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61A78);
    }
    v42 = qword_254A61C20 + 72;
    v43 = *(double *)(a2 + 40);
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61C20 + 72), *(double *)(a2 + 40));
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v42, v43);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v44 = atomic_load((unsigned __int8 *)&qword_254A61A80);
    if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_254A61A80))
    {
      qword_254A61C38 = 0;
      qword_254A61C40 = 0;
      qword_254A61C48 = 0;
      sub_20EAC040C((char **)&qword_254A61C38, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61C38);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61C38, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61A80);
    }
    v45 = qword_254A61C38 + 96;
    v46 = *(double *)(a2 + 16);
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61C38 + 96), *(double *)(a2 + 16));
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v45, v46);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v47 = atomic_load((unsigned __int8 *)&qword_254A61A88);
    if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_254A61A88))
    {
      qword_254A61C50 = 0;
      qword_254A61C58 = 0;
      qword_254A61C60 = 0;
      sub_20EAC040C((char **)&qword_254A61C50, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61C50);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61C50, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61A88);
    }
    v48 = qword_254A61C50 + 120;
    v49 = *(double *)(a2 + 24);
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61C50 + 120), *(double *)(a2 + 24));
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v48, v49);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v50 = atomic_load((unsigned __int8 *)&qword_254A61A90);
    if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_254A61A90))
    {
      qword_254A61C68 = 0;
      qword_254A61C70 = 0;
      qword_254A61C78 = 0;
      sub_20EAC040C((char **)&qword_254A61C68, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61C68);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61C68, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61A90);
    }
    v51 = qword_254A61C68 + 144;
    v52 = *(double *)(a2 + 8);
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61C68 + 144), *(double *)(a2 + 8));
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v51, v52);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v53 = atomic_load((unsigned __int8 *)&qword_254A61A98);
    if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_254A61A98))
    {
      qword_254A61C80 = 0;
      qword_254A61C88 = 0;
      qword_254A61C90 = 0;
      sub_20EAC040C((char **)&qword_254A61C80, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61C80);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61C80, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61A98);
    }
    v54 = qword_254A61C80 + 168;
    v55 = *(double *)a2;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61C80 + 168), *(double *)a2);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v54, v55);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v56 = atomic_load((unsigned __int8 *)&qword_254A61AA0);
    if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_254A61AA0))
    {
      qword_254A61C98 = 0;
      qword_254A61CA0 = 0;
      qword_254A61CA8 = 0;
      sub_20EAC040C((char **)&qword_254A61C98, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61C98);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61C98, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61AA0);
    }
    v57 = qword_254A61C98 + 192;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61C98 + 192), v24);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v57, v24);
  }
  if (*(_BYTE *)(a2 + 168))
    v58 = 1.0;
  else
    v58 = 0.0;
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v59 = atomic_load((unsigned __int8 *)&qword_254A61AA8);
    if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_254A61AA8))
    {
      qword_254A61CB0 = 0;
      qword_254A61CB8 = 0;
      qword_254A61CC0 = 0;
      sub_20EAC040C((char **)&qword_254A61CB0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61CB0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61CB0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61AA8);
    }
    v60 = qword_254A61CB0 + 216;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61CB0 + 216), v58);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v60, v58);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v61 = atomic_load((unsigned __int8 *)&qword_254A61AB0);
    if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_254A61AB0))
    {
      qword_254A61CC8 = 0;
      qword_254A61CD0 = 0;
      qword_254A61CD8 = 0;
      sub_20EAC040C((char **)&qword_254A61CC8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61CC8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61CC8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61AB0);
    }
    v62 = qword_254A61CC8 + 240;
    v63 = *(double *)(a2 + 48);
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61CC8 + 240), *(double *)(a2 + 48));
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v62, v63);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v64 = atomic_load((unsigned __int8 *)&qword_254A61AB8);
    if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_254A61AB8))
    {
      qword_254A61CE0 = 0;
      qword_254A61CE8 = 0;
      qword_254A61CF0 = 0;
      sub_20EAC040C((char **)&qword_254A61CE0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61CE0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61CE0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61AB8);
    }
    v65 = qword_254A61CE0 + 264;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61CE0 + 264), v25);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v65, v25);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v66 = atomic_load((unsigned __int8 *)&qword_254A61AC0);
    if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_254A61AC0))
    {
      qword_254A61CF8 = 0;
      qword_254A61D00 = 0;
      qword_254A61D08 = 0;
      sub_20EAC040C((char **)&qword_254A61CF8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61CF8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61CF8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61AC0);
    }
    v67 = qword_254A61CF8 + 288;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61CF8 + 288), a9);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v67, a9);
  }
  LODWORD(a9) = *(_DWORD *)(a2 + 180);
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v68 = atomic_load((unsigned __int8 *)&qword_254A61AC8);
    if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_254A61AC8))
    {
      qword_254A61D10 = 0;
      qword_254A61D18 = 0;
      qword_254A61D20 = 0;
      sub_20EAC040C((char **)&qword_254A61D10, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61D10);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61D10, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61AC8);
    }
    a9 = (double)*(unint64_t *)&a9;
    v69 = qword_254A61D10 + 336;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61D10 + 336), a9);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v69, a9);
  }
  LODWORD(a9) = *(_DWORD *)(a2 + 184);
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v70 = atomic_load((unsigned __int8 *)&qword_254A61AD0);
    if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_254A61AD0))
    {
      qword_254A61D28 = 0;
      qword_254A61D30 = 0;
      qword_254A61D38 = 0;
      sub_20EAC040C((char **)&qword_254A61D28, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61D28);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61D28, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61AD0);
    }
    a9 = (double)*(unint64_t *)&a9;
    v71 = qword_254A61D28 + 360;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61D28 + 360), a9);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v71, a9);
  }
  LODWORD(a9) = *(_DWORD *)(a2 + 176);
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v72 = atomic_load((unsigned __int8 *)&qword_254A61AD8);
    if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_254A61AD8))
    {
      qword_254A61D40 = 0;
      qword_254A61D48 = 0;
      qword_254A61D50 = 0;
      sub_20EAC040C((char **)&qword_254A61D40, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61D40);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61D40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61AD8);
    }
    v73 = (double)*(unint64_t *)&a9;
    v74 = qword_254A61D40 + 312;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61D40 + 312), v73);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v74, v73);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v75 = atomic_load((unsigned __int8 *)&qword_254A61AE0);
    if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_254A61AE0))
    {
      qword_254A61D58 = 0;
      qword_254A61D60 = 0;
      qword_254A61D68 = 0;
      sub_20EAC040C((char **)&qword_254A61D58, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61D58);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61D58, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61AE0);
    }
    v76 = qword_254A61D58 + 456;
    v77 = *(double *)(a2 + 56);
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61D58 + 456), *(double *)(a2 + 56));
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v76, v77);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v78 = atomic_load((unsigned __int8 *)&qword_254A61AE8);
    if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_254A61AE8))
    {
      qword_254A61D70 = 0;
      qword_254A61D78 = 0;
      qword_254A61D80 = 0;
      sub_20EAC040C((char **)&qword_254A61D70, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61D70);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61D70, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61AE8);
    }
    v79 = qword_254A61D70 + 480;
    v80 = *(double *)(a2 + 88);
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61D70 + 480), *(double *)(a2 + 88));
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v79, v80);
  }
  if (*(_BYTE *)(a2 + 170))
    v81 = 1.0;
  else
    v81 = 0.0;
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v82 = atomic_load((unsigned __int8 *)&qword_254A61AF0);
    if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_254A61AF0))
    {
      qword_254A61D88 = 0;
      qword_254A61D90 = 0;
      qword_254A61D98 = 0;
      sub_20EAC040C((char **)&qword_254A61D88, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61D88);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61D88, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61AF0);
    }
    v83 = qword_254A61D88 + 744;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61D88 + 744), v81);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v83, v81);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v84 = atomic_load((unsigned __int8 *)&qword_254A61AF8);
    if ((v84 & 1) == 0 && __cxa_guard_acquire(&qword_254A61AF8))
    {
      qword_254A61DA0 = 0;
      qword_254A61DA8 = 0;
      qword_254A61DB0 = 0;
      sub_20EAC040C((char **)&qword_254A61DA0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61DA0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61DA0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61AF8);
    }
    v85 = qword_254A61DA0 + 552;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61DA0 + 552), (double)a5);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v85, (double)a5);
  }
  if (*(_BYTE *)(a7 + 88))
    v86 = 1.0;
  else
    v86 = 0.0;
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v87 = atomic_load((unsigned __int8 *)&qword_254A61B00);
    if ((v87 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B00))
    {
      qword_254A61DB8 = 0;
      qword_254A61DC0 = 0;
      qword_254A61DC8 = 0;
      sub_20EAC040C((char **)&qword_254A61DB8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61DB8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61DB8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B00);
    }
    v88 = qword_254A61DB8 + 840;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61DB8 + 840), v86);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v88, v86);
  }
  if (*(_BYTE *)(a7 + 90))
    v89 = 1.0;
  else
    v89 = 0.0;
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v90 = atomic_load((unsigned __int8 *)&qword_254A61B08);
    if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B08))
    {
      qword_254A61DD0 = 0;
      qword_254A61DD8 = 0;
      qword_254A61DE0 = 0;
      sub_20EAC040C((char **)&qword_254A61DD0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61DD0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61DD0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B08);
    }
    v91 = qword_254A61DD0 + 864;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61DD0 + 864), v89);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v91, v89);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v92 = atomic_load((unsigned __int8 *)&qword_254A61B10);
    if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B10))
    {
      qword_254A61DE8 = 0;
      qword_254A61DF0 = 0;
      qword_254A61DF8 = 0;
      sub_20EAC040C((char **)&qword_254A61DE8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61DE8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61DE8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B10);
    }
    v89 = (double)a3;
    v93 = qword_254A61DE8 + 888;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61DE8 + 888), (double)a3);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v93, (double)a3);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v94 = atomic_load((unsigned __int8 *)&qword_254A61B18);
    if ((v94 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B18))
    {
      qword_254A61E00 = 0;
      qword_254A61E08 = 0;
      qword_254A61E10 = 0;
      sub_20EAC040C((char **)&qword_254A61E00, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61E00);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61E00, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B18);
    }
    v89 = (double)a4;
    v95 = qword_254A61E00 + 912;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61E00 + 912), (double)a4);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v95, (double)a4);
  }
  LODWORD(v89) = *(_DWORD *)(a7 + 80);
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v96 = atomic_load((unsigned __int8 *)&qword_254A61B20);
    if ((v96 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B20))
    {
      qword_254A61E18 = 0;
      qword_254A61E20 = 0;
      qword_254A61E28 = 0;
      sub_20EAC040C((char **)&qword_254A61E18, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61E18);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61E18, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B20);
    }
    v89 = (double)*(unint64_t *)&v89;
    v97 = qword_254A61E18 + 696;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61E18 + 696), v89);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v97, v89);
  }
  LODWORD(v89) = *(_DWORD *)(a7 + 84);
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v98 = atomic_load((unsigned __int8 *)&qword_254A61B28);
    if ((v98 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B28))
    {
      qword_254A61E30 = 0;
      qword_254A61E38 = 0;
      qword_254A61E40 = 0;
      sub_20EAC040C((char **)&qword_254A61E30, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61E30);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61E30, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B28);
    }
    v99 = (double)*(unint64_t *)&v89;
    v100 = qword_254A61E30 + 720;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61E30 + 720), v99);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v100, v99);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v101 = atomic_load((unsigned __int8 *)&qword_254A61B30);
    if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B30))
    {
      qword_254A61E48 = 0;
      qword_254A61E50 = 0;
      qword_254A61E58 = 0;
      sub_20EAC040C((char **)&qword_254A61E48, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61E48);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61E48, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B30);
    }
    v102 = qword_254A61E48 + 936;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61E48 + 936), v28);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v102, v28);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v103 = atomic_load((unsigned __int8 *)&qword_254A61B38);
    if ((v103 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B38))
    {
      qword_254A61E60 = 0;
      qword_254A61E68 = 0;
      qword_254A61E70 = 0;
      sub_20EAC040C((char **)&qword_254A61E60, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61E60);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61E60, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B38);
    }
    v104 = qword_254A61E60 + 960;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61E60 + 960), v23);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v104, v23);
  }
  if (*(_BYTE *)(a2 + 171))
    v105 = 1.0;
  else
    v105 = 0.0;
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v106 = atomic_load((unsigned __int8 *)&qword_254A61B40);
    if ((v106 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B40))
    {
      qword_254A61E78 = 0;
      qword_254A61E80 = 0;
      qword_254A61E88 = 0;
      sub_20EAC040C((char **)&qword_254A61E78, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61E78);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61E78, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B40);
    }
    v107 = qword_254A61E78 + 984;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61E78 + 984), v105);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v107, v105);
  }
  LODWORD(v105) = *(_DWORD *)(a2 + 192);
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v108 = atomic_load((unsigned __int8 *)&qword_254A61B48);
    if ((v108 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B48))
    {
      qword_254A61E90 = 0;
      qword_254A61E98 = 0;
      qword_254A61EA0 = 0;
      sub_20EAC040C((char **)&qword_254A61E90, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61E90);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61E90, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B48);
    }
    v109 = (double)*(unint64_t *)&v105;
    v110 = qword_254A61E90 + 384;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61E90 + 384), v109);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v110, v109);
  }
  if (v30)
    v111 = v29;
  else
    v111 = -1.0;
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v112 = atomic_load((unsigned __int8 *)&qword_254A61B50);
    if ((v112 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B50))
    {
      qword_254A61EA8 = 0;
      qword_254A61EB0 = 0;
      qword_254A61EB8 = 0;
      sub_20EAC040C((char **)&qword_254A61EA8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61EA8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61EA8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B50);
    }
    v113 = qword_254A61EA8 + 504;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61EA8 + 504), v111);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v113, v111);
  }
  if (v31)
    v114 = 1.0;
  else
    v114 = 0.0;
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v115 = atomic_load((unsigned __int8 *)&qword_254A61B58);
    if ((v115 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B58))
    {
      qword_254A61EC0 = 0;
      qword_254A61EC8 = 0;
      qword_254A61ED0 = 0;
      sub_20EAC040C((char **)&qword_254A61EC0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61EC0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61EC0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B58);
    }
    v116 = qword_254A61EC0 + 528;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61EC0 + 528), v114);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v116, v114);
  }
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v117 = atomic_load((unsigned __int8 *)&qword_254A61B60);
    if ((v117 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B60))
    {
      qword_254A61ED8 = 0;
      qword_254A61EE0 = 0;
      qword_254A61EE8 = 0;
      sub_20EAC040C((char **)&qword_254A61ED8, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61ED8);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61ED8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B60);
    }
    v118 = qword_254A61ED8 + 1008;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61ED8 + 1008), a10);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v118, a10);
  }
  if (*(_BYTE *)(a2 + 172))
    v119 = 1.0;
  else
    v119 = 0.0;
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v120 = atomic_load((unsigned __int8 *)&qword_254A61B68);
    if ((v120 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B68))
    {
      qword_254A61EF0 = 0;
      qword_254A61EF8 = 0;
      qword_254A61F00 = 0;
      sub_20EAC040C((char **)&qword_254A61EF0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61EF0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61EF0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B68);
    }
    v121 = qword_254A61EF0 + 1032;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61EF0 + 1032), v119);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v121, v119);
  }
  if (*(_BYTE *)(a2 + 173))
    v122 = 1.0;
  else
    v122 = 0.0;
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v123 = atomic_load((unsigned __int8 *)&qword_254A61B70);
    if ((v123 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B70))
    {
      qword_254A61F08 = 0;
      qword_254A61F10 = 0;
      qword_254A61F18 = 0;
      sub_20EAC040C((char **)&qword_254A61F08, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61F08);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61F08, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B70);
    }
    v124 = qword_254A61F08 + 1056;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61F08 + 1056), v122);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v124, v122);
  }
  if (*(_BYTE *)(a14 + 2))
    v125 = 1.0;
  else
    v125 = 0.0;
  if (*(_BYTE *)(a15 + 80)
    || *(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
  {
    v126 = atomic_load((unsigned __int8 *)&qword_254A61B78);
    if ((v126 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B78))
    {
      qword_254A61F20 = 0;
      qword_254A61F28 = 0;
      qword_254A61F30 = 0;
      sub_20EAC040C((char **)&qword_254A61F20, 0x147uLL);
      sub_20F053F1C((uint64_t)&v132, (uint64_t)&v131, &qword_254A61F20);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61F20, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61B78);
    }
    v127 = qword_254A61F20 + 1920;
    if (*(_BYTE *)(a15 + 80))
      sub_20FDBBC20(a15, (unsigned __int8 *)(qword_254A61F20 + 1920), v125);
    if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
      sub_210214860(a15 + 88, v127, v125);
  }
  if (*(_BYTE *)(a15 + 80))
  {
    ++*(_DWORD *)(a15 + 72);
    sub_20FDBBA84(a15);
  }
  if (*(_BYTE *)(a15 + 200) && *(_QWORD *)(a15 + 184) && *(_QWORD *)(a15 + 136) != *(_QWORD *)(a15 + 144))
    sub_210214754(a15 + 88, NAN);
}

void sub_20F098834(_Unwind_Exception *a1)
{
  __guard *v1;
  __guard v3;
  uint64_t v4;
  void *v5;

  v3 = v1[117];
  if (v3)
  {
    v4 = qword_254A61F28;
    v5 = (void *)v1[117];
    if (qword_254A61F28 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = (void *)qword_254A61F20;
    }
    v1[118] = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(v1);
  _Unwind_Resume(a1);
}

void sub_20F0994A4(int a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, uint64_t a11, _QWORD *a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  int v34;
  _QWORD *v35;
  int v36;
  std::chrono::steady_clock::time_point v37;
  std::chrono::steady_clock::time_point v38;
  std::chrono::steady_clock::time_point *v39;
  uint64_t *v40;
  unsigned __int8 v41;
  int v43;
  int v44;
  int v45;
  char *v46;
  size_t v47;
  __darwin_time_t tv_sec;
  uint64_t v49;
  uint64_t i;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t *v57;
  unsigned __int8 v58;
  int v60;
  int v61;
  char *v62;
  size_t v63;
  __darwin_time_t v64;
  uint64_t v65;
  uint64_t j;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  timespec v78;
  int v79;
  __int128 v80;
  int v81;
  char v82;
  void *v83;
  char v84;
  char v85;
  void *v86;
  char v87;
  char v88;
  void *v89;
  char v90;
  void *__p;
  char v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  v24 = kdebug_trace();
  v32 = atomic_load((unsigned __int8 *)&qword_254A61A48);
  if ((v32 & 1) == 0)
  {
    v24 = __cxa_guard_acquire(&qword_254A61A48);
    if ((_DWORD)v24)
    {
      v71 = operator new(0x28uLL);
      v71[1] = 0;
      v71[2] = 0;
      *v71 = &off_24C9C4340;
      *((_BYTE *)v71 + 24) = 0;
      *((_BYTE *)v71 + 32) = 0;
      qword_254A61BA8 = (uint64_t)(v71 + 3);
      unk_254A61BB0 = v71;
      qword_254A61BB8 = 1000000000;
      __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A61BA8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61A48);
    }
  }
  v74 = a4;
  v75 = a5;
  v76 = a6;
  v33 = atomic_load((unsigned __int8 *)&qword_254A61A50);
  if ((v33 & 1) == 0)
  {
    v24 = __cxa_guard_acquire(&qword_254A61A50);
    if ((_DWORD)v24)
    {
      qword_254A61B98 = 0;
      unk_254A61BA0 = 0;
      v72 = operator new(0x28uLL);
      v72[1] = 0;
      v72[2] = 0;
      *v72 = &off_24C9F86D0;
      *((_BYTE *)v72 + 24) = 0;
      *((_BYTE *)v72 + 32) = 0;
      qword_254A61B98 = (uint64_t)(v72 + 3);
      unk_254A61BA0 = v72;
      __cxa_atexit((void (*)(void *))sub_20F09A830, &qword_254A61B98, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61A50);
    }
  }
  v34 = sub_20F09A898(v24, v25, v26, v27, v28, v29, v30, v31, *(unsigned __int8 *)(a7 + 88), 0, *(unsigned __int8 *)(a7 + 90), 0, *(_DWORD *)(a7 + 80));
  v35 = (_QWORD *)qword_254A61BA8;
  v36 = *(unsigned __int8 *)(qword_254A61BA8 + 8);
  if (v34)
  {
    if (*(_BYTE *)(qword_254A61BA8 + 8))
      *(_BYTE *)(qword_254A61BA8 + 8) = 0;
    v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    goto LABEL_10;
  }
  v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (!v36)
  {
LABEL_10:
    v39 = (std::chrono::steady_clock::time_point *)qword_254A61BA8;
    if (!*(_BYTE *)(qword_254A61BA8 + 8))
      *(_BYTE *)(qword_254A61BA8 + 8) = 1;
    goto LABEL_12;
  }
  if (v37.__d_.__rep_ - *v35 < 1000000000)
    goto LABEL_34;
  v39 = (std::chrono::steady_clock::time_point *)qword_254A61BA8;
LABEL_12:
  v39->__d_.__rep_ = v37.__d_.__rep_;
  v40 = sub_210219C18();
  v41 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (!atomic_load(&qword_254A5A450))
    goto LABEL_32;
  v43 = *(unsigned __int8 *)(a7 + 88);
  v44 = *(unsigned __int8 *)(a7 + 90);
  v45 = *(_DWORD *)(a7 + 80);
  v79 = 67109632;
  LODWORD(v80) = v43;
  WORD2(v80) = 1024;
  *(_DWORD *)((char *)&v80 + 6) = v44;
  WORD5(v80) = 1024;
  HIDWORD(v80) = v45;
  v46 = (char *)_os_log_send_and_compose_impl();
  v47 = strlen(v46);
  v78.tv_sec = 0;
  pthread_threadid_np(0, (__uint64_t *)&v78);
  tv_sec = v78.tv_sec;
  timespec_get(&v78, 1);
  sub_210219E20(&v79, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v40 + 1), (__int128 *)(v40 + 5), "SLAM init state: Initialized:%{BOOL}d, Finished:%{BOOL}d, Num ReInit:%u", 0x47uLL, v46, v47, tv_sec, &v78);
  std::mutex::lock(&stru_254A5A410);
  v49 = qword_254A5A458;
  for (i = unk_254A5A460; v49 != i; v49 += 40)
  {
    v51 = *(_QWORD *)(v49 + 32);
    if (!v51)
      sub_20E86D37C();
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v51 + 48))(v51, &v79);
  }
  std::mutex::unlock(&stru_254A5A410);
  if ((v92 & 0x80000000) == 0)
  {
    if ((v90 & 0x80000000) == 0)
      goto LABEL_19;
LABEL_22:
    operator delete(v89);
    if (!v88)
      goto LABEL_25;
LABEL_23:
    if (v87 < 0)
      operator delete(v86);
    goto LABEL_25;
  }
  operator delete(__p);
  if (v90 < 0)
    goto LABEL_22;
LABEL_19:
  if (v88)
    goto LABEL_23;
LABEL_25:
  if (v85 && v84 < 0)
    operator delete(v83);
  if (v82 < 0)
    operator delete(*(void **)((char *)&v80 + 4));
  if (v46)
    free(v46);
LABEL_32:
  if (os_signpost_enabled((os_log_t)*v40))
  {
    v52 = *(unsigned __int8 *)(a7 + 88);
    v53 = *(unsigned __int8 *)(a7 + 90);
    v54 = *(_DWORD *)(a7 + 80);
    v79 = 67109632;
    LODWORD(v80) = v52;
    WORD2(v80) = 1024;
    *(_DWORD *)((char *)&v80 + 6) = v53;
    WORD5(v80) = 1024;
    HIDWORD(v80) = v54;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_34:
  v55 = atomic_load((unsigned __int8 *)&qword_254A61A58);
  if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_254A61A58))
  {
    v73 = operator new(0x20uLL);
    v73[1] = 0;
    v73[2] = 0;
    v73[3] = 0;
    *v73 = &off_24C9F8458;
    qword_254A61BC0 = (uint64_t)(v73 + 3);
    unk_254A61BC8 = v73;
    dword_254A61BD0 = 2;
    __cxa_atexit((void (*)(void *))sub_20F09A968, &qword_254A61BC0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A61A58);
  }
  v56 = qword_254A61BC0;
  if (*(_BYTE *)(qword_254A61BC0 + 4) && *(int *)qword_254A61BC0 <= 0)
  {
    ++*(_DWORD *)qword_254A61BC0;
    v68 = a14;
    goto LABEL_60;
  }
  *(_DWORD *)qword_254A61BC0 = 0;
  *(_BYTE *)(v56 + 4) = 1;
  v57 = sub_210219C18();
  v58 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v60 = *(_DWORD *)(a2 + 192);
    v61 = *(_DWORD *)(a2 + 196);
    v79 = 134218496;
    *(double *)&v80 = a8;
    WORD4(v80) = 1024;
    *(_DWORD *)((char *)&v80 + 10) = v60;
    HIWORD(v80) = 1024;
    v81 = v61;
    v62 = (char *)_os_log_send_and_compose_impl();
    v63 = strlen(v62);
    v78.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v78);
    v64 = v78.tv_sec;
    timespec_get(&v78, 1);
    sub_210219E20(&v79, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v57 + 1), (__int128 *)(v57 + 5), "SLAM Health:%f, IE:%u, MC:%u", 0x1CuLL, v62, v63, v64, &v78);
    std::mutex::lock(&stru_254A5A410);
    v65 = qword_254A5A458;
    for (j = unk_254A5A460; v65 != j; v65 += 40)
    {
      v67 = *(_QWORD *)(v65 + 32);
      if (!v67)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v67 + 48))(v67, &v79);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v92 < 0)
    {
      operator delete(__p);
      if ((v90 & 0x80000000) == 0)
      {
LABEL_44:
        if (!v88)
        {
LABEL_51:
          if (v85 && v84 < 0)
            operator delete(v83);
          if (v82 < 0)
            operator delete(*(void **)((char *)&v80 + 4));
          if (v62)
            free(v62);
          goto LABEL_58;
        }
LABEL_49:
        if (v87 < 0)
          operator delete(v86);
        goto LABEL_51;
      }
    }
    else if ((v90 & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(v89);
    if (!v88)
      goto LABEL_51;
    goto LABEL_49;
  }
LABEL_58:
  v68 = a14;
  if (os_signpost_enabled((os_log_t)*v57))
  {
    v69 = *(_DWORD *)(a2 + 192);
    v70 = *(_DWORD *)(a2 + 196);
    v79 = 134218496;
    *(double *)&v80 = a8;
    WORD4(v80) = 1024;
    *(_DWORD *)((char *)&v80 + 10) = v69;
    HIWORD(v80) = 1024;
    v81 = v70;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_60:
  sub_20F09645C(a1, a2, a3, v74, v75, v76, a7, a8, a9, a10, v38.__d_.__rep_, a12, a13, v68, a15);
}

void sub_20F099E18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A61A58);
  _Unwind_Resume(a1);
}

void sub_20F099E30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A61A50);
  _Unwind_Resume(a1);
}

void sub_20F099E48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A61A48);
  _Unwind_Resume(a1);
}

void sub_20F099E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  void *v51;

  if (a51 < 0)
  {
    operator delete(__p);
    if ((a45 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a39)
        goto LABEL_9;
LABEL_7:
      if (a38 < 0)
        operator delete(a33);
LABEL_9:
      if (a32 && a31 < 0)
        operator delete(a26);
      if (a25 < 0)
        operator delete(a20);
      if (v51)
      {
        free(v51);
        _Unwind_Resume(exception_object);
      }
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a45 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a40);
  if (!a39)
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20F099FE0(__int16 a1, uint64_t a2, uint64_t a3)
{
  double v5;
  unsigned __int8 v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  double v10;
  unsigned __int8 v11;
  unsigned __int8 *v12;
  unsigned __int8 v13;
  uint64_t *v14;
  unsigned int v15;
  __guard *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  if ((a1 & 0xFF00) != 0)
  {
    v5 = (_BYTE)a1 ? 1.0 : 0.0;
    if (*(_BYTE *)(a3 + 80)
      || (*(_BYTE *)(a3 + 200) ? (v8 = *(_QWORD *)(a3 + 184) == 0) : (v8 = 1),
          !v8 && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144)))
    {
      v6 = atomic_load((unsigned __int8 *)&qword_254A61B80);
      if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A61B80))
      {
        qword_254A61F38 = 0;
        qword_254A61F40 = 0;
        qword_254A61F48 = 0;
        sub_20EAC040C((char **)&qword_254A61F38, 0x147uLL);
        sub_20F053F1C((uint64_t)&v18, (uint64_t)&v17, &qword_254A61F38);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61F38, &dword_20E81F000);
        __cxa_guard_release(&qword_254A61B80);
      }
      v7 = qword_254A61F38 + 7344;
      if (*(_BYTE *)(a3 + 80))
        sub_20FDBBC20(a3, (unsigned __int8 *)(qword_254A61F38 + 7344), v5);
      if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
        sub_210214860(a3 + 88, v7, v5);
    }
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v9 = *(_DWORD *)(a2 + 12);
    if (v9 == 1)
    {
      v10 = *(double *)a2;
      if (!*(_BYTE *)(a3 + 80)
        && (!*(_BYTE *)(a3 + 200) || !*(_QWORD *)(a3 + 184) || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144)))
      {
        return;
      }
      v13 = atomic_load((unsigned __int8 *)&qword_254A61B90);
      if ((v13 & 1) != 0 || (v16 = &qword_254A61B90, !__cxa_guard_acquire(&qword_254A61B90)))
      {
        v12 = (unsigned __int8 *)(qword_254A61F68 + 7392);
        if (!*(_BYTE *)(a3 + 80))
        {
LABEL_29:
          if (*(_BYTE *)(a3 + 200) && *(_QWORD *)(a3 + 184) && *(_QWORD *)(a3 + 136) != *(_QWORD *)(a3 + 144))
            sub_210214860(a3 + 88, (uint64_t)v12, v10);
          return;
        }
LABEL_28:
        sub_20FDBBC20(a3, v12, v10);
        goto LABEL_29;
      }
      qword_254A61F68 = 0;
      qword_254A61F70 = 0;
      qword_254A61F78 = 0;
      sub_20EAC040C((char **)&qword_254A61F68, 0x147uLL);
      sub_20F053F1C((uint64_t)&v22, (uint64_t)&v21, &qword_254A61F68);
      v14 = &qword_254A61F68;
      v15 = 308;
    }
    else
    {
      if (v9)
        return;
      v10 = *(double *)a2;
      if (!*(_BYTE *)(a3 + 80)
        && (!*(_BYTE *)(a3 + 200) || !*(_QWORD *)(a3 + 184) || *(_QWORD *)(a3 + 136) == *(_QWORD *)(a3 + 144)))
      {
        return;
      }
      v11 = atomic_load((unsigned __int8 *)&qword_254A61B88);
      if ((v11 & 1) != 0 || (v16 = &qword_254A61B88, !__cxa_guard_acquire(&qword_254A61B88)))
      {
        v12 = (unsigned __int8 *)(qword_254A61F50 + 7368);
        if (!*(_BYTE *)(a3 + 80))
          goto LABEL_29;
        goto LABEL_28;
      }
      qword_254A61F50 = 0;
      qword_254A61F58 = 0;
      qword_254A61F60 = 0;
      sub_20EAC040C((char **)&qword_254A61F50, 0x147uLL);
      sub_20F053F1C((uint64_t)&v20, (uint64_t)&v19, &qword_254A61F50);
      v14 = &qword_254A61F50;
      v15 = 307;
    }
    __cxa_atexit((void (*)(void *))sub_20E89FB98, v14, &dword_20E81F000);
    __cxa_guard_release(v16);
    v12 = (unsigned __int8 *)(*v14 + 24 * v15);
    if (!*(_BYTE *)(a3 + 80))
      goto LABEL_29;
    goto LABEL_28;
  }
}

void sub_20F09A300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __guard *a9)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v10 = qword_254A61F68;
  if (qword_254A61F68)
  {
    v11 = qword_254A61F70;
    v12 = (void *)qword_254A61F68;
    if (qword_254A61F70 != qword_254A61F68)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0)
          operator delete(*(void **)(v11 - 24));
        v11 -= 24;
      }
      while (v11 != v10);
      v12 = (void *)qword_254A61F68;
    }
    qword_254A61F70 = v10;
    operator delete(v12);
  }
  __cxa_guard_abort(a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F09A448(uint64_t *result, uint64_t a2)
{
  BOOL v2;
  unsigned __int8 v4;
  double v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  char v9;
  char v10;

  if (*(_BYTE *)(a2 + 200))
    v2 = *(_QWORD *)(a2 + 184) == 0;
  else
    v2 = 1;
  if (!v2 && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v4 = atomic_load((unsigned __int8 *)&qword_254A54068);
    if ((v4 & 1) == 0)
    {
      v7 = result;
      v8 = __cxa_guard_acquire(&qword_254A54068);
      result = v7;
      if (v8)
      {
        qword_254A54050 = 0;
        qword_254A54058 = 0;
        qword_254A54060 = 0;
        sub_20EAC040C((char **)&qword_254A54050, 0x147uLL);
        sub_20F053F1C((uint64_t)&v10, (uint64_t)&v9, &qword_254A54050);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A54050, &dword_20E81F000);
        __cxa_guard_release(&qword_254A54068);
        result = v7;
      }
    }
    v5 = (double)result;
    v6 = qword_254A54050 + 7680;
    if (*(_BYTE *)(a2 + 80))
      result = (uint64_t *)sub_20FDBBC20(a2, (unsigned __int8 *)(qword_254A54050 + 7680), v5);
    if (*(_BYTE *)(a2 + 200) && *(_QWORD *)(a2 + 184) && *(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
      return sub_210214860(a2 + 88, v6, v5);
  }
  return result;
}

void sub_20F09A588(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A54050;
  if (qword_254A54050)
  {
    v3 = qword_254A54058;
    v4 = (void *)qword_254A54050;
    if (qword_254A54058 != qword_254A54050)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A54050;
    }
    qword_254A54058 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A54068);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F09A5F4(_QWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return result;
  v5 = result;
  v9 = 30;
  if (*(_DWORD *)(a2 + 192) <= 0x1Du)
  {
    v14[0] = &off_24C9F8720;
    v14[1] = &v9;
    result = v14;
    v15 = v14;
    if (*v5 >= v5[1])
    {
      v6 = 4;
    }
    else
    {
      sub_20F09AA38((uint64_t)v14);
      ++*v5;
      result = v15;
      if (v15 == v14)
      {
        v6 = 4;
        result = v14;
      }
      else
      {
        if (!v15)
          goto LABEL_10;
        v6 = 5;
      }
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
LABEL_10:
  if (!*(_BYTE *)(a3 + 88))
  {
    result = v12;
    v12[0] = &off_24C9F87A0;
    v13 = v12;
    if (v5[2] >= v5[3])
    {
      v7 = 4;
      goto LABEL_17;
    }
    sub_20F09AE90();
    ++v5[2];
    result = v13;
    if (v13 == v12)
    {
      v7 = 4;
      result = v12;
      goto LABEL_17;
    }
    if (v13)
    {
      v7 = 5;
LABEL_17:
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
    }
  }
  if (*(_BYTE *)(a3 + 90))
    return result;
  result = v10;
  v10[0] = &off_24C9F8820;
  v11 = v10;
  if (v5[4] >= v5[5])
  {
    v8 = 4;
  }
  else
  {
    sub_20F09B290();
    ++v5[4];
    result = v11;
    if (v11 == v10)
    {
      v8 = 4;
      result = v10;
    }
    else
    {
      if (!v11)
        return result;
      v8 = 5;
    }
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_20F09A7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v22;
  uint64_t v23;

  v22 = a13;
  if (a13 == &a10)
  {
    v23 = 4;
    v22 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F09A830(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F09A898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, int a12, int a13)
{
  uint64_t v13;
  uint64_t result;

  v13 = qword_254A61B98;
  if (*(_BYTE *)(qword_254A61B98 + 8)
    && a9 == *(unsigned __int8 *)qword_254A61B98
    && a11 == *(unsigned __int8 *)(qword_254A61B98 + 1)
    && *(_DWORD *)(qword_254A61B98 + 4) == a13)
  {
    return 0;
  }
  *(_BYTE *)qword_254A61B98 = a9 != 0;
  *(_BYTE *)(v13 + 1) = a11 != 0;
  *(_DWORD *)(v13 + 4) = a13;
  result = 1;
  *(_BYTE *)(v13 + 8) = 1;
  return result;
}

void sub_20F09A920(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F86D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F09A930(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F86D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F09A968(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20F09A9D4()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F09A9E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9F8720;
  result[1] = v3;
  return result;
}

uint64_t sub_20F09AA1C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9F8720;
  a2[1] = v2;
  return result;
}

uint64_t sub_20F09AA38(uint64_t a1)
{
  uint64_t *v2;
  int *v3;
  unsigned __int8 v4;
  int v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t result;
  int v14;
  __uint64_t v15[2];
  void *v16[3];
  char v17;
  void *v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *__p;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = sub_210219C18();
  v3 = *(int **)(a1 + 8);
  v4 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v6 = *v3;
    LODWORD(v16[0]) = 67109120;
    HIDWORD(v16[0]) = v6;
    v7 = (char *)_os_log_send_and_compose_impl();
    v8 = strlen(v7);
    v15[0] = 0;
    pthread_threadid_np(0, v15);
    v9 = v15[0];
    timespec_get((timespec *)v15, 1);
    sub_210219E20(v16, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v2 + 1), (__int128 *)(v2 + 5), "ARKitTriage: kNumberOfInliersTracksInLatestState < %u", 0x35uLL, v7, v8, v9, v15);
    std::mutex::lock(&stru_254A5A410);
    v10 = qword_254A5A458;
    for (i = unk_254A5A460; v10 != i; v10 += 40)
    {
      v12 = *(_QWORD *)(v10 + 32);
      if (!v12)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 48))(v12, v16);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v27 < 0)
    {
      operator delete(__p);
      if ((v25 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v23)
        {
LABEL_14:
          if (v20 && v19 < 0)
            operator delete(v18);
          if (v17 < 0)
            operator delete(v16[1]);
          if (v7)
            free(v7);
          goto LABEL_21;
        }
LABEL_12:
        if (v22 < 0)
          operator delete(v21);
        goto LABEL_14;
      }
    }
    else if ((v25 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v24);
    if (!v23)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  result = os_signpost_enabled((os_log_t)*v2);
  if ((_DWORD)result)
  {
    v14 = *v3;
    LODWORD(v16[0]) = 67109120;
    HIDWORD(v16[0]) = v14;
    return _os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20F09AD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
LABEL_7:
  if (a34 < 0)
    operator delete(a29);
LABEL_9:
  if (a28)
  {
    if (a27 < 0)
      operator delete(a22);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if (!v47)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v47)
  {
    goto LABEL_14;
  }
  free(v47);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F09ADC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry29InvalidHealthStatisticsLogger26LogInvalidHealthStatisticsERKNS0_19batch_least"
                     "_squares15BAHealthMetricsERKNS0_26ReinitializationLogicStateEbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry29InvalidHealthStatisticsLogger26LogInvalidHealthStatisticsERKNS0_19"
                                "batch_least_squares15BAHealthMetricsERKNS0_26ReinitializationLogicStateEbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry29InvalidHealthStatisticsLogger26LogInvalidHealthStatisticsERKNS0_19batch_least_squares15BAHealthMetricsERKNS0_26ReinitializationLogicStateEbE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry29InvalidHealthStatisticsLogger26LogInvalidHealthStatisticsERKNS0_19batch_least_squares15BAHealthMetricsERKNS0_26ReinitializationLogicStateEbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F09AE30()
{
  return &unk_24C9F8780;
}

void sub_20F09AE40()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F09AE54()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9F87A0;
  return result;
}

void sub_20F09AE78(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9F87A0;
}

uint64_t sub_20F09AE90()
{
  uint64_t *v0;
  unsigned __int8 v1;
  char *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t result;
  void *v10[3];
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *v18;
  char v19;
  void *__p;
  char v21;
  __uint64_t v22[2];

  v0 = sub_210219C18();
  v1 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v10[0]) = 0;
    v3 = (char *)_os_log_send_and_compose_impl();
    v4 = strlen(v3);
    v22[0] = 0;
    pthread_threadid_np(0, v22);
    v5 = v22[0];
    timespec_get((timespec *)v22, 1);
    sub_210219E20(v10, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v0 + 1), (__int128 *)(v0 + 5), "ARKitTriage: !kIsInitialized", 0x1CuLL, v3, v4, v5, v22);
    std::mutex::lock(&stru_254A5A410);
    v6 = qword_254A5A458;
    for (i = unk_254A5A460; v6 != i; v6 += 40)
    {
      v8 = *(_QWORD *)(v6 + 32);
      if (!v8)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 48))(v8, v10);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v21 < 0)
    {
      operator delete(__p);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v17)
        {
LABEL_14:
          if (v14 && v13 < 0)
            operator delete(v12);
          if (v11 < 0)
            operator delete(v10[1]);
          if (v3)
            free(v3);
          goto LABEL_21;
        }
LABEL_12:
        if (v16 < 0)
          operator delete(v15);
        goto LABEL_14;
      }
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v18);
    if (!v17)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  result = os_signpost_enabled((os_log_t)*v0);
  if ((_DWORD)result)
  {
    LOWORD(v10[0]) = 0;
    return _os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20F09B108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a33)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if (!a33)
    goto LABEL_9;
LABEL_7:
  if (a32 < 0)
    operator delete(a27);
LABEL_9:
  if (a26)
  {
    if (a25 < 0)
      operator delete(a20);
  }
  if (a19 < 0)
  {
    operator delete(a14);
    if (!v45)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v45)
  {
    goto LABEL_14;
  }
  free(v45);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F09B1C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry29InvalidHealthStatisticsLogger26LogInvalidHealthStatisticsERKNS0_19batch_least"
                     "_squares15BAHealthMetricsERKNS0_26ReinitializationLogicStateEbE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry29InvalidHealthStatisticsLogger26LogInvalidHealthStatisticsERKNS0_19"
                                "batch_least_squares15BAHealthMetricsERKNS0_26ReinitializationLogicStateEbE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry29InvalidHealthStatisticsLogger26LogInvalidHealthStatisticsERKNS0_19batch_least_squares15BAHealthMetricsERKNS0_26ReinitializationLogicStateEbE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry29InvalidHealthStatisticsLogger26LogInvalidHealthStatisticsERKNS0_19batch_least_squares15BAHealthMetricsERKNS0_26ReinitializationLogicStateEbE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F09B230()
{
  return &unk_24C9F8800;
}

void sub_20F09B240()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F09B254()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9F8820;
  return result;
}

void sub_20F09B278(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9F8820;
}

uint64_t sub_20F09B290()
{
  uint64_t *v0;
  unsigned __int8 v1;
  char *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t result;
  void *v10[3];
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *v18;
  char v19;
  void *__p;
  char v21;
  __uint64_t v22[2];

  v0 = sub_210219C18();
  v1 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v10[0]) = 0;
    v3 = (char *)_os_log_send_and_compose_impl();
    v4 = strlen(v3);
    v22[0] = 0;
    pthread_threadid_np(0, v22);
    v5 = v22[0];
    timespec_get((timespec *)v22, 1);
    sub_210219E20(v10, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v0 + 1), (__int128 *)(v0 + 5), "ARKitTriage: !kIsInitializationFinished", 0x27uLL, v3, v4, v5, v22);
    std::mutex::lock(&stru_254A5A410);
    v6 = qword_254A5A458;
    for (i = unk_254A5A460; v6 != i; v6 += 40)
    {
      v8 = *(_QWORD *)(v6 + 32);
      if (!v8)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 48))(v8, v10);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v21 < 0)
    {
      operator delete(__p);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v17)
        {
LABEL_14:
          if (v14 && v13 < 0)
            operator delete(v12);
          if (v11 < 0)
            operator delete(v10[1]);
          if (v3)
            free(v3);
          goto LABEL_21;
        }
LABEL_12:
        if (v16 < 0)
          operator delete(v15);
        goto LABEL_14;
      }
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v18);
    if (!v17)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  result = os_signpost_enabled((os_log_t)*v0);
  if ((_DWORD)result)
  {
    LOWORD(v10[0]) = 0;
    return _os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20F09B508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;

  if (a45 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a33)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if (!a33)
    goto LABEL_9;
LABEL_7:
  if (a32 < 0)
    operator delete(a27);
LABEL_9:
  if (a26)
  {
    if (a25 < 0)
      operator delete(a20);
  }
  if (a19 < 0)
  {
    operator delete(a14);
    if (!v45)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v45)
  {
    goto LABEL_14;
  }
  free(v45);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F09B5C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry29InvalidHealthStatisticsLogger26LogInvalidHealthStatisticsERKNS0_19batch_least"
                     "_squares15BAHealthMetricsERKNS0_26ReinitializationLogicStateEbE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry29InvalidHealthStatisticsLogger26LogInvalidHealthStatisticsERKNS0_19"
                                "batch_least_squares15BAHealthMetricsERKNS0_26ReinitializationLogicStateEbE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry29InvalidHealthStatisticsLogger26LogInvalidHealthStatisticsERKNS0_19batch_least_squares15BAHealthMetricsERKNS0_26ReinitializationLogicStateEbE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry29InvalidHealthStatisticsLogger26LogInvalidHealthStatisticsERKNS0_19batch_least_squares15BAHealthMetricsERKNS0_26ReinitializationLogicStateEbE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F09B630()
{
  return &unk_24C9F8880;
}

void sub_20F09B63C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, unsigned int **a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t *v15;
  float64x2_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  float64x2_t v20;
  _BOOL4 v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  float64x2_t v32;
  double v33;
  double v34;
  float64x2_t v35;
  unsigned int v36;
  _BOOL4 v37;
  unsigned int v38;
  float64x2_t v39;
  int8x16_t v42;
  float64x2_t v47;
  uint64_t v48;
  float64x2_t v49;
  float64x2_t v51;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  int64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  uint64_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v68;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  int64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  int8x16_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  double v91;
  double v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  double v118;
  float64x2_t v119;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v133;
  double v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  __double2 v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v153;
  float64x2_t v154;
  double v158;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int64x2_t v167;
  int64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  double v172;
  double v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  double v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  double v184;
  int64x2_t v185;
  float64_t v186;
  float64x2_t v187;
  __int128 v188;
  __int128 v189;
  int64x2_t v190;
  _BYTE v191[32];
  float64x2_t v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  float64x2_t v198;
  double v199;
  uint64_t v200;
  double *v201[2];
  float64x2_t *v202[2];

  v200 = 0;
  v15 = sub_20EB8DE00(a5, (int *)&v200);
  if (!v15
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/IMUMeasurementsValidator.cpp", 51, (uint64_t)"outlier_rej_stats_iter != outlier_rejection_stats.stats.end()", 61, (uint64_t)"Failed to find primary stream outlier rejection stats", 53, (void (*)(void **))sub_21023DDB0)|| *(_DWORD *)(a1 + 72) >= a2&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/IMUMeasurementsValidator.cpp", 54, (uint64_t)"curr_state_id > curr_state_id_", 30, (uint64_t)&unk_21027FE1E, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_40;
  }
  *(_DWORD *)(a1 + 72) = a2;
  v16 = *(float64x2_t *)(a3 + 144);
  v197 = *(_OWORD *)(a3 + 128);
  v198 = v16;
  v199 = *(double *)(a3 + 160);
  v17 = *(_OWORD *)(a3 + 80);
  v193 = *(_OWORD *)(a3 + 64);
  v194 = v17;
  v18 = *(_OWORD *)(a3 + 112);
  v195 = *(_OWORD *)(a3 + 96);
  v196 = v18;
  v19 = *(_OWORD *)(a3 + 16);
  v190 = *(int64x2_t *)a3;
  *(_OWORD *)v191 = v19;
  v20 = *(float64x2_t *)(a3 + 48);
  *(_OWORD *)&v191[16] = *(_OWORD *)(a3 + 32);
  v192 = v20;
  sub_20F4BA010((uint64_t)&v190, a7, a4);
  if (*((_BYTE *)v15 + 192))
    v21 = v15[3] >= (unint64_t)*(unsigned int *)(a1 + 8);
  else
    v21 = 0;
  v22 = *(float64x2_t *)(a3 + 144);
  v23 = *(double *)(a3 + 160);
  v25 = *(float64x2_t *)a3;
  v24 = *(float64x2_t *)(a3 + 16);
  v26 = *(double *)(a3 + 64);
  v27 = *(float64x2_t *)(a3 + 32);
  v28 = *(float64x2_t *)(a3 + 48);
  if (*(_BYTE *)(a1 + 208))
    *(_BYTE *)(a1 + 208) = 0;
  if (v21)
  {
    v29 = v190;
    v30 = *(int64x2_t *)&v191[8];
    _Q7 = v192;
    v32 = v198;
    v35.f64[0] = *(float64_t *)v191;
    v33 = *(double *)&v193;
    v34 = v199;
    v35.f64[1] = *(float64_t *)&v191[24];
    v36 = **a6;
    v182 = v27;
    v184 = v26;
    v178 = v23;
    v180 = v24;
    v176 = v35;
    v177 = v28;
    v174 = v22;
    v175 = v25;
    v172 = v199;
    v173 = *(double *)&v193;
    v169 = v192;
    v170 = v198;
    v167 = *(int64x2_t *)&v191[8];
    v168 = v190;
    if (v36 < 0x10000)
      goto LABEL_13;
    v37 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
    v30 = v167;
    v29 = v168;
    _Q7 = v169;
    v32 = v170;
    v34 = v172;
    v33 = v173;
    v22 = v174;
    v25 = v175;
    v35 = v176;
    v28 = v177;
    v23 = v178;
    v24 = v180;
    v27 = v182;
    v26 = v184;
    if (!v37)
    {
LABEL_13:
      if (v200 == v36)
      {
        v38 = 0;
LABEL_17:
        v39 = (float64x2_t)vzip2q_s64(v29, v30);
        _Q1 = vmulq_f64(_Q7, v32);
        _Q2 = (float64x2_t)vzip1q_s64(v29, v30);
        v42 = vextq_s8((int8x16_t)v39, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q7, 1), 8uLL);
        _D3 = v32.f64[1];
        __asm { FMLA            D1, D3, V7.D[1] }
        v47 = vmlaq_laneq_f64(vmulq_n_f64(_Q2, v32.f64[0]), v39, v32, 1);
        *(_QWORD *)&v39.f64[1] = v42.i64[0];
        _Q1.f64[0] = _Q1.f64[0] + v33 * v34;
        v171 = _Q1;
        v48 = v42.i64[1];
        v49 = vmlaq_n_f64(v47, v35, v34);
        _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q2, v22.f64[0]), v39, v22, 1), v35, v23);
        v51 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], v22.f64[0]), (float64x2_t)v42.u64[1], v22, 1);
        __asm { FMOV            V23.2D, #1.0 }
        v53 = vmlaq_laneq_f64(vmulq_n_f64(_Q2, v28.f64[0]), v39, v28, 1);
        v54 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], v28.f64[0]), (float64x2_t)(unint64_t)v48, v28, 1);
        _Q28 = vsubq_f64(_Q20, v49);
        v179 = vmlaq_n_f64(v51, (float64x2_t)*(unint64_t *)&v33, v23);
        *(_QWORD *)&_Q23.f64[0] = *(_OWORD *)&vnegq_f64(_Q1);
        v56 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], v24, 1), (float64x2_t)(unint64_t)v48, v27.f64[0]), (float64x2_t)*(unint64_t *)&v33, v27, 1);
        v57 = vmlaq_n_f64(v54, (float64x2_t)*(unint64_t *)&v33, v26);
        v58 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q2, v25.f64[0]), v39, v25, 1), v35, v24.f64[0]), (float64x2_t)0, v49);
        v59 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q7.f64[0], v25.f64[0]), (float64x2_t)(unint64_t)v48, v25, 1), (float64x2_t)*(unint64_t *)&v33, v24.f64[0]), (float64x2_t)0, _Q23);
        v60 = vmlsq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(_Q2, v24, 1), v39, v27.f64[0]), v35, v27, 1), (float64x2_t)0, v49);
        v185 = (int64x2_t)vmlaq_f64(v56, (float64x2_t)0, _Q23);
        v61 = vmlsq_f64(vmlaq_n_f64(v53, v35, v26), (float64x2_t)0, v49);
        *(_QWORD *)&v57.f64[0] = *(_OWORD *)&vmlaq_f64(v57, (float64x2_t)0, _Q23);
        v62 = *(_QWORD *)&(*a6)[8 * v36 + 2] + 1664 * v38;
        v39.f64[0] = *(float64_t *)(v62 + 16);
        _Q20.f64[0] = *(float64_t *)(v62 + 40);
        v63 = *(float64x2_t *)(v62 + 24);
        _Q1.f64[0] = *(float64_t *)(v62 + 64);
        v64 = *(float64x2_t *)(v62 + 48);
        v65 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v62, (int64x2_t)v63);
        _Q19 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v62, (int64x2_t)v63);
        _Q27 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q19, 1);
        v68 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q19.f64[0], 0);
        _D30 = *(double *)(v62 + 88);
        _Q31 = *(float64x2_t *)(v62 + 72);
        _Q21 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v65, vnegq_f64(_Q31).f64[0]), _Q19, _Q31, 1), (float64x2_t)vzip1q_s64((int64x2_t)v39, (int64x2_t)_Q20), _D30, 0);
        _D26 = *(_QWORD *)(v62 + 56);
        __asm
        {
          FMLS            D19, D26, V31.D[1]
          FMLS            D19, D1, V30.D[0]
        }
        v73 = *((double *)v15 + 10);
        v74 = *((double *)v15 + 11);
        v75 = *((double *)v15 + 14);
        v76 = *((double *)v15 + 15);
        v78 = *((double *)v15 + 18);
        v77 = *((double *)v15 + 19);
        v79 = (int64x2_t)vextq_s8((int8x16_t)v68, (int8x16_t)_Q27, 8uLL);
        v80 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v62, v79);
        v81 = (float64x2_t)vzip2q_s64((int64x2_t)v65, v79);
        v68.f64[0] = *(float64_t *)(v62 + 48);
        *(_QWORD *)&v68.f64[1] = vdupq_laneq_s64((int64x2_t)v64, 1).u64[0];
        v82 = vmlsq_laneq_f64(vmulq_n_f64(v80, vnegq_f64(_Q21).f64[0]), v81, _Q21, 1);
        *(_QWORD *)&_Q28.f64[1] = vextq_s8((int8x16_t)_Q28, (int8x16_t)_Q28, 8uLL).u64[0];
        v83 = vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v58, (int64x2_t)v60), vnegq_f64(_Q28).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v58, (int64x2_t)v60), _Q28, 1);
        _D15 = v61.f64[1];
        __asm
        {
          FMLS            D16, D15, V28.D[1]
          FMLS            D27, D20, V21.D[1]
        }
        v86 = vextq_s8((int8x16_t)v81, (int8x16_t)_Q20, 8uLL);
        *(_QWORD *)&v81.f64[1] = v86.i64[0];
        _Q2.f64[0] = _Q1.f64[0];
        __asm { FMLS            D27, D2, V19.D[0] }
        _Q27.f64[1] = 1.0;
        v87 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v80, v73), v81, v75), v68, v78);
        v88 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v39.f64[0], v73), (float64x2_t)v86.u64[1], v75), (float64x2_t)*(unint64_t *)&_Q1.f64[0], v78);
        v89 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v80, v74), v81, v76), v68, v77);
        v90 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v39.f64[0], v74), (float64x2_t)v86.u64[1], v76), (float64x2_t)*(unint64_t *)&_Q1.f64[0], v77);
        v91 = *((double *)v15 + 12);
        *(_QWORD *)&_Q2.f64[0] = v15[13];
        v92 = *((double *)v15 + 16);
        *(_QWORD *)&v65.f64[0] = v15[17];
        v93 = vmlaq_n_f64(vmulq_n_f64(v80, v91), v81, v92);
        v94 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v39.f64[0], v91), (float64x2_t)v86.u64[1], v92);
        v95 = vmlaq_n_f64(vmulq_n_f64(v80, _Q2.f64[0]), v81, v65.f64[0]);
        v96 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v39.f64[0], _Q2.f64[0]), (float64x2_t)v86.u64[1], v65.f64[0]);
        *(_QWORD *)&v51.f64[0] = v15[20];
        *(_QWORD *)&_Q2.f64[0] = v15[21];
        v97 = vmlsq_lane_f64(v82, v68, _Q19.f64[0], 0);
        v98 = vmlaq_n_f64(v93, v68, v51.f64[0]);
        v99 = vmlaq_f64(v87, (float64x2_t)0, v97);
        v100 = vmlaq_f64(v88, (float64x2_t)0, _Q27);
        v101 = vmlaq_f64(v89, (float64x2_t)0, v97);
        v102 = vmlaq_f64(v90, (float64x2_t)0, _Q27);
        v103 = vmlaq_n_f64(v95, v68, _Q2.f64[0]);
        v104 = vmlaq_n_f64(v96, (float64x2_t)*(unint64_t *)&_Q1.f64[0], _Q2.f64[0]);
        v105 = vmlaq_n_f64(vmulq_n_f64(v99, *(double *)v62), v101, v63.f64[0]);
        v106 = vmlaq_n_f64(vmulq_n_f64(v100, *(double *)v62), v102, v63.f64[0]);
        v107 = vmlaq_laneq_f64(vmulq_laneq_f64(v99, *(float64x2_t *)v62, 1), v101, v63, 1);
        v108 = vmlaq_laneq_f64(vmulq_laneq_f64(v100, *(float64x2_t *)v62, 1), v102, v63, 1);
        v109 = vmlaq_n_f64(vmulq_n_f64(v99, v39.f64[0]), v101, _Q20.f64[0]);
        v110 = vmlaq_n_f64(vmulq_n_f64(v100, v39.f64[0]), v102, _Q20.f64[0]);
        _D20 = v57.f64[0];
        v112 = vmlaq_f64(v98, (float64x2_t)0, v97);
        v113 = vmlaq_f64(vmlaq_n_f64(v94, (float64x2_t)*(unint64_t *)&_Q1.f64[0], v51.f64[0]), (float64x2_t)0, _Q27);
        v114 = vmlaq_n_f64(v105, v112, v64.f64[0]);
        v115 = vmlaq_n_f64(v106, v113, v64.f64[0]);
        v116 = vmlaq_laneq_f64(v107, v112, v64, 1);
        v117 = vmlaq_laneq_f64(v108, v113, v64, 1);
        v118 = *(double *)v59.i64;
        *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vsubq_f64(v179, v171);
        v119 = vmlsq_lane_f64(v83, (float64x2_t)vzip1q_s64(v59, v185), _Q2.f64[0], 0);
        __asm { FMLS            D16, D20, V2.D[0] }
        v121 = vaddq_f64(v97, v103);
        v122 = vaddq_f64(_Q27, v104);
        v123 = vmlaq_f64(v114, (float64x2_t)0, v121);
        v124 = vmlaq_f64(v116, (float64x2_t)0, v121);
        v125 = vmlaq_f64(vmlaq_n_f64(v109, v112, _Q1.f64[0]), (float64x2_t)0, v121);
        v126 = vaddq_f64(v121, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v99, _Q21.f64[0]), v101, _Q21, 1), v112, _Q19.f64[0]));
        v127 = vmlaq_f64(v115, (float64x2_t)0, v122);
        v128 = vmlaq_f64(v117, (float64x2_t)0, v122);
        v129 = vmlaq_f64(vmlaq_n_f64(v110, v113, _Q1.f64[0]), (float64x2_t)0, v122);
        v130 = vaddq_f64(v122, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v100, _Q21.f64[0]), v102, _Q21, 1), v113, _Q19.f64[0]));
        if (!*(_BYTE *)(a1 + 208))
          *(_BYTE *)(a1 + 208) = 1;
        *(float64x2_t *)(a1 + 80) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v123, v58.f64[0]), v124, v60.f64[0]), v125, v61.f64[0]), (float64x2_t)0, v126);
        *(float64x2_t *)(a1 + 96) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v127, v58.f64[0]), v128, v60.f64[0]), v129, v61.f64[0]), (float64x2_t)0, v130);
        *(float64x2_t *)(a1 + 112) = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v123, v58, 1), v124, v60, 1), v125, v61, 1), (float64x2_t)0, v126);
        *(float64x2_t *)(a1 + 128) = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v127, v58, 1), v128, v60, 1), v129, v61, 1), (float64x2_t)0, v130);
        *(float64x2_t *)(a1 + 144) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v123, v118), v124, *(double *)v185.i64), v125, _D20), (float64x2_t)0, v126);
        *(float64x2_t *)(a1 + 160) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v127, v118), v128, *(double *)v185.i64), v129, _D20), (float64x2_t)0, v130);
        *(float64x2_t *)(a1 + 176) = vaddq_f64(v126, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v123, v119.f64[0]), v124, v119, 1), v125, _D16));
        *(float64x2_t *)(a1 + 192) = vaddq_f64(v130, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v127, v119.f64[0]), v128, v119, 1), v129, _D16));
        goto LABEL_20;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/IMUMeasurementsValidator.cpp", 77, (uint64_t)"camera_models.front().FirstCameraStreamId() == kPrimaryStreamId", 63, (uint64_t)&unk_21027FE1E, 0, (void (*)(void **))sub_21023DDB0))
      {
        v36 = v200;
        v38 = HIDWORD(v200);
        v27 = v182;
        v26 = v184;
        v23 = v178;
        v24 = v180;
        v35 = v176;
        v28 = v177;
        v22 = v174;
        v25 = v175;
        v34 = v172;
        v33 = v173;
        _Q7 = v169;
        v32 = v170;
        v30 = v167;
        v29 = v168;
        goto LABEL_17;
      }
    }
LABEL_40:
    abort();
  }
LABEL_20:
  if (!*(_BYTE *)(a1 + 64))
  {
    if (*(_BYTE *)(a1 + 65))
    {
      *(_BYTE *)a8 = 1;
      v138 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a8 + 8) = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a8 + 16) = *(_OWORD *)(a1 + 40);
      *(_QWORD *)(a8 + 32) = v138;
      return;
    }
    goto LABEL_31;
  }
  if (!*(_BYTE *)(a1 + 65))
  {
LABEL_31:
    *(_BYTE *)a8 = 1;
    *(_QWORD *)(a8 + 8) = *(_QWORD *)(a1 + 56);
    *(_OWORD *)(a8 + 16) = *(_OWORD *)(a1 + 40);
    *(_QWORD *)(a8 + 32) = *(_QWORD *)(a1 + 32);
    return;
  }
  if (!v21)
  {
    if (*(_BYTE *)(a1 + 12))
    {
      *(_BYTE *)a8 = 0;
      v139 = *(_QWORD *)(a1 + 16);
      v141 = *(_QWORD *)(a1 + 32);
      v140 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a8 + 8) = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a8 + 16) = v140;
      *(_QWORD *)(a8 + 24) = v139;
      *(_QWORD *)(a8 + 32) = v141;
      return;
    }
    goto LABEL_31;
  }
  v188 = 0u;
  v189 = 0u;
  v187 = 0u;
  v202[0] = (float64x2_t *)(a1 + 80);
  v202[1] = 0;
  v201[0] = (double *)&v187;
  v201[1] = 0;
  sub_20E95B988(v202, v201);
  *(_QWORD *)&v131.f64[0] = v188;
  _Q17 = v187;
  v133 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL);
  _Q0 = vmulq_f64(_Q17, _Q17);
  _Q1.f64[0] = v187.f64[1];
  __asm { FMLA            D0, D1, V17.D[1] }
  v136 = _Q0.f64[0] + v131.f64[0] * v131.f64[0];
  if (v136 >= 0.0000002635)
  {
    v142 = sqrt(v136);
    v183 = v133;
    v186 = *(double *)&v188;
    v181 = v187;
    v143 = __sincos_stret(v142);
    _Q17 = v181;
    v133 = v183;
    v131.f64[0] = v186;
    v137 = v143.__sinval / v142;
    _Q0.f64[0] = 1.0 / v136 * (1.0 - v143.__cosval);
    _Q1.f64[0] = 1.0 / v136 * (1.0 - v143.__sinval / v142);
    if (v136 >= 2.775e-15)
    {
LABEL_25:
      if (v136 <= 9.0)
        _Q0.f64[0] = (_Q0.f64[0] * 0.5 - _Q1.f64[0]) / v137;
      else
        _Q0.f64[0] = (_Q0.f64[0] + v137 * -0.5) / (v136 * _Q0.f64[0]);
      goto LABEL_35;
    }
  }
  else
  {
    _Q0.f64[0] = 0.5 - v136 * (v136 / -720.0 + 0.0416666667);
    _Q1.f64[0] = 0.166666667 - v136 * (v136 / -5040.0 + 0.00833333333);
    v137 = 1.0 - v136 * _Q1.f64[0];
    if (v136 >= 2.775e-15)
      goto LABEL_25;
  }
  _Q0.f64[0] = v136 * 0.0000330687831 + v136 * 0.00138888889 + 0.0833333333;
LABEL_35:
  _Q1.f64[0] = *(float64_t *)(a1 + 192);
  v144 = *(float64x2_t *)(a1 + 176);
  v145.f64[0] = v133.f64[0];
  v145.f64[1] = v131.f64[0];
  v146.f64[0] = _Q1.f64[0];
  v146.f64[1] = *(float64_t *)(a1 + 176);
  v131.f64[1] = _Q17.f64[0];
  v147 = vmlsq_f64(vmulq_f64(v145, v146), v131, (float64x2_t)vextq_s8((int8x16_t)v144, (int8x16_t)_Q1, 8uLL));
  v148 = vmlsq_f64(vmulq_laneq_f64(_Q17, v144, 1), v133, v144);
  __asm { FMOV            V5.2D, #-0.5 }
  v150 = vmlaq_f64(v144, v147, _Q5);
  v151 = vmlaq_f64(_Q1, v148, _Q5);
  _Q5 = (float64x2_t)vextq_s8((int8x16_t)v147, (int8x16_t)v148, 8uLL);
  v148.f64[1] = v147.f64[0];
  v153 = vmulq_f64(v145, v148);
  v154 = vmlsq_f64(vmulq_laneq_f64(_Q17, v147, 1), v133, v147);
  _Q3 = vmlsq_f64(v153, v131, _Q5);
  v147.f64[0] = v151.f64[0] + _Q0.f64[0] * v154.f64[0];
  *(_QWORD *)&v151.f64[0] = *(_OWORD *)&vmlaq_f64(v151, _Q0, v154);
  _Q2 = vmlaq_n_f64(v150, _Q3, _Q0.f64[0]);
  __asm
  {
    FMLA            D5, D0, V3.D[1]
    FMLA            D0, D5, V2.D[1]
  }
  v158 = sqrt(vmlad_n_f64(_D0, v147.f64[0], v151.f64[0]));
  _NF = v158 < *(double *)a1;
  v160 = v158 >= *(double *)a1;
  v161 = 16;
  if (v158 >= *(double *)a1)
    v161 = 48;
  v162 = *(_QWORD *)(a1 + v161);
  v163 = 24;
  if (!_NF)
    v163 = 56;
  v164 = *(_QWORD *)(a1 + v163);
  *(_BYTE *)a8 = v160;
  v166 = *(_QWORD *)(a1 + 32);
  v165 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a8 + 8) = v164;
  *(_QWORD *)(a8 + 16) = v165;
  *(_QWORD *)(a8 + 24) = v162;
  *(_QWORD *)(a8 + 32) = v166;
}

uint64_t *sub_20F09BF50@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  __int128 v16;

  __p = operator new(0x38uLL);
  v16 = xmmword_2102DC7C0;
  strcpy((char *)__p, "Moving SLAM IMU measurements validator parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90((double *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "IMUMeasurementsValidatorConfig.max_norm2_position_diff_for_imu_camera_motion_agreement_m", v4, "A threshold on norm2 position error in meters determining whether IMU and camera agree on motion sensing.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DCF0((unsigned int *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "IMUMeasurementsValidatorConfig.min_num_inliers_to_use_camera_pose", v5, "Minimum number of inlier-matches to trust a camera-propagated pose.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 12));
  sub_20E8B2F9C((uint64_t *)&__p, "IMUMeasurementsValidatorConfig.check_imu_signal_when_vision_not_conclusive", v6, "A flag indicating whether to only check accel/gyro signals if vision is not conclusive");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "IMUMeasurementsValidatorConfig.default_accel_sigma_factor", v7, "Default accelerometer noise.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 24));
  sub_20E8B2F9C((uint64_t *)&__p, "IMUMeasurementsValidatorConfig.default_gyro_sigma_factor", v8, "Default gyroscope noise.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "IMUMeasurementsValidatorConfig.default_gyro_bias_sigma_factor", v9, "Default gyroscope bias sigma.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EAA14D8((_BYTE *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)&__p, "IMUMeasurementsValidatorConfig.enable_accel_usage_in_ba", v10, "Whether to use accelerometers in BA.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EAA14D8((_BYTE *)(a1 + 65));
  sub_20E8B2F9C((uint64_t *)&__p, "IMUMeasurementsValidatorConfig.enable_gyro_usage_in_ba", v11, "Whether to use gyroscopes in BA.");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90((double *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)&__p, "IMUMeasurementsValidatorConfig.sigma_factor_to_inhibit_accel_impact_in_ba", v12, "Sigma fatcor to inhibit accelerometers impact on pose estimation.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EA9DB90((double *)(a1 + 56));
  return sub_20E8B2F9C((uint64_t *)&__p, "IMUMeasurementsValidatorConfig.sigma_factor_to_inhibit_gyro_impact_in_ba", v13, "Sigma fatcor to inhibit gyroscopes impact on pose estimation.");
}

void sub_20F09C1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F09C230@<X0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  __int128 v21;

  __p = operator new(0x28uLL);
  v21 = xmmword_2102DCA10;
  strcpy((char *)__p, "In-motion Initialization parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EA9DB90(a1);
  sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.gyro_bias_variance", v4, "Initial gyroscope bias variance. (rad^2/s^2)");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EA9DB90(a1 + 1);
  sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.accel_bias_variance", v5, "Initial accelerometer bias variance. (m^2/s^4)");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90(a1 + 2);
  sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.orientation_component_variance", v6, "Initial orientation variance.");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90(a1 + 3);
  sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.max_body_acceleration", v7, "Maximum body acceleration under which initialization is performed.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90(a1 + 4);
  sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.max_rotation_rate", v8, "Maximum body rotation rate under which initialization is performed.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90(a1 + 5);
  sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.gravity_magnitude", v9, "Magnitude of the acceleration due to gravity.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90(a1 + 6);
  sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.initial_accel_bias_x", v10, "Initial bias of the x-accelerometer (m/s^2).");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EA9DB90(a1 + 7);
  sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.initial_accel_bias_y", v11, "Initial bias of the y-accelerometer (m/s^2).");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DB90(a1 + 8);
  sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.initial_accel_bias_z", v12, "Initial bias of the z-accelerometer (m/s^2).");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EA9DB90(a1 + 9);
  sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.initial_gyro_bias_x", v13, "Initial bias of the x-gyroscope (rad/s).");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EA9DB90(a1 + 10);
  sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.initial_gyro_bias_y", v14, "Initial bias of the y-gyroscope (rad/s).");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EA9DB90(a1 + 11);
  sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.initial_gyro_bias_z", v15, "Initial bias of the z-gyroscope (rad/s).");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EE859FC((uint64_t)(a1 + 12));
  *(_BYTE *)(v16 + 114) = 1;
  *(_BYTE *)(v16 + 112) = 1;
  sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.initial_velocity_imu", v16, "Initial velocity in the z-imu direction (m/s).");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20EE859FC((uint64_t)(a1 + 15));
  *(_BYTE *)(v17 + 114) = 1;
  *(_BYTE *)(v17 + 112) = 1;
  sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.initial_velocity_variance_imu", v17, "Initial velocity in the z-imu direction (m/s).");
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EE859FC((uint64_t)(a1 + 18));
  *(_BYTE *)(v18 + 114) = 1;
  *(_BYTE *)(v18 + 112) = 1;
  return sub_20E8B2F9C((uint64_t *)&__p, "InMotionInitializationConfig.initial_global_position", v18, "Initial position in VIO global coordinate (m).");
}

void sub_20F09C5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F09C64C(uint64_t *a1, int a2, uint64_t *a3, double a4, double a5)
{
  unint64_t v12;
  __int128 v14;
  double v15;
  char v16;
  void *v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *__p[2];
  uint64_t v30;
  __int16 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v16 = 0;
  *(_OWORD *)v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  *(_OWORD *)__p = 0u;
  v30 = 0;
  v31 = 514;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = 0x3FF0000000000000;
  __asm { FMOV            V2.2D, #1.0 }
  v36 = _Q2;
  v37 = 0x3FF0000000000000;
  LODWORD(v14) = a2;
  *((double *)&v14 + 1) = a4;
  v15 = a5;
  sub_20F09E480(a1, &v14);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  v12 = a1[4];
  if (!v12)
    v12 = 0x8F9C18F9C18F9C19 * ((a1[1] - *a1) >> 3);
  return sub_20F09E0A8((char **)(*a1 + 328 * v12 - 104), *(_QWORD *)(*a1 + 328 * v12 - 104), *a3, a3[1], 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 3));
}

void sub_20F09C780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  void *v40;

  if (__p)
  {
    operator delete(__p);
    v40 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v40 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v40);
  _Unwind_Resume(exception_object);
}

double sub_20F09C7BC(_QWORD *a1, unint64_t a2)
{
  void *v2;
  void *v3;
  char *v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  char *i;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  void *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  double result;
  void *v50;
  unint64_t v51;
  char *v52;
  __int128 v53;

  v3 = (void *)*a1;
  v2 = (void *)a1[1];
  if (0x8F9C18F9C18F9C19 * (((uint64_t)v2 - *a1) >> 3) == a2)
    return result;
  if (a2)
  {
    if (a2 >= 0xC7CE0C7CE0C7CFLL)
      sub_20E867F44();
    v6 = (char *)operator new(328 * a2);
    __asm
    {
      FMOV            V1.2D, #-1.0
      FMOV            V2.2D, #1.0
    }
    v13 = v6;
    do
    {
      *((_OWORD *)v13 + 16) = 0uLL;
      *((_OWORD *)v13 + 17) = 0uLL;
      *((_OWORD *)v13 + 14) = 0uLL;
      *((_OWORD *)v13 + 15) = 0uLL;
      *((_OWORD *)v13 + 12) = 0uLL;
      *((_OWORD *)v13 + 13) = 0uLL;
      *((_OWORD *)v13 + 10) = 0uLL;
      *((_OWORD *)v13 + 11) = 0uLL;
      *((_OWORD *)v13 + 8) = 0uLL;
      *((_OWORD *)v13 + 9) = 0uLL;
      *((_OWORD *)v13 + 6) = 0uLL;
      *((_OWORD *)v13 + 7) = 0uLL;
      *((_OWORD *)v13 + 4) = 0uLL;
      *((_OWORD *)v13 + 5) = 0uLL;
      *((_OWORD *)v13 + 2) = 0uLL;
      *((_OWORD *)v13 + 3) = 0uLL;
      *(_OWORD *)v13 = 0uLL;
      *((_OWORD *)v13 + 1) = 0uLL;
      *(_DWORD *)v13 = -1;
      *(_OWORD *)(v13 + 8) = _Q1;
      *((_OWORD *)v13 + 2) = 0uLL;
      *((_OWORD *)v13 + 3) = 0uLL;
      *((_OWORD *)v13 + 4) = 0uLL;
      *((_OWORD *)v13 + 5) = 0uLL;
      *((_OWORD *)v13 + 6) = 0uLL;
      *((_OWORD *)v13 + 7) = 0uLL;
      *((_OWORD *)v13 + 8) = 0uLL;
      *((_OWORD *)v13 + 9) = 0uLL;
      *((_OWORD *)v13 + 10) = 0uLL;
      *((_OWORD *)v13 + 11) = 0uLL;
      *((_OWORD *)v13 + 12) = 0uLL;
      *((_OWORD *)v13 + 13) = 0uLL;
      *((_OWORD *)v13 + 14) = 0uLL;
      *((_QWORD *)v13 + 30) = 0;
      *((_WORD *)v13 + 124) = 514;
      *((_OWORD *)v13 + 16) = 0uLL;
      *((_OWORD *)v13 + 17) = 0uLL;
      *((_QWORD *)v13 + 36) = 0;
      *((_QWORD *)v13 + 37) = 0x3FF0000000000000;
      v13[288] = 0;
      *((_OWORD *)v13 + 19) = _Q2;
      *((_QWORD *)v13 + 40) = 0x3FF0000000000000;
      v13 += 328;
    }
    while (v13 != &v6[328 * a2]);
    v14 = 0;
    v15 = a1[5];
    if (v15 >= a2)
      v16 = a2;
    else
      v16 = a1[5];
    v51 = v16;
    v52 = v6;
    *(_QWORD *)&v53 = &v6[328 * a2];
    *((_QWORD *)&v53 + 1) = v53;
    v17 = v15 == 0;
    for (i = v6 + 224; ; i += 328)
    {
      if (v17)
      {
        if (v15 <= a2)
          goto LABEL_20;
      }
      else if (v15 > a2 && v51 == v14)
      {
LABEL_20:
        v39 = (void *)*a1;
        if (*a1)
        {
          v40 = (void *)a1[1];
          v41 = (void *)*a1;
          if (v40 != v39)
          {
            v42 = (uint64_t)v40 - 296;
            do
            {
              v44 = *(void **)(v42 + 192);
              if (v44)
              {
                *(_QWORD *)(v42 + 200) = v44;
                operator delete(v44);
              }
              v45 = *(void **)v42;
              if (*(_QWORD *)v42)
              {
                *(_QWORD *)(v42 + 8) = v45;
                operator delete(v45);
              }
              v43 = (void *)(v42 - 32);
              v42 -= 328;
            }
            while (v43 != v39);
            v41 = (void *)*a1;
          }
          a1[1] = v39;
          operator delete(v41);
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
        }
        *a1 = v52;
        result = *(double *)&v53;
        *(_OWORD *)(a1 + 1) = v53;
        a1[3] = 0;
        a1[4] = v51 % (0x8F9C18F9C18F9C19 * ((uint64_t)(v53 - (_QWORD)v52) >> 3));
        a1[5] = v51;
        return result;
      }
      v23 = i - 224;
      v24 = (void *)*a1;
      v25 = (v14 + a1[3]) % (0x8F9C18F9C18F9C19 * ((uint64_t)(a1[1] - *a1) >> 3));
      v26 = *a1 + 328 * v25;
      v27 = *(_OWORD *)(v26 + 9);
      *(_OWORD *)v23 = *(_OWORD *)v26;
      *(_OWORD *)(v23 + 9) = v27;
      v28 = (void *)*((_QWORD *)i - 24);
      if (v28)
      {
        *((_QWORD *)i - 23) = v28;
        operator delete(v28);
        *((_QWORD *)i - 24) = 0;
        *((_QWORD *)i - 23) = 0;
        *((_QWORD *)i - 22) = 0;
      }
      *((_OWORD *)i - 12) = *(_OWORD *)(v26 + 32);
      *((_QWORD *)i - 22) = *(_QWORD *)(v26 + 48);
      *(_QWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 32) = 0;
      v29 = (uint64_t)v24 + 328 * v25;
      v30 = *(_OWORD *)(v29 + 120);
      v31 = *(_OWORD *)(v29 + 136);
      v32 = *(_OWORD *)(v29 + 152);
      *(_OWORD *)(i - 120) = *(_OWORD *)(v29 + 104);
      *(_OWORD *)(i - 72) = v32;
      *(_OWORD *)(i - 88) = v31;
      *(_OWORD *)(i - 104) = v30;
      v33 = *(_OWORD *)(v29 + 184);
      v34 = *(_OWORD *)(v29 + 200);
      v35 = *(_QWORD *)(v29 + 216);
      *(_OWORD *)(i - 56) = *(_OWORD *)(v29 + 168);
      *((_QWORD *)i - 1) = v35;
      *(_OWORD *)(i - 24) = v34;
      *(_OWORD *)(i - 40) = v33;
      v36 = *(_OWORD *)(v29 + 72);
      v37 = *(_OWORD *)(v29 + 88);
      *(_OWORD *)(i - 168) = *(_OWORD *)(v29 + 56);
      *(_OWORD *)(i - 136) = v37;
      *(_OWORD *)(i - 152) = v36;
      v38 = *(void **)i;
      if (*(_QWORD *)i)
      {
        *((_QWORD *)i + 1) = v38;
        operator delete(v38);
        *(_QWORD *)i = 0;
        *((_QWORD *)i + 1) = 0;
        *((_QWORD *)i + 2) = 0;
      }
      v19 = (uint64_t)v24 + 328 * v25;
      *(_OWORD *)i = *(_OWORD *)(v19 + 224);
      *((_QWORD *)i + 2) = *(_QWORD *)(v19 + 240);
      *(_QWORD *)(v19 + 232) = 0;
      *(_QWORD *)(v19 + 240) = 0;
      *(_QWORD *)(v19 + 224) = 0;
      v20 = *(_OWORD *)(v19 + 296);
      v21 = *(_OWORD *)(v19 + 312);
      v22 = *(_OWORD *)(v19 + 280);
      *(_OWORD *)(i + 40) = *(_OWORD *)(v19 + 264);
      *(_OWORD *)(i + 88) = v21;
      *(_OWORD *)(i + 72) = v20;
      *(_OWORD *)(i + 56) = v22;
      *(_OWORD *)(i + 24) = *(_OWORD *)(v19 + 248);
      v17 = ++v14 == a1[5];
    }
  }
  if (v2 != v3)
  {
    v46 = (uint64_t)v2 - 296;
    do
    {
      v48 = *(void **)(v46 + 192);
      if (v48)
      {
        *(_QWORD *)(v46 + 200) = v48;
        operator delete(v48);
      }
      v50 = *(void **)v46;
      if (*(_QWORD *)v46)
      {
        *(_QWORD *)(v46 + 8) = v50;
        operator delete(v50);
      }
      v47 = (void *)(v46 - 32);
      v46 -= 328;
    }
    while (v47 != v3);
  }
  a1[1] = v3;
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = 0;
  return result;
}

void sub_20F09CB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F09E870((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F09CBA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  double *v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;

  v7 = a4 - a3;
  v8 = a4 - a3 + 1;
  if (v8 < 2)
  {
    v12 = 1;
  }
  else
  {
    v9 = *a1;
    v10 = 0x8F9C18F9C18F9C19 * ((a1[1] - *a1) >> 3);
    v11 = a1[3] + a3;
    v12 = 1;
    v13 = a4 - a3;
    do
    {
      v14 = v11 % v10;
      v15 = v9 + 328 * (++v11 % v10);
      v16 = *(double **)(v15 + 224);
      v17 = *(_QWORD *)(v9 + 328 * v14 + 232);
      if (*(double *)(v17 - 56) == *v16
        && *(double *)(v17 - 48) == v16[1]
        && *(double *)(v17 - 40) == v16[2]
        && *(double *)(v17 - 32) == v16[3]
        && *(double *)(v17 - 24) == v16[4]
        && *(double *)(v17 - 16) == v16[5]
        && *(double *)(v17 - 8) == v16[6])
      {
        v18 = -1;
      }
      else
      {
        v18 = 0;
      }
      v12 += 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v15 + 232) - (_QWORD)v16) >> 3) + v18;
      --v13;
    }
    while (v13);
  }
  v19 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 96) = v8;
  *(_QWORD *)(a2 + 104) = v12;
  if (v8 > (*(_QWORD *)(a2 + 56) - v19) >> 3)
    sub_20FDB96EC((_QWORD *)(a2 + 48), a4 - a3 + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) < v12)
    sub_20FDB9854((char **)a2, v12);
  *(_QWORD *)(a2 + 24) = 0;
  v20 = (_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 72) = 0;
  v21 = (_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  if (*(_QWORD *)(a2 + 96))
  {
    v22 = *(_QWORD **)(a2 + 48);
    *v22 = 0;
    v23 = (uint64_t)(*(_QWORD *)(a2 + 56) - (_QWORD)v22) >> 3;
    v24 = *(_QWORD *)(a2 + 88);
    v25 = *(_QWORD *)(a2 + 80) + 1;
    if (v25 >= v23)
      v26 = v23;
    else
      v26 = 0;
    *(_QWORD *)(a2 + 80) = v25 - v26;
    if (v24 == v23)
    {
      v27 = *v21 + 1;
      if (v27 < v23)
        v23 = 0;
      *v21 = v27 - v23;
    }
    else
    {
      *(_QWORD *)(a2 + 88) = v24 + 1;
    }
  }
  v28 = *(_QWORD *)(*a1 + 328 * ((a1[3] + a3) % (0x8F9C18F9C18F9C19 * ((a1[1] - *a1) >> 3))) + 232);
  v29 = *(_QWORD *)a2 + 56 * *(_QWORD *)(a2 + 32);
  v30 = *(_QWORD *)(v28 - 56);
  v31 = *(_QWORD *)(v28 - 32);
  v32 = *(_OWORD *)(v28 - 48);
  v33 = *(_OWORD *)(v28 - 24);
  v34 = *(_QWORD *)(v28 - 8);
  *(_QWORD *)v29 = v30;
  *(_OWORD *)(v29 + 8) = v32;
  *(_QWORD *)(v29 + 24) = v31;
  *(_OWORD *)(v29 + 32) = v33;
  *(_QWORD *)(v29 + 48) = v34;
  v35 = *(char **)a2;
  v36 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v37 = *(_QWORD *)(a2 + 40);
  v38 = *(_QWORD *)(a2 + 32) + 1;
  if (v38 >= v36)
    v39 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  else
    v39 = 0;
  *(_QWORD *)(a2 + 32) = v38 - v39;
  if (v37 != v36)
  {
    *(_QWORD *)(a2 + 40) = v37 + 1;
    if (v8 < 2)
      return;
    goto LABEL_37;
  }
  v40 = *v20 + 1;
  if (v40 < v36)
    v36 = 0;
  *v20 = v40 - v36;
  if (v8 >= 2)
  {
LABEL_37:
    v41 = 1;
    do
    {
      v43 = a1[3] + v41 + a3;
      v44 = *a1;
      v45 = 0x8F9C18F9C18F9C19 * ((a1[1] - *a1) >> 3);
      v46 = *(_QWORD *)(*a1 + 328 * ((v43 - 1) % v45) + 232);
      v47 = v43 % v45;
      v48 = *(double **)(*a1 + 328 * (v43 % v45) + 224);
      if (*(double *)(v46 - 56) == *v48
        && *(double *)(v46 - 48) == v48[1]
        && *(double *)(v46 - 40) == v48[2]
        && *(double *)(v46 - 32) == v48[3]
        && *(double *)(v46 - 24) == v48[4]
        && *(double *)(v46 - 16) == v48[5]
        && *(double *)(v46 - 8) == v48[6])
      {
        v49 = 1;
        v50 = *(_QWORD *)(a2 + 80);
        if (v50)
          goto LABEL_49;
      }
      else
      {
        v49 = 0;
        v50 = *(_QWORD *)(a2 + 80);
        if (v50)
        {
LABEL_49:
          v51 = *(_QWORD *)(a2 + 48);
          v52 = (*(_QWORD *)(a2 + 56) - v51) >> 3;
          v53 = v50;
          goto LABEL_50;
        }
      }
      v51 = *(_QWORD *)(a2 + 48);
      v52 = (*(_QWORD *)(a2 + 56) - v51) >> 3;
      v53 = v52;
LABEL_50:
      *(_QWORD *)(v51 + 8 * v50) = 0x6DB6DB6DB6DB6DB7
                                 * ((uint64_t)(*(_QWORD *)(v44 + 328 * v47 + 232) - (_QWORD)v48) >> 3)
                                 - v49
                                 + *(_QWORD *)(v51 + 8 * v53 - 8);
      v54 = *(_QWORD *)(a2 + 88);
      v55 = *(_QWORD *)(a2 + 80) + 1;
      if (v55 >= v52)
        v56 = v52;
      else
        v56 = 0;
      *(_QWORD *)(a2 + 80) = v55 - v56;
      if (v54 == v52)
      {
        v57 = *v21 + 1;
        if (v57 >= v52)
          v58 = v52;
        else
          v58 = 0;
        *v21 = v57 - v58;
      }
      else
      {
        *(_QWORD *)(a2 + 88) = v54 + 1;
      }
      v59 = v44 + 328 * ((a1[3] + v41 + a3) % v45);
      v61 = *(_QWORD *)(v59 + 224);
      v60 = *(_QWORD *)(v59 + 232);
      v62 = v61 + 56 * v49;
      if (v62 != v60)
      {
        v63 = *(_QWORD *)(a2 + 32);
        do
        {
          while (1)
          {
            v64 = &v35[56 * v63];
            v72 = *(_OWORD *)(v62 + 8);
            v73 = *(_QWORD *)(v62 + 24);
            v70 = *(_OWORD *)(v62 + 32);
            v71 = *(_QWORD *)(v62 + 48);
            *(_QWORD *)v64 = *(_QWORD *)v62;
            *((_QWORD *)v64 + 3) = v73;
            *(_OWORD *)(v64 + 8) = v72;
            *((_QWORD *)v64 + 6) = v71;
            *((_OWORD *)v64 + 2) = v70;
            v35 = *(char **)a2;
            v65 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
            v66 = *(_QWORD *)(a2 + 40);
            v67 = *(_QWORD *)(a2 + 32) + 1;
            v68 = v67 >= v65 ? 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) : 0;
            v63 = v67 - v68;
            *(_QWORD *)(a2 + 32) = v63;
            if (v66 == v65)
              break;
            *(_QWORD *)(a2 + 40) = v66 + 1;
            v62 += 56;
            if (v62 == v60)
              goto LABEL_38;
          }
          v69 = *v20 + 1;
          if (v69 < v65)
            v65 = 0;
          *v20 = v69 - v65;
          v62 += 56;
        }
        while (v62 != v60);
      }
LABEL_38:
      ;
    }
    while (v41++ != v7);
  }
}

uint64_t sub_20F09D130(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  size_t v21;
  const char *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned __int8 v33;
  const char *v34;
  size_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  std::__shared_weak_count_vtbl *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v83;
  uint64_t v84;
  const char *__src;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t *v89[3];
  int v90;
  const char *v91;
  int v92;
  const char *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  void *__p[2];
  char v98;
  char v99;
  uint64_t v100;
  _BYTE v101[24];
  __int128 v102;
  void *v103[2];
  unint64_t v104;
  char v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  if (a2[1] != *a2)
  {
    v4 = a3;
    v7 = 0;
    v8 = 0;
    v9 = qword_254A61000;
    while (1)
    {
      v10 = a1[5];
      if (v10)
      {
        v11 = a1[3];
        v12 = *a1;
        v13 = 0x8F9C18F9C18F9C19 * ((a1[1] - *a1) >> 3);
        while (*(_DWORD *)(v12 + 328 * (v11 % v13)) != *(_DWORD *)(*v4 + 4 * v8))
        {
          ++v11;
          if (!--v10)
            goto LABEL_9;
        }
        v23 = (__int128 *)(v3 + 168 * v8);
        v24 = v12 + 328 * (v11 % v13);
        v25 = *v23;
        v26 = v23[1];
        *(_OWORD *)(v24 + 88) = v23[2];
        *(_OWORD *)(v24 + 72) = v26;
        *(_OWORD *)(v24 + 56) = v25;
        v27 = v23[3];
        v28 = v23[4];
        v29 = v23[5];
        *(_OWORD *)(v24 + 152) = v23[6];
        *(_OWORD *)(v24 + 136) = v29;
        *(_OWORD *)(v24 + 120) = v28;
        *(_OWORD *)(v24 + 104) = v27;
        v30 = v23[7];
        v31 = v23[8];
        v32 = v23[9];
        *(_QWORD *)(v24 + 216) = *((_QWORD *)v23 + 20);
        *(_OWORD *)(v24 + 200) = v32;
        *(_OWORD *)(v24 + 184) = v31;
        *(_OWORD *)(v24 + 168) = v30;
        v7 = (v7 + 1);
        goto LABEL_4;
      }
LABEL_9:
      if ((int)v7 >= 1)
      {
        v14 = atomic_load((unsigned __int8 *)&qword_254A61F88);
        if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A61F88))
        {
          sub_21021D3D8(v89);
          sub_20E8610C0(v101, "cv3d.vio.odometry");
          sub_20E8C4068(v89, (uint64_t)v101, &qword_254A61F80);
          if ((v101[23] & 0x80000000) != 0)
            operator delete(*(void **)v101);
          __cxa_guard_release(&qword_254A61F88);
          v4 = a3;
          v9 = qword_254A61000;
        }
        v15 = v9[496];
        v96 = v15;
        if (**(int **)(v15 + 56) <= 4)
        {
          v16 = *(unsigned __int8 *)(v15 + 72);
          v17 = sub_20E8C31DC(v15, "OSLogSurrogateAppender", 1, 0);
          v18 = v17;
          if (v16 || v17 != 0)
            break;
        }
      }
LABEL_4:
      ++v8;
      v3 = *a2;
      if (v8 >= 0xCF3CF3CF3CF3CF3DLL * ((a2[1] - *a2) >> 3))
        return v7;
    }
    v87 = v16;
    v89[0] = &v96;
    v89[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
    v89[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
    v90 = 4;
    v91 = "unknown file";
    v92 = 167;
    v93 = "unknown function";
    v94 = 0;
    v95 = 0;
    v20 = *v89[0];
    v84 = *v89[0];
    if (*(char *)(*v89[0] + 39) < 0)
    {
      v22 = *(const char **)(v20 + 16);
      v21 = *(_QWORD *)(v20 + 24);
    }
    else
    {
      v21 = *(unsigned __int8 *)(*v89[0] + 39);
      v22 = (const char *)(*v89[0] + 16);
    }
    v83 = *v89[0] + 16;
    v86 = v7;
    v88 = *v4;
    v33 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__p);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
      if (v99 && v98 < 0)
        operator delete(__p[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v34 = byte_254A4A4F8;
    else
      v34 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v35 = byte_254A4A4F8[23];
    else
      v35 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v101 = os_log_create(v34, v22);
    if (v35 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    __src = v22;
    if (v35 >= 0x17)
    {
      v37 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v37 = v35 | 7;
      v38 = v37 + 1;
      v36 = operator new(v37 + 1);
      *(_QWORD *)&v101[16] = v35;
      *(_QWORD *)&v102 = v38 | 0x8000000000000000;
      *(_QWORD *)&v101[8] = v36;
    }
    else
    {
      BYTE7(v102) = v35;
      v36 = &v101[8];
      if (!v35)
      {
LABEL_35:
        v36[v35] = 0;
        BYTE8(v102) = 1;
        if (v21 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v21 >= 0x17)
        {
          v41 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v41 = v21 | 7;
          v42 = v41 + 1;
          v39 = (void **)operator new(v41 + 1);
          v103[1] = (void *)v21;
          v104 = v42 | 0x8000000000000000;
          v103[0] = v39;
        }
        else
        {
          HIBYTE(v104) = v21;
          v39 = v103;
          if (!v21)
          {
            LOBYTE(v103[0]) = 0;
            v105 = 1;
            v40 = *(NSObject **)v101;
            if ((SHIBYTE(v104) & 0x80000000) == 0)
              goto LABEL_39;
            goto LABEL_45;
          }
        }
        memmove(v39, __src, v21);
        *((_BYTE *)v39 + v21) = 0;
        v105 = 1;
        v40 = *(NSObject **)v101;
        if ((SHIBYTE(v104) & 0x80000000) == 0)
        {
LABEL_39:
          if (!BYTE8(v102))
            goto LABEL_48;
          goto LABEL_46;
        }
LABEL_45:
        operator delete(v103[0]);
        if (!BYTE8(v102))
        {
LABEL_48:
          if (*(_QWORD *)v101)
            os_release(*(void **)v101);
          if (v18 && *(_QWORD *)(v18 + 24))
          {
            v43 = _os_log_pack_size();
            v44 = (std::__shared_weak_count_vtbl *)operator new(v43, (std::align_val_t)8uLL);
            v45 = (std::__shared_weak_count *)operator new();
            v46 = v45;
            v45->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v45->__shared_owners_;
            v45->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v45->__shared_weak_owners_ = 0;
            v45[1].__vftable = v44;
            *(_QWORD *)v101 = v44;
            *(_QWORD *)&v101[8] = v44;
            *(_QWORD *)&v101[16] = v45;
            do
              v48 = __ldxr(p_shared_owners);
            while (__stxr(v48 + 1, p_shared_owners));
            v102 = 0uLL;
            v103[0] = 0;
            do
              v49 = __ldaxr(p_shared_owners);
            while (__stlxr(v49 - 1, p_shared_owners));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
            v50 = *(_QWORD *)v101;
            v51 = _os_log_pack_fill();
            v52 = *(_DWORD *)(v88 + 4 * v8);
            *(_DWORD *)v51 = 134218240;
            *(_QWORD *)(v51 + 4) = v8;
            *(_WORD *)(v51 + 12) = 1024;
            *(_DWORD *)(v51 + 14) = v52;
            v53 = (char *)operator new();
            v54 = *(unsigned __int8 *)(v84 + 39);
            v55 = v83;
            if ((v54 & 0x80u) != 0)
            {
              v55 = *(_QWORD *)(v84 + 16);
              v54 = *(_QWORD *)(v84 + 24);
            }
            *(_QWORD *)v53 = v50;
            *(_OWORD *)(v53 + 8) = *(_OWORD *)&v101[8];
            *(_QWORD *)&v101[8] = 0;
            *(_QWORD *)&v101[16] = 0;
            *(_OWORD *)(v53 + 24) = v102;
            v102 = 0uLL;
            *((_QWORD *)v53 + 5) = v55;
            *((_QWORD *)v53 + 6) = v54;
            v53[56] = 16;
            v100 = 0;
            __p[0] = v53;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v18 + 24) + 40))(*(_QWORD *)(v18 + 24), __p);
            v56 = __p[0];
            __p[0] = 0;
            if (v56)
            {
              v57 = (std::__shared_weak_count *)*((_QWORD *)v56 + 4);
              if (v57)
              {
                v58 = (unint64_t *)&v57->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              v60 = (std::__shared_weak_count *)*((_QWORD *)v56 + 2);
              if (v60)
              {
                v61 = (unint64_t *)&v60->__shared_owners_;
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              MEMORY[0x212BC6398](v56, 0x10F0C40B62ED6C6);
              v63 = v100;
              v100 = 0;
              if (v63)
              {
                v64 = *(std::__shared_weak_count **)(v63 + 32);
                if (v64)
                {
                  v65 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v66 = __ldaxr(v65);
                  while (__stlxr(v66 - 1, v65));
                  if (!v66)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
                v67 = *(std::__shared_weak_count **)(v63 + 16);
                if (v67)
                {
                  v68 = (unint64_t *)&v67->__shared_owners_;
                  do
                    v69 = __ldaxr(v68);
                  while (__stlxr(v69 - 1, v68));
                  if (!v69)
                  {
                    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                    std::__shared_weak_count::__release_weak(v67);
                  }
                }
                MEMORY[0x212BC6398](v63, 0x10F0C40B62ED6C6);
              }
            }
            v70 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
            v9 = qword_254A61000;
            if (*((_QWORD *)&v102 + 1))
            {
              v71 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            v73 = *(std::__shared_weak_count **)&v101[16];
            if (*(_QWORD *)&v101[16])
            {
              v74 = (unint64_t *)(*(_QWORD *)&v101[16] + 8);
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
          }
          else
          {
            os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
            v76 = *(_DWORD *)(v88 + 4 * v8);
            *(_DWORD *)v101 = 134218240;
            *(_QWORD *)&v101[4] = v8;
            *(_WORD *)&v101[12] = 1024;
            *(_DWORD *)&v101[14] = v76;
            v77 = (void *)_os_log_send_and_compose_impl();
            v9 = qword_254A61000;
            if (v77)
              free(v77);
          }
          if (v87)
          {
            sub_20E8C003C((uint64_t)v89, "UpdateFromStates did not match frame %zu (ID=%d), yet a previous frame was matched.", v8, *(_DWORD *)(*a3 + 4 * v8));
            sub_20E863570((uint64_t)v89);
          }
          sub_20E863570((uint64_t)v89);
          v78 = v95;
          if (v95)
          {
            v79 = (unint64_t *)&v95->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v4 = a3;
          v7 = v86;
          goto LABEL_4;
        }
LABEL_46:
        if (SBYTE7(v102) < 0)
          operator delete(*(void **)&v101[8]);
        goto LABEL_48;
      }
    }
    memmove(v36, v34, v35);
    goto LABEL_35;
  }
  return 0;
}

void sub_20F09DA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a40)
  {
    if (a39 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_20F09DAA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 153) < 0)
  {
    operator delete(*(void **)(v1 - 176));
    __cxa_guard_abort(&qword_254A61F88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A61F88);
  _Unwind_Resume(a1);
}

void sub_20F09DAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;

  sub_20E86E8C4(&a34);
  sub_20E86E8C4((uint64_t *)(v34 - 184));
  sub_20E86E658(v34 - 176);
  sub_20E863714((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_20F09DB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  MEMORY[0x212BC6398](v16, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F09DB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F09DB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  void *v18;
  va_list va;

  va_start(va, a16);
  if (*(char *)(v16 - 145) < 0)
    operator delete(*(void **)(v16 - 168));
  v18 = *(void **)(v16 - 176);
  if (v18)
    os_release(v18);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F09DBF8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  void *__p;

  v2 = a1[4];
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 328 * v2 - 328;
    if (v2 != 1)
      goto LABEL_6;
    v5 = 0x8F9C18F9C18F9C19 * ((a1[1] - v3) >> 3);
  }
  else
  {
    v3 = *a1;
    v6 = a1[1];
    v5 = 0x8F9C18F9C18F9C19 * ((v6 - *a1) >> 3);
    v4 = v6 - 328;
  }
  v2 += v5;
LABEL_6:
  v7 = v2 - 2;
  v8 = v3 + 328 * (v2 - 2);
  v9 = *(_QWORD *)(v8 + 232);
  v10 = *(double **)(v4 + 224);
  v11 = *(_QWORD *)(v8 + 224);
  if (*(double *)(v9 - 56) == *v10)
    v12 = -1;
  else
    v12 = 0;
  v13 = v9 + 56 * v12;
  __p = 0;
  v14 = v13 - v11;
  if (v13 == v11)
  {
    v22 = 0;
    v16 = 0;
  }
  else
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v14 >> 3)) >= 0x492492492492493)
      sub_20EABADD4();
    v15 = (char *)operator new(v14);
    v16 = (uint64_t)v15;
    v17 = 0;
    __p = v15;
    do
    {
      v18 = v11 + v17;
      v19 = &v15[v17];
      *(_QWORD *)v19 = *(_QWORD *)(v11 + v17);
      v20 = *(_OWORD *)(v11 + v17 + 8);
      *((_QWORD *)v19 + 3) = *(_QWORD *)(v11 + v17 + 24);
      *(_OWORD *)(v19 + 8) = v20;
      v21 = *(_OWORD *)(v11 + v17 + 32);
      *((_QWORD *)v19 + 6) = *(_QWORD *)(v11 + v17 + 48);
      *((_OWORD *)v19 + 2) = v21;
      v17 += 56;
    }
    while (v18 + 56 != v13);
    v22 = (uint64_t)&v15[v17];
    v10 = *(double **)(v4 + 224);
  }
  sub_20F09E0A8((char **)(v4 + 224), (uint64_t)v10, v16, v22, 0x6DB6DB6DB6DB6DB7 * ((v22 - v16) >> 3));
  v23 = *(_OWORD *)v4;
  *(_OWORD *)(v8 + 9) = *(_OWORD *)(v4 + 9);
  *(_OWORD *)v8 = v23;
  if (v8 == v4)
  {
    v33 = v3 + 328 * v7;
    v34 = *(_OWORD *)(v4 + 56);
    v35 = *(_OWORD *)(v4 + 72);
    *(_OWORD *)(v33 + 88) = *(_OWORD *)(v4 + 88);
    *(_OWORD *)(v33 + 72) = v35;
    *(_OWORD *)(v33 + 56) = v34;
    v36 = *(_OWORD *)(v4 + 104);
    v37 = *(_OWORD *)(v4 + 120);
    v38 = *(_OWORD *)(v4 + 136);
    *(_OWORD *)(v33 + 152) = *(_OWORD *)(v4 + 152);
    *(_OWORD *)(v33 + 136) = v38;
    *(_OWORD *)(v33 + 120) = v37;
    *(_OWORD *)(v33 + 104) = v36;
    v39 = *(_OWORD *)(v4 + 168);
    v40 = *(_OWORD *)(v4 + 184);
    v41 = *(_OWORD *)(v4 + 200);
    *(_QWORD *)(v33 + 216) = *(_QWORD *)(v4 + 216);
    *(_OWORD *)(v33 + 200) = v41;
    *(_OWORD *)(v33 + 184) = v40;
    *(_OWORD *)(v33 + 168) = v39;
  }
  else
  {
    sub_20EDB66F4((_QWORD *)(v8 + 32), *(char **)(v4 + 32), *(char **)(v4 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v4 + 40) - *(_QWORD *)(v4 + 32)) >> 3));
    v24 = v3 + 328 * v7;
    v25 = *(_OWORD *)(v4 + 56);
    v26 = *(_OWORD *)(v4 + 72);
    *(_OWORD *)(v24 + 88) = *(_OWORD *)(v4 + 88);
    *(_OWORD *)(v24 + 72) = v26;
    *(_OWORD *)(v24 + 56) = v25;
    v27 = *(_OWORD *)(v4 + 104);
    v28 = *(_OWORD *)(v4 + 120);
    v29 = *(_OWORD *)(v4 + 136);
    *(_OWORD *)(v24 + 152) = *(_OWORD *)(v4 + 152);
    *(_OWORD *)(v24 + 136) = v29;
    *(_OWORD *)(v24 + 120) = v28;
    *(_OWORD *)(v24 + 104) = v27;
    v30 = *(_OWORD *)(v4 + 168);
    v31 = *(_OWORD *)(v4 + 184);
    v32 = *(_OWORD *)(v4 + 200);
    *(_QWORD *)(v24 + 216) = *(_QWORD *)(v4 + 216);
    *(_OWORD *)(v24 + 200) = v32;
    *(_OWORD *)(v24 + 184) = v31;
    *(_OWORD *)(v24 + 168) = v30;
    sub_20EE62A1C((char **)(v8 + 224), *(_QWORD *)(v4 + 224), *(_QWORD *)(v4 + 232), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v4 + 232) - *(_QWORD *)(v4 + 224)) >> 3));
  }
  v42 = v3 + 328 * v7;
  *(_OWORD *)(v42 + 248) = *(_OWORD *)(v4 + 248);
  v43 = *(_OWORD *)(v4 + 264);
  v44 = *(_OWORD *)(v4 + 280);
  v45 = *(_OWORD *)(v4 + 312);
  *(_OWORD *)(v42 + 296) = *(_OWORD *)(v4 + 296);
  *(_OWORD *)(v42 + 312) = v45;
  *(_OWORD *)(v42 + 264) = v43;
  *(_OWORD *)(v42 + 280) = v44;
  sub_20F09DF74(a1);
  if (__p)
    operator delete(__p);
}

void sub_20F09DF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F09DF74(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v11;
  _OWORD *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;

  v2 = a1[4];
  v3 = *a1;
  if (!v2)
    v2 = 0x8F9C18F9C18F9C19 * ((a1[1] - *a1) >> 3);
  v4 = v2 - 1;
  v5 = v3 + 328 * (v2 - 1);
  *(_QWORD *)v5 = 0xFFFFFFFFLL;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v5 + 8) = _Q0;
  *(_BYTE *)(v5 + 24) = 0;
  v12 = (_OWORD *)(v5 + 32);
  v11 = *(void **)(v5 + 32);
  if (v11)
  {
    *(_QWORD *)(v5 + 40) = v11;
    operator delete(v11);
  }
  v13 = v3 + 328 * v4;
  v16 = *(void **)(v13 + 224);
  v15 = (_QWORD *)(v13 + 224);
  v14 = v16;
  v17 = 0uLL;
  v12[10] = 0u;
  v12[11] = 0u;
  v12[8] = 0u;
  v12[9] = 0u;
  v12[6] = 0u;
  v12[7] = 0u;
  v12[4] = 0u;
  v12[5] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  *v12 = 0u;
  v12[1] = 0u;
  if (v16)
  {
    *(_QWORD *)(v3 + 328 * v4 + 232) = v14;
    operator delete(v14);
    v17 = 0uLL;
  }
  v18 = v3 + 328 * v4;
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  *(_WORD *)(v18 + 248) = 514;
  v18 += 248;
  *(_OWORD *)(v18 + 2) = v17;
  *(_OWORD *)(v18 + 18) = v17;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v18 + 32) = v17;
  *(_OWORD *)(v18 + 48) = _Q0;
  *(_OWORD *)(v18 + 64) = _Q0;
  v20 = a1[4];
  if (!v20)
    v20 = 0x8F9C18F9C18F9C19 * ((a1[1] - *a1) >> 3);
  v21 = a1[5] - 1;
  a1[4] = v20 - 1;
  a1[5] = v21;
}

uint64_t sub_20F09E0A8(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  char *i;
  __int128 v49;
  __int128 v50;
  char *v51;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 56;
  v7 = (uint64_t)&(*a1)[56 * v6];
  if (a5 < 1)
    return v7;
  v9 = a3;
  v11 = (unint64_t)a1[1];
  v12 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v12[-v11] >> 3) >= a5)
  {
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v7) >> 3) >= a5)
    {
      v17 = a3 + 56 * a5;
      v18 = a1[1];
    }
    else
    {
      v17 = a3 + 8 * ((uint64_t)(v11 - v7) >> 3);
      v18 = a1[1];
      if (v17 != a4)
      {
        v19 = a3 + 8 * ((uint64_t)(v11 - v7) >> 3);
        v20 = a1[1];
        do
        {
          *(_QWORD *)v20 = *(_QWORD *)v19;
          v21 = *(_OWORD *)(v19 + 8);
          *((_QWORD *)v20 + 3) = *(_QWORD *)(v19 + 24);
          *(_OWORD *)(v20 + 8) = v21;
          v22 = *(_OWORD *)(v19 + 32);
          *((_QWORD *)v20 + 6) = *(_QWORD *)(v19 + 48);
          *((_OWORD *)v20 + 2) = v22;
          v18 += 56;
          v19 += 56;
          v20 += 56;
        }
        while (v19 != a4);
      }
      a1[1] = v18;
      if ((uint64_t)(v11 - v7) < 1)
        return v7;
    }
    v23 = v7 + 56 * a5;
    v24 = (unint64_t)&v18[-56 * a5];
    v25 = v18;
    if (v24 < v11)
    {
      v25 = v18;
      do
      {
        *(_QWORD *)v25 = *(_QWORD *)v24;
        v26 = *(_OWORD *)(v24 + 8);
        *((_QWORD *)v25 + 3) = *(_QWORD *)(v24 + 24);
        *(_OWORD *)(v25 + 8) = v26;
        v27 = *(_OWORD *)(v24 + 32);
        *((_QWORD *)v25 + 6) = *(_QWORD *)(v24 + 48);
        *((_OWORD *)v25 + 2) = v27;
        v25 += 56;
        v24 += 56;
      }
      while (v24 < v11);
    }
    a1[1] = v25;
    if (v18 != (char *)v23)
    {
      v28 = v18 - 24;
      v29 = 8 * ((uint64_t)&v18[-v23] >> 3);
      do
      {
        *((_QWORD *)v28 - 4) = *(_QWORD *)(v7 + v29 - 56);
        v30 = *(_OWORD *)(v7 + v29 - 48);
        *((_QWORD *)v28 - 1) = *(_QWORD *)(v7 + v29 - 32);
        *(_OWORD *)(v28 - 24) = v30;
        v31 = *(_OWORD *)(v7 + v29 - 24);
        *((_QWORD *)v28 + 2) = *(_QWORD *)(v7 + v29 - 8);
        *(_OWORD *)v28 = v31;
        v28 -= 56;
        v29 -= 56;
      }
      while (v29);
    }
    if (v17 != a3)
    {
      v32 = v7;
      do
      {
        *(_QWORD *)v32 = *(_QWORD *)v9;
        v33 = *(_OWORD *)(v9 + 8);
        *(_QWORD *)(v32 + 24) = *(_QWORD *)(v9 + 24);
        *(_OWORD *)(v32 + 8) = v33;
        v34 = *(_OWORD *)(v9 + 32);
        *(_QWORD *)(v32 + 48) = *(_QWORD *)(v9 + 48);
        *(_OWORD *)(v32 + 32) = v34;
        v9 += 56;
        v32 += 56;
      }
      while (v9 != v17);
    }
    return v7;
  }
  v13 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - (_QWORD)v5) >> 3);
  if (v13 > 0x492492492492492)
    sub_20EABADD4();
  v14 = 0x6DB6DB6DB6DB6DB7 * ((v12 - v5) >> 3);
  if (2 * v14 > v13)
    v13 = 2 * v14;
  if (v14 >= 0x249249249249249)
    v15 = 0x492492492492492;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 > 0x492492492492492)
      sub_20E877A38();
    v16 = (char *)operator new(56 * v15);
  }
  else
  {
    v16 = 0;
  }
  v35 = &v16[56 * v6];
  v36 = &v35[56 * a5];
  v37 = v35;
  do
  {
    *(_QWORD *)v37 = *(_QWORD *)v9;
    v38 = *(_OWORD *)(v9 + 8);
    *((_QWORD *)v37 + 3) = *(_QWORD *)(v9 + 24);
    *(_OWORD *)(v37 + 8) = v38;
    v39 = *(_OWORD *)(v9 + 32);
    *((_QWORD *)v37 + 6) = *(_QWORD *)(v9 + 48);
    *((_OWORD *)v37 + 2) = v39;
    v37 += 56;
    v9 += 56;
  }
  while (v37 != v36);
  v40 = *a1;
  v41 = &v16[56 * v6];
  if (*a1 != (char *)v7)
  {
    v42 = 56 * v6;
    v43 = v16;
    do
    {
      v44 = &v43[v42];
      *((_QWORD *)v44 - 7) = *(_QWORD *)&v5[v42 - 56];
      v45 = *(_OWORD *)&v5[v42 - 48];
      *((_QWORD *)v44 - 4) = *(_QWORD *)&v5[v42 - 32];
      *((_OWORD *)v44 - 3) = v45;
      v46 = *(_OWORD *)&v5[v42 - 24];
      *((_QWORD *)v44 - 1) = *(_QWORD *)&v5[v42 - 8];
      *(_OWORD *)(v44 - 24) = v46;
      v5 -= 56;
      v43 -= 56;
    }
    while (&v5[v42] != v40);
    v41 = &v43[56 * v6];
  }
  v47 = &v16[56 * v15];
  for (i = a1[1]; (char *)v7 != i; v7 += 56)
  {
    *(_QWORD *)v36 = *(_QWORD *)v7;
    v49 = *(_OWORD *)(v7 + 8);
    *((_QWORD *)v36 + 3) = *(_QWORD *)(v7 + 24);
    *(_OWORD *)(v36 + 8) = v49;
    v50 = *(_OWORD *)(v7 + 32);
    *((_QWORD *)v36 + 6) = *(_QWORD *)(v7 + 48);
    *((_OWORD *)v36 + 2) = v50;
    v36 += 56;
  }
  v51 = *a1;
  *a1 = v41;
  a1[1] = v36;
  a1[2] = v47;
  if (v51)
    operator delete(v51);
  return (uint64_t)v35;
}

void sub_20F09E480(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _OWORD v29[2];
  void *__p[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v3 = a1[4];
  v4 = *a1;
  v5 = *a1 + 328 * v3;
  sub_20F09E648((uint64_t)v29, a2);
  v6 = v29[0];
  *(_OWORD *)(v5 + 9) = *(_OWORD *)((char *)v29 + 9);
  *(_OWORD *)v5 = v6;
  v7 = *(void **)(v5 + 32);
  if (v7)
  {
    *(_QWORD *)(v5 + 40) = v7;
    operator delete(v7);
  }
  *(_OWORD *)(v5 + 32) = *(_OWORD *)__p;
  *(_QWORD *)(v5 + 48) = v31;
  __p[1] = 0;
  v31 = 0;
  __p[0] = 0;
  v8 = v4 + 328 * v3;
  v9 = v36;
  v10 = v37;
  v11 = v38;
  *(_OWORD *)(v8 + 104) = v35;
  *(_OWORD *)(v8 + 152) = v11;
  *(_OWORD *)(v8 + 136) = v10;
  *(_OWORD *)(v8 + 120) = v9;
  v12 = v40;
  v13 = v41;
  v14 = v42;
  *(_OWORD *)(v8 + 168) = v39;
  *(_QWORD *)(v8 + 216) = v14;
  *(_OWORD *)(v8 + 200) = v13;
  *(_OWORD *)(v8 + 184) = v12;
  v15 = v33;
  v16 = v34;
  *(_OWORD *)(v8 + 56) = v32;
  *(_OWORD *)(v8 + 88) = v16;
  *(_OWORD *)(v8 + 72) = v15;
  v19 = *(void **)(v8 + 224);
  v18 = v8 + 224;
  v17 = v19;
  if (v19)
  {
    *(_QWORD *)(v4 + 328 * v3 + 232) = v17;
    operator delete(v17);
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    v17 = __p[0];
  }
  *(_OWORD *)v18 = v43;
  v20 = v4 + 328 * v3;
  *(_QWORD *)(v20 + 240) = v44;
  v44 = 0;
  v43 = 0uLL;
  v21 = v49;
  v23 = v46;
  v22 = v47;
  *(_OWORD *)(v20 + 296) = v48;
  *(_OWORD *)(v20 + 312) = v21;
  *(_OWORD *)(v20 + 264) = v23;
  *(_OWORD *)(v20 + 280) = v22;
  *(_OWORD *)(v20 + 248) = v45;
  if (v17)
  {
    __p[1] = v17;
    operator delete(v17);
  }
  v24 = 0x8F9C18F9C18F9C19 * ((a1[1] - *a1) >> 3);
  v25 = a1[5];
  v26 = a1[4] + 1;
  if (v26 >= v24)
    v27 = 0x8F9C18F9C18F9C19 * ((a1[1] - *a1) >> 3);
  else
    v27 = 0;
  a1[4] = v26 - v27;
  if (v25 == v24)
  {
    v28 = a1[3] + 1;
    if (v28 < v24)
      v24 = 0;
    a1[3] = v28 - v24;
  }
  else
  {
    a1[5] = v25 + 1;
  }
}

uint64_t sub_20F09E648(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(__int128 *)((char *)a2 + 9);
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 4);
  v5 = (_BYTE *)*((_QWORD *)a2 + 5);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0x8E38E38E38E38E39 * (v7 >> 3) >= 0x38E38E38E38E38FLL)
      sub_20EB849AC();
    v8 = (char *)operator new(v7);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 48) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 40) = v9;
  }
  v10 = *(__int128 *)((char *)a2 + 168);
  v11 = *(__int128 *)((char *)a2 + 184);
  v12 = *(__int128 *)((char *)a2 + 200);
  v13 = *((_QWORD *)a2 + 27);
  v14 = *(__int128 *)((char *)a2 + 104);
  v15 = *(__int128 *)((char *)a2 + 120);
  v16 = *(__int128 *)((char *)a2 + 136);
  v17 = *(__int128 *)((char *)a2 + 152);
  v18 = *(__int128 *)((char *)a2 + 56);
  v19 = *(__int128 *)((char *)a2 + 72);
  v20 = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 88) = v20;
  *(_OWORD *)(a1 + 72) = v19;
  *(_OWORD *)(a1 + 56) = v18;
  *(_OWORD *)(a1 + 152) = v17;
  *(_OWORD *)(a1 + 136) = v16;
  *(_OWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 168) = v10;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v21 = *((_QWORD *)a2 + 28);
  v22 = *((_QWORD *)a2 + 29);
  v23 = v22 - v21;
  if (v22 != v21)
  {
    v24 = 0x6DB6DB6DB6DB6DB7 * (v23 >> 3);
    if (v24 >= 0x492492492492493)
      sub_20EABADD4();
    v25 = (char *)operator new(v23);
    v26 = 0;
    *(_QWORD *)(a1 + 224) = v25;
    *(_QWORD *)(a1 + 232) = v25;
    *(_QWORD *)(a1 + 240) = &v25[56 * v24];
    do
    {
      v27 = v21 + v26;
      v28 = &v25[v26];
      *(_QWORD *)v28 = *(_QWORD *)(v21 + v26);
      v29 = *(_OWORD *)(v21 + v26 + 8);
      *((_QWORD *)v28 + 3) = *(_QWORD *)(v21 + v26 + 24);
      *(_OWORD *)(v28 + 8) = v29;
      v30 = *(_OWORD *)(v21 + v26 + 32);
      *((_QWORD *)v28 + 6) = *(_QWORD *)(v21 + v26 + 48);
      *((_OWORD *)v28 + 2) = v30;
      v26 += 56;
    }
    while (v27 + 56 != v22);
    *(_QWORD *)(a1 + 232) = &v25[v26];
  }
  *(_OWORD *)(a1 + 248) = *(__int128 *)((char *)a2 + 248);
  v31 = *(__int128 *)((char *)a2 + 264);
  v32 = *(__int128 *)((char *)a2 + 280);
  v33 = *(__int128 *)((char *)a2 + 312);
  *(_OWORD *)(a1 + 296) = *(__int128 *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 312) = v33;
  *(_OWORD *)(a1 + 264) = v31;
  *(_OWORD *)(a1 + 280) = v32;
  return a1;
}

void sub_20F09E83C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 232) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void **sub_20F09E870(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (uint64_t)v3 - 296;
      do
      {
        v7 = *(void **)(v5 + 192);
        if (v7)
        {
          *(_QWORD *)(v5 + 200) = v7;
          operator delete(v7);
        }
        v8 = *(void **)v5;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)(v5 + 8) = v8;
          operator delete(v8);
        }
        v6 = (void *)(v5 - 32);
        v5 -= 328;
      }
      while (v6 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20F09E8F8(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  const char *v27;
  unsigned __int8 v28;
  const char *v29;
  size_t v30;
  __int128 *v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  size_t v43;
  NSObject *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t v49;
  os_log_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  size_t v83;
  const char *v84;
  unsigned __int8 v85;
  const char *v86;
  size_t v87;
  __int128 *v88;
  unint64_t v89;
  const char *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void **v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  size_t v100;
  NSObject *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  os_log_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v139;
  unint64_t v140;
  uint32x4_t v141;
  unint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const double *v148;
  uint32x4_t v149;
  const double *v150;
  const double *v151;
  const double *v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  unint64_t v156;
  char **v157;
  char *v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  char *v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  _BYTE *v171;
  _DWORD *v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  BOOL v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _OWORD *v184;
  char *v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t i;
  uint64_t v194;
  uint64_t j;
  unint64_t v196;
  uint64_t v197;
  unsigned __int8 v198;
  uint64_t k;
  uint64_t v200;
  unsigned __int8 v201;
  uint64_t v202;
  uint64_t v203;
  float64x2_t v204;
  int64x2_t v205;
  float64x2_t v207;
  float64x2_t v208;
  int8x16_t v209;
  float64x2_t v212;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  float64x2_t *v229;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v253;
  float64x2_t *v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t m;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t n;
  _DWORD *v267;
  unint64_t v268;
  unsigned __int8 v269;
  uint64_t v270;
  uint64_t ii;
  unsigned __int8 v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unsigned __int8 v276;
  uint64_t v277;
  uint64_t jj;
  unsigned __int8 v279;
  unint64_t v280;
  _OWORD *v281;
  _OWORD *v282;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint32x4_t v290;
  unint64_t v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  const double *v297;
  uint32x4_t v298;
  const double *v299;
  const double *v300;
  const double *v301;
  unint64_t v302;
  void *v303;
  uint64_t v304;
  unint64_t v305;
  char **v306;
  char *v307;
  unint64_t v308;
  uint64_t v309;
  int v310;
  int v311;
  char *v312;
  unint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  _BYTE *v320;
  _DWORD *v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  BOOL v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _OWORD *v333;
  char *v334;
  uint64_t v335;
  __int128 v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t kk;
  uint64_t v343;
  uint64_t mm;
  unint64_t v345;
  uint64_t v346;
  unsigned __int8 v347;
  uint64_t nn;
  uint64_t v349;
  unsigned __int8 v350;
  uint64_t v351;
  uint64_t v352;
  float64x2_t v353;
  int64x2_t v354;
  float64x2_t v356;
  float64x2_t v357;
  int8x16_t v358;
  float64x2_t v361;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  char *v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t *v373;
  unint64_t v374;
  uint64_t v375;
  unint64_t v376;
  float64x2_t *v377;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v401;
  float64x2_t *v402;
  unint64_t v403;
  uint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  const char *v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  unsigned __int8 v416;
  uint64_t v417;
  uint64_t i1;
  unsigned __int8 v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  const char *v423;
  unsigned __int8 v424;
  uint64_t v425;
  uint64_t i2;
  unsigned __int8 v427;
  _OWORD *v428;
  _OWORD *v429;
  uint64_t v431;
  _BYTE *v433;
  uint64_t *v434;
  uint64_t v435;
  __int128 *v436;
  _DWORD *v437;
  _DWORD *v438;
  _QWORD *v439;
  _QWORD *v440;
  _QWORD *v441;
  uint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  uint64_t *v445;
  uint64_t *v446;
  char **v447;
  char **v448;
  char **v449;
  char **v450;
  char **v451;
  char **v452;
  uint64_t *v454;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v456;
  int v457;
  const char *v458;
  int v459;
  const char *v460;
  uint64_t v461;
  std::__shared_weak_count *v462;
  uint64_t v463;
  os_log_t v464;
  __int128 v465;
  __int128 v466;
  void **v467;
  size_t v468;
  unint64_t v469;
  char v470;
  uint64_t v471;
  _QWORD v472[2];
  float64x2x4_t v473;
  float64x2x4_t v474;
  float64x2x4_t v475;
  float64x2x4_t v476;
  float64x2x4_t v477;
  float64x2x4_t v478;
  float64x2x4_t v479;
  float64x2x4_t v480;

  *(_QWORD *)a1 = &off_24C9F88A0;
  *(_WORD *)(a1 + 8) = *(_WORD *)a2;
  v7 = (_BYTE *)(a1 + 8);
  v436 = (__int128 *)(a1 + 16);
  sub_20E86B668(a1 + 16, (__int128 *)(a2 + 8));
  v7[208] = *(_BYTE *)(a2 + 208);
  v433 = v7;
  v435 = a1;
  sub_20E86B868((uint64_t)(v7 + 216), a2 + 216);
  v8 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 408) = v8;
  v9 = *(_OWORD *)(a2 + 416);
  v10 = *(_OWORD *)(a2 + 432);
  v11 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 472) = v11;
  *(_OWORD *)(a1 + 424) = v9;
  *(_OWORD *)(a1 + 440) = v10;
  *(_BYTE *)(a1 + 488) = a3;
  *(_BYTE *)(a1 + 489) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 2464) = 0;
  *(_BYTE *)(a1 + 2632) = 0;
  *(_BYTE *)(a1 + 2640) = 0;
  *(_BYTE *)(a1 + 3360) = 0;
  *(_QWORD *)(a1 + 3384) = 0;
  *(_DWORD *)(a1 + 3392) = 0;
  v434 = (uint64_t *)(a1 + 3368);
  *(_OWORD *)(a1 + 3368) = 0u;
  v12 = operator new();
  *(_OWORD *)v12 = xmmword_21039BC00;
  *(_OWORD *)(v12 + 16) = xmmword_21039BC10;
  *(_OWORD *)(v12 + 32) = xmmword_21039BC20;
  *(_QWORD *)(v12 + 48) = 0x3F50624DD2F1A9FCLL;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 80) = 0xBFF0000000000000;
  *(_DWORD *)(v12 + 88) = 0;
  *(_WORD *)(v12 + 92) = 0;
  *(_BYTE *)(v12 + 94) = 1;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_OWORD *)(v12 + 320) = 0u;
  *(_OWORD *)(v12 + 336) = 0u;
  *(_OWORD *)(v12 + 352) = 0u;
  *(_OWORD *)(v12 + 368) = 0u;
  *(_OWORD *)(v12 + 384) = 0u;
  *(_OWORD *)(v12 + 400) = 0u;
  *(_OWORD *)(v12 + 416) = 0u;
  *(_OWORD *)(v12 + 432) = 0u;
  *(_OWORD *)(v12 + 448) = 0u;
  *(_OWORD *)(v12 + 464) = 0u;
  *(_OWORD *)(v12 + 480) = 0u;
  *(_OWORD *)(v12 + 496) = 0u;
  *(_OWORD *)(v12 + 512) = 0u;
  *(_QWORD *)(v12 + 2360) = 0;
  *(_OWORD *)(v12 + 2328) = 0u;
  *(_OWORD *)(v12 + 2344) = 0u;
  v13 = (char *)operator new(0x445C0uLL);
  *(_QWORD *)(v12 + 2344) = v13;
  *(_QWORD *)(v12 + 2360) = v13 + 280000;
  v14 = v13 + 8;
  v15 = 5000;
  do
  {
    *((_QWORD *)v14 - 1) = 0xBFF0000000000000;
    *v14 = 0uLL;
    v14[1] = 0uLL;
    v14[2] = 0uLL;
    v14 = (_OWORD *)((char *)v14 + 56);
    --v15;
  }
  while (v15);
  *(_QWORD *)(v12 + 2352) = v13 + 280000;
  *(_QWORD *)(v12 + 2368) = 0;
  *(_QWORD *)(v12 + 2384) = 0;
  *(_QWORD *)(v12 + 2376) = 0;
  *(_QWORD *)(v12 + 216) = 0x3FF0000000000000;
  *(_QWORD *)(v12 + 224) = 0;
  *(_QWORD *)(v12 + 232) = 0;
  *(_QWORD *)(v12 + 240) = 0;
  *(_QWORD *)(v12 + 248) = 0x3FF0000000000000;
  *(_QWORD *)(v12 + 256) = 0;
  *(_QWORD *)(v12 + 264) = 0;
  *(_QWORD *)(v12 + 272) = 0;
  *(_QWORD *)(v12 + 280) = 0x3FF0000000000000;
  bzero((void *)(v12 + 528), 0x708uLL);
  v16 = *v434;
  *v434 = v12;
  if (v16)
  {
    v17 = *(void **)(v16 + 2344);
    if (v17)
    {
      *(_QWORD *)(v16 + 2352) = v17;
      operator delete(v17);
    }
    MEMORY[0x212BC6398](v16, 0x1020C408F16D7D3);
    v12 = *v434;
  }
  *(_OWORD *)v12 = *(_OWORD *)(a1 + 400);
  v18 = *(_OWORD *)(a1 + 416);
  v19 = *(_OWORD *)(a1 + 432);
  v20 = *(_OWORD *)(a1 + 464);
  *(_OWORD *)(v12 + 48) = *(_OWORD *)(a1 + 448);
  *(_OWORD *)(v12 + 64) = v20;
  *(_OWORD *)(v12 + 16) = v18;
  *(_OWORD *)(v12 + 32) = v19;
  if (*(_BYTE *)(a1 + 8))
  {
    if (!*(_BYTE *)(a1 + 9))
      goto LABEL_11;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/InertialStateInitializer.cpp", 55, (uint64_t)"!config_.enable_dynamic_motion_initialization || !config_.enable_mono_dynamic_motion_initialization", 99, (uint64_t)"DMI and mDMI cannot be enabled at the same time.", 48, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    if (*v7)
    {
LABEL_11:
      if (*a4 == a4[1])
      {
        sub_20F0A1EF4(&v463);
        if (**(int **)(v463 + 56) <= 4)
        {
          v21 = *(unsigned __int8 *)(v463 + 72);
          v22 = sub_20E8C31DC(v463, "OSLogSurrogateAppender", 1, 0);
          v23 = v22;
          if (v21 || v22)
          {
            v454 = &v463;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v456 = std::chrono::system_clock::now().__d_.__rep_;
            v457 = 4;
            v458 = "unknown file";
            v459 = 59;
            v461 = 0;
            v462 = 0;
            v460 = "unknown function";
            v24 = v463;
            v25 = v463 + 16;
            if (*(char *)(v463 + 39) < 0)
            {
              v27 = *(const char **)(v463 + 16);
              v26 = *(_QWORD *)(v463 + 24);
            }
            else
            {
              v26 = *(unsigned __int8 *)(v463 + 39);
              v27 = (const char *)(*v454 + 16);
            }
            v28 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v464);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v464);
              if ((_BYTE)v466 && SHIBYTE(v465) < 0)
                operator delete(v464);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A4F8[23] >= 0)
              v29 = byte_254A4A4F8;
            else
              v29 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v30 = byte_254A4A4F8[23];
            else
              v30 = *(_QWORD *)&byte_254A4A4F8[8];
            v464 = os_log_create(v29, v27);
            v31 = &v465;
            if (v30 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v30 >= 0x17)
            {
              v32 = v23;
              v33 = v27;
              v34 = v24;
              v35 = v21;
              v36 = v25;
              v37 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17)
                v37 = v30 | 7;
              v38 = v37 + 1;
              v31 = (__int128 *)operator new(v37 + 1);
              *((_QWORD *)&v465 + 1) = v30;
              *(_QWORD *)&v466 = v38 | 0x8000000000000000;
              *(_QWORD *)&v465 = v31;
              v25 = v36;
              v21 = v35;
              v24 = v34;
              v27 = v33;
              v23 = v32;
            }
            else
            {
              BYTE7(v466) = v30;
              if (!v30)
              {
LABEL_33:
                *((_BYTE *)v31 + v30) = 0;
                BYTE8(v466) = 1;
                v39 = (void **)&v467;
                if (v26 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v26 >= 0x17)
                {
                  v40 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v26 | 7) != 0x17)
                    v40 = v26 | 7;
                  v41 = v40 + 1;
                  v39 = (void **)operator new(v40 + 1);
                  v468 = v26;
                  v469 = v41 | 0x8000000000000000;
                  v467 = v39;
                }
                else
                {
                  HIBYTE(v469) = v26;
                  if (!v26)
                    goto LABEL_41;
                }
                memmove(v39, v27, v26);
LABEL_41:
                *((_BYTE *)v39 + v26) = 0;
                v470 = 1;
                v42 = v464;
                if (SHIBYTE(v469) < 0)
                  operator delete(v467);
                if (BYTE8(v466) && SBYTE7(v466) < 0)
                  operator delete((void *)v465);
                if (v464)
                  os_release(v464);
                if (v23 && *(_QWORD *)(v23 + 24))
                {
                  v43 = _os_log_pack_size();
                  v44 = operator new(v43, (std::align_val_t)8uLL);
                  v45 = (std::__shared_weak_count *)operator new();
                  v46 = v45;
                  v45->__shared_owners_ = 0;
                  p_shared_owners = (unint64_t *)&v45->__shared_owners_;
                  v45->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v45->__shared_weak_owners_ = 0;
                  v45[1].__vftable = (std::__shared_weak_count_vtbl *)v44;
                  v464 = v44;
                  *(_QWORD *)&v465 = v44;
                  *((_QWORD *)&v465 + 1) = v45;
                  do
                    v48 = __ldxr(p_shared_owners);
                  while (__stxr(v48 + 1, p_shared_owners));
                  v466 = 0uLL;
                  v467 = 0;
                  do
                    v49 = __ldaxr(p_shared_owners);
                  while (__stlxr(v49 - 1, p_shared_owners));
                  if (!v49)
                  {
                    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                  v50 = v464;
                  *(_WORD *)_os_log_pack_fill() = 0;
                  v51 = operator new();
                  v52 = *(unsigned __int8 *)(v24 + 39);
                  if ((v52 & 0x80u) == 0)
                    v53 = v25;
                  else
                    v53 = *(_QWORD *)(v24 + 16);
                  if ((v52 & 0x80u) != 0)
                    v52 = *(_QWORD *)(v24 + 24);
                  *(_QWORD *)v51 = v50;
                  *(_OWORD *)(v51 + 8) = v465;
                  v465 = 0uLL;
                  *(_OWORD *)(v51 + 24) = v466;
                  v466 = 0uLL;
                  *(_QWORD *)(v51 + 40) = v53;
                  *(_QWORD *)(v51 + 48) = v52;
                  *(_BYTE *)(v51 + 56) = 16;
                  v471 = 0;
                  v472[0] = v51;
                  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v23 + 24) + 40))(*(_QWORD *)(v23 + 24), v472);
                  v54 = v472[0];
                  v472[0] = 0;
                  if (v54)
                  {
                    v55 = *(std::__shared_weak_count **)(v54 + 32);
                    if (v55)
                    {
                      v56 = (unint64_t *)&v55->__shared_owners_;
                      do
                        v57 = __ldaxr(v56);
                      while (__stlxr(v57 - 1, v56));
                      if (!v57)
                      {
                        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                        std::__shared_weak_count::__release_weak(v55);
                      }
                    }
                    v58 = *(std::__shared_weak_count **)(v54 + 16);
                    if (v58)
                    {
                      v59 = (unint64_t *)&v58->__shared_owners_;
                      do
                        v60 = __ldaxr(v59);
                      while (__stlxr(v60 - 1, v59));
                      if (!v60)
                      {
                        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                        std::__shared_weak_count::__release_weak(v58);
                      }
                    }
                    MEMORY[0x212BC6398](v54, 0x10F0C40B62ED6C6);
                    v61 = v471;
                    v471 = 0;
                    if (v61)
                    {
                      v62 = *(std::__shared_weak_count **)(v61 + 32);
                      if (v62)
                      {
                        v63 = (unint64_t *)&v62->__shared_owners_;
                        do
                          v64 = __ldaxr(v63);
                        while (__stlxr(v64 - 1, v63));
                        if (!v64)
                        {
                          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                          std::__shared_weak_count::__release_weak(v62);
                        }
                      }
                      v65 = *(std::__shared_weak_count **)(v61 + 16);
                      if (v65)
                      {
                        v66 = (unint64_t *)&v65->__shared_owners_;
                        do
                          v67 = __ldaxr(v66);
                        while (__stlxr(v67 - 1, v66));
                        if (!v67)
                        {
                          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                          std::__shared_weak_count::__release_weak(v65);
                        }
                      }
                      MEMORY[0x212BC6398](v61, 0x10F0C40B62ED6C6);
                    }
                  }
                  v68 = (std::__shared_weak_count *)*((_QWORD *)&v466 + 1);
                  if (*((_QWORD *)&v466 + 1))
                  {
                    v69 = (unint64_t *)(*((_QWORD *)&v466 + 1) + 8);
                    do
                      v70 = __ldaxr(v69);
                    while (__stlxr(v70 - 1, v69));
                    if (!v70)
                    {
                      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                      std::__shared_weak_count::__release_weak(v68);
                    }
                  }
                  v71 = (std::__shared_weak_count *)*((_QWORD *)&v465 + 1);
                  if (*((_QWORD *)&v465 + 1))
                  {
                    v72 = (unint64_t *)(*((_QWORD *)&v465 + 1) + 8);
                    do
                      v73 = __ldaxr(v72);
                    while (__stlxr(v73 - 1, v72));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                      std::__shared_weak_count::__release_weak(v71);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
                  LOWORD(v464) = 0;
                  v74 = (void *)_os_log_send_and_compose_impl();
                  if (v74)
                    free(v74);
                }
                if (v21)
                {
                  sub_20E8C003C((uint64_t)&v454, "[Dynamic Motion Initialization]: Cannot instantiate, camera vision models is empty.");
                  sub_20E863570((uint64_t)&v454);
                }
                sub_20E863570((uint64_t)&v454);
                v75 = v462;
                if (v462)
                {
                  v76 = (unint64_t *)&v462->__shared_owners_;
                  do
                    v77 = __ldaxr(v76);
                  while (__stlxr(v77 - 1, v76));
                  if (!v77)
                  {
                    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                    std::__shared_weak_count::__release_weak(v75);
                  }
                }
                goto LABEL_103;
              }
            }
            memmove(v31, v29, v30);
            goto LABEL_33;
          }
        }
      }
    }
  }
LABEL_103:
  if (!*(_BYTE *)(v435 + 9))
    goto LABEL_196;
  if (*a4 != a4[1])
    goto LABEL_196;
  sub_20F0A1EF4(&v463);
  if (**(int **)(v463 + 56) > 4)
    goto LABEL_196;
  v78 = *(unsigned __int8 *)(v463 + 72);
  v79 = sub_20E8C31DC(v463, "OSLogSurrogateAppender", 1, 0);
  v80 = v79;
  if (!v78 && !v79)
    goto LABEL_196;
  v454 = &v463;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v456 = std::chrono::system_clock::now().__d_.__rep_;
  v457 = 4;
  v458 = "unknown file";
  v459 = 65;
  v461 = 0;
  v462 = 0;
  v460 = "unknown function";
  v81 = *v454;
  v82 = *v454 + 16;
  if (*(char *)(*v454 + 39) < 0)
  {
    v84 = *(const char **)(v81 + 16);
    v83 = *(_QWORD *)(v81 + 24);
  }
  else
  {
    v83 = *(unsigned __int8 *)(*v454 + 39);
    v84 = (const char *)(*v454 + 16);
  }
  v85 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&v464);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v464);
    if ((_BYTE)v466 && SHIBYTE(v465) < 0)
      operator delete(v464);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v86 = byte_254A4A4F8;
  else
    v86 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v87 = byte_254A4A4F8[23];
  else
    v87 = *(_QWORD *)&byte_254A4A4F8[8];
  v464 = os_log_create(v86, v84);
  v88 = &v465;
  if (v87 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v87 >= 0x17)
  {
    v89 = v80;
    v90 = v84;
    v91 = v81;
    v92 = v78;
    v93 = v82;
    v94 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v87 | 7) != 0x17)
      v94 = v87 | 7;
    v95 = v94 + 1;
    v88 = (__int128 *)operator new(v94 + 1);
    *((_QWORD *)&v465 + 1) = v87;
    *(_QWORD *)&v466 = v95 | 0x8000000000000000;
    *(_QWORD *)&v465 = v88;
    v82 = v93;
    v78 = v92;
    v81 = v91;
    v84 = v90;
    v80 = v89;
    goto LABEL_125;
  }
  BYTE7(v466) = v87;
  if (v87)
LABEL_125:
    memmove(v88, v86, v87);
  *((_BYTE *)v88 + v87) = 0;
  BYTE8(v466) = 1;
  v96 = (void **)&v467;
  if (v83 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v83 >= 0x17)
  {
    v97 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v83 | 7) != 0x17)
      v97 = v83 | 7;
    v98 = v97 + 1;
    v96 = (void **)operator new(v97 + 1);
    v468 = v83;
    v469 = v98 | 0x8000000000000000;
    v467 = v96;
  }
  else
  {
    HIBYTE(v469) = v83;
    if (!v83)
      goto LABEL_134;
  }
  memmove(v96, v84, v83);
LABEL_134:
  *((_BYTE *)v96 + v83) = 0;
  v470 = 1;
  v99 = v464;
  if (SHIBYTE(v469) < 0)
    operator delete(v467);
  if (BYTE8(v466) && SBYTE7(v466) < 0)
    operator delete((void *)v465);
  if (v464)
    os_release(v464);
  if (v80 && *(_QWORD *)(v80 + 24))
  {
    v100 = _os_log_pack_size();
    v101 = operator new(v100, (std::align_val_t)8uLL);
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v102;
    v102->__shared_owners_ = 0;
    v104 = (unint64_t *)&v102->__shared_owners_;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
    v464 = v101;
    *(_QWORD *)&v465 = v101;
    *((_QWORD *)&v465 + 1) = v102;
    do
      v105 = __ldxr(v104);
    while (__stxr(v105 + 1, v104));
    v466 = 0uLL;
    v467 = 0;
    do
      v106 = __ldaxr(v104);
    while (__stlxr(v106 - 1, v104));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v103);
    }
    v107 = v464;
    *(_WORD *)_os_log_pack_fill() = 0;
    v108 = operator new();
    v109 = *(unsigned __int8 *)(v81 + 39);
    if ((v109 & 0x80u) == 0)
      v110 = v82;
    else
      v110 = *(_QWORD *)(v81 + 16);
    if ((v109 & 0x80u) != 0)
      v109 = *(_QWORD *)(v81 + 24);
    *(_QWORD *)v108 = v107;
    *(_OWORD *)(v108 + 8) = v465;
    v465 = 0uLL;
    *(_OWORD *)(v108 + 24) = v466;
    v466 = 0uLL;
    *(_QWORD *)(v108 + 40) = v110;
    *(_QWORD *)(v108 + 48) = v109;
    *(_BYTE *)(v108 + 56) = 16;
    v471 = 0;
    v472[0] = v108;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v80 + 24) + 40))(*(_QWORD *)(v80 + 24), v472);
    v111 = v472[0];
    v472[0] = 0;
    if (v111)
    {
      v112 = *(std::__shared_weak_count **)(v111 + 32);
      if (v112)
      {
        v113 = (unint64_t *)&v112->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      v115 = *(std::__shared_weak_count **)(v111 + 16);
      if (v115)
      {
        v116 = (unint64_t *)&v115->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      MEMORY[0x212BC6398](v111, 0x10F0C40B62ED6C6);
      v118 = v471;
      v471 = 0;
      if (v118)
      {
        v119 = *(std::__shared_weak_count **)(v118 + 32);
        if (v119)
        {
          v120 = (unint64_t *)&v119->__shared_owners_;
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
        v122 = *(std::__shared_weak_count **)(v118 + 16);
        if (v122)
        {
          v123 = (unint64_t *)&v122->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        MEMORY[0x212BC6398](v118, 0x10F0C40B62ED6C6);
      }
    }
    v125 = (std::__shared_weak_count *)*((_QWORD *)&v466 + 1);
    if (*((_QWORD *)&v466 + 1))
    {
      v126 = (unint64_t *)(*((_QWORD *)&v466 + 1) + 8);
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    v128 = (std::__shared_weak_count *)*((_QWORD *)&v465 + 1);
    if (*((_QWORD *)&v465 + 1))
    {
      v129 = (unint64_t *)(*((_QWORD *)&v465 + 1) + 8);
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
  }
  else
  {
    os_log_type_enabled(v99, OS_LOG_TYPE_ERROR);
    LOWORD(v464) = 0;
    v131 = (void *)_os_log_send_and_compose_impl();
    if (v131)
      free(v131);
  }
  if (v78)
  {
    sub_20E8C003C((uint64_t)&v454, "[Mono Dynamic Motion Initialization]: Cannot instantiate, camera vision models is empty.");
    sub_20E863570((uint64_t)&v454);
  }
  sub_20E863570((uint64_t)&v454);
  v132 = v462;
  if (v462)
  {
    v133 = (unint64_t *)&v462->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
LABEL_196:
  if (!*v433 || *a4 == a4[1])
    goto LABEL_347;
  v135 = operator new();
  *(_QWORD *)v135 = &off_24C9F88D0;
  sub_20E86B668(v135 + 8, v436);
  v137 = *a4;
  v136 = a4[1];
  v139 = v136 - *a4;
  _ZF = v136 == *a4;
  v140 = v139 >> 5;
  *(_DWORD *)(v135 + 208) = v139 >> 5;
  v141 = 0uLL;
  *(_OWORD *)(v135 + 224) = 0u;
  v447 = (char **)(v135 + 224);
  *(_OWORD *)(v135 + 272) = 0u;
  *(_OWORD *)(v135 + 320) = 0u;
  v451 = (char **)(v135 + 320);
  *(_OWORD *)(v135 + 336) = 0u;
  *(_OWORD *)(v135 + 352) = 0u;
  *(_OWORD *)(v135 + 288) = 0u;
  *(_OWORD *)(v135 + 304) = 0u;
  *(_OWORD *)(v135 + 240) = 0u;
  *(_OWORD *)(v135 + 256) = 0u;
  *(_DWORD *)(v135 + 212) = 0;
  *(_DWORD *)(v135 + 216) = 0;
  v438 = (_DWORD *)(v135 + 208);
  if (_ZF)
  {
    v143 = 0;
  }
  else
  {
    v142 = v139 - 32;
    if (v142 >= 0x100)
    {
      v145 = (v142 >> 5) + 1;
      v146 = v145 & 7;
      if ((v145 & 7) == 0)
        v146 = 8;
      v147 = v145 - v146;
      v144 = v137 + 32 * v147;
      v148 = (const double *)(v137 + 136);
      v149 = 0uLL;
      do
      {
        v150 = v148 - 16;
        v151 = v148 - 8;
        v473 = vld4q_f64(v150);
        v475 = vld4q_f64(v151);
        v152 = v148;
        v477 = vld4q_f64(v152);
        v152 += 8;
        v479 = vld4q_f64(v152);
        v473.val[0] = (float64x2_t)vsubq_s64((int64x2_t)v473.val[1], (int64x2_t)v473.val[0]);
        v473.val[1] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v475.val[1], (int64x2_t)v475.val[0]), 7uLL);
        *(_QWORD *)&v473.val[1].f64[0] = (-991146299 * LODWORD(v473.val[1].f64[0]));
        v473.val[0] = (float64x2_t)vshrq_n_u64((uint64x2_t)v473.val[0], 7uLL);
        v473.val[2] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v477.val[1], (int64x2_t)v477.val[0]), 7uLL);
        *(_QWORD *)&v473.val[2].f64[0] = (-991146299 * LODWORD(v473.val[2].f64[0]));
        *(_QWORD *)&v473.val[2].f64[1] = (-991146299 * LODWORD(v473.val[2].f64[1]));
        *(_QWORD *)&v473.val[1].f64[1] = (-991146299 * LODWORD(v473.val[1].f64[1]));
        *(_QWORD *)&v473.val[0].f64[0] = (-991146299 * LODWORD(v473.val[0].f64[0]));
        v473.val[3] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v479.val[1], (int64x2_t)v479.val[0]), 7uLL);
        *(_QWORD *)&v473.val[0].f64[1] = (-991146299 * LODWORD(v473.val[0].f64[1]));
        *(_QWORD *)&v473.val[3].f64[0] = (-991146299 * LODWORD(v473.val[3].f64[0]));
        *(_QWORD *)&v473.val[3].f64[1] = (-991146299 * LODWORD(v473.val[3].f64[1]));
        v141 = vmaxq_u32(v141, (uint32x4_t)vuzp1q_s32((int32x4_t)v473.val[0], (int32x4_t)v473.val[1]));
        v149 = vmaxq_u32(v149, (uint32x4_t)vuzp1q_s32((int32x4_t)v473.val[2], (int32x4_t)v473.val[3]));
        v148 += 32;
        v147 -= 8;
      }
      while (v147);
      v143 = vmaxvq_u32(vmaxq_u32(v141, v149));
    }
    else
    {
      v143 = 0;
      v144 = v137;
    }
    do
    {
      if (v143 <= -991146299 * ((*(_QWORD *)(v144 + 16) - *(_QWORD *)(v144 + 8)) >> 7))
        v143 = -991146299 * ((*(_QWORD *)(v144 + 16) - *(_QWORD *)(v144 + 8)) >> 7);
      v144 += 32;
    }
    while (v144 != v136);
    *(_DWORD *)(v135 + 212) = v143;
  }
  v449 = (char **)(v135 + 248);
  v440 = (_QWORD *)(v135 + 344);
  v153 = v143 * v140;
  LODWORD(v464) = -1;
  v445 = (uint64_t *)(v135 + 296);
  if ((_DWORD)v153)
  {
    sub_20EDDCBD0(v135 + 296, v153, (const float *)&v464);
    v154 = *(void **)(v135 + 320);
    LODWORD(v140) = *(_DWORD *)(v135 + 208);
    v441 = (_QWORD *)(v135 + 336);
    v155 = *(_QWORD *)(v135 + 336);
    v156 = (*(_DWORD *)(v135 + 212) * v140);
    v157 = (char **)(v135 + 328);
    *(_QWORD *)(v135 + 328) = v154;
    if (v156 > (v155 - (uint64_t)v154) >> 3)
    {
      v158 = (char *)operator new(8 * v156);
      *v451 = v158;
      *v157 = v158;
      *v441 = &v158[8 * v156];
      if (v154)
      {
        operator delete(v154);
        LODWORD(v140) = *v438;
      }
    }
    *(_DWORD *)(v135 + 216) = 0;
    LODWORD(v159) = 0;
    if (!(_DWORD)v140)
      goto LABEL_250;
    goto LABEL_218;
  }
  v157 = (char **)(v135 + 328);
  *(_QWORD *)(v135 + 328) = 0;
  v441 = (_QWORD *)(v135 + 336);
  *(_DWORD *)(v135 + 216) = 0;
  LODWORD(v159) = 0;
  if ((_DWORD)v140)
  {
LABEL_218:
    v160 = 0;
    while (1)
    {
      v161 = -991146299 * ((*(_QWORD *)(*a4 + 32 * v160 + 16) - *(_QWORD *)(*a4 + 32 * v160 + 8)) >> 7);
      if (v161)
        break;
LABEL_220:
      if (++v160 >= (unint64_t)v140)
        goto LABEL_250;
    }
    v162 = 0;
    v163 = *v157;
    while (1)
    {
      *(_DWORD *)(*(_QWORD *)(v135 + 296) + 4 * (v162 + *(_DWORD *)(v135 + 212) * v160)) = v159;
      v164 = *(_QWORD *)(v135 + 336);
      if ((unint64_t)v163 >= v164)
        break;
      *(_DWORD *)v163 = v160;
      *((_DWORD *)v163 + 1) = v162;
      v163 += 8;
LABEL_224:
      *(_QWORD *)(v135 + 328) = v163;
      LODWORD(v159) = *(_DWORD *)(v135 + 216) + 1;
      *(_DWORD *)(v135 + 216) = v159;
      if (++v162 == v161)
      {
        LODWORD(v140) = *v438;
        goto LABEL_220;
      }
    }
    v165 = *v451;
    v166 = v163 - *v451;
    v167 = v166 >> 3;
    v168 = (v166 >> 3) + 1;
    if (v168 >> 61)
      sub_20E92CED8();
    v169 = v164 - (_QWORD)v165;
    if (v169 >> 2 > v168)
      v168 = v169 >> 2;
    if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8)
      v170 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v170 = v168;
    if (v170 >> 61)
      sub_20E877A38();
    v171 = operator new(8 * v170);
    v172 = &v171[8 * v167];
    *v172 = v160;
    v172[1] = v162;
    if (v163 == v165)
    {
      v180 = &v171[8 * v167];
      goto LABEL_244;
    }
    v173 = v163 - v165 - 8;
    if (v173 < 0x168
      || ((v174 = (v163 - 8 - v165) & 0xFFFFFFFFFFFFFFF8,
           v175 = (unint64_t)&v171[v166 - 8],
           v176 = v175 - v174,
           v177 = (unint64_t)&v163[-v174 - 8],
           v176 <= v175)
        ? (v178 = v177 > (unint64_t)(v163 - 8))
        : (v178 = 1),
          v178 || (unint64_t)(&v163[-v166] - v171) < 0x20))
    {
      v179 = v163;
      v180 = &v171[8 * v167];
    }
    else
    {
      v182 = (v173 >> 3) + 1;
      v183 = 8 * (v182 & 0x3FFFFFFFFFFFFFFCLL);
      v179 = &v163[-v183];
      v180 = (char *)&v172[v183 / 0xFFFFFFFFFFFFFFFCLL];
      v184 = &v171[8 * v167 - 16];
      v185 = v163 - 16;
      v186 = v182 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v187 = *(_OWORD *)v185;
        *(v184 - 1) = *((_OWORD *)v185 - 1);
        *v184 = v187;
        v184 -= 2;
        v185 -= 32;
        v186 -= 4;
      }
      while (v186);
      if (v182 == (v182 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_244:
        *v451 = v180;
        v163 = (char *)(v172 + 2);
        *v157 = (char *)(v172 + 2);
        *v441 = &v171[8 * v170];
        if (v165)
          operator delete(v165);
        goto LABEL_224;
      }
    }
    do
    {
      v181 = *((_QWORD *)v179 - 1);
      v179 -= 8;
      *((_QWORD *)v180 - 1) = v181;
      v180 -= 8;
    }
    while (v179 != v165);
    goto LABEL_244;
  }
LABEL_250:
  v159 = v159;
  v188 = *(_QWORD *)(v135 + 224);
  v189 = (*(_QWORD *)(v135 + 232) - v188) >> 7;
  if (v159 <= v189)
  {
    if (v159 < v189)
      *(_QWORD *)(v135 + 232) = v188 + ((unint64_t)v159 << 7);
  }
  else
  {
    sub_20F0AD288(v447, v159 - v189);
    v159 = *(unsigned int *)(v135 + 216);
  }
  v190 = *(_QWORD *)(v135 + 248);
  v191 = 0x4FA4FA4FA4FA4FA5 * ((*(_QWORD *)(v135 + 256) - v190) >> 5);
  if (v159 <= v191)
  {
    if (v159 < v191)
      sub_20F0ADAD0((uint64_t)v449, v190 + 1440 * v159);
  }
  else
  {
    sub_20F0AD424(v449, v159 - v191);
  }
  v192 = *v438;
  if ((_DWORD)v192)
  {
    for (i = 0; i < v192; ++i)
    {
      v194 = -991146299 * ((*(_QWORD *)(*a4 + 32 * i + 16) - *(_QWORD *)(*a4 + 32 * i + 8)) >> 7);
      if ((_DWORD)v194)
      {
        for (j = 0; j != v194; ++j)
        {
          v196 = (j + *(_DWORD *)(v135 + 212) * i);
          v197 = *(_QWORD *)(v135 + 296);
          if (v196 >= (*(_QWORD *)(v135 + 304) - v197) >> 2)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v198 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v198 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v200 = qword_254A6DE40;
              for (k = qword_254A6DE48; v200 != k; v200 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v200)(*(_QWORD *)(v200 + 8), "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
            }
            v201 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v201 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
            v197 = *v445;
          }
          v202 = *(unsigned int *)(v197 + 4 * v196);
          v203 = *(_QWORD *)(*a4 + 32 * i + 8) + 1664 * j;
          v204.f64[0] = *(float64_t *)(v203 + 16);
          v205 = *(int64x2_t *)(v203 + 24);
          _D3 = *(_QWORD *)(v203 + 64);
          v207 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v203, v205);
          v208 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v203, v205);
          v204.f64[1] = *(float64_t *)(v203 + 40);
          v209 = vextq_s8((int8x16_t)v208, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)(v203 + 48), 1), 8uLL);
          _D6 = *(double *)(v203 + 88);
          _Q7 = *(float64x2_t *)(v203 + 72);
          v212 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v207, vnegq_f64(_Q7).f64[0]), v208, _Q7, 1), v204, _D6, 0);
          _D18 = *(_QWORD *)(v203 + 56);
          __asm { FMLS            D16, D18, V7.D[1] }
          _Q7.f64[0] = *(float64_t *)(v203 + 48);
          __asm { FMLS            D16, D3, V6.D[0] }
          *(_QWORD *)&v208.f64[1] = v209.i64[0];
          *((_QWORD *)&_Q16 + 1) = 1.0;
          v219 = &(*v447)[128 * v202];
          *((float64x2_t *)v219 + 4) = v204;
          *((_OWORD *)v219 + 5) = _D3;
          *(float64x2_t *)v219 = v207;
          *((_OWORD *)v219 + 1) = *(unint64_t *)&_Q7.f64[0];
          *((float64x2_t *)v219 + 2) = v208;
          *((_OWORD *)v219 + 3) = v209.u64[1];
          *((float64x2_t *)v219 + 6) = v212;
          *((_OWORD *)v219 + 7) = _Q16;
          v220 = *(_QWORD *)(*a4 + 32 * i + 8) + 1664 * j;
          if (*(_BYTE *)(v220 + 1536))
            v221 = v220 + 96;
          else
            v221 = 0;
          v222 = *v449;
          sub_20E9708B8((uint64_t)&(*v449)[1440 * v202], v221);
          v223 = &v222[1440 * v202];
          *(_OWORD *)(v223 + 1000) = *(_OWORD *)(v221 + 1000);
          memcpy(v223 + 1016, (const void *)(v221 + 1016), 0x1A8uLL);
        }
        v192 = *v438;
      }
    }
  }
  v224 = *(unsigned int *)(v135 + 216);
  v225 = *(_QWORD *)(v135 + 272);
  v226 = (*(_QWORD *)(v135 + 280) - v225) >> 7;
  if (v224 <= v226)
  {
    if (v224 < v226)
      *(_QWORD *)(v135 + 280) = v225 + (v224 << 7);
  }
  else
  {
    sub_20F0AD288((char **)(v135 + 272), v224 - v226);
    LODWORD(v224) = *(_DWORD *)(v135 + 216);
  }
  if ((_DWORD)v224)
  {
    v227 = 0;
    v228 = 0;
    do
    {
      v229 = *(float64x2_t **)(v135 + 224);
      _Q7.f64[0] = v229[v227 + 1].f64[0];
      v231 = v229[v227];
      v232 = v229[v227 + 2];
      v233 = v229[v227 + 4];
      _D6 = v229[v227 + 7].f64[0];
      _Q16 = v229[v227 + 6];
      v236 = v229[1];
      v237 = vmulq_n_f64(*v229, _Q7.f64[0]);
      v238 = vmulq_n_f64(v236, _Q7.f64[0]);
      _Q7.f64[1] = v229[v227 + 3].f64[0];
      v239 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v231, (int64x2_t)v232), vnegq_f64(_Q16).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v231, (int64x2_t)v232), _Q16, 1), _Q7, _D6, 0);
      _Q7.f64[0] = v229[v227 + 5].f64[0];
      _D22 = v229[v227 + 4].f64[1];
      v242 = v229[2];
      v241 = v229[3];
      v244 = v229[4];
      v243 = v229[5];
      v245 = vmlaq_n_f64(vmulq_n_f64(*v229, v231.f64[0]), v242, v232.f64[0]);
      v246 = vmlaq_n_f64(vmulq_n_f64(v236, v231.f64[0]), v241, v232.f64[0]);
      __asm { FMLS            D17, D22, V16.D[1] }
      v248 = vmlaq_laneq_f64(vmulq_laneq_f64(*v229, v231, 1), v242, v232, 1);
      v249 = vmlaq_laneq_f64(vmulq_laneq_f64(v236, v231, 1), v241, v232, 1);
      v251 = v229[6];
      v250 = v229[7];
      __asm { FMLS            D17, D7, V6.D[0] }
      v253 = vaddq_f64(v251, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v229, v239.f64[0]), v242, v239, 1), v244, _D17));
      v254 = (float64x2_t *)(*(_QWORD *)(v135 + 272) + v227 * 16);
      *v254 = vmlaq_f64(vmlaq_n_f64(v245, v244, v233.f64[0]), (float64x2_t)0, v251);
      v254[1] = vmlaq_f64(vmlaq_n_f64(v246, v243, v233.f64[0]), (float64x2_t)0, v250);
      v254[2] = vmlaq_f64(vmlaq_laneq_f64(v248, v244, v233, 1), (float64x2_t)0, v251);
      v254[3] = vmlaq_f64(vmlaq_laneq_f64(v249, v243, v233, 1), (float64x2_t)0, v250);
      v254[4] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v237, v242, _Q7.f64[1]), v244, _Q7.f64[0]), (float64x2_t)0, v251);
      v254[5] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v238, v241, _Q7.f64[1]), v243, _Q7.f64[0]), (float64x2_t)0, v250);
      v254[6] = v253;
      v254[7] = vaddq_f64(v250, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v236, v239.f64[0]), v241, v239, 1), v243, _D17));
      ++v228;
      v255 = *(unsigned int *)(v135 + 216);
      v227 += 8;
    }
    while (v228 < v255);
  }
  else
  {
    LODWORD(v255) = 0;
  }
  v256 = v255;
  LODWORD(v464) = -1;
  v257 = *(_QWORD *)(v135 + 344);
  v258 = (*(_QWORD *)(v135 + 352) - v257) >> 2;
  if (v256 <= v258)
  {
    if (v256 < v258)
      *(_QWORD *)(v135 + 352) = v257 + 4 * v256;
  }
  else
  {
    sub_20EDDCBD0((uint64_t)v440, v256 - v258, (const float *)&v464);
  }
  v259 = *v438;
  if ((_DWORD)v259)
  {
    for (m = 0; m < v259; ++m)
    {
      v261 = *(_QWORD *)(*a4 + 32 * m + 8);
      v442 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(*a4 + 32 * m + 16) - v261) >> 7);
      if ((_DWORD)v442)
      {
        v262 = (*(_DWORD *)(v135 + 212) * m);
        v263 = *(_QWORD *)(v135 + 296);
        if (v262 >= (*(_QWORD *)(v135 + 304) - v263) >> 2)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
LABEL_503:
            abort();
          }
          v263 = *v445;
          v261 = *(_QWORD *)(*a4 + 32 * m + 8);
        }
        if (*(_BYTE *)(v261 + 1592))
        {
          v264 = *(unsigned int *)(v263 + 4 * v262);
          v265 = (*(_DWORD *)(v261 + 1588) + *(_DWORD *)(v135 + 212) * *(_DWORD *)(v261 + 1584));
          if (v265 >= (*(_QWORD *)(v135 + 304) - v263) >> 2)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
LABEL_505:
              abort();
            }
            v263 = *v445;
          }
          *(_DWORD *)(*v440 + 4 * v264) = *(_DWORD *)(v263 + 4 * v265);
        }
        if (v442 != 1)
        {
          for (n = 1; n != v442; ++n)
          {
            v268 = (n + *(_DWORD *)(v135 + 212) * m);
            if (v268 >= (*(_QWORD *)(v135 + 304) - v263) >> 2)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v269 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v269 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v270 = qword_254A6DE40;
                for (ii = qword_254A6DE48; v270 != ii; v270 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v270)(*(_QWORD *)(v270 + 8), "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
              }
              v272 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v272 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                goto LABEL_503;
              qword_254A6DE58(unk_254A6DE60, "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
              v263 = *v445;
            }
            v273 = *(unsigned int *)(v263 + 4 * v268);
            v274 = *(_QWORD *)(*a4 + 32 * m + 8) + 1664 * n;
            if (v442 < 2 || *(_BYTE *)(v274 + 1592))
            {
              if (!*(_BYTE *)(v274 + 1592))
                continue;
              v280 = (*(_DWORD *)(v274 + 1588) + *(_DWORD *)(v135 + 212) * *(_DWORD *)(v274 + 1584));
              if (v280 >= (*(_QWORD *)(v135 + 304) - v263) >> 2)
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_505;
                }
                v263 = *v445;
              }
              v267 = (_DWORD *)(v263 + 4 * v280);
            }
            else
            {
              v275 = (*(_DWORD *)(v135 + 212) * m);
              if (v275 >= (*(_QWORD *)(v135 + 304) - v263) >> 2)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                v276 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v276 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v277 = qword_254A6DE40;
                  for (jj = qword_254A6DE48; v277 != jj; v277 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v277)(*(_QWORD *)(v277 + 8), "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
                }
                v279 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v279 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68)
                  goto LABEL_505;
                qword_254A6DE58(unk_254A6DE60, "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
                v263 = *v445;
              }
              v267 = (_DWORD *)(v263 + 4 * v275);
            }
            *(_DWORD *)(*v440 + 4 * v273) = *v267;
          }
        }
        v259 = *v438;
      }
    }
  }
  *(_DWORD *)(v135 + 368) = 2;
  *(_QWORD *)(v135 + 384) = 0;
  *(_QWORD *)(v135 + 392) = 0;
  *(_QWORD *)(v135 + 376) = 0;
  v281 = operator new(0x90uLL);
  *(_QWORD *)(v135 + 384) = v281 + 9;
  *(_QWORD *)(v135 + 392) = v281 + 9;
  *v281 = 0u;
  v281[1] = 0u;
  v281[2] = 0u;
  v281[3] = 0u;
  v281[4] = 0u;
  v281[5] = 0u;
  v281[6] = 0u;
  v281[7] = 0u;
  v281[8] = 0u;
  *(_QWORD *)(v135 + 376) = v281;
  *(_OWORD *)(v135 + 400) = 0u;
  *(_OWORD *)(v135 + 416) = 0u;
  *(_OWORD *)(v135 + 432) = 0u;
  v282 = operator new(0x48uLL);
  *v282 = 0u;
  v282[1] = 0u;
  v282[2] = 0u;
  v282[3] = 0u;
  *((_QWORD *)v282 + 8) = 0;
  *(_QWORD *)(v135 + 424) = v282;
  *(_QWORD *)(v135 + 432) = (char *)v282 + 72;
  *(_QWORD *)(v135 + 440) = (char *)v282 + 72;
  *(_QWORD *)(v135 + 448) = 0;
  *(_QWORD *)(v135 + 456) = 0;
  *(_QWORD *)(v135 + 464) = 0;
  *(_QWORD *)(v135 + 1288) = 0;
  *(_QWORD *)(v135 + 1304) = 0;
  *(_QWORD *)(v135 + 1296) = 0;
  *(_QWORD *)(v135 + 472) = 0x3FF0000000000000;
  *(_OWORD *)(v135 + 480) = 0u;
  *(_OWORD *)(v135 + 496) = 0u;
  *(_QWORD *)(v135 + 512) = 0x3FF0000000000000;
  *(_OWORD *)(v135 + 520) = 0u;
  *(_OWORD *)(v135 + 536) = 0u;
  *(_QWORD *)(v135 + 552) = 0x3FF0000000000000;
  *(_OWORD *)(v135 + 560) = 0u;
  *(_OWORD *)(v135 + 576) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v135 + 608) = 0u;
  *(_OWORD *)(v135 + 624) = 0u;
  *(_OWORD *)(v135 + 592) = _Q0;
  *(_QWORD *)(v135 + 640) = 0x3FF0000000000000;
  *(_OWORD *)(v135 + 648) = 0u;
  *(_OWORD *)(v135 + 664) = 0u;
  *(_QWORD *)(v135 + 680) = 0x3FF0000000000000;
  *(_OWORD *)(v135 + 688) = 0u;
  *(_OWORD *)(v135 + 704) = 0u;
  *(_OWORD *)(v135 + 720) = _Q0;
  *(_OWORD *)(v135 + 736) = 0u;
  *(_OWORD *)(v135 + 752) = 0u;
  *(_QWORD *)(v135 + 768) = 0x3FF0000000000000;
  *(_OWORD *)(v135 + 776) = 0u;
  *(_OWORD *)(v135 + 792) = 0u;
  *(_QWORD *)(v135 + 808) = 0x3FF0000000000000;
  *(_OWORD *)(v135 + 816) = 0u;
  *(_OWORD *)(v135 + 832) = 0u;
  *(_OWORD *)(v135 + 848) = _Q0;
  *(_QWORD *)(v135 + 872) = 0;
  *(_QWORD *)(v135 + 864) = 0;
  *(_QWORD *)(v135 + 880) = 0;
  *(_QWORD *)(v135 + 888) = 0x3FF0000000000000;
  *(_QWORD *)(v135 + 904) = 0;
  *(_QWORD *)(v135 + 896) = 0;
  *(_QWORD *)(v135 + 912) = 0;
  *(_QWORD *)(v135 + 920) = 0x3FF0000000000000;
  *(_QWORD *)(v135 + 928) = 0x3FF0000000000000;
  *(_QWORD *)(v135 + 944) = 0;
  *(_QWORD *)(v135 + 936) = 0;
  *(_QWORD *)(v135 + 952) = 0;
  *(_QWORD *)(v135 + 960) = 0x3FF0000000000000;
  *(_QWORD *)(v135 + 976) = 0;
  *(_QWORD *)(v135 + 968) = 0;
  *(_QWORD *)(v135 + 984) = 0;
  *(_OWORD *)(v135 + 992) = _Q0;
  *(_QWORD *)(v135 + 1016) = 0;
  *(_QWORD *)(v135 + 1008) = 0;
  *(_QWORD *)(v135 + 1024) = 0;
  *(_QWORD *)(v135 + 1032) = 0x3FF0000000000000;
  *(_QWORD *)(v135 + 1048) = 0;
  *(_QWORD *)(v135 + 1040) = 0;
  *(_QWORD *)(v135 + 1056) = 0;
  *(_QWORD *)(v135 + 1064) = 0x3FF0000000000000;
  *(_QWORD *)(v135 + 1072) = 0x3FF0000000000000;
  *(_QWORD *)(v135 + 1088) = 0;
  *(_QWORD *)(v135 + 1080) = 0;
  *(_QWORD *)(v135 + 1096) = 0;
  *(_QWORD *)(v135 + 1104) = 0x3FF0000000000000;
  *(_QWORD *)(v135 + 1120) = 0;
  *(_QWORD *)(v135 + 1112) = 0;
  *(_QWORD *)(v135 + 1128) = 0;
  *(_OWORD *)(v135 + 1136) = _Q0;
  *(_QWORD *)(v135 + 1160) = 0;
  *(_QWORD *)(v135 + 1152) = 0;
  *(_QWORD *)(v135 + 1168) = 0;
  *(_QWORD *)(v135 + 1176) = 0x3FF0000000000000;
  *(_QWORD *)(v135 + 1192) = 0;
  *(_QWORD *)(v135 + 1184) = 0;
  *(_QWORD *)(v135 + 1200) = 0;
  *(_QWORD *)(v135 + 1208) = 0x3FF0000000000000;
  *(_QWORD *)(v135 + 1216) = 0x3FF0000000000000;
  *(_QWORD *)(v135 + 1232) = 0;
  *(_QWORD *)(v135 + 1224) = 0;
  *(_QWORD *)(v135 + 1240) = 0;
  *(_QWORD *)(v135 + 1248) = 0x3FF0000000000000;
  *(_QWORD *)(v135 + 1264) = 0;
  *(_QWORD *)(v135 + 1256) = 0;
  *(_QWORD *)(v135 + 1272) = 0;
  *(_QWORD *)(v135 + 1280) = 0x3FF0000000000000;
  v284 = *(_QWORD *)(v435 + 3376);
  *(_QWORD *)(v435 + 3376) = v135;
  if (v284)
    (*(void (**)(uint64_t))(*(_QWORD *)v284 + 8))(v284);
LABEL_347:
  if (!*(_BYTE *)(v435 + 9) || *a4 == a4[1])
    return v435;
  v285 = operator new();
  *(_QWORD *)v285 = &off_24C9F8900;
  sub_20E86B668(v285 + 8, v436);
  v287 = *a4;
  v286 = a4[1];
  v288 = v286 - *a4;
  _ZF = v286 == *a4;
  v289 = v288 >> 5;
  *(_DWORD *)(v285 + 208) = v288 >> 5;
  v290 = 0uLL;
  *(_OWORD *)(v285 + 224) = 0u;
  v448 = (char **)(v285 + 224);
  *(_OWORD *)(v285 + 272) = 0u;
  *(_OWORD *)(v285 + 320) = 0u;
  v452 = (char **)(v285 + 320);
  *(_OWORD *)(v285 + 336) = 0u;
  *(_OWORD *)(v285 + 352) = 0u;
  *(_OWORD *)(v285 + 288) = 0u;
  *(_OWORD *)(v285 + 304) = 0u;
  *(_OWORD *)(v285 + 240) = 0u;
  *(_OWORD *)(v285 + 256) = 0u;
  *(_DWORD *)(v285 + 212) = 0;
  *(_DWORD *)(v285 + 216) = 0;
  v437 = (_DWORD *)(v285 + 208);
  if (_ZF)
  {
    v292 = 0;
  }
  else
  {
    v291 = v288 - 32;
    if (v291 >= 0x100)
    {
      v294 = (v291 >> 5) + 1;
      v295 = v294 & 7;
      if ((v294 & 7) == 0)
        v295 = 8;
      v296 = v294 - v295;
      v293 = v287 + 32 * v296;
      v297 = (const double *)(v287 + 136);
      v298 = 0uLL;
      do
      {
        v299 = v297 - 16;
        v300 = v297 - 8;
        v474 = vld4q_f64(v299);
        v476 = vld4q_f64(v300);
        v301 = v297;
        v478 = vld4q_f64(v301);
        v301 += 8;
        v480 = vld4q_f64(v301);
        v474.val[0] = (float64x2_t)vsubq_s64((int64x2_t)v474.val[1], (int64x2_t)v474.val[0]);
        v474.val[1] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v476.val[1], (int64x2_t)v476.val[0]), 7uLL);
        *(_QWORD *)&v474.val[1].f64[0] = (-991146299 * LODWORD(v474.val[1].f64[0]));
        v474.val[0] = (float64x2_t)vshrq_n_u64((uint64x2_t)v474.val[0], 7uLL);
        v474.val[2] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v478.val[1], (int64x2_t)v478.val[0]), 7uLL);
        *(_QWORD *)&v474.val[2].f64[0] = (-991146299 * LODWORD(v474.val[2].f64[0]));
        *(_QWORD *)&v474.val[2].f64[1] = (-991146299 * LODWORD(v474.val[2].f64[1]));
        *(_QWORD *)&v474.val[1].f64[1] = (-991146299 * LODWORD(v474.val[1].f64[1]));
        *(_QWORD *)&v474.val[0].f64[0] = (-991146299 * LODWORD(v474.val[0].f64[0]));
        v474.val[3] = (float64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64((int64x2_t)v480.val[1], (int64x2_t)v480.val[0]), 7uLL);
        *(_QWORD *)&v474.val[0].f64[1] = (-991146299 * LODWORD(v474.val[0].f64[1]));
        *(_QWORD *)&v474.val[3].f64[0] = (-991146299 * LODWORD(v474.val[3].f64[0]));
        *(_QWORD *)&v474.val[3].f64[1] = (-991146299 * LODWORD(v474.val[3].f64[1]));
        v290 = vmaxq_u32(v290, (uint32x4_t)vuzp1q_s32((int32x4_t)v474.val[0], (int32x4_t)v474.val[1]));
        v298 = vmaxq_u32(v298, (uint32x4_t)vuzp1q_s32((int32x4_t)v474.val[2], (int32x4_t)v474.val[3]));
        v297 += 32;
        v296 -= 8;
      }
      while (v296);
      v292 = vmaxvq_u32(vmaxq_u32(v290, v298));
    }
    else
    {
      v292 = 0;
      v293 = v287;
    }
    do
    {
      if (v292 <= -991146299 * ((*(_QWORD *)(v293 + 16) - *(_QWORD *)(v293 + 8)) >> 7))
        v292 = -991146299 * ((*(_QWORD *)(v293 + 16) - *(_QWORD *)(v293 + 8)) >> 7);
      v293 += 32;
    }
    while (v293 != v286);
    *(_DWORD *)(v285 + 212) = v292;
  }
  v450 = (char **)(v285 + 248);
  v439 = (_QWORD *)(v285 + 344);
  v302 = v292 * v289;
  LODWORD(v464) = -1;
  if (!(_DWORD)v302)
  {
    v306 = (char **)(v285 + 328);
    *(_QWORD *)(v285 + 328) = 0;
    v443 = (_QWORD *)(v285 + 336);
    v446 = (uint64_t *)(v285 + 296);
    *(_DWORD *)(v285 + 216) = 0;
    LODWORD(v308) = 0;
    if (!(_DWORD)v289)
      goto LABEL_401;
    goto LABEL_369;
  }
  sub_20EDDCBD0(v285 + 296, v302, (const float *)&v464);
  v303 = *(void **)(v285 + 320);
  LODWORD(v289) = *(_DWORD *)(v285 + 208);
  v443 = (_QWORD *)(v285 + 336);
  v304 = *(_QWORD *)(v285 + 336);
  v305 = (*(_DWORD *)(v285 + 212) * v289);
  v306 = (char **)(v285 + 328);
  *(_QWORD *)(v285 + 328) = v303;
  if (v305 > (v304 - (uint64_t)v303) >> 3)
  {
    v307 = (char *)operator new(8 * v305);
    *v452 = v307;
    *v306 = v307;
    *v443 = &v307[8 * v305];
    if (v303)
    {
      operator delete(v303);
      LODWORD(v289) = *v437;
    }
  }
  *(_DWORD *)(v285 + 216) = 0;
  v446 = (uint64_t *)(v285 + 296);
  LODWORD(v308) = 0;
  if ((_DWORD)v289)
  {
LABEL_369:
    v309 = 0;
    while (1)
    {
      v310 = -991146299 * ((*(_QWORD *)(*a4 + 32 * v309 + 16) - *(_QWORD *)(*a4 + 32 * v309 + 8)) >> 7);
      if (v310)
        break;
LABEL_371:
      if (++v309 >= (unint64_t)v289)
        goto LABEL_401;
    }
    v311 = 0;
    v312 = *v306;
    while (1)
    {
      *(_DWORD *)(*(_QWORD *)(v285 + 296) + 4 * (v311 + *(_DWORD *)(v285 + 212) * v309)) = v308;
      v313 = *(_QWORD *)(v285 + 336);
      if ((unint64_t)v312 >= v313)
        break;
      *(_DWORD *)v312 = v309;
      *((_DWORD *)v312 + 1) = v311;
      v312 += 8;
LABEL_375:
      *(_QWORD *)(v285 + 328) = v312;
      LODWORD(v308) = *(_DWORD *)(v285 + 216) + 1;
      *(_DWORD *)(v285 + 216) = v308;
      if (++v311 == v310)
      {
        LODWORD(v289) = *v437;
        goto LABEL_371;
      }
    }
    v314 = *v452;
    v315 = v312 - *v452;
    v316 = v315 >> 3;
    v317 = (v315 >> 3) + 1;
    if (v317 >> 61)
      sub_20E92CED8();
    v318 = v313 - (_QWORD)v314;
    if (v318 >> 2 > v317)
      v317 = v318 >> 2;
    if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFF8)
      v319 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v319 = v317;
    if (v319 >> 61)
      sub_20E877A38();
    v320 = operator new(8 * v319);
    v321 = &v320[8 * v316];
    *v321 = v309;
    v321[1] = v311;
    if (v312 == v314)
    {
      v329 = &v320[8 * v316];
      goto LABEL_395;
    }
    v322 = v312 - v314 - 8;
    if (v322 < 0x168
      || ((v323 = (v312 - 8 - v314) & 0xFFFFFFFFFFFFFFF8,
           v324 = (unint64_t)&v320[v315 - 8],
           v325 = v324 - v323,
           v326 = (unint64_t)&v312[-v323 - 8],
           v325 <= v324)
        ? (v327 = v326 > (unint64_t)(v312 - 8))
        : (v327 = 1),
          v327 || (unint64_t)(&v312[-v315] - v320) < 0x20))
    {
      v328 = v312;
      v329 = &v320[8 * v316];
    }
    else
    {
      v331 = (v322 >> 3) + 1;
      v332 = 8 * (v331 & 0x3FFFFFFFFFFFFFFCLL);
      v328 = &v312[-v332];
      v329 = (char *)&v321[v332 / 0xFFFFFFFFFFFFFFFCLL];
      v333 = &v320[8 * v316 - 16];
      v334 = v312 - 16;
      v335 = v331 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v336 = *(_OWORD *)v334;
        *(v333 - 1) = *((_OWORD *)v334 - 1);
        *v333 = v336;
        v333 -= 2;
        v334 -= 32;
        v335 -= 4;
      }
      while (v335);
      if (v331 == (v331 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_395:
        *v452 = v329;
        v312 = (char *)(v321 + 2);
        *v306 = (char *)(v321 + 2);
        *v443 = &v320[8 * v319];
        if (v314)
          operator delete(v314);
        goto LABEL_375;
      }
    }
    do
    {
      v330 = *((_QWORD *)v328 - 1);
      v328 -= 8;
      *((_QWORD *)v329 - 1) = v330;
      v329 -= 8;
    }
    while (v328 != v314);
    goto LABEL_395;
  }
LABEL_401:
  v308 = v308;
  v337 = *(_QWORD *)(v285 + 224);
  v338 = (*(_QWORD *)(v285 + 232) - v337) >> 7;
  if (v308 <= v338)
  {
    if (v308 < v338)
      *(_QWORD *)(v285 + 232) = v337 + ((unint64_t)v308 << 7);
  }
  else
  {
    sub_20F0AD288(v448, v308 - v338);
    v308 = *(unsigned int *)(v285 + 216);
  }
  v339 = *(_QWORD *)(v285 + 248);
  v340 = 0x4FA4FA4FA4FA4FA5 * ((*(_QWORD *)(v285 + 256) - v339) >> 5);
  if (v308 <= v340)
  {
    if (v308 < v340)
      sub_20F0ADAD0((uint64_t)v450, v339 + 1440 * v308);
  }
  else
  {
    sub_20F0AD424(v450, v308 - v340);
  }
  v341 = *v437;
  if ((_DWORD)v341)
  {
    for (kk = 0; kk < v341; ++kk)
    {
      v343 = -991146299 * ((*(_QWORD *)(*a4 + 32 * kk + 16) - *(_QWORD *)(*a4 + 32 * kk + 8)) >> 7);
      if ((_DWORD)v343)
      {
        for (mm = 0; mm != v343; ++mm)
        {
          v345 = (mm + *(_DWORD *)(v285 + 212) * kk);
          v346 = *(_QWORD *)(v285 + 296);
          if (v345 >= (*(_QWORD *)(v285 + 304) - v346) >> 2)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v347 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v347 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v349 = qword_254A6DE40;
              for (nn = qword_254A6DE48; v349 != nn; v349 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v349)(*(_QWORD *)(v349 + 8), "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
            }
            v350 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v350 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
            v346 = *v446;
          }
          v351 = *(unsigned int *)(v346 + 4 * v345);
          v352 = *(_QWORD *)(*a4 + 32 * kk + 8) + 1664 * mm;
          v353.f64[0] = *(float64_t *)(v352 + 16);
          v354 = *(int64x2_t *)(v352 + 24);
          _D3 = *(_QWORD *)(v352 + 64);
          v356 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v352, v354);
          v357 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v352, v354);
          v353.f64[1] = *(float64_t *)(v352 + 40);
          v358 = vextq_s8((int8x16_t)v357, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)(v352 + 48), 1), 8uLL);
          _D6 = *(double *)(v352 + 88);
          _Q7 = *(float64x2_t *)(v352 + 72);
          v361 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v356, vnegq_f64(_Q7).f64[0]), v357, _Q7, 1), v353, _D6, 0);
          _D18 = *(_QWORD *)(v352 + 56);
          __asm { FMLS            D16, D18, V7.D[1] }
          _Q7.f64[0] = *(float64_t *)(v352 + 48);
          __asm { FMLS            D16, D3, V6.D[0] }
          *(_QWORD *)&v357.f64[1] = v358.i64[0];
          *((_QWORD *)&_Q16 + 1) = 1.0;
          v365 = &(*v448)[128 * v351];
          *((float64x2_t *)v365 + 4) = v353;
          *((_OWORD *)v365 + 5) = _D3;
          *(float64x2_t *)v365 = v356;
          *((_OWORD *)v365 + 1) = *(unint64_t *)&_Q7.f64[0];
          *((float64x2_t *)v365 + 2) = v357;
          *((_OWORD *)v365 + 3) = v358.u64[1];
          *((float64x2_t *)v365 + 6) = v361;
          *((_OWORD *)v365 + 7) = _Q16;
          v366 = *(_QWORD *)(*a4 + 32 * kk + 8) + 1664 * mm;
          if (*(_BYTE *)(v366 + 1536))
            v367 = v366 + 96;
          else
            v367 = 0;
          v368 = *v450;
          sub_20E9708B8((uint64_t)&(*v450)[1440 * v351], v367);
          v369 = &v368[1440 * v351];
          *(_OWORD *)(v369 + 1000) = *(_OWORD *)(v367 + 1000);
          memcpy(v369 + 1016, (const void *)(v367 + 1016), 0x1A8uLL);
        }
        v341 = *v437;
      }
    }
  }
  v370 = *(unsigned int *)(v285 + 216);
  v371 = *(_QWORD *)(v285 + 272);
  v372 = (*(_QWORD *)(v285 + 280) - v371) >> 7;
  if (v370 <= v372)
  {
    if (v370 < v372)
      *(_QWORD *)(v285 + 280) = v371 + (v370 << 7);
    v373 = v446;
    if (!(_DWORD)v370)
      goto LABEL_434;
LABEL_438:
    v375 = 0;
    v376 = 0;
    do
    {
      v377 = *(float64x2_t **)(v285 + 224);
      _Q7.f64[0] = v377[v375 + 1].f64[0];
      v379 = v377[v375];
      v380 = v377[v375 + 2];
      v381 = v377[v375 + 4];
      _D6 = v377[v375 + 7].f64[0];
      _Q16 = v377[v375 + 6];
      v384 = v377[1];
      v385 = vmulq_n_f64(*v377, _Q7.f64[0]);
      v386 = vmulq_n_f64(v384, _Q7.f64[0]);
      _Q7.f64[1] = v377[v375 + 3].f64[0];
      v387 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v379, (int64x2_t)v380), vnegq_f64(_Q16).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v379, (int64x2_t)v380), _Q16, 1), _Q7, _D6, 0);
      _Q7.f64[0] = v377[v375 + 5].f64[0];
      _D22 = v377[v375 + 4].f64[1];
      v390 = v377[2];
      v389 = v377[3];
      v392 = v377[4];
      v391 = v377[5];
      v393 = vmlaq_n_f64(vmulq_n_f64(*v377, v379.f64[0]), v390, v380.f64[0]);
      v394 = vmlaq_n_f64(vmulq_n_f64(v384, v379.f64[0]), v389, v380.f64[0]);
      __asm { FMLS            D17, D22, V16.D[1] }
      v396 = vmlaq_laneq_f64(vmulq_laneq_f64(*v377, v379, 1), v390, v380, 1);
      v397 = vmlaq_laneq_f64(vmulq_laneq_f64(v384, v379, 1), v389, v380, 1);
      v399 = v377[6];
      v398 = v377[7];
      __asm { FMLS            D17, D7, V6.D[0] }
      v401 = vaddq_f64(v399, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v377, v387.f64[0]), v390, v387, 1), v392, _D17));
      v402 = (float64x2_t *)(*(_QWORD *)(v285 + 272) + v375 * 16);
      *v402 = vmlaq_f64(vmlaq_n_f64(v393, v392, v381.f64[0]), (float64x2_t)0, v399);
      v402[1] = vmlaq_f64(vmlaq_n_f64(v394, v391, v381.f64[0]), (float64x2_t)0, v398);
      v402[2] = vmlaq_f64(vmlaq_laneq_f64(v396, v392, v381, 1), (float64x2_t)0, v399);
      v402[3] = vmlaq_f64(vmlaq_laneq_f64(v397, v391, v381, 1), (float64x2_t)0, v398);
      v402[4] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v385, v390, _Q7.f64[1]), v392, _Q7.f64[0]), (float64x2_t)0, v399);
      v402[5] = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v386, v389, _Q7.f64[1]), v391, _Q7.f64[0]), (float64x2_t)0, v398);
      v402[6] = v401;
      v402[7] = vaddq_f64(v398, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v384, v387.f64[0]), v389, v387, 1), v391, _D17));
      ++v376;
      v374 = *(unsigned int *)(v285 + 216);
      v375 += 8;
    }
    while (v376 < v374);
    goto LABEL_440;
  }
  v373 = v446;
  sub_20F0AD288((char **)(v285 + 272), v370 - v372);
  if (*(_DWORD *)(v285 + 216))
    goto LABEL_438;
LABEL_434:
  LODWORD(v374) = 0;
LABEL_440:
  v403 = v374;
  LODWORD(v464) = -1;
  v404 = *(_QWORD *)(v285 + 344);
  v405 = (*(_QWORD *)(v285 + 352) - v404) >> 2;
  if (v403 <= v405)
  {
    if (v403 < v405)
      *(_QWORD *)(v285 + 352) = v404 + 4 * v403;
  }
  else
  {
    sub_20EDDCBD0((uint64_t)v439, v403 - v405, (const float *)&v464);
  }
  v406 = *v437;
  if ((_DWORD)v406)
  {
    v407 = 0;
    v408 = "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitia"
           "lizationUtils.hpp";
    do
    {
      v409 = *(_QWORD *)(*a4 + 32 * v407 + 8);
      v444 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(*a4 + 32 * v407 + 16) - v409) >> 7);
      if ((_DWORD)v444)
      {
        v410 = (*(_DWORD *)(v285 + 212) * v407);
        v411 = *(_QWORD *)(v285 + 296);
        if (v410 >= (*(_QWORD *)(v285 + 304) - v411) >> 2)
        {
          if (sub_21023D5B4(v408, 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
LABEL_504:
            abort();
          }
          v411 = *v373;
          v409 = *(_QWORD *)(*a4 + 32 * v407 + 8);
        }
        if (*(_BYTE *)(v409 + 1592))
        {
          v412 = *(unsigned int *)(v411 + 4 * v410);
          v413 = (*(_DWORD *)(v409 + 1588) + *(_DWORD *)(v285 + 212) * *(_DWORD *)(v409 + 1584));
          if (v413 >= (*(_QWORD *)(v285 + 304) - v411) >> 2)
          {
            if (sub_21023D5B4(v408, 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
LABEL_506:
              abort();
            }
            v411 = *v373;
          }
          *(_DWORD *)(*v439 + 4 * v412) = *(_DWORD *)(v411 + 4 * v413);
        }
        if (v444 != 1)
        {
          v414 = 1;
          while (1)
          {
            v415 = (v414 + *(_DWORD *)(v285 + 212) * v407);
            if (v415 >= (*(_QWORD *)(v285 + 304) - v411) >> 2)
            {
              sub_21023D70C(v408, 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v416 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v416 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v417 = qword_254A6DE40;
                for (i1 = qword_254A6DE48; v417 != i1; v417 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v417)(*(_QWORD *)(v417 + 8), "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
              }
              v419 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v419 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              v373 = v446;
              if (!byte_254A6DE68)
                goto LABEL_504;
              qword_254A6DE58(unk_254A6DE60, "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
              v411 = *v446;
            }
            v420 = *(unsigned int *)(v411 + 4 * v415);
            v421 = *(_QWORD *)(*a4 + 32 * v407 + 8) + 1664 * v414;
            if (v444 >= 2 && !*(_BYTE *)(v421 + 1592))
              break;
            if (!*(_BYTE *)(v421 + 1592))
              goto LABEL_461;
            v422 = (*(_DWORD *)(v421 + 1588) + *(_DWORD *)(v285 + 212) * *(_DWORD *)(v421 + 1584));
            if (v422 >= (*(_QWORD *)(v285 + 304) - v411) >> 2)
            {
              if (sub_21023D5B4(v408, 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_506;
              }
LABEL_459:
              v411 = *v373;
            }
LABEL_460:
            *(_DWORD *)(*v439 + 4 * v420) = *(_DWORD *)(v411 + 4 * v422);
LABEL_461:
            if (++v414 == v444)
              goto LABEL_446;
          }
          v422 = (*(_DWORD *)(v285 + 212) * v407);
          if (v422 < (*(_QWORD *)(v285 + 304) - v411) >> 2)
            goto LABEL_460;
          sub_21023D70C(v408, 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v423 = v408;
          v424 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v424 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v425 = qword_254A6DE40;
            for (i2 = qword_254A6DE48; v425 != i2; v425 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v425)(*(_QWORD *)(v425 + 8), "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
          }
          v427 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v427 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          v373 = v446;
          v408 = v423;
          if (!byte_254A6DE68)
            goto LABEL_506;
          qword_254A6DE58(unk_254A6DE60, "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
          goto LABEL_459;
        }
LABEL_446:
        v406 = *v437;
      }
      ++v407;
    }
    while (v407 < v406);
  }
  *(_DWORD *)(v285 + 368) = 2;
  *(_QWORD *)(v285 + 384) = 0;
  *(_QWORD *)(v285 + 392) = 0;
  *(_QWORD *)(v285 + 376) = 0;
  v428 = operator new(0xC0uLL);
  *(_QWORD *)(v285 + 384) = v428 + 12;
  *(_QWORD *)(v285 + 392) = v428 + 12;
  *v428 = 0u;
  v428[1] = 0u;
  v428[2] = 0u;
  v428[3] = 0u;
  v428[4] = 0u;
  v428[5] = 0u;
  v428[6] = 0u;
  v428[7] = 0u;
  v428[8] = 0u;
  v428[9] = 0u;
  v428[10] = 0u;
  v428[11] = 0u;
  *(_QWORD *)(v285 + 376) = v428;
  *(_OWORD *)(v285 + 400) = 0u;
  *(_OWORD *)(v285 + 416) = 0u;
  *(_OWORD *)(v285 + 432) = 0u;
  v429 = operator new(0x60uLL);
  *v429 = 0u;
  v429[1] = 0u;
  v429[2] = 0u;
  v429[3] = 0u;
  v429[4] = 0u;
  v429[5] = 0u;
  *(_QWORD *)(v285 + 424) = v429;
  *(_QWORD *)(v285 + 432) = v429 + 6;
  *(_QWORD *)(v285 + 440) = v429 + 6;
  *(_QWORD *)(v285 + 448) = 0;
  *(_QWORD *)(v285 + 456) = 0;
  *(_QWORD *)(v285 + 464) = 0;
  *(_QWORD *)(v285 + 1560) = 0;
  *(_QWORD *)(v285 + 1576) = 0;
  *(_QWORD *)(v285 + 1568) = 0;
  *(_QWORD *)(v285 + 472) = 0x3FF0000000000000;
  *(_OWORD *)(v285 + 480) = 0u;
  *(_OWORD *)(v285 + 496) = 0u;
  *(_QWORD *)(v285 + 512) = 0x3FF0000000000000;
  *(_OWORD *)(v285 + 520) = 0u;
  *(_OWORD *)(v285 + 536) = 0u;
  *(_QWORD *)(v285 + 552) = 0x3FF0000000000000;
  *(_OWORD *)(v285 + 560) = 0u;
  *(_OWORD *)(v285 + 576) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v285 + 608) = 0u;
  *(_OWORD *)(v285 + 624) = 0u;
  *(_OWORD *)(v285 + 592) = _Q0;
  *(_QWORD *)(v285 + 640) = 0x3FF0000000000000;
  *(_OWORD *)(v285 + 648) = 0u;
  *(_OWORD *)(v285 + 664) = 0u;
  *(_QWORD *)(v285 + 680) = 0x3FF0000000000000;
  *(_OWORD *)(v285 + 688) = 0u;
  *(_OWORD *)(v285 + 704) = 0u;
  *(_OWORD *)(v285 + 720) = _Q0;
  *(_OWORD *)(v285 + 736) = 0u;
  *(_OWORD *)(v285 + 752) = 0u;
  *(_QWORD *)(v285 + 768) = 0x3FF0000000000000;
  *(_OWORD *)(v285 + 776) = 0u;
  *(_OWORD *)(v285 + 792) = 0u;
  *(_QWORD *)(v285 + 808) = 0x3FF0000000000000;
  *(_OWORD *)(v285 + 816) = 0u;
  *(_OWORD *)(v285 + 832) = 0u;
  *(_OWORD *)(v285 + 864) = 0u;
  *(_OWORD *)(v285 + 880) = 0u;
  *(_OWORD *)(v285 + 848) = _Q0;
  *(_QWORD *)(v285 + 896) = 0x3FF0000000000000;
  *(_OWORD *)(v285 + 904) = 0u;
  *(_OWORD *)(v285 + 920) = 0u;
  *(_QWORD *)(v285 + 936) = 0x3FF0000000000000;
  *(_OWORD *)(v285 + 944) = 0u;
  *(_OWORD *)(v285 + 960) = 0u;
  *(_OWORD *)(v285 + 976) = _Q0;
  *(_QWORD *)(v285 + 1000) = 0;
  *(_QWORD *)(v285 + 992) = 0;
  *(_QWORD *)(v285 + 1008) = 0;
  *(_QWORD *)(v285 + 1016) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1032) = 0;
  *(_QWORD *)(v285 + 1024) = 0;
  *(_QWORD *)(v285 + 1040) = 0;
  *(_QWORD *)(v285 + 1048) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1056) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1072) = 0;
  *(_QWORD *)(v285 + 1064) = 0;
  *(_QWORD *)(v285 + 1080) = 0;
  *(_QWORD *)(v285 + 1088) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1104) = 0;
  *(_QWORD *)(v285 + 1096) = 0;
  *(_QWORD *)(v285 + 1112) = 0;
  *(_OWORD *)(v285 + 1120) = _Q0;
  *(_QWORD *)(v285 + 1144) = 0;
  *(_QWORD *)(v285 + 1136) = 0;
  *(_QWORD *)(v285 + 1152) = 0;
  *(_QWORD *)(v285 + 1160) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1176) = 0;
  *(_QWORD *)(v285 + 1168) = 0;
  *(_QWORD *)(v285 + 1184) = 0;
  *(_QWORD *)(v285 + 1192) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1200) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1216) = 0;
  *(_QWORD *)(v285 + 1208) = 0;
  *(_QWORD *)(v285 + 1224) = 0;
  *(_QWORD *)(v285 + 1232) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1248) = 0;
  *(_QWORD *)(v285 + 1240) = 0;
  *(_QWORD *)(v285 + 1256) = 0;
  *(_OWORD *)(v285 + 1264) = _Q0;
  *(_QWORD *)(v285 + 1288) = 0;
  *(_QWORD *)(v285 + 1280) = 0;
  *(_QWORD *)(v285 + 1296) = 0;
  *(_QWORD *)(v285 + 1304) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1320) = 0;
  *(_QWORD *)(v285 + 1312) = 0;
  *(_QWORD *)(v285 + 1328) = 0;
  *(_QWORD *)(v285 + 1336) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1344) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1360) = 0;
  *(_QWORD *)(v285 + 1352) = 0;
  *(_QWORD *)(v285 + 1368) = 0;
  *(_QWORD *)(v285 + 1376) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1392) = 0;
  *(_QWORD *)(v285 + 1384) = 0;
  *(_QWORD *)(v285 + 1400) = 0;
  *(_OWORD *)(v285 + 1408) = _Q0;
  *(_QWORD *)(v285 + 1432) = 0;
  *(_QWORD *)(v285 + 1424) = 0;
  *(_QWORD *)(v285 + 1440) = 0;
  *(_QWORD *)(v285 + 1448) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1464) = 0;
  *(_QWORD *)(v285 + 1456) = 0;
  *(_QWORD *)(v285 + 1472) = 0;
  *(_QWORD *)(v285 + 1480) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1488) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1504) = 0;
  *(_QWORD *)(v285 + 1496) = 0;
  *(_QWORD *)(v285 + 1512) = 0;
  *(_QWORD *)(v285 + 1520) = 0x3FF0000000000000;
  *(_QWORD *)(v285 + 1536) = 0;
  *(_QWORD *)(v285 + 1528) = 0;
  *(_QWORD *)(v285 + 1544) = 0;
  *(_QWORD *)(v285 + 1552) = 0x3FF0000000000000;
  v431 = *(_QWORD *)(v435 + 3384);
  *(_QWORD *)(v435 + 3384) = v285;
  if (v431)
    (*(void (**)(uint64_t))(*(_QWORD *)v431 + 8))(v431);
  return v435;
}

void sub_20F0A1994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  va_list va;

  va_start(va, a17);
  if (*(_BYTE *)(v17 - 152) && *(char *)(v17 - 153) < 0)
    operator delete(*(void **)(v17 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  v19 = *(_QWORD *)(a8 + 3384);
  *(_QWORD *)(a8 + 3384) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(a8 + 3376);
  *(_QWORD *)(a8 + 3376) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  sub_20F0A1EA0(a7);
  sub_20F0AE188(a8 + 2640);
  sub_20E869EA0(a6);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F0A1EA0(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 2344);
    if (v3)
    {
      *(_QWORD *)(v2 + 2352) = v3;
      operator delete(v3);
    }
    MEMORY[0x212BC6398](v2, 0x1020C408F16D7D3);
  }
  return a1;
}

void sub_20F0A1EF4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A61F98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A61F98))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A61F90);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A61F98);
  }
  *a1 = qword_254A61F90;
}

void sub_20F0A1F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A61F98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A61F98);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F0A1FE8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &off_24C9F88A0;
  v2 = a1[423];
  a1[423] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[422];
  a1[422] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[421];
  a1[421] = 0;
  if (v4)
  {
    v5 = *(void **)(v4 + 2344);
    if (v5)
    {
      *(_QWORD *)(v4 + 2352) = v5;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v4, 0x1020C408F16D7D3);
  }
  sub_20F0AE188((uint64_t)(a1 + 330));
  sub_20E869EA0((uint64_t)(a1 + 1));
  return a1;
}

void sub_20F0A2088(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &off_24C9F88A0;
  v2 = a1[423];
  a1[423] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[422];
  a1[422] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[421];
  a1[421] = 0;
  if (v4)
  {
    v5 = *(void **)(v4 + 2344);
    if (v5)
    {
      *(_QWORD *)(v4 + 2352) = v5;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v4, 0x1020C408F16D7D3);
  }
  sub_20F0AE188((uint64_t)(a1 + 330));
  sub_20E869EA0((uint64_t)(a1 + 1));
  JUMPOUT(0x212BC6398);
}

void sub_20F0A2138(uint64_t a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  size_t v8;
  const char *v9;
  uint64_t v10;
  double *v11;
  _QWORD *v12;
  unsigned __int8 v13;
  const char *v14;
  size_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  double *v60;
  double *v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  size_t v71;
  const char *v72;
  unsigned __int8 v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v81;
  size_t v82;
  const char *v83;
  unsigned __int8 v84;
  const char *v85;
  size_t v86;
  _BYTE *v87;
  unint64_t v88;
  const char *v89;
  int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  void **v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  size_t v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  void *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  __int128 v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  int64x2_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float64x2_t *v148;
  float64_t *v149;
  double v150;
  float64x2_t v151;
  double v153;
  double v160;
  double v161;
  double v162;
  int8x16_t v165;
  float64x2_t v166;
  double v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  double v171;
  float64x2_t v172;
  double v173;
  double v174;
  __double2 v175;
  __double2 v176;
  __int128 v177;
  __int128 v179;
  double v180;
  float64x2_t v182;
  float64x2_t v183;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  int8x16_t v189;
  double v190;
  float64x2_t v191;
  double cosval;
  double sinval;
  int64x2_t v194;
  double v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  double v200;
  float64x2_t v201;
  float64x2_t v202;
  double v203;
  float64x2_t v204;
  double *v205;
  float64x2_t v206;
  float64x2_t v207;
  int8x16_t v208;
  double v209;
  int64x2_t v210;
  int64x2_t v211;
  double v212;
  double v213;
  double v214;
  float64x2_t v215;
  double v216;
  float64x2_t v217;
  float64x2_t v218;
  double v219;
  float64x2_t v220;
  double v221;
  unsigned __int8 v222;
  const char *v223;
  size_t v224;
  _BYTE *v225;
  unint64_t v226;
  const char *v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  void **v232;
  uint64_t v233;
  uint64_t v234;
  NSObject *v235;
  size_t v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  void *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  double v272;
  double v273;
  double v274;
  __double2 v275;
  __double2 v276;
  __double2 v277;
  int v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  size_t v283;
  const char *v284;
  unsigned __int8 v285;
  const char *v286;
  size_t v287;
  _BYTE *v288;
  unint64_t v289;
  const char *v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void **v296;
  uint64_t v297;
  uint64_t v298;
  NSObject *v299;
  size_t v300;
  std::__shared_weak_count_vtbl *v301;
  std::__shared_weak_count *v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  void *v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  double v335;
  double v336;
  double *v337;
  uint64_t v338;
  float64x2_t v339;
  uint64_t v340;
  float64x2_t v341;
  double v342;
  double v343;
  _QWORD *v344;
  uint64_t v345;
  float64x2_t v346;
  long double v347;
  const char *__src;
  uint64_t __srca;
  void *__srcb[2];
  long double __srcc;
  long double __srcd;
  uint64_t __srce;
  uint64_t *v354;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v356;
  int v357;
  const char *v358;
  int v359;
  const char *v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _BYTE v366[24];
  __int128 v367;
  void **v368;
  size_t v369;
  unint64_t v370;
  char v371;
  uint64_t v372;

  v372 = *MEMORY[0x24BDAC8D0];
  sub_20F0A1EF4(&v363);
  if (**(int **)(v363 + 56) > 3)
    goto LABEL_90;
  v4 = *(unsigned __int8 *)(v363 + 72);
  v5 = sub_20E8C31DC(v363, "OSLogSurrogateAppender", 1, 0);
  v6 = v5;
  if (!v4 && v5 == 0)
    goto LABEL_90;
  v354 = &v363;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v356 = std::chrono::system_clock::now().__d_.__rep_;
  v357 = 3;
  v358 = "unknown file";
  v359 = 168;
  v361 = 0;
  v362 = 0;
  v360 = "unknown function";
  v340 = v363;
  if (*(char *)(v363 + 39) < 0)
  {
    v9 = *(const char **)(v363 + 16);
    v8 = *(_QWORD *)(v363 + 24);
  }
  else
  {
    v8 = *(unsigned __int8 *)(v363 + 39);
    v9 = (const char *)(v363 + 16);
  }
  v338 = v363 + 16;
  v344 = a2;
  v12 = a2;
  v11 = (double *)*a2;
  v10 = v12[1];
  v13 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v366);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v366);
    if ((_BYTE)v367 && (v366[23] & 0x80000000) != 0)
      operator delete(*(void **)v366);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v14 = byte_254A4A4F8;
  else
    v14 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v15 = byte_254A4A4F8[23];
  else
    v15 = *(_QWORD *)&byte_254A4A4F8[8];
  __src = v9;
  *(_QWORD *)v366 = os_log_create(v14, v9);
  v16 = &v366[8];
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15 >= 0x17)
  {
    v337 = v11;
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    *(_QWORD *)&v366[16] = v15;
    *(_QWORD *)&v367 = v18 | 0x8000000000000000;
    *(_QWORD *)&v366[8] = v16;
    v11 = v337;
    goto LABEL_23;
  }
  BYTE7(v367) = v15;
  if (v15)
LABEL_23:
    memmove(v16, v14, v15);
  v16[v15] = 0;
  BYTE8(v367) = 1;
  v19 = (void **)&v368;
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v8 >= 0x17)
  {
    v21 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v21 = v8 | 7;
    v22 = v21 + 1;
    v19 = (void **)operator new(v21 + 1);
    v369 = v8;
    v370 = v22 | 0x8000000000000000;
    v368 = v19;
  }
  else
  {
    HIBYTE(v370) = v8;
    if (!v8)
    {
      LOBYTE(v368) = 0;
      v371 = 1;
      v20 = *(NSObject **)v366;
      if ((SHIBYTE(v370) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  memmove(v19, __src, v8);
  *((_BYTE *)v19 + v8) = 0;
  v371 = 1;
  v20 = *(NSObject **)v366;
  if ((SHIBYTE(v370) & 0x80000000) == 0)
  {
LABEL_28:
    if (!BYTE8(v367))
      goto LABEL_37;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v368);
  if (!BYTE8(v367))
    goto LABEL_37;
LABEL_35:
  if (SBYTE7(v367) < 0)
    operator delete(*(void **)&v366[8]);
LABEL_37:
  if (*(_QWORD *)v366)
    os_release(*(void **)v366);
  v23 = 0x6DB6DB6DB6DB6DB7 * ((v10 - (uint64_t)v11) >> 3);
  if (v6 && *(_QWORD *)(v6 + 24))
  {
    v24 = _os_log_pack_size();
    a2 = v344;
    v25 = (std::__shared_weak_count_vtbl *)operator new(v24, (std::align_val_t)8uLL);
    v26 = (std::__shared_weak_count *)operator new();
    v27 = v26;
    v26->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v26->__shared_weak_owners_ = 0;
    v26[1].__vftable = v25;
    *(_QWORD *)v366 = v25;
    *(_QWORD *)&v366[8] = v25;
    *(_QWORD *)&v366[16] = v26;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    v367 = 0uLL;
    v368 = 0;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v27);
    }
    v31 = *(_QWORD *)v366;
    v32 = _os_log_pack_fill();
    *(_DWORD *)v32 = 134217984;
    *(_QWORD *)(v32 + 4) = v23;
    v33 = operator new();
    v34 = *(unsigned __int8 *)(v340 + 39);
    v35 = v338;
    if ((v34 & 0x80u) != 0)
    {
      v35 = *(_QWORD *)(v340 + 16);
      v34 = *(_QWORD *)(v340 + 24);
    }
    *(_QWORD *)v33 = v31;
    *(_OWORD *)(v33 + 8) = *(_OWORD *)&v366[8];
    *(_OWORD *)&v366[8] = 0uLL;
    *(_OWORD *)(v33 + 24) = v367;
    v367 = 0uLL;
    *(_QWORD *)(v33 + 40) = v35;
    *(_QWORD *)(v33 + 48) = v34;
    *(_BYTE *)(v33 + 56) = 1;
    v364 = 0;
    v365 = v33;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v365);
    v36 = v365;
    v365 = 0;
    if (v36)
    {
      v37 = *(std::__shared_weak_count **)(v36 + 32);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = *(std::__shared_weak_count **)(v36 + 16);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MEMORY[0x212BC6398](v36, 0x10F0C40B62ED6C6);
      v43 = v364;
      v364 = 0;
      if (v43)
      {
        v44 = *(std::__shared_weak_count **)(v43 + 32);
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = *(std::__shared_weak_count **)(v43 + 16);
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        MEMORY[0x212BC6398](v43, 0x10F0C40B62ED6C6);
      }
    }
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v367 + 1);
    if (*((_QWORD *)&v367 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v367 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = *(std::__shared_weak_count **)&v366[16];
    if (*(_QWORD *)&v366[16])
    {
      v54 = (unint64_t *)(*(_QWORD *)&v366[16] + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
  else
  {
    os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
    *(_DWORD *)v366 = 134217984;
    *(_QWORD *)&v366[4] = 0x6DB6DB6DB6DB6DB7 * ((v10 - (uint64_t)v11) >> 3);
    v56 = (void *)_os_log_send_and_compose_impl();
    a2 = v344;
    if (v56)
      free(v56);
  }
  if (v4)
  {
    sub_20E8C003C((uint64_t)&v354, "Processing %zu IMU measurements", 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 3));
    sub_20E863570((uint64_t)&v354);
  }
  sub_20E863570((uint64_t)&v354);
  v57 = v362;
  if (v362)
  {
    v58 = (unint64_t *)&v362->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
      v61 = (double *)*a2;
      v60 = (double *)a2[1];
      if ((double *)*a2 == v60)
        goto LABEL_195;
      goto LABEL_91;
    }
  }
LABEL_90:
  v61 = (double *)*a2;
  v60 = (double *)a2[1];
  if ((double *)*a2 == v60)
    goto LABEL_195;
LABEL_91:
  if (!*(_BYTE *)(a1 + 216))
  {
    do
    {
      v74 = (uint64_t)(v61 + 1);
      v76 = *v61;
      v75 = (uint64_t)(v61 + 4);
      sub_20F11451C(*(_QWORD *)(a1 + 3368), v74, v75, v76, 0.0);
      v61 = (double *)(v75 + 24);
    }
    while (v61 != v60);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3368) + 93))
    {
      sub_20F0A1EF4(&v363);
      if (**(int **)(v363 + 56) > 3)
        goto LABEL_296;
      v77 = *(unsigned __int8 *)(v363 + 72);
      v78 = sub_20E8C31DC(v363, "OSLogSurrogateAppender", 1, 0);
      v79 = v78;
      if (!v77 && v78 == 0)
        goto LABEL_296;
      v354 = &v363;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v356 = std::chrono::system_clock::now().__d_.__rep_;
      v357 = 3;
      v358 = "unknown file";
      v359 = 116;
      v361 = 0;
      v362 = 0;
      v360 = "unknown function";
      v81 = *v354;
      if (*(char *)(*v354 + 39) < 0)
      {
        v83 = *(const char **)(v81 + 16);
        v82 = *(_QWORD *)(v81 + 24);
      }
      else
      {
        v82 = *(unsigned __int8 *)(*v354 + 39);
        v83 = (const char *)(*v354 + 16);
      }
      __srce = *v354 + 16;
      v222 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v222 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v366);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v366);
        if ((_BYTE)v367 && (v366[23] & 0x80000000) != 0)
          operator delete(*(void **)v366);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v223 = byte_254A4A4F8;
      else
        v223 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v224 = byte_254A4A4F8[23];
      else
        v224 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v366 = os_log_create(v223, v83);
      v225 = &v366[8];
      if (v224 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v224 >= 0x17)
      {
        v226 = v79;
        v227 = v83;
        v228 = v81;
        v229 = v77;
        v230 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v224 | 7) != 0x17)
          v230 = v224 | 7;
        v231 = v230 + 1;
        v225 = operator new(v230 + 1);
        *(_QWORD *)&v366[16] = v224;
        *(_QWORD *)&v367 = v231 | 0x8000000000000000;
        *(_QWORD *)&v366[8] = v225;
        v77 = v229;
        v81 = v228;
        v83 = v227;
        v79 = v226;
      }
      else
      {
        BYTE7(v367) = v224;
        if (!v224)
        {
LABEL_229:
          v225[v224] = 0;
          BYTE8(v367) = 1;
          v232 = (void **)&v368;
          if (v82 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v82 >= 0x17)
          {
            v233 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v82 | 7) != 0x17)
              v233 = v82 | 7;
            v234 = v233 + 1;
            v232 = (void **)operator new(v233 + 1);
            v369 = v82;
            v370 = v234 | 0x8000000000000000;
            v368 = v232;
          }
          else
          {
            HIBYTE(v370) = v82;
            if (!v82)
              goto LABEL_237;
          }
          memmove(v232, v83, v82);
LABEL_237:
          *((_BYTE *)v232 + v82) = 0;
          v371 = 1;
          v235 = *(NSObject **)v366;
          if (SHIBYTE(v370) < 0)
            operator delete(v368);
          if (BYTE8(v367) && SBYTE7(v367) < 0)
            operator delete(*(void **)&v366[8]);
          if (*(_QWORD *)v366)
            os_release(*(void **)v366);
          if (v79 && *(_QWORD *)(v79 + 24))
          {
            v236 = _os_log_pack_size();
            v237 = (std::__shared_weak_count_vtbl *)operator new(v236, (std::align_val_t)8uLL);
            v238 = (std::__shared_weak_count *)operator new();
            v239 = v238;
            v238->__shared_owners_ = 0;
            v240 = (unint64_t *)&v238->__shared_owners_;
            v238->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v238->__shared_weak_owners_ = 0;
            v238[1].__vftable = v237;
            *(_QWORD *)v366 = v237;
            *(_QWORD *)&v366[8] = v237;
            *(_QWORD *)&v366[16] = v238;
            do
              v241 = __ldxr(v240);
            while (__stxr(v241 + 1, v240));
            v367 = 0uLL;
            v368 = 0;
            do
              v242 = __ldaxr(v240);
            while (__stlxr(v242 - 1, v240));
            if (!v242)
            {
              ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
              std::__shared_weak_count::__release_weak(v239);
            }
            v243 = *(_QWORD *)v366;
            *(_WORD *)_os_log_pack_fill() = 0;
            v244 = operator new();
            v245 = *(unsigned __int8 *)(v81 + 39);
            v246 = __srce;
            if ((v245 & 0x80u) != 0)
            {
              v246 = *(_QWORD *)(v81 + 16);
              v245 = *(_QWORD *)(v81 + 24);
            }
            *(_QWORD *)v244 = v243;
            *(_OWORD *)(v244 + 8) = *(_OWORD *)&v366[8];
            *(_OWORD *)&v366[8] = 0uLL;
            *(_OWORD *)(v244 + 24) = v367;
            v367 = 0uLL;
            *(_QWORD *)(v244 + 40) = v246;
            *(_QWORD *)(v244 + 48) = v245;
            *(_BYTE *)(v244 + 56) = 1;
            v364 = 0;
            v365 = v244;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v79 + 24) + 40))(*(_QWORD *)(v79 + 24), &v365);
            v247 = v365;
            v365 = 0;
            if (v247)
            {
              v248 = *(std::__shared_weak_count **)(v247 + 32);
              if (v248)
              {
                v249 = (unint64_t *)&v248->__shared_owners_;
                do
                  v250 = __ldaxr(v249);
                while (__stlxr(v250 - 1, v249));
                if (!v250)
                {
                  ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                  std::__shared_weak_count::__release_weak(v248);
                }
              }
              v251 = *(std::__shared_weak_count **)(v247 + 16);
              if (v251)
              {
                v252 = (unint64_t *)&v251->__shared_owners_;
                do
                  v253 = __ldaxr(v252);
                while (__stlxr(v253 - 1, v252));
                if (!v253)
                {
                  ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                  std::__shared_weak_count::__release_weak(v251);
                }
              }
              MEMORY[0x212BC6398](v247, 0x10F0C40B62ED6C6);
              v254 = v364;
              v364 = 0;
              if (v254)
              {
                v255 = *(std::__shared_weak_count **)(v254 + 32);
                if (v255)
                {
                  v256 = (unint64_t *)&v255->__shared_owners_;
                  do
                    v257 = __ldaxr(v256);
                  while (__stlxr(v257 - 1, v256));
                  if (!v257)
                  {
                    ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                    std::__shared_weak_count::__release_weak(v255);
                  }
                }
                v258 = *(std::__shared_weak_count **)(v254 + 16);
                if (v258)
                {
                  v259 = (unint64_t *)&v258->__shared_owners_;
                  do
                    v260 = __ldaxr(v259);
                  while (__stlxr(v260 - 1, v259));
                  if (!v260)
                  {
                    ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                    std::__shared_weak_count::__release_weak(v258);
                  }
                }
                MEMORY[0x212BC6398](v254, 0x10F0C40B62ED6C6);
              }
            }
            v261 = (std::__shared_weak_count *)*((_QWORD *)&v367 + 1);
            if (*((_QWORD *)&v367 + 1))
            {
              v262 = (unint64_t *)(*((_QWORD *)&v367 + 1) + 8);
              do
                v263 = __ldaxr(v262);
              while (__stlxr(v263 - 1, v262));
              if (!v263)
              {
                ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                std::__shared_weak_count::__release_weak(v261);
              }
            }
            v264 = *(std::__shared_weak_count **)&v366[16];
            if (*(_QWORD *)&v366[16])
            {
              v265 = (unint64_t *)(*(_QWORD *)&v366[16] + 8);
              do
                v266 = __ldaxr(v265);
              while (__stlxr(v266 - 1, v265));
              if (!v266)
              {
                ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                std::__shared_weak_count::__release_weak(v264);
              }
            }
          }
          else
          {
            os_log_type_enabled(v235, OS_LOG_TYPE_INFO);
            *(_WORD *)v366 = 0;
            v267 = (void *)_os_log_send_and_compose_impl();
            if (v267)
              free(v267);
          }
          if (v77)
          {
            sub_20E8C003C((uint64_t)&v354, "Using Stationary initialization.");
            sub_20E863570((uint64_t)&v354);
          }
          sub_20E863570((uint64_t)&v354);
          v268 = v362;
          if (v362)
          {
            v269 = (unint64_t *)&v362->__shared_owners_;
            do
              v270 = __ldaxr(v269);
            while (__stlxr(v270 - 1, v269));
            if (!v270)
            {
              ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
              std::__shared_weak_count::__release_weak(v268);
            }
          }
LABEL_296:
          v271 = *(_QWORD *)(a1 + 3368);
          *(_QWORD *)(a1 + 496) = *(_QWORD *)(v271 + 360);
          *(_QWORD *)(a1 + 504) = *(_QWORD *)(v271 + 368);
          __srcd = *(double *)(v271 + 376);
          *(long double *)(a1 + 512) = __srcd;
          *(_QWORD *)(a1 + 520) = *(_QWORD *)(v271 + 384);
          *(_QWORD *)(a1 + 528) = *(_QWORD *)(v271 + 392);
          v343 = *(double *)(v271 + 400);
          *(double *)(a1 + 536) = v343;
          *(_QWORD *)(a1 + 544) = *(_QWORD *)(v271 + 408);
          *(_QWORD *)(a1 + 552) = *(_QWORD *)(v271 + 416);
          v347 = *(double *)(v271 + 424);
          *(long double *)(a1 + 560) = v347;
          *(_QWORD *)(a1 + 568) = *(_QWORD *)(v271 + 432);
          *(_QWORD *)(a1 + 576) = *(_QWORD *)(v271 + 440);
          *(_QWORD *)(a1 + 584) = *(_QWORD *)(v271 + 448);
          *(_QWORD *)(a1 + 592) = *(_QWORD *)(v271 + 456);
          *(_QWORD *)(a1 + 600) = *(_QWORD *)(v271 + 464);
          *(_QWORD *)(a1 + 608) = *(_QWORD *)(v271 + 472);
          *(_QWORD *)(a1 + 616) = *(_QWORD *)(v271 + 480);
          *(_QWORD *)(a1 + 624) = *(_QWORD *)(v271 + 488);
          *(_QWORD *)(a1 + 632) = *(_QWORD *)(v271 + 496);
          *(_QWORD *)(a1 + 640) = *(_QWORD *)(v271 + 504);
          *(_QWORD *)(a1 + 648) = *(_QWORD *)(v271 + 512);
          *(_QWORD *)(a1 + 656) = *(_QWORD *)(v271 + 520);
          memmove((void *)(a1 + 664), (const void *)(v271 + 528), 0x708uLL);
          *(_BYTE *)(a1 + 489) = 1;
          if (!*(_BYTE *)(a1 + 2632))
            return;
LABEL_297:
          v272 = atan2(-v343, v347);
          v273 = asin(__srcd);
          v274 = atan2(-*(double *)(a1 + 2472), *(long double *)(a1 + 2464));
          v275 = __sincos_stret(v272);
          v276 = __sincos_stret(v273);
          v277 = __sincos_stret(v274);
          *(double *)(a1 + 496) = v276.__cosval * v277.__cosval;
          *(double *)(a1 + 504) = -(v276.__cosval * v277.__sinval);
          *(double *)(a1 + 512) = v276.__sinval;
          *(double *)(a1 + 520) = v275.__cosval * v277.__sinval + v276.__sinval * (v275.__sinval * v277.__cosval);
          *(double *)(a1 + 528) = v275.__cosval * v277.__cosval - v275.__sinval * v276.__sinval * v277.__sinval;
          *(double *)(a1 + 536) = -(v276.__cosval * v275.__sinval);
          *(double *)(a1 + 544) = v275.__sinval * v277.__sinval - v276.__sinval * (v275.__cosval * v277.__cosval);
          *(double *)(a1 + 552) = v275.__cosval * v276.__sinval * v277.__sinval + v275.__sinval * v277.__cosval;
          *(double *)(a1 + 560) = v275.__cosval * v276.__cosval;
          *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 2608);
          *(_QWORD *)(a1 + 656) = *(_QWORD *)(a1 + 2624);
          if (*(_BYTE *)(a1 + 481))
          {
            *(_QWORD *)(a1 + 568) = *(_QWORD *)(a1 + 2536);
            *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 2544);
            *(_QWORD *)(a1 + 616) = *(_QWORD *)(a1 + 2584);
            *(_OWORD *)(a1 + 624) = *(_OWORD *)(a1 + 2592);
          }
          *(_BYTE *)(a1 + 2632) = 0;
          sub_20F0A1EF4(&v363);
          if (**(int **)(v363 + 56) > 3)
            return;
          v278 = *(unsigned __int8 *)(v363 + 72);
          v279 = sub_20E8C31DC(v363, "OSLogSurrogateAppender", 1, 0);
          v280 = v279;
          if (!v278 && !v279)
            return;
          v354 = &v363;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v356 = std::chrono::system_clock::now().__d_.__rep_;
          v357 = 3;
          v358 = "unknown file";
          v359 = 173;
          v361 = 0;
          v362 = 0;
          v360 = "unknown function";
          v281 = *v354;
          v282 = *v354 + 16;
          if (*(char *)(*v354 + 39) < 0)
          {
            v284 = *(const char **)(v281 + 16);
            v283 = *(_QWORD *)(v281 + 24);
          }
          else
          {
            v283 = *(unsigned __int8 *)(*v354 + 39);
            v284 = (const char *)(*v354 + 16);
          }
          v285 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v285 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v366);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v366);
            if ((_BYTE)v367 && (v366[23] & 0x80000000) != 0)
              operator delete(*(void **)v366);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v286 = byte_254A4A4F8;
          else
            v286 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v287 = byte_254A4A4F8[23];
          else
            v287 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v366 = os_log_create(v286, v284);
          v288 = &v366[8];
          if (v287 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v287 >= 0x17)
          {
            v289 = v280;
            v290 = v284;
            v291 = v281;
            v292 = v278;
            v293 = v282;
            v294 = (v287 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v287 | 7) != 0x17)
              v294 = v287 | 7;
            v295 = v294 + 1;
            v288 = operator new(v294 + 1);
            *(_QWORD *)&v366[16] = v287;
            *(_QWORD *)&v367 = v295 | 0x8000000000000000;
            *(_QWORD *)&v366[8] = v288;
            v282 = v293;
            v278 = v292;
            v281 = v291;
            v284 = v290;
            v280 = v289;
          }
          else
          {
            BYTE7(v367) = v287;
            if (!v287)
            {
LABEL_320:
              v288[v287] = 0;
              BYTE8(v367) = 1;
              v296 = (void **)&v368;
              if (v283 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v283 >= 0x17)
              {
                v297 = (v283 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v283 | 7) != 0x17)
                  v297 = v283 | 7;
                v298 = v297 + 1;
                v296 = (void **)operator new(v297 + 1);
                v369 = v283;
                v370 = v298 | 0x8000000000000000;
                v368 = v296;
              }
              else
              {
                HIBYTE(v370) = v283;
                if (!v283)
                  goto LABEL_328;
              }
              memmove(v296, v284, v283);
LABEL_328:
              *((_BYTE *)v296 + v283) = 0;
              v371 = 1;
              v299 = *(NSObject **)v366;
              if (SHIBYTE(v370) < 0)
                operator delete(v368);
              if (BYTE8(v367) && SBYTE7(v367) < 0)
                operator delete(*(void **)&v366[8]);
              if (*(_QWORD *)v366)
                os_release(*(void **)v366);
              if (v280 && *(_QWORD *)(v280 + 24))
              {
                v300 = _os_log_pack_size();
                v301 = (std::__shared_weak_count_vtbl *)operator new(v300, (std::align_val_t)8uLL);
                v302 = (std::__shared_weak_count *)operator new();
                v303 = v302;
                v302->__shared_owners_ = 0;
                v304 = (unint64_t *)&v302->__shared_owners_;
                v302->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v302->__shared_weak_owners_ = 0;
                v302[1].__vftable = v301;
                *(_QWORD *)v366 = v301;
                *(_QWORD *)&v366[8] = v301;
                *(_QWORD *)&v366[16] = v302;
                do
                  v305 = __ldxr(v304);
                while (__stxr(v305 + 1, v304));
                v367 = 0uLL;
                v368 = 0;
                do
                  v306 = __ldaxr(v304);
                while (__stlxr(v306 - 1, v304));
                if (!v306)
                {
                  ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                  std::__shared_weak_count::__release_weak(v303);
                }
                v307 = *(_QWORD *)v366;
                *(_WORD *)_os_log_pack_fill() = 0;
                v308 = operator new();
                v309 = *(unsigned __int8 *)(v281 + 39);
                if ((v309 & 0x80u) == 0)
                  v310 = v282;
                else
                  v310 = *(_QWORD *)(v281 + 16);
                if ((v309 & 0x80u) != 0)
                  v309 = *(_QWORD *)(v281 + 24);
                *(_QWORD *)v308 = v307;
                *(_OWORD *)(v308 + 8) = *(_OWORD *)&v366[8];
                *(_OWORD *)&v366[8] = 0uLL;
                *(_OWORD *)(v308 + 24) = v367;
                v367 = 0uLL;
                *(_QWORD *)(v308 + 40) = v310;
                *(_QWORD *)(v308 + 48) = v309;
                *(_BYTE *)(v308 + 56) = 1;
                v364 = 0;
                v365 = v308;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v280 + 24) + 40))(*(_QWORD *)(v280 + 24), &v365);
                v311 = v365;
                v365 = 0;
                if (v311)
                {
                  v312 = *(std::__shared_weak_count **)(v311 + 32);
                  if (v312)
                  {
                    v313 = (unint64_t *)&v312->__shared_owners_;
                    do
                      v314 = __ldaxr(v313);
                    while (__stlxr(v314 - 1, v313));
                    if (!v314)
                    {
                      ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                      std::__shared_weak_count::__release_weak(v312);
                    }
                  }
                  v315 = *(std::__shared_weak_count **)(v311 + 16);
                  if (v315)
                  {
                    v316 = (unint64_t *)&v315->__shared_owners_;
                    do
                      v317 = __ldaxr(v316);
                    while (__stlxr(v317 - 1, v316));
                    if (!v317)
                    {
                      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
                      std::__shared_weak_count::__release_weak(v315);
                    }
                  }
                  MEMORY[0x212BC6398](v311, 0x10F0C40B62ED6C6);
                  v318 = v364;
                  v364 = 0;
                  if (v318)
                  {
                    v319 = *(std::__shared_weak_count **)(v318 + 32);
                    if (v319)
                    {
                      v320 = (unint64_t *)&v319->__shared_owners_;
                      do
                        v321 = __ldaxr(v320);
                      while (__stlxr(v321 - 1, v320));
                      if (!v321)
                      {
                        ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                        std::__shared_weak_count::__release_weak(v319);
                      }
                    }
                    v322 = *(std::__shared_weak_count **)(v318 + 16);
                    if (v322)
                    {
                      v323 = (unint64_t *)&v322->__shared_owners_;
                      do
                        v324 = __ldaxr(v323);
                      while (__stlxr(v324 - 1, v323));
                      if (!v324)
                      {
                        ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                        std::__shared_weak_count::__release_weak(v322);
                      }
                    }
                    MEMORY[0x212BC6398](v318, 0x10F0C40B62ED6C6);
                  }
                }
                v325 = (std::__shared_weak_count *)*((_QWORD *)&v367 + 1);
                if (*((_QWORD *)&v367 + 1))
                {
                  v326 = (unint64_t *)(*((_QWORD *)&v367 + 1) + 8);
                  do
                    v327 = __ldaxr(v326);
                  while (__stlxr(v327 - 1, v326));
                  if (!v327)
                  {
                    ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                    std::__shared_weak_count::__release_weak(v325);
                  }
                }
                v328 = *(std::__shared_weak_count **)&v366[16];
                if (*(_QWORD *)&v366[16])
                {
                  v329 = (unint64_t *)(*(_QWORD *)&v366[16] + 8);
                  do
                    v330 = __ldaxr(v329);
                  while (__stlxr(v330 - 1, v329));
                  if (!v330)
                  {
                    ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                    std::__shared_weak_count::__release_weak(v328);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v299, OS_LOG_TYPE_INFO);
                *(_WORD *)v366 = 0;
                v331 = (void *)_os_log_send_and_compose_impl();
                if (v331)
                  free(v331);
              }
              if (v278)
              {
                sub_20E8C003C((uint64_t)&v354, "Modified the initial state from prior.");
                sub_20E863570((uint64_t)&v354);
              }
              sub_20E863570((uint64_t)&v354);
              v332 = v362;
              if (v362)
              {
                v333 = (unint64_t *)&v362->__shared_owners_;
                do
                  v334 = __ldaxr(v333);
                while (__stlxr(v334 - 1, v333));
                if (!v334)
                {
                  ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
                  std::__shared_weak_count::__release_weak(v332);
                }
              }
              return;
            }
          }
          memmove(v288, v286, v287);
          goto LABEL_320;
        }
      }
      memmove(v225, v223, v224);
      goto LABEL_229;
    }
LABEL_195:
    *(_BYTE *)(a1 + 489) = 0;
    return;
  }
  sub_20F0A1EF4(&v363);
  if (**(int **)(v363 + 56) > 3)
    goto LABEL_191;
  v67 = *(unsigned __int8 *)(v363 + 72);
  v68 = sub_20E8C31DC(v363, "OSLogSurrogateAppender", 1, 0);
  v69 = v68;
  if (!v67 && !v68)
    goto LABEL_191;
  v354 = &v363;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v356 = std::chrono::system_clock::now().__d_.__rep_;
  v357 = 3;
  v358 = "unknown file";
  v359 = 102;
  v361 = 0;
  v362 = 0;
  v360 = "unknown function";
  v70 = *v354;
  if (*(char *)(*v354 + 39) < 0)
  {
    v72 = *(const char **)(v70 + 16);
    v71 = *(_QWORD *)(v70 + 24);
    v345 = *v354 + 16;
    __srca = *v354;
    v84 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v84 & 1) != 0)
      goto LABEL_110;
  }
  else
  {
    v71 = *(unsigned __int8 *)(*v354 + 39);
    v72 = (const char *)(*v354 + 16);
    v345 = (uint64_t)v72;
    __srca = *v354;
    v73 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v73 & 1) != 0)
      goto LABEL_110;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v366);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v366);
    if ((_BYTE)v367 && (v366[23] & 0x80000000) != 0)
      operator delete(*(void **)v366);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_110:
  if (byte_254A4A4F8[23] >= 0)
    v85 = byte_254A4A4F8;
  else
    v85 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v86 = byte_254A4A4F8[23];
  else
    v86 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v366 = os_log_create(v85, v72);
  v87 = &v366[8];
  if (v86 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v86 >= 0x17)
  {
    v88 = v69;
    v89 = v72;
    v90 = v67;
    v91 = a2;
    v92 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v86 | 7) != 0x17)
      v92 = v86 | 7;
    v93 = v92 + 1;
    v87 = operator new(v92 + 1);
    *(_QWORD *)&v366[16] = v86;
    *(_QWORD *)&v367 = v93 | 0x8000000000000000;
    *(_QWORD *)&v366[8] = v87;
    a2 = v91;
    v67 = v90;
    v72 = v89;
    v69 = v88;
    goto LABEL_123;
  }
  BYTE7(v367) = v86;
  if (v86)
LABEL_123:
    memmove(v87, v85, v86);
  v87[v86] = 0;
  BYTE8(v367) = 1;
  v94 = (void **)&v368;
  if (v71 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v71 >= 0x17)
  {
    v95 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v95 = v71 | 7;
    v96 = v95 + 1;
    v94 = (void **)operator new(v95 + 1);
    v369 = v71;
    v370 = v96 | 0x8000000000000000;
    v368 = v94;
  }
  else
  {
    HIBYTE(v370) = v71;
    if (!v71)
      goto LABEL_132;
  }
  memmove(v94, v72, v71);
LABEL_132:
  *((_BYTE *)v94 + v71) = 0;
  v371 = 1;
  v97 = *(NSObject **)v366;
  if (SHIBYTE(v370) < 0)
    operator delete(v368);
  if (BYTE8(v367) && SBYTE7(v367) < 0)
    operator delete(*(void **)&v366[8]);
  if (*(_QWORD *)v366)
    os_release(*(void **)v366);
  if (v69 && *(_QWORD *)(v69 + 24))
  {
    v98 = _os_log_pack_size();
    v99 = (std::__shared_weak_count_vtbl *)operator new(v98, (std::align_val_t)8uLL);
    v100 = (std::__shared_weak_count *)operator new();
    v101 = v100;
    v100->__shared_owners_ = 0;
    v102 = (unint64_t *)&v100->__shared_owners_;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v99;
    *(_QWORD *)v366 = v99;
    *(_QWORD *)&v366[8] = v99;
    *(_QWORD *)&v366[16] = v100;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
    v367 = 0uLL;
    v368 = 0;
    do
      v104 = __ldaxr(v102);
    while (__stlxr(v104 - 1, v102));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v101);
    }
    v105 = *(_QWORD *)v366;
    *(_WORD *)_os_log_pack_fill() = 0;
    v106 = operator new();
    v107 = *(unsigned __int8 *)(__srca + 39);
    v108 = v345;
    if ((v107 & 0x80u) != 0)
    {
      v108 = *(_QWORD *)(__srca + 16);
      v107 = *(_QWORD *)(__srca + 24);
    }
    *(_QWORD *)v106 = v105;
    *(_OWORD *)(v106 + 8) = *(_OWORD *)&v366[8];
    *(_OWORD *)&v366[8] = 0uLL;
    *(_OWORD *)(v106 + 24) = v367;
    v367 = 0uLL;
    *(_QWORD *)(v106 + 40) = v108;
    *(_QWORD *)(v106 + 48) = v107;
    *(_BYTE *)(v106 + 56) = 1;
    v364 = 0;
    v365 = v106;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v69 + 24) + 40))(*(_QWORD *)(v69 + 24), &v365);
    v109 = v365;
    v365 = 0;
    if (v109)
    {
      v110 = *(std::__shared_weak_count **)(v109 + 32);
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      v113 = *(std::__shared_weak_count **)(v109 + 16);
      if (v113)
      {
        v114 = (unint64_t *)&v113->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
      MEMORY[0x212BC6398](v109, 0x10F0C40B62ED6C6);
      v116 = v364;
      v364 = 0;
      if (v116)
      {
        v117 = *(std::__shared_weak_count **)(v116 + 32);
        if (v117)
        {
          v118 = (unint64_t *)&v117->__shared_owners_;
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
        v120 = *(std::__shared_weak_count **)(v116 + 16);
        if (v120)
        {
          v121 = (unint64_t *)&v120->__shared_owners_;
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
          }
        }
        MEMORY[0x212BC6398](v116, 0x10F0C40B62ED6C6);
      }
    }
    v123 = (std::__shared_weak_count *)*((_QWORD *)&v367 + 1);
    if (*((_QWORD *)&v367 + 1))
    {
      v124 = (unint64_t *)(*((_QWORD *)&v367 + 1) + 8);
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v126 = *(std::__shared_weak_count **)&v366[16];
    if (*(_QWORD *)&v366[16])
    {
      v127 = (unint64_t *)(*(_QWORD *)&v366[16] + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
  }
  else
  {
    os_log_type_enabled(v97, OS_LOG_TYPE_INFO);
    *(_WORD *)v366 = 0;
    v129 = (void *)_os_log_send_and_compose_impl();
    if (v129)
      free(v129);
  }
  if (v67)
  {
    sub_20E8C003C((uint64_t)&v354, "Using In-Motion initialization.");
    sub_20E863570((uint64_t)&v354);
  }
  sub_20E863570((uint64_t)&v354);
  v130 = v362;
  if (v362)
  {
    v131 = (unint64_t *)&v362->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
LABEL_191:
  v133 = a2[1];
  v62.f64[0] = *(float64_t *)(v133 - 32);
  v341 = v62;
  v339 = *(float64x2_t *)(v133 - 48);
  *((_QWORD *)&v134 + 1) = *(_QWORD *)(v133 - 40);
  *(_QWORD *)&v134 = *(_QWORD *)(v133 - 8);
  *(_OWORD *)__srcb = v134;
  v346 = *(float64x2_t *)(v133 - 24);
  if (*(_QWORD *)(a1 + 328) - *(_QWORD *)(a1 + 320) != 24
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include_private/VIO/Odometry/InMotionInitialization.h", 114, (uint64_t)"config.initial_velocity_imu.size() == cv_types::InertialCovariance::kVelocityDof", 80, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v135 = v346;
  v137 = *(float64x2_t *)__srcb;
  v136 = *(double *)vextq_s8((int8x16_t)v135, (int8x16_t)v135, 8uLL).i64;
  v135.f64[1] = v136;
  v137.f64[0] = sqrt(vmulq_f64(v135, v135).f64[0] + v136 * v136 + v137.f64[0] * v137.f64[0]);
  if (vabdd_f64(v137.f64[0], *(double *)(a1 + 264)) > *(double *)(a1 + 248))
    goto LABEL_195;
  v138 = v339;
  *(_QWORD *)&v138.f64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u64[0];
  v139 = vabsq_f64(v138);
  *(_QWORD *)&v138.f64[0] = *(_OWORD *)&vabsq_f64(v341);
  v138.f64[1] = NAN;
  v140 = vmaxnmq_f64(v139, v138);
  if (vmaxnmvq_f64(v140) > *(double *)(a1 + 256))
    goto LABEL_195;
  v141 = (int64x2_t *)(a1 + 496);
  v142 = *(_QWORD *)(a1 + 272);
  v143 = *(_QWORD *)(a1 + 280);
  v144 = *(_QWORD *)(a1 + 288);
  v145 = *(_QWORD *)(a1 + 296);
  v146 = *(_QWORD *)(a1 + 304);
  v147 = *(_QWORD *)(a1 + 312);
  v148 = *(float64x2_t **)(a1 + 320);
  v149 = *(float64_t **)(a1 + 368);
  v150 = 1.0;
  if (v137.f64[0] == 0.0)
    v137.f64[0] = 1.0;
  else
    v137.f64[0] = 1.0 / v137.f64[0];
  v151.f64[0] = v346.f64[0];
  v151.f64[1] = v136;
  _Q3 = vmulq_n_f64(v151, v137.f64[0]);
  v153 = vmulq_f64(*(float64x2_t *)__srcb, v137).f64[0];
  _D7 = 0;
  _Q0.f64[0] = 0.0 * v153 - _Q3.f64[1];
  v137.f64[0] = _Q3.f64[0] - 0.0 * v153;
  v63.f64[0] = vmuld_lane_f64(0.0, _Q3, 1) - 0.0 * _Q3.f64[0];
  v64.f64[0] = sqrt(_Q0.f64[0] * _Q0.f64[0] + v137.f64[0] * v137.f64[0] + v63.f64[0] * v63.f64[0]);
  __asm { FMLA            D16, D7, V3.D[1] }
  v160 = v153 + _D16;
  if (v64.f64[0] >= 2.22507386e-308)
  {
    if (v64.f64[0] < 2.22044605e-16)
    {
      v140.f64[0] = 1.0 / v64.f64[0];
      v162 = v63.f64[0] * (1.0 / v64.f64[0]);
      v63 = vmulq_f64(v63, v140);
      _Q0.f64[1] = v137.f64[0];
      _Q0 = vmulq_n_f64(_Q0, v140.f64[0]);
      _D1 = v137.f64[0] * v140.f64[0];
      v137 = (float64x2_t)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL);
      __asm { FMLA            D6, D1, V0.D[1] }
      v64.f64[0] = sqrt(vmlad_n_f64(_D6, v162, v63.f64[0]));
    }
    v64.f64[0] = 1.0 / v64.f64[0];
    v165 = (int8x16_t)vmulq_f64(v63, v64);
    _Q0.f64[1] = v137.f64[0];
    v166 = vmulq_n_f64(_Q0, v64.f64[0]);
    v137.f64[0] = fmax(fmin(v160, 1.0), -1.0);
    v167 = sqrt(1.0 - v137.f64[0] * v137.f64[0]);
    v168 = vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v165, (int64x2_t)v166), v166);
    v65.f64[0] = vmuld_n_f64(*(double *)v165.i64, *(double *)v165.i64);
    v66.f64[0] = 1.0 - v137.f64[0];
    v169 = vmulq_n_f64(vmulq_laneq_f64((float64x2_t)vextq_s8((int8x16_t)v166, v165, 8uLL), v166, 1), 1.0 - v137.f64[0]);
    v170 = vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v166, (int8x16_t)v166, 8uLL), v167);
    v171 = v167 * *(double *)v165.i64;
    v150 = v137.f64[0] + vmulq_f64(v66, v65).f64[0];
    v165.i64[0] = *(_OWORD *)&vaddq_f64(v169, v137);
    v172.f64[1] = v171;
    v172.f64[0] = v170.f64[0];
    *(_QWORD *)&__srcc = *(_OWORD *)&vaddq_f64(vmulq_n_f64(v168, v66.f64[0]), v172);
    v165.i64[1] = *(_QWORD *)&vsubq_f64(v169, v170).f64[1];
    *(_QWORD *)&v161 = vextq_s8(v165, v165, 8uLL).u64[0];
  }
  else
  {
    if (v160 <= 0.0)
      v150 = -1.0;
    __srcc = 0.0;
    v161 = 0.0;
  }
  v173 = atan2(-v161, v150);
  v174 = asin(__srcc);
  v175 = __sincos_stret(v173);
  v176 = __sincos_stret(v174);
  v335 = -(v175.__sinval * v176.__cosval);
  v336 = -(v175.__cosval * v176.__sinval);
  *(double *)&v177 = v175.__cosval;
  *((double *)&v177 + 1) = v335;
  _D20 = v335;
  *(double *)&v179 = v176.__sinval;
  *((double *)&v179 + 1) = v175.__sinval * v176.__sinval;
  v180 = v148[1].f64[0];
  _Q3 = *v148;
  v182.f64[0] = v175.__sinval * v176.__sinval;
  v182.f64[1] = v175.__cosval;
  v183 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v176.__cosval, v148->f64[0]), v182, *v148, 1);
  v182.f64[0] = v336;
  v182.f64[1] = v175.__sinval;
  __asm { FMLA            D7, D20, V3.D[1] }
  _Q3.f64[0] = v149[2];
  v185 = *(_OWORD *)v149;
  *(double *)(a1 + 560) = v175.__cosval * v176.__cosval;
  *v141 = (int64x2_t)*(unint64_t *)&v176.__cosval;
  *(_OWORD *)(a1 + 512) = v179;
  *(_OWORD *)(a1 + 528) = v177;
  *(float64x2_t *)(a1 + 544) = v182;
  *(_QWORD *)(a1 + 568) = v145;
  *(_QWORD *)(a1 + 576) = v146;
  *(_QWORD *)(a1 + 584) = v147;
  *(double *)(a1 + 608) = _D7 + v175.__cosval * v176.__cosval * v180;
  *(float64x2_t *)(a1 + 592) = vmlaq_n_f64(v183, v182, v180);
  *(_QWORD *)(a1 + 616) = v142;
  *(_QWORD *)(a1 + 624) = v143;
  *(_QWORD *)(a1 + 632) = v144;
  *(_OWORD *)(a1 + 640) = v185;
  *(float64_t *)(a1 + 656) = _Q3.f64[0];
  v186 = *(_QWORD *)(a1 + 232);
  v342 = *(double *)(a1 + 240);
  v187 = *(_QWORD *)(a1 + 224);
  bzero((void *)(a1 + 688), 0x6F0uLL);
  v188 = *(_QWORD *)&v335;
  *(double *)v189.i64 = v336;
  v190 = v175.__sinval * v176.__sinval;
  v191.f64[0] = v176.__cosval;
  sinval = v175.__sinval;
  cosval = v175.__cosval;
  v195 = v175.__cosval * v176.__cosval;
  v194.i64[0] = *(_QWORD *)&v176.__sinval;
  v196.f64[0] = v176.__cosval;
  v196.f64[1] = v175.__sinval * v176.__sinval;
  v197.f64[0] = 0.0;
  v197.f64[1] = v175.__cosval;
  v198.f64[0] = v176.__sinval;
  v198.f64[1] = v335;
  v199 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v196, v342), (float64x2_t)0, v197), (float64x2_t)0, v198);
  v200 = v336 * v342 + v175.__sinval * 0.0 + v175.__cosval * v176.__cosval * 0.0;
  v201 = vmulq_f64(v196, (float64x2_t)0);
  v202 = vmlaq_f64(vmlaq_n_f64(v201, v197, v342), (float64x2_t)0, v198);
  v203 = v336 * 0.0 + v175.__sinval * v342 + v175.__cosval * v176.__cosval * 0.0;
  v204 = vmlaq_n_f64(vmlaq_f64(v201, (float64x2_t)0, v197), v198, v342);
  v197.f64[0] = v336 * 0.0 + v175.__sinval * 0.0 + v175.__cosval * v176.__cosval * v342;
  *(double *)(a1 + 680) = v200 * v176.__cosval + v203 * 0.0 + v197.f64[0] * v176.__sinval;
  *(float64x2_t *)(a1 + 664) = vmlaq_n_f64(vmlaq_f64(vmulq_n_f64(v199, v176.__cosval), (float64x2_t)0, v202), v204, v176.__sinval);
  *(double *)(a1 + 800) = v200 * (v175.__sinval * v176.__sinval) + v203 * v175.__cosval + v197.f64[0] * v335;
  *(float64x2_t *)(a1 + 784) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v199, v175.__sinval * v176.__sinval), v202, v175.__cosval), v204, v335);
  *(double *)(a1 + 920) = v200 * v336 + v203 * v175.__sinval + v197.f64[0] * (v175.__cosval * v176.__cosval);
  *(float64x2_t *)(a1 + 904) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v199, v336), v202, v175.__sinval), v204, v175.__cosval * v176.__cosval);
  *(_QWORD *)(a1 + 1048) = v187;
  *(_QWORD *)(a1 + 1176) = v187;
  *(_QWORD *)(a1 + 1304) = v187;
  v205 = *(double **)(a1 + 344);
  if (*(_QWORD *)(a1 + 352) - (_QWORD)v205 == 24)
  {
    v343 = v335;
    v206.f64[0] = 0.0;
    v207.f64[0] = v176.__sinval;
    v208.i64[0] = *(_QWORD *)&v176.__cosval;
    v209 = 0.0;
    *(double *)v210.i64 = v175.__sinval * v176.__sinval;
    *(double *)v211.i64 = v335;
    v212 = v175.__sinval;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/include/VIO/BatchLeastSquaresUnsanitized/InitializationHelper.h", 72, (uint64_t)"initial_velocity_variance_imu.size() == cv_types::InertialCovariance::kVelocityDof", 82, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v205 = *(double **)(a1 + 344);
    v194.i64[0] = *(_QWORD *)(a1 + 512);
    v208 = *(int8x16_t *)v141;
    v211.i64[0] = *(_QWORD *)(a1 + 536);
    v210 = *(int64x2_t *)(a1 + 520);
    v195 = *(double *)(a1 + 560);
    v189 = *(int8x16_t *)(a1 + 544);
    cosval = *(double *)(a1 + 528);
    *(_QWORD *)&v212 = vextq_s8(v189, v189, 8uLL).u64[0];
    *(_QWORD *)&v209 = vextq_s8(v208, v208, 8uLL).u64[0];
    v191 = (float64x2_t)vzip1q_s64(*v141, v210);
    v207 = (float64x2_t)vzip1q_s64(v194, v211);
    sinval = *(double *)(a1 + 552);
    v206.f64[0] = *(float64_t *)(a1 + 504);
    v188 = vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL).u64[0];
    *(_QWORD *)&v190 = vextq_s8((int8x16_t)v191, (int8x16_t)v191, 8uLL).u64[0];
    v343 = *(double *)v211.i64;
  }
  v213 = v205[1];
  v214 = v205[2];
  *(_QWORD *)&v207.f64[1] = v188;
  v191.f64[1] = v190;
  v206.f64[1] = cosval;
  v215 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v191, *v205), (float64x2_t)0, v206), (float64x2_t)0, v207);
  v216 = *(double *)v189.i64 * *v205 + sinval * 0.0 + v195 * 0.0;
  v217 = vmulq_f64(v191, (float64x2_t)0);
  v218 = vmlaq_f64(vmlaq_n_f64(v217, v206, v213), (float64x2_t)0, v207);
  v219 = *(double *)v189.i64 * 0.0 + sinval * v213 + v195 * 0.0;
  v220 = vmlaq_n_f64(vmlaq_f64(v217, (float64x2_t)0, v206), v207, v214);
  v221 = *(double *)v189.i64 * 0.0 + sinval * 0.0 + v195 * v214;
  v347 = v195;
  __srcd = *(double *)v194.i64;
  *(double *)(a1 + 1448) = v216 * *(double *)v208.i64 + v219 * v209 + v221 * *(double *)v194.i64;
  *(float64x2_t *)(a1 + 1432) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v215, *(double *)v208.i64), v218, v209), v220, *(double *)v194.i64);
  *(double *)(a1 + 1568) = v216 * *(double *)v210.i64 + v219 * cosval + v221 * *(double *)v211.i64;
  *(float64x2_t *)(a1 + 1552) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v215, *(double *)v210.i64), v218, cosval), v220, *(double *)v211.i64);
  *(double *)(a1 + 1688) = v216 * *(double *)v189.i64 + v219 * v212 + v221 * v195;
  *(float64x2_t *)(a1 + 1672) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v215, *(double *)v189.i64), v218, v212), v220, v195);
  *(_QWORD *)(a1 + 1816) = v186;
  *(_QWORD *)(a1 + 1944) = v186;
  *(_QWORD *)(a1 + 2072) = v186;
  *(_BYTE *)(a1 + 489) = 1;
  if (*(_BYTE *)(a1 + 2632))
    goto LABEL_297;
}

void sub_20F0A443C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 216))
  {
    if (*(char *)(v29 - 217) < 0)
      operator delete(*(void **)(v29 - 240));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F0A4494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;

  sub_20E86E8C4(&a40);
  sub_20E86E8C4(&a39);
  sub_20E86E658(v40 - 240);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F0A4630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F0A4644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F0A4658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  if (*(_BYTE *)(v29 - 208) && *(char *)(v29 - 209) < 0)
    operator delete(*(void **)(v29 - 232));
  v31 = *(void **)(v29 - 240);
  if (v31)
    os_release(v31);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F0A469C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F0A46B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  if (*(_BYTE *)(v29 - 208) && *(char *)(v29 - 209) < 0)
    operator delete(*(void **)(v29 - 232));
  v31 = *(void **)(v29 - 240);
  if (v31)
    os_release(v31);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F0A46F0(void *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20F0A4708);
}

void sub_20F0A4704(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_20F0A4710(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  const char *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const char *v12;
  size_t v13;
  void *v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  size_t v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD v61[3];
  int v62;
  const char *v63;
  int v64;
  const char *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  void *object;
  void *v70[2];
  __int128 v71;
  void *__p[2];
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;

  *(_QWORD *)(a1 + 496) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 528) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  bzero((void *)(a1 + 688), 0x6E8uLL);
  *(_QWORD *)(a1 + 664) = 0x3DDB7CDFD9D7BDBCLL;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 792) = 0x3DDB7CDFD9D7BDBCLL;
  *(_QWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  *(_QWORD *)(a1 + 920) = 0x3DDB7CDFD9D7BDBCLL;
  *(_QWORD *)(a1 + 2200) = 0x3DDB7CDFD9D7BDBCLL;
  *(_QWORD *)(a1 + 2328) = 0x3DDB7CDFD9D7BDBCLL;
  *(_QWORD *)(a1 + 2456) = 0x3DDB7CDFD9D7BDBCLL;
  if (!*(_BYTE *)(a1 + 2632))
    goto LABEL_90;
  v2 = *(_OWORD *)(a1 + 2480);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a1 + 2464);
  *(_OWORD *)(a1 + 512) = v2;
  v3 = *(_OWORD *)(a1 + 2512);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a1 + 2496);
  *(_OWORD *)(a1 + 544) = v3;
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a1 + 2528);
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 2608);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a1 + 2624);
  *(_BYTE *)(a1 + 2632) = 0;
  sub_20F0A1EF4(&v68);
  if (**(int **)(v68 + 56) > 3)
    goto LABEL_90;
  v4 = *(unsigned __int8 *)(v68 + 72);
  v5 = sub_20E8C31DC(v68, "OSLogSurrogateAppender", 1, 0);
  v6 = v5;
  if (!v4 && !v5)
    goto LABEL_90;
  v61[0] = &v68;
  v61[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v61[2] = std::chrono::system_clock::now().__d_.__rep_;
  v62 = 3;
  v63 = "unknown file";
  v64 = 205;
  v66 = 0;
  v67 = 0;
  v65 = "unknown function";
  v7 = v68;
  if (*(char *)(v68 + 39) < 0)
  {
    v9 = *(const char **)(v68 + 16);
    v8 = *(_QWORD *)(v68 + 24);
    v60 = *(_QWORD *)v61[0] + 16;
    v11 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v11 & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    v8 = *(unsigned __int8 *)(v68 + 39);
    v9 = (const char *)(*(_QWORD *)v61[0] + 16);
    v60 = (uint64_t)v9;
    v10 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v10 & 1) != 0)
      goto LABEL_9;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)&object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
    if ((_BYTE)v71 && SHIBYTE(v70[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_9:
  if (byte_254A4A4F8[23] >= 0)
    v12 = byte_254A4A4F8;
  else
    v12 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v13 = byte_254A4A4F8[23];
  else
    v13 = *(_QWORD *)&byte_254A4A4F8[8];
  object = os_log_create(v12, v9);
  v14 = v70;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v13 >= 0x17)
  {
    v15 = v6;
    v16 = v9;
    v17 = v7;
    v18 = v4;
    v19 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v19 = v13 | 7;
    v20 = v19 + 1;
    v14 = operator new(v19 + 1);
    v70[1] = (void *)v13;
    *(_QWORD *)&v71 = v20 | 0x8000000000000000;
    v70[0] = v14;
    v4 = v18;
    v7 = v17;
    v9 = v16;
    v6 = v15;
    goto LABEL_22;
  }
  BYTE7(v71) = v13;
  if (v13)
LABEL_22:
    memmove(v14, v12, v13);
  *((_BYTE *)v14 + v13) = 0;
  BYTE8(v71) = 1;
  v21 = __p;
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v8 >= 0x17)
  {
    v22 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v22 = v8 | 7;
    v23 = v22 + 1;
    v21 = operator new(v22 + 1);
    __p[1] = (void *)v8;
    v73 = v23 | 0x8000000000000000;
    __p[0] = v21;
  }
  else
  {
    HIBYTE(v73) = v8;
    if (!v8)
      goto LABEL_31;
  }
  memmove(v21, v9, v8);
LABEL_31:
  *((_BYTE *)v21 + v8) = 0;
  v74 = 1;
  v24 = object;
  if (SHIBYTE(v73) < 0)
    operator delete(__p[0]);
  if (BYTE8(v71) && SBYTE7(v71) < 0)
    operator delete(v70[0]);
  if (object)
    os_release(object);
  if (v6 && *(_QWORD *)(v6 + 24))
  {
    v25 = _os_log_pack_size();
    v26 = (std::__shared_weak_count_vtbl *)operator new(v25, (std::align_val_t)8uLL);
    v27 = (std::__shared_weak_count *)operator new();
    v28 = v27;
    v27->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    v27->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v27->__shared_weak_owners_ = 0;
    v27[1].__vftable = v26;
    object = v26;
    v70[0] = v26;
    v70[1] = v27;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
    v71 = 0uLL;
    __p[0] = 0;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v28);
    }
    v32 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v33 = operator new();
    v34 = *(unsigned __int8 *)(v7 + 39);
    v35 = v60;
    if ((v34 & 0x80u) != 0)
    {
      v35 = *(_QWORD *)(v7 + 16);
      v34 = *(_QWORD *)(v7 + 24);
    }
    *(_QWORD *)v33 = v32;
    *(_OWORD *)(v33 + 8) = *(_OWORD *)v70;
    v70[0] = 0;
    v70[1] = 0;
    *(_OWORD *)(v33 + 24) = v71;
    v71 = 0uLL;
    *(_QWORD *)(v33 + 40) = v35;
    *(_QWORD *)(v33 + 48) = v34;
    *(_BYTE *)(v33 + 56) = 1;
    v75 = 0;
    v76 = v33;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v76);
    v36 = v76;
    v76 = 0;
    if (v36)
    {
      v37 = *(std::__shared_weak_count **)(v36 + 32);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = *(std::__shared_weak_count **)(v36 + 16);
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MEMORY[0x212BC6398](v36, 0x10F0C40B62ED6C6);
      v43 = v75;
      v75 = 0;
      if (v43)
      {
        v44 = *(std::__shared_weak_count **)(v43 + 32);
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = *(std::__shared_weak_count **)(v43 + 16);
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        MEMORY[0x212BC6398](v43, 0x10F0C40B62ED6C6);
      }
    }
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = (std::__shared_weak_count *)v70[1];
    if (v70[1])
    {
      v54 = (unint64_t *)((char *)v70[1] + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
  else
  {
    os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
    LOWORD(object) = 0;
    v56 = (void *)_os_log_send_and_compose_impl();
    if (v56)
      free(v56);
  }
  if (v4)
  {
    sub_20E8C003C((uint64_t)v61, "Vision-Only initial state got updated using the prior state");
    sub_20E863570((uint64_t)v61);
  }
  sub_20E863570((uint64_t)v61);
  v57 = v67;
  if (v67)
  {
    v58 = (unint64_t *)&v67->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
LABEL_90:
  *(_BYTE *)(a1 + 489) = 1;
}

void sub_20F0A4EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F0A4EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v5 - 96));
  sub_20E86E8C4((uint64_t *)(v5 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0A4F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v5, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0A4F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0A4F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0A4F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F0A4FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  const char *v38;
  size_t v39;
  unsigned __int8 v40;
  double v41;
  float64x2_t v42;
  double v43;
  float64x2_t v44;
  int v45;
  double v46;
  float64x2_t v47;
  double v48;
  float64x2_t v49;
  int v50;
  void **v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  float64x2_t v55;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  double v62;
  double v64;
  float64x2_t v66;
  double v71;
  float64x2_t v72;
  float64x2_t v74;
  double v76;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  double v81;
  double v83;
  double v85;
  float64x2_t v87;
  double v89;
  float64x2_t v90;
  float64x2_t v92;
  double v94;
  float64x2_t v95;
  float64x2_t v97;
  double v98;
  float64x2_t v99;
  double v100;
  double v102;
  double v104;
  float64x2_t v106;
  double v108;
  int v111;
  unsigned __int8 v112;
  const char *v113;
  size_t v114;
  void **v115;
  uint64_t v116;
  uint64_t v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  size_t v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count *v125;
  unint64_t *p_shared_owners;
  unint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  __int128 v135;
  __uint64_t v136;
  int v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  float64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  void *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unsigned __int8 v161;
  double v162;
  float64x2_t v163;
  float64x2_t v164;
  __int128 v165;
  uint64_t *v166;
  unsigned __int8 v167;
  char *v169;
  size_t v170;
  __darwin_time_t v171;
  uint64_t v172;
  uint64_t j;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  int8x16_t v179;
  int8x16_t v180;
  float64x2_t v181;
  int8x16_t v182;
  unint64_t v183;
  unint64_t v184;
  float64x2_t v185;
  unint64_t v186;
  float64x2_t v187;
  unsigned int v188;
  double v189;
  double v190;
  __double2 v191;
  double v193;
  float64_t v194;
  float64_t v195;
  double v196;
  double v197;
  double v198;
  float64_t v199;
  double v200;
  double v201;
  float64_t v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  int8x16_t v210;
  double v211;
  float64x2_t v212;
  double v213;
  int8x16_t v214;
  uint64_t v215;
  double v218;
  double v219;
  double v220;
  void *v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  int v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  size_t v235;
  const char *v236;
  unsigned __int8 v237;
  unsigned __int8 v238;
  const char *v239;
  size_t v240;
  void **v241;
  const char *v242;
  unint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void **v249;
  uint64_t v250;
  uint64_t v251;
  NSObject *v252;
  size_t v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  __int128 v266;
  __uint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  float64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  void *v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  unsigned __int8 v291;
  double v292;
  float64x2_t v293;
  double *v294;
  uint64_t *v295;
  unsigned __int8 v296;
  unint64_t v297;
  char *v298;
  size_t v299;
  __darwin_time_t v300;
  uint64_t v301;
  uint64_t k;
  uint64_t v303;
  double v304;
  double v305;
  double v306;
  __double2 v307;
  __double2 v308;
  __double2 v309;
  float64x2_t v310;
  float64x2_t v318;
  int v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  size_t v325;
  const char *v326;
  unsigned __int8 v327;
  unsigned __int8 v328;
  const char *v329;
  size_t v330;
  void **v331;
  unint64_t v332;
  const char *v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  void **v339;
  uint64_t v340;
  uint64_t v341;
  NSObject *v342;
  size_t v343;
  std::__shared_weak_count_vtbl *v344;
  std::__shared_weak_count *v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  void *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  __int128 v356;
  __uint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  float64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  void *v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  double v381;
  double v382;
  double v383;
  double v384;
  double v385;
  double v386;
  double v387;
  double v388;
  int v389;
  unint64_t v390;
  unint64_t v391;
  uint64_t v393;
  uint64_t v394;
  size_t v395;
  const char *v396;
  unsigned __int8 v397;
  unsigned __int8 v398;
  const char *v399;
  size_t v400;
  void **v401;
  unint64_t v402;
  const char *v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  void **v409;
  uint64_t v410;
  uint64_t v411;
  NSObject *v412;
  size_t v413;
  std::__shared_weak_count_vtbl *v414;
  std::__shared_weak_count *v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  unint64_t v419;
  void *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  __int128 v429;
  __uint64_t v430;
  double *v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  float64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  unint64_t v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  void *v451;
  void *v452;
  void *v453;
  void *v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  unsigned __int8 v458;
  double v459;
  double v460;
  double v461;
  double v462;
  double v463;
  double v464;
  double v465;
  double *v466;
  uint64_t *v467;
  unsigned __int8 v468;
  char *v470;
  size_t v471;
  __darwin_time_t v472;
  uint64_t v473;
  uint64_t m;
  uint64_t v475;
  unsigned __int8 v476;
  uint64_t *v477;
  unsigned __int8 v478;
  void *v480;
  void *v481;
  void *v482;
  char *v483;
  size_t v484;
  __darwin_time_t v485;
  uint64_t v486;
  uint64_t n;
  uint64_t v488;
  void *v489;
  void *v490;
  void *v491;
  void **v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  float64x2_t v496;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  double v501;
  double v503;
  double v505;
  float64x2_t v507;
  double v509;
  float64x2_t v510;
  float64x2_t v512;
  double v514;
  float64x2_t v515;
  float64x2_t v517;
  double v518;
  double v519;
  double v521;
  double v523;
  float64x2_t v525;
  double v527;
  float64x2_t v528;
  float64x2_t v530;
  int v532;
  void **v533;
  unint64_t v534;
  uint64_t v535;
  unint64_t v536;
  void **v537;
  unint64_t v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  float64x2_t v542;
  float64x2_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t v554;
  double v555;
  timespec *v556;
  timespec *v557;
  double v558;
  double v559;
  float64x2_t v560;
  int64x2_t v561;
  double v562;
  double v564;
  float64x2_t v565;
  double v570;
  float64x2_t v572;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t *v580;
  float64x2_t v581;
  float64x2_t *v582;
  float64x2_t v583;
  float64x2_t v585;
  int v588;
  void *v589;
  float64x2_t v591;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  int v603;
  unint64_t v604;
  uint64_t v605;
  float64_t v606;
  uint64_t v607;
  uint64_t *v608;
  uint64_t v609;
  char *v610;
  unsigned __int8 v611;
  char *v612;
  char *v613;
  NSObject *tv_sec;
  const char *v615;
  int v616;
  unsigned __int8 v617;
  uint64_t *v618;
  unsigned __int8 v619;
  char *v621;
  size_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t i;
  uint64_t v626;
  int *v627;
  int v628;
  unint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t *v632;
  char *v633;
  char *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  int v642;
  unint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t *v646;
  char *v647;
  char *v648;
  uint64_t v649;
  float64x2_t v650;
  float64x2_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t *p_tv_nsec;
  uint64_t v656;
  unint64_t v657;
  unint64_t v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t v662;
  double v663;
  double *p_tv_sec;
  double v665;
  double v666;
  float64x2_t v667;
  int64x2_t v668;
  double v669;
  double v671;
  float64x2_t v672;
  double v677;
  float64x2_t v679;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  __uint64_t *v687;
  float64x2_t *v688;
  float64x2_t v689;
  float64x2_t v690;
  __uint64_t *v692;
  float64x2_t v693;
  float64x2_t v695;
  int v697;
  void *v698;
  unsigned __int8 v703;
  float64_t v704;
  const char *v705;
  NSObject *v706;
  unsigned __int8 v707;
  uint64_t *v708;
  std::mutex *v709;
  uint64_t v711;
  int v712;
  void *v713;
  int v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  int v722;
  unint64_t v723;
  uint64_t v724;
  float64_t v725;
  uint64_t v726;
  uint64_t *v727;
  uint64_t v728;
  char *v729;
  unsigned __int8 v730;
  char *v731;
  char *v732;
  NSObject *v733;
  const char *v734;
  int v735;
  unsigned __int8 v736;
  uint64_t *v737;
  unsigned __int8 v738;
  void *v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  int v748;
  unint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t *v752;
  char *v753;
  char *v754;
  unsigned __int8 v755;
  float64_t v756;
  const char *v757;
  NSObject *v758;
  unsigned __int8 v759;
  uint64_t *v760;
  std::mutex *v761;
  uint64_t v763;
  int v764;
  void *v765;
  int v766;
  unsigned __int8 v767;
  float64_t v768;
  const char *v769;
  NSObject *v770;
  void *v771;
  double v778;
  float64x2_t v780;
  double v788;
  double v790;
  double v793;
  double v794;
  double v795;
  float64x2_t v798;
  float64x2_t v799;
  double v800;
  double v801;
  float64x2_t v802;
  float64x2_t v803;
  _QWORD *v804;
  _QWORD *v805;
  _QWORD *v806;
  _QWORD *v807;
  double v808;
  double v809;
  __double2 v810;
  __double2 v811;
  float64x2_t v812;
  __int128 v813;
  __int128 v814;
  float64x2_t v815;
  uint64_t v816;
  uint64_t v817;
  float64x2_t v818;
  float64x2_t v819;
  int8x16_t v820;
  float64x2_t v821;
  float64x2_t v822;
  double v823;
  float64x2_t v824;
  float64x2_t v825;
  double v826;
  float64x2_t v827;
  int8x16_t v828;
  double v829;
  double *v830;
  double v831;
  unint64_t v832;
  __int128 v833;
  double v834;
  double v835;
  float64x2_t v836;
  int8x16_t v837;
  double v838;
  int64x2_t v839;
  int64x2_t v840;
  int64x2_t v841;
  double v842;
  double v843;
  double v844;
  float64x2_t v845;
  float64x2_t v846;
  double v847;
  float64x2_t v848;
  double v849;
  double v850;
  float64x2_t v851;
  float64x2_t v852;
  double v853;
  float64x2_t v854;
  double v855;
  double v862;
  float64x2_t v864;
  double v872;
  double v874;
  double v877;
  double v878;
  _QWORD *v879;
  _QWORD *v880;
  _QWORD *v881;
  _QWORD *v882;
  double v883;
  float64x2_t v886;
  float64x2_t v887;
  double v888;
  double v889;
  float64x2_t v890;
  float64x2_t v891;
  double v892;
  double v893;
  __double2 v894;
  __double2 v895;
  float64x2_t v896;
  __int128 v897;
  __int128 v898;
  float64x2_t v899;
  uint64_t v900;
  uint64_t v901;
  float64x2_t v902;
  float64x2_t v903;
  int8x16_t v904;
  float64x2_t v905;
  float64x2_t v906;
  double v907;
  float64x2_t v908;
  float64x2_t v909;
  double v910;
  float64x2_t v911;
  int8x16_t v912;
  double v913;
  double *v914;
  double cosval;
  unint64_t v916;
  __int128 v917;
  double sinval;
  double v919;
  float64x2_t v920;
  int8x16_t v921;
  double v922;
  int64x2_t v923;
  int64x2_t v924;
  int64x2_t v925;
  double v926;
  double v927;
  double v928;
  float64x2_t v929;
  float64x2_t v930;
  double v931;
  float64x2_t v932;
  double v933;
  double v934;
  float64x2_t v935;
  float64x2_t v936;
  double v937;
  float64x2_t v938;
  double v939;
  void *v940;
  void *v941;
  double v942;
  double v943;
  double v944;
  double v945;
  double v946;
  double v947;
  double v948;
  double v949;
  double v950;
  double v951;
  double v952;
  double v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  float64x2_t v958;
  int64x2_t v959;
  double v960;
  float64x2_t v961;
  double v962;
  double v963;
  double v964;
  double v965;
  double v966;
  unint64_t v967;
  double v968;
  double v969;
  float64_t v970;
  float64x2_t v971;
  double v972;
  double v973;
  float64_t v974;
  float64x2_t v975;
  double v976;
  double v977;
  int8x16_t v978;
  long double v979;
  double v980;
  double v981;
  float64_t v982;
  double v983;
  double v984;
  double v985;
  _QWORD *v986;
  const char *v987;
  int8x16_t v988;
  float64x2_t v989;
  int64x2_t *v990;
  uint64_t *__x;
  uint64_t *__xa;
  int8x16_t __xc;
  float64x2_t __xd;
  unint64_t __xb;
  uint64_t v996;
  uint64_t v997;
  __int128 v998;
  long double v999;
  double v1000;
  _QWORD *v1001;
  int v1002;
  unint64_t v1003;
  double v1004;
  float64x2_t v1005;
  double v1006;
  double v1007;
  float64_t v1008;
  uint64_t v1009;
  char *category;
  uint64_t v1011;
  __uint64_t v1012[2];
  __int128 v1013;
  __int128 v1014;
  __int128 v1015;
  int8x16_t v1016[2];
  int8x16_t v1017;
  _OWORD v1018[2];
  char *v1019[2];
  double v1020;
  float64x2_t v1021;
  float64_t v1022;
  void *object[289];
  int v1024;
  int v1025;
  timespec __src[144];
  uint64_t v1027;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v5 = v4;
  v6 = v2;
  v7 = v1;
  v1027 = *MEMORY[0x24BDAC8D0];
  v8 = v1 + 496;
  v957 = v1;
  if (*(_BYTE *)(v1 + 488))
  {
    sub_20F0A4710(v1);
    if (!*(_BYTE *)(v7 + 489))
      return;
    goto LABEL_33;
  }
  v9 = v3;
  if (*(_BYTE *)(v1 + 9))
  {
    v10 = *(_QWORD *)(v1 + 3384);
    if (v10)
    {
      v954 = v1 + 496;
      v996 = v4;
      __x = v2;
      v986 = v2 + 3;
      if (v2[3] == v2[4])
      {
        v51 = *(void ***)(v10 + 376);
        v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v10 + 384) - (_QWORD)v51) >> 4);
        sub_20F0ADC00(v10 + 376, v51);
        v53 = *(_QWORD *)(v10 + 376);
        v54 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v10 + 384) - v53) >> 4);
        if (v52 <= v54)
        {
          if (v52 < v54)
            sub_20F0ADC00(v10 + 376, (void **)(v53 + 48 * v52));
        }
        else
        {
          sub_20F0AE8BC(v10 + 376, v52 - v54);
        }
        *(_QWORD *)(v10 + 400) = 0;
        *(_QWORD *)(v10 + 408) = 0;
        *(_QWORD *)(v10 + 416) = 0;
        v533 = *(void ***)(v10 + 424);
        v534 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v10 + 432) - (_QWORD)v533) >> 3);
        sub_20F0ADE2C(v10 + 424, v533);
        v535 = *(_QWORD *)(v10 + 424);
        v536 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v10 + 432) - v535) >> 3);
        if (v534 <= v536)
        {
          if (v534 < v536)
            sub_20F0ADE2C(v10 + 424, (void **)(v535 + 24 * v534));
        }
        else
        {
          sub_20F0AEC94(v10 + 424, v534 - v536);
        }
        *(_QWORD *)(v10 + 448) = 0;
        *(_QWORD *)(v10 + 456) = 0;
        *(_QWORD *)(v10 + 464) = 0;
        v45 = 1;
        goto LABEL_557;
      }
      v11 = *v2;
      v12 = v2[1];
      while (v11 != v12)
      {
        v13 = *(_QWORD *)(v11 + 8);
        v14 = *(_QWORD *)(v11 + 16);
        while (v13 != v14)
        {
          if (*(_BYTE *)(v13 + 120))
          {
            memset(object, 0, 24);
            v15 = *(_QWORD *)(v13 + 104) - *(_QWORD *)(v13 + 96);
            if (v15)
            {
              if (v15 < 0)
                sub_20E867F44();
            }
          }
          v13 += 440;
        }
        v11 += 104;
      }
      sub_20F0AEEE8((uint64_t *)(v10 + 376), v2);
      sub_20F0AF1F8((uint64_t *)(v10 + 424), *v9, v9[1]);
      if (*(_QWORD *)(v10 + 416) <= 3uLL)
      {
        v45 = 2;
LABEL_557:
        *(_DWORD *)(v10 + 368) = v45;
        goto LABEL_558;
      }
      *(_QWORD *)(v10 + 1040) = 0;
      *(_OWORD *)(v10 + 1008) = 0u;
      *(_OWORD *)(v10 + 1024) = 0u;
      *(_OWORD *)(v10 + 992) = 0u;
      *(_QWORD *)(v10 + 984) = 0x3FF0000000000000;
      *(_QWORD *)(v10 + 1016) = 0x3FF0000000000000;
      *(_QWORD *)(v10 + 1048) = 0x3FF0000000000000;
      *(_OWORD *)(v10 + 1296) = 0u;
      *(_OWORD *)(v10 + 1280) = 0u;
      *(_OWORD *)(v10 + 1312) = 0u;
      *(_QWORD *)(v10 + 1328) = 0;
      *(_QWORD *)(v10 + 1272) = 0x3FF0000000000000;
      *(_QWORD *)(v10 + 1304) = 0x3FF0000000000000;
      *(_QWORD *)(v10 + 1336) = 0x3FF0000000000000;
      sub_20F0AF320((_QWORD *)v10, 1u, v10 + 1056, 0, 0, 0.0, v41, v42, v43, v44);
      v55 = *(float64x2_t *)(v10 + 1272);
      _Q2.f64[0] = *(float64_t *)(v10 + 1312);
      v57 = *(float64x2_t *)(v10 + 1296);
      v58.f64[0] = *(float64_t *)(v10 + 1336);
      v59 = *(float64x2_t *)(v10 + 1320);
      v60 = *(double *)(v10 + 1072);
      _Q7 = *(float64x2_t *)(v10 + 1056);
      v62 = *(double *)(v10 + 1096);
      _Q17 = *(float64x2_t *)(v10 + 1080);
      v64 = *(double *)(v10 + 1120);
      _Q19 = *(float64x2_t *)(v10 + 1104);
      v66 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v55, _Q7.f64[0]), v57, _Q7, 1), v59, v60);
      __asm { FMLA            D21, D2, V7.D[1] }
      v71 = _D21 + v58.f64[0] * v60;
      v72 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v55, _Q17.f64[0]), v57, _Q17, 1), v59, v62);
      __asm { FMLA            D21, D2, V17.D[1] }
      v74 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v55, _Q19.f64[0]), v57, _Q19, 1), v59, v64);
      __asm { FMLA            D0, D2, V19.D[1] }
      *(float64x2_t *)(v10 + 1344) = v66;
      *(double *)(v10 + 1360) = v71;
      *(float64x2_t *)(v10 + 1368) = v72;
      *(double *)(v10 + 1384) = _D21 + v58.f64[0] * v62;
      v76 = _D0 + v58.f64[0] * v64;
      *(float64x2_t *)(v10 + 1392) = v74;
      *(double *)(v10 + 1408) = v76;
      sub_20F0AF320((_QWORD *)v10, 2u, v10 + 1128, 0, 0, v76, v74.f64[0], _Q2, v57.f64[0], v58);
      _Q2.f64[0] = *(float64_t *)(v10 + 1384);
      v78 = *(float64x2_t *)(v10 + 1368);
      v79.f64[0] = *(float64_t *)(v10 + 1408);
      v80 = *(float64x2_t *)(v10 + 1392);
      v81 = *(double *)(v10 + 1144);
      _Q7 = *(float64x2_t *)(v10 + 1128);
      v83 = *(double *)(v10 + 1168);
      _Q17 = *(float64x2_t *)(v10 + 1152);
      v85 = *(double *)(v10 + 1192);
      _Q19 = *(float64x2_t *)(v10 + 1176);
      v87 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v10 + 1344), _Q7.f64[0]), v78, _Q7, 1), v80, v81);
      __asm { FMLA            D21, D2, V7.D[1] }
      v89 = _D21 + v79.f64[0] * v81;
      v90 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v10 + 1344), _Q17.f64[0]), v78, _Q17, 1), v80, v83);
      __asm { FMLA            D21, D2, V17.D[1] }
      v92 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v10 + 1344), _Q19.f64[0]), v78, _Q19, 1), v80, v85);
      __asm { FMLA            D0, D2, V19.D[1] }
      *(float64x2_t *)(v10 + 1416) = v87;
      *(double *)(v10 + 1432) = v89;
      *(float64x2_t *)(v10 + 1440) = v90;
      *(double *)(v10 + 1456) = _D21 + v79.f64[0] * v83;
      v94 = _D0 + v79.f64[0] * v85;
      *(float64x2_t *)(v10 + 1464) = v92;
      *(double *)(v10 + 1480) = v94;
      sub_20F0AF320((_QWORD *)v10, 3u, v10 + 1200, 0, 0, v94, v92.f64[0], _Q2, v78.f64[0], v79);
      v95 = *(float64x2_t *)(v10 + 1416);
      _D2 = *(_QWORD *)(v10 + 1456);
      v97 = *(float64x2_t *)(v10 + 1440);
      v98 = *(double *)(v10 + 1480);
      v99 = *(float64x2_t *)(v10 + 1464);
      v100 = *(double *)(v10 + 1216);
      _Q7 = *(float64x2_t *)(v10 + 1200);
      v102 = *(double *)(v10 + 1240);
      _Q17 = *(float64x2_t *)(v10 + 1224);
      v104 = *(double *)(v10 + 1264);
      _Q19 = *(float64x2_t *)(v10 + 1248);
      v106 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v95, _Q7.f64[0]), v97, _Q7, 1), v99, v100);
      __asm { FMLA            D21, D2, V7.D[1] }
      v108 = _D21 + v98 * v100;
      __asm
      {
        FMLA            D21, D2, V17.D[1]
        FMLA            D0, D2, V19.D[1]
      }
      *(float64x2_t *)(v10 + 1488) = v106;
      *(double *)(v10 + 1504) = v108;
      *(float64x2_t *)(v10 + 1512) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v95, _Q17.f64[0]), v97, _Q17, 1), v99, v102);
      *(double *)(v10 + 1528) = _D21 + v98 * v102;
      *(float64x2_t *)(v10 + 1536) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v95, _Q19.f64[0]), v97, _Q19, 1), v99, v104);
      *(double *)(v10 + 1552) = _D0 + v98 * v104;
      v111 = *(_DWORD *)(v10 + 156);
      if (v111 != 1)
      {
        if (!v111 && (sub_20F0AFF4C(v10) & 1) == 0)
        {
LABEL_558:
          ++*(_DWORD *)(v7 + 3392);
          sub_20E863438((uint64_t)object);
          v8 = v954;
          v595 = v957;
          v596 = *(unsigned int *)(*(_QWORD *)(v957 + 3384) + 368);
          if (v596 >= 0xA
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 55, (uint64_t)"index < size", 12, (uint64_t)"Invalid access: Index out of range.", 35, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          sub_20E86A980(&object[2], (uint64_t)(&off_24C9F8A28)[2 * v596], (uint64_t)(&off_24C9F8A28)[2 * v596 + 1]);
          sub_20F0A1EF4(&v1009);
          if (**(int **)(v1009 + 56) <= 3)
          {
            v603 = *(unsigned __int8 *)(v1009 + 72);
            v604 = sub_20E8C31DC(v1009, "OSLogSurrogateAppender", 1, 0);
            v605 = v604 ? v604 + 16 : 0;
            if (v603 || v604)
            {
              v1012[0] = (__uint64_t)&v1009;
              v1012[1] = std::chrono::steady_clock::now().__d_.__rep_;
              *(std::chrono::system_clock::time_point *)&v1013 = std::chrono::system_clock::now();
              DWORD2(v1013) = 3;
              *(_QWORD *)&v1014 = "unknown file";
              DWORD2(v1014) = 270;
              *((_QWORD *)&v1015 + 1) = 0;
              v1016[0].i64[0] = 0;
              *(_QWORD *)&v1015 = "unknown function";
              sub_20E923E88(object, &v1021);
              if (v1022 >= 0.0)
                v606 = COERCE_DOUBLE(&v1021);
              else
                v606 = v1021.f64[0];
              v1008 = v606;
              v607 = *(_QWORD *)v1012[0];
              v608 = (uint64_t *)(*(_QWORD *)v1012[0] + 16);
              if (*(char *)(*(_QWORD *)v1012[0] + 39) < 0)
              {
                v610 = *(char **)(v607 + 16);
                v609 = *(_QWORD *)(v607 + 24);
              }
              else
              {
                v609 = *(unsigned __int8 *)(*(_QWORD *)v1012[0] + 39);
                v610 = (char *)(*(_QWORD *)v1012[0] + 16);
              }
              category = v610;
              v1011 = v609;
              v611 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v611 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)__src);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__src);
                if (LOBYTE(__src[1].tv_nsec) && SHIBYTE(__src[1].tv_sec) < 0)
                  operator delete((void *)__src[0].tv_sec);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
                v595 = v957;
              }
              v612 = (char *)byte_254A4A4F8[23];
              if (byte_254A4A4F8[23] >= 0)
              {
                v613 = byte_254A4A4F8;
              }
              else
              {
                v612 = *(char **)&byte_254A4A4F8[8];
                v613 = *(char **)byte_254A4A4F8;
              }
              v1019[0] = v613;
              v1019[1] = v612;
              __src[0].tv_sec = (__darwin_time_t)os_log_create(v613, category);
              sub_20E86E5A8(&__src[0].tv_nsec, (uint64_t)v1019);
              sub_20E86E5A8(&__src[2].tv_nsec, (uint64_t)&category);
              tv_sec = __src[0].tv_sec;
              sub_20E86E44C((uint64_t)__src);
              sub_20F0BC880(v605, v608, tv_sec, OS_LOG_TYPE_INFO, (const char **)&v1008);
              if (SHIBYTE(v1022) < 0)
                operator delete(*(void **)&v1021.f64[0]);
              if (v603)
              {
                sub_20E923E88(object, __src);
                if (__src[1].tv_sec >= 0)
                  v615 = (const char *)__src;
                else
                  v615 = (const char *)__src[0].tv_sec;
                sub_20E8C003C((uint64_t)v1012, "[Mono Dynamic Motion Initialization] Failed with status: %s.", v615);
                if (SHIBYTE(__src[1].tv_sec) < 0)
                  operator delete((void *)__src[0].tv_sec);
                sub_20E863570((uint64_t)v1012);
              }
              sub_20E863714((uint64_t)v1012);
            }
          }
          v616 = *(_DWORD *)(*(_QWORD *)(v595 + 3384) + 368);
          v617 = atomic_load((unsigned __int8 *)&qword_254A61FA8);
          if ((v617 & 1) == 0 && __cxa_guard_acquire(&qword_254A61FA8))
          {
            qword_254A61FF8 = 0;
            qword_254A62000 = 0;
            v879 = operator new(0x20uLL);
            v879[1] = 0;
            v879[2] = 0;
            *v879 = &off_24C9F8458;
            v879[3] = 0;
            qword_254A61FF8 = (uint64_t)(v879 + 3);
            qword_254A62000 = (uint64_t)v879;
            __cxa_atexit((void (*)(void *))sub_20F04FB84, &qword_254A61FF8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A61FA8);
            v595 = v957;
          }
          if (!sub_20F04FBEC((uint64_t)&qword_254A61FF8, 0, v597, v598, v599, v600, v601, v602, v616))
          {
LABEL_610:
            v627 = (int *)(v595 + 3392);
            if (*(_DWORD *)(v595 + 3392) < *(_DWORD *)(v595 + 484))
            {
              if (*(_DWORD *)(*(_QWORD *)(v595 + 3384) + 368) != 5)
                goto LABEL_778;
              sub_20F0A1EF4(&category);
              if (**((int **)category + 7) <= 3)
              {
                v628 = category[72];
                v629 = sub_20E8C31DC((uint64_t)category, "OSLogSurrogateAppender", 1, 0);
                v630 = v629 ? v629 + 16 : 0;
                if (v628 || v629)
                {
                  v1012[0] = (__uint64_t)&category;
                  v1012[1] = std::chrono::steady_clock::now().__d_.__rep_;
                  *(std::chrono::system_clock::time_point *)&v1013 = std::chrono::system_clock::now();
                  DWORD2(v1013) = 3;
                  *(_QWORD *)&v1014 = "unknown file";
                  DWORD2(v1014) = 294;
                  *((_QWORD *)&v1015 + 1) = 0;
                  v1016[0].i64[0] = 0;
                  *(_QWORD *)&v1015 = "unknown function";
                  v631 = *(_QWORD *)v1012[0];
                  v632 = (uint64_t *)(*(_QWORD *)v1012[0] + 16);
                  if (*(char *)(*(_QWORD *)v1012[0] + 39) < 0)
                  {
                    v634 = *(char **)(v631 + 16);
                    v633 = *(char **)(v631 + 24);
                  }
                  else
                  {
                    v633 = (char *)*(unsigned __int8 *)(*(_QWORD *)v1012[0] + 39);
                    v634 = (char *)(*(_QWORD *)v1012[0] + 16);
                  }
                  v1019[0] = v634;
                  v1019[1] = v633;
                  v767 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v767 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)__src);
                    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__src);
                    if (LOBYTE(__src[1].tv_nsec) && SHIBYTE(__src[1].tv_sec) < 0)
                      operator delete((void *)__src[0].tv_sec);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                    v595 = v957;
                  }
                  *(_QWORD *)&v768 = byte_254A4A4F8[23];
                  if (byte_254A4A4F8[23] >= 0)
                  {
                    v769 = byte_254A4A4F8;
                  }
                  else
                  {
                    v768 = *(double *)&byte_254A4A4F8[8];
                    v769 = *(const char **)byte_254A4A4F8;
                  }
                  *(_QWORD *)&v1021.f64[0] = v769;
                  v1021.f64[1] = v768;
                  __src[0].tv_sec = (__darwin_time_t)os_log_create(v769, v1019[0]);
                  sub_20E86E5A8(&__src[0].tv_nsec, (uint64_t)&v1021);
                  sub_20E86E5A8(&__src[2].tv_nsec, (uint64_t)v1019);
                  v770 = __src[0].tv_sec;
                  sub_20E86E44C((uint64_t)__src);
                  sub_20F0BD2C4(v630, v632, v770, OS_LOG_TYPE_INFO);
                  if (v628)
                  {
                    sub_20E8C003C((uint64_t)v1012, "[Inertial State Initializer]: Mono Dynamic Motion Initialization failed from insufficient parallax. Attempting IMU-based initialization.");
                    sub_20E863570((uint64_t)v1012);
                  }
                  sub_20E863714((uint64_t)v1012);
                }
              }
LABEL_777:
              sub_20F0A2138(v595, v986);
LABEL_778:
              if (*(_BYTE *)(v595 + 489))
              {
LABEL_779:
                sub_20F0ABF2C(v8, 0);
                *v627 = 0;
              }
LABEL_780:
              object[0] = *(void **)MEMORY[0x24BEDB7F0];
              v771 = *(void **)(MEMORY[0x24BEDB7F0] + 72);
              *(void **)((char *)object + *((_QWORD *)object[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
              object[2] = v771;
              object[3] = (void *)(MEMORY[0x24BEDB848] + 16);
              if (SHIBYTE(object[13]) < 0)
                operator delete(object[11]);
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              MEMORY[0x212BC6290](&object[16]);
              goto LABEL_783;
            }
            sub_20F0A1EF4(&category);
            if (**((int **)category + 7) <= 3)
            {
              v642 = category[72];
              v643 = sub_20E8C31DC((uint64_t)category, "OSLogSurrogateAppender", 1, 0);
              v644 = v643 ? v643 + 16 : 0;
              if (v642 || v643)
              {
                v1012[0] = (__uint64_t)&category;
                v1012[1] = std::chrono::steady_clock::now().__d_.__rep_;
                *(std::chrono::system_clock::time_point *)&v1013 = std::chrono::system_clock::now();
                DWORD2(v1013) = 3;
                *(_QWORD *)&v1014 = "unknown file";
                DWORD2(v1014) = 282;
                *((_QWORD *)&v1015 + 1) = 0;
                v1016[0].i64[0] = 0;
                *(_QWORD *)&v1015 = "unknown function";
                v645 = *(_QWORD *)v1012[0];
                v646 = (uint64_t *)(*(_QWORD *)v1012[0] + 16);
                if (*(char *)(*(_QWORD *)v1012[0] + 39) < 0)
                {
                  v648 = *(char **)(v645 + 16);
                  v647 = *(char **)(v645 + 24);
                }
                else
                {
                  v647 = (char *)*(unsigned __int8 *)(*(_QWORD *)v1012[0] + 39);
                  v648 = (char *)(*(_QWORD *)v1012[0] + 16);
                }
                v1019[0] = v648;
                v1019[1] = v647;
                v703 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v703 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)__src);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__src);
                  if (LOBYTE(__src[1].tv_nsec) && SHIBYTE(__src[1].tv_sec) < 0)
                    operator delete((void *)__src[0].tv_sec);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                  v595 = v957;
                }
                *(_QWORD *)&v704 = byte_254A4A4F8[23];
                if (byte_254A4A4F8[23] >= 0)
                {
                  v705 = byte_254A4A4F8;
                }
                else
                {
                  v704 = *(double *)&byte_254A4A4F8[8];
                  v705 = *(const char **)byte_254A4A4F8;
                }
                *(_QWORD *)&v1021.f64[0] = v705;
                v1021.f64[1] = v704;
                __src[0].tv_sec = (__darwin_time_t)os_log_create(v705, v1019[0]);
                sub_20E86E5A8(&__src[0].tv_nsec, (uint64_t)&v1021);
                sub_20E86E5A8(&__src[2].tv_nsec, (uint64_t)v1019);
                v706 = __src[0].tv_sec;
                sub_20E86E44C((uint64_t)__src);
                sub_20F0BCE84(v644, v646, v706, OS_LOG_TYPE_INFO, v627);
                if (v642)
                {
                  sub_20E8C003C((uint64_t)v1012, "[Inertial State Initializer]: Mono Dynamic Motion Initialization failed in %d attempts. Attempting IMU-based initialization.", *v627);
                  sub_20E863570((uint64_t)v1012);
                }
                sub_20E863714((uint64_t)v1012);
              }
            }
            v707 = atomic_load((unsigned __int8 *)&qword_254A61FB0);
            if ((v707 & 1) == 0 && __cxa_guard_acquire(&qword_254A61FB0))
            {
              qword_254A62008 = 0;
              qword_254A62010 = 0;
              v881 = operator new(0x20uLL);
              v881[1] = 0;
              v881[2] = 0;
              *v881 = &off_24C9C36D8;
              v881[3] = 0;
              qword_254A62008 = (uint64_t)(v881 + 3);
              qword_254A62010 = (uint64_t)v881;
              __cxa_atexit((void (*)(void *))sub_20F0AE4BC, &qword_254A62008, &dword_20E81F000);
              __cxa_guard_release(&qword_254A61FB0);
              v595 = v957;
            }
            if (!sub_20F04FBEC((uint64_t)&qword_254A62008, v635, v636, v637, v638, v639, v640, v641, *v627))goto LABEL_777;
            v708 = sub_210219C18();
            v709 = sub_21021A1E0();
            if (!atomic_load((unint64_t *)&v709[1]))
            {
LABEL_677:
              if (os_signpost_enabled((os_log_t)*v708))
              {
                v714 = *v627;
                LODWORD(__src[0].tv_sec) = 67109120;
                HIDWORD(__src[0].tv_sec) = v714;
                _os_signpost_emit_unreliably_with_name_impl();
              }
              goto LABEL_777;
            }
            v711 = (uint64_t)v709;
            v712 = *v627;
            LODWORD(__src[0].tv_sec) = 67109120;
            HIDWORD(__src[0].tv_sec) = v712;
            v713 = (void *)_os_log_send_and_compose_impl();
            v1012[0] = (__uint64_t)v713;
            sub_21021A118(__src, (uint64_t)v708, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, "[Inertial State Initializer]: Mono Dynamic Motion Initialization failed in %d attempts. Attempting IMU-based initialization.", 0x7CuLL, (const char **)v1012);
            sub_21021A2DC(v711, (uint64_t)__src);
            if (SHIBYTE(__src[8].tv_nsec) < 0)
            {
              operator delete((void *)__src[7].tv_nsec);
              if ((SHIBYTE(__src[7].tv_sec) & 0x80000000) == 0)
              {
LABEL_664:
                if (!LOBYTE(__src[5].tv_nsec))
                {
LABEL_670:
                  if (LOBYTE(__src[3].tv_nsec) && SHIBYTE(__src[3].tv_sec) < 0)
                    operator delete((void *)__src[2].tv_sec);
                  if (SHIBYTE(__src[1].tv_nsec) < 0)
                    operator delete((void *)__src[0].tv_nsec);
                  if (v713)
                    free(v713);
                  goto LABEL_677;
                }
LABEL_668:
                if (SHIBYTE(__src[5].tv_sec) < 0)
                  operator delete((void *)__src[4].tv_sec);
                goto LABEL_670;
              }
            }
            else if ((SHIBYTE(__src[7].tv_sec) & 0x80000000) == 0)
            {
              goto LABEL_664;
            }
            operator delete((void *)__src[6].tv_sec);
            if (!LOBYTE(__src[5].tv_nsec))
              goto LABEL_670;
            goto LABEL_668;
          }
          v618 = sub_210219C18();
          v619 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v619 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (!atomic_load(&qword_254A5A450))
          {
LABEL_608:
            if (os_signpost_enabled((os_log_t)*v618))
            {
              LODWORD(__src[0].tv_sec) = 67109120;
              HIDWORD(__src[0].tv_sec) = v616;
              _os_signpost_emit_unreliably_with_name_impl();
            }
            goto LABEL_610;
          }
          LODWORD(__src[0].tv_sec) = 67109120;
          HIDWORD(__src[0].tv_sec) = v616;
          v621 = (char *)_os_log_send_and_compose_impl();
          v622 = strlen(v621);
          v1012[0] = 0;
          pthread_threadid_np(0, v1012);
          v623 = v1012[0];
          timespec_get((timespec *)v1012, 1);
          sub_210219E20(__src, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v618 + 1), (__int128 *)(v618 + 5), "[Mono Dynamic Motion Initialization] Failed with status: %d.", 0x3CuLL, v621, v622, v623, v1012);
          std::mutex::lock(&stru_254A5A410);
          v624 = qword_254A5A458;
          for (i = unk_254A5A460; v624 != i; v624 += 40)
          {
            v626 = *(_QWORD *)(v624 + 32);
            if (!v626)
              sub_20E86D37C();
            (*(void (**)(uint64_t, timespec *))(*(_QWORD *)v626 + 48))(v626, __src);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (SHIBYTE(__src[8].tv_nsec) < 0)
          {
            operator delete((void *)__src[7].tv_nsec);
            v8 = v954;
            if ((SHIBYTE(__src[7].tv_sec) & 0x80000000) == 0)
            {
LABEL_595:
              if (!LOBYTE(__src[5].tv_nsec))
              {
LABEL_601:
                if (LOBYTE(__src[3].tv_nsec) && SHIBYTE(__src[3].tv_sec) < 0)
                  operator delete((void *)__src[2].tv_sec);
                if (SHIBYTE(__src[1].tv_nsec) < 0)
                  operator delete((void *)__src[0].tv_nsec);
                if (v621)
                  free(v621);
                goto LABEL_608;
              }
LABEL_599:
              if (SHIBYTE(__src[5].tv_sec) < 0)
                operator delete((void *)__src[4].tv_sec);
              goto LABEL_601;
            }
          }
          else
          {
            v8 = v954;
            if ((SHIBYTE(__src[7].tv_sec) & 0x80000000) == 0)
              goto LABEL_595;
          }
          operator delete((void *)__src[6].tv_sec);
          if (!LOBYTE(__src[5].tv_nsec))
            goto LABEL_601;
          goto LABEL_599;
        }
LABEL_530:
        v541 = *(_QWORD *)(v10 + 224);
        bzero(__src, 0x900uLL);
        v545 = 0;
        v546 = 0;
        memset(v1018, 0, sizeof(v1018));
        v1017 = 0u;
        v1015 = 0u;
        memset(v1016, 0, sizeof(v1016));
        v547 = -384;
        v548 = 1;
        v1013 = 0u;
        v1014 = 0u;
        v549 = 60;
        *(_OWORD *)v1012 = 0u;
        do
        {
          v550 = v548 + *(_QWORD *)(v10 + 400);
          v551 = *(_QWORD *)(v10 + 376);
          v552 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v10 + 384) - v551) >> 4);
          v553 = *(_QWORD *)(*(_QWORD *)(v551 + 48 * ((v550 - 1) % v552)) + 8);
          v554 = *(_QWORD *)(*(_QWORD *)(v551 + 48 * (v550 % v552)) + 8);
          v542.f64[0] = *(float64_t *)(v554 + 16);
          v555 = *(double *)(v554 + 8) + v542.f64[0] - (*(double *)(v553 + 8) + *(double *)(v553 + 16));
          v556 = &__src[v549];
          v556->tv_sec = 0x3FF0000000000000;
          v556[9].tv_nsec = 0x3FF0000000000000;
          v556[19].tv_sec = 0x3FF0000000000000;
          v556[27].tv_sec = 0xBFF0000000000000;
          v556[36].tv_nsec = 0xBFF0000000000000;
          v556[46].tv_sec = 0xBFF0000000000000;
          v557 = &__src[v545];
          *(double *)&v557[114].tv_sec = -v555;
          *(double *)&v557[123].tv_nsec = -v555;
          *(double *)&v557[133].tv_sec = -v555;
          *(double *)&v556[28].tv_nsec = -v555;
          *(double *)&v556[38].tv_sec = -v555;
          *(double *)&v556[47].tv_nsec = -v555;
          v558 = v555 * -0.5;
          v559 = v555 * (v555 * -0.5);
          *(double *)&v557[115].tv_nsec = v559;
          *(double *)&v557[125].tv_sec = v559;
          *(double *)&v557[134].tv_nsec = v559;
          sub_20F0AF320((_QWORD *)v10, v548, (uint64_t)object, (uint64_t)&v1021, (uint64_t)v1019, v559, v558, v542, _D3, v544);
          v560.f64[0] = *(float64_t *)(v541 + 16);
          v561 = *(int64x2_t *)(v541 + 32);
          v562 = *(double *)(v541 + 80);
          _Q5 = *(float64x2_t *)(v541 + 64);
          v564 = *(double *)(v10 + v547 + 1096);
          v565 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v541, v561);
          _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v541, v561);
          v560.f64[1] = *(float64_t *)(v541 + 48);
          _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v565, *(double *)(v10 + v547 + 1080)), _Q3, *(float64x2_t *)(v10 + v547 + 1080), 1), v560, v564);
          _D7 = *(_QWORD *)(v10 + v547 + 1088);
          __asm { FMLA            D1, D7, V5.D[1] }
          v570 = _D1 + v562 * v564;
          _D17 = *(_QWORD *)(v10 + v547 + 1032);
          v572 = *(float64x2_t *)(v10 + v547 + 1016);
          _Q21.f64[0] = *(float64_t *)(v541 + 112);
          _Q22 = *(float64x2_t *)(v541 + 96);
          __asm { FMLA            D6, D17, V22.D[1] }
          v576.f64[0] = _D6 + *(double *)(v10 + v547 + 1064) * _Q21.f64[0];
          *(_QWORD *)&v576.f64[0] = *(_OWORD *)&vsubq_f64(v576, _Q21);
          v577 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v10 + v547 + 984), _Q22.f64[0]), v572, _Q22, 1), *(float64x2_t *)(v10 + v547 + 1048), _Q21.f64[0]), _Q22);
          v578 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v565, v577.f64[0]), _Q3, v577, 1), v560, v576.f64[0]);
          _Q2 = vmulq_f64(_Q5, v577);
          _Q3.f64[0] = v577.f64[1];
          __asm { FMLA            D2, D3, V5.D[1] }
          _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v562, v576.f64[0]);
          v580 = (float64x2_t *)((char *)&v1018[v545] + 8);
          v544 = *(float64x2_t *)(v10 + v546 + 1272);
          _Q5.f64[0] = *(float64_t *)(v10 + v546 + 1312);
          v581 = *(float64x2_t *)(v10 + v546 + 1296);
          v582 = (float64x2_t *)(v10 + v546 + 1320);
          v577.f64[0] = *(float64_t *)(v10 + v546 + 1336);
          v583 = *v582;
          _V19.D[1] = v1019[1];
          v585 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v544, *(double *)v1019), v581, *(float64x2_t *)v1019, 1), *v582, v1020);
          __asm { FMLA            D21, D5, V19.D[1] }
          v580[-1].f64[1] = _Q21.f64[0] + v577.f64[0] * v1020;
          *(float64x2_t *)((char *)v580 - 24) = v585;
          v572.f64[0] = v1022;
          *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vsubq_f64(v572, _Q2);
          _Q16 = vsubq_f64(v1021, v578);
          __asm { FMLA            D19, D5, V16.D[1] }
          *v580 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v544, _Q16.f64[0]), v581, _Q16, 1), v583, _Q2.f64[0]);
          v580[1].f64[0] = vmlad_n_f64(_D19, v577.f64[0], _Q2.f64[0]);
          v542 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v544, _Q0.f64[0]), v581, _Q0, 1), v583, v570);
          __asm { FMLA            D3, D5, V0.D[1] }
          ++v548;
          *(float64x2_t *)((char *)v557 + 2280) = v542;
          *(double *)&v557[143].tv_nsec = _D3 + v577.f64[0] * v570;
          v546 += 72;
          v549 -= 30;
          v545 -= 3;
          v547 += 128;
        }
        while (v547);
        object[288] = object;
        v1024 = 0;
        memcpy(object, __src, 0x900uLL);
        v1025 = 2;
        v1021.f64[0] = 0.0;
        LODWORD(v1019[0]) = 0;
        sub_20E8BECF4();
        v588 = (int)v1019[0];
        if (!LODWORD(v1019[0]))
        {
          v589 = operator new((8 * (int)v1021.f64[0] + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
          sub_20E8BECF4();
          MEMORY[0x212BC6368](v589, 0x1000C8000313F17);
          v588 = (int)v1019[0];
        }
        v1025 = v588 != 0;
        v1021.f64[0] = 0.0;
        if (!sub_20E8BEA4C())
        {
          v940 = operator new((8 * (int)v1021.f64[0] + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
          sub_20E8BEA4C();
          MEMORY[0x212BC6368](v940, 0x1000C8000313F17);
        }
        LODWORD(v1021.f64[0]) = 0;
        sub_20E8BED2C();
        if ((v1012[0] & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
          || (v1012[1] & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_554;
        }
        v7 = v957;
        if (((unint64_t)v1013 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*((_QWORD *)&v1013 + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || ((unint64_t)v1014 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*((_QWORD *)&v1014 + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || ((unint64_t)v1015 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*((_QWORD *)&v1015 + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (v1016[0].i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          v45 = 6;
          goto LABEL_557;
        }
        if ((v1016[0].i64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (v1016[1].i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (v1016[1].i64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (v1017.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (v1017.i64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v1018[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*((_QWORD *)&v1018[0] + 1) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
LABEL_554:
          v45 = 6;
          goto LABEL_555;
        }
        *(_QWORD *)&_Q1.f64[1] = v1017.i64[1];
        _D4 = *(double *)&v1017.i64[1];
        __asm { FMLA            D3, D4, V1.D[1] }
        if (vabdd_f64(sqrt(_D3 + *(double *)v1018 * *(double *)v1018), *(double *)(v10 + 176)) > *(double *)(v10 + 184))
        {
          v45 = 7;
LABEL_555:
          v7 = v957;
          goto LABEL_557;
        }
        _V6.D[1] = v1012[1];
        _D4 = v1012[1];
        v1006 = *(double *)v1012;
        __asm { FMLA            D3, D4, V6.D[1] }
        v981 = *(double *)&v1013;
        if (sqrt(_D3 + v981 * v981) > *(double *)(v10 + 192))
        {
          v45 = 8;
          goto LABEL_555;
        }
        if (*((double *)v1018 + 1) < *(double *)(v10 + 200))
        {
          v45 = 9;
          goto LABEL_555;
        }
        *(_QWORD *)&_D2 = vextq_s8(v1017, v1017, 8uLL).u64[0];
        *(_QWORD *)&v977 = vextq_s8(*(int8x16_t *)v1012, *(int8x16_t *)v1012, 8uLL).u64[0];
        _Q17 = *(int8x16_t *)(v10 + 1488);
        v960 = *(double *)_Q17.i64;
        *(_QWORD *)&v963 = vextq_s8(_Q17, _Q17, 8uLL).u64[0];
        _Q18 = *(int8x16_t *)(v10 + 1512);
        v951 = *(double *)_Q18.i64;
        *(_QWORD *)&v953 = vextq_s8(_Q18, _Q18, 8uLL).u64[0];
        v862 = *(double *)(v10 + 1552);
        _Q19 = *(float64x2_t *)(v10 + 1536);
        v947 = _Q19.f64[0];
        *(_QWORD *)&v949 = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
        v864.f64[0] = *(float64_t *)(v10 + 1504);
        v864.f64[1] = *(float64_t *)(v10 + 1528);
        _Q3 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q17, (int64x2_t)_Q18), *(double *)v1017.i64), (float64x2_t)vzip2q_s64((int64x2_t)_Q17, (int64x2_t)_Q18), _D2), v864, *(double *)v1018);
        _Q4 = vmulq_f64(_Q19, (float64x2_t)v1017);
        __asm { FMLA            D4, D2, V19.D[1] }
        _Q4.f64[0] = _Q4.f64[0] + v862 * *(double *)v1018;
        __asm { FMLA            D5, D2, V17.D[1] }
        v969 = *(double *)(v10 + 1528);
        v973 = *(double *)(v10 + 1504);
        __asm { FMLA            D6, D2, V18.D[1] }
        _D6 = _D6 + *(double *)v1018 * v969;
        __asm { FMLA            D1, D2, V19.D[1] }
        v966 = v862;
        _Q0.f64[0] = _D1 + *(double *)v1018 * v862;
        __asm { FMLA            D1, D6, V3.D[1] }
        _Q0.f64[0] = sqrt(_D1 + _Q0.f64[0] * _Q4.f64[0]);
        _Q1.f64[0] = 1.0;
        _Q0.f64[0] = 1.0 / _Q0.f64[0];
        _Q3 = vmulq_n_f64(_Q3, _Q0.f64[0]);
        v872 = vmulq_f64(_Q4, _Q0).f64[0];
        _D8 = 0.0;
        _Q0.f64[0] = _Q3.f64[1] + 0.0 * v872;
        v874 = -_Q3.f64[0] - 0.0 * v872;
        _Q4.f64[0] = vmuld_lane_f64(0.0, _Q3, 1) - 0.0 * _Q3.f64[0];
        v591.f64[0] = sqrt(_Q0.f64[0] * _Q0.f64[0] + v874 * v874 + _Q4.f64[0] * _Q4.f64[0]);
        __asm { FMLA            D7, D8, V3.D[1] }
        v877 = _D7 - v872;
        if (v591.f64[0] >= 2.22507386e-308)
        {
          if (v591.f64[0] < 2.22044605e-16)
          {
            _Q1.f64[0] = 1.0 / v591.f64[0];
            v883 = _Q4.f64[0] * (1.0 / v591.f64[0]);
            _Q4 = vmulq_f64(_Q4, _Q1);
            _Q0.f64[1] = v874;
            _Q0 = vmulq_n_f64(_Q0, _Q1.f64[0]);
            _D1 = v874 * _Q1.f64[0];
            *(_QWORD *)&v874 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
            __asm { FMLA            D6, D1, V0.D[1] }
            v591.f64[0] = sqrt(vmlad_n_f64(_D6, v883, _Q4.f64[0]));
          }
          v591.f64[0] = 1.0 / v591.f64[0];
          v886 = vmulq_f64(_Q4, v591);
          _Q0.f64[1] = v874;
          v887 = vmulq_n_f64(_Q0, v591.f64[0]);
          v888 = fmax(fmin(v877, 1.0), -1.0);
          v889 = sqrt(1.0 - v888 * v888);
          v890 = vmulq_n_f64(v887, v886.f64[0]);
          v886.f64[0] = vmuld_n_f64(v886.f64[0], v886.f64[0]);
          _Q1.f64[0] = 1.0 - v888;
          v891 = vmulq_n_f64(v890, 1.0 - v888);
          _Q1.f64[0] = v888 + vmulq_f64(_Q1, v886).f64[0];
          _D8 = vmuld_lane_f64(v889, v887, 1) + v891.f64[0];
          v878 = v891.f64[1] - v889 * v887.f64[0];
        }
        else if (v877 <= 0.0)
        {
          _Q1.f64[0] = -1.0;
          v878 = -0.0;
        }
        else
        {
          v878 = 0.0;
        }
        v892 = atan2(-v878, _Q1.f64[0]);
        v893 = asin(_D8);
        v894 = __sincos_stret(v892);
        v895 = __sincos_stret(v893);
        v896.f64[0] = v894.__sinval * v895.__sinval;
        v945 = -(v894.__cosval * v895.__sinval);
        *(double *)&v897 = v895.__sinval;
        *((double *)&v897 + 1) = v894.__sinval * v895.__sinval;
        *(double *)&v898 = v894.__cosval;
        *((double *)&v898 + 1) = -(v894.__sinval * v895.__cosval);
        v896.f64[1] = v894.__cosval;
        v899.f64[0] = v945;
        v899.f64[1] = v894.__sinval;
        v943 = *((double *)&v898 + 1);
        *(_OWORD *)(v957 + 600) = 0u;
        *(_OWORD *)(v957 + 616) = 0u;
        *(_OWORD *)(v957 + 632) = 0u;
        *(_OWORD *)(v957 + 648) = 0u;
        *(_OWORD *)(v957 + 584) = 0u;
        *(_OWORD *)(v957 + 568) = 0u;
        *(double *)(v954 + 64) = v894.__cosval * v895.__cosval;
        *(_OWORD *)(v954 + 32) = v898;
        *(float64x2_t *)(v954 + 48) = v899;
        *(_OWORD *)v954 = *(unint64_t *)&v895.__cosval;
        *(_OWORD *)(v954 + 16) = v897;
        *(double *)(v954 + 112) = (v895.__sinval * v960
                                 + *((double *)&v898 + 1) * v951
                                 + v894.__cosval * v895.__cosval * v947)
                                * v1006
                                + (v895.__sinval * v963
                                 + *((double *)&v898 + 1) * v953
                                 + v894.__cosval * v895.__cosval * v949)
                                * v977
                                + (v895.__sinval * v973
                                 + *((double *)&v898 + 1) * v969
                                 + v894.__cosval * v895.__cosval * v966)
                                * v981;
        *(float64x2_t *)(v954 + 96) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v895.__cosval, v960), v896, v951), v899, v947), v1006), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v895.__cosval, v963), v896, v953), v899, v949), v977), vmlaq_n_f64(
                                          vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v895.__cosval, v973), v896, v969), v899, v966), v981);
        v900 = *(_QWORD *)(v10 + 16);
        v1007 = *(double *)(v10 + 24);
        v901 = *(_QWORD *)(v10 + 8);
        bzero((void *)(v957 + 688), 0x6F0uLL);
        v902.f64[0] = v895.__cosval;
        v902.f64[1] = v894.__sinval * v895.__sinval;
        v903.f64[0] = 0.0;
        v903.f64[1] = v894.__cosval;
        v904.i64[0] = *(_QWORD *)&v895.__sinval;
        v905.f64[0] = v895.__sinval;
        v905.f64[1] = v943;
        v906 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v902, v1007), (float64x2_t)0, v903), (float64x2_t)0, v905);
        v907 = v945 * v1007 + v894.__sinval * 0.0 + v894.__cosval * v895.__cosval * 0.0;
        v908 = vmulq_f64(v902, (float64x2_t)0);
        v909 = vmlaq_f64(vmlaq_n_f64(v908, v903, v1007), (float64x2_t)0, v905);
        v910 = v945 * 0.0 + v894.__sinval * v1007 + v894.__cosval * v895.__cosval * 0.0;
        v911 = vmlaq_n_f64(vmlaq_f64(v908, (float64x2_t)0, v903), v905, v1007);
        v903.f64[0] = v945 * 0.0 + v894.__sinval * 0.0 + v894.__cosval * v895.__cosval * v1007;
        v912.i64[0] = *(_QWORD *)&v895.__cosval;
        v913 = v894.__sinval * v895.__sinval;
        *(double *)(v954 + 184) = v907 * v895.__cosval + v910 * 0.0 + v903.f64[0] * v895.__sinval;
        *(float64x2_t *)(v954 + 168) = vmlaq_n_f64(vmlaq_f64(vmulq_n_f64(v906, v895.__cosval), (float64x2_t)0, v909), v911, v895.__sinval);
        *(double *)(v954 + 304) = v907 * (v894.__sinval * v895.__sinval) + v910 * v894.__cosval + v903.f64[0] * v943;
        *(float64x2_t *)(v954 + 288) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v906, v894.__sinval * v895.__sinval), v909, v894.__cosval), v911, v943);
        *(double *)(v954 + 424) = v907 * v945 + v910 * v894.__sinval + v903.f64[0] * (v894.__cosval * v895.__cosval);
        *(float64x2_t *)(v954 + 408) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v906, v945), v909, v894.__sinval), v911, v894.__cosval * v895.__cosval);
        *(_QWORD *)(v957 + 1048) = v901;
        *(_QWORD *)(v957 + 1176) = v901;
        *(_QWORD *)(v957 + 1304) = v901;
        v914 = *(double **)(v10 + 32);
        if (*(_QWORD *)(v10 + 40) - (_QWORD)v914 == 24)
        {
          cosval = v894.__cosval;
          v916 = *(_QWORD *)&v943;
          *(double *)&v917 = v945;
          sinval = v894.__sinval;
          v919 = v894.__cosval * v895.__cosval;
          v920.f64[0] = 0.0;
          v921.i64[0] = *(_QWORD *)&v895.__cosval;
          v922 = 0.0;
          v923.i64[0] = *(_QWORD *)&v895.__sinval;
          *(double *)v924.i64 = v894.__sinval * v895.__sinval;
          *(double *)v925.i64 = v943;
          v926 = v894.__sinval;
        }
        else
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/include/VIO/BatchLeastSquaresUnsanitized/InitializationHelper.h", 72, (uint64_t)"initial_velocity_variance_imu.size() == cv_types::InertialCovariance::kVelocityDof", 82, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v914 = *(double **)(v10 + 32);
          v923.i64[0] = *(_QWORD *)(v954 + 16);
          v921 = *(int8x16_t *)v954;
          v925.i64[0] = *(_QWORD *)(v954 + 40);
          v924 = *(int64x2_t *)(v954 + 24);
          cosval = *(double *)(v954 + 32);
          v919 = *(double *)(v954 + 64);
          *(_QWORD *)&v926 = vextq_s8(*(int8x16_t *)(v954 + 48), *(int8x16_t *)(v954 + 48), 8uLL).u64[0];
          *(_QWORD *)&v922 = vextq_s8(v921, v921, 8uLL).u64[0];
          v917 = *(_OWORD *)(v954 + 48);
          sinval = *(double *)(v954 + 56);
          v920.f64[0] = *(float64_t *)(v954 + 8);
          v904 = (int8x16_t)vzip1q_s64(v923, v925);
          v916 = vextq_s8(v904, v904, 8uLL).u64[0];
          v912 = (int8x16_t)vzip1q_s64(*(int64x2_t *)v954, v924);
          *(_QWORD *)&v913 = vextq_s8(v912, v912, 8uLL).u64[0];
        }
        v927 = v914[1];
        v928 = v914[2];
        *(_QWORD *)&v929.f64[0] = v904.i64[0];
        *(_QWORD *)&v929.f64[1] = v916;
        *(_QWORD *)&v930.f64[0] = v912.i64[0];
        v930.f64[1] = v913;
        v931 = cosval;
        v920.f64[1] = cosval;
        v932 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v930, *v914), (float64x2_t)0, v920), (float64x2_t)0, v929);
        v933 = *(double *)&v917;
        v934 = *(double *)&v917 * *v914 + sinval * 0.0 + v919 * 0.0;
        v935 = vmulq_f64(v930, (float64x2_t)0);
        v936 = vmlaq_f64(vmlaq_n_f64(v935, v920, v927), (float64x2_t)0, v929);
        v937 = v933 * 0.0 + sinval * v927 + v919 * 0.0;
        v938 = vmlaq_n_f64(vmlaq_f64(v935, (float64x2_t)0, v920), v929, v928);
        v939 = v933 * 0.0 + sinval * 0.0 + v919 * v928;
        v8 = v954;
        v595 = v957;
        *(double *)(v954 + 952) = v934 * *(double *)v921.i64 + v937 * v922 + v939 * *(double *)v923.i64;
        *(float64x2_t *)(v954 + 936) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v932, *(double *)v921.i64), v936, v922), v938, *(double *)v923.i64);
        *(double *)(v954 + 1072) = v934 * *(double *)v924.i64 + v937 * v931 + v939 * *(double *)v925.i64;
        *(float64x2_t *)(v954 + 1056) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v932, *(double *)v924.i64), v936, v931), v938, *(double *)v925.i64);
        *(double *)(v954 + 1192) = v934 * v933 + v937 * v926 + v939 * v919;
        *(float64x2_t *)(v954 + 1176) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v932, v933), v936, v926), v938, v919);
        *(_QWORD *)(v957 + 1816) = v900;
        *(_QWORD *)(v957 + 1944) = v900;
        *(_QWORD *)(v957 + 2072) = v900;
        *(_DWORD *)(v10 + 368) = 0;
        sub_20F0ABF2C(v954, 2u);
        *(_DWORD *)(v957 + 3392) = 0;
        *(_BYTE *)(v957 + 489) = 1;
LABEL_783:
        v5 = v996;
        v6 = __x;
        if (!*(_BYTE *)(v595 + 489))
          return;
        goto LABEL_33;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 247, (uint64_t)"config_.relative_pose_5dof_estimation_approach < RelativePoseEstimation5DOFApproachType::EnumCount && \"Invalid enum.\"", 117, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))goto LABEL_530;
LABEL_878:
      abort();
    }
  }
  if (*(_BYTE *)(v1 + 8))
  {
    v16 = *(_QWORD *)(v1 + 3376);
    if (v16)
    {
      v955 = v1 + 496;
      v996 = v4;
      __x = v2;
      v1001 = v2 + 3;
      if (v2[3] == v2[4])
      {
        v492 = *(void ***)(v16 + 376);
        v493 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v16 + 384) - (_QWORD)v492) >> 4);
        sub_20F0ADC00(v16 + 376, v492);
        v494 = *(_QWORD *)(v16 + 376);
        v495 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v16 + 384) - v494) >> 4);
        if (v493 <= v495)
        {
          if (v493 < v495)
            sub_20F0ADC00(v16 + 376, (void **)(v494 + 48 * v493));
        }
        else
        {
          sub_20F0AE8BC(v16 + 376, v493 - v495);
        }
        *(_QWORD *)(v16 + 400) = 0;
        *(_QWORD *)(v16 + 408) = 0;
        *(_QWORD *)(v16 + 416) = 0;
        v537 = *(void ***)(v16 + 424);
        v538 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v16 + 432) - (_QWORD)v537) >> 3);
        sub_20F0ADE2C(v16 + 424, v537);
        v539 = *(_QWORD *)(v16 + 424);
        v540 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v16 + 432) - v539) >> 3);
        if (v538 <= v540)
        {
          if (v538 < v540)
            sub_20F0ADE2C(v16 + 424, (void **)(v539 + 24 * v538));
        }
        else
        {
          sub_20F0AEC94(v16 + 424, v538 - v540);
        }
        *(_QWORD *)(v16 + 448) = 0;
        *(_QWORD *)(v16 + 456) = 0;
        *(_QWORD *)(v16 + 464) = 0;
        v50 = 1;
        goto LABEL_680;
      }
      v17 = *v2;
      v18 = v2[1];
      while (v17 != v18)
      {
        v19 = *(_QWORD *)(v17 + 8);
        v20 = *(_QWORD *)(v17 + 16);
        while (v19 != v20)
        {
          if (*(_BYTE *)(v19 + 120))
          {
            memset(object, 0, 24);
            v21 = *(_QWORD *)(v19 + 104) - *(_QWORD *)(v19 + 96);
            if (v21)
            {
              if (v21 < 0)
                sub_20E867F44();
            }
          }
          v19 += 440;
        }
        v17 += 104;
      }
      sub_20F0AEEE8((uint64_t *)(v16 + 376), v2);
      sub_20F0AF1F8((uint64_t *)(v16 + 424), *v9, v9[1]);
      if (*(_QWORD *)(v16 + 416) > 2uLL)
      {
        *(_QWORD *)(v16 + 912) = 0;
        *(_OWORD *)(v16 + 880) = 0u;
        *(_OWORD *)(v16 + 896) = 0u;
        *(_OWORD *)(v16 + 864) = 0u;
        *(_QWORD *)(v16 + 856) = 0x3FF0000000000000;
        *(_QWORD *)(v16 + 888) = 0x3FF0000000000000;
        *(_QWORD *)(v16 + 920) = 0x3FF0000000000000;
        *(_OWORD *)(v16 + 1096) = 0u;
        *(_QWORD *)(v16 + 1128) = 0;
        *(_OWORD *)(v16 + 1080) = 0u;
        *(_OWORD *)(v16 + 1112) = 0u;
        *(_QWORD *)(v16 + 1072) = 0x3FF0000000000000;
        *(_QWORD *)(v16 + 1104) = 0x3FF0000000000000;
        *(_QWORD *)(v16 + 1136) = 0x3FF0000000000000;
        sub_20F0AF320((_QWORD *)v16, 1u, v16 + 928, 0, 0, 0.0, v46, v47, v48, v49);
        v496 = *(float64x2_t *)(v16 + 1072);
        _Q2.f64[0] = *(float64_t *)(v16 + 1112);
        v498 = *(float64x2_t *)(v16 + 1096);
        v499.f64[0] = *(float64_t *)(v16 + 1136);
        v500 = *(float64x2_t *)(v16 + 1120);
        v501 = *(double *)(v16 + 944);
        _Q7 = *(float64x2_t *)(v16 + 928);
        v503 = *(double *)(v16 + 968);
        _Q17 = *(float64x2_t *)(v16 + 952);
        v505 = *(double *)(v16 + 992);
        _Q19 = *(float64x2_t *)(v16 + 976);
        v507 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v496, _Q7.f64[0]), v498, _Q7, 1), v500, v501);
        __asm { FMLA            D21, D2, V7.D[1] }
        v509 = _D21 + v499.f64[0] * v501;
        v510 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v496, _Q17.f64[0]), v498, _Q17, 1), v500, v503);
        __asm { FMLA            D21, D2, V17.D[1] }
        v512 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v496, _Q19.f64[0]), v498, _Q19, 1), v500, v505);
        __asm { FMLA            D0, D2, V19.D[1] }
        *(float64x2_t *)(v16 + 1144) = v507;
        *(double *)(v16 + 1160) = v509;
        v514 = _D0 + v499.f64[0] * v505;
        *(float64x2_t *)(v16 + 1168) = v510;
        *(double *)(v16 + 1184) = _D21 + v499.f64[0] * v503;
        *(float64x2_t *)(v16 + 1192) = v512;
        *(double *)(v16 + 1208) = v514;
        sub_20F0AF320((_QWORD *)v16, 2u, v16 + 1000, 0, 0, v514, v512.f64[0], _Q2, v498.f64[0], v499);
        v515 = *(float64x2_t *)(v16 + 1144);
        _D2 = *(_QWORD *)(v16 + 1184);
        v517 = *(float64x2_t *)(v16 + 1168);
        v518 = *(double *)(v16 + 1208);
        v519 = *(double *)(v16 + 1016);
        _Q7 = *(float64x2_t *)(v16 + 1000);
        v521 = *(double *)(v16 + 1040);
        _Q17 = *(float64x2_t *)(v16 + 1024);
        v523 = *(double *)(v16 + 1064);
        _Q19 = *(float64x2_t *)(v16 + 1048);
        v525 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v515, _Q7.f64[0]), v517, _Q7, 1), *(float64x2_t *)(v16 + 1192), v519);
        __asm { FMLA            D21, D2, V7.D[1] }
        v527 = _D21 + v518 * v519;
        v528 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v515, _Q17.f64[0]), v517, _Q17, 1), *(float64x2_t *)(v16 + 1192), v521);
        __asm { FMLA            D21, D2, V17.D[1] }
        v530 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v515, _Q19.f64[0]), v517, _Q19, 1), *(float64x2_t *)(v16 + 1192), v523);
        __asm { FMLA            D0, D2, V19.D[1] }
        *(float64x2_t *)(v16 + 1216) = v525;
        *(double *)(v16 + 1232) = v527;
        *(float64x2_t *)(v16 + 1240) = v528;
        *(double *)(v16 + 1256) = _D21 + v518 * v521;
        *(float64x2_t *)(v16 + 1264) = v530;
        *(double *)(v16 + 1280) = _D0 + v518 * v523;
        v532 = *(_DWORD *)(v16 + 152);
        if (v532 == 1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 231, (uint64_t)"config_.relative_pose_6dof_estimation_approach < RelativePoseEstimation6DOFApproachType::EnumCount && \"Invalid enum.\"", 117, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_878;
          }
        }
        else if (!v532 && (sub_20F0BD6B0(v16) & 1) == 0)
        {
LABEL_681:
          ++*(_DWORD *)(v7 + 3392);
          sub_20E863438((uint64_t)object);
          v8 = v955;
          v595 = v957;
          v715 = *(unsigned int *)(*(_QWORD *)(v957 + 3376) + 368);
          if (v715 >= 0xA
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 55, (uint64_t)"index < size", 12, (uint64_t)"Invalid access: Index out of range.", 35, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          sub_20E86A980(&object[2], (uint64_t)(&off_24C9F8A28)[2 * v715], (uint64_t)(&off_24C9F8A28)[2 * v715 + 1]);
          sub_20F0A1EF4(&v1009);
          if (**(int **)(v1009 + 56) <= 3)
          {
            v722 = *(unsigned __int8 *)(v1009 + 72);
            v723 = sub_20E8C31DC(v1009, "OSLogSurrogateAppender", 1, 0);
            v724 = v723 ? v723 + 16 : 0;
            if (v722 || v723)
            {
              v1012[0] = (__uint64_t)&v1009;
              v1012[1] = std::chrono::steady_clock::now().__d_.__rep_;
              *(std::chrono::system_clock::time_point *)&v1013 = std::chrono::system_clock::now();
              DWORD2(v1013) = 3;
              *(_QWORD *)&v1014 = "unknown file";
              DWORD2(v1014) = 324;
              *((_QWORD *)&v1015 + 1) = 0;
              v1016[0].i64[0] = 0;
              *(_QWORD *)&v1015 = "unknown function";
              sub_20E923E88(object, &v1021);
              if (v1022 >= 0.0)
                v725 = COERCE_DOUBLE(&v1021);
              else
                v725 = v1021.f64[0];
              v1008 = v725;
              v726 = *(_QWORD *)v1012[0];
              v727 = (uint64_t *)(*(_QWORD *)v1012[0] + 16);
              if (*(char *)(*(_QWORD *)v1012[0] + 39) < 0)
              {
                v729 = *(char **)(v726 + 16);
                v728 = *(_QWORD *)(v726 + 24);
              }
              else
              {
                v728 = *(unsigned __int8 *)(*(_QWORD *)v1012[0] + 39);
                v729 = (char *)(*(_QWORD *)v1012[0] + 16);
              }
              category = v729;
              v1011 = v728;
              v730 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v730 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)__src);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__src);
                if (LOBYTE(__src[1].tv_nsec) && SHIBYTE(__src[1].tv_sec) < 0)
                  operator delete((void *)__src[0].tv_sec);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
                v595 = v957;
              }
              v731 = (char *)byte_254A4A4F8[23];
              if (byte_254A4A4F8[23] >= 0)
              {
                v732 = byte_254A4A4F8;
              }
              else
              {
                v731 = *(char **)&byte_254A4A4F8[8];
                v732 = *(char **)byte_254A4A4F8;
              }
              v1019[0] = v732;
              v1019[1] = v731;
              __src[0].tv_sec = (__darwin_time_t)os_log_create(v732, category);
              sub_20E86E5A8(&__src[0].tv_nsec, (uint64_t)v1019);
              sub_20E86E5A8(&__src[2].tv_nsec, (uint64_t)&category);
              v733 = __src[0].tv_sec;
              sub_20E86E44C((uint64_t)__src);
              sub_20F0C8A7C(v724, v727, v733, OS_LOG_TYPE_INFO, (const char **)&v1008);
              if (SHIBYTE(v1022) < 0)
                operator delete(*(void **)&v1021.f64[0]);
              if (v722)
              {
                sub_20E923E88(object, __src);
                if (__src[1].tv_sec >= 0)
                  v734 = (const char *)__src;
                else
                  v734 = (const char *)__src[0].tv_sec;
                sub_20E8C003C((uint64_t)v1012, "[Dynamic Motion Initialization] Failed with status: %s.", v734);
                if (SHIBYTE(__src[1].tv_sec) < 0)
                  operator delete((void *)__src[0].tv_sec);
                sub_20E863570((uint64_t)v1012);
              }
              sub_20E863714((uint64_t)v1012);
            }
          }
          v735 = *(_DWORD *)(*(_QWORD *)(v595 + 3376) + 368);
          v736 = atomic_load((unsigned __int8 *)&qword_254A61FB8);
          if ((v736 & 1) == 0 && __cxa_guard_acquire(&qword_254A61FB8))
          {
            qword_254A62018 = 0;
            qword_254A62020 = 0;
            v880 = operator new(0x20uLL);
            v880[1] = 0;
            v880[2] = 0;
            *v880 = &off_24C9F8458;
            v880[3] = 0;
            qword_254A62018 = (uint64_t)(v880 + 3);
            qword_254A62020 = (uint64_t)v880;
            __cxa_atexit((void (*)(void *))sub_20F04FB84, &qword_254A62018, &dword_20E81F000);
            __cxa_guard_release(&qword_254A61FB8);
            v595 = v957;
          }
          if (!sub_20F04FBEC((uint64_t)&qword_254A62018, 0, v716, v717, v718, v719, v720, v721, v735))
          {
LABEL_730:
            if (*(_DWORD *)(v595 + 3392) < *(_DWORD *)(v595 + 484))
              goto LABEL_780;
            sub_20F0A1EF4(&category);
            v627 = (int *)(v595 + 3392);
            if (**((int **)category + 7) <= 3)
            {
              v748 = category[72];
              v749 = sub_20E8C31DC((uint64_t)category, "OSLogSurrogateAppender", 1, 0);
              v750 = v749 ? v749 + 16 : 0;
              if (v748 || v749)
              {
                v1012[0] = (__uint64_t)&category;
                v1012[1] = std::chrono::steady_clock::now().__d_.__rep_;
                *(std::chrono::system_clock::time_point *)&v1013 = std::chrono::system_clock::now();
                DWORD2(v1013) = 3;
                *(_QWORD *)&v1014 = "unknown file";
                DWORD2(v1014) = 336;
                *((_QWORD *)&v1015 + 1) = 0;
                v1016[0].i64[0] = 0;
                *(_QWORD *)&v1015 = "unknown function";
                v751 = *(_QWORD *)v1012[0];
                v752 = (uint64_t *)(*(_QWORD *)v1012[0] + 16);
                if (*(char *)(*(_QWORD *)v1012[0] + 39) < 0)
                {
                  v754 = *(char **)(v751 + 16);
                  v753 = *(char **)(v751 + 24);
                }
                else
                {
                  v753 = (char *)*(unsigned __int8 *)(*(_QWORD *)v1012[0] + 39);
                  v754 = (char *)(*(_QWORD *)v1012[0] + 16);
                }
                v1019[0] = v754;
                v1019[1] = v753;
                v755 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v755 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)__src);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__src);
                  if (LOBYTE(__src[1].tv_nsec) && SHIBYTE(__src[1].tv_sec) < 0)
                    operator delete((void *)__src[0].tv_sec);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                  v595 = v957;
                }
                *(_QWORD *)&v756 = byte_254A4A4F8[23];
                if (byte_254A4A4F8[23] >= 0)
                {
                  v757 = byte_254A4A4F8;
                }
                else
                {
                  v756 = *(double *)&byte_254A4A4F8[8];
                  v757 = *(const char **)byte_254A4A4F8;
                }
                *(_QWORD *)&v1021.f64[0] = v757;
                v1021.f64[1] = v756;
                __src[0].tv_sec = (__darwin_time_t)os_log_create(v757, v1019[0]);
                sub_20E86E5A8(&__src[0].tv_nsec, (uint64_t)&v1021);
                sub_20E86E5A8(&__src[2].tv_nsec, (uint64_t)v1019);
                v758 = __src[0].tv_sec;
                sub_20E86E44C((uint64_t)__src);
                sub_20F0C9080(v750, v752, v758, OS_LOG_TYPE_INFO, v627);
                if (v748)
                {
                  sub_20E8C003C((uint64_t)v1012, "[Inertial State Initializer]: Dynamic Motion Initialization failed in %d attempts. Attempting IMU-based initialization.", *v627);
                  sub_20E863570((uint64_t)v1012);
                }
                sub_20E863714((uint64_t)v1012);
              }
            }
            v759 = atomic_load((unsigned __int8 *)&qword_254A61FC0);
            if ((v759 & 1) == 0 && __cxa_guard_acquire(&qword_254A61FC0))
            {
              qword_254A62028 = 0;
              qword_254A62030 = 0;
              v882 = operator new(0x20uLL);
              v882[1] = 0;
              v882[2] = 0;
              *v882 = &off_24C9C36D8;
              v882[3] = 0;
              qword_254A62028 = (uint64_t)(v882 + 3);
              qword_254A62030 = (uint64_t)v882;
              __cxa_atexit((void (*)(void *))sub_20F0AE4BC, &qword_254A62028, &dword_20E81F000);
              __cxa_guard_release(&qword_254A61FC0);
              v595 = v957;
            }
            if (!sub_20F04FBEC((uint64_t)&qword_254A62028, v741, v742, v743, v744, v745, v746, v747, *v627))goto LABEL_767;
            v760 = sub_210219C18();
            v761 = sub_21021A1E0();
            if (!atomic_load((unint64_t *)&v761[1]))
            {
LABEL_765:
              if (os_signpost_enabled((os_log_t)*v760))
              {
                v766 = *v627;
                LODWORD(__src[0].tv_sec) = 67109120;
                HIDWORD(__src[0].tv_sec) = v766;
                _os_signpost_emit_unreliably_with_name_impl();
              }
LABEL_767:
              sub_20F0A2138(v595, v1001);
              if (*(_BYTE *)(v595 + 489))
                goto LABEL_779;
              goto LABEL_780;
            }
            v763 = (uint64_t)v761;
            v764 = *v627;
            LODWORD(__src[0].tv_sec) = 67109120;
            HIDWORD(__src[0].tv_sec) = v764;
            v765 = (void *)_os_log_send_and_compose_impl();
            v1012[0] = (__uint64_t)v765;
            sub_21021A118(__src, (uint64_t)v760, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, "[Inertial State Initializer]: Dynamic Motion Initialization failed in %d attempts. Attempting IMU-based initialization.", 0x77uLL, (const char **)v1012);
            sub_21021A2DC(v763, (uint64_t)__src);
            if (SHIBYTE(__src[8].tv_nsec) < 0)
            {
              operator delete((void *)__src[7].tv_nsec);
              if ((SHIBYTE(__src[7].tv_sec) & 0x80000000) == 0)
              {
LABEL_752:
                if (!LOBYTE(__src[5].tv_nsec))
                {
LABEL_758:
                  if (LOBYTE(__src[3].tv_nsec) && SHIBYTE(__src[3].tv_sec) < 0)
                    operator delete((void *)__src[2].tv_sec);
                  if (SHIBYTE(__src[1].tv_nsec) < 0)
                    operator delete((void *)__src[0].tv_nsec);
                  if (v765)
                    free(v765);
                  goto LABEL_765;
                }
LABEL_756:
                if (SHIBYTE(__src[5].tv_sec) < 0)
                  operator delete((void *)__src[4].tv_sec);
                goto LABEL_758;
              }
            }
            else if ((SHIBYTE(__src[7].tv_sec) & 0x80000000) == 0)
            {
              goto LABEL_752;
            }
            operator delete((void *)__src[6].tv_sec);
            if (!LOBYTE(__src[5].tv_nsec))
              goto LABEL_758;
            goto LABEL_756;
          }
          v737 = sub_210219C18();
          v738 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v738 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (!atomic_load(&qword_254A5A450))
          {
LABEL_728:
            if (os_signpost_enabled((os_log_t)*v737))
            {
              LODWORD(__src[0].tv_sec) = 67109120;
              HIDWORD(__src[0].tv_sec) = v735;
              _os_signpost_emit_unreliably_with_name_impl();
            }
            goto LABEL_730;
          }
          LODWORD(__src[0].tv_sec) = 67109120;
          HIDWORD(__src[0].tv_sec) = v735;
          v740 = (void *)_os_log_send_and_compose_impl();
          v1012[0] = (__uint64_t)v740;
          sub_21021A118(__src, (uint64_t)v737, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, "[Dynamic Motion Initialization] Failed with status: %d.", 0x37uLL, (const char **)v1012);
          sub_21021A2DC((uint64_t)&stru_254A5A410, (uint64_t)__src);
          if (SHIBYTE(__src[8].tv_nsec) < 0)
          {
            operator delete((void *)__src[7].tv_nsec);
            if ((SHIBYTE(__src[7].tv_sec) & 0x80000000) == 0)
            {
LABEL_715:
              if (!LOBYTE(__src[5].tv_nsec))
              {
LABEL_721:
                if (LOBYTE(__src[3].tv_nsec) && SHIBYTE(__src[3].tv_sec) < 0)
                  operator delete((void *)__src[2].tv_sec);
                if (SHIBYTE(__src[1].tv_nsec) < 0)
                  operator delete((void *)__src[0].tv_nsec);
                if (v740)
                  free(v740);
                goto LABEL_728;
              }
LABEL_719:
              if (SHIBYTE(__src[5].tv_sec) < 0)
                operator delete((void *)__src[4].tv_sec);
              goto LABEL_721;
            }
          }
          else if ((SHIBYTE(__src[7].tv_sec) & 0x80000000) == 0)
          {
            goto LABEL_715;
          }
          operator delete((void *)__src[6].tv_sec);
          if (!LOBYTE(__src[5].tv_nsec))
            goto LABEL_721;
          goto LABEL_719;
        }
        v990 = (int64x2_t *)(v16 + 1216);
        v649 = *(_QWORD *)(v16 + 224);
        bzero(__src, 0x480uLL);
        v653 = 0;
        v654 = 0;
        memset(v1016, 0, sizeof(v1016));
        v1014 = 0u;
        v1015 = 0u;
        *(_OWORD *)v1012 = 0u;
        v1013 = 0u;
        p_tv_nsec = &__src[27].tv_nsec;
        v656 = 1;
        v657 = 114;
        do
        {
          v658 = v656 + *(_QWORD *)(v16 + 400);
          v659 = *(_QWORD *)(v16 + 376);
          v660 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v16 + 384) - v659) >> 4);
          v661 = *(_QWORD *)(*(_QWORD *)(v659 + 48 * ((v658 - 1) % v660)) + 8);
          v662 = *(_QWORD *)(*(_QWORD *)(v659 + 48 * (v658 % v660)) + 8);
          v650.f64[0] = *(float64_t *)(v662 + 16);
          v663 = *(double *)(v662 + 8) + v650.f64[0] - (*(double *)(v661 + 8) + *(double *)(v661 + 16));
          *(p_tv_nsec - 13) = 0x3FF0000000000000;
          *p_tv_nsec = 0x3FF0000000000000;
          p_tv_nsec[13] = 0x3FF0000000000000;
          p_tv_nsec[23] = 0xBFF0000000000000;
          p_tv_nsec[36] = 0xBFF0000000000000;
          p_tv_nsec[49] = 0xBFF0000000000000;
          p_tv_sec = (double *)&__src[v657 / 2].tv_sec;
          *p_tv_sec = -v663;
          p_tv_sec[13] = -v663;
          p_tv_sec[26] = -v663;
          *((double *)p_tv_nsec + 26) = -v663;
          *((double *)p_tv_nsec + 39) = -v663;
          *((double *)p_tv_nsec + 52) = -v663;
          v665 = v663 * -0.5;
          v666 = v663 * (v663 * -0.5);
          p_tv_sec[3] = v666;
          p_tv_sec[16] = v666;
          p_tv_sec[29] = v666;
          sub_20F0AF320((_QWORD *)v16, v656, (uint64_t)object, (uint64_t)&v1021, (uint64_t)v1019, v666, v665, v650, _D3, v652);
          v667.f64[0] = *(float64_t *)(v649 + 16);
          v668 = *(int64x2_t *)(v649 + 32);
          v669 = *(double *)(v649 + 80);
          _Q5 = *(float64x2_t *)(v649 + 64);
          v671 = *(double *)(v16 + v654 + 712);
          v672 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v649, v668);
          _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v649, v668);
          v667.f64[1] = *(float64_t *)(v649 + 48);
          _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v672, *(double *)(v16 + v654 + 696)), _Q3, *(float64x2_t *)(v16 + v654 + 696), 1), v667, v671);
          _D7 = *(_QWORD *)(v16 + v654 + 704);
          __asm { FMLA            D1, D7, V5.D[1] }
          v677 = _D1 + v669 * v671;
          _D17 = *(_QWORD *)(v16 + v654 + 648);
          v679 = *(float64x2_t *)(v16 + v654 + 632);
          _Q21.f64[0] = *(float64_t *)(v649 + 112);
          _Q22 = *(float64x2_t *)(v649 + 96);
          __asm { FMLA            D6, D17, V22.D[1] }
          v683.f64[0] = _D6 + *(double *)(v16 + v654 + 680) * _Q21.f64[0];
          *(_QWORD *)&v683.f64[0] = *(_OWORD *)&vsubq_f64(v683, _Q21);
          v684 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v16 + v654 + 600), _Q22.f64[0]), v679, _Q22, 1), *(float64x2_t *)(v16 + v654 + 664), _Q21.f64[0]), _Q22);
          v685 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v672, v684.f64[0]), _Q3, v684, 1), v667, v683.f64[0]);
          _Q2 = vmulq_f64(_Q5, v684);
          _Q3.f64[0] = v684.f64[1];
          __asm { FMLA            D2, D3, V5.D[1] }
          _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v669, v683.f64[0]);
          v687 = &v1012[v657 - 108];
          v652 = *(float64x2_t *)(v16 + v653 + 1072);
          v688 = (float64x2_t *)(v16 + v653 + 1096);
          _Q5.f64[0] = *(float64_t *)(v16 + v653 + 1112);
          v689 = *v688;
          v684.f64[0] = *(float64_t *)(v16 + v653 + 1136);
          v690 = *(float64x2_t *)(v16 + v653 + 1120);
          _V19.D[1] = v1019[1];
          __asm { FMLA            D21, D5, V19.D[1] }
          v679.f64[0] = _Q21.f64[0] + v684.f64[0] * v1020;
          *(float64x2_t *)v687 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v652, *(double *)v1019), *v688, *(float64x2_t *)v1019, 1), v690, v1020);
          v687[2] = *(_QWORD *)&v679.f64[0];
          v692 = &v1012[v657 - 105];
          v679.f64[0] = v1022;
          v693.f64[1] = v1021.f64[1];
          *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vsubq_f64(v679, _Q2);
          _Q16 = vsubq_f64(v1021, v685);
          v695 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v652, _Q16.f64[0]), v689, _Q16, 1), v690, _Q2.f64[0]);
          __asm { FMLA            D19, D5, V16.D[1] }
          v693.f64[0] = vmlad_n_f64(_D19, v684.f64[0], _Q2.f64[0]);
          v650 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v652, _Q0.f64[0]), v689, _Q0, 1), v690, v677);
          __asm { FMLA            D3, D5, V0.D[1] }
          _Q0.f64[0] = _D3 + v684.f64[0] * v677;
          ++v656;
          v654 += 128;
          *(float64x2_t *)v692 = vsubq_f64(v695, v650);
          v692[2] = *(_OWORD *)&vsubq_f64(v693, _Q0);
          v653 += 72;
          p_tv_nsec -= 42;
          v657 -= 6;
        }
        while (v654 != 256);
        object[144] = object;
        LODWORD(object[145]) = 0;
        memcpy(object, __src, 0x480uLL);
        LODWORD(object[158]) = 2;
        v1021.f64[0] = 0.0;
        LODWORD(v1019[0]) = 0;
        sub_20E8BECF4();
        v697 = (int)v1019[0];
        if (!LODWORD(v1019[0]))
        {
          v698 = operator new((8 * (int)v1021.f64[0] + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
          sub_20E8BECF4();
          MEMORY[0x212BC6368](v698, 0x1000C8000313F17);
          v697 = (int)v1019[0];
        }
        LODWORD(object[158]) = v697 != 0;
        v1021.f64[0] = 0.0;
        if (!sub_20E8BEA4C())
        {
          v941 = operator new((8 * (int)v1021.f64[0] + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
          sub_20E8BEA4C();
          MEMORY[0x212BC6368](v941, 0x1000C8000313F17);
        }
        LODWORD(v1021.f64[0]) = 0;
        sub_20E8BED2C();
        if ((v1012[0] & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
          || (v1012[1] & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_649;
        }
        v7 = v957;
        if (((unint64_t)v1013 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*((_QWORD *)&v1013 + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || ((unint64_t)v1014 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*((_QWORD *)&v1014 + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || ((unint64_t)v1015 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*((_QWORD *)&v1015 + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (v1016[0].i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          v50 = 6;
          goto LABEL_680;
        }
        if ((v1016[0].i64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (v1016[1].i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (v1016[1].i64[1] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
LABEL_649:
          v50 = 6;
        }
        else
        {
          *(_QWORD *)&_Q1.f64[1] = v1016[1].i64[0];
          _D3 = v1016[1].i64[0];
          __asm { FMLA            D2, D3, V1.D[1] }
          if (vabdd_f64(sqrt(_D2 + *(double *)&v1016[1].i64[1] * *(double *)&v1016[1].i64[1]), *(double *)(v16 + 176)) <= *(double *)(v16 + 184))
          {
            *(_QWORD *)&_Q5.f64[1] = v1012[1];
            _D3 = v1012[1];
            v980 = *(double *)&v1013;
            v984 = *(double *)v1012;
            __asm { FMLA            D2, D3, V5.D[1] }
            if (sqrt(_D2 + v980 * v980) <= *(double *)(v16 + 192))
            {
              *(_QWORD *)&_D2 = vextq_s8(*(int8x16_t *)((char *)v1016 + 8), *(int8x16_t *)((char *)v1016 + 8), 8uLL).u64[0];
              *(_QWORD *)&v976 = vextq_s8(*(int8x16_t *)v1012, *(int8x16_t *)v1012, 8uLL).u64[0];
              _Q17 = *(int8x16_t *)v990;
              v959 = *v990;
              *(_QWORD *)&v962 = vextq_s8(_Q17, _Q17, 8uLL).u64[0];
              _Q18 = *(int8x16_t *)(v16 + 1240);
              v950 = *(double *)_Q18.i64;
              *(_QWORD *)&v952 = vextq_s8(_Q18, _Q18, 8uLL).u64[0];
              v778 = *(double *)(v16 + 1280);
              _Q19 = *(float64x2_t *)(v16 + 1264);
              v946 = _Q19.f64[0];
              *(_QWORD *)&v948 = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
              v780.f64[0] = *(float64_t *)(v16 + 1232);
              v780.f64[1] = *(float64_t *)(v16 + 1256);
              _Q3 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v990, (int64x2_t)_Q18), *(double *)&v1016[0].i64[1]), (float64x2_t)vzip2q_s64(*v990, (int64x2_t)_Q18), _D2), v780, *(double *)&v1016[1].i64[1]);
              _Q4 = vmulq_f64(_Q19, *(float64x2_t *)((char *)v1016 + 8));
              __asm { FMLA            D4, D2, V19.D[1] }
              _Q4.f64[0] = _Q4.f64[0] + v778 * *(double *)&v1016[1].i64[1];
              __asm { FMLA            D5, D2, V17.D[1] }
              v968 = *(double *)(v16 + 1256);
              v972 = *(double *)(v16 + 1232);
              __asm { FMLA            D6, D2, V18.D[1] }
              _D6 = _D6 + *(double *)&v1016[1].i64[1] * v968;
              __asm { FMLA            D1, D2, V19.D[1] }
              v965 = v778;
              _Q0.f64[0] = _D1 + *(double *)&v1016[1].i64[1] * v778;
              __asm { FMLA            D1, D6, V3.D[1] }
              _Q0.f64[0] = sqrt(_D1 + _Q0.f64[0] * _Q4.f64[0]);
              _Q1.f64[0] = 1.0;
              _Q0.f64[0] = 1.0 / _Q0.f64[0];
              _Q3 = vmulq_n_f64(_Q3, _Q0.f64[0]);
              v788 = vmulq_f64(_Q4, _Q0).f64[0];
              _D8 = 0.0;
              _Q0.f64[0] = _Q3.f64[1] + 0.0 * v788;
              v790 = -_Q3.f64[0] - 0.0 * v788;
              _Q4.f64[0] = vmuld_lane_f64(0.0, _Q3, 1) - 0.0 * _Q3.f64[0];
              _Q5.f64[0] = sqrt(_Q0.f64[0] * _Q0.f64[0] + v790 * v790 + _Q4.f64[0] * _Q4.f64[0]);
              __asm { FMLA            D7, D8, V3.D[1] }
              v793 = _D7 - v788;
              if (_Q5.f64[0] >= 2.22507386e-308)
              {
                if (_Q5.f64[0] < 2.22044605e-16)
                {
                  _Q1.f64[0] = 1.0 / _Q5.f64[0];
                  v795 = _Q4.f64[0] * (1.0 / _Q5.f64[0]);
                  _Q4 = vmulq_f64(_Q4, _Q1);
                  _Q0.f64[1] = v790;
                  _Q0 = vmulq_n_f64(_Q0, _Q1.f64[0]);
                  _D1 = v790 * _Q1.f64[0];
                  *(_QWORD *)&v790 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
                  __asm { FMLA            D6, D1, V0.D[1] }
                  _Q5.f64[0] = sqrt(vmlad_n_f64(_D6, v795, _Q4.f64[0]));
                }
                _Q5.f64[0] = 1.0 / _Q5.f64[0];
                v798 = vmulq_f64(_Q4, _Q5);
                _Q0.f64[1] = v790;
                v799 = vmulq_n_f64(_Q0, _Q5.f64[0]);
                v800 = fmax(fmin(v793, 1.0), -1.0);
                v801 = sqrt(1.0 - v800 * v800);
                v802 = vmulq_n_f64(v799, v798.f64[0]);
                v798.f64[0] = vmuld_n_f64(v798.f64[0], v798.f64[0]);
                _Q1.f64[0] = 1.0 - v800;
                v803 = vmulq_n_f64(v802, 1.0 - v800);
                _Q1.f64[0] = v800 + vmulq_f64(_Q1, v798).f64[0];
                _D8 = vmuld_lane_f64(v801, v799, 1) + v803.f64[0];
                v794 = v803.f64[1] - v801 * v799.f64[0];
              }
              else if (v793 <= 0.0)
              {
                _Q1.f64[0] = -1.0;
                v794 = -0.0;
              }
              else
              {
                v794 = 0.0;
              }
              v808 = atan2(-v794, _Q1.f64[0]);
              v809 = asin(_D8);
              v810 = __sincos_stret(v808);
              v811 = __sincos_stret(v809);
              v812.f64[0] = v810.__sinval * v811.__sinval;
              v944 = -(v810.__cosval * v811.__sinval);
              *(double *)&v813 = v811.__sinval;
              *((double *)&v813 + 1) = v810.__sinval * v811.__sinval;
              *(double *)&v814 = v810.__cosval;
              *((double *)&v814 + 1) = -(v810.__sinval * v811.__cosval);
              v812.f64[1] = v810.__cosval;
              v815.f64[0] = v944;
              v815.f64[1] = v810.__sinval;
              v942 = *((double *)&v814 + 1);
              *(_OWORD *)(v957 + 600) = 0u;
              *(_OWORD *)(v957 + 616) = 0u;
              *(_OWORD *)(v957 + 632) = 0u;
              *(_OWORD *)(v957 + 648) = 0u;
              *(_OWORD *)(v957 + 584) = 0u;
              *(_OWORD *)(v957 + 568) = 0u;
              *(double *)(v955 + 64) = v810.__cosval * v811.__cosval;
              *(_OWORD *)(v955 + 32) = v814;
              *(float64x2_t *)(v955 + 48) = v815;
              *(_OWORD *)v955 = *(unint64_t *)&v811.__cosval;
              *(_OWORD *)(v955 + 16) = v813;
              *(double *)(v955 + 112) = (v811.__sinval * *(double *)v959.i64
                                       + *((double *)&v814 + 1) * v950
                                       + v810.__cosval * v811.__cosval * v946)
                                      * v984
                                      + (v811.__sinval * v962
                                       + *((double *)&v814 + 1) * v952
                                       + v810.__cosval * v811.__cosval * v948)
                                      * v976
                                      + (v811.__sinval * v972
                                       + *((double *)&v814 + 1) * v968
                                       + v810.__cosval * v811.__cosval * v965)
                                      * v980;
              *(float64x2_t *)(v955 + 96) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v811.__cosval, *(double *)v959.i64), v812, v950), v815, v946), v984), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v811.__cosval, v962), v812, v952), v815, v948),
                                                v976),
                                              vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v811.__cosval, v972), v812, v968), v815, v965), v980);
              v816 = *(_QWORD *)(v16 + 16);
              v985 = *(double *)(v16 + 24);
              v817 = *(_QWORD *)(v16 + 8);
              bzero((void *)(v957 + 688), 0x6F0uLL);
              v818.f64[0] = v811.__cosval;
              v818.f64[1] = v810.__sinval * v811.__sinval;
              v819.f64[0] = 0.0;
              v819.f64[1] = v810.__cosval;
              v820.i64[0] = *(_QWORD *)&v811.__sinval;
              v821.f64[0] = v811.__sinval;
              v821.f64[1] = v942;
              v822 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v818, v985), (float64x2_t)0, v819), (float64x2_t)0, v821);
              v823 = v944 * v985 + v810.__sinval * 0.0 + v810.__cosval * v811.__cosval * 0.0;
              v824 = vmulq_f64(v818, (float64x2_t)0);
              v825 = vmlaq_f64(vmlaq_n_f64(v824, v819, v985), (float64x2_t)0, v821);
              v826 = v944 * 0.0 + v810.__sinval * v985 + v810.__cosval * v811.__cosval * 0.0;
              v827 = vmlaq_n_f64(vmlaq_f64(v824, (float64x2_t)0, v819), v821, v985);
              v819.f64[0] = v944 * 0.0 + v810.__sinval * 0.0 + v810.__cosval * v811.__cosval * v985;
              v828.i64[0] = *(_QWORD *)&v811.__cosval;
              v829 = v810.__sinval * v811.__sinval;
              *(double *)(v955 + 184) = v823 * v811.__cosval + v826 * 0.0 + v819.f64[0] * v811.__sinval;
              *(float64x2_t *)(v955 + 168) = vmlaq_n_f64(vmlaq_f64(vmulq_n_f64(v822, v811.__cosval), (float64x2_t)0, v825), v827, v811.__sinval);
              *(double *)(v955 + 304) = v823 * (v810.__sinval * v811.__sinval)
                                      + v826 * v810.__cosval
                                      + v819.f64[0] * v942;
              *(float64x2_t *)(v955 + 288) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v822, v810.__sinval * v811.__sinval), v825, v810.__cosval), v827, v942);
              *(double *)(v955 + 424) = v823 * v944
                                      + v826 * v810.__sinval
                                      + v819.f64[0] * (v810.__cosval * v811.__cosval);
              *(float64x2_t *)(v955 + 408) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v822, v944), v825, v810.__sinval), v827, v810.__cosval * v811.__cosval);
              *(_QWORD *)(v957 + 1048) = v817;
              *(_QWORD *)(v957 + 1176) = v817;
              *(_QWORD *)(v957 + 1304) = v817;
              v830 = *(double **)(v16 + 32);
              if (*(_QWORD *)(v16 + 40) - (_QWORD)v830 == 24)
              {
                v831 = v810.__cosval;
                v832 = *(_QWORD *)&v942;
                *(double *)&v833 = v944;
                v834 = v810.__sinval;
                v835 = v810.__cosval * v811.__cosval;
                v836.f64[0] = 0.0;
                v837.i64[0] = *(_QWORD *)&v811.__cosval;
                v838 = 0.0;
                v839.i64[0] = *(_QWORD *)&v811.__sinval;
                *(double *)v840.i64 = v810.__sinval * v811.__sinval;
                *(double *)v841.i64 = v942;
                v842 = v810.__sinval;
              }
              else
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/BatchLeastSquaresUnsanitized/include/VIO/BatchLeastSquaresUnsanitized/InitializationHelper.h", 72, (uint64_t)"initial_velocity_variance_imu.size() == cv_types::InertialCovariance::kVelocityDof", 82, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
                v830 = *(double **)(v16 + 32);
                v839.i64[0] = *(_QWORD *)(v955 + 16);
                v837 = *(int8x16_t *)v955;
                v841.i64[0] = *(_QWORD *)(v955 + 40);
                v840 = *(int64x2_t *)(v955 + 24);
                v831 = *(double *)(v955 + 32);
                v835 = *(double *)(v955 + 64);
                *(_QWORD *)&v842 = vextq_s8(*(int8x16_t *)(v955 + 48), *(int8x16_t *)(v955 + 48), 8uLL).u64[0];
                *(_QWORD *)&v838 = vextq_s8(v837, v837, 8uLL).u64[0];
                v833 = *(_OWORD *)(v955 + 48);
                v834 = *(double *)(v955 + 56);
                v836.f64[0] = *(float64_t *)(v955 + 8);
                v820 = (int8x16_t)vzip1q_s64(v839, v841);
                v832 = vextq_s8(v820, v820, 8uLL).u64[0];
                v828 = (int8x16_t)vzip1q_s64(*(int64x2_t *)v955, v840);
                *(_QWORD *)&v829 = vextq_s8(v828, v828, 8uLL).u64[0];
              }
              v843 = v830[1];
              v844 = v830[2];
              *(_QWORD *)&v845.f64[0] = v820.i64[0];
              *(_QWORD *)&v845.f64[1] = v832;
              *(_QWORD *)&v846.f64[0] = v828.i64[0];
              v846.f64[1] = v829;
              v847 = v831;
              v836.f64[1] = v831;
              v848 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v846, *v830), (float64x2_t)0, v836), (float64x2_t)0, v845);
              v849 = *(double *)&v833;
              v850 = *(double *)&v833 * *v830 + v834 * 0.0 + v835 * 0.0;
              v851 = vmulq_f64(v846, (float64x2_t)0);
              v852 = vmlaq_f64(vmlaq_n_f64(v851, v836, v843), (float64x2_t)0, v845);
              v853 = v849 * 0.0 + v834 * v843 + v835 * 0.0;
              v854 = vmlaq_n_f64(vmlaq_f64(v851, (float64x2_t)0, v836), v845, v844);
              v855 = v849 * 0.0 + v834 * 0.0 + v835 * v844;
              v8 = v955;
              v595 = v957;
              *(double *)(v955 + 952) = v850 * *(double *)v837.i64 + v853 * v838 + v855 * *(double *)v839.i64;
              *(float64x2_t *)(v955 + 936) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v848, *(double *)v837.i64), v852, v838), v854, *(double *)v839.i64);
              *(double *)(v955 + 1072) = v850 * *(double *)v840.i64 + v853 * v847 + v855 * *(double *)v841.i64;
              *(float64x2_t *)(v955 + 1056) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v848, *(double *)v840.i64), v852, v847), v854, *(double *)v841.i64);
              *(double *)(v955 + 1192) = v850 * v849 + v853 * v842 + v855 * v835;
              *(float64x2_t *)(v955 + 1176) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v848, v849), v852, v842), v854, v835);
              *(_QWORD *)(v957 + 1816) = v816;
              *(_QWORD *)(v957 + 1944) = v816;
              *(_QWORD *)(v957 + 2072) = v816;
              *(_DWORD *)(v16 + 368) = 0;
              sub_20F0ABF2C(v955, 1u);
              *(_DWORD *)(v957 + 3392) = 0;
              *(_BYTE *)(v957 + 489) = 1;
              goto LABEL_783;
            }
            v50 = 8;
          }
          else
          {
            v50 = 7;
          }
        }
        v7 = v957;
      }
      else
      {
        v50 = 2;
      }
LABEL_680:
      *(_DWORD *)(v16 + 368) = v50;
      goto LABEL_681;
    }
  }
  sub_20F0A2138(v1, v2 + 3);
  if (*(_BYTE *)(v7 + 489))
    sub_20F0ABF2C(v7 + 496, 0);
  if (!*(_BYTE *)(v7 + 489))
    return;
LABEL_33:
  if (!*(_BYTE *)(v5 + 176))
    return;
  __xa = v6;
  v956 = v8;
  v22 = atan2(-*(double *)(v5 + 40), *(long double *)(v5 + 64));
  v23 = asin(*(long double *)(v5 + 16));
  v24 = atan2(-*(double *)(v5 + 8), *(long double *)v5);
  v997 = v5;
  v25 = *(double *)(v5 + 168);
  sub_20F0A1EF4(v1019);
  if (**((int **)v1019[0] + 7) <= 3)
  {
    v34 = *((unsigned __int8 *)v1019[0] + 72);
    v35 = sub_20E8C31DC((uint64_t)v1019[0], "OSLogSurrogateAppender", 1, 0);
    v36 = v35;
    if (v34 || v35)
    {
      __src[0].tv_sec = (__darwin_time_t)v1019;
      __src[0].tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
      __src[1].tv_sec = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(__src[1].tv_nsec) = 3;
      __src[2].tv_sec = (__darwin_time_t)"unknown file";
      LODWORD(__src[2].tv_nsec) = 378;
      __src[4].tv_sec = 0;
      __src[3].tv_sec = (__darwin_time_t)"unknown function";
      __src[3].tv_nsec = 0;
      v37 = *(_QWORD *)__src[0].tv_sec;
      v38 = (const char *)(*(_QWORD *)__src[0].tv_sec + 16);
      v987 = v38;
      if (*(char *)(*(_QWORD *)__src[0].tv_sec + 39) < 0)
      {
        v38 = *(const char **)(v37 + 16);
        v39 = *(_QWORD *)(v37 + 24);
        v1002 = v34;
        v112 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v112 & 1) != 0)
          goto LABEL_51;
      }
      else
      {
        v39 = *(unsigned __int8 *)(*(_QWORD *)__src[0].tv_sec + 39);
        v1002 = v34;
        v40 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v40 & 1) != 0)
          goto LABEL_51;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_51:
      if (byte_254A4A4F8[23] >= 0)
        v113 = byte_254A4A4F8;
      else
        v113 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v114 = byte_254A4A4F8[23];
      else
        v114 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v113, v38);
      v115 = &object[1];
      if (v114 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v114 >= 0x17)
      {
        v116 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v114 | 7) != 0x17)
          v116 = v114 | 7;
        v117 = v116 + 1;
        v115 = (void **)operator new(v116 + 1);
        object[3] = (void *)(v117 | 0x8000000000000000);
        object[1] = v115;
        object[2] = (void *)v114;
      }
      else
      {
        HIBYTE(object[3]) = v114;
        if (!v114)
        {
LABEL_65:
          *((_BYTE *)v115 + v114) = 0;
          LOBYTE(object[4]) = 1;
          v118 = &object[5];
          if (v39 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v39 >= 0x17)
          {
            v119 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v39 | 7) != 0x17)
              v119 = v39 | 7;
            v120 = v119 + 1;
            v118 = (void **)operator new(v119 + 1);
            object[7] = (void *)(v120 | 0x8000000000000000);
            object[5] = v118;
            object[6] = (void *)v39;
          }
          else
          {
            HIBYTE(object[7]) = v39;
            if (!v39)
              goto LABEL_73;
          }
          memmove(v118, v38, v39);
LABEL_73:
          *((_BYTE *)v118 + v39) = 0;
          LOBYTE(object[8]) = 1;
          v121 = object[0];
          if (SHIBYTE(object[7]) < 0)
            operator delete(object[5]);
          if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          if (object[0])
            os_release(object[0]);
          if (v36 && *(_QWORD *)(v36 + 24))
          {
            v122 = _os_log_pack_size();
            v123 = (std::__shared_weak_count_vtbl *)operator new(v122, (std::align_val_t)8uLL);
            v124 = (std::__shared_weak_count *)operator new();
            v125 = v124;
            v124->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v124->__shared_owners_;
            v124->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v124->__shared_weak_owners_ = 0;
            v124[1].__vftable = v123;
            object[0] = v123;
            object[1] = v123;
            object[2] = v124;
            do
              v127 = __ldxr(p_shared_owners);
            while (__stxr(v127 + 1, p_shared_owners));
            memset(&object[3], 0, 24);
            do
              v128 = __ldaxr(p_shared_owners);
            while (__stlxr(v128 - 1, p_shared_owners));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v125);
            }
            v129 = object[0];
            v130 = _os_log_pack_fill();
            *(_DWORD *)v130 = 134218752;
            *(double *)(v130 + 4) = v22 * -57.2957795;
            *(_WORD *)(v130 + 12) = 2048;
            *(double *)(v130 + 14) = v23 * -57.2957795;
            *(_WORD *)(v130 + 22) = 2048;
            *(double *)(v130 + 24) = v24 * -57.2957795;
            *(_WORD *)(v130 + 32) = 2048;
            *(double *)(v130 + 34) = v25;
            v131 = operator new();
            v132 = *(unsigned __int8 *)(v37 + 39);
            v133 = *(const char **)(v37 + 16);
            v134 = *(_QWORD *)(v37 + 24);
            v135 = *(_OWORD *)&object[3];
            *(_OWORD *)(v131 + 8) = *(_OWORD *)&object[1];
            if ((v132 & 0x80u) != 0)
              v132 = v134;
            else
              v133 = v987;
            *(_QWORD *)v131 = v129;
            object[1] = 0;
            object[2] = 0;
            *(_OWORD *)(v131 + 24) = v135;
            object[3] = 0;
            object[4] = 0;
            *(_QWORD *)(v131 + 40) = v133;
            *(_QWORD *)(v131 + 48) = v132;
            *(_BYTE *)(v131 + 56) = 1;
            v1021.f64[0] = 0.0;
            v1012[0] = v131;
            (*(void (**)(_QWORD, __uint64_t *))(**(_QWORD **)(v36 + 24) + 40))(*(_QWORD *)(v36 + 24), v1012);
            v136 = v1012[0];
            v1012[0] = 0;
            v137 = v1002;
            if (v136)
            {
              v138 = *(std::__shared_weak_count **)(v136 + 32);
              if (v138)
              {
                v139 = (unint64_t *)&v138->__shared_owners_;
                do
                  v140 = __ldaxr(v139);
                while (__stlxr(v140 - 1, v139));
                if (!v140)
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                }
              }
              v141 = *(std::__shared_weak_count **)(v136 + 16);
              if (v141)
              {
                v142 = (unint64_t *)&v141->__shared_owners_;
                do
                  v143 = __ldaxr(v142);
                while (__stlxr(v143 - 1, v142));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
              MEMORY[0x212BC6398](v136, 0x10F0C40B62ED6C6);
              v144 = v1021.f64[0];
              v1021.f64[0] = 0.0;
              if (v144 != 0.0)
              {
                v145 = *(std::__shared_weak_count **)(*(_QWORD *)&v144 + 32);
                if (v145)
                {
                  v146 = (unint64_t *)&v145->__shared_owners_;
                  do
                    v147 = __ldaxr(v146);
                  while (__stlxr(v147 - 1, v146));
                  if (!v147)
                  {
                    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                    std::__shared_weak_count::__release_weak(v145);
                  }
                }
                v148 = *(std::__shared_weak_count **)(*(_QWORD *)&v144 + 16);
                if (v148)
                {
                  v149 = (unint64_t *)&v148->__shared_owners_;
                  do
                    v150 = __ldaxr(v149);
                  while (__stlxr(v150 - 1, v149));
                  if (!v150)
                  {
                    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                    std::__shared_weak_count::__release_weak(v148);
                  }
                }
                MEMORY[0x212BC6398](*(_QWORD *)&v144, 0x10F0C40B62ED6C6);
              }
            }
            v151 = (std::__shared_weak_count *)object[4];
            if (object[4])
            {
              v152 = (unint64_t *)((char *)object[4] + 8);
              do
                v153 = __ldaxr(v152);
              while (__stlxr(v153 - 1, v152));
              if (!v153)
              {
                ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                std::__shared_weak_count::__release_weak(v151);
              }
            }
            v154 = (std::__shared_weak_count *)object[2];
            if (object[2])
            {
              v155 = (unint64_t *)((char *)object[2] + 8);
              do
                v156 = __ldaxr(v155);
              while (__stlxr(v156 - 1, v155));
              if (!v156)
              {
                ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                std::__shared_weak_count::__release_weak(v154);
              }
            }
          }
          else
          {
            os_log_type_enabled(v121, OS_LOG_TYPE_INFO);
            LODWORD(object[0]) = 134218752;
            *(double *)((char *)object + 4) = v22 * -57.2957795;
            WORD2(object[1]) = 2048;
            *(double *)((char *)&object[1] + 6) = v23 * -57.2957795;
            HIWORD(object[2]) = 2048;
            *(double *)&object[3] = v24 * -57.2957795;
            LOWORD(object[4]) = 2048;
            *(void **)((char *)&object[4] + 2) = *(void **)&v25;
            v157 = (void *)_os_log_send_and_compose_impl();
            v137 = v1002;
            if (v157)
              free(v157);
          }
          if (v137)
          {
            sub_20E8C003C((uint64_t)__src, "[Inertial State Initializer] Reference inertial state received. Orientation: [%f, %f, %f] deg. Timestamp: %f.", v22 * -57.2957795, v23 * -57.2957795, v24 * -57.2957795, v25);
            sub_20E863570((uint64_t)__src);
          }
          sub_20E863570((uint64_t)__src);
          v158 = (std::__shared_weak_count *)__src[4].tv_sec;
          if (__src[4].tv_sec)
          {
            v159 = (unint64_t *)(__src[4].tv_sec + 8);
            do
              v160 = __ldaxr(v159);
            while (__stlxr(v160 - 1, v159));
            if (!v160)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
            }
          }
          goto LABEL_133;
        }
      }
      memmove(v115, v113, v114);
      goto LABEL_65;
    }
  }
LABEL_133:
  v161 = atomic_load((unsigned __int8 *)&qword_254A61FC8);
  if ((v161 & 1) == 0 && __cxa_guard_acquire(&qword_254A61FC8))
  {
    qword_254A62038 = 0;
    qword_254A62040 = 0;
    v804 = operator new(0x40uLL);
    v804[1] = 0;
    v804[2] = 0;
    *((_BYTE *)v804 + 24) = 0;
    *v804 = &off_24C9F8AD8;
    *((_BYTE *)v804 + 56) = 0;
    qword_254A62038 = (uint64_t)(v804 + 3);
    qword_254A62040 = (uint64_t)v804;
    __cxa_atexit((void (*)(void *))sub_20F0AE524, &qword_254A62038, &dword_20E81F000);
    __cxa_guard_release(&qword_254A61FC8);
  }
  v162 = v23 * -57.2957795;
  if (sub_20F0AE58C(&qword_254A62038, v26, v27, v28, v29, v30, v31, v32, v33, v22 * -57.2957795, v162, v24 * -57.2957795, v25))
  {
    v166 = sub_210219C18();
    v167 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v167 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_155;
    LODWORD(object[0]) = 134218752;
    *(double *)((char *)object + 4) = v22 * -57.2957795;
    WORD2(object[1]) = 2048;
    *(void **)((char *)&object[1] + 6) = *(void **)&v162;
    HIWORD(object[2]) = 2048;
    *(double *)&object[3] = v24 * -57.2957795;
    LOWORD(object[4]) = 2048;
    *(void **)((char *)&object[4] + 2) = *(void **)&v25;
    v169 = (char *)_os_log_send_and_compose_impl();
    v170 = strlen(v169);
    __src[0].tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)__src);
    v171 = __src[0].tv_sec;
    timespec_get(__src, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v166 + 1), (__int128 *)(v166 + 5), "[Inertial State Initializer] Reference inertial state received. Orientation: [%f, %f, %f] deg. Timestamp: %f.", 0x6DuLL, v169, v170, v171, __src);
    std::mutex::lock(&stru_254A5A410);
    v172 = qword_254A5A458;
    for (j = unk_254A5A460; v172 != j; v172 += 40)
    {
      v174 = *(_QWORD *)(v172 + 32);
      if (!v174)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v174 + 48))(v174, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(object[17]) < 0)
    {
      operator delete(object[15]);
      if ((SHIBYTE(object[14]) & 0x80000000) == 0)
      {
LABEL_142:
        if (!LOBYTE(object[11]))
        {
LABEL_148:
          if (LOBYTE(object[7]) && SHIBYTE(object[6]) < 0)
            operator delete(object[4]);
          if (SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          if (v169)
            free(v169);
LABEL_155:
          if (os_signpost_enabled((os_log_t)*v166))
          {
            LODWORD(object[0]) = 134218752;
            *(double *)((char *)object + 4) = v22 * -57.2957795;
            WORD2(object[1]) = 2048;
            *(void **)((char *)&object[1] + 6) = *(void **)&v162;
            HIWORD(object[2]) = 2048;
            *(double *)&object[3] = v24 * -57.2957795;
            LOWORD(object[4]) = 2048;
            *(void **)((char *)&object[4] + 2) = *(void **)&v25;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_157;
        }
LABEL_146:
        if (SHIBYTE(object[10]) < 0)
          operator delete(object[8]);
        goto LABEL_148;
      }
    }
    else if ((SHIBYTE(object[14]) & 0x80000000) == 0)
    {
      goto LABEL_142;
    }
    operator delete(object[12]);
    if (!LOBYTE(object[11]))
      goto LABEL_148;
    goto LABEL_146;
  }
LABEL_157:
  v176 = __xa[3];
  v175 = __xa[4];
  v177 = 0x6DB6DB6DB6DB6DB7 * ((v175 - v176) >> 3);
  v178 = 1;
  if (v177 >= 2)
  {
    do
    {
      if (*(double *)(v176 + 56 * v178) > v25)
        break;
      v178 = (v178 + 1);
    }
    while (v177 > v178);
  }
  if (!*(_BYTE *)(v997 + 176))
    sub_20E866B34();
  *(_QWORD *)&v165 = *(_QWORD *)(v997 + 64);
  v179 = *(int8x16_t *)(v997 + 16);
  v180 = *(int8x16_t *)(v997 + 32);
  v181 = *(float64x2_t *)v997;
  v182 = vextq_s8(v180, v180, 8uLL);
  v183 = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u64[0];
  v184 = v178;
  if (v177 <= v178)
  {
    v210.i64[0] = *(_QWORD *)v997;
    v211 = *(double *)(v997 + 16);
    v213 = *(double *)v182.i64;
  }
  else
  {
    v185 = *(float64x2_t *)(v997 + 48);
    v186 = vextq_s8((int8x16_t)v185, (int8x16_t)v185, 8uLL).u64[0];
    *(_QWORD *)&v187.f64[0] = vextq_s8(v179, v179, 8uLL).u64[0];
    v188 = v178 + 1;
    do
    {
      v163.f64[0] = v25;
      v25 = *(double *)(v176 + 56 * v184);
      v215 = v176 + 56 * (v188 - 2);
      v163.f64[0] = v25 - v163.f64[0];
      _Q1 = *(float64x2_t *)(v215 + 8);
      v164.f64[0] = *(float64_t *)(v215 + 24);
      *(_QWORD *)&v193 = *(_OWORD *)&vmulq_f64(v164, v163);
      _Q16 = vmulq_n_f64(_Q1, v163.f64[0]);
      _Q1.f64[0] = vmuld_lane_f64(v163.f64[0], _Q1, 1);
      _Q3 = vmulq_f64(_Q16, _Q16);
      __asm { FMLA            D3, D1, V16.D[1] }
      _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v164.f64[0] * v163.f64[0], v193);
      if (_Q3.f64[0] >= 0.0000002635)
      {
        v189 = sqrt(_Q3.f64[0]);
        __xc = v179;
        v998 = v165;
        v1003 = v183;
        v982 = v181.f64[0];
        v988 = v182;
        v974 = v185.f64[0];
        v978 = v180;
        v967 = v186;
        v970 = v187.f64[0];
        v961 = _Q16;
        v964 = v193;
        v958 = _Q3;
        v191 = __sincos_stret(v189);
        v190 = v191.__cosval;
        _Q16 = v961;
        v193 = v964;
        v186 = v967;
        v187.f64[0] = v970;
        v185.f64[0] = v974;
        v180 = v978;
        v181.f64[0] = v982;
        v182 = v988;
        v165 = v998;
        v183 = v1003;
        v179 = __xc;
        v164.f64[1] = v958.f64[1];
        v163.f64[0] = v191.__sinval / v189;
        v164.f64[0] = 1.0 / v958.f64[0] * (1.0 - v191.__cosval);
      }
      else
      {
        v164.f64[0] = 0.5 - _Q3.f64[0] * (_Q3.f64[0] / -720.0 + 0.0416666667);
        v163.f64[0] = 1.0 - _Q3.f64[0] * (0.166666667 - _Q3.f64[0] * (_Q3.f64[0] / -5040.0 + 0.00833333333));
        v190 = 1.0 - _Q3.f64[0] * v164.f64[0];
      }
      v194 = _Q16.f64[0] * v164.f64[0];
      v195 = _Q16.f64[1] * v164.f64[0];
      v196 = v190 + _Q16.f64[0] * (_Q16.f64[0] * v164.f64[0]);
      v197 = v190 + _Q16.f64[1] * (_Q16.f64[1] * v164.f64[0]);
      v198 = v190 + v193 * (v193 * v164.f64[0]);
      v199 = _Q16.f64[1] * (_Q16.f64[0] * v164.f64[0]);
      v200 = v193 * v194;
      v201 = v193 * v195;
      _Q16.f64[0] = _Q16.f64[0] * v163.f64[0];
      v202 = _Q16.f64[1] * v163.f64[0];
      v203 = v193 * v163.f64[0];
      v204 = v199 - v203;
      v205 = v202 + v200;
      v206 = v199 + v203;
      v207 = v201 - _Q16.f64[0];
      v208 = v200 - v202;
      v209 = _Q16.f64[0] + v201;
      *(_QWORD *)&v185.f64[1] = v186;
      *(_QWORD *)&v181.f64[1] = v183;
      *(_QWORD *)&v187.f64[1] = v180.i64[0];
      v210 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v181, v196), v187, v206), v185, v208);
      v211 = *(double *)v179.i64 * v196 + *(double *)v182.i64 * v206 + *(double *)&v165 * v208;
      v212 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v181, v204), v187, v197), v185, v209);
      v213 = *(double *)v179.i64 * v204 + *(double *)v182.i64 * v197 + *(double *)&v165 * v209;
      v214 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v181, v205), v187, v207), v185, v198);
      *(double *)&v165 = *(double *)v179.i64 * v205 + *(double *)v182.i64 * v207 + *(double *)&v165 * v198;
      v180.i64[0] = *(_QWORD *)&v212.f64[1];
      v183 = vextq_s8(v210, v210, 8uLL).u64[0];
      v184 = v188++;
      *(_QWORD *)&v181.f64[0] = v210.i64[0];
      *(double *)v179.i64 = v211;
      v186 = vextq_s8(v214, v214, 8uLL).u64[0];
      v187.f64[0] = v212.f64[0];
      *(double *)v182.i64 = v213;
      *(_QWORD *)&v185.f64[0] = v214.i64[0];
    }
    while (v177 > v184);
  }
  v999 = *(double *)v210.i64;
  v1004 = *(double *)&v183;
  v218 = atan2(-v213, *(long double *)&v165);
  v219 = asin(v211);
  v220 = atan2(-v1004, v999);
  v221 = *(void **)(v175 - 56);
  sub_20F0A1EF4(v1019);
  if (**((int **)v1019[0] + 7) <= 3)
  {
    v230 = *((unsigned __int8 *)v1019[0] + 72);
    v231 = sub_20E8C31DC((uint64_t)v1019[0], "OSLogSurrogateAppender", 1, 0);
    v232 = v231;
    if (v230 || v231)
    {
      __src[0].tv_sec = (__darwin_time_t)v1019;
      __src[0].tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
      __src[1].tv_sec = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(__src[1].tv_nsec) = 3;
      __src[2].tv_sec = (__darwin_time_t)"unknown file";
      LODWORD(__src[2].tv_nsec) = 420;
      __src[4].tv_sec = 0;
      __src[3].tv_sec = (__darwin_time_t)"unknown function";
      __src[3].tv_nsec = 0;
      v233 = *(_QWORD *)__src[0].tv_sec;
      v234 = *(_QWORD *)__src[0].tv_sec + 16;
      if (*(char *)(*(_QWORD *)__src[0].tv_sec + 39) < 0)
      {
        v236 = *(const char **)(v233 + 16);
        v235 = *(_QWORD *)(v233 + 24);
        v238 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v238 & 1) != 0)
          goto LABEL_175;
      }
      else
      {
        v235 = *(unsigned __int8 *)(*(_QWORD *)__src[0].tv_sec + 39);
        v236 = (const char *)(*(_QWORD *)__src[0].tv_sec + 16);
        v237 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v237 & 1) != 0)
          goto LABEL_175;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_175:
      if (byte_254A4A4F8[23] >= 0)
        v239 = byte_254A4A4F8;
      else
        v239 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v240 = byte_254A4A4F8[23];
      else
        v240 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v239, v236);
      v241 = &object[1];
      if (v240 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v240 >= 0x17)
      {
        v242 = v236;
        v243 = v232;
        v244 = v233;
        v245 = v230;
        v246 = v234;
        v247 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v240 | 7) != 0x17)
          v247 = v240 | 7;
        v248 = v247 + 1;
        v241 = (void **)operator new(v247 + 1);
        object[3] = (void *)(v248 | 0x8000000000000000);
        object[1] = v241;
        object[2] = (void *)v240;
        v234 = v246;
        v230 = v245;
        v233 = v244;
        v232 = v243;
        v236 = v242;
      }
      else
      {
        HIBYTE(object[3]) = v240;
        if (!v240)
        {
LABEL_189:
          *((_BYTE *)v241 + v240) = 0;
          LOBYTE(object[4]) = 1;
          v249 = &object[5];
          if (v235 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v235 >= 0x17)
          {
            v250 = (v235 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v235 | 7) != 0x17)
              v250 = v235 | 7;
            v251 = v250 + 1;
            v249 = (void **)operator new(v250 + 1);
            object[7] = (void *)(v251 | 0x8000000000000000);
            object[5] = v249;
            object[6] = (void *)v235;
          }
          else
          {
            HIBYTE(object[7]) = v235;
            if (!v235)
              goto LABEL_197;
          }
          memmove(v249, v236, v235);
LABEL_197:
          *((_BYTE *)v249 + v235) = 0;
          LOBYTE(object[8]) = 1;
          v252 = object[0];
          if (SHIBYTE(object[7]) < 0)
            operator delete(object[5]);
          if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          if (object[0])
            os_release(object[0]);
          if (v232 && *(_QWORD *)(v232 + 24))
          {
            v253 = _os_log_pack_size();
            v254 = (std::__shared_weak_count_vtbl *)operator new(v253, (std::align_val_t)8uLL);
            v255 = (std::__shared_weak_count *)operator new();
            v256 = v255;
            v255->__shared_owners_ = 0;
            v257 = (unint64_t *)&v255->__shared_owners_;
            v255->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v255->__shared_weak_owners_ = 0;
            v255[1].__vftable = v254;
            object[0] = v254;
            object[1] = v254;
            object[2] = v255;
            do
              v258 = __ldxr(v257);
            while (__stxr(v258 + 1, v257));
            memset(&object[3], 0, 24);
            do
              v259 = __ldaxr(v257);
            while (__stlxr(v259 - 1, v257));
            if (!v259)
            {
              ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
              std::__shared_weak_count::__release_weak(v256);
            }
            v260 = object[0];
            v261 = _os_log_pack_fill();
            *(_DWORD *)v261 = 134218752;
            *(double *)(v261 + 4) = v218 * -57.2957795;
            *(_WORD *)(v261 + 12) = 2048;
            *(double *)(v261 + 14) = v219 * -57.2957795;
            *(_WORD *)(v261 + 22) = 2048;
            *(double *)(v261 + 24) = v220 * -57.2957795;
            *(_WORD *)(v261 + 32) = 2048;
            *(_QWORD *)(v261 + 34) = v221;
            v262 = operator new();
            v263 = *(unsigned __int8 *)(v233 + 39);
            v264 = *(_QWORD *)(v233 + 16);
            v265 = *(_QWORD *)(v233 + 24);
            v266 = *(_OWORD *)&object[3];
            *(_OWORD *)(v262 + 8) = *(_OWORD *)&object[1];
            if ((v263 & 0x80u) != 0)
              v263 = v265;
            else
              v264 = v234;
            *(_QWORD *)v262 = v260;
            object[1] = 0;
            object[2] = 0;
            *(_OWORD *)(v262 + 24) = v266;
            object[3] = 0;
            object[4] = 0;
            *(_QWORD *)(v262 + 40) = v264;
            *(_QWORD *)(v262 + 48) = v263;
            *(_BYTE *)(v262 + 56) = 1;
            v1021.f64[0] = 0.0;
            v1012[0] = v262;
            (*(void (**)(_QWORD, __uint64_t *))(**(_QWORD **)(v232 + 24) + 40))(*(_QWORD *)(v232 + 24), v1012);
            v267 = v1012[0];
            v1012[0] = 0;
            if (v267)
            {
              v268 = *(std::__shared_weak_count **)(v267 + 32);
              if (v268)
              {
                v269 = (unint64_t *)&v268->__shared_owners_;
                do
                  v270 = __ldaxr(v269);
                while (__stlxr(v270 - 1, v269));
                if (!v270)
                {
                  ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                  std::__shared_weak_count::__release_weak(v268);
                }
              }
              v271 = *(std::__shared_weak_count **)(v267 + 16);
              if (v271)
              {
                v272 = (unint64_t *)&v271->__shared_owners_;
                do
                  v273 = __ldaxr(v272);
                while (__stlxr(v273 - 1, v272));
                if (!v273)
                {
                  ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                  std::__shared_weak_count::__release_weak(v271);
                }
              }
              MEMORY[0x212BC6398](v267, 0x10F0C40B62ED6C6);
              v274 = v1021.f64[0];
              v1021.f64[0] = 0.0;
              if (v274 != 0.0)
              {
                v275 = *(std::__shared_weak_count **)(*(_QWORD *)&v274 + 32);
                if (v275)
                {
                  v276 = (unint64_t *)&v275->__shared_owners_;
                  do
                    v277 = __ldaxr(v276);
                  while (__stlxr(v277 - 1, v276));
                  if (!v277)
                  {
                    ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
                    std::__shared_weak_count::__release_weak(v275);
                  }
                }
                v278 = *(std::__shared_weak_count **)(*(_QWORD *)&v274 + 16);
                if (v278)
                {
                  v279 = (unint64_t *)&v278->__shared_owners_;
                  do
                    v280 = __ldaxr(v279);
                  while (__stlxr(v280 - 1, v279));
                  if (!v280)
                  {
                    ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                    std::__shared_weak_count::__release_weak(v278);
                  }
                }
                MEMORY[0x212BC6398](*(_QWORD *)&v274, 0x10F0C40B62ED6C6);
              }
            }
            v281 = (std::__shared_weak_count *)object[4];
            if (object[4])
            {
              v282 = (unint64_t *)((char *)object[4] + 8);
              do
                v283 = __ldaxr(v282);
              while (__stlxr(v283 - 1, v282));
              if (!v283)
              {
                ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                std::__shared_weak_count::__release_weak(v281);
              }
            }
            v284 = (std::__shared_weak_count *)object[2];
            if (object[2])
            {
              v285 = (unint64_t *)((char *)object[2] + 8);
              do
                v286 = __ldaxr(v285);
              while (__stlxr(v286 - 1, v285));
              if (!v286)
              {
                ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                std::__shared_weak_count::__release_weak(v284);
              }
            }
          }
          else
          {
            os_log_type_enabled(v252, OS_LOG_TYPE_INFO);
            LODWORD(object[0]) = 134218752;
            *(double *)((char *)object + 4) = v218 * -57.2957795;
            WORD2(object[1]) = 2048;
            *(double *)((char *)&object[1] + 6) = v219 * -57.2957795;
            HIWORD(object[2]) = 2048;
            *(double *)&object[3] = v220 * -57.2957795;
            LOWORD(object[4]) = 2048;
            *(void **)((char *)&object[4] + 2) = v221;
            v287 = (void *)_os_log_send_and_compose_impl();
            if (v287)
              free(v287);
          }
          if (v230)
          {
            sub_20E8C003C((uint64_t)__src, "[Inertial State Initializer] Reference inertial state has been propagated. Orientation: [%f, %f, %f] deg. Timestamp: %f.", v218 * -57.2957795, v219 * -57.2957795, v220 * -57.2957795, *(double *)&v221);
            sub_20E863570((uint64_t)__src);
          }
          sub_20E863570((uint64_t)__src);
          v288 = (std::__shared_weak_count *)__src[4].tv_sec;
          if (__src[4].tv_sec)
          {
            v289 = (unint64_t *)(__src[4].tv_sec + 8);
            do
              v290 = __ldaxr(v289);
            while (__stlxr(v290 - 1, v289));
            if (!v290)
            {
              ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
              std::__shared_weak_count::__release_weak(v288);
            }
          }
          goto LABEL_257;
        }
      }
      memmove(v241, v239, v240);
      goto LABEL_189;
    }
  }
LABEL_257:
  v291 = atomic_load((unsigned __int8 *)&qword_254A61FD0);
  if ((v291 & 1) == 0 && __cxa_guard_acquire(&qword_254A61FD0))
  {
    qword_254A62048 = 0;
    qword_254A62050 = 0;
    v805 = operator new(0x40uLL);
    v805[1] = 0;
    v805[2] = 0;
    *((_BYTE *)v805 + 24) = 0;
    *v805 = &off_24C9F8AD8;
    *((_BYTE *)v805 + 56) = 0;
    qword_254A62048 = (uint64_t)(v805 + 3);
    qword_254A62050 = (uint64_t)v805;
    __cxa_atexit((void (*)(void *))sub_20F0AE524, &qword_254A62048, &dword_20E81F000);
    __cxa_guard_release(&qword_254A61FD0);
  }
  v292 = v220 * -57.2957795;
  v294 = (double *)v957;
  if (sub_20F0AE58C(&qword_254A62048, v222, v223, v224, v225, v226, v227, v228, v229, v218 * -57.2957795, v219 * -57.2957795, v220 * -57.2957795, *(double *)&v221))
  {
    v295 = sub_210219C18();
    v296 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v296 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v297 = atomic_load(&qword_254A5A450);
    v294 = (double *)v957;
    if (!v297)
      goto LABEL_279;
    LODWORD(object[0]) = 134218752;
    *(double *)((char *)object + 4) = v218 * -57.2957795;
    WORD2(object[1]) = 2048;
    *(double *)((char *)&object[1] + 6) = v219 * -57.2957795;
    HIWORD(object[2]) = 2048;
    *(double *)&object[3] = v220 * -57.2957795;
    LOWORD(object[4]) = 2048;
    *(void **)((char *)&object[4] + 2) = v221;
    v298 = (char *)_os_log_send_and_compose_impl();
    v299 = strlen(v298);
    __src[0].tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)__src);
    v300 = __src[0].tv_sec;
    timespec_get(__src, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v295 + 1), (__int128 *)(v295 + 5), "[Inertial State Initializer] Reference inertial state has been propagated. Orientation: [%f, %f, %f] deg. Timestamp: %f.", 0x78uLL, v298, v299, v300, __src);
    std::mutex::lock(&stru_254A5A410);
    v301 = qword_254A5A458;
    for (k = unk_254A5A460; v301 != k; v301 += 40)
    {
      v303 = *(_QWORD *)(v301 + 32);
      if (!v303)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v303 + 48))(v303, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(object[17]) < 0)
    {
      operator delete(object[15]);
      if ((SHIBYTE(object[14]) & 0x80000000) == 0)
      {
LABEL_266:
        if (!LOBYTE(object[11]))
        {
LABEL_272:
          if (LOBYTE(object[7]) && SHIBYTE(object[6]) < 0)
            operator delete(object[4]);
          if (SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          if (v298)
            free(v298);
LABEL_279:
          if (os_signpost_enabled((os_log_t)*v295))
          {
            LODWORD(object[0]) = 134218752;
            *(double *)((char *)object + 4) = v218 * -57.2957795;
            WORD2(object[1]) = 2048;
            *(double *)((char *)&object[1] + 6) = v219 * -57.2957795;
            HIWORD(object[2]) = 2048;
            *(double *)&object[3] = v220 * -57.2957795;
            LOWORD(object[4]) = 2048;
            *(void **)((char *)&object[4] + 2) = v221;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_281;
        }
LABEL_270:
        if (SHIBYTE(object[10]) < 0)
          operator delete(object[8]);
        goto LABEL_272;
      }
    }
    else if ((SHIBYTE(object[14]) & 0x80000000) == 0)
    {
      goto LABEL_266;
    }
    operator delete(object[12]);
    if (!LOBYTE(object[11]))
      goto LABEL_272;
    goto LABEL_270;
  }
LABEL_281:
  v293.f64[0] = *(float64_t *)(v956 + 16);
  __xd = v293;
  v983 = *(double *)(v956 + 40);
  v989 = *(float64x2_t *)v956;
  v971 = *(float64x2_t *)(v956 + 48);
  v975 = *(float64x2_t *)(v956 + 24);
  v979 = *(double *)(v956 + 64);
  v1000 = *(double *)(v956 + 112);
  v1005 = *(float64x2_t *)(v956 + 96);
  v304 = atan2(-v983, v979);
  v305 = asin(__xd.f64[0]);
  v306 = atan2(-v989.f64[1], v989.f64[0]);
  v307 = __sincos_stret(v304);
  v308 = __sincos_stret(v305);
  v309 = __sincos_stret(v220);
  v294[62] = v309.__cosval * v308.__cosval;
  v294[63] = -(v308.__cosval * v309.__sinval);
  v294[64] = v308.__sinval;
  v294[65] = v309.__sinval * v307.__cosval + v309.__cosval * v307.__sinval * v308.__sinval;
  v294[66] = v309.__cosval * v307.__cosval - v309.__sinval * (v307.__sinval * v308.__sinval);
  v294[67] = -(v308.__cosval * v307.__sinval);
  v294[68] = v309.__sinval * v307.__sinval - v309.__cosval * v307.__cosval * v308.__sinval;
  v294[69] = v309.__cosval * v307.__sinval + v309.__sinval * (v307.__cosval * v308.__sinval);
  v294[70] = v307.__cosval * v308.__cosval;
  v310.f64[0] = *(float64_t *)(v956 + 16);
  _D2 = *(double *)(v956 + 40);
  _D4 = *(double *)(v956 + 64);
  _V19.D[1] = v971.f64[1];
  _V18.D[1] = v975.f64[1];
  __asm
  {
    FMLA            D17, D2, V18.D[1]
    FMLA            D17, D4, V19.D[1]
  }
  v310.f64[0] = vmulq_f64(v310, __xd).f64[0] + _D2 * v983 + _D4 * v979;
  _V4.D[1] = v1005.f64[1];
  v318 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v956, v989.f64[0]), *(float64x2_t *)(v956 + 24), v975.f64[0]), *(float64x2_t *)(v956 + 48), v971.f64[0]), v1005.f64[0]), vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*(float64x2_t *)v956, v989, 1), *(float64x2_t *)(v956 + 24), v975, 1), *(float64x2_t *)(v956 + 48), v971, 1), v1005, 1), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v956, __xd.f64[0]), *(float64x2_t *)(v956 + 24), v983), *(float64x2_t *)(v956 + 48), v979), v1000);
  __asm { FMLA            D1, D17, V4.D[1] }
  *(double *)(v956 + 112) = _D1 + v310.f64[0] * v1000;
  *(float64x2_t *)(v956 + 96) = v318;
  sub_20F0A1EF4(v1019);
  if (**((int **)v1019[0] + 7) > 3)
    goto LABEL_370;
  v320 = *((unsigned __int8 *)v1019[0] + 72);
  v321 = sub_20E8C31DC((uint64_t)v1019[0], "OSLogSurrogateAppender", 1, 0);
  v322 = v321;
  if (!v320 && !v321)
    goto LABEL_370;
  __src[0].tv_sec = (__darwin_time_t)v1019;
  __src[0].tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
  __src[1].tv_sec = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(__src[1].tv_nsec) = 3;
  __src[2].tv_sec = (__darwin_time_t)"unknown file";
  LODWORD(__src[2].tv_nsec) = 452;
  __src[4].tv_sec = 0;
  __src[3].tv_sec = (__darwin_time_t)"unknown function";
  __src[3].tv_nsec = 0;
  v323 = *(_QWORD *)__src[0].tv_sec;
  v324 = *(_QWORD *)__src[0].tv_sec + 16;
  if (*(char *)(*(_QWORD *)__src[0].tv_sec + 39) < 0)
  {
    v326 = *(const char **)(v323 + 16);
    v325 = *(_QWORD *)(v323 + 24);
    v328 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v328 & 1) != 0)
      goto LABEL_288;
  }
  else
  {
    v325 = *(unsigned __int8 *)(*(_QWORD *)__src[0].tv_sec + 39);
    v326 = (const char *)(*(_QWORD *)__src[0].tv_sec + 16);
    v327 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v327 & 1) != 0)
      goto LABEL_288;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_288:
  if (byte_254A4A4F8[23] >= 0)
    v329 = byte_254A4A4F8;
  else
    v329 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v330 = byte_254A4A4F8[23];
  else
    v330 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0] = os_log_create(v329, v326);
  v331 = &object[1];
  if (v330 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v330 >= 0x17)
  {
    v332 = v322;
    v333 = v326;
    v334 = v323;
    v335 = v320;
    v336 = v324;
    v337 = (v330 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v330 | 7) != 0x17)
      v337 = v330 | 7;
    v338 = v337 + 1;
    v331 = (void **)operator new(v337 + 1);
    object[3] = (void *)(v338 | 0x8000000000000000);
    object[1] = v331;
    object[2] = (void *)v330;
    v324 = v336;
    v320 = v335;
    v323 = v334;
    v326 = v333;
    v322 = v332;
    goto LABEL_301;
  }
  HIBYTE(object[3]) = v330;
  if (v330)
LABEL_301:
    memmove(v331, v329, v330);
  *((_BYTE *)v331 + v330) = 0;
  LOBYTE(object[4]) = 1;
  v339 = &object[5];
  if (v325 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v325 >= 0x17)
  {
    v340 = (v325 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v325 | 7) != 0x17)
      v340 = v325 | 7;
    v341 = v340 + 1;
    v339 = (void **)operator new(v340 + 1);
    object[7] = (void *)(v341 | 0x8000000000000000);
    object[5] = v339;
    object[6] = (void *)v325;
  }
  else
  {
    HIBYTE(object[7]) = v325;
    if (!v325)
      goto LABEL_310;
  }
  memmove(v339, v326, v325);
LABEL_310:
  *((_BYTE *)v339 + v325) = 0;
  LOBYTE(object[8]) = 1;
  v342 = object[0];
  if (SHIBYTE(object[7]) < 0)
    operator delete(object[5]);
  if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
    operator delete(object[1]);
  if (object[0])
    os_release(object[0]);
  if (v322 && *(_QWORD *)(v322 + 24))
  {
    v343 = _os_log_pack_size();
    v344 = (std::__shared_weak_count_vtbl *)operator new(v343, (std::align_val_t)8uLL);
    v345 = (std::__shared_weak_count *)operator new();
    v346 = v345;
    v345->__shared_owners_ = 0;
    v347 = (unint64_t *)&v345->__shared_owners_;
    v345->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v345->__shared_weak_owners_ = 0;
    v345[1].__vftable = v344;
    object[0] = v344;
    object[1] = v344;
    object[2] = v345;
    do
      v348 = __ldxr(v347);
    while (__stxr(v348 + 1, v347));
    memset(&object[3], 0, 24);
    do
      v349 = __ldaxr(v347);
    while (__stlxr(v349 - 1, v347));
    if (!v349)
    {
      ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
      std::__shared_weak_count::__release_weak(v346);
    }
    v350 = object[0];
    v351 = _os_log_pack_fill();
    *(_DWORD *)v351 = 134218240;
    *(double *)(v351 + 4) = v306 * -57.2957795;
    *(_WORD *)(v351 + 12) = 2048;
    *(double *)(v351 + 14) = v292;
    v352 = operator new();
    v353 = *(unsigned __int8 *)(v323 + 39);
    v354 = *(_QWORD *)(v323 + 16);
    v355 = *(_QWORD *)(v323 + 24);
    v356 = *(_OWORD *)&object[3];
    *(_OWORD *)(v352 + 8) = *(_OWORD *)&object[1];
    if ((v353 & 0x80u) != 0)
      v353 = v355;
    else
      v354 = v324;
    *(_QWORD *)v352 = v350;
    object[1] = 0;
    object[2] = 0;
    *(_OWORD *)(v352 + 24) = v356;
    object[3] = 0;
    object[4] = 0;
    *(_QWORD *)(v352 + 40) = v354;
    *(_QWORD *)(v352 + 48) = v353;
    *(_BYTE *)(v352 + 56) = 1;
    v1021.f64[0] = 0.0;
    v1012[0] = v352;
    (*(void (**)(_QWORD, __uint64_t *))(**(_QWORD **)(v322 + 24) + 40))(*(_QWORD *)(v322 + 24), v1012);
    v357 = v1012[0];
    v1012[0] = 0;
    if (v357)
    {
      v358 = *(std::__shared_weak_count **)(v357 + 32);
      if (v358)
      {
        v359 = (unint64_t *)&v358->__shared_owners_;
        do
          v360 = __ldaxr(v359);
        while (__stlxr(v360 - 1, v359));
        if (!v360)
        {
          ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
          std::__shared_weak_count::__release_weak(v358);
        }
      }
      v361 = *(std::__shared_weak_count **)(v357 + 16);
      if (v361)
      {
        v362 = (unint64_t *)&v361->__shared_owners_;
        do
          v363 = __ldaxr(v362);
        while (__stlxr(v363 - 1, v362));
        if (!v363)
        {
          ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
          std::__shared_weak_count::__release_weak(v361);
        }
      }
      MEMORY[0x212BC6398](v357, 0x10F0C40B62ED6C6);
      v364 = v1021.f64[0];
      v1021.f64[0] = 0.0;
      if (v364 != 0.0)
      {
        v365 = *(std::__shared_weak_count **)(*(_QWORD *)&v364 + 32);
        if (v365)
        {
          v366 = (unint64_t *)&v365->__shared_owners_;
          do
            v367 = __ldaxr(v366);
          while (__stlxr(v367 - 1, v366));
          if (!v367)
          {
            ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
            std::__shared_weak_count::__release_weak(v365);
          }
        }
        v368 = *(std::__shared_weak_count **)(*(_QWORD *)&v364 + 16);
        if (v368)
        {
          v369 = (unint64_t *)&v368->__shared_owners_;
          do
            v370 = __ldaxr(v369);
          while (__stlxr(v370 - 1, v369));
          if (!v370)
          {
            ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
            std::__shared_weak_count::__release_weak(v368);
          }
        }
        MEMORY[0x212BC6398](*(_QWORD *)&v364, 0x10F0C40B62ED6C6);
      }
    }
    v371 = (std::__shared_weak_count *)object[4];
    if (object[4])
    {
      v372 = (unint64_t *)((char *)object[4] + 8);
      do
        v373 = __ldaxr(v372);
      while (__stlxr(v373 - 1, v372));
      if (!v373)
      {
        ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
        std::__shared_weak_count::__release_weak(v371);
      }
    }
    v374 = (std::__shared_weak_count *)object[2];
    if (object[2])
    {
      v375 = (unint64_t *)((char *)object[2] + 8);
      do
        v376 = __ldaxr(v375);
      while (__stlxr(v376 - 1, v375));
      if (!v376)
      {
        ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
        std::__shared_weak_count::__release_weak(v374);
      }
    }
  }
  else
  {
    os_log_type_enabled(v342, OS_LOG_TYPE_INFO);
    LODWORD(object[0]) = 134218240;
    *(double *)((char *)object + 4) = v306 * -57.2957795;
    WORD2(object[1]) = 2048;
    *(double *)((char *)&object[1] + 6) = v220 * -57.2957795;
    v377 = (void *)_os_log_send_and_compose_impl();
    if (v377)
      free(v377);
  }
  if (v320)
  {
    sub_20E8C003C((uint64_t)__src, "[Inertial State Initializer] Initial yaw angle adjustment: %f deg -> %f deg.", v306 * -57.2957795, v220 * -57.2957795);
    sub_20E863570((uint64_t)__src);
  }
  sub_20E863570((uint64_t)__src);
  v378 = (std::__shared_weak_count *)__src[4].tv_sec;
  if (__src[4].tv_sec)
  {
    v379 = (unint64_t *)(__src[4].tv_sec + 8);
    do
      v380 = __ldaxr(v379);
    while (__stlxr(v380 - 1, v379));
    if (!v380)
    {
      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
      std::__shared_weak_count::__release_weak(v378);
    }
  }
LABEL_370:
  sub_20F0A1EF4(v1019);
  v388 = v1005.f64[0];
  if (**((int **)v1019[0] + 7) > 3)
    goto LABEL_461;
  v389 = *((unsigned __int8 *)v1019[0] + 72);
  v390 = sub_20E8C31DC((uint64_t)v1019[0], "OSLogSurrogateAppender", 1, 0);
  v391 = v390;
  if (!v389 && v390 == 0)
    goto LABEL_461;
  __src[0].tv_sec = (__darwin_time_t)v1019;
  __src[0].tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
  __src[1].tv_sec = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(__src[1].tv_nsec) = 3;
  __src[2].tv_sec = (__darwin_time_t)"unknown file";
  LODWORD(__src[2].tv_nsec) = 457;
  __src[4].tv_sec = 0;
  __src[3].tv_sec = (__darwin_time_t)"unknown function";
  __src[3].tv_nsec = 0;
  v393 = *(_QWORD *)__src[0].tv_sec;
  v394 = *(_QWORD *)__src[0].tv_sec + 16;
  if (*(char *)(*(_QWORD *)__src[0].tv_sec + 39) < 0)
  {
    v396 = *(const char **)(v393 + 16);
    v395 = *(_QWORD *)(v393 + 24);
    v398 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v398 & 1) != 0)
      goto LABEL_379;
  }
  else
  {
    v395 = *(unsigned __int8 *)(*(_QWORD *)__src[0].tv_sec + 39);
    v396 = (const char *)(*(_QWORD *)__src[0].tv_sec + 16);
    v397 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v397 & 1) != 0)
      goto LABEL_379;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_379:
  if (byte_254A4A4F8[23] >= 0)
    v399 = byte_254A4A4F8;
  else
    v399 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v400 = byte_254A4A4F8[23];
  else
    v400 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0] = os_log_create(v399, v396);
  v401 = &object[1];
  if (v400 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v400 >= 0x17)
  {
    v402 = v391;
    v403 = v396;
    v404 = v393;
    v405 = v389;
    v406 = v394;
    v407 = (v400 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v400 | 7) != 0x17)
      v407 = v400 | 7;
    v408 = v407 + 1;
    v401 = (void **)operator new(v407 + 1);
    object[3] = (void *)(v408 | 0x8000000000000000);
    object[1] = v401;
    object[2] = (void *)v400;
    v394 = v406;
    v389 = v405;
    v393 = v404;
    v396 = v403;
    v391 = v402;
    goto LABEL_392;
  }
  HIBYTE(object[3]) = v400;
  if (v400)
LABEL_392:
    memmove(v401, v399, v400);
  *((_BYTE *)v401 + v400) = 0;
  LOBYTE(object[4]) = 1;
  v409 = &object[5];
  if (v395 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v395 >= 0x17)
  {
    v410 = (v395 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v395 | 7) != 0x17)
      v410 = v395 | 7;
    v411 = v410 + 1;
    v409 = (void **)operator new(v410 + 1);
    object[7] = (void *)(v411 | 0x8000000000000000);
    object[5] = v409;
    object[6] = (void *)v395;
  }
  else
  {
    HIBYTE(object[7]) = v395;
    if (!v395)
      goto LABEL_401;
  }
  memmove(v409, v396, v395);
LABEL_401:
  *((_BYTE *)v409 + v395) = 0;
  LOBYTE(object[8]) = 1;
  v412 = object[0];
  if (SHIBYTE(object[7]) < 0)
    operator delete(object[5]);
  if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
    operator delete(object[1]);
  if (object[0])
    os_release(object[0]);
  __xb = vextq_s8((int8x16_t)v1005, (int8x16_t)v1005, 8uLL).u64[0];
  if (v391 && *(_QWORD *)(v391 + 24))
  {
    v413 = _os_log_pack_size();
    v414 = (std::__shared_weak_count_vtbl *)operator new(v413, (std::align_val_t)8uLL);
    v415 = (std::__shared_weak_count *)operator new();
    v416 = v415;
    v415->__shared_owners_ = 0;
    v417 = (unint64_t *)&v415->__shared_owners_;
    v415->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v415->__shared_weak_owners_ = 0;
    v415[1].__vftable = v414;
    object[0] = v414;
    object[1] = v414;
    object[2] = v415;
    do
      v418 = __ldxr(v417);
    while (__stxr(v418 + 1, v417));
    memset(&object[3], 0, 24);
    do
      v419 = __ldaxr(v417);
    while (__stlxr(v419 - 1, v417));
    if (!v419)
    {
      ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
      std::__shared_weak_count::__release_weak(v416);
    }
    v420 = object[0];
    v421 = _os_log_pack_fill();
    v422 = *(_QWORD *)(v957 + 592);
    v423 = *(_QWORD *)(v957 + 600);
    v424 = *(_QWORD *)(v957 + 608);
    *(_DWORD *)v421 = 134219264;
    *(float64_t *)(v421 + 4) = v1005.f64[0];
    *(_WORD *)(v421 + 12) = 2048;
    *(_QWORD *)(v421 + 14) = __xb;
    *(_WORD *)(v421 + 22) = 2048;
    *(double *)(v421 + 24) = v1000;
    *(_WORD *)(v421 + 32) = 2048;
    *(_QWORD *)(v421 + 34) = v422;
    *(_WORD *)(v421 + 42) = 2048;
    *(_QWORD *)(v421 + 44) = v423;
    *(_WORD *)(v421 + 52) = 2048;
    *(_QWORD *)(v421 + 54) = v424;
    v425 = operator new();
    v426 = *(unsigned __int8 *)(v393 + 39);
    v427 = *(_QWORD *)(v393 + 16);
    v428 = *(_QWORD *)(v393 + 24);
    v429 = *(_OWORD *)&object[3];
    *(_OWORD *)(v425 + 8) = *(_OWORD *)&object[1];
    if ((v426 & 0x80u) != 0)
      v426 = v428;
    else
      v427 = v394;
    *(_QWORD *)v425 = v420;
    object[1] = 0;
    object[2] = 0;
    *(_OWORD *)(v425 + 24) = v429;
    object[3] = 0;
    object[4] = 0;
    *(_QWORD *)(v425 + 40) = v427;
    *(_QWORD *)(v425 + 48) = v426;
    *(_BYTE *)(v425 + 56) = 1;
    v1021.f64[0] = 0.0;
    v1012[0] = v425;
    (*(void (**)(_QWORD, __uint64_t *))(**(_QWORD **)(v391 + 24) + 40))(*(_QWORD *)(v391 + 24), v1012);
    v430 = v1012[0];
    v1012[0] = 0;
    v431 = (double *)v957;
    if (v430)
    {
      v432 = *(std::__shared_weak_count **)(v430 + 32);
      if (v432)
      {
        v433 = (unint64_t *)&v432->__shared_owners_;
        do
          v434 = __ldaxr(v433);
        while (__stlxr(v434 - 1, v433));
        if (!v434)
        {
          ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
          std::__shared_weak_count::__release_weak(v432);
        }
      }
      v435 = *(std::__shared_weak_count **)(v430 + 16);
      if (v435)
      {
        v436 = (unint64_t *)&v435->__shared_owners_;
        do
          v437 = __ldaxr(v436);
        while (__stlxr(v437 - 1, v436));
        if (!v437)
        {
          ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
          std::__shared_weak_count::__release_weak(v435);
        }
      }
      MEMORY[0x212BC6398](v430, 0x10F0C40B62ED6C6);
      v438 = v1021.f64[0];
      v1021.f64[0] = 0.0;
      if (v438 != 0.0)
      {
        v439 = *(std::__shared_weak_count **)(*(_QWORD *)&v438 + 32);
        if (v439)
        {
          v440 = (unint64_t *)&v439->__shared_owners_;
          do
            v441 = __ldaxr(v440);
          while (__stlxr(v441 - 1, v440));
          if (!v441)
          {
            ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
            std::__shared_weak_count::__release_weak(v439);
          }
        }
        v442 = *(std::__shared_weak_count **)(*(_QWORD *)&v438 + 16);
        if (v442)
        {
          v443 = (unint64_t *)&v442->__shared_owners_;
          do
            v444 = __ldaxr(v443);
          while (__stlxr(v444 - 1, v443));
          if (!v444)
          {
            ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
            std::__shared_weak_count::__release_weak(v442);
          }
        }
        MEMORY[0x212BC6398](*(_QWORD *)&v438, 0x10F0C40B62ED6C6);
      }
    }
    v445 = (std::__shared_weak_count *)object[4];
    if (object[4])
    {
      v446 = (unint64_t *)((char *)object[4] + 8);
      do
        v447 = __ldaxr(v446);
      while (__stlxr(v447 - 1, v446));
      if (!v447)
      {
        ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
        std::__shared_weak_count::__release_weak(v445);
      }
    }
    v448 = (std::__shared_weak_count *)object[2];
    if (object[2])
    {
      v449 = (unint64_t *)((char *)object[2] + 8);
      do
        v450 = __ldaxr(v449);
      while (__stlxr(v450 - 1, v449));
      if (!v450)
      {
        ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
        std::__shared_weak_count::__release_weak(v448);
      }
    }
  }
  else
  {
    os_log_type_enabled(v412, OS_LOG_TYPE_INFO);
    v431 = (double *)v957;
    v451 = *(void **)(v957 + 592);
    v452 = *(void **)(v957 + 600);
    v453 = *(void **)(v957 + 608);
    LODWORD(object[0]) = 134219264;
    *(void **)((char *)object + 4) = *(void **)&v1005.f64[0];
    WORD2(object[1]) = 2048;
    *(_QWORD *)((unint64_t)object | 0xE) = __xb;
    HIWORD(object[2]) = 2048;
    object[3] = *(void **)&v1000;
    LOWORD(object[4]) = 2048;
    *(void **)((char *)&object[4] + 2) = v451;
    WORD1(object[5]) = 2048;
    *(void **)((char *)&object[5] + 4) = v452;
    WORD2(object[6]) = 2048;
    *(void **)((char *)&object[6] + 6) = v453;
    v454 = (void *)_os_log_send_and_compose_impl();
    if (v454)
      free(v454);
  }
  if (v389)
  {
    sub_20E8C003C((uint64_t)__src, "[Inertial State Initializer] Initial velocity adjustment: [%f, %f, %f] m/s -> [%f, %f, %f] m/s.", v1005.f64[0], v1005.f64[1], v1000, v431[74], v431[75], v431[76]);
    sub_20E863570((uint64_t)__src);
  }
  sub_20E863570((uint64_t)__src);
  v455 = (std::__shared_weak_count *)__src[4].tv_sec;
  if (__src[4].tv_sec)
  {
    v456 = (unint64_t *)(__src[4].tv_sec + 8);
    do
      v457 = __ldaxr(v456);
    while (__stlxr(v457 - 1, v456));
    if (!v457)
    {
      ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
      std::__shared_weak_count::__release_weak(v455);
    }
  }
LABEL_461:
  v458 = atomic_load((unsigned __int8 *)&qword_254A61FD8);
  if ((v458 & 1) == 0 && __cxa_guard_acquire(&qword_254A61FD8))
  {
    qword_254A62058 = 0;
    qword_254A62060 = 0;
    v806 = operator new(0x30uLL);
    v806[1] = 0;
    v806[2] = 0;
    *((_BYTE *)v806 + 24) = 0;
    *v806 = &off_24C9F8B28;
    *((_BYTE *)v806 + 40) = 0;
    qword_254A62058 = (uint64_t)(v806 + 3);
    qword_254A62060 = (uint64_t)v806;
    __cxa_atexit((void (*)(void *))sub_20F0AE654, &qword_254A62058, &dword_20E81F000);
    __cxa_guard_release(&qword_254A61FD8);
  }
  v459 = v306 * -57.2957795;
  v466 = (double *)v957;
  if (sub_20F0AE6BC(v388, v381, v382, v383, v384, v385, v386, v387, v459, v292))
  {
    v467 = sub_210219C18();
    v468 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v468 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_483;
    LODWORD(object[0]) = 134218240;
    *(void **)((char *)object + 4) = *(void **)&v459;
    WORD2(object[1]) = 2048;
    *(double *)((char *)&object[1] + 6) = v220 * -57.2957795;
    v470 = (char *)_os_log_send_and_compose_impl();
    v471 = strlen(v470);
    __src[0].tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)__src);
    v472 = __src[0].tv_sec;
    timespec_get(__src, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v467 + 1), (__int128 *)(v467 + 5), "[Inertial State Initializer] Initial yaw angle adjustment: %f deg -> %f deg.", 0x4CuLL, v470, v471, v472, __src);
    std::mutex::lock(&stru_254A5A410);
    v473 = qword_254A5A458;
    for (m = unk_254A5A460; v473 != m; v473 += 40)
    {
      v475 = *(_QWORD *)(v473 + 32);
      if (!v475)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v475 + 48))(v475, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(object[17]) < 0)
    {
      operator delete(object[15]);
      if ((SHIBYTE(object[14]) & 0x80000000) == 0)
      {
LABEL_470:
        if (!LOBYTE(object[11]))
        {
LABEL_476:
          if (LOBYTE(object[7]) && SHIBYTE(object[6]) < 0)
            operator delete(object[4]);
          if (SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          if (v470)
            free(v470);
LABEL_483:
          v466 = (double *)v957;
          if (os_signpost_enabled((os_log_t)*v467))
          {
            LODWORD(object[0]) = 134218240;
            *(void **)((char *)object + 4) = *(void **)&v459;
            WORD2(object[1]) = 2048;
            *(double *)((char *)&object[1] + 6) = v220 * -57.2957795;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_485;
        }
LABEL_474:
        if (SHIBYTE(object[10]) < 0)
          operator delete(object[8]);
        goto LABEL_476;
      }
    }
    else if ((SHIBYTE(object[14]) & 0x80000000) == 0)
    {
      goto LABEL_470;
    }
    operator delete(object[12]);
    if (!LOBYTE(object[11]))
      goto LABEL_476;
    goto LABEL_474;
  }
LABEL_485:
  v476 = atomic_load((unsigned __int8 *)&qword_254A61FE0);
  if ((v476 & 1) == 0 && __cxa_guard_acquire(&qword_254A61FE0))
  {
    qword_254A62068 = 0;
    qword_254A62070 = 0;
    v807 = operator new(0x50uLL);
    v807[1] = 0;
    v807[2] = 0;
    *((_BYTE *)v807 + 24) = 0;
    *v807 = &off_24C9F8B78;
    *((_BYTE *)v807 + 72) = 0;
    qword_254A62068 = (uint64_t)(v807 + 3);
    qword_254A62070 = (uint64_t)v807;
    __cxa_atexit((void (*)(void *))sub_20F0AE764, &qword_254A62068, &dword_20E81F000);
    __cxa_guard_release(&qword_254A61FE0);
    v466 = (double *)v957;
  }
  if (sub_20F0AE7CC(v1005.f64[0], v466[76], v460, v461, v462, v463, v464, v465, v1005.f64[0], v1005.f64[1], v1000, v466[74], v466[75], v466[76]))
  {
    v477 = sub_210219C18();
    v478 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v478 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_507;
    v480 = *(void **)(v957 + 592);
    v481 = *(void **)(v957 + 600);
    v482 = *(void **)(v957 + 608);
    LODWORD(object[0]) = 134219264;
    *(void **)((char *)object + 4) = *(void **)&v1005.f64[0];
    WORD2(object[1]) = 2048;
    *(void **)((char *)&object[1] + 6) = *(void **)&v1005.f64[1];
    HIWORD(object[2]) = 2048;
    object[3] = *(void **)&v1000;
    LOWORD(object[4]) = 2048;
    *(void **)((char *)&object[4] + 2) = v480;
    WORD1(object[5]) = 2048;
    *(void **)((char *)&object[5] + 4) = v481;
    WORD2(object[6]) = 2048;
    *(void **)((char *)&object[6] + 6) = v482;
    v483 = (char *)_os_log_send_and_compose_impl();
    v484 = strlen(v483);
    __src[0].tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)__src);
    v485 = __src[0].tv_sec;
    timespec_get(__src, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v477 + 1), (__int128 *)(v477 + 5), "[Inertial State Initializer] Initial velocity adjustment: [%f, %f, %f] m/s -> [%f, %f, %f] m/s.", 0x5FuLL, v483, v484, v485, __src);
    std::mutex::lock(&stru_254A5A410);
    v486 = qword_254A5A458;
    for (n = unk_254A5A460; v486 != n; v486 += 40)
    {
      v488 = *(_QWORD *)(v486 + 32);
      if (!v488)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v488 + 48))(v488, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(object[17]) < 0)
    {
      operator delete(object[15]);
      if ((SHIBYTE(object[14]) & 0x80000000) == 0)
      {
LABEL_494:
        if (!LOBYTE(object[11]))
        {
LABEL_500:
          if (LOBYTE(object[7]) && SHIBYTE(object[6]) < 0)
            operator delete(object[4]);
          if (SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          if (v483)
            free(v483);
LABEL_507:
          if (os_signpost_enabled((os_log_t)*v477))
          {
            v489 = *(void **)(v957 + 592);
            v490 = *(void **)(v957 + 600);
            v491 = *(void **)(v957 + 608);
            LODWORD(object[0]) = 134219264;
            *(void **)((char *)object + 4) = *(void **)&v1005.f64[0];
            WORD2(object[1]) = 2048;
            *(void **)((char *)&object[1] + 6) = *(void **)&v1005.f64[1];
            HIWORD(object[2]) = 2048;
            object[3] = *(void **)&v1000;
            LOWORD(object[4]) = 2048;
            *(void **)((char *)&object[4] + 2) = v489;
            WORD1(object[5]) = 2048;
            *(void **)((char *)&object[5] + 4) = v490;
            WORD2(object[6]) = 2048;
            *(void **)((char *)&object[6] + 6) = v491;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          return;
        }
LABEL_498:
        if (SHIBYTE(object[10]) < 0)
          operator delete(object[8]);
        goto LABEL_500;
      }
    }
    else if ((SHIBYTE(object[14]) & 0x80000000) == 0)
    {
      goto LABEL_494;
    }
    operator delete(object[12]);
    if (!LOBYTE(object[11]))
      goto LABEL_500;
    goto LABEL_498;
  }
}

void sub_20F0AB3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  if (LOBYTE(STACK[0xC38]))
  {
    if (SLOBYTE(STACK[0xC37]) < 0)
      operator delete((void *)STACK[0xC20]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a65);
  sub_20E863784((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_20F0AB41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  if (LOBYTE(STACK[0xC38]) && SLOBYTE(STACK[0xC37]) < 0)
    operator delete((void *)STACK[0xC20]);
  __cxa_guard_abort(&qword_254A4A510);
  if (SLOBYTE(STACK[0x27F]) < 0)
  {
    operator delete((void *)STACK[0x268]);
    sub_20E863714((uint64_t)&a65);
    sub_20E863784((uint64_t)&STACK[0x280]);
    _Unwind_Resume(a1);
  }
  sub_20E863714((uint64_t)&a65);
  sub_20E863784((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_20F0AB8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  sub_20E86E8C4(&a65);
  sub_20E86E8C4((uint64_t *)&STACK[0x268]);
  sub_20E86E658((uint64_t)&STACK[0x280]);
  sub_20E863714((uint64_t)&STACK[0xC20]);
  _Unwind_Resume(a1);
}

void sub_20F0AB9A0()
{
  JUMPOUT(0x20F0AB9A8);
}

void sub_20F0AB9CC(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xC20]);
  _Unwind_Resume(a1);
}

void sub_20F0AB9E0(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_20F0AB9F4(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_20F0ABA08()
{
  if (SLOBYTE(STACK[0xCAF]) < 0)
    JUMPOUT(0x20F0ABCA4);
  JUMPOUT(0x20F0AB804);
}

void sub_20F0ABA10(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xC20]);
  _Unwind_Resume(a1);
}

void sub_20F0ABA24(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xC20]);
  _Unwind_Resume(a1);
}

void sub_20F0ABA48(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_20F0ABA5C(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_20F0ABA70(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_20F0ABA94(_Unwind_Exception *a1)
{
  void *v1;

  if (SLOBYTE(STACK[0x30F]) < 0)
  {
    operator delete((void *)STACK[0x2F8]);
    if (SLOBYTE(STACK[0x2F7]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0x2E0]);
      if (!LOBYTE(STACK[0x2D8]))
        goto LABEL_9;
LABEL_7:
      if (SLOBYTE(STACK[0x2D7]) < 0)
        operator delete((void *)STACK[0x2C0]);
LABEL_9:
      if (LOBYTE(STACK[0x2B8]) && SLOBYTE(STACK[0x2B7]) < 0)
        operator delete((void *)STACK[0x2A0]);
      if (SLOBYTE(STACK[0x29F]) < 0)
        operator delete((void *)STACK[0x288]);
      if (v1)
      {
        free(v1);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (SLOBYTE(STACK[0x2F7]) < 0)
  {
    goto LABEL_3;
  }
  if (!LOBYTE(STACK[0x2D8]))
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20F0ABA9C()
{
  if (SLOBYTE(STACK[0x30F]) < 0)
    JUMPOUT(0x20F0ABD64);
  JUMPOUT(0x20F0ABD2CLL);
}

void sub_20F0ABAA4(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xC20]);
  _Unwind_Resume(a1);
}

void sub_20F0ABAB8(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xC20]);
  _Unwind_Resume(a1);
}

void sub_20F0ABACC(_Unwind_Exception *a1)
{
  void *v1;

  if (SLOBYTE(STACK[0x30F]) < 0)
  {
    operator delete((void *)STACK[0x2F8]);
    if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
  {
LABEL_3:
    if (!LOBYTE(STACK[0x2D8]))
      goto LABEL_9;
LABEL_7:
    if (SLOBYTE(STACK[0x2D7]) < 0)
      operator delete((void *)STACK[0x2C0]);
LABEL_9:
    if (LOBYTE(STACK[0x2B8]) && SLOBYTE(STACK[0x2B7]) < 0)
      operator delete((void *)STACK[0x2A0]);
    if (SLOBYTE(STACK[0x29F]) < 0)
      operator delete((void *)STACK[0x288]);
    if (v1)
    {
      free(v1);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
  operator delete((void *)STACK[0x2E0]);
  if (!LOBYTE(STACK[0x2D8]))
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20F0ABAD4(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0xC20]);
  _Unwind_Resume(a1);
}

void sub_20F0ABAE8(_Unwind_Exception *a1)
{
  void *v1;

  if (SLOBYTE(STACK[0x30F]) < 0)
  {
    operator delete((void *)STACK[0x2F8]);
    if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SLOBYTE(STACK[0x2F7]) & 0x80000000) == 0)
  {
LABEL_3:
    if (!LOBYTE(STACK[0x2D8]))
      goto LABEL_9;
LABEL_7:
    if (SLOBYTE(STACK[0x2D7]) < 0)
      operator delete((void *)STACK[0x2C0]);
LABEL_9:
    if (LOBYTE(STACK[0x2B8]) && SLOBYTE(STACK[0x2B7]) < 0)
      operator delete((void *)STACK[0x2A0]);
    if (SLOBYTE(STACK[0x29F]) < 0)
      operator delete((void *)STACK[0x288]);
    if (v1)
    {
      free(v1);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
  operator delete((void *)STACK[0x2E0]);
  if (!LOBYTE(STACK[0x2D8]))
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20F0ABAF0(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_20F0ABB04()
{
  JUMPOUT(0x20F0ABCF4);
}

void sub_20F0ABB0C(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_20F0ABB20(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x2A0]) && SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);
  if (STACK[0x280])
    os_release((void *)STACK[0x280]);
  sub_20E863714((uint64_t)&STACK[0xC20]);
  _Unwind_Resume(a1);
}

void sub_20F0ABC08(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F0ABC28(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_20F0ABC3C(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_20F0ABC50(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (!v1)
    _Unwind_Resume(a1);
  JUMPOUT(0x20F0ABDB8);
}

void sub_20F0ABC5C()
{
  JUMPOUT(0x20F0ABDB4);
}

void sub_20F0ABC64()
{
  JUMPOUT(0x20F0ABE50);
}

void sub_20F0ABC6C()
{
  JUMPOUT(0x20F0ABEECLL);
}

void sub_20F0ABC74(_Unwind_Exception *a1)
{
  sub_20E863784((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_20F0ABC88()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F0ABC9CLL);
}

void sub_20F0ABD10()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F0ABD24);
}

void sub_20F0ABD48()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F0ABD5CLL);
}

void sub_20F0ABDC8()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F0ABDDCLL);
}

void sub_20F0ABE64()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F0ABE78);
}

void sub_20F0ABF04(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x280];
  if (!STACK[0x280])
    JUMPOUT(0x20F0ABF14);
  STACK[0x288] = (unint64_t)v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0ABF2C(uint64_t a1, unsigned int a2)
{
  float64x2_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  size_t v21;
  void **v22;
  unint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  const char *v29;
  size_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  const char *v33;
  size_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  size_t v46;
  std::__shared_weak_count_vtbl *v47;
  std::__shared_weak_count *v48;
  size_t v49;
  size_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char v56;
  _QWORD *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  size_t v98;
  void *v99;
  unint64_t v100;
  const void *v101;
  uint64_t v102;
  uint64_t v103;
  void **v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  double v108;
  int8x16_t v109;
  unsigned __int8 v110;
  double v111;
  double v112;
  double v113;
  double v114;
  uint64_t *v115;
  unsigned __int8 v116;
  char *v118;
  size_t v119;
  __darwin_time_t tv_sec;
  uint64_t v121;
  uint64_t i;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v126;
  double v127;
  const char *v128;
  void *v129;
  void *v130;
  int v131;
  const char *__s;
  char *__sa[2];
  int8x16_t v134;
  double v135;
  float64x2_t v136;
  double v137;
  long double v138;
  double v139;
  long double v140;
  int8x16_t v141;
  void *v142;
  void *__dst[2];
  int64_t v144;
  timespec v145;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v147;
  const char *v148;
  int v149;
  const char *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  _QWORD v154[2];
  _QWORD v155[3];
  const void *v156;
  uint64_t v157;
  const void *v158;
  unint64_t v159;
  void *v160;
  char v161;
  unint64_t v162;
  int v163;
  uint64_t v164;
  __int128 v165;
  std::__shared_weak_count *v166;
  char *v167;
  std::__shared_weak_count *v168;
  _QWORD *v169;
  __int128 v170;
  _QWORD v171[2];
  void *object[10];
  char v173;
  char v174;
  void *v175;
  char v176;
  void *v177;
  char v178;
  uint64_t v179;

  v179 = *MEMORY[0x24BDAC8D0];
  v140 = atan2(-*(double *)(a1 + 40), *(long double *)(a1 + 64));
  v138 = asin(*(long double *)(a1 + 16));
  v4.f64[0] = atan2(-*(double *)(a1 + 8), *(long double *)a1);
  v136 = v4;
  sub_20E863438((uint64_t)v154);
  sub_20E86A980(v155, (uint64_t)(&off_24C9F8920)[2 * a2], (uint64_t)(&off_24C9F8920)[2 * a2 + 1]);
  sub_20F0A1EF4(&v153);
  v16.f64[0] = v140;
  v16.f64[1] = v138;
  v141 = (int8x16_t)vnegq_f64(v16);
  *(_QWORD *)&v137 = *(_OWORD *)&vnegq_f64(v136);
  *(_QWORD *)&v139 = vextq_s8(v141, v141, 8uLL).u64[0];
  v17 = v153;
  v18 = "ZNK4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0" + 2;
  if (**(int **)(v153 + 56) > 3)
    goto LABEL_152;
  v19 = *(unsigned __int8 *)(v153 + 72);
  v17 = sub_20E8C31DC(v153, "OSLogSurrogateAppender", 1, 0);
  v20 = v17;
  if (!v19 && !v17)
    goto LABEL_152;
  v145.tv_sec = (__darwin_time_t)&v153;
  v145.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v147 = 3;
  v148 = "unknown file";
  v149 = 240;
  v151 = 0;
  v152 = 0;
  v150 = "unknown function";
  v131 = v19;
  if ((v163 & 0x10) != 0)
  {
    v23 = v162;
    if (v162 < v159)
    {
      v162 = v159;
      v23 = v159;
    }
    v24 = v158;
    v21 = v23 - (_QWORD)v158;
    if (v23 - (unint64_t)v158 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_61;
  }
  else
  {
    if ((v163 & 8) == 0)
    {
      v21 = 0;
      HIBYTE(v144) = 0;
      v22 = __dst;
      goto LABEL_17;
    }
    v24 = v156;
    v21 = v157 - (_QWORD)v156;
    if ((unint64_t)(v157 - (_QWORD)v156) > 0x7FFFFFFFFFFFFFF7)
LABEL_61:
      sub_20E860B7C();
  }
  if (v21 >= 0x17)
  {
    v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v25 = v21 | 7;
    v26 = v25 + 1;
    v22 = (void **)operator new(v25 + 1);
    __dst[1] = (void *)v21;
    v144 = v26 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_16;
  }
  HIBYTE(v144) = v21;
  v22 = __dst;
  if (v21)
LABEL_16:
    memmove(v22, v24, v21);
LABEL_17:
  *((_BYTE *)v22 + v21) = 0;
  v27 = __dst;
  if (v144 < 0)
    v27 = (void **)__dst[0];
  __s = (const char *)v27;
  v28 = *(_QWORD *)v145.tv_sec;
  v29 = (const char *)(*(_QWORD *)v145.tv_sec + 16);
  v128 = v29;
  if (*(char *)(*(_QWORD *)v145.tv_sec + 39) < 0)
  {
    v29 = *(const char **)(v28 + 16);
    v30 = *(_QWORD *)(v28 + 24);
  }
  else
  {
    v30 = *(unsigned __int8 *)(*(_QWORD *)v145.tv_sec + 39);
  }
  v31 = v20;
  v130 = *(void **)(a1 + 112);
  v134 = *(int8x16_t *)(a1 + 96);
  v32 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v33 = byte_254A4A4F8;
  else
    v33 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v34 = byte_254A4A4F8[23];
  else
    v34 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0] = os_log_create(v33, v29);
  v35 = &object[1];
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v34 >= 0x17)
  {
    v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v36 = v34 | 7;
    v37 = v36 + 1;
    v35 = (void **)operator new(v36 + 1);
    object[3] = (void *)(v37 | 0x8000000000000000);
    object[1] = v35;
    object[2] = (void *)v34;
    goto LABEL_36;
  }
  HIBYTE(object[3]) = v34;
  if (v34)
LABEL_36:
    memmove(v35, v33, v34);
  *((_BYTE *)v35 + v34) = 0;
  LOBYTE(object[4]) = 1;
  v38 = &object[5];
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v18 = "K4cv3d3vio4capi9SlamState28CopyCurrentTrackingCameraIdsEPP9__CFErrorE3$_0";
  if (v30 >= 0x17)
  {
    v41 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v41 = v30 | 7;
    v42 = v41 + 1;
    v38 = (void **)operator new(v41 + 1);
    object[7] = (void *)(v42 | 0x8000000000000000);
    object[5] = v38;
    object[6] = (void *)v30;
    v39 = v31;
  }
  else
  {
    HIBYTE(object[7]) = v30;
    v39 = v31;
    if (!v30)
    {
      LOBYTE(object[5]) = 0;
      LOBYTE(object[8]) = 1;
      v40 = object[0];
      if ((SHIBYTE(object[7]) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_47;
    }
  }
  memmove(v38, v29, v30);
  *((_BYTE *)v38 + v30) = 0;
  LOBYTE(object[8]) = 1;
  v40 = object[0];
  if ((SHIBYTE(object[7]) & 0x80000000) == 0)
  {
LABEL_41:
    if (!LOBYTE(object[4]))
      goto LABEL_50;
    goto LABEL_48;
  }
LABEL_47:
  operator delete(object[5]);
  if (!LOBYTE(object[4]))
    goto LABEL_50;
LABEL_48:
  if (SHIBYTE(object[3]) < 0)
    operator delete(object[1]);
LABEL_50:
  if (object[0])
    os_release(object[0]);
  v129 = (void *)vextq_s8(v134, v134, 8uLL).u64[0];
  v43 = *(double *)v141.i64 * 57.2957795;
  v44 = v139 * 57.2957795;
  v45 = v137 * 57.2957795;
  if (v39 && *(_QWORD *)(v39 + 24))
  {
    v46 = _os_log_pack_size();
    v47 = (std::__shared_weak_count_vtbl *)operator new(v46, (std::align_val_t)8uLL);
    v48 = (std::__shared_weak_count *)operator new();
    v48->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v48->__shared_owners_ = 0;
    v48->__shared_weak_owners_ = 0;
    v48[1].__vftable = v47;
    *(_QWORD *)&v165 = v47;
    *((_QWORD *)&v165 + 1) = v47;
    v168 = 0;
    v166 = v48;
    v167 = 0;
    v49 = strlen(__s);
    if (v49 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v50 = v49;
    if (v49 >= 0x17)
    {
      v53 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17)
        v53 = v49 | 7;
      v54 = v53 + 1;
      v51 = operator new(v53 + 1);
      *((_QWORD *)&v170 + 1) = v54 | 0x8000000000000000;
      v169 = v51;
      *(_QWORD *)&v170 = v50;
      v39 = v31;
    }
    else
    {
      HIBYTE(v170) = v49;
      v51 = &v169;
      if (!v49)
      {
LABEL_66:
        *((_BYTE *)v51 + v50) = 0;
        v55 = v169;
        v171[0] = v170;
        *(_QWORD *)((char *)v171 + 7) = *(_QWORD *)((char *)&v170 + 7);
        v56 = HIBYTE(v170);
        v57 = operator new(0x40uLL);
        v57[1] = 0;
        v57[2] = 0;
        v57[3] = off_24C9F89B0;
        *v57 = &off_24C9F8960;
        v58 = v171[0];
        v57[4] = v55;
        v57[5] = v58;
        *(_QWORD *)((char *)v57 + 47) = *(_QWORD *)((char *)v171 + 7);
        *((_BYTE *)v57 + 55) = v56;
        v171[0] = 0;
        *(_QWORD *)((char *)v171 + 7) = 0;
        v59 = v168;
        v167 = (char *)(v57 + 3);
        v168 = (std::__shared_weak_count *)v57;
        if (v59)
        {
          p_shared_owners = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(p_shared_owners);
          while (__stlxr(v61 - 1, p_shared_owners));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        *(_OWORD *)object = v165;
        v62 = v167;
        object[2] = v166;
        if (v166)
        {
          v63 = (unint64_t *)&v166->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        v65 = v168;
        object[3] = v62;
        object[4] = v168;
        if (v168)
        {
          v66 = (unint64_t *)&v168->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
          object[5] = v62;
          do
            v68 = __ldaxr(v66);
          while (__stlxr(v68 - 1, v66));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        else
        {
          object[5] = v62;
        }
        v69 = v166;
        if (v166)
        {
          v70 = (unint64_t *)&v166->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v72 = object[0];
        if (*((char *)object[5] + 31) >= 0)
          v73 = (char *)object[5] + 8;
        else
          v73 = (char *)*((_QWORD *)object[5] + 1);
        v74 = _os_log_pack_fill();
        *(_DWORD *)v74 = 136316674;
        *(_QWORD *)(v74 + 4) = v73;
        *(_WORD *)(v74 + 12) = 2048;
        *(double *)(v74 + 14) = v43;
        *(_WORD *)(v74 + 22) = 2048;
        *(double *)(v74 + 24) = v44;
        *(_WORD *)(v74 + 32) = 2048;
        *(double *)(v74 + 34) = v45;
        *(_WORD *)(v74 + 42) = 2048;
        *(_QWORD *)(v74 + 44) = v134.i64[0];
        *(_WORD *)(v74 + 52) = 2048;
        *(_QWORD *)(v74 + 54) = v129;
        *(_WORD *)(v74 + 62) = 2048;
        *(_QWORD *)(v74 + 64) = v130;
        v75 = operator new();
        v76 = *(unsigned __int8 *)(v28 + 39);
        v77 = v128;
        if ((v76 & 0x80u) != 0)
        {
          v77 = *(const char **)(v28 + 16);
          v76 = *(_QWORD *)(v28 + 24);
        }
        *(_QWORD *)v75 = v72;
        *(_OWORD *)(v75 + 8) = *(_OWORD *)&object[1];
        object[1] = 0;
        object[2] = 0;
        *(_OWORD *)(v75 + 24) = *(_OWORD *)&object[3];
        object[3] = 0;
        object[4] = 0;
        *(_QWORD *)(v75 + 40) = v77;
        *(_QWORD *)(v75 + 48) = v76;
        *(_BYTE *)(v75 + 56) = 1;
        v169 = 0;
        *(_QWORD *)&v165 = v75;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v39 + 24) + 40))(*(_QWORD *)(v39 + 24), &v165);
        v78 = v165;
        *(_QWORD *)&v165 = 0;
        if (v78)
        {
          v79 = *(std::__shared_weak_count **)(v78 + 32);
          if (v79)
          {
            v80 = (unint64_t *)&v79->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          v82 = *(std::__shared_weak_count **)(v78 + 16);
          if (v82)
          {
            v83 = (unint64_t *)&v82->__shared_owners_;
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          MEMORY[0x212BC6398](v78, 0x10F0C40B62ED6C6);
          v85 = v169;
          v169 = 0;
          if (v85)
          {
            v86 = (std::__shared_weak_count *)v85[4];
            if (v86)
            {
              v87 = (unint64_t *)&v86->__shared_owners_;
              do
                v88 = __ldaxr(v87);
              while (__stlxr(v88 - 1, v87));
              if (!v88)
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
              }
            }
            v89 = (std::__shared_weak_count *)v85[2];
            if (v89)
            {
              v90 = (unint64_t *)&v89->__shared_owners_;
              do
                v91 = __ldaxr(v90);
              while (__stlxr(v91 - 1, v90));
              if (!v91)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
            }
            MEMORY[0x212BC6398](v85, 0x10F0C40B62ED6C6);
          }
        }
        v92 = (std::__shared_weak_count *)object[4];
        if (object[4])
        {
          v93 = (unint64_t *)((char *)object[4] + 8);
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        v95 = (std::__shared_weak_count *)object[2];
        if (object[2])
        {
          v96 = (unint64_t *)((char *)object[2] + 8);
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        goto LABEL_125;
      }
    }
    memcpy(v51, __s, v50);
    goto LABEL_66;
  }
  os_log_type_enabled(v40, OS_LOG_TYPE_INFO);
  LODWORD(object[0]) = 136316674;
  *(void **)((char *)object + 4) = (void *)__s;
  WORD2(object[1]) = 2048;
  *(double *)((char *)&object[1] + 6) = *(double *)v141.i64 * 57.2957795;
  HIWORD(object[2]) = 2048;
  *(double *)&object[3] = v139 * 57.2957795;
  LOWORD(object[4]) = 2048;
  *(double *)((char *)&object[4] + 2) = v137 * 57.2957795;
  WORD1(object[5]) = 2048;
  *(uint64_t *)((char *)&object[5] + 4) = v134.i64[0];
  WORD2(object[6]) = 2048;
  *(void **)((char *)&object[6] + 6) = v129;
  HIWORD(object[7]) = 2048;
  object[8] = v130;
  v52 = (void *)_os_log_send_and_compose_impl();
  if (v52)
    free(v52);
LABEL_125:
  if ((SHIBYTE(v144) & 0x80000000) == 0)
  {
    if (!v131)
      goto LABEL_147;
LABEL_129:
    if ((v163 & 0x10) != 0)
    {
      v100 = v162;
      if (v162 < v159)
      {
        v162 = v159;
        v100 = v159;
      }
      v101 = v158;
      v98 = v100 - (_QWORD)v158;
      if (v100 - (unint64_t)v158 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_180;
    }
    else
    {
      if ((v163 & 8) == 0)
      {
        v98 = 0;
        HIBYTE(object[2]) = 0;
        v99 = object;
        goto LABEL_142;
      }
      v101 = v156;
      v98 = v157 - (_QWORD)v156;
      if ((unint64_t)(v157 - (_QWORD)v156) > 0x7FFFFFFFFFFFFFF7)
LABEL_180:
        sub_20E860B7C();
    }
    if (v98 >= 0x17)
    {
      v102 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v98 | 7) != 0x17)
        v102 = v98 | 7;
      v103 = v102 + 1;
      v99 = operator new(v102 + 1);
      object[2] = (void *)(v103 | 0x8000000000000000);
      object[0] = v99;
      object[1] = (void *)v98;
    }
    else
    {
      HIBYTE(object[2]) = v98;
      v99 = object;
      if (!v98)
        goto LABEL_142;
    }
    memmove(v99, v101, v98);
LABEL_142:
    *((_BYTE *)v99 + v98) = 0;
    v104 = object;
    if (SHIBYTE(object[2]) < 0)
      v104 = (void **)object[0];
    sub_20E8C003C((uint64_t)&v145, "[Inertial State Initializer]: %s was successful. Initial orientation: [%f, %f, %f] deg. Initial velocity: [%f, %f, %f] m/s", (const char *)v104, v43, v44, v45, *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112));
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    sub_20E863570((uint64_t)&v145);
    goto LABEL_147;
  }
  operator delete(__dst[0]);
  if (v131)
    goto LABEL_129;
LABEL_147:
  sub_20E863570((uint64_t)&v145);
  v105 = v152;
  if (v152)
  {
    v106 = (unint64_t *)&v152->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
LABEL_152:
  v108 = *(double *)(a1 + 112);
  v109 = *(int8x16_t *)(a1 + 96);
  v110 = atomic_load((unsigned __int8 *)&qword_254A61FA0);
  *(int8x16_t *)__sa = v109;
  v135 = v108;
  if ((v110 & 1) == 0)
  {
    v17 = __cxa_guard_acquire(&qword_254A61FA0);
    v109 = *(int8x16_t *)__sa;
    v108 = v135;
    if ((_DWORD)v17)
    {
      qword_254A61FE8 = 0;
      qword_254A61FF0 = 0;
      v126 = operator new(0x58uLL);
      v126[1] = 0;
      v126[2] = 0;
      *((_BYTE *)v126 + 24) = 0;
      *v126 = &off_24C9F89E8;
      *((_BYTE *)v126 + 80) = 0;
      qword_254A61FE8 = (uint64_t)(v126 + 3);
      qword_254A61FF0 = (uint64_t)v126;
      __cxa_atexit((void (*)(void *))sub_20F0AE350, &qword_254A61FE8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61FA0);
      v109 = *(int8x16_t *)__sa;
      v108 = v135;
    }
  }
  v111 = *((double *)v18 + 310);
  v112 = *(double *)v141.i64 * v111;
  v113 = v139 * v111;
  v114 = v137 * v111;
  v127 = *(double *)v141.i64 * v111;
  v142 = (void *)vextq_s8(v109, v109, 8uLL).u64[0];
  if (sub_20F0AE3B8(v17, v5, v6, v7, v8, v9, v10, v11, *(double *)v109.i64, *(double *)&v142, *(double *)v109.i64, v108, v12, v13, v14, v15, a2, v127, v139 * v111,
                       v137 * v111,
                       *(double *)v109.i64,
                       *(double *)&v142,
                       v108))
  {
    v115 = sub_210219C18();
    v116 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_174;
    LODWORD(object[0]) = 67110656;
    HIDWORD(object[0]) = a2;
    LOWORD(object[1]) = 2048;
    *(void **)((char *)&object[1] + 2) = *(void **)&v112;
    WORD1(object[2]) = 2048;
    *(void **)((char *)&object[2] + 4) = *(void **)&v113;
    WORD2(object[3]) = 2048;
    *(void **)((char *)&object[3] + 6) = *(void **)&v114;
    HIWORD(object[4]) = 2048;
    object[5] = __sa[0];
    LOWORD(object[6]) = 2048;
    *(void **)((char *)&object[6] + 2) = v142;
    WORD1(object[7]) = 2048;
    *(void **)((char *)&object[7] + 4) = *(void **)&v135;
    v118 = (char *)_os_log_send_and_compose_impl();
    v119 = strlen(v118);
    v145.tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)&v145);
    tv_sec = v145.tv_sec;
    timespec_get(&v145, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v115 + 1), (__int128 *)(v115 + 5), "[Inertial State Initializer]: Initialization method %d was successful. Initial orientation: [%f, %f, %f] deg. Initial velocity: [%f, %f, %f] m/s", 0x90uLL, v118, v119, tv_sec, &v145);
    std::mutex::lock(&stru_254A5A410);
    v121 = qword_254A5A458;
    for (i = unk_254A5A460; v121 != i; v121 += 40)
    {
      v123 = *(_QWORD *)(v121 + 32);
      if (!v123)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v123 + 48))(v123, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v178 < 0)
    {
      operator delete(v177);
      if ((v176 & 0x80000000) == 0)
      {
LABEL_161:
        if (!v174)
        {
LABEL_167:
          if (LOBYTE(object[7]) && SHIBYTE(object[6]) < 0)
            operator delete(object[4]);
          if (SHIBYTE(object[3]) < 0)
            operator delete(object[1]);
          if (v118)
            free(v118);
LABEL_174:
          if (os_signpost_enabled((os_log_t)*v115))
          {
            LODWORD(object[0]) = 67110656;
            HIDWORD(object[0]) = a2;
            LOWORD(object[1]) = 2048;
            *(void **)((char *)&object[1] + 2) = *(void **)&v112;
            WORD1(object[2]) = 2048;
            *(void **)((char *)&object[2] + 4) = *(void **)&v113;
            WORD2(object[3]) = 2048;
            *(void **)((char *)&object[3] + 6) = *(void **)&v114;
            HIWORD(object[4]) = 2048;
            object[5] = __sa[0];
            LOWORD(object[6]) = 2048;
            *(void **)((char *)&object[6] + 2) = v142;
            WORD1(object[7]) = 2048;
            *(void **)((char *)&object[7] + 4) = *(void **)&v135;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_176;
        }
LABEL_165:
        if (v173 < 0)
          operator delete(object[8]);
        goto LABEL_167;
      }
    }
    else if ((v176 & 0x80000000) == 0)
    {
      goto LABEL_161;
    }
    operator delete(v175);
    if (!v174)
      goto LABEL_167;
    goto LABEL_165;
  }
LABEL_176:
  v154[0] = *MEMORY[0x24BEDB7F0];
  v124 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v154 + *(_QWORD *)(v154[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v155[0] = v124;
  v155[1] = MEMORY[0x24BEDB848] + 16;
  if (v161 < 0)
    operator delete(v160);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v164);
}

void sub_20F0ACF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (LOBYTE(STACK[0x2B8]) && SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  __cxa_guard_abort(&qword_254A4A510);
  if (a39 < 0)
    operator delete(a34);
  sub_20E863714((uint64_t)&a40);
  sub_20E863784((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_20F0AD108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_20E863784((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_20F0AD11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_20E863784((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_20F0AD130()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x20F0AD1FCLL);
  JUMPOUT(0x20F0AD218);
}

void sub_20F0AD13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_20E863784((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_20F0AD150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_20E863784((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_20F0AD170()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F0AD184);
}

void ***sub_20F0AD228(void ***a1)
{
  if (*a1)
  {
    sub_20F0ADC00((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

void sub_20F0AD264(uint64_t a1)
{
  sub_20F0ADFA8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F0AD288(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 7)
  {
    if (a2)
    {
      v11 = &v5[128 * a2];
      v12 = a2 << 7;
      do
      {
        *((_OWORD *)v5 + 4) = xmmword_21039BD50;
        *((_OWORD *)v5 + 5) = unk_21039BD60;
        *((_OWORD *)v5 + 6) = xmmword_21039BD70;
        *((_OWORD *)v5 + 7) = unk_21039BD80;
        *(_OWORD *)v5 = xmmword_21039BD10;
        *((_OWORD *)v5 + 1) = unk_21039BD20;
        *((_OWORD *)v5 + 2) = xmmword_21039BD30;
        *((_OWORD *)v5 + 3) = unk_21039BD40;
        v5 += 128;
        v12 -= 128;
      }
      while (v12);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = (v5 - *a1) >> 7;
    if ((v6 + a2) >> 57)
      sub_20E867F44();
    v7 = v4 - *a1;
    v8 = v7 >> 6;
    if (v7 >> 6 <= v6 + a2)
      v8 = v6 + a2;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFF80)
      v9 = 0x1FFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
    {
      if (v9 >> 57)
        sub_20E877A38();
      v10 = (char *)operator new(v9 << 7);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[128 * v6];
    v14 = a2 << 7;
    v15 = &v13[128 * a2];
    v16 = v13;
    do
    {
      *((_OWORD *)v16 + 4) = xmmword_21039BD50;
      *((_OWORD *)v16 + 5) = unk_21039BD60;
      *((_OWORD *)v16 + 6) = xmmword_21039BD70;
      *((_OWORD *)v16 + 7) = unk_21039BD80;
      *(_OWORD *)v16 = xmmword_21039BD10;
      *((_OWORD *)v16 + 1) = unk_21039BD20;
      *((_OWORD *)v16 + 2) = xmmword_21039BD30;
      *((_OWORD *)v16 + 3) = unk_21039BD40;
      v16 += 128;
      v14 -= 128;
    }
    while (v14);
    v17 = *a1;
    if (v5 != *a1)
    {
      do
      {
        v18 = *((_OWORD *)v5 - 8);
        v19 = *((_OWORD *)v5 - 7);
        v20 = *((_OWORD *)v5 - 5);
        *((_OWORD *)v13 - 6) = *((_OWORD *)v5 - 6);
        *((_OWORD *)v13 - 5) = v20;
        *((_OWORD *)v13 - 8) = v18;
        *((_OWORD *)v13 - 7) = v19;
        v21 = *((_OWORD *)v5 - 4);
        v22 = *((_OWORD *)v5 - 3);
        v23 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v23;
        *((_OWORD *)v13 - 4) = v21;
        *((_OWORD *)v13 - 3) = v22;
        v13 -= 128;
        v5 -= 128;
      }
      while (v5 != v17);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = &v10[128 * v9];
    if (v5)
      operator delete(v5);
  }
}

void sub_20F0AD424(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *p_shared_owners;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;

  v4 = a1[2];
  v5 = a1[1];
  if (0x4FA4FA4FA4FA4FA5 * ((v4 - v5) >> 5) >= a2)
  {
    if (!a2)
    {
LABEL_60:
      a1[1] = v5;
      return;
    }
    v11 = &v5[1440 * a2];
    v12 = 1440 * a2 - 1440;
    if (v12 >= 0x5A0)
    {
      v31 = v12 / 0x5A0 + 1;
      v13 = &v5[1440 * (v31 & 0x7FFFFFFFFFFFFELL)];
      v32 = v31 & 0x7FFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v5 + 248) = 0;
        *((_DWORD *)v5 + 608) = 0;
        *((_QWORD *)v5 + 125) = 0x7FF8000000000000;
        *((_QWORD *)v5 + 305) = 0x7FF8000000000000;
        *((_QWORD *)v5 + 126) = 0xFFEFFFFFFFFFFFFFLL;
        *((_QWORD *)v5 + 306) = 0xFFEFFFFFFFFFFFFFLL;
        *((_OWORD *)v5 + 89) = xmmword_2102E3C60;
        *((_OWORD *)v5 + 179) = xmmword_2102E3C60;
        v5 += 2880;
        v32 -= 2;
      }
      while (v32);
      if (v31 == (v31 & 0x7FFFFFFFFFFFFELL))
        goto LABEL_59;
    }
    else
    {
      v13 = a1[1];
    }
    do
    {
      *((_DWORD *)v13 + 248) = 0;
      *((_QWORD *)v13 + 125) = 0x7FF8000000000000;
      *((_QWORD *)v13 + 126) = 0xFFEFFFFFFFFFFFFFLL;
      *((_OWORD *)v13 + 89) = xmmword_2102E3C60;
      v13 += 1440;
    }
    while (v13 != v11);
LABEL_59:
    v5 = v11;
    goto LABEL_60;
  }
  v6 = *a1;
  v7 = 0x4FA4FA4FA4FA4FA5 * ((v5 - *a1) >> 5);
  v8 = v7 + a2;
  if (v7 + a2 > 0x2D82D82D82D82DLL)
    sub_20E867F44();
  if (0x9F49F49F49F49F4ALL * ((v4 - v6) >> 5) > v8)
    v8 = 0x9F49F49F49F49F4ALL * ((v4 - v6) >> 5);
  if ((unint64_t)(0x4FA4FA4FA4FA4FA5 * ((v4 - v6) >> 5)) >= 0x16C16C16C16C16)
    v9 = 0x2D82D82D82D82DLL;
  else
    v9 = v8;
  if (v9)
  {
    if (v9 > 0x2D82D82D82D82DLL)
      sub_20E877A38();
    v10 = (char *)operator new(1440 * v9);
  }
  else
  {
    v10 = 0;
  }
  v14 = &v10[1440 * v7];
  v15 = &v10[1440 * v9];
  v16 = &v14[1440 * a2];
  v17 = 1440 * a2 - 1440;
  v18 = v14;
  if (v17 < 0x5A0)
    goto LABEL_66;
  v19 = v17 / 0x5A0 + 1;
  v18 = &v14[1440 * (v19 & 0x7FFFFFFFFFFFFELL)];
  v20 = v19 & 0x7FFFFFFFFFFFFELL;
  v21 = &v10[1440 * v7];
  do
  {
    *((_DWORD *)v21 + 248) = 0;
    *((_DWORD *)v21 + 608) = 0;
    *((_QWORD *)v21 + 125) = 0x7FF8000000000000;
    *((_QWORD *)v21 + 305) = 0x7FF8000000000000;
    *((_QWORD *)v21 + 126) = 0xFFEFFFFFFFFFFFFFLL;
    *((_QWORD *)v21 + 306) = 0xFFEFFFFFFFFFFFFFLL;
    *((_OWORD *)v21 + 89) = xmmword_2102E3C60;
    *((_OWORD *)v21 + 179) = xmmword_2102E3C60;
    v21 += 2880;
    v20 -= 2;
  }
  while (v20);
  if (v19 != (v19 & 0x7FFFFFFFFFFFFELL))
  {
LABEL_66:
    do
    {
      *((_DWORD *)v18 + 248) = 0;
      *((_QWORD *)v18 + 125) = 0x7FF8000000000000;
      *((_QWORD *)v18 + 126) = 0xFFEFFFFFFFFFFFFFLL;
      *((_OWORD *)v18 + 89) = xmmword_2102E3C60;
      v18 += 1440;
    }
    while (v18 != v16);
  }
  v33 = &v14[1440 * a2];
  if (v5 != v6)
  {
    v22 = 0;
    do
    {
      sub_20E972DB4((uint64_t)&v14[v22 - 1440], (uint64_t)&v5[v22 - 1440]);
      memcpy(&v14[v22 - 440], &v5[v22 - 440], 0x1B8uLL);
      v22 -= 1440;
    }
    while (&v5[v22] != v6);
    v5 = a1[1];
    v14 += v22;
    v16 = v33;
    v15 = &v10[1440 * v9];
  }
  v23 = *a1;
  *a1 = v14;
  a1[1] = v16;
  a1[2] = v15;
  if (v5 == v23)
  {
    if (v5)
      goto LABEL_54;
    return;
  }
  do
  {
    v34 = v5 - 1440;
    v24 = *((_DWORD *)v5 - 112);
    if (v24 == -1)
      goto LABEL_27;
    if (v24 > 7)
    {
      if (v24 > 0xB)
      {
        if (v24 >= 0xF)
        {
          v25 = (std::__shared_weak_count *)*((_QWORD *)v5 - 68);
          if (v25)
          {
            p_shared_owners = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldaxr(p_shared_owners);
            while (__stlxr(v27 - 1, p_shared_owners));
            goto LABEL_51;
          }
        }
      }
      else if (v24 > 9)
      {
        if (v24 != 10)
        {
          v25 = (std::__shared_weak_count *)*((_QWORD *)v5 - 96);
          if (v25)
          {
            v30 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldaxr(v30);
            while (__stlxr(v27 - 1, v30));
            goto LABEL_51;
          }
        }
      }
      else if (v24 == 9)
      {
        v25 = (std::__shared_weak_count *)*((_QWORD *)v5 - 117);
        if (v25)
        {
          v28 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v28);
          while (__stlxr(v27 - 1, v28));
          goto LABEL_51;
        }
      }
    }
    else if (v24 == 7)
    {
      v25 = (std::__shared_weak_count *)*((_QWORD *)v5 - 120);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
LABEL_51:
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
LABEL_27:
    v5 = v34;
  }
  while (v34 != v23);
  v5 = v23;
  if (v23)
LABEL_54:
    operator delete(v5);
}

void sub_20F0AD850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  sub_20F0AD9B8(v2, v3 + v4 + 1440 * v5);
  sub_20F0AD880((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0AD880(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 1440;
    v4 = *(_DWORD *)(i - 448);
    if (v4 == -1)
      continue;
    if (v4 > 7)
    {
      if (v4 > 0xB)
      {
        if (v4 >= 0xF)
        {
          v5 = *(std::__shared_weak_count **)(i - 544);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            goto LABEL_27;
          }
        }
      }
      else if (v4 > 9)
      {
        if (v4 != 10)
        {
          v5 = *(std::__shared_weak_count **)(i - 768);
          if (v5)
          {
            v10 = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(v10);
            while (__stlxr(v7 - 1, v10));
            goto LABEL_27;
          }
        }
      }
      else if (v4 == 9)
      {
        v5 = *(std::__shared_weak_count **)(i - 936);
        if (v5)
        {
          v8 = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(v8);
          while (__stlxr(v7 - 1, v8));
          goto LABEL_27;
        }
      }
    }
    else if (v4 == 7)
    {
      v5 = *(std::__shared_weak_count **)(i - 960);
      if (v5)
      {
        v6 = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
LABEL_27:
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        continue;
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20F0AD9B8(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *p_shared_owners;
  unint64_t *v10;

  if (a2 != a1)
  {
    for (i = a2; i != a1; i += 1440)
    {
      v4 = *(_DWORD *)(i + 992);
      if (v4 != -1)
      {
        if (v4 > 7)
        {
          if (v4 > 0xB)
          {
            if (v4 < 0xF)
              continue;
            v5 = *(std::__shared_weak_count **)(i + 896);
            if (!v5)
              continue;
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
          }
          else if (v4 > 9)
          {
            if (v4 == 10)
              continue;
            v5 = *(std::__shared_weak_count **)(i + 672);
            if (!v5)
              continue;
            v10 = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(v10);
            while (__stlxr(v7 - 1, v10));
          }
          else
          {
            if (v4 != 9)
              continue;
            v5 = *(std::__shared_weak_count **)(i + 504);
            if (!v5)
              continue;
            v8 = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(v8);
            while (__stlxr(v7 - 1, v8));
          }
        }
        else
        {
          if (v4 != 7)
            continue;
          v5 = *(std::__shared_weak_count **)(i + 480);
          if (!v5)
            continue;
          v6 = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 - 1, v6));
        }
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void sub_20F0ADAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *p_shared_owners;
  unint64_t *v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 1440;
      v6 = *(_DWORD *)(v4 - 448);
      if (v6 != -1)
      {
        if (v6 > 7)
        {
          if (v6 > 0xB)
          {
            if (v6 >= 0xF)
            {
              v7 = *(std::__shared_weak_count **)(v4 - 544);
              if (v7)
              {
                p_shared_owners = (unint64_t *)&v7->__shared_owners_;
                do
                  v9 = __ldaxr(p_shared_owners);
                while (__stlxr(v9 - 1, p_shared_owners));
LABEL_27:
                if (!v9)
                {
                  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                  std::__shared_weak_count::__release_weak(v7);
                }
              }
            }
          }
          else if (v6 > 9)
          {
            if (v6 != 10)
            {
              v7 = *(std::__shared_weak_count **)(v4 - 768);
              if (v7)
              {
                v12 = (unint64_t *)&v7->__shared_owners_;
                do
                  v9 = __ldaxr(v12);
                while (__stlxr(v9 - 1, v12));
                goto LABEL_27;
              }
            }
          }
          else if (v6 == 9)
          {
            v7 = *(std::__shared_weak_count **)(v4 - 936);
            if (v7)
            {
              v10 = (unint64_t *)&v7->__shared_owners_;
              do
                v9 = __ldaxr(v10);
              while (__stlxr(v9 - 1, v10));
              goto LABEL_27;
            }
          }
        }
        else if (v6 == 7)
        {
          v7 = *(std::__shared_weak_count **)(v4 - 960);
          if (v7)
          {
            v8 = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(v8);
            while (__stlxr(v9 - 1, v8));
            goto LABEL_27;
          }
        }
      }
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_20F0ADC00(uint64_t a1, void **a2)
{
  void **v4;
  void *v5;
  void *v6;
  void **v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v6 = *(v4 - 3);
      if (v6)
      {
        *(v4 - 2) = v6;
        operator delete(v6);
      }
      v7 = v4 - 6;
      v8 = (char *)*(v4 - 6);
      if (v8)
      {
        v9 = (char *)*(v4 - 5);
        v5 = *(v4 - 6);
        if (v9 != v8)
        {
          do
          {
            v11 = (void *)*((_QWORD *)v9 - 3);
            if (v11)
            {
              *((_QWORD *)v9 - 2) = v11;
              operator delete(v11);
            }
            v12 = (void *)*((_QWORD *)v9 - 6);
            if (v12)
            {
              *((_QWORD *)v9 - 5) = v12;
              operator delete(v12);
            }
            v13 = (void *)*((_QWORD *)v9 - 9);
            if (v13)
            {
              *((_QWORD *)v9 - 8) = v13;
              operator delete(v13);
            }
            v14 = *((_QWORD *)v9 - 12);
            if (v14)
            {
              v15 = *((_QWORD *)v9 - 11);
              v10 = (void *)*((_QWORD *)v9 - 12);
              if (v15 != v14)
              {
                v16 = v15 - 208;
                do
                {
                  v18 = *(void **)(v16 + 184);
                  if (v18)
                  {
                    *(_QWORD *)(v16 + 192) = v18;
                    operator delete(v18);
                  }
                  v19 = *(void **)(v16 + 160);
                  if (v19)
                  {
                    *(_QWORD *)(v16 + 168) = v19;
                    operator delete(v19);
                  }
                  if (*(_BYTE *)(v16 + 152))
                  {
                    v20 = *(void **)(v16 + 128);
                    if (v20)
                    {
                      *(_QWORD *)(v16 + 136) = v20;
                      operator delete(v20);
                    }
                  }
                  v21 = *(void **)(v16 + 104);
                  if (v21)
                  {
                    *(_QWORD *)(v16 + 112) = v21;
                    operator delete(v21);
                  }
                  if (*(_BYTE *)(v16 + 96))
                  {
                    v22 = *(void **)(v16 + 72);
                    if (v22)
                    {
                      *(_QWORD *)(v16 + 80) = v22;
                      operator delete(v22);
                    }
                  }
                  v23 = *(void **)(v16 + 48);
                  if (v23)
                  {
                    *(_QWORD *)(v16 + 56) = v23;
                    operator delete(v23);
                  }
                  v24 = *(void **)(v16 + 24);
                  if (v24)
                  {
                    *(_QWORD *)(v16 + 32) = v24;
                    operator delete(v24);
                  }
                  v25 = *(void **)v16;
                  if (*(_QWORD *)v16)
                  {
                    *(_QWORD *)(v16 + 8) = v25;
                    operator delete(v25);
                  }
                  v26 = *(void **)(v16 - 24);
                  if (v26)
                  {
                    *(_QWORD *)(v16 - 16) = v26;
                    operator delete(v26);
                  }
                  v27 = *(void **)(v16 - 48);
                  if (v27)
                  {
                    *(_QWORD *)(v16 - 40) = v27;
                    operator delete(v27);
                  }
                  if (*(_BYTE *)(v16 - 56))
                  {
                    v28 = *(void **)(v16 - 80);
                    if (v28)
                    {
                      *(_QWORD *)(v16 - 72) = v28;
                      operator delete(v28);
                    }
                  }
                  v29 = *(void **)(v16 - 104);
                  if (v29)
                  {
                    *(_QWORD *)(v16 - 96) = v29;
                    operator delete(v29);
                  }
                  if (*(_BYTE *)(v16 - 112))
                  {
                    v30 = *(void **)(v16 - 136);
                    if (v30)
                    {
                      *(_QWORD *)(v16 - 128) = v30;
                      operator delete(v30);
                    }
                  }
                  v31 = *(void **)(v16 - 160);
                  if (v31)
                  {
                    *(_QWORD *)(v16 - 152) = v31;
                    operator delete(v31);
                  }
                  v32 = *(void **)(v16 - 184);
                  if (v32)
                  {
                    *(_QWORD *)(v16 - 176) = v32;
                    operator delete(v32);
                  }
                  v33 = *(void **)(v16 - 208);
                  if (v33)
                  {
                    *(_QWORD *)(v16 - 200) = v33;
                    operator delete(v33);
                  }
                  v17 = v16 - 232;
                  v16 -= 440;
                }
                while (v17 != v14);
                v10 = (void *)*((_QWORD *)v9 - 12);
              }
              *((_QWORD *)v9 - 11) = v14;
              operator delete(v10);
            }
            v9 -= 104;
          }
          while (v9 != v8);
          v5 = *v7;
        }
        *(v4 - 5) = v8;
        operator delete(v5);
      }
      v4 -= 6;
    }
    while (v7 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_20F0ADE2C(uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    v5 = *(void ***)(a1 + 8);
    do
    {
      v8 = (char *)*(v5 - 3);
      v5 -= 3;
      v7 = v8;
      if (v8)
      {
        v9 = (char *)*(v4 - 2);
        v6 = v7;
        if (v9 != v7)
        {
          do
          {
            v10 = (void *)*((_QWORD *)v9 - 3);
            if (v10)
            {
              *((_QWORD *)v9 - 2) = v10;
              operator delete(v10);
            }
            v11 = (void *)*((_QWORD *)v9 - 6);
            if (v11)
            {
              *((_QWORD *)v9 - 5) = v11;
              operator delete(v11);
            }
            v12 = (void *)*((_QWORD *)v9 - 9);
            if (v12)
            {
              *((_QWORD *)v9 - 8) = v12;
              operator delete(v12);
            }
            v13 = (void *)*((_QWORD *)v9 - 12);
            if (v13)
            {
              *((_QWORD *)v9 - 11) = v13;
              operator delete(v13);
            }
            v14 = (void *)*((_QWORD *)v9 - 15);
            if (v14)
            {
              *((_QWORD *)v9 - 14) = v14;
              operator delete(v14);
            }
            sub_20E990FD8((void **)v9 - 27);
            v9 -= 240;
          }
          while (v9 != v7);
          v6 = *v5;
        }
        *(v4 - 2) = v7;
        operator delete(v6);
      }
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

_QWORD *sub_20F0ADF1C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[8];
  if (v5)
  {
    a1[9] = v5;
    operator delete(v5);
  }
  v6 = a1[5];
  if (v6)
  {
    sub_20F0ADAD0((uint64_t)(a1 + 5), v6);
    operator delete((void *)a1[5]);
  }
  v7 = (void *)a1[2];
  if (v7)
  {
    a1[3] = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_20F0ADFA8(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &off_24C9F88D0;
  v2 = *(_QWORD *)(a1 + 1288);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = *(void ***)(a1 + 424);
  if (v3)
  {
    sub_20F0ADE2C(a1 + 424, v3);
    operator delete(*(void **)(a1 + 424));
  }
  v4 = *(void ***)(a1 + 376);
  if (v4)
  {
    sub_20F0ADC00(a1 + 376, v4);
    operator delete(*(void **)(a1 + 376));
  }
  sub_20F0ADF1C((_QWORD *)(a1 + 208));
  v5 = *(void **)(a1 + 112);
  if (v5)
  {
    *(_QWORD *)(a1 + 120) = v5;
    operator delete(v5);
  }
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_15:
    operator delete(*(void **)(a1 + 56));
    v6 = *(void **)(a1 + 32);
    if (!v6)
      return a1;
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    goto LABEL_15;
LABEL_11:
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
LABEL_12:
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_20F0AE088(uint64_t a1)
{
  sub_20F0AE0AC(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F0AE0AC(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &off_24C9F8900;
  v2 = *(_QWORD *)(a1 + 1560);
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = *(void ***)(a1 + 424);
  if (v3)
  {
    sub_20F0ADE2C(a1 + 424, v3);
    operator delete(*(void **)(a1 + 424));
  }
  v4 = *(void ***)(a1 + 376);
  if (v4)
  {
    sub_20F0ADC00(a1 + 376, v4);
    operator delete(*(void **)(a1 + 376));
  }
  sub_20F0ADF1C((_QWORD *)(a1 + 208));
  v5 = *(void **)(a1 + 112);
  if (v5)
  {
    *(_QWORD *)(a1 + 120) = v5;
    operator delete(v5);
  }
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_15:
    operator delete(*(void **)(a1 + 56));
    v6 = *(void **)(a1 + 32);
    if (!v6)
      return a1;
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    goto LABEL_15;
LABEL_11:
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
LABEL_12:
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_20F0AE188(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 720))
  {
    v2 = *(void **)(a1 + 696);
    if (v2)
    {
      *(_QWORD *)(a1 + 704) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 672);
    if (v3)
    {
      *(_QWORD *)(a1 + 680) = v3;
      operator delete(v3);
    }
    sub_20F04F084((_QWORD *)(a1 + 248));
    v4 = *(void **)(a1 + 224);
    if (v4)
    {
      *(_QWORD *)(a1 + 232) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 200);
    if (v5)
    {
      *(_QWORD *)(a1 + 208) = v5;
      operator delete(v5);
    }
    sub_20F028B60(a1);
  }
  return a1;
}

uint64_t sub_20F0AE200(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(result + 720))
  {
    v1 = result;
    v2 = *(void **)(result + 696);
    if (v2)
    {
      *(_QWORD *)(v1 + 704) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(v1 + 672);
    if (v3)
    {
      *(_QWORD *)(v1 + 680) = v3;
      operator delete(v3);
    }
    sub_20F04F084((_QWORD *)(v1 + 248));
    v4 = *(void **)(v1 + 224);
    if (v4)
    {
      *(_QWORD *)(v1 + 232) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v1 + 200);
    if (v5)
    {
      *(_QWORD *)(v1 + 208) = v5;
      operator delete(v5);
    }
    result = sub_20F028B60(v1);
    *(_BYTE *)(v1 + 720) = 0;
  }
  return result;
}

uint64_t sub_20F0AE278(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_20F0AE2B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F8960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F0AE2C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F8960;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F0AE2F8(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_20F0AE310(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F0AE350(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F0AE3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, int a17, double a18, double a19, double a20,double a21,double a22,double a23)
{
  uint64_t v15;
  uint64_t result;

  v15 = qword_254A61FE8;
  if (*(_BYTE *)(qword_254A61FE8 + 56)
    && *(_DWORD *)qword_254A61FE8 == a17
    && *(double *)(qword_254A61FE8 + 8) == a18
    && *(double *)(qword_254A61FE8 + 16) == a19
    && *(double *)(qword_254A61FE8 + 24) == a20
    && *(double *)(qword_254A61FE8 + 32) == a21
    && *(double *)(qword_254A61FE8 + 40) == a22
    && *(double *)(qword_254A61FE8 + 48) == a23)
  {
    return 0;
  }
  *(_DWORD *)qword_254A61FE8 = a17;
  *(double *)(v15 + 8) = a18;
  *(double *)(v15 + 16) = a19;
  *(double *)(v15 + 24) = a20;
  *(double *)(v15 + 32) = a21;
  *(double *)(v15 + 40) = a22;
  *(double *)(v15 + 48) = a23;
  result = 1;
  *(_BYTE *)(v15 + 56) = 1;
  return result;
}

void sub_20F0AE474(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F89E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F0AE484(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F89E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F0AE4BC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F0AE524(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F0AE58C(uint64_t *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  uint64_t v12;
  uint64_t result;

  v12 = *a1;
  if (*(_BYTE *)(*a1 + 32)
    && *(double *)v12 == a10
    && *(double *)(v12 + 8) == a11
    && *(double *)(v12 + 16) == a12
    && *(double *)(v12 + 24) == a13)
  {
    return 0;
  }
  *(double *)v12 = a10;
  *(double *)(v12 + 8) = a11;
  *(double *)(v12 + 16) = a12;
  *(double *)(v12 + 24) = a13;
  result = 1;
  *(_BYTE *)(v12 + 32) = 1;
  return result;
}

void sub_20F0AE60C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F8AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F0AE61C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F8AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F0AE654(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F0AE6BC(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  uint64_t v10;
  uint64_t result;

  v10 = qword_254A62058;
  if (*(_BYTE *)(qword_254A62058 + 16) && *(double *)qword_254A62058 == a9 && *(double *)(qword_254A62058 + 8) == a10)
    return 0;
  *(double *)qword_254A62058 = a9;
  *(double *)(v10 + 8) = a10;
  result = 1;
  *(_BYTE *)(v10 + 16) = 1;
  return result;
}

void sub_20F0AE71C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F8B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F0AE72C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F8B28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F0AE764(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F0AE7CC(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t v14;
  uint64_t result;

  v14 = qword_254A62068;
  if (*(_BYTE *)(qword_254A62068 + 48)
    && *(double *)qword_254A62068 == a9
    && *(double *)(qword_254A62068 + 8) == a10
    && *(double *)(qword_254A62068 + 16) == a11
    && *(double *)(qword_254A62068 + 24) == a12
    && *(double *)(qword_254A62068 + 32) == a13
    && *(double *)(qword_254A62068 + 40) == a14)
  {
    return 0;
  }
  *(double *)qword_254A62068 = a9;
  *(double *)(v14 + 8) = a10;
  *(double *)(v14 + 16) = a11;
  *(double *)(v14 + 24) = a12;
  *(double *)(v14 + 32) = a13;
  *(double *)(v14 + 40) = a14;
  result = 1;
  *(_BYTE *)(v14 + 48) = 1;
  return result;
}

void sub_20F0AE874(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F8B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F0AE884(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F8B78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F0AE8BC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void **v19;
  void **v20;
  void *v21;
  void *v22;
  void **v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;

  v5 = *(void ***)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (void **)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(void ***)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555)
      sub_20E867F44();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x555555555555555)
        sub_20E877A38();
      v11 = (char *)operator new(48 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[48 * v7];
    v14 = &v11[48 * v10];
    v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_20:
        operator delete(v5);
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17 * 8];
        v19 = &v5[v17];
        *((_QWORD *)v18 - 5) = 0;
        *((_QWORD *)v18 - 4) = 0;
        *((_OWORD *)v18 - 3) = *(_OWORD *)&v5[v17 - 6];
        *((_QWORD *)v18 - 4) = v5[v17 - 4];
        *(v19 - 6) = 0;
        *(v19 - 5) = 0;
        *(v19 - 4) = 0;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        *(_OWORD *)(v18 - 24) = *(_OWORD *)&v5[v17 - 3];
        *((_QWORD *)v18 - 1) = v5[v17 - 1];
        *(v19 - 3) = 0;
        *(v19 - 2) = 0;
        *(v19 - 1) = 0;
        v17 -= 6;
      }
      while (&v5[v17] != v6);
      v5 = *(void ***)a1;
      v20 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = &v13[v17 * 8];
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v20 != v5)
      {
        do
        {
          v22 = *(v20 - 3);
          if (v22)
          {
            *(v20 - 2) = v22;
            operator delete(v22);
          }
          v23 = v20 - 6;
          v24 = (char *)*(v20 - 6);
          if (v24)
          {
            v25 = (char *)*(v20 - 5);
            v21 = *(v20 - 6);
            if (v25 != v24)
            {
              do
              {
                v27 = (void *)*((_QWORD *)v25 - 3);
                if (v27)
                {
                  *((_QWORD *)v25 - 2) = v27;
                  operator delete(v27);
                }
                v28 = (void *)*((_QWORD *)v25 - 6);
                if (v28)
                {
                  *((_QWORD *)v25 - 5) = v28;
                  operator delete(v28);
                }
                v29 = (void *)*((_QWORD *)v25 - 9);
                if (v29)
                {
                  *((_QWORD *)v25 - 8) = v29;
                  operator delete(v29);
                }
                v30 = *((_QWORD *)v25 - 12);
                if (v30)
                {
                  v31 = *((_QWORD *)v25 - 11);
                  v26 = (void *)*((_QWORD *)v25 - 12);
                  if (v31 != v30)
                  {
                    v32 = v31 - 208;
                    do
                    {
                      v34 = *(void **)(v32 + 184);
                      if (v34)
                      {
                        *(_QWORD *)(v32 + 192) = v34;
                        operator delete(v34);
                      }
                      v35 = *(void **)(v32 + 160);
                      if (v35)
                      {
                        *(_QWORD *)(v32 + 168) = v35;
                        operator delete(v35);
                      }
                      if (*(_BYTE *)(v32 + 152))
                      {
                        v36 = *(void **)(v32 + 128);
                        if (v36)
                        {
                          *(_QWORD *)(v32 + 136) = v36;
                          operator delete(v36);
                        }
                      }
                      v37 = *(void **)(v32 + 104);
                      if (v37)
                      {
                        *(_QWORD *)(v32 + 112) = v37;
                        operator delete(v37);
                      }
                      if (*(_BYTE *)(v32 + 96))
                      {
                        v38 = *(void **)(v32 + 72);
                        if (v38)
                        {
                          *(_QWORD *)(v32 + 80) = v38;
                          operator delete(v38);
                        }
                      }
                      v39 = *(void **)(v32 + 48);
                      if (v39)
                      {
                        *(_QWORD *)(v32 + 56) = v39;
                        operator delete(v39);
                      }
                      v40 = *(void **)(v32 + 24);
                      if (v40)
                      {
                        *(_QWORD *)(v32 + 32) = v40;
                        operator delete(v40);
                      }
                      v41 = *(void **)v32;
                      if (*(_QWORD *)v32)
                      {
                        *(_QWORD *)(v32 + 8) = v41;
                        operator delete(v41);
                      }
                      v42 = *(void **)(v32 - 24);
                      if (v42)
                      {
                        *(_QWORD *)(v32 - 16) = v42;
                        operator delete(v42);
                      }
                      v43 = *(void **)(v32 - 48);
                      if (v43)
                      {
                        *(_QWORD *)(v32 - 40) = v43;
                        operator delete(v43);
                      }
                      if (*(_BYTE *)(v32 - 56))
                      {
                        v44 = *(void **)(v32 - 80);
                        if (v44)
                        {
                          *(_QWORD *)(v32 - 72) = v44;
                          operator delete(v44);
                        }
                      }
                      v45 = *(void **)(v32 - 104);
                      if (v45)
                      {
                        *(_QWORD *)(v32 - 96) = v45;
                        operator delete(v45);
                      }
                      if (*(_BYTE *)(v32 - 112))
                      {
                        v46 = *(void **)(v32 - 136);
                        if (v46)
                        {
                          *(_QWORD *)(v32 - 128) = v46;
                          operator delete(v46);
                        }
                      }
                      v47 = *(void **)(v32 - 160);
                      if (v47)
                      {
                        *(_QWORD *)(v32 - 152) = v47;
                        operator delete(v47);
                      }
                      v48 = *(void **)(v32 - 184);
                      if (v48)
                      {
                        *(_QWORD *)(v32 - 176) = v48;
                        operator delete(v48);
                      }
                      v49 = *(void **)(v32 - 208);
                      if (v49)
                      {
                        *(_QWORD *)(v32 - 200) = v49;
                        operator delete(v49);
                      }
                      v33 = v32 - 232;
                      v32 -= 440;
                    }
                    while (v33 != v30);
                    v26 = (void *)*((_QWORD *)v25 - 12);
                  }
                  *((_QWORD *)v25 - 11) = v30;
                  operator delete(v26);
                }
                v25 -= 104;
              }
              while (v25 != v24);
              v21 = *v23;
            }
            *(v20 - 5) = v24;
            operator delete(v21);
          }
          v20 -= 6;
        }
        while (v23 != v5);
      }
      if (v5)
        goto LABEL_20;
    }
  }
}

void sub_20F0AEC94(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  void **v19;
  void **v20;
  void *v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v5 = *(void ***)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (void **)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(void ***)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(void ***)a1;
      v19 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v23 = (char *)*(v20 - 3);
          v20 -= 3;
          v22 = v23;
          if (v23)
          {
            v24 = (char *)*(v19 - 2);
            v21 = v22;
            if (v24 != v22)
            {
              do
              {
                v25 = (void *)*((_QWORD *)v24 - 3);
                if (v25)
                {
                  *((_QWORD *)v24 - 2) = v25;
                  operator delete(v25);
                }
                v26 = (void *)*((_QWORD *)v24 - 6);
                if (v26)
                {
                  *((_QWORD *)v24 - 5) = v26;
                  operator delete(v26);
                }
                v27 = (void *)*((_QWORD *)v24 - 9);
                if (v27)
                {
                  *((_QWORD *)v24 - 8) = v27;
                  operator delete(v27);
                }
                v28 = (void *)*((_QWORD *)v24 - 12);
                if (v28)
                {
                  *((_QWORD *)v24 - 11) = v28;
                  operator delete(v28);
                }
                v29 = (void *)*((_QWORD *)v24 - 15);
                if (v29)
                {
                  *((_QWORD *)v24 - 14) = v29;
                  operator delete(v29);
                }
                sub_20E990FD8((void **)v24 - 27);
                v24 -= 240;
              }
              while (v24 != v22);
              v21 = *v20;
            }
            *(v19 - 2) = v22;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20F0AEEE8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *__p[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = a1[4];
  v4 = *a1;
  v5 = (_QWORD *)(*a1 + 48 * v3);
  sub_20F0AF078(__p, a2);
  v6 = (_QWORD *)*v5;
  if (*v5)
  {
    v7 = (_QWORD *)v5[1];
    v8 = (_QWORD *)*v5;
    if (v7 != v6)
    {
      do
      {
        v7 -= 13;
        sub_20E9905B4(v7);
      }
      while (v7 != v6);
      v8 = (_QWORD *)*v5;
    }
    v5[1] = v6;
    operator delete(v8);
  }
  *(_OWORD *)v5 = *(_OWORD *)__p;
  v5[2] = v22;
  __p[0] = 0;
  __p[1] = 0;
  v22 = 0;
  v9 = v4 + 48 * v3;
  v12 = *(void **)(v9 + 24);
  v11 = v9 + 24;
  v10 = v12;
  if (v12)
  {
    *(_QWORD *)(v4 + 48 * v3 + 32) = v10;
    operator delete(v10);
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    v13 = __p[0];
  }
  else
  {
    v13 = 0;
  }
  *(_OWORD *)v11 = v23;
  *(_QWORD *)(v4 + 48 * v3 + 40) = v24;
  v23 = 0uLL;
  v24 = 0;
  if (v13)
  {
    v14 = __p[1];
    v15 = v13;
    if (__p[1] != v13)
    {
      do
      {
        v14 -= 13;
        sub_20E9905B4(v14);
      }
      while (v14 != v13);
      v15 = __p[0];
    }
    __p[1] = v13;
    operator delete(v15);
  }
  v16 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v17 = a1[5];
  v18 = a1[4] + 1;
  if (v18 >= v16)
    v19 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  else
    v19 = 0;
  a1[4] = v18 - v19;
  if (v17 == v16)
  {
    v20 = a1[3] + 1;
    if (v20 < v16)
      v16 = 0;
    a1[3] = v20 - v16;
  }
  else
  {
    a1[5] = v17 + 1;
  }
}

_QWORD *sub_20F0AF078(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_20EE65E28((uint64_t)a1, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v5 = a2[3];
  v4 = a2[4];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 3);
    if (v7 >= 0x492492492492493)
      sub_20EABADD4();
    v8 = (char *)operator new(v6);
    v9 = 0;
    a1[3] = v8;
    a1[4] = v8;
    a1[5] = &v8[56 * v7];
    do
    {
      v10 = v5 + v9;
      v11 = &v8[v9];
      *(_QWORD *)v11 = *(_QWORD *)(v5 + v9);
      v12 = *(_OWORD *)(v5 + v9 + 8);
      *((_QWORD *)v11 + 3) = *(_QWORD *)(v5 + v9 + 24);
      *(_OWORD *)(v11 + 8) = v12;
      v13 = *(_OWORD *)(v5 + v9 + 32);
      *((_QWORD *)v11 + 6) = *(_QWORD *)(v5 + v9 + 48);
      *((_OWORD *)v11 + 2) = v13;
      v9 += 56;
    }
    while (v10 + 56 != v4);
    a1[4] = &v8[v9];
  }
  return a1;
}

void sub_20F0AF190(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v2;
  void **v3;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    v1[4] = v5;
    operator delete(v5);
    v6 = *v1;
    if (!*v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = *v1;
    if (!*v1)
      goto LABEL_3;
  }
  v7 = v1[1];
  v8 = v6;
  if (v7 != v6)
  {
    do
    {
      v7 -= 13;
      sub_20E9905B4(v7);
    }
    while (v7 != v6);
    v8 = *v1;
  }
  v1[1] = v6;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

void sub_20F0AF1F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;

  v4 = a1[4];
  v5 = *a1;
  v6 = (void **)(*a1 + 24 * v4);
  v18 = 0uLL;
  v19 = 0;
  sub_20F04F36C((uint64_t)&v18, a2, a3, 0xEEEEEEEEEEEEEEEFLL * ((a3 - a2) >> 4));
  v7 = *v6;
  if (*v6)
  {
    v8 = v5 + 24 * v4;
    v11 = *(_QWORD *)(v8 + 8);
    v10 = (_QWORD *)(v8 + 8);
    v9 = v11;
    v12 = *v6;
    if ((void *)v11 != v7)
    {
      do
      {
        v9 -= 240;
        sub_20E990F68(v9);
      }
      while ((void *)v9 != v7);
      v12 = *v6;
    }
    *v10 = v7;
    operator delete(v12);
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)v6 = v18;
  *(_QWORD *)(v5 + 24 * v4 + 16) = v19;
  v13 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v14 = a1[5];
  v15 = a1[4] + 1;
  if (v15 >= v13)
    v16 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  else
    v16 = 0;
  a1[4] = v15 - v16;
  if (v14 == v13)
  {
    v17 = a1[3] + 1;
    if (v17 < v13)
      v13 = 0;
    a1[3] = v17 - v13;
  }
  else
  {
    a1[5] = v14 + 1;
  }
}

void sub_20F0AF320(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, float64x2_t a8, double a9, float64x2_t a10)
{
  _BOOL4 v15;
  float64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v35;
  double v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  float64x2_t v42;
  double v43;
  float64x2_t v44;
  unsigned int i;
  unint64_t v46;
  uint64_t v47;
  double v48;
  double v51;
  double v56;
  double v57;
  double v58;
  __double2 v59;
  unsigned int v60;
  float64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  float64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  float64x2_t v81;
  float64x2_t v82;
  double v83;
  float64x2_t v84;
  double v85;
  float64x2_t v86;
  double v87;
  float64x2_t v88;
  unint64_t v89;
  unint64_t v90;
  double v91;
  __double2 v92;
  double v94;
  double v95;
  float64_t v96;
  float64_t v97;
  double v98;
  double v99;
  double v100;
  float64_t v101;
  double v102;
  double v103;
  float64_t v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  float64x2_t v112;
  int8x16_t v113;
  double v114;
  double v115;
  double v116;
  float64x2_t v117;
  double v118;
  int8x16_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float64x2_t v125;
  float64x2_t v126;
  double v127;
  unint64_t v128;
  unint64_t v129;
  float64_t v130;
  double v131;
  float64x2_t v132;
  float64_t v133;
  float64_t v134;
  double v135;
  float64_t v136;

  if (a5)
    v15 = a4 != 0;
  else
    v15 = 0;
  if ((a4 != 0) != (a5 != 0)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 1495, (uint64_t)"compute_alpha_and_beta_terms || (!alpha_Icurr_in_Iprev && !beta_Icurr_in_Iprev)", 79, (uint64_t)"The IMU preintegration terms alpha and beta are used together.", 62, (void (*)(void **))sub_21023DDB0)|| !a2&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 1498, (uint64_t)"curr_pose_idx >= 1 && \"The latter pose index in a pair of consecutive poses cannot be less than 1.\"", 99, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_44;
  }
  v16.f64[1] = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 32) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0x3FF0000000000000;
  if (v15)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  v17 = a1[50];
  v18 = a1[47];
  v19 = 0xAAAAAAAAAAAAAAABLL * ((a1[48] - v18) >> 4);
  v20 = (_QWORD *)(v18 + 48 * ((v17 + (unint64_t)(a2 - 1)) % v19));
  v21 = v20[4];
  v22 = *(_QWORD *)(v21 - 56);
  v23 = (_QWORD *)(v18 + 48 * ((v17 + (unint64_t)a2) % v19));
  v24 = *(_QWORD *)(*v20 + 8);
  a8.f64[0] = *(float64_t *)(v24 + 16);
  v25 = *(double *)(v24 + 8) + a8.f64[0];
  v26 = *(_QWORD *)(*v23 + 8);
  v27 = *(double *)(v26 + 8);
  v28 = *(double *)(v26 + 16);
  v29 = (double *)v23[3];
  v30 = *(_QWORD *)(v23[4] - 56);
  if (v22 < 0)
    v31 = -v22;
  else
    v31 = v22 | 0x8000000000000000;
  if (v25 < 0.0)
    v32 = -*(_QWORD *)&v25;
  else
    v32 = *(_QWORD *)&v25 | 0x8000000000000000;
  v33 = v32 - v31;
  _CF = v31 >= v32;
  v35 = v31 - v32;
  if (!_CF)
    v35 = v33;
  if (v35 >= 5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 1531, (uint64_t)"esn::math::FloatEqual(t_imu_begin, t_prev_pose) && \"The first IMU measurement timestamp must coincide with the previous pose timestamp.\"", 136, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_44;
  }
  v36 = v27 + v28;
  if (v30 < 0)
    v37 = -v30;
  else
    v37 = v30 | 0x8000000000000000;
  if (v36 < 0.0)
    v38 = -*(_QWORD *)&v36;
  else
    v38 = *(_QWORD *)&v36 | 0x8000000000000000;
  v39 = v38 - v37;
  _CF = v37 >= v38;
  v40 = v37 - v38;
  if (!_CF)
    v40 = v39;
  if (v40 >= 5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 1534, (uint64_t)"esn::math::FloatEqual(t_imu_final, t_curr_pose) && \"The last IMU measurement timestamp must coincide with the current pose timestamp.\"", 134, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_44:
    abort();
  }
  if (v15)
  {
    sub_20F0AFA64(v21 - 56, a3, (float64x2_t *)a4, (float64x2_t *)a5, *v29, v25, a8, a9, a10);
    for (i = 0; ; i = v46)
    {
      v46 = i + 1;
      v47 = *(_QWORD *)(a1[47]
                      + 48
                      * ((a1[50] + (unint64_t)a2) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[48] - a1[47]) >> 4)))
                      + 24);
      if (0x6DB6DB6DB6DB6DB7
         * ((*(_QWORD *)(a1[47]
                       + 48
                       * ((a1[50] + (unint64_t)a2) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[48] - a1[47]) >> 4)))
                       + 32)
           - v47) >> 3) <= v46)
        break;
      sub_20F0AFA64(v47 + 56 * i, a3, (float64x2_t *)a4, (float64x2_t *)a5, *(double *)(v47 + 56 * v46), v41, v42, v43, v44);
    }
  }
  else
  {
    v16.f64[0] = *(float64_t *)(v21 - 32);
    _Q1 = *(float64x2_t *)(v21 - 48);
    a8.f64[0] = *v29 - *(double *)(v21 - 56);
    *(_QWORD *)&v48 = *(_OWORD *)&vmulq_f64(v16, a8);
    _Q7 = vmulq_n_f64(_Q1, a8.f64[0]);
    _Q1.f64[0] = vmuld_lane_f64(a8.f64[0], _Q1, 1);
    v51 = _Q7.f64[1];
    __asm { FMLA            D3, D1, V7.D[1] }
    v56 = vmlad_n_f64(_D3, v16.f64[0] * a8.f64[0], v48);
    if (v56 >= 0.0000002635)
    {
      v58 = sqrt(v56);
      v133 = _Q7.f64[0];
      v135 = v48;
      v131 = v56;
      v59 = __sincos_stret(v58);
      _Q1.f64[0] = v59.__cosval;
      _Q7.f64[0] = v133;
      v48 = v135;
      v57 = v59.__sinval / v58;
      a8.f64[0] = 1.0 / v131 * (1.0 - v59.__cosval);
    }
    else
    {
      a8.f64[0] = 0.5 - v56 * (v56 / -720.0 + 0.0416666667);
      v57 = 1.0 - v56 * (0.166666667 - v56 * (v56 / -5040.0 + 0.00833333333));
      _Q1.f64[0] = 1.0 - v56 * a8.f64[0];
    }
    v60 = 0;
    v61 = _Q7.f64[0] * a8.f64[0];
    v62 = v51 * a8.f64[0];
    v63 = _Q1.f64[0] + _Q7.f64[0] * (_Q7.f64[0] * a8.f64[0]);
    v64 = _Q1.f64[0] + v51 * (v51 * a8.f64[0]);
    v65 = _Q1.f64[0] + v48 * (v48 * a8.f64[0]);
    v66 = v51 * (_Q7.f64[0] * a8.f64[0]);
    v67 = v48 * v61;
    v68 = v48 * v62;
    v69 = _Q7.f64[0] * v57;
    v70 = v51 * v57;
    v71 = v48 * v57;
    v72 = v66 - v71;
    v73 = v70 + v67;
    v74 = v66 + v71;
    v75 = v68 - v69;
    v76 = v67 - v70;
    v77 = v69 + v68;
    v78 = *(double *)(a3 + 16);
    v79 = *(double *)(a3 + 40);
    v88 = *(float64x2_t *)(a3 + 24);
    v80 = *(double *)(a3 + 64);
    v81 = *(float64x2_t *)(a3 + 48);
    v82 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a3, v63), v88, v74), v81, v76);
    v83 = v78 * v63 + v79 * v74 + v80 * v76;
    v84 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a3, v72), v88, v64), v81, v77);
    v85 = v78 * v72 + v79 * v64 + v80 * v77;
    v86 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a3, v73), v88, v75), v81, v65);
    v87 = v78 * v73 + v79 * v75 + v80 * v65;
    v88.f64[0] = v84.f64[1];
    v89 = vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u64[0];
    v90 = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u64[0];
    *(double *)(a3 + 16) = v83;
    *(float64x2_t *)a3 = v82;
    *(double *)(a3 + 40) = v85;
    *(float64x2_t *)(a3 + 24) = v84;
    *(double *)(a3 + 64) = v87;
    *(float64x2_t *)(a3 + 48) = v86;
    while (1)
    {
      v120 = v60 + 1;
      v121 = *(_QWORD *)(a1[47]
                       + 48
                       * ((a1[50] + (unint64_t)a2) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[48] - a1[47]) >> 4)))
                       + 24);
      if (0x6DB6DB6DB6DB6DB7
         * ((*(_QWORD *)(a1[47]
                       + 48
                       * ((a1[50] + (unint64_t)a2) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[48] - a1[47]) >> 4)))
                       + 32)
           - v121) >> 3) <= v120)
        break;
      v122 = v121 + 56 * v60;
      _Q0 = *(float64x2_t *)(v122 + 8);
      _Q1.f64[0] = *(float64_t *)(v122 + 24);
      a8.f64[0] = *(double *)(v121 + 56 * v120) - *(double *)v122;
      *(_QWORD *)&v94 = *(_OWORD *)&vmulq_f64(_Q1, a8);
      _Q16 = vmulq_n_f64(_Q0, a8.f64[0]);
      _Q0.f64[0] = vmuld_lane_f64(a8.f64[0], _Q0, 1);
      _Q3 = vmulq_f64(_Q16, _Q16);
      __asm { FMLA            D3, D0, V16.D[1] }
      _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], _Q1.f64[0] * a8.f64[0], v94);
      if (_Q3.f64[0] >= 0.0000002635)
      {
        v91 = sqrt(_Q3.f64[0]);
        v134 = v84.f64[0];
        v136 = v82.f64[0];
        v130 = v86.f64[0];
        v132 = v88;
        v128 = v89;
        v129 = v90;
        v126 = _Q16;
        v127 = v94;
        v125 = _Q3;
        v92 = __sincos_stret(v91);
        _Q1.f64[0] = v92.__cosval;
        _Q16 = v126;
        v94 = v127;
        v89 = v128;
        v90 = v129;
        v86.f64[0] = v130;
        v88 = v132;
        v84.f64[0] = v134;
        v82.f64[0] = v136;
        a8.f64[1] = v125.f64[1];
        v95 = v92.__sinval / v91;
        a8.f64[0] = 1.0 / v125.f64[0] * (1.0 - v92.__cosval);
      }
      else
      {
        a8.f64[0] = 0.5 - _Q3.f64[0] * (_Q3.f64[0] / -720.0 + 0.0416666667);
        v95 = 1.0 - _Q3.f64[0] * (0.166666667 - _Q3.f64[0] * (_Q3.f64[0] / -5040.0 + 0.00833333333));
        _Q1.f64[0] = 1.0 - _Q3.f64[0] * a8.f64[0];
      }
      v96 = _Q16.f64[0] * a8.f64[0];
      v97 = _Q16.f64[1] * a8.f64[0];
      v98 = _Q1.f64[0] + _Q16.f64[0] * (_Q16.f64[0] * a8.f64[0]);
      v99 = _Q1.f64[0] + _Q16.f64[1] * (_Q16.f64[1] * a8.f64[0]);
      v100 = _Q1.f64[0] + v94 * (v94 * a8.f64[0]);
      v101 = _Q16.f64[1] * (_Q16.f64[0] * a8.f64[0]);
      v102 = v94 * v96;
      v103 = v94 * v97;
      _Q16.f64[0] = _Q16.f64[0] * v95;
      v104 = _Q16.f64[1] * v95;
      v105 = v94 * v95;
      v106 = v101 - v105;
      v107 = v104 + v102;
      v108 = v101 + v105;
      v109 = v103 - _Q16.f64[0];
      v110 = v102 - v104;
      *(_QWORD *)&v86.f64[1] = v89;
      *(_QWORD *)&v82.f64[1] = v90;
      v111 = _Q16.f64[0] + v103;
      v112 = vmulq_n_f64(v82, v106);
      v84.f64[1] = v88.f64[0];
      v113 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v82, v98), v84, v108), v86, v110);
      v114 = v83 * v98 + v85 * v108;
      v115 = v83 * v106;
      v116 = v83 * v107;
      v83 = v114 + v87 * v110;
      v117 = vmlaq_n_f64(vmlaq_n_f64(v112, v84, v99), v86, v111);
      v118 = v116 + v85 * v109;
      v85 = v115 + v85 * v99 + v87 * v111;
      v119 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v82, v107), v84, v109), v86, v100);
      v87 = v118 + v87 * v100;
      v88.f64[0] = v117.f64[1];
      *(double *)(a3 + 16) = v83;
      *(int8x16_t *)a3 = v113;
      v90 = vextq_s8(v113, v113, 8uLL).u64[0];
      v89 = vextq_s8(v119, v119, 8uLL).u64[0];
      *(double *)(a3 + 40) = v85;
      *(float64x2_t *)(a3 + 24) = v117;
      ++v60;
      *(_QWORD *)&v82.f64[0] = v113.i64[0];
      *(double *)(a3 + 64) = v87;
      *(int8x16_t *)(a3 + 48) = v119;
      v84.f64[0] = v117.f64[0];
      *(_QWORD *)&v86.f64[0] = v119.i64[0];
    }
  }
}

double sub_20F0AFA64(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, double a5, double a6, float64x2_t a7, double a8, float64x2_t a9)
{
  double v17;
  double v20;
  double v21;
  double v22;
  float64_t v23;
  __double2 v24;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  double v45;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v52;
  float64x2_t v54;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v74;
  float64x2_t v75;
  double v77;
  double v79;
  double v80;
  double v81;
  double v82;
  double cosval;
  double v84;
  __double2 v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  float64x2_t v105;
  double v106;
  float64x2_t v107;
  float64x2_t v108;
  double v109;
  float64x2_t v110;
  float64x2_t v111;
  double result;
  float64x2_t v113;
  float64x2_t v114;
  double v115;
  float64x2_t v116;
  double v117;
  float64x2_t v118;
  uint64_t v119;
  double v120;
  double v121;

  a9.f64[0] = *(float64_t *)(a1 + 24);
  v113 = a9;
  v114 = *(float64x2_t *)(a1 + 8);
  v120 = *(double *)(a1 + 48);
  a7.f64[0] = a5 - *(double *)a1;
  v116 = a7;
  v118 = *(float64x2_t *)(a1 + 32);
  _D1 = *(_QWORD *)(a1 + 16);
  __asm { FMLA            D0, D1, V3.D[1] }
  v17 = sqrt(_D0 + a9.f64[0] * a9.f64[0]);
  _NF = v17 < 1.72723371e-77;
  _D10 = 0;
  if (v17 >= 1.72723371e-77)
    v20 = v17;
  else
    v20 = 0.0;
  v21 = 1.0 / v17;
  if (_NF)
    v22 = 0.0;
  else
    v22 = v21;
  v23 = a7.f64[0] * v20;
  v24 = __sincos_stret(a7.f64[0] * v20);
  _Q15 = v114;
  v26 = vnegq_f64((float64x2_t)*(unint64_t *)&v113.f64[0]);
  v27 = vnegq_f64(v114);
  _Q5 = (float64x2_t)vextq_s8((int8x16_t)v114, (int8x16_t)v27, 8uLL);
  v29 = (float64x2_t)vextq_s8((int8x16_t)*(unint64_t *)&v113.f64[0], (int8x16_t)*(unint64_t *)&v113.f64[0], 8uLL);
  v30 = (float64x2_t)vextq_s8((int8x16_t)*(unint64_t *)&v113.f64[0], (int8x16_t)v114, 8uLL);
  v31 = (float64x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v26, 8uLL);
  v32 = (float64x2_t)vextq_s8((int8x16_t)v31, (int8x16_t)v30, 8uLL);
  _Q4 = vmlsq_laneq_f64(vmlaq_n_f64(vmulq_f64(v29, (float64x2_t)0), v32, v113.f64[0]), _Q5, v114, 1);
  __asm { FMLS            D6, D10, V15.D[1] }
  _Q16 = vmlaq_n_f64(vmlaq_f64(vmulq_n_f64(v29, v26.f64[0]), (float64x2_t)0, v32), _Q5, v114.f64[0]);
  v26.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v26.f64[0], v27, 1), 0.0, v114.f64[0]), 0.0, v114.f64[0]);
  _Q21 = vmlaq_f64(vmlsq_lane_f64(vmulq_laneq_f64(v29, v114, 1), v32, v114.f64[0], 0), (float64x2_t)0, _Q5);
  __asm { FMLS            D2, D15, V15.D[0] }
  v38.f64[0] = _D2 + 0.0;
  v39.f64[0] = v116.f64[0] * (v116.f64[0] * 0.5);
  _Q0.f64[0] = v22 * (v22 * v22) * (v23 - v24.__sinval);
  v41.f64[0] = 0.0;
  v41.f64[1] = v39.f64[0];
  v42.f64[0] = v22 * v22 * (v22 * v22) * (v24.__cosval + v23 * v23 * 0.5 + -1.0);
  *(_QWORD *)&v43 = *(_OWORD *)&vmlaq_f64(vmlaq_f64((float64x2_t)0, v31, _Q0), _Q6, v42);
  _Q27 = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)*(unint64_t *)&v39.f64[0], v29, _Q0.f64[0]), _Q4, v42.f64[0]);
  *(_QWORD *)&v45 = *(_OWORD *)&vmlaq_f64(vmlaq_laneq_f64((float64x2_t)0, _Q0, v30, 1), v26, v42);
  _Q29 = vmlaq_n_f64(vmlaq_n_f64(v41, v32, _Q0.f64[0]), _Q16, v42.f64[0]);
  *(_QWORD *)&v39.f64[0] = *(_OWORD *)&vmlaq_f64(vmlaq_f64(v39, (float64x2_t)0, _Q0), v38, v42);
  _Q8 = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, _Q5, _Q0.f64[0]), _Q21, v42.f64[0]);
  _D12 = *(_QWORD *)(a2 + 40);
  v49 = *(float64x2_t *)(a2 + 24);
  v50 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a2, _Q27.f64[0]), v49, _Q27, 1);
  __asm { FMLA            D26, D12, V27.D[1] }
  v52 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a2, _Q29.f64[0]), v49, _Q29, 1);
  __asm { FMLA            D28, D12, V29.D[1] }
  v54 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a2, _Q8.f64[0]), v49, _Q8, 1);
  __asm { FMLA            D10, D12, V8.D[1] }
  _Q8.f64[0] = *(float64_t *)(a2 + 64);
  _D28 = vmlad_n_f64(_D28, _Q8.f64[0], v45);
  v57.f64[0] = v22 * v22 * (1.0 - v24.__cosval);
  v58 = vmlaq_n_f64((float64x2_t)*(unint64_t *)&v116.f64[0], v29, v57.f64[0]);
  v59 = vmlaq_f64((float64x2_t)0, v31, v57);
  v31.f64[0] = 0.0;
  v31.f64[1] = v116.f64[0];
  v60 = vmlaq_n_f64(v31, v32, v57.f64[0]);
  v61 = vmlaq_laneq_f64((float64x2_t)0, v57, v30, 1);
  v62 = vmlaq_f64(v116, (float64x2_t)0, v57);
  v63 = vmlaq_n_f64((float64x2_t)0, _Q5, v57.f64[0]);
  _V31.D[1] = v118.f64[1];
  v65 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vmlaq_n_f64(v50, *(float64x2_t *)(a2 + 48), v43), v118.f64[0]), vmlaq_n_f64(v52, *(float64x2_t *)(a2 + 48), v45), v118, 1), vmlaq_n_f64(v54, *(float64x2_t *)(a2 + 48), v39.f64[0]), v120);
  __asm { FMLA            D5, D28, V31.D[1] }
  _Q5.f64[0] = _Q5.f64[0] + vmlad_n_f64(_D10, _Q8.f64[0], v39.f64[0]) * v120;
  v66 = *a4;
  v66.f64[0] = a4[1].f64[0];
  v67 = vmlaq_f64(_Q5, v66, v116);
  v66.f64[0] = a3[1].f64[0];
  *a3 = vaddq_f64(*a3, vmlaq_n_f64(v65, *a4, v116.f64[0]));
  *(_QWORD *)&a3[1].f64[0] = *(_OWORD *)&vaddq_f64(v66, v67);
  *(_QWORD *)&v59.f64[0] = *(_OWORD *)&vmlaq_f64(v59, _Q6, _Q0);
  _Q23 = vmlaq_n_f64(v58, _Q4, _Q0.f64[0]);
  *(_QWORD *)&v61.f64[0] = *(_OWORD *)&vmlaq_f64(v61, v26, _Q0);
  _Q18 = vmlaq_n_f64(v60, _Q16, _Q0.f64[0]);
  *(_QWORD *)&v62.f64[0] = *(_OWORD *)&vmlaq_f64(v62, v38, _Q0);
  _Q3 = vmlaq_n_f64(v63, _Q21, _Q0.f64[0]);
  _Q4.f64[0] = *(float64_t *)(a2 + 40);
  v71 = *(float64x2_t *)(a2 + 24);
  __asm
  {
    FMLA            D16, D4, V23.D[1]
    FMLA            D21, D4, V18.D[1]
  }
  v72 = vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a2, _Q3.f64[0]), v71, _Q3, 1);
  __asm { FMLA            D0, D4, V3.D[1] }
  _Q3.f64[0] = *(float64_t *)(a2 + 64);
  _Q4 = *(float64x2_t *)(a2 + 48);
  _Q21.f64[0] = vmlad_n_f64(_Q21.f64[0], _Q3.f64[0], v61.f64[0]);
  v74 = vmlaq_n_f64(v72, _Q4, v62.f64[0]);
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], _Q3.f64[0], v62.f64[0]);
  v75 = vmlaq_laneq_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a2, _Q23.f64[0]), v71, _Q23, 1), _Q4, v59.f64[0]), v118.f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a2, _Q18.f64[0]), v71, _Q18, 1), _Q4, v61.f64[0]), v118, 1);
  __asm { FMLA            D4, D21, V31.D[1] }
  _Q3 = vmlaq_n_f64(v75, v74, v120);
  _Q0.f64[0] = _Q4.f64[0] + _Q0.f64[0] * v120;
  v74.f64[0] = a4[1].f64[0];
  *a4 = vaddq_f64(*a4, _Q3);
  *(_QWORD *)&a4[1].f64[0] = *(_OWORD *)&vaddq_f64(v74, _Q0);
  *(_QWORD *)&v77 = *(_OWORD *)&vmulq_f64(v113, v116);
  _Q7 = (int8x16_t)vmulq_n_f64(v114, v116.f64[0]);
  _Q0.f64[0] = vmuld_lane_f64(v116.f64[0], v114, 1);
  __asm { FMLA            D3, D0, V7.D[1] }
  v79 = vmlad_n_f64(_Q3.f64[0], v113.f64[0] * v116.f64[0], v77);
  *(_QWORD *)&v80 = vextq_s8(_Q7, _Q7, 8uLL).u64[0];
  if (v79 >= 0.0000002635)
  {
    v84 = sqrt(v79);
    v119 = _Q7.i64[0];
    v121 = v77;
    v115 = v79;
    v117 = v80;
    v85 = __sincos_stret(v84);
    cosval = v85.__cosval;
    v80 = v117;
    _Q7.i64[0] = v119;
    v77 = v121;
    v82 = v85.__sinval / v84;
    v81 = 1.0 / v115 * (1.0 - v85.__cosval);
  }
  else
  {
    v81 = 0.5 - v79 * (v79 / -720.0 + 0.0416666667);
    v82 = 1.0 - v79 * (0.166666667 - v79 * (v79 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v79 * v81;
  }
  v86 = *(double *)_Q7.i64 * v81;
  v87 = v80 * v81;
  v88 = cosval + *(double *)_Q7.i64 * (*(double *)_Q7.i64 * v81);
  v89 = cosval + v80 * (v80 * v81);
  v90 = cosval + v77 * (v77 * v81);
  v91 = v80 * (*(double *)_Q7.i64 * v81);
  v92 = v77 * v86;
  v93 = v77 * v87;
  v94 = *(double *)_Q7.i64 * v82;
  v95 = v80 * v82;
  v96 = v77 * v82;
  v97 = v91 - v96;
  v98 = v95 + v92;
  v99 = v91 + v96;
  v100 = v93 - v94;
  v101 = v92 - v95;
  v102 = v94 + v93;
  v103 = *(double *)(a2 + 16);
  v104 = *(double *)(a2 + 40);
  v105 = *(float64x2_t *)(a2 + 24);
  v106 = *(double *)(a2 + 64);
  v107 = *(float64x2_t *)(a2 + 48);
  v108 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a2, v88), v105, v99), v107, v101);
  v109 = v103 * v88 + v104 * v99 + v106 * v101;
  v110 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a2, v97), v105, v89), v107, v102);
  v111 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a2, v98), v105, v100), v107, v90);
  *(double *)(a2 + 16) = v109;
  *(float64x2_t *)a2 = v108;
  *(double *)(a2 + 40) = v103 * v97 + v104 * v89 + v106 * v102;
  *(float64x2_t *)(a2 + 24) = v110;
  result = v103 * v98 + v104 * v100 + v106 * v90;
  *(double *)(a2 + 64) = result;
  *(float64x2_t *)(a2 + 48) = v111;
  return result;
}

uint64_t sub_20F0AFF4C(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  int8x16_t *v12;
  int8x16_t *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  void *v28;
  char *v29;
  char *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  unsigned int v34;
  unsigned __int8 v35;
  uint64_t i;
  uint64_t v37;
  unsigned __int8 v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t j;
  unsigned __int8 v48;
  uint64_t v49;
  _DWORD **v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _OWORD *v83;
  _OWORD *v84;
  _OWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  double v94;
  int8x16_t v95;
  double v96;
  __n128 v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  unsigned __int8 v104;
  uint64_t k;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  uint64_t *v109;
  unsigned __int8 v110;
  uint64_t m;
  uint64_t v112;
  unsigned __int8 v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 v117;
  unint64_t v118;
  _QWORD *v119;
  unsigned __int8 v120;
  uint64_t n;
  uint64_t v122;
  unsigned __int8 v123;
  uint64_t v124;
  uint64_t *v125;
  unsigned __int8 v126;
  uint64_t ii;
  uint64_t v128;
  unsigned __int8 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  double v140;
  double v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  double v148;
  __int128 v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  unsigned int *v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  unsigned __int8 v158;
  uint64_t v159;
  uint64_t jj;
  unsigned __int8 v161;
  uint64_t v162;
  unsigned __int8 v163;
  uint64_t v164;
  uint64_t kk;
  unsigned __int8 v166;
  unint64_t v167;
  unint64_t v168;
  unsigned __int8 v169;
  uint64_t v170;
  uint64_t mm;
  unsigned __int8 v172;
  uint64_t v173;
  uint64_t *v174;
  unsigned __int8 v175;
  uint64_t v176;
  uint64_t nn;
  unsigned __int8 v178;
  unint64_t v179;
  unsigned __int8 v180;
  uint64_t v181;
  uint64_t i1;
  unsigned __int8 v183;
  _QWORD *v184;
  unsigned __int8 v185;
  uint64_t v186;
  uint64_t i2;
  unsigned __int8 v188;
  uint64_t *v189;
  uint64_t v190;
  unsigned __int8 v191;
  uint64_t v192;
  uint64_t i3;
  unsigned __int8 v194;
  unint64_t v195;
  unsigned __int8 v196;
  uint64_t v197;
  uint64_t i4;
  unsigned __int8 v199;
  uint64_t v200;
  uint64_t *v201;
  unsigned __int8 v202;
  uint64_t v203;
  uint64_t i5;
  unsigned __int8 v205;
  unint64_t v206;
  uint64_t v207;
  double v208;
  double v211;
  double v213;
  double v215;
  double v217;
  float64x2_t v219;
  double v225;
  float64x2_t v226;
  float64x2_t v229;
  double v232;
  float64x2_t v233;
  _QWORD *v236;
  unint64_t v237;
  char *v238;
  unsigned __int8 v239;
  uint64_t v240;
  uint64_t i6;
  unsigned __int8 v242;
  uint64_t v243;
  char *v244;
  unsigned __int8 v245;
  uint64_t v246;
  uint64_t i7;
  unsigned __int8 v248;
  unsigned int v249;
  _QWORD *v250;
  char **v251;
  char *v252;
  uint64_t v253;
  char *v254;
  int64_t v255;
  char *v256;
  char *v257;
  _QWORD *v258;
  int64_t v259;
  char *v260;
  char *v261;
  _QWORD *v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  char *v266;
  char *v267;
  char *v268;
  int64_t v269;
  void *v270;
  unint64_t v271;
  char *v272;
  __int128 v273;
  _QWORD *v274;
  _QWORD *v275;
  void *v276;
  void *v277;
  _QWORD *v278;
  unint64_t v279;
  uint64_t v280;
  float64x2_t *v281;
  unint64_t v282;
  uint64_t v283;
  char *v284;
  char v285;
  unint64_t v286;
  char *v287;
  uint64_t v288;
  unint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  unint64_t v293;
  char *v294;
  uint64_t v295;
  char *v296;
  int64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  char *v303;
  char *v304;
  int64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  char *v310;
  char *v311;
  uint64_t v312;
  __int128 v313;
  int v314;
  _QWORD *v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  unint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  char *v332;
  char *v333;
  char *v334;
  char *v335;
  __int128 v336;
  double v337;
  double v340;
  double v342;
  double v344;
  double v346;
  float64x2_t v348;
  double v350;
  float64x2_t v351;
  float64x2_t v354;
  double v357;
  double v360;
  int8x16_t v361;
  int8x16_t v362;
  int8x16_t v363;
  char v364;
  char *v365;
  char *v366;
  _OWORD *v367;
  _OWORD *v368;
  unint64_t v371;
  char *v372;
  char *v373;
  _QWORD *v374;
  _QWORD *v375;
  char *v377;
  int8x16_t *v378;
  double *v379;
  double v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  double v386;
  float64x2_t v388;
  unint64_t v391;
  _QWORD *v392;
  unsigned int *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t *v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  _OWORD *v405;
  __int128 v406;
  _QWORD *v407;
  _QWORD *v408;
  char *v409;
  float64x2_t v410;
  double v411;
  double v412;
  double v413;
  float64x2_t v414;
  uint64_t v415;
  _QWORD *v416;
  _OWORD *v417;
  _OWORD *v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  __int128 v422;
  __int128 v423;
  char *v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  char *v428;
  char *v429;
  __int128 v430;
  char *v431;
  __int128 v432;
  __int128 v433;
  uint64_t v434;
  _QWORD *v435;
  unint64_t v436;
  char *v437;
  uint64_t v438;
  char *v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  unint64_t v444;
  _BYTE *v445;
  _DWORD *v446;
  int64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  char *v451;
  float64x2_t *v452;
  float64x2_t *v453;
  uint64_t v454;
  float64x2_t v455;
  int v456;
  _QWORD *v457;
  char *v458;
  char *v459;
  void *v460;
  char *v461;
  void *v462;
  void *v463;
  char *v464;
  _QWORD *v465;
  void *v466;
  char *v467;
  void *v468;
  void *v469;
  uint64_t v471;
  _QWORD *v472;
  uint64_t v473;
  char *v474;
  char *v475;
  unint64_t v476;
  uint64_t v478;
  float64x2_t v481;
  int8x16_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  double v490;
  int64x2_t v491;
  float64x2_t v492;
  int8x16_t v493;
  float64x2_t *v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  unint64_t i8;
  char *v503;
  uint64_t v504;
  _OWORD *v505;
  _QWORD *v506;
  uint64_t v507;
  _QWORD *v508;
  unsigned __int8 v509;
  uint64_t v510;
  uint64_t i9;
  unsigned __int8 v512;
  unsigned __int8 v513;
  uint64_t v514;
  uint64_t i10;
  unsigned __int8 v516;
  unsigned __int8 v517;
  uint64_t v518;
  uint64_t i12;
  unsigned __int8 v520;
  unsigned __int8 v521;
  uint64_t v522;
  uint64_t i11;
  unsigned __int8 v524;
  unint64_t v525;
  char *v526;
  unsigned __int8 v527;
  uint64_t v528;
  uint64_t i13;
  unsigned __int8 v530;
  uint64_t v531;
  char *v532;
  unint64_t v533;
  unsigned __int8 v534;
  uint64_t v535;
  uint64_t i14;
  unsigned __int8 v537;
  unint64_t v538;
  unsigned __int8 v539;
  uint64_t v540;
  uint64_t i15;
  unsigned __int8 v542;
  _QWORD *v543;
  unint64_t v544;
  unsigned __int8 v545;
  uint64_t v546;
  uint64_t i16;
  unsigned __int8 v548;
  uint64_t v549;
  uint64_t *v550;
  unsigned __int8 v551;
  uint64_t v552;
  uint64_t i17;
  unsigned __int8 v554;
  unint64_t v555;
  unsigned __int8 v556;
  uint64_t v557;
  uint64_t i18;
  unsigned __int8 v559;
  _QWORD *v560;
  unint64_t v561;
  unsigned __int8 v562;
  uint64_t v563;
  uint64_t i19;
  unsigned __int8 v565;
  uint64_t v566;
  uint64_t *v567;
  unsigned __int8 v568;
  uint64_t v569;
  uint64_t i20;
  unsigned __int8 v571;
  uint64_t v572;
  _QWORD *v573;
  float64x2_t **v574;
  int64_t v575;
  char *v576;
  char *v577;
  __int128 v578;
  unint64_t v579;
  float64x2_t **v580;
  uint64_t v581;
  _QWORD *v582;
  unsigned int v583;
  char *v584;
  __int128 v585;
  __int128 v586;
  uint64_t v587;
  unint64_t v588;
  float64x2_t v593;
  double v597;
  float64x2_t v607;
  int8x16_t v609;
  int8x16_t v612;
  unint64_t v614;
  unsigned __int8 v615;
  uint64_t v616;
  uint64_t i21;
  unsigned __int8 v618;
  unint64_t v619;
  unint64_t v620;
  float64x2_t **v621;
  float64x2_t *v622;
  float64x2_t *v623;
  float64x2_t **v624;
  double *v625;
  float64x2_t *v626;
  double v629;
  double v631;
  float64_t v634;
  float64_t v635;
  float64_t v636;
  float64x2_t v642;
  float64x2_t v645;
  float64x2_t v648;
  double v651;
  float64x2_t v653;
  double v662;
  float64x2_t v664;
  double v665;
  float64x2_t v666;
  float64x2_t *v672;
  float64x2_t *v673;
  BOOL v674;
  float64x2_t v675;
  float64x2_t v676;
  simd_double2 v677;
  float64x2_t v678;
  int8x16_t v679;
  int v680;
  void *v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  double v692;
  double v693;
  float64x2_t **v694;
  float64x2_t *v695;
  float64x2_t *v696;
  double v699;
  double v701;
  float64x2_t v704;
  double v706;
  float64x2_t v708;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v714;
  float64x2_t v717;
  double v723;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v741;
  float64x2_t *v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  uint64_t v751;
  void *v752;
  char *v753;
  char *v754;
  char *v755;
  uint64_t v756;
  void *v757;
  float64x2_t **v758;
  float64x2_t *v759;
  float64x2_t *v760;
  double v763;
  double v765;
  float64x2_t v768;
  double v770;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v776;
  float64x2_t v779;
  double v785;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v803;
  float64x2_t *v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v809;
  float64x2_t v810;
  uint64_t v817;
  char *v818;
  int64_t v819;
  uint64_t v820;
  unint64_t v821;
  unint64_t v822;
  _BYTE *v823;
  _QWORD *v824;
  int64_t v825;
  unint64_t v826;
  char *v827;
  uint64_t v828;
  char *v829;
  int64_t v830;
  uint64_t v831;
  unint64_t v832;
  unint64_t v833;
  _BYTE *v834;
  _QWORD *v835;
  int64_t v836;
  unint64_t v837;
  char *v838;
  uint64_t v839;
  unint64_t v840;
  uint64_t v841;
  uint64_t v842;
  _OWORD *v843;
  char *v844;
  uint64_t v845;
  __int128 v846;
  unint64_t v847;
  uint64_t v848;
  uint64_t v849;
  _OWORD *v850;
  char *v851;
  uint64_t v852;
  __int128 v853;
  char *v854;
  int8x16_t v856;
  float64x2_t v857;
  float64x2_t v858;
  double v859;
  int8x16_t v860;
  unint64_t v861;
  int8x16_t v862;
  double v863;
  float64x2_t **v864;
  float64x2_t *v865;
  float64x2_t *v866;
  float64x2_t *v867;
  double *v868;
  float64x2_t *v869;
  double v870;
  double v872;
  float64x2_t v876;
  double v878;
  float64x2_t v879;
  double v881;
  float64x2_t v882;
  float64x2_t v885;
  float64x2_t v887;
  float64x2_t v889;
  double v894;
  double v896;
  double v899;
  int v900;
  int v901;
  float64x2_t v902;
  float64x2_t v903;
  float64x2_t v904;
  float64x2_t v905;
  double v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  _BOOL4 v923;
  float64x2_t v924;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  float64x2_t v939;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  double v948;
  float64x2_t v949;
  double v950;
  float64_t v951;
  double v952;
  double v953;
  double v954;
  double v955;
  _BOOL4 v956;
  double v957;
  char *v958;
  void *v959;
  size_t __sz;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  float64x2_t *v964;
  BOOL v965;
  unint64_t v966;
  int64x2_t v967;
  int64x2_t v968;
  double v969;
  uint64_t v970;
  float64_t v971;
  int64x2_t v972;
  int64x2_t v973;
  int64x2_t v974;
  unint64_t v975;
  unint64_t v976;
  double v977;
  double v978;
  char v979;
  uint64_t v980;
  char *v981;
  uint64_t v982;
  unint64_t v983;
  int8x16_t v984;
  float64x2_t v985;
  float64_t v986;
  unint64_t v987;
  char *v988;
  uint64_t v989;
  unint64_t v990;
  unint64_t v991;
  double v992;
  float64x2_t v993;
  float64x2_t v994;
  unint64_t v995;
  char *v996;
  float64x2_t v997;
  int8x16_t v998;
  char *v999;
  float64x2_t v1000;
  float64_t v1001;
  float64x2_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  float64x2_t v1006;
  unint64_t v1007;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  unint64_t v1013;
  float64_t v1014;
  __int128 *v1015;
  float64x2_t v1016;
  float64_t v1017;
  float64x2_t v1018;
  float64_t v1019;
  float64x2_t *v1020;
  double v1021;
  float64_t v1022;
  double v1023;
  float64_t v1024;
  BOOL v1025;
  double v1026;
  float64x2_t v1027;
  float64x2_t v1028;
  double v1029;
  float64x2_t v1030;
  char v1031;
  float64x2_t v1032;
  __int128 v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  double v1036;
  double v1037;
  _QWORD *v1038;
  float64x2_t v1039;
  double v1040;
  double v1041;
  size_t v1042[2];
  size_t __len;
  size_t __lena[2];
  double __lenb;
  uint64_t v1046;
  double v1047;
  float64x2_t v1048;
  _QWORD *v1049;
  float64x2_t v1050;
  float64x2_t v1051;
  void *v1052;
  double v1053;
  float64x2_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  float64x2_t *v1057;
  float64x2_t v1058;
  uint64_t v1059;
  double v1060;
  int8x16_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  unint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  float64x2_t v1069;
  double v1070;
  double v1071;
  float64x2_t v1072;
  double v1073;
  double v1074;
  float64_t v1075;
  int8x16_t *__p;
  uint64_t __pa;
  unint64_t __pb;
  char *__pc;
  void *__pd[2];
  void *__pe[2];
  double __pf;
  void *__pg[2];
  float64x2_t __pi;
  float64x2_t __pj;
  uint64_t __ph;
  void *v1087;
  char *v1088;
  char *v1089;
  _QWORD *v1090;
  _QWORD *v1091;
  char *v1092;
  uint64_t *v1093;
  uint64_t *v1094;
  char *v1095;
  void *v1096;
  _QWORD *v1097;
  uint64_t v1098;
  void *v1099;
  char *v1100;
  char *v1101;
  void *v1102;
  char *v1103;
  char *v1104;
  float64x2_t v1105;
  __int128 v1106;
  float64x2_t v1107;
  __int128 v1108;
  float64x2_t v1109;
  __int128 v1110;
  __int128 v1111;
  __int128 v1112;
  _QWORD *v1113;
  _BYTE *v1114;
  _OWORD *v1115;
  _OWORD *v1116;
  _OWORD *v1117;
  _OWORD *v1118;
  _QWORD *v1119;
  _QWORD *v1120;
  _OWORD *v1121;
  void *v1122[2];
  void *v1123[2];
  __int128 v1124;
  void *v1125[2];
  char *v1126;
  __int128 v1127;
  uint64_t v1128;
  _BYTE v1129[24];
  float64x2_t v1130;
  _QWORD v1131[4];
  uint64_t v1132;
  uint64_t v1133;
  __int128 v1134;
  __int128 v1135;
  uint64_t v1136;
  void *v1137[2];
  double v1138;
  void *v1139;
  _QWORD *v1140;
  char *v1141;
  simd_double2x2 v1142;
  float64x2_t v1143;
  simd_double2x2 *v1144;
  int8x16_t v1145;
  double v1146;
  int v1147;
  simd_double2x2 v1148;
  double v1149;
  void *v1150[2];
  float64x2_t v1151;
  _OWORD v1152[2];
  _OWORD v1153[4];
  uint64_t v1154;
  uint64_t v1155;

  v1155 = *MEMORY[0x24BDAC8D0];
  v1126 = 0;
  *(_OWORD *)v1125 = 0u;
  v1124 = 0u;
  *(_OWORD *)v1123 = 0u;
  *(_OWORD *)v1122 = 0u;
  sub_20F0B7BF8((uint64_t)v1122, 4uLL);
  v2 = 0;
  v3 = 0;
  v989 = a1;
  v1015 = (__int128 *)(a1 + 1488);
  do
  {
    v4 = *(_QWORD *)(v989 + 376);
    v5 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v989 + 384) - v4) >> 4);
    v6 = (char *)v1122[0] + 24 * v2;
    v1055 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48 * ((*(_QWORD *)(v989 + 400) + v2) % v5)) + 8) + 32)
                    - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 48 * ((*(_QWORD *)(v989 + 400) + v2) % v5)) + 8) + 24)) >> 4;
    *(_DWORD *)v1129 = -1;
    v7 = (uint64_t)(v6[1] - *v6) >> 2;
    if (v1055 <= v7)
    {
      if (v1055 < v7)
        v6[1] = *v6 + 4 * v1055;
    }
    else
    {
      sub_20EDB9AB0((uint64_t)v6, v1055 - v7, (const float *)v1129);
    }
    if (v2)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v989 + 376)
                                 + 48
                                 * ((*(_QWORD *)(v989 + 400) + v2)
                                  % (0xAAAAAAAAAAAAAAABLL
                                   * ((uint64_t)(*(_QWORD *)(v989 + 384) - *(_QWORD *)(v989 + 376)) >> 4))))
                     + 8);
      memset(v1129, 0, sizeof(v1129));
      v10 = *(_BYTE **)(v8 + 72);
      v9 = *(_BYTE **)(v8 + 80);
      v11 = v9 - v10;
      if (v9 == v10)
      {
        v13 = 0;
        v12 = 0;
      }
      else
      {
        if (v11 < 0)
          sub_20E867F44();
        v12 = (int8x16_t *)operator new(v9 - v10);
        v13 = (int8x16_t *)((char *)v12 + 8 * (v11 >> 3));
        *(_QWORD *)v1129 = v12;
        *(_QWORD *)&v1129[16] = v13;
        memcpy(v12, v10, v11);
        *(_QWORD *)&v1129[8] = v13;
      }
      v17 = 126 - 2 * __clz(((char *)v13 - (char *)v12) >> 3);
      v18 = (char *)v13 - (char *)v12;
      if (v13 == v12)
        v19 = 0;
      else
        v19 = v17;
      __p = v12;
      sub_20F0B80C4(v12, v13, v19, 1);
      v20 = operator new(0x10uLL);
      v21 = v18 >> 3;
      *(_QWORD *)&v1106 = v20 + 2;
      *v20 = -1;
      v20[1] = -1;
      *(_QWORD *)&v1105.f64[0] = v20;
      *(_QWORD *)&v1105.f64[1] = v20 + 2;
      v22 = v3 + (_DWORD)v1055 - (v18 >> 3);
      v23 = (char *)v1124;
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1124 - (unint64_t)v1123[1]) >> 3);
      if (v22 <= v24)
      {
        if (v22 < v24)
        {
          v25 = (char *)v1123[1] + 24 * v22;
          if ((char *)v1124 != v25)
          {
            v26 = (char *)v1124;
            do
            {
              v28 = (void *)*((_QWORD *)v26 - 3);
              v26 -= 24;
              v27 = v28;
              if (v28)
              {
                *((_QWORD *)v23 - 2) = v27;
                operator delete(v27);
              }
              v23 = v26;
            }
            while (v26 != v25);
          }
          *(_QWORD *)&v1124 = v25;
        }
      }
      else
      {
        sub_20F0B7DD0((char **)&v1123[1], v22 - v24, (uint64_t)&v1105);
      }
      operator delete(v20);
      if ((_DWORD)v1055)
      {
        v33 = 0;
        v34 = 0;
        v1065 = (v2 - 1);
        do
        {
          while (v34 == (_DWORD)v21 || v33 < __p->u32[2 * v34])
          {
            if (v34 < v21 && __p->i32[2 * v34] >= v1055)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 653, (uint64_t)"curr_observ_idx < num_observations && \"The index1 exceeds the number of observations.\"", 86, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v35 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v37 = qword_254A6DE40;
                for (i = qword_254A6DE48; v37 != i; v37 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v37)(*(_QWORD *)(v37 + 8), "curr_observ_idx < num_observations && \"The index1 exceeds the number of observations.\"", 86, "", 0);
              }
              v38 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                abort();
              qword_254A6DE58(unk_254A6DE60, "curr_observ_idx < num_observations && \"The index1 exceeds the number of observations.\"", 86, "", 0);
            }
            *(_DWORD *)(*((_QWORD *)v1123[1] + 3 * v3) + 4 * v2) = v33;
            *(_DWORD *)(*((_QWORD *)v1122[0] + 3 * v2) + 4 * v33) = v3++;
            if (++v33 == v1055)
              goto LABEL_87;
          }
          v39 = __p->u32[2 * v34 + 1];
          v40 = v1122[0];
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v1122[1] - (char *)v1122[0]) >> 3) <= v1065)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 738, (uint64_t)"pose_idx < observation_index_to_temporal_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 109, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_978;
            }
            v40 = v1122[0];
          }
          if (v39 >= ((v40[3 * v1065 + 1] - v40[3 * v1065]) >> 2))
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 671, (uint64_t)"prev_observ_idx < num_prev_observations && \"The index2 exceeds the number of observations.\"", 91, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
LABEL_978:
              abort();
            }
            v40 = v1122[0];
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v1122[1] - (char *)v40) >> 3) <= v1065)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 707, (uint64_t)"pose_idx < observation_index_to_temporal_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 109, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_973;
            }
            v40 = v1122[0];
          }
          v41 = v40[3 * v1065];
          if (v39 >= (v40[3 * v1065 + 1] - v41) >> 2)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 711, (uint64_t)"observ_idx < observation_index_to_temporal_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 121, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_973;
            }
            v40 = v1122[0];
            v41 = *((_QWORD *)v1122[0] + 3 * v1065);
          }
          v42 = *(unsigned int *)(v41 + 4 * v39);
          if (v42 >= v3)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 678, (uint64_t)"track_idx < temporal_track_count && \"All observations must be associated to a valid temporal track.\"", 100, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_973;
            }
            v40 = v1122[0];
          }
          *(_DWORD *)(v40[3 * v2] + 4 * v33) = v42;
          v43 = v1123[1];
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1124 - (unint64_t)v1123[1]) >> 3) <= v42)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 720, (uint64_t)"track_idx < temporal_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 96, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_973;
            }
            v43 = v1123[1];
          }
          v44 = v43[3 * v42];
          if (v2 >= (v43[3 * v42 + 1] - v44) >> 2)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 723, (uint64_t)"pose_idx < temporal_tracks_observation_indices_[track_idx].size() && \"Invalid access: Index out of range.\"", 106, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_973;
            }
            v43 = v1123[1];
            v44 = *((_QWORD *)v1123[1] + 3 * v42);
          }
          if ((*(_DWORD *)(v44 + 4 * v2) & 0x80000000) == 0)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 686, (uint64_t)"ObservationIndex(pose_idx, track_idx) < 0 && \"Observation from this pose already exists, possibly \" \"curr. to prev. matches is not an one-to-one mapping.\"", 154, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v45 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v46 = qword_254A6DE40;
              for (j = qword_254A6DE48; v46 != j; v46 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v46)(*(_QWORD *)(v46 + 8), "ObservationIndex(pose_idx, track_idx) < 0 && \"Observation from this pose already exists, possibly \" \"curr. to prev. matches is not an one-to-one mapping.\"", 154, "", 0);
            }
            v48 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
LABEL_973:
              abort();
            qword_254A6DE58(unk_254A6DE60, "ObservationIndex(pose_idx, track_idx) < 0 && \"Observation from this pose already exists, possibly \" \"curr. to prev. matches is not an one-to-one mapping.\"", 154, "", 0);
            v43 = v1123[1];
          }
          *(_DWORD *)(v43[3 * v42] + 4 * v2) = v33;
          ++v34;
          ++v33;
        }
        while (v33 != v1055);
      }
LABEL_87:
      if (__p)
        operator delete(__p);
    }
    else
    {
      v14 = operator new(0x10uLL);
      *(_QWORD *)&v1129[16] = v14 + 2;
      *v14 = -1;
      v14[1] = -1;
      *(_QWORD *)v1129 = v14;
      *(_QWORD *)&v1129[8] = v14 + 2;
      v15 = (char *)v1124;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1124 - (unint64_t)v1123[1]) >> 3);
      if (v1055 <= v16)
      {
        if (v1055 < v16)
        {
          v29 = (char *)v1123[1] + 24 * v1055;
          if ((char *)v1124 != v29)
          {
            v30 = (char *)v1124;
            do
            {
              v32 = (void *)*((_QWORD *)v30 - 3);
              v30 -= 24;
              v31 = v32;
              if (v32)
              {
                *((_QWORD *)v15 - 2) = v31;
                operator delete(v31);
              }
              v15 = v30;
            }
            while (v30 != v29);
          }
          *(_QWORD *)&v1124 = v29;
        }
      }
      else
      {
        sub_20F0B7DD0((char **)&v1123[1], v1055 - v16, (uint64_t)v1129);
      }
      operator delete(v14);
      if ((_DWORD)v1055)
      {
        v49 = 0;
        v50 = (_DWORD **)v1123[1];
        v51 = *(_QWORD *)v1122[0];
        do
        {
          *(&v50[3 * v3])[3 * v49] = v49;
          *(_DWORD *)(v51 + 4 * v49) = v3 + v49;
          ++v49;
        }
        while (v1055 != v49);
        v3 += v49;
      }
    }
    ++v2;
  }
  while (v2 != 4);
  v52 = v1125[1];
  v53 = v1125[0];
  v54 = (char *)v1125[1] - (char *)v1125[0];
  if ((void *)((char *)v1125[1] - (char *)v1125[0]) > (void *)0x1F)
  {
    v57 = v989;
    if (v54 == 32)
      goto LABEL_116;
    v71 = (char *)v1125[0] + 32;
LABEL_115:
    v1125[1] = v71;
    goto LABEL_116;
  }
  v55 = v54 >> 3;
  v56 = 4 - (v54 >> 3);
  v57 = v989;
  if (v56 <= (v1126 - (char *)v1125[1]) >> 3)
  {
    bzero(v1125[1], ((24 - v54) & 0xFFFFFFFFFFFFFFF8) + 8);
    v71 = &v52[8 * v56];
    goto LABEL_115;
  }
  v58 = (v1126 - (char *)v1125[0]) >> 2;
  if (v58 <= 4)
    v58 = 4;
  if ((unint64_t)(v1126 - (char *)v1125[0]) >= 0x7FFFFFFFFFFFFFF8)
    v59 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v59 = v58;
  if (v59 >> 61)
    sub_20E877A38();
  v60 = (char *)operator new(8 * v59);
  v61 = &v60[8 * v55];
  bzero(v61, ((24 - v54) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v52 != v53)
  {
    v62 = v52 - v53 - 8;
    if (v62 < 0x58)
      goto LABEL_1009;
    if ((unint64_t)(&v52[-v54] - v60) < 0x20)
      goto LABEL_1009;
    v63 = (v62 >> 3) + 1;
    v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
    v65 = &v52[-v64];
    v61 -= v64;
    v66 = &v60[8 * v55 - 16];
    v67 = (__int128 *)(v52 - 16);
    v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v69 = *v67;
      *((_OWORD *)v66 - 1) = *(v67 - 1);
      *(_OWORD *)v66 = v69;
      v66 -= 32;
      v67 -= 2;
      v68 -= 4;
    }
    while (v68);
    v52 = v65;
    if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_1009:
      do
      {
        v70 = *((_QWORD *)v52 - 1);
        v52 -= 8;
        *((_QWORD *)v61 - 1) = v70;
        v61 -= 8;
      }
      while (v52 != v53);
    }
    v52 = v53;
  }
  v1125[0] = v61;
  v1125[1] = v60 + 32;
  v1126 = &v60[8 * v59];
  if (v52)
    operator delete(v52);
LABEL_116:
  v72 = *(_QWORD *)(v57 + 448);
  v73 = *(_QWORD *)(v57 + 424);
  v74 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v57 + 432) - v73) >> 3);
  v75 = (_QWORD *)(v73 + 24 * (v72 % v74));
  if (*v75 != v75[1])
  {
    v76 = *(_QWORD *)(*v75 + 72);
    if (*(_BYTE *)(v76 + 400))
    {
      *(_QWORD *)v1125[0] = v76;
      v73 = *(_QWORD *)(v57 + 424);
      v74 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v57 + 432) - v73) >> 3);
    }
  }
  v77 = (_QWORD *)(v73 + 24 * ((v72 + 1) % v74));
  if (*v77 != v77[1])
  {
    v78 = *(_QWORD *)(*v77 + 72);
    if (*(_BYTE *)(v78 + 400))
    {
      *((_QWORD *)v1125[0] + 1) = v78;
      v73 = *(_QWORD *)(v57 + 424);
      v74 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v57 + 432) - v73) >> 3);
    }
  }
  v79 = (_QWORD *)(v73 + 24 * ((v72 + 2) % v74));
  if (*v79 != v79[1])
  {
    v80 = *(_QWORD *)(*v79 + 72);
    if (*(_BYTE *)(v80 + 400))
    {
      *((_QWORD *)v1125[0] + 2) = v80;
      v73 = *(_QWORD *)(v57 + 424);
      v74 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v57 + 432) - v73) >> 3);
    }
  }
  v81 = (_QWORD *)(v73 + 24 * ((v72 + 3) % v74));
  if (*v81 != v81[1])
  {
    v82 = *(_QWORD *)(*v81 + 72);
    if (*(_BYTE *)(v82 + 400))
      *((_QWORD *)v1125[0] + 3) = v82;
  }
  v83 = operator new(0x60uLL);
  *v83 = 0u;
  v83[1] = 0u;
  v83[2] = 0u;
  v83[3] = 0u;
  v83[4] = 0u;
  v83[5] = 0u;
  v1113 = v83;
  v1114 = v83 + 6;
  v1115 = v83 + 6;
  v1116 = 0;
  v1118 = 0;
  v1117 = 0;
  v84 = operator new(0x60uLL);
  *v84 = 0u;
  v84[1] = 0u;
  v84[2] = 0u;
  v84[3] = 0u;
  v84[4] = 0u;
  v84[5] = 0u;
  v1116 = v84;
  v1117 = v84 + 6;
  v1118 = v84 + 6;
  v1119 = 0;
  v1121 = 0;
  v1120 = 0;
  v85 = operator new(0x60uLL);
  v1121 = v85 + 6;
  *v85 = 0u;
  v85[1] = 0u;
  v85[2] = 0u;
  v85[3] = 0u;
  v85[4] = 0u;
  v85[5] = 0u;
  v1119 = v85;
  v1120 = v85 + 6;
  v1105.f64[0] = *(float64_t *)(v57 + 248);
  v86 = *(_QWORD *)(v57 + 376);
  v87 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v57 + 384) - v86) >> 4);
  sub_20F0B8F8C(&v1113, 0, (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 48 * (*(_QWORD *)(v57 + 400) % v87)) + 8) + 56)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 48 * (*(_QWORD *)(v57 + 400) % v87)) + 8) + 48)) >> 4);
  v88 = *(_QWORD *)(v57 + 376);
  v89 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v57 + 384) - v88) >> 4);
  sub_20F0B8F8C(&v1113, 1u, (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 48 * ((*(_QWORD *)(v57 + 400) + 1) % v89)) + 8) + 56)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 48 * ((*(_QWORD *)(v57 + 400) + 1) % v89)) + 8) + 48)) >> 4);
  v90 = *(_QWORD *)(v57 + 376);
  v91 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v57 + 384) - v90) >> 4);
  sub_20F0B8F8C(&v1113, 2u, (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 48 * ((*(_QWORD *)(v57 + 400) + 2) % v91)) + 8) + 56)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 48 * ((*(_QWORD *)(v57 + 400) + 2) % v91)) + 8) + 48)) >> 4);
  v92 = *(_QWORD *)(v57 + 376);
  v93 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v57 + 384) - v92) >> 4);
  sub_20F0B8F8C(&v1113, 3u, (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v92 + 48 * ((*(_QWORD *)(v57 + 400) + 3) % v93)) + 8) + 56)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v92 + 48 * ((*(_QWORD *)(v57 + 400) + 3) % v93)) + 8) + 48)) >> 4);
  v98 = 1;
  *(_QWORD *)v1129 = v57;
  *(_QWORD *)&v1129[8] = &v1105;
  *(_QWORD *)&v1129[16] = &v1113;
  do
  {
    __pa = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v989 + 376)
                                 + 48
                                 * ((*(_QWORD *)(v989 + 400) + v98)
                                  % (0xAAAAAAAAAAAAAAABLL
                                   * ((uint64_t)(*(_QWORD *)(v989 + 384) - *(_QWORD *)(v989 + 376)) >> 4))))
                     + 8);
    v99 = *(_QWORD *)(__pa + 80) - *(_QWORD *)(__pa + 72);
    if ((v99 & 0x7FFFFFFF8) != 0)
    {
      v100 = 0;
      v101 = v98 - 1;
      v1066 = (v99 >> 3);
      do
      {
        v102 = *(unsigned int *)(*(_QWORD *)(__pa + 72) + 8 * v100);
        v103 = v1119;
        if (0xAAAAAAAAAAAAAAABLL * (v1120 - v1119) <= v98)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1009, (uint64_t)"pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v104 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v104 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v106 = qword_254A6DE40;
            for (k = qword_254A6DE48; v106 != k; v106 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v106)(*(_QWORD *)(v106 + 8), "pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, "", 0);
          }
          v107 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
LABEL_971:
            abort();
          qword_254A6DE58(unk_254A6DE60, "pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, "", 0);
          v103 = v1119;
        }
        v109 = &v103[3 * v98];
        v108 = *v109;
        if (v102 >= (v109[1] - *v109) >> 2)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1012, (uint64_t)"observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v110 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v110 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v112 = qword_254A6DE40;
            for (m = qword_254A6DE48; v112 != m; v112 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v112)(*(_QWORD *)(v112 + 8), "observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, "", 0);
          }
          v113 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v113 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_971;
          qword_254A6DE58(unk_254A6DE60, "observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, "", 0);
          v108 = v1119[3 * v98];
        }
        if ((*(_DWORD *)(v108 + 4 * v102) & 0x80000000) == 0)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 534, (uint64_t)"ob_utils.BearingIndex(curr_pose_idx, curr_observ_idx) < 0 && \"Observation from this pose already exists, possibly \" \"curr. to prev. matches is not an one-to-one mapping.\"", 170, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v114 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v114 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v116 = qword_254A6DE40;
            v115 = qword_254A6DE48;
            while (v116 != v115)
            {
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v116)(*(_QWORD *)(v116 + 8), "ob_utils.BearingIndex(curr_pose_idx, curr_observ_idx) < 0 && \"Observation from this pose already exists, possibly \" \"curr. to prev. matches is not an one-to-one mapping.\"", 170, "", 0);
              v116 += 16;
            }
          }
          v117 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v117 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_971;
          qword_254A6DE58(unk_254A6DE60, "ob_utils.BearingIndex(curr_pose_idx, curr_observ_idx) < 0 && \"Observation from this pose already exists, possibly \" \"curr. to prev. matches is not an one-to-one mapping.\"", 170, "", 0);
        }
        sub_20F0B92D0(v1129, v98, v102, v94, v95, v96, v97);
        v118 = *(unsigned int *)(*(_QWORD *)(__pa + 72) + 8 * v100 + 4);
        v119 = v1119;
        if (0xAAAAAAAAAAAAAAABLL * (v1120 - v1119) <= v101)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1009, (uint64_t)"pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v120 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v120 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v122 = qword_254A6DE40;
            for (n = qword_254A6DE48; v122 != n; v122 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v122)(*(_QWORD *)(v122 + 8), "pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, "", 0);
          }
          v123 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v123 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_971;
          qword_254A6DE58(unk_254A6DE60, "pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, "", 0);
          v119 = v1119;
        }
        v125 = &v119[3 * v101];
        v124 = *v125;
        if (v118 >= (v125[1] - *v125) >> 2)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1012, (uint64_t)"observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v126 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v126 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v128 = qword_254A6DE40;
            for (ii = qword_254A6DE48; v128 != ii; v128 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v128)(*(_QWORD *)(v128 + 8), "observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, "", 0);
          }
          v129 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v129 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_971;
          qword_254A6DE58(unk_254A6DE60, "observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, "", 0);
          v124 = v1119[3 * v101];
        }
        if ((*(_DWORD *)(v124 + 4 * v118) & 0x80000000) != 0)
          sub_20F0B92D0(v1129, v98 - 1, v118, v94, v95, v96, v97);
        ++v100;
      }
      while (v100 != v1066);
    }
    ++v98;
  }
  while (v98 != 4);
  v130 = v989;
  v1020 = *(float64x2_t **)(v989 + 224);
  v131 = *(_QWORD *)(v989 + 400);
  v132 = *(_QWORD *)(v989 + 376);
  v133 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v989 + 384) - v132) >> 4);
  v134 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v132 + 48 * ((v131 + 1) % v133)) + 8) + 80)
        - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v132 + 48 * ((v131 + 1) % v133)) + 8) + 72)) >> 3;
  if (v134 <= ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v132 + 48 * ((v131 + 2) % v133)) + 8)
                                                       + 80)
                                           - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v132 + 48 * ((v131 + 2) % v133)) + 8)
                                                       + 72)) >> 3))
    LODWORD(v134) = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v132 + 48 * ((v131 + 2) % v133)) + 8) + 80)
                   - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v132 + 48 * ((v131 + 2) % v133)) + 8) + 72)) >> 3;
  v135 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v132 + 48 * ((v131 + 3) % v133)) + 8) + 80)
        - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v132 + 48 * ((v131 + 3) % v133)) + 8) + 72)) >> 3;
  if (v134 <= v135)
    v136 = v135;
  else
    v136 = v134;
  memset(&v1148, 0, 24);
  if ((_DWORD)v136)
  {
    *(_QWORD *)&v1148.columns[0].f64[0] = operator new(32 * v136);
    v1148.columns[0].f64[1] = v1148.columns[0].f64[0];
    *(_QWORD *)&v1148.columns[1].f64[0] = *(_QWORD *)&v1148.columns[0].f64[0] + 32 * v136;
  }
  v1025 = 0;
  v137 = 1;
  v1046 = 24;
  do
  {
    __pb = v137;
    v1067 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v130 + 376)
                                  + 48
                                  * ((*(_QWORD *)(v130 + 400) + v137)
                                   % (0xAAAAAAAAAAAAAAABLL
                                    * ((uint64_t)(*(_QWORD *)(v130 + 384) - *(_QWORD *)(v130 + 376)) >> 4))))
                      + 8);
    v138 = *(_QWORD *)(v1067 + 80) - *(_QWORD *)(v1067 + 72);
    v139 = (v138 >> 3);
    v140 = v1148.columns[0].f64[1];
    v141 = v1148.columns[0].f64[0];
    v142 = (uint64_t)(*(_QWORD *)&v1148.columns[0].f64[1] - *(_QWORD *)&v1148.columns[0].f64[0]) >> 5;
    v143 = v139 - v142;
    if (v139 <= v142)
    {
      if (v139 < v142)
        *(_QWORD *)&v1148.columns[0].f64[1] = *(_QWORD *)&v1148.columns[0].f64[0] + 32 * v139;
LABEL_225:
      if ((v138 & 0x7FFFFFFF8) != 0)
        goto LABEL_228;
      goto LABEL_348;
    }
    if (v143 > (uint64_t)(*(_QWORD *)&v1148.columns[1].f64[0] - *(_QWORD *)&v1148.columns[0].f64[1]) >> 5)
    {
      v144 = (uint64_t)(*(_QWORD *)&v1148.columns[1].f64[0] - *(_QWORD *)&v1148.columns[0].f64[0]) >> 4;
      if (v144 <= v139)
        v144 = (v138 >> 3);
      if (*(_QWORD *)&v1148.columns[1].f64[0] - *(_QWORD *)&v1148.columns[0].f64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v145 = 0x7FFFFFFFFFFFFFFLL;
      else
        v145 = v144;
      if (v145 >> 59)
        sub_20E877A38();
      v146 = (char *)operator new(32 * v145);
      v147 = &v146[32 * v142];
      bzero(v147, 32 * v143);
      v148 = *(double *)&v147;
      if (*(_QWORD *)&v140 != *(_QWORD *)&v141)
      {
        do
        {
          v149 = *(_OWORD *)(*(_QWORD *)&v140 - 16);
          *(_OWORD *)(*(_QWORD *)&v148 - 32) = *(_OWORD *)(*(_QWORD *)&v140 - 32);
          *(_OWORD *)(*(_QWORD *)&v148 - 16) = v149;
          *(_QWORD *)&v148 -= 32;
          *(_QWORD *)&v140 -= 32;
        }
        while (*(_QWORD *)&v140 != *(_QWORD *)&v141);
        v140 = v141;
      }
      v1148.columns[0].f64[0] = v148;
      *(_QWORD *)&v1148.columns[0].f64[1] = &v147[32 * v143];
      *(_QWORD *)&v1148.columns[1].f64[0] = &v146[32 * v145];
      v130 = v989;
      if (v140 != 0.0)
      {
        operator delete(*(void **)&v140);
        if ((v138 & 0x7FFFFFFF8) != 0)
          goto LABEL_228;
        goto LABEL_348;
      }
      goto LABEL_225;
    }
    bzero(*(void **)&v1148.columns[0].f64[1], 32 * v143);
    *(_QWORD *)&v1148.columns[0].f64[1] = *(_QWORD *)&v140 + 32 * v143;
    if ((v138 & 0x7FFFFFFF8) != 0)
    {
LABEL_228:
      v150 = 0;
      v151 = __pb - 1;
      do
      {
        v154 = (unsigned int *)(*(_QWORD *)(v1067 + 72) + 8 * v150);
        v156 = *v154;
        v155 = v154[1];
        v157 = v1119;
        if (0xAAAAAAAAAAAAAAABLL * (v1120 - v1119) <= v151)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1009, (uint64_t)"pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v158 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v158 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v159 = qword_254A6DE40;
            for (jj = qword_254A6DE48; v159 != jj; v159 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v159)(*(_QWORD *)(v159 + 8), "pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, "", 0);
          }
          v161 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v161 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
LABEL_974:
            abort();
          qword_254A6DE58(unk_254A6DE60, "pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, "", 0);
          v157 = v1119;
        }
        v162 = v157[3 * v151];
        if (v155 >= (v157[3 * v151 + 1] - v162) >> 2)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1012, (uint64_t)"observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v163 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v163 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v164 = qword_254A6DE40;
            for (kk = qword_254A6DE48; v164 != kk; v164 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v164)(*(_QWORD *)(v164 + 8), "observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, "", 0);
          }
          v166 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v166 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_974;
          qword_254A6DE58(unk_254A6DE60, "observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, "", 0);
          v157 = v1119;
          v162 = v1119[3 * v151];
        }
        v167 = *(unsigned int *)(v162 + 4 * v155);
        v168 = __pb;
        if (0xAAAAAAAAAAAAAAABLL * (v1120 - v157) <= __pb)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1009, (uint64_t)"pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v169 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v169 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v170 = qword_254A6DE40;
            for (mm = qword_254A6DE48; v170 != mm; v170 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v170)(*(_QWORD *)(v170 + 8), "pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, "", 0);
          }
          v172 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v172 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
LABEL_972:
            abort();
          qword_254A6DE58(unk_254A6DE60, "pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, "", 0);
          v157 = v1119;
          v168 = __pb;
        }
        v174 = &v157[3 * v168];
        v173 = *v174;
        if (v156 >= (v174[1] - *v174) >> 2)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1012, (uint64_t)"observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v175 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v175 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v176 = qword_254A6DE40;
            for (nn = qword_254A6DE48; v176 != nn; v176 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v176)(*(_QWORD *)(v176 + 8), "observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, "", 0);
          }
          v178 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v178 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_972;
          qword_254A6DE58(unk_254A6DE60, "observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, "", 0);
          v173 = v1119[3 * __pb];
        }
        v179 = *(unsigned int *)(v173 + 4 * v156);
        if ((v167 & 0x80000000) != 0 || (v179 & 0x80000000) != 0)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 606, (uint64_t)"prev_bearing_idx_maybe >= 0 && curr_bearing_idx_maybe >= 0", 58, (uint64_t)"Matched observations should have associated bearing data structures.", 68, (void (*)(void **))sub_21023DDB0);
          v180 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v180 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v181 = qword_254A6DE40;
            for (i1 = qword_254A6DE48; v181 != i1; v181 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v181)(*(_QWORD *)(v181 + 8), "prev_bearing_idx_maybe >= 0 && curr_bearing_idx_maybe >= 0", 58, "Matched observations should have associated bearing data structures.", 68);
          }
          v183 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v183 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_972;
          qword_254A6DE58(unk_254A6DE60, "prev_bearing_idx_maybe >= 0 && curr_bearing_idx_maybe >= 0", 58, "Matched observations should have associated bearing data structures.", 68);
        }
        v184 = v1113;
        if (0xAAAAAAAAAAAAAAABLL * ((v1114 - (_BYTE *)v1113) >> 3) <= v151)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1022, (uint64_t)"pose_idx < observation_bearings_.size() && \"Invalid access: Index out of range.\"", 80, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v185 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v185 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v186 = qword_254A6DE40;
            for (i2 = qword_254A6DE48; v186 != i2; v186 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v186)(*(_QWORD *)(v186 + 8), "pose_idx < observation_bearings_.size() && \"Invalid access: Index out of range.\"", 80, "", 0);
          }
          v188 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v188 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
LABEL_975:
            abort();
          qword_254A6DE58(unk_254A6DE60, "pose_idx < observation_bearings_.size() && \"Invalid access: Index out of range.\"", 80, "", 0);
          v184 = v1113;
        }
        v189 = &v184[3 * v151];
        v190 = *v189;
        if (0xAAAAAAAAAAAAAAABLL * ((v189[1] - *v189) >> 4) <= v167)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1025, (uint64_t)"bearing_idx < observation_bearings_[pose_idx].size() && \"Invalid access: Index out of range.\"", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v191 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v191 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v192 = qword_254A6DE40;
            for (i3 = qword_254A6DE48; v192 != i3; v192 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v192)(*(_QWORD *)(v192 + 8), "bearing_idx < observation_bearings_[pose_idx].size() && \"Invalid access: Index out of range.\"", 93, "", 0);
          }
          v194 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v194 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_975;
          qword_254A6DE58(unk_254A6DE60, "bearing_idx < observation_bearings_[pose_idx].size() && \"Invalid access: Index out of range.\"", 93, "", 0);
          v184 = v1113;
          v190 = v1113[3 * v151];
        }
        v195 = __pb;
        if (0xAAAAAAAAAAAAAAABLL * ((v1114 - (_BYTE *)v184) >> 3) <= __pb)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1022, (uint64_t)"pose_idx < observation_bearings_.size() && \"Invalid access: Index out of range.\"", 80, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v196 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v196 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v197 = qword_254A6DE40;
            for (i4 = qword_254A6DE48; v197 != i4; v197 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v197)(*(_QWORD *)(v197 + 8), "pose_idx < observation_bearings_.size() && \"Invalid access: Index out of range.\"", 80, "", 0);
          }
          v199 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v199 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
LABEL_976:
            abort();
          qword_254A6DE58(unk_254A6DE60, "pose_idx < observation_bearings_.size() && \"Invalid access: Index out of range.\"", 80, "", 0);
          v184 = v1113;
          v195 = __pb;
        }
        v201 = &v184[3 * v195];
        v200 = *v201;
        if (0xAAAAAAAAAAAAAAABLL * ((v201[1] - *v201) >> 4) <= v179)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1025, (uint64_t)"bearing_idx < observation_bearings_[pose_idx].size() && \"Invalid access: Index out of range.\"", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v202 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v202 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v203 = qword_254A6DE40;
            for (i5 = qword_254A6DE48; v203 != i5; v203 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v203)(*(_QWORD *)(v203 + 8), "bearing_idx < observation_bearings_[pose_idx].size() && \"Invalid access: Index out of range.\"", 93, "", 0);
          }
          v205 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v205 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_976;
          qword_254A6DE58(unk_254A6DE60, "bearing_idx < observation_bearings_[pose_idx].size() && \"Invalid access: Index out of range.\"", 93, "", 0);
          v200 = v1113[3 * __pb];
        }
        v152 = v200 + 48 * v179;
        v153 = (_QWORD *)(*(_QWORD *)&v1148.columns[0].f64[0] + 32 * v150);
        *v153 = v190 + 48 * v167;
        v153[1] = v190 + 48 * v167 + 16;
        v153[2] = v152;
        v153[3] = v152 + 16;
        ++v150;
      }
      while (v150 != v139);
    }
LABEL_348:
    v206 = __pb;
    v207 = v989 + 984 + 72 * __pb;
    v208 = v1020[1].f64[0];
    _D2 = v1020[3].f64[0];
    _Q4 = v1020[2];
    v211 = v1020[5].f64[0];
    _Q5 = v1020[4];
    v213 = *(double *)(v207 + 16);
    _Q7 = *(_OWORD *)v207;
    v215 = *(double *)(v207 + 40);
    _Q17 = *(float64x2_t *)(v207 + 24);
    v217 = *(double *)(v207 + 64);
    _Q19 = *(float64x2_t *)(v207 + 48);
    v219 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v1020, *(double *)v207), _Q4, *(float64x2_t *)v207, 1), _Q5, v213);
    __asm { FMLA            D21, D2, V7.D[1] }
    v225 = _D21 + v211 * v213;
    v226 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v1020, _Q17.f64[0]), _Q4, _Q17, 1), _Q5, v215);
    __asm { FMLA            D21, D2, V17.D[1] }
    _D16 = _D21 + v211 * v215;
    v229 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v1020, _Q19.f64[0]), _Q4, _Q19, 1), _Q5, v217);
    __asm { FMLA            D21, D2, V19.D[1] }
    _D18 = _D21 + v211 * v217;
    v232 = vmlad_n_f64(vmlad_n_f64(v225 * v1020->f64[0], _D16, _Q4.f64[0]), _D18, _Q5.f64[0]);
    v233 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v219, *v1020, 1), v226, _Q4, 1), v229, _Q5, 1);
    __asm
    {
      FMLA            D3, D16, V4.D[1]
      FMLA            D3, D18, V5.D[1]
    }
    *(float64x2_t *)v1129 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v219, v1020->f64[0]), v226, _Q4.f64[0]), v229, _Q5.f64[0]);
    v1130 = v233;
    *(double *)&v1129[16] = v232;
    v1131[0] = _D3;
    *(float64x2_t *)&v1131[1] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v219, v208), v226, _D2), v229, v211);
    *(double *)&v1131[3] = v225 * v208 + _D16 * _D2 + _D18 * v211;
    *(_QWORD *)&v1142.columns[0].f64[0] = 200;
    *(simd_double2 *)((char *)v1142.columns + 8) = (simd_double2)xmmword_21039BC30;
    LOBYTE(v1142.columns[1].f64[1]) = 0;
    *(_QWORD *)&v1153[0] = 0;
    memset(v1152, 0, sizeof(v1152));
    v1150[1] = 0;
    v1150[0] = 0;
    v1151.f64[0] = 0.0;
    v1140 = 0;
    v1139 = 0;
    v1141 = 0;
    v1031 = sub_20F0BA2E8((uint64_t *)&v1142, (char **)&v1148, (uint64_t *)v1129, (uint64_t)v1152, (unint64_t **)v1150, (unint64_t **)&v1139, (__n128)0);
    if ((v1031 & 1) != 0)
    {
      v236 = v1139;
      v1049 = v1140;
      if (v1139 != v1140)
      {
        __len = 4 * __pb;
        while (1)
        {
          v237 = *(unsigned int *)(*(_QWORD *)(v1067 + 72) + 8 * *v236);
          v1056 = v1124;
          v1052 = v1123[1];
          v238 = (char *)v1122[0];
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v1122[1] - (char *)v1122[0]) >> 3) <= v206)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 707, (uint64_t)"pose_idx < observation_index_to_temporal_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 109, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v239 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v239 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v240 = qword_254A6DE40;
              for (i6 = qword_254A6DE48; v240 != i6; v240 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v240)(*(_QWORD *)(v240 + 8), "pose_idx < observation_index_to_temporal_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 109, "", 0);
            }
            v242 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v242 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v206 = __pb;
            if (!byte_254A6DE68)
LABEL_977:
              abort();
            qword_254A6DE58(unk_254A6DE60, "pose_idx < observation_index_to_temporal_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 109, "", 0);
            v238 = (char *)v1122[0];
          }
          v244 = &v238[24 * v206];
          v243 = *(_QWORD *)v244;
          if (v237 >= (uint64_t)(*((_QWORD *)v244 + 1) - *(_QWORD *)v244) >> 2)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 711, (uint64_t)"observ_idx < observation_index_to_temporal_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 121, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v245 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v245 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v246 = qword_254A6DE40;
              for (i7 = qword_254A6DE48; v246 != i7; v246 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v246)(*(_QWORD *)(v246 + 8), "observ_idx < observation_index_to_temporal_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 121, "", 0);
            }
            v248 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v248 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v206 = __pb;
            if (!byte_254A6DE68)
              goto LABEL_977;
            qword_254A6DE58(unk_254A6DE60, "observ_idx < observation_index_to_temporal_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 121, "", 0);
            v243 = *((_QWORD *)v1122[0] + 3 * __pb);
          }
          v249 = *(_DWORD *)(v243 + 4 * v237);
          v250 = v1123[1];
          v251 = (char **)((char *)v1123[1] + 24 * v249);
          v252 = *v251;
          v253 = *(_DWORD *)*v251 >= 0;
          if (v206 != 1)
          {
            v253 += *((_DWORD *)v252 + 1) >= 0;
            if (v206 != 2)
              v253 += *((_DWORD *)v252 + 2) >= 0;
          }
          if (v253)
            break;
LABEL_352:
          if (++v236 == v1049)
            goto LABEL_422;
        }
        v1088 = 0;
        v1087 = 0;
        v1089 = 0;
        v254 = (char *)*((_QWORD *)v1123[1] + 3 * v249 + 1);
        v255 = v254 - v252;
        if (v254 == v252)
        {
          v257 = 0;
          v256 = 0;
        }
        else
        {
          if (v255 < 0)
            sub_20EABADD4();
          v256 = (char *)operator new(v254 - v252);
          v257 = &v256[4 * (v255 >> 2)];
          v1087 = v256;
          v1089 = v257;
          memcpy(v256, v252, v255);
          v1088 = v257;
          v252 = *v251;
        }
        memset(v256, 255, __len);
        memset(&v252[__len], 255, ((12 - 4 * __pb) & 0x3FFFFFFFCLL) + 4);
        v258 = (_QWORD *)v1124;
        if ((unint64_t)v1124 < *((_QWORD *)&v1124 + 1))
        {
          *(_OWORD *)v1124 = 0uLL;
          v258[2] = 0;
          v259 = v257 - v256;
          if (v257 != v256)
          {
            if (v259 < 0)
              sub_20EABADD4();
            v260 = (char *)operator new(v259);
            *v258 = v260;
            v258[1] = v260;
            v261 = &v260[4 * (v259 >> 2)];
            v258[2] = v261;
            memcpy(v260, v256, v259);
            v258[1] = v261;
          }
          v262 = v258 + 3;
          v206 = __pb;
          goto LABEL_409;
        }
        v263 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1124 - (_QWORD)v250) >> 3);
        v264 = v263 + 1;
        if (v263 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20EF47464();
        if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v1124 + 1) - (_QWORD)v250) >> 3) > v264)
          v264 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v1124 + 1) - (_QWORD)v250) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v1124 + 1) - (_QWORD)v250) >> 3) >= 0x555555555555555)
          v265 = 0xAAAAAAAAAAAAAAALL;
        else
          v265 = v264;
        *(_QWORD *)&v1107.f64[0] = (char *)&v1124 + 8;
        if (v265)
        {
          if (v265 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v266 = (char *)operator new(24 * v265);
        }
        else
        {
          v266 = 0;
        }
        v267 = &v266[24 * v263];
        *(_QWORD *)&v1105.f64[0] = v266;
        *(_QWORD *)&v1105.f64[1] = v267;
        v268 = &v266[24 * v265];
        *(_QWORD *)&v1106 = v267;
        *((_QWORD *)&v1106 + 1) = v268;
        *((_QWORD *)v267 + 1) = 0;
        *(_QWORD *)v267 = 0;
        *((_QWORD *)v267 + 2) = 0;
        v269 = v257 - v256;
        if (v269)
        {
          if (v269 < 0)
            sub_20EABADD4();
          v270 = operator new(v269);
          *(_QWORD *)v267 = v270;
          v271 = (unint64_t)v270 + 4 * (v269 >> 2);
          memcpy(v270, v256, v269);
          *(int64x2_t *)(v267 + 8) = vdupq_n_s64(v271);
          v130 = v989;
        }
        v262 = v267 + 24;
        *(_QWORD *)&v1106 = v267 + 24;
        if (v258 == v250)
        {
          v1123[1] = v267;
          *(_QWORD *)&v1124 = v267 + 24;
          *((_QWORD *)&v1124 + 1) = v268;
          v206 = __pb;
        }
        else
        {
          do
          {
            v272 = v267;
            *((_QWORD *)v267 - 2) = 0;
            *((_QWORD *)v267 - 1) = 0;
            v273 = *(_OWORD *)(v258 - 3);
            v258 -= 3;
            *(_OWORD *)(v267 - 24) = v273;
            v267 -= 24;
            *((_QWORD *)v272 - 1) = v258[2];
            *v258 = 0;
            v258[1] = 0;
            v258[2] = 0;
          }
          while (v258 != v250);
          v250 = v1123[1];
          v274 = (_QWORD *)v1124;
          v1123[1] = v267;
          v1038 = (_QWORD *)v1106;
          v1124 = v1106;
          v206 = __pb;
          if (v274 != v250)
          {
            v275 = v274;
            do
            {
              v277 = (void *)*(v275 - 3);
              v275 -= 3;
              v276 = v277;
              if (v277)
              {
                *(v274 - 2) = v276;
                operator delete(v276);
              }
              v274 = v275;
            }
            while (v275 != v250);
          }
          v262 = v1038;
          if (!v250)
            goto LABEL_408;
        }
        operator delete(v250);
LABEL_408:
        v256 = (char *)v1087;
LABEL_409:
        *(_QWORD *)&v1124 = v262;
        v278 = (char *)v1122[0] + v1046;
        v279 = v206;
        do
        {
          v280 = *(unsigned int *)&v256[4 * v279];
          if ((v280 & 0x80000000) == 0)
            *(_DWORD *)(*v278 + 4 * v280) = -1431655765 * ((unint64_t)(v1056 - (_QWORD)v1052) >> 3);
          ++v279;
          v278 += 3;
        }
        while ((_DWORD)v279 != 4);
        operator delete(v256);
        goto LABEL_352;
      }
    }
    else
    {
      *(_DWORD *)(v130 + 368) = 3;
LABEL_422:
      v236 = v1139;
    }
    if (v236)
    {
      v1140 = v236;
      operator delete(v236);
    }
    if (v1150[0])
    {
      v1150[1] = v1150[0];
      operator delete(v1150[0]);
    }
    if ((v1031 & 1) == 0)
      break;
    v1025 = v206 > 2;
    v1046 += 24;
    v137 = v206 + 1;
  }
  while (v206 != 3);
  if (*(_QWORD *)&v1148.columns[0].f64[0])
    operator delete(*(void **)&v1148.columns[0].f64[0]);
  if (!v1025)
  {
    v285 = 0;
    goto LABEL_625;
  }
  v1109 = (float64x2_t)xmmword_21039BD50;
  v1110 = unk_21039BD60;
  v1111 = xmmword_21039BD70;
  v1112 = unk_21039BD80;
  v1105 = (float64x2_t)xmmword_21039BD10;
  v1106 = unk_21039BD20;
  v1107 = (float64x2_t)xmmword_21039BD30;
  v1108 = unk_21039BD40;
  v1103 = 0;
  v1102 = 0;
  v1104 = 0;
  v1100 = 0;
  v1099 = 0;
  v1101 = 0;
  v1097 = 0;
  v1096 = 0;
  v1098 = 0;
  v281 = *(float64x2_t **)(v130 + 224);
  if (v1122[1] != v1122[0])
  {
    v282 = *((_QWORD *)v1122[0] + 1) - *(_QWORD *)v1122[0];
    v283 = (v282 >> 2);
    if ((v282 >> 2))
      goto LABEL_434;
LABEL_439:
    __pc = 0;
    v284 = 0;
    if ((v282 & 0x3FFFFFFFCLL) == 0)
      goto LABEL_526;
    goto LABEL_440;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 738, (uint64_t)"pose_idx < observation_index_to_temporal_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 109, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_988;
  }
  v282 = *((_QWORD *)v1122[0] + 1) - *(_QWORD *)v1122[0];
  v283 = (v282 >> 2);
  if (!(v282 >> 2))
    goto LABEL_439;
LABEL_434:
  v284 = (char *)operator new(32 * v283);
  v1102 = v284;
  v1103 = v284;
  __pc = &v284[32 * v283];
  v1104 = __pc;
  v1099 = operator new(4 * v283);
  v1100 = (char *)v1099;
  v1101 = (char *)v1099 + 4 * v283;
  if ((v282 & 0x3FFFFFFFCLL) != 0)
  {
LABEL_440:
    v1068 = v283;
    v1057 = v281;
    v286 = 0;
    v287 = v284;
    while (1)
    {
      if (v1122[1] == v1122[0])
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 707, (uint64_t)"pose_idx < observation_index_to_temporal_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 109, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_987;
        }
        v130 = v989;
        v288 = *(_QWORD *)v1122[0];
        if (v286 < (uint64_t)(*((_QWORD *)v1122[0] + 1) - *(_QWORD *)v1122[0]) >> 2)
          goto LABEL_451;
      }
      else
      {
        v288 = *(_QWORD *)v1122[0];
        if (v286 < (uint64_t)(*((_QWORD *)v1122[0] + 1) - *(_QWORD *)v1122[0]) >> 2)
          goto LABEL_451;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 711, (uint64_t)"observ_idx < observation_index_to_temporal_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 121, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_987;
      }
      v288 = *(_QWORD *)v1122[0];
      v130 = v989;
LABEL_451:
      v289 = *(unsigned int *)(v288 + 4 * v286);
      v290 = (char *)v1123[1];
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1124 - (unint64_t)v1123[1]) >> 3) <= v289)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 720, (uint64_t)"track_idx < temporal_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 96, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_987;
        }
        v290 = (char *)v1123[1];
        v130 = v989;
      }
      v292 = &v290[24 * v289];
      v291 = *(_QWORD *)v292;
      if (*((_QWORD *)v292 + 1) - *(_QWORD *)v292 <= 0xCuLL)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 723, (uint64_t)"pose_idx < temporal_tracks_observation_indices_[track_idx].size() && \"Invalid access: Index out of range.\"", 106, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_987;
        }
        v291 = *((_QWORD *)v1123[1] + 3 * v289);
        v130 = v989;
      }
      v293 = *(unsigned int *)(v291 + 12);
      if ((v293 & 0x80000000) != 0)
        goto LABEL_443;
      v294 = v1100;
      if (v1100 < v1101)
      {
        *(_DWORD *)v1100 = v289;
        v295 = (uint64_t)(v294 + 4);
        goto LABEL_479;
      }
      v296 = (char *)v1099;
      v297 = v1100 - (_BYTE *)v1099;
      v298 = (v1100 - (_BYTE *)v1099) >> 2;
      v299 = v298 + 1;
      if ((unint64_t)(v298 + 1) >> 62)
      {
        v1102 = v287;
        sub_20E867F44();
      }
      v300 = v1101 - (_BYTE *)v1099;
      if ((v1101 - (_BYTE *)v1099) >> 1 > v299)
        v299 = v300 >> 1;
      if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFFCLL)
        v301 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v301 = v299;
      if (v301)
      {
        if (v301 >> 62)
          goto LABEL_997;
        v302 = v301;
        v303 = (char *)operator new(4 * v301);
        v301 = v302;
        v304 = &v303[4 * v298];
        *(_DWORD *)v304 = v289;
        v295 = (uint64_t)(v304 + 4);
        v305 = v294 - v296;
        if (v294 == v296)
          goto LABEL_477;
LABEL_471:
        v306 = v305 - 4;
        if (v306 < 0x2C)
          goto LABEL_1010;
        if ((unint64_t)(v294 - v303 - v297) < 0x20)
          goto LABEL_1010;
        v307 = (v306 >> 2) + 1;
        v308 = 4 * (v307 & 0x7FFFFFFFFFFFFFF8);
        v309 = &v294[-v308];
        v304 -= v308;
        v310 = &v303[4 * v298 - 16];
        v311 = v294 - 16;
        v312 = v307 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v313 = *(_OWORD *)v311;
          *((_OWORD *)v310 - 1) = *((_OWORD *)v311 - 1);
          *(_OWORD *)v310 = v313;
          v310 -= 32;
          v311 -= 32;
          v312 -= 8;
        }
        while (v312);
        v294 = v309;
        if (v307 != (v307 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_1010:
          do
          {
            v314 = *((_DWORD *)v294 - 1);
            v294 -= 4;
            *((_DWORD *)v304 - 1) = v314;
            v304 -= 4;
          }
          while (v294 != v296);
        }
        goto LABEL_477;
      }
      v303 = 0;
      v304 = (char *)(4 * v298);
      *(_DWORD *)(4 * v298) = v289;
      v295 = 4 * v298 + 4;
      v305 = v294 - v296;
      if (v294 != v296)
        goto LABEL_471;
LABEL_477:
      v1099 = v304;
      v1101 = &v303[4 * v301];
      if (v296)
        operator delete(v296);
LABEL_479:
      v1100 = (char *)v295;
      v315 = v1119;
      if (v1120 == v1119)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1009, (uint64_t)"pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_987;
        }
        v315 = v1119;
        v316 = *v1119;
        if (v286 < (uint64_t)(v1119[1] - *v1119) >> 2)
          goto LABEL_486;
      }
      else
      {
        v316 = *v1119;
        if (v286 < (uint64_t)(v1119[1] - *v1119) >> 2)
          goto LABEL_486;
      }
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1012, (uint64_t)"observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_987;
      }
      v315 = v1119;
      v316 = *v1119;
LABEL_486:
      v317 = *(unsigned int *)(v316 + 4 * v286);
      if (0xAAAAAAAAAAAAAAABLL * (v1120 - v315) <= 3)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1009, (uint64_t)"pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_987;
        }
        v315 = v1119;
      }
      v319 = v315 + 9;
      v318 = v315[9];
      if (v293 >= (v319[1] - v318) >> 2)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1012, (uint64_t)"observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_987;
        }
        v318 = v1119[9];
      }
      v320 = *(unsigned int *)(v318 + 4 * v293);
      if (((v317 & 0x80000000) != 0 || (v320 & 0x80000000) != 0)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 704, (uint64_t)"first_bearing_idx_maybe >= 0 && end_bearing_idx_maybe >= 0", 58, (uint64_t)"Matched observations should have associated bearing data structures.", 68, (void (*)(void **))sub_21023DDB0))
      {
LABEL_987:
        v1102 = v287;
LABEL_988:
        abort();
      }
      v321 = v1113;
      if (v1114 == (_BYTE *)v1113)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1022, (uint64_t)"pose_idx < observation_bearings_.size() && \"Invalid access: Index out of range.\"", 80, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_987;
        }
        v321 = v1113;
      }
      v322 = *v321;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v321[1] - *v321) >> 4) <= v317)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1025, (uint64_t)"bearing_idx < observation_bearings_[pose_idx].size() && \"Invalid access: Index out of range.\"", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_987;
        }
        v321 = v1113;
        v322 = *v1113;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v1114 - (_BYTE *)v321) >> 3) <= 3)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1022, (uint64_t)"pose_idx < observation_bearings_.size() && \"Invalid access: Index out of range.\"", 80, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_987;
        }
        v321 = v1113;
      }
      v324 = v321 + 9;
      v323 = v321[9];
      if (0xAAAAAAAAAAAAAAABLL * ((v324[1] - v323) >> 4) <= v320)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1025, (uint64_t)"bearing_idx < observation_bearings_[pose_idx].size() && \"Invalid access: Index out of range.\"", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_987;
        }
        v323 = v1113[9];
      }
      v325 = v322 + 48 * v317;
      v326 = v323 + 48 * v320;
      v327 = v325 + 16;
      v328 = v326 + 16;
      if (v284 >= __pc)
      {
        v329 = (v284 - v287) >> 5;
        v330 = v329 + 1;
        if ((unint64_t)(v329 + 1) >> 59)
        {
          v1102 = v287;
          sub_20E867F44();
        }
        if ((__pc - v287) >> 4 > v330)
          v330 = (__pc - v287) >> 4;
        if ((unint64_t)(__pc - v287) >= 0x7FFFFFFFFFFFFFE0)
          v331 = 0x7FFFFFFFFFFFFFFLL;
        else
          v331 = v330;
        if (v331)
        {
          if (v331 >> 59)
          {
LABEL_997:
            v1102 = v287;
            sub_20E877A38();
          }
          v332 = (char *)operator new(32 * v331);
          v333 = &v332[32 * v329];
          *(_QWORD *)v333 = v325;
          *((_QWORD *)v333 + 1) = v327;
          *((_QWORD *)v333 + 2) = v326;
          *((_QWORD *)v333 + 3) = v328;
          if (v284 != v287)
          {
LABEL_517:
            v334 = v333;
            do
            {
              v335 = v334 - 32;
              v336 = *((_OWORD *)v284 - 1);
              *((_OWORD *)v334 - 2) = *((_OWORD *)v284 - 2);
              *((_OWORD *)v334 - 1) = v336;
              v284 -= 32;
              v334 -= 32;
            }
            while (v284 != v287);
            __pc = &v332[32 * v331];
            v284 = v333 + 32;
            v1103 = v333 + 32;
            v130 = v989;
            if (v287)
LABEL_520:
              operator delete(v287);
LABEL_521:
            v287 = v335;
            goto LABEL_442;
          }
        }
        else
        {
          v332 = 0;
          v333 = (char *)(32 * v329);
          *(_QWORD *)v333 = v325;
          *((_QWORD *)v333 + 1) = v327;
          *((_QWORD *)v333 + 2) = v326;
          *((_QWORD *)v333 + 3) = v328;
          if (v284 != v287)
            goto LABEL_517;
        }
        v335 = v333;
        __pc = &v332[32 * v331];
        v284 = v333 + 32;
        v1103 = v333 + 32;
        v130 = v989;
        if (v287)
          goto LABEL_520;
        goto LABEL_521;
      }
      *(_QWORD *)v284 = v325;
      *((_QWORD *)v284 + 1) = v327;
      *((_QWORD *)v284 + 2) = v326;
      *((_QWORD *)v284 + 3) = v328;
      v284 += 32;
      v130 = v989;
LABEL_442:
      v1103 = v284;
LABEL_443:
      if (++v286 == v1068)
      {
        v1104 = __pc;
        v1102 = v287;
        v281 = v1057;
        break;
      }
    }
  }
LABEL_526:
  v337 = v281[1].f64[0];
  _D2 = v281[3].f64[0];
  _Q4 = v281[2];
  v340 = v281[5].f64[0];
  _Q5 = v281[4];
  v342 = *((double *)v1015 + 2);
  _Q7 = *v1015;
  v344 = *((double *)v1015 + 5);
  _Q17 = *(float64x2_t *)((char *)v1015 + 24);
  v346 = *((double *)v1015 + 8);
  _Q19 = (float64x2_t)v1015[3];
  v348 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v281, *(double *)v1015), _Q4, *(float64x2_t *)v1015, 1), _Q5, v342);
  __asm { FMLA            D21, D2, V7.D[1] }
  v350 = _D21 + v340 * v342;
  v351 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v281, _Q17.f64[0]), _Q4, _Q17, 1), _Q5, v344);
  __asm { FMLA            D21, D2, V17.D[1] }
  _D16 = _D21 + v340 * v344;
  v354 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v281, _Q19.f64[0]), _Q4, _Q19, 1), _Q5, v346);
  __asm { FMLA            D21, D2, V19.D[1] }
  _D18 = _D21 + v340 * v346;
  v357 = vmlad_n_f64(vmlad_n_f64(v350 * v281->f64[0], _D16, _Q4.f64[0]), _D18, _Q5.f64[0]);
  __asm
  {
    FMLA            D9, D16, V4.D[1]
    FMLA            D9, D18, V5.D[1]
  }
  v1069 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v348, *v281, 1), v351, _Q4, 1), v354, _Q5, 1);
  *(float64x2_t *)__pd = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v348, v281->f64[0]), v351, _Q4.f64[0]), v354, _Q5.f64[0]);
  *(_OWORD *)v1129 = *(_OWORD *)__pd;
  v1130 = v1069;
  *(double *)&v1129[16] = v357;
  v1131[0] = _D9;
  v1058 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v348, v337), v351, _D2), v354, v340);
  *(float64x2_t *)&v1131[1] = v1058;
  v360 = v350 * v337 + _D16 * _D2 + _D18 * v340;
  *(double *)&v1131[3] = v360;
  *(_QWORD *)&v1142.columns[0].f64[0] = 200;
  *(simd_double2 *)((char *)v1142.columns + 8) = (simd_double2)xmmword_21039BC30;
  LOBYTE(v1142.columns[1].f64[1]) = 1;
  *(_QWORD *)&v1153[0] = 0;
  memset(v1152, 0, sizeof(v1152));
  v1097 = v1096;
  v1088 = 0;
  v1087 = 0;
  v1089 = 0;
  if ((sub_20F0BA2E8((uint64_t *)&v1142, (char **)&v1102, (uint64_t *)v1129, (uint64_t)v1152, (unint64_t **)&v1096, (unint64_t **)&v1087, (__n128)0) & 1) == 0)
  {
    v364 = 0;
    *(_DWORD *)(v130 + 368) = 3;
    v365 = (char *)v1087;
    if (!v1087)
      goto LABEL_532;
    goto LABEL_531;
  }
  if (LODWORD(v1153[0]))
  {
    v362 = (int8x16_t)v1069;
    v361 = *(int8x16_t *)__pd;
    v363 = (int8x16_t)v1058;
    *(double *)&v1106 = v357;
    v361.i64[1] = vextq_s8(v361, v361, 8uLL).u64[0];
    v1105 = (float64x2_t)v361;
    *(_QWORD *)&v1108 = _D9;
    v362.i64[1] = vextq_s8(v362, v362, 8uLL).u64[0];
    v1107 = (float64x2_t)v362;
    *(double *)&v1110 = v360;
    v363.i64[1] = vextq_s8(v363, v363, 8uLL).u64[0];
    v1109 = (float64x2_t)v363;
    *(_QWORD *)&v1112 = *((_QWORD *)&v1152[1] + 1);
    v1111 = *(_OWORD *)((char *)v1152 + 8);
    v364 = 1;
    v365 = (char *)v1087;
    if (!v1087)
      goto LABEL_532;
LABEL_531:
    v1088 = v365;
    operator delete(v365);
    goto LABEL_532;
  }
  v364 = 0;
  *(_DWORD *)(v130 + 368) = 5;
  v365 = (char *)v1087;
  if (v1087)
    goto LABEL_531;
LABEL_532:
  if ((v364 & 1) == 0)
  {
    v285 = 0;
    v457 = v1096;
    if (!v1096)
      goto LABEL_621;
    goto LABEL_620;
  }
  v366 = (char *)operator new(0x60uLL);
  *(_OWORD *)v366 = 0u;
  *((_OWORD *)v366 + 1) = 0u;
  *((_OWORD *)v366 + 2) = 0u;
  *((_OWORD *)v366 + 3) = 0u;
  *((_OWORD *)v366 + 4) = 0u;
  *((_OWORD *)v366 + 5) = 0u;
  v1087 = v366;
  v1088 = v366 + 96;
  v1089 = v366 + 96;
  v1090 = 0;
  v1092 = 0;
  v1091 = 0;
  v367 = operator new(0x60uLL);
  *v367 = 0u;
  v367[1] = 0u;
  v367[2] = 0u;
  v367[3] = 0u;
  v367[4] = 0u;
  v367[5] = 0u;
  v1090 = v367;
  v1091 = v367 + 6;
  v1092 = (char *)(v367 + 6);
  v1093 = 0;
  v1095 = 0;
  v1094 = 0;
  v368 = operator new(0x60uLL);
  v1095 = (char *)(v368 + 6);
  *v368 = 0u;
  v368[1] = 0u;
  v368[2] = 0u;
  v368[3] = 0u;
  v368[4] = 0u;
  v368[5] = 0u;
  v1093 = (uint64_t *)v368;
  v1094 = (uint64_t *)(v368 + 6);
  v1059 = *(_QWORD *)(v130 + 248);
  v1134 = 0u;
  v1135 = 0u;
  v1132 = 0;
  v1130 = 0u;
  memset(v1131, 0, sizeof(v1131));
  *(_OWORD *)&v1129[8] = 0u;
  *(_QWORD *)v1129 = 0x3FF0000000000000;
  v1131[0] = 0x3FF0000000000000;
  v1133 = 0x3FF0000000000000;
  v1136 = 0x3FF0000000000000;
  v371 = -1431655765 * (((unint64_t)v1124 - (unint64_t)v1123[1]) >> 3);
  *((_QWORD *)v366 + 1) = 0;
  *((_QWORD *)v367 + 1) = 0;
  *((_QWORD *)v368 + 1) = 0;
  if ((_DWORD)v371)
  {
    v372 = (char *)operator new(96 * v371);
    *(_QWORD *)v366 = v372;
    *((_QWORD *)v366 + 1) = v372;
    *((_QWORD *)v366 + 2) = &v372[96 * v371];
    v373 = (char *)operator new(4 * v371);
    *(_QWORD *)v367 = v373;
    *((_QWORD *)v367 + 1) = v373;
    *((_QWORD *)v367 + 2) = &v373[4 * v371];
    LODWORD(v1152[0]) = -1;
    sub_20EDDCBD0((uint64_t)v368, v371, (const float *)v1152);
  }
  v374 = v1096;
  v375 = v1097;
  if (v1096 != v1097)
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)__pe = _Q0;
    while (1)
    {
      v377 = (char *)v1102 + 32 * *v374;
      v378 = *(int8x16_t **)v377;
      v379 = (double *)*((_QWORD *)v377 + 2);
      *(_QWORD *)&_Q3.f64[0] = v378->i64[0];
      v380 = v379[1];
      v381.f64[1] = v1109.f64[1];
      v382 = vaddq_f64(v1109, vmlaq_n_f64(vmulq_n_f64(v1105, *v379), v1107, v380));
      _Q1.f64[0] = *(double *)&v1110 + *(double *)&v1106 * *v379 + *(double *)&v1108 * v380;
      v383 = (float64x2_t)vextq_s8((int8x16_t)v382, (int8x16_t)_Q1, 8uLL);
      *(void **)&v384.f64[0] = __pe[0];
      *(_QWORD *)&v384.f64[1] = v378->i64[0];
      _Q1.f64[1] = v382.f64[0];
      _Q4 = vmlsq_f64(vmulq_f64(v384, v383), (float64x2_t)vextq_s8(*v378, *(int8x16_t *)__pe, 8uLL), _Q1);
      *(_QWORD *)&v386 = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(v382, *(float64x2_t *)v378, 1), _Q3, v382, 1);
      _Q3 = vmulq_f64(_Q4, _Q4);
      _D6 = _Q4.f64[1];
      __asm { FMLA            D3, D6, V4.D[1] }
      _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v386, v386);
      if (_Q3.f64[0] != 0.0)
      {
        *(_QWORD *)&v381.f64[0] = v1112;
        v388 = (float64x2_t)vextq_s8((int8x16_t)v1111, (int8x16_t)v381, 8uLL);
        *(_QWORD *)&v381.f64[1] = v1111;
        *(_QWORD *)&v383.f64[1] = vextq_s8((int8x16_t)v383, (int8x16_t)v383, 8uLL).u64[0];
        _D6 = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
        *(_QWORD *)&_Q1.f64[1] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
        _Q5 = vmlsq_f64(vmulq_f64(v383, v381), _Q1, v388);
        _Q1 = vmulq_f64(_Q4, _Q5);
        __asm { FMLA            D1, D6, V5.D[1] }
        v1070 = vmlad_n_f64(_Q1.f64[0], v386, vmlsq_f64(vmulq_laneq_f64(v382, (float64x2_t)v1111, 1), (float64x2_t)vdupq_laneq_s64((int64x2_t)v382, 1), (float64x2_t)v1111).f64[0])/ _Q3.f64[0];
        if (v1070 > 0.0)
          break;
      }
LABEL_537:
      if (++v374 == v375)
        goto LABEL_644;
    }
    v391 = *((unsigned int *)v1099 + *v374);
    v392 = v1123[1];
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1124 - (unint64_t)v1123[1]) >> 3) <= v391)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 720, (uint64_t)"track_idx < temporal_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 96, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1000;
      }
      v392 = v1123[1];
    }
    v393 = (unsigned int *)v392[3 * v391];
    if ((unsigned int *)v392[3 * v391 + 1] == v393)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 723, (uint64_t)"pose_idx < temporal_tracks_observation_indices_[track_idx].size() && \"Invalid access: Index out of range.\"", 106, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1000;
      }
      v392 = v1123[1];
      v393 = (unsigned int *)*((_QWORD *)v1123[1] + 3 * v391);
    }
    v394 = *v393;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1124 - (_QWORD)v392) >> 3) <= v391)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 720, (uint64_t)"track_idx < temporal_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 96, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1000;
      }
      v392 = v1123[1];
    }
    v396 = &v392[3 * v391];
    v395 = *v396;
    if ((unint64_t)(v396[1] - *v396) <= 0xC)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 723, (uint64_t)"pose_idx < temporal_tracks_observation_indices_[track_idx].size() && \"Invalid access: Index out of range.\"", 106, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1000;
      }
      v395 = *((_QWORD *)v1123[1] + 3 * v391);
    }
    v397 = *(unsigned int *)(v395 + 12);
    if (((v394 & 0x80000000) != 0 || (v397 & 0x80000000) != 0)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 787, (uint64_t)"maybe_first_observ_idx >= 0 && maybe_end_observ_idx >= 0", 56, (uint64_t)"Correspondences should have associated observations.", 52, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1000;
    }
    v398 = *(_QWORD *)(v989 + 400);
    v399 = *(_QWORD *)(v989 + 376);
    v400 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v989 + 384) - v399) >> 4);
    v401 = *(_QWORD *)(*(_QWORD *)(v399 + 48 * (v398 % v400)) + 8);
    v1152[0] = *(_OWORD *)(*(_QWORD *)(v401 + 24) + 16 * v394);
    v402 = *(_QWORD *)(*(_QWORD *)(v399 + 48 * ((v398 + 3) % v400)) + 8);
    v1152[1] = *(_OWORD *)(*(_QWORD *)(v402 + 24) + 16 * v397);
    v403 = *(_QWORD *)(*(_QWORD *)(v401 + 184) + 8 * v394);
    v404 = *(_QWORD *)(*(_QWORD *)(v402 + 184) + 8 * v397);
    v405 = operator new(0x20uLL);
    *(_QWORD *)&v1142.columns[1].f64[0] = v405 + 2;
    v406 = v1152[1];
    *v405 = v1152[0];
    v405[1] = v406;
    *(_QWORD *)&v1142.columns[0].f64[0] = v405;
    *(_QWORD *)&v1142.columns[0].f64[1] = v405 + 2;
    v407 = operator new(0x10uLL);
    *(_QWORD *)&v1148.columns[1].f64[0] = v407 + 2;
    *v407 = v403;
    v407[1] = v404;
    *(_QWORD *)&v1148.columns[0].f64[0] = v407;
    *(_QWORD *)&v1148.columns[0].f64[1] = v407 + 2;
    v408 = operator new(0x10uLL);
    *(_QWORD *)&v1151.f64[0] = v408 + 2;
    *v408 = v1129;
    v408[1] = &v1105;
    v1150[0] = v408;
    v1150[1] = v408 + 2;
    v409 = (char *)operator new(0x10uLL);
    v1141 = v409 + 16;
    *(_QWORD *)v409 = v1059;
    *((_QWORD *)v409 + 1) = v1059;
    v1139 = v409;
    v1140 = v409 + 16;
    v410 = vmulq_n_f64(*(float64x2_t *)v378, v1070);
    v1138 = v1070;
    *(float64x2_t *)v1137 = v410;
    v1127 = 0uLL;
    v1128 = 0;
    memset(v1153, 0, 40);
    memset(v1152, 0, sizeof(v1152));
    if ((sub_20F0BBA10(&v1142, &v1148, (uint64_t *)v1150, &v1139, (__int128 *)v1137, (uint64_t)&v1127, (uint64_t)v1152, 5, 0.0005, v1070, v411, v412, v413, v414) & 1) == 0)goto LABEL_612;
    if (v1088 == v1087
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 866, (uint64_t)"pose_idx < tracks_structures_.size() && \"Invalid access: Index out of range.\"", 77, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| v1091 == v1090&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 869, (uint64_t)"pose_idx < structure_to_track_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_1002:
      abort();
    }
    if (v1094 == v1093)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 872, (uint64_t)"pose_idx < track_to_structure_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1002;
      }
      v415 = *v1093;
      if (v391 >= (v1093[1] - *v1093) >> 2)
        goto LABEL_567;
LABEL_562:
      if ((*(_DWORD *)(v415 + 4 * v391) & 0x80000000) == 0)
      {
LABEL_569:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 878, (uint64_t)"track_to_structure_index_mappping_[pose_idx][track_idx] < 0 && \"Track is already assigned to an existing structure.\"", 116, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1002;
        }
      }
    }
    else
    {
      v415 = *v1093;
      if (v391 < (v1093[1] - *v1093) >> 2)
        goto LABEL_562;
LABEL_567:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 875, (uint64_t)"track_idx < track_to_structure_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 104, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1002;
      }
      if ((*(_DWORD *)(*v1093 + 4 * v391) & 0x80000000) == 0)
        goto LABEL_569;
    }
    v416 = v1087;
    v418 = *(_OWORD **)v1087;
    v417 = (_OWORD *)*((_QWORD *)v1087 + 1);
    v419 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v417 - *(_QWORD *)v1087) >> 5);
    if (v419 != (uint64_t)(v1090[1] - *v1090) >> 2)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 882, (uint64_t)"tracks_structures_[pose_idx].size() == structure_to_track_index_mappping_[pose_idx].size() && \"Size mismatch.\"", 110, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_1002;
      }
      v416 = v1087;
      v418 = *(_OWORD **)v1087;
      v417 = (_OWORD *)*((_QWORD *)v1087 + 1);
      v419 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v417 - *(_QWORD *)v1087) >> 5);
    }
    *(_DWORD *)(*v1093 + 4 * v391) = v419;
    v420 = v416[2];
    if ((unint64_t)v417 >= v420)
    {
      v425 = v419 + 1;
      if (v419 + 1 > 0x2AAAAAAAAAAAAAALL)
        sub_20E867F44();
      v426 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v420 - (_QWORD)v418) >> 5);
      if (2 * v426 > v425)
        v425 = 2 * v426;
      if (v426 >= 0x155555555555555)
        v427 = 0x2AAAAAAAAAAAAAALL;
      else
        v427 = v425;
      if (v427)
      {
        if (v427 > 0x2AAAAAAAAAAAAAALL)
          goto LABEL_1003;
        v428 = (char *)operator new(96 * v427);
      }
      else
      {
        v428 = 0;
      }
      v429 = &v428[96 * v419];
      *(_OWORD *)v429 = v1127;
      _Q1 = (float64x2_t)v1152[0];
      *(_OWORD *)(v429 + 40) = v1152[1];
      v430 = v1153[1];
      *(_OWORD *)(v429 + 56) = v1153[0];
      *(_OWORD *)(v429 + 72) = v430;
      *((_QWORD *)v429 + 2) = v1128;
      *((_QWORD *)v429 + 11) = *(_QWORD *)&v1153[2];
      *(float64x2_t *)(v429 + 24) = _Q1;
      v431 = v429;
      if (v417 != v418)
      {
        do
        {
          v432 = *(v417 - 6);
          *((_QWORD *)v431 - 10) = *((_QWORD *)v417 - 10);
          *((_OWORD *)v431 - 6) = v432;
          v433 = *(_OWORD *)((char *)v417 - 40);
          _Q1 = *(float64x2_t *)((char *)v417 - 24);
          v434 = *((_QWORD *)v417 - 1);
          *(_OWORD *)(v431 - 56) = *(_OWORD *)((char *)v417 - 56);
          *((_QWORD *)v431 - 1) = v434;
          *(float64x2_t *)(v431 - 24) = _Q1;
          *(_OWORD *)(v431 - 40) = v433;
          *(_OWORD *)(v431 - 72) = *(_OWORD *)((char *)v417 - 72);
          v431 -= 96;
          v417 -= 6;
        }
        while (v417 != v418);
        v418 = (_OWORD *)*v416;
      }
      v424 = v429 + 96;
      *v416 = v431;
      v416[1] = v429 + 96;
      v416[2] = &v428[96 * v427];
      if (v418)
        operator delete(v418);
    }
    else
    {
      *v417 = v1127;
      *((_QWORD *)v417 + 2) = v1128;
      v421 = *(_QWORD *)&v1153[2];
      v422 = v1153[1];
      *(_OWORD *)((char *)v417 + 56) = v1153[0];
      _Q1.f64[1] = *((float64_t *)&v1152[1] + 1);
      v423 = v1152[0];
      *(_OWORD *)((char *)v417 + 40) = v1152[1];
      *(_OWORD *)((char *)v417 + 72) = v422;
      *((_QWORD *)v417 + 11) = v421;
      *(_OWORD *)((char *)v417 + 24) = v423;
      v424 = (char *)(v417 + 6);
    }
    v416[1] = v424;
    v435 = v1090;
    v437 = (char *)v1090[1];
    v436 = v1090[2];
    if ((unint64_t)v437 < v436)
    {
      *(_DWORD *)v437 = v391;
      v438 = (uint64_t)(v437 + 4);
      goto LABEL_611;
    }
    v439 = (char *)*v1090;
    v440 = (uint64_t)&v437[-*v1090];
    v441 = v440 >> 2;
    v442 = (v440 >> 2) + 1;
    if (v442 >> 62)
      sub_20E867F44();
    v443 = v436 - (_QWORD)v439;
    if (v443 >> 1 > v442)
      v442 = v443 >> 1;
    v444 = (unint64_t)v443 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v442;
    if (v444)
    {
      if (v444 >> 62)
LABEL_1003:
        sub_20E877A38();
      v445 = operator new(4 * v444);
      v446 = &v445[4 * v441];
      *v446 = v391;
      v438 = (uint64_t)(v446 + 1);
      v447 = v437 - v439;
      if (v437 == v439)
        goto LABEL_609;
LABEL_603:
      v448 = v447 - 4;
      if (v448 < 0x2C)
        goto LABEL_1011;
      if ((unint64_t)(v437 - &v445[v440]) < 0x20)
        goto LABEL_1011;
      v449 = (v448 >> 2) + 1;
      v450 = 4 * (v449 & 0x7FFFFFFFFFFFFFF8);
      v451 = &v437[-v450];
      v446 = (_DWORD *)((char *)v446 - v450);
      v452 = (float64x2_t *)&v445[4 * v441 - 16];
      v453 = (float64x2_t *)(v437 - 16);
      v454 = v449 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        _Q1 = v453[-1];
        v455 = *v453;
        v452[-1] = _Q1;
        *v452 = v455;
        v452 -= 2;
        v453 -= 2;
        v454 -= 8;
      }
      while (v454);
      v437 = v451;
      if (v449 != (v449 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_1011:
        do
        {
          v456 = *((_DWORD *)v437 - 1);
          v437 -= 4;
          *--v446 = v456;
        }
        while (v437 != v439);
      }
    }
    else
    {
      v445 = 0;
      v446 = (_DWORD *)(4 * v441);
      *(_DWORD *)(4 * v441) = v391;
      v438 = 4 * v441 + 4;
      v447 = v437 - v439;
      if (v437 != v439)
        goto LABEL_603;
    }
LABEL_609:
    *v435 = v446;
    v435[1] = v438;
    v435[2] = &v445[4 * v444];
    if (v439)
      operator delete(v439);
LABEL_611:
    v435[1] = v438;
    v409 = (char *)v1139;
    if (v1139)
LABEL_612:
      operator delete(v409);
    if (v1150[0])
      operator delete(v1150[0]);
    if (*(_QWORD *)&v1148.columns[0].f64[0])
      operator delete(*(void **)&v1148.columns[0].f64[0]);
    if (*(_QWORD *)&v1142.columns[0].f64[0])
      operator delete(*(void **)&v1142.columns[0].f64[0]);
    goto LABEL_537;
  }
LABEL_644:
  v471 = v989;
  v964 = *(float64x2_t **)(v989 + 224);
  v472 = v1087;
  if (v1088 == v1087)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 929, (uint64_t)"pose_idx < tracks_structures_.size() && \"Invalid access: Index out of range.\"", 77, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_1000:
      abort();
    }
    v472 = v1087;
    v471 = v989;
  }
  v473 = -1431655765 * ((v472[1] - *v472) >> 5);
  v1140 = 0;
  v1139 = 0;
  v1141 = 0;
  v1137[1] = 0;
  v1137[0] = 0;
  v1138 = 0.0;
  if ((_DWORD)v473)
  {
    v1139 = operator new(8 * v473);
    v1140 = v1139;
    v1141 = (char *)v1139 + 8 * v473;
    v1137[0] = operator new(8 * v473);
    v1137[1] = v1137[0];
    *(_QWORD *)&v1138 = (char *)v1137[0] + 8 * v473;
    v474 = (char *)operator new(40 * v473);
    bzero(v474, 40 * ((40 * v473 - 40) / 0x28uLL) + 40);
    v475 = &v474[40 * ((40 * v473 - 40) / 0x28uLL) + 40];
  }
  else
  {
    v475 = 0;
    v474 = 0;
  }
  v963 = v471 + 1272;
  v1134 = 0u;
  v1135 = 0u;
  v1132 = 0;
  v1130 = 0u;
  memset(v1131, 0, sizeof(v1131));
  *(_OWORD *)&v1129[8] = 0u;
  *(_QWORD *)v1129 = 0x3FF0000000000000;
  v1131[0] = 0x3FF0000000000000;
  v1133 = 0x3FF0000000000000;
  v1136 = 0x3FF0000000000000;
  v988 = v474;
  __sz = v475 - v474;
  v961 = v471 + 472;
  v476 = (v475 - v474) / 40;
  v965 = 0;
  v962 = 8 * v476;
  v976 = vcvtpd_u64_f64(-11.5129255 / log(0.0));
  v975 = v476;
  if (v476 <= 1)
    v478 = 1;
  else
    v478 = (v475 - v474) / 40;
  v980 = v478;
  v977 = (double)v476;
  v978 = ((double)v476 + 3.0) * (((double)v476 + 2.0) * ((double)v476 + 2.0));
  v973 = (int64x2_t)xmmword_2102DD520;
  v967 = 0u;
  v968 = 0u;
  v974 = (int64x2_t)xmmword_21030D320;
  v971 = 0.0;
  v972 = 0u;
  v966 = 0;
  v969 = 0.0;
  v970 = 0x3FF0000000000000;
  v991 = 1;
  v981 = v475;
  v982 = v473;
LABEL_657:
  if (v473)
  {
    for (i8 = 0; i8 != v473; ++i8)
    {
      if (v1088 == v1087)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 918, (uint64_t)"pose_idx < tracks_structures_.size() && \"Invalid access: Index out of range.\"", 77, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v509 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v509 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v510 = qword_254A6DE40;
          for (i9 = qword_254A6DE48; v510 != i9; v510 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v510)(*(_QWORD *)(v510 + 8), "pose_idx < tracks_structures_.size() && \"Invalid access: Index out of range.\"", 77, "", 0);
        }
        v512 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v512 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
LABEL_985:
          abort();
        qword_254A6DE58(unk_254A6DE60, "pose_idx < tracks_structures_.size() && \"Invalid access: Index out of range.\"", 77, "", 0);
        v505 = *(_OWORD **)v1087;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v1087 + 1) - *(_QWORD *)v1087) >> 5) > i8)
        {
LABEL_662:
          v506 = v1090;
          if (v1091 != v1090)
            goto LABEL_663;
          goto LABEL_681;
        }
      }
      else
      {
        v505 = *(_OWORD **)v1087;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v1087 + 1) - *(_QWORD *)v1087) >> 5) > i8)
          goto LABEL_662;
      }
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 921, (uint64_t)"structure_idx < tracks_structures_[pose_idx].size() && \"Invalid access: Index out of range.\"", 92, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v513 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v513 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v514 = qword_254A6DE40;
        for (i10 = qword_254A6DE48; v514 != i10; v514 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v514)(*(_QWORD *)(v514 + 8), "structure_idx < tracks_structures_[pose_idx].size() && \"Invalid access: Index out of range.\"", 92, "", 0);
      }
      v516 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v516 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
        goto LABEL_985;
      qword_254A6DE58(unk_254A6DE60, "structure_idx < tracks_structures_[pose_idx].size() && \"Invalid access: Index out of range.\"", 92, "", 0);
      v505 = *(_OWORD **)v1087;
      v506 = v1090;
      if (v1091 != v1090)
      {
LABEL_663:
        v508 = v506;
        v507 = *v506;
        if (i8 < (v508[1] - v507) >> 2)
          goto LABEL_697;
LABEL_689:
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 897, (uint64_t)"structure_idx < structure_to_track_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 108, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v521 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v521 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v522 = qword_254A6DE40;
          for (i11 = qword_254A6DE48; v522 != i11; v522 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v522)(*(_QWORD *)(v522 + 8), "structure_idx < structure_to_track_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 108, "", 0);
        }
        v524 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v524 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_986;
        qword_254A6DE58(unk_254A6DE60, "structure_idx < structure_to_track_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 108, "", 0);
        v507 = *v1090;
        goto LABEL_697;
      }
LABEL_681:
      sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 894, (uint64_t)"pose_idx < structure_to_track_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v517 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v517 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68 || byte_254A6DE70)
      {
        v518 = qword_254A6DE40;
        for (i12 = qword_254A6DE48; v518 != i12; v518 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v518)(*(_QWORD *)(v518 + 8), "pose_idx < structure_to_track_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, "", 0);
      }
      v520 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
      if ((v520 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
      {
        __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DE78);
      }
      if (!byte_254A6DE68)
LABEL_986:
        abort();
      qword_254A6DE58(unk_254A6DE60, "pose_idx < structure_to_track_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, "", 0);
      v507 = *v1090;
      if (i8 >= (uint64_t)(v1090[1] - *v1090) >> 2)
        goto LABEL_689;
LABEL_697:
      v525 = *(unsigned int *)(v507 + 4 * i8);
      v526 = (char *)v1123[1];
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1124 - (unint64_t)v1123[1]) >> 3) <= v525)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 720, (uint64_t)"track_idx < temporal_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 96, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v527 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v527 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v528 = qword_254A6DE40;
          for (i13 = qword_254A6DE48; v528 != i13; v528 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v528)(*(_QWORD *)(v528 + 8), "track_idx < temporal_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 96, "", 0);
        }
        v530 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v530 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
LABEL_981:
          abort();
        qword_254A6DE58(unk_254A6DE60, "track_idx < temporal_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 96, "", 0);
        v526 = (char *)v1123[1];
      }
      v532 = &v526[24 * v525];
      v531 = *(_QWORD *)v532;
      v533 = v991;
      if (v991 >= (uint64_t)(*((_QWORD *)v532 + 1) - *(_QWORD *)v532) >> 2)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 723, (uint64_t)"pose_idx < temporal_tracks_observation_indices_[track_idx].size() && \"Invalid access: Index out of range.\"", 106, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v534 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v534 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v535 = qword_254A6DE40;
          for (i14 = qword_254A6DE48; v535 != i14; v535 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v535)(*(_QWORD *)(v535 + 8), "pose_idx < temporal_tracks_observation_indices_[track_idx].size() && \"Invalid access: Index out of range.\"", 106, "", 0);
        }
        v537 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v537 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_981;
        qword_254A6DE58(unk_254A6DE60, "pose_idx < temporal_tracks_observation_indices_[track_idx].size() && \"Invalid access: Index out of range.\"", 106, "", 0);
        v531 = *((_QWORD *)v1123[1] + 3 * v525);
        v533 = v991;
      }
      v538 = *(unsigned int *)(v531 + 4 * v533);
      if ((v538 & 0x80000000) != 0)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 883, (uint64_t)"maybe_curr_observ_idx >= 0", 26, (uint64_t)"Triangulated tracks should have associated observations in all poses.", 69, (void (*)(void **))sub_21023DDB0);
        v539 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v539 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v540 = qword_254A6DE40;
          for (i15 = qword_254A6DE48; v540 != i15; v540 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v540)(*(_QWORD *)(v540 + 8), "maybe_curr_observ_idx >= 0", 26, "Triangulated tracks should have associated observations in all poses.", 69);
        }
        v542 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v542 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_981;
        qword_254A6DE58(unk_254A6DE60, "maybe_curr_observ_idx >= 0", 26, "Triangulated tracks should have associated observations in all poses.", 69);
      }
      v543 = v1119;
      v544 = v991;
      if (0xAAAAAAAAAAAAAAABLL * (v1120 - v1119) <= v991)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1009, (uint64_t)"pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v545 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v545 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v546 = qword_254A6DE40;
          for (i16 = qword_254A6DE48; v546 != i16; v546 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v546)(*(_QWORD *)(v546 + 8), "pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, "", 0);
        }
        v548 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v548 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
LABEL_980:
          abort();
        qword_254A6DE58(unk_254A6DE60, "pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, "", 0);
        v543 = v1119;
        v544 = v991;
      }
      v550 = &v543[3 * v544];
      v549 = *v550;
      if (v538 >= (v550[1] - *v550) >> 2)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1012, (uint64_t)"observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v551 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v551 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v552 = qword_254A6DE40;
          for (i17 = qword_254A6DE48; v552 != i17; v552 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v552)(*(_QWORD *)(v552 + 8), "observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, "", 0);
        }
        v554 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v554 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_980;
        qword_254A6DE58(unk_254A6DE60, "observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, "", 0);
        v549 = v1119[3 * v991];
      }
      v555 = *(unsigned int *)(v549 + 4 * v538);
      if ((v555 & 0x80000000) != 0)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 889, (uint64_t)"curr_bearing_idx_maybe >= 0", 27, (uint64_t)"Matched observations should have associated bearing data structures.", 68, (void (*)(void **))sub_21023DDB0);
        v556 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v556 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v557 = qword_254A6DE40;
          for (i18 = qword_254A6DE48; v557 != i18; v557 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v557)(*(_QWORD *)(v557 + 8), "curr_bearing_idx_maybe >= 0", 27, "Matched observations should have associated bearing data structures.", 68);
        }
        v559 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v559 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_980;
        qword_254A6DE58(unk_254A6DE60, "curr_bearing_idx_maybe >= 0", 27, "Matched observations should have associated bearing data structures.", 68);
      }
      v560 = v1113;
      v561 = v991;
      if (0xAAAAAAAAAAAAAAABLL * ((v1114 - (_BYTE *)v1113) >> 3) <= v991)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1022, (uint64_t)"pose_idx < observation_bearings_.size() && \"Invalid access: Index out of range.\"", 80, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v562 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v562 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v563 = qword_254A6DE40;
          for (i19 = qword_254A6DE48; v563 != i19; v563 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v563)(*(_QWORD *)(v563 + 8), "pose_idx < observation_bearings_.size() && \"Invalid access: Index out of range.\"", 80, "", 0);
        }
        v565 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v565 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
LABEL_983:
          abort();
        qword_254A6DE58(unk_254A6DE60, "pose_idx < observation_bearings_.size() && \"Invalid access: Index out of range.\"", 80, "", 0);
        v560 = v1113;
        v561 = v991;
      }
      v567 = &v560[3 * v561];
      v566 = *v567;
      if (0xAAAAAAAAAAAAAAABLL * ((v567[1] - *v567) >> 4) <= v555)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 1025, (uint64_t)"bearing_idx < observation_bearings_[pose_idx].size() && \"Invalid access: Index out of range.\"", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v568 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v568 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v569 = qword_254A6DE40;
          for (i20 = qword_254A6DE48; v569 != i20; v569 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v569)(*(_QWORD *)(v569 + 8), "bearing_idx < observation_bearings_[pose_idx].size() && \"Invalid access: Index out of range.\"", 93, "", 0);
        }
        v571 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v571 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_983;
        qword_254A6DE58(unk_254A6DE60, "bearing_idx < observation_bearings_[pose_idx].size() && \"Invalid access: Index out of range.\"", 93, "", 0);
        v566 = v1113[3 * v991];
      }
      v503 = &v988[40 * i8];
      v504 = v566 + 48 * v555;
      *(_QWORD *)v503 = &v505[6 * i8];
      *((_QWORD *)v503 + 1) = (char *)&v505[6 * i8 + 1] + 8;
      *((_QWORD *)v503 + 2) = v504;
      *((_QWORD *)v503 + 3) = v504 + 16;
      *((_QWORD *)v503 + 4) = v1129;
    }
  }
  __pf = v964[1].f64[0];
  v572 = v963 + 72 * v991;
  v1071 = v964[3].f64[0];
  v1028 = *v964;
  v1032 = v964[2];
  v1060 = v964[5].f64[0];
  v1041 = *(double *)(v572 + 16);
  v1035 = v964[4];
  v1039 = *(float64x2_t *)v572;
  v1047 = *(double *)(v572 + 40);
  *(_OWORD *)__lena = *(_OWORD *)(v572 + 24);
  v1053 = *(double *)(v572 + 64);
  v1050 = *(float64x2_t *)(v572 + 48);
  v1140 = v1139;
  v1137[1] = v1137[0];
  memset(v1152, 0, sizeof(v1152));
  memset(v1153, 0, sizeof(v1153));
  v1154 = 0;
  if (v975 >= 2)
  {
    if (v475 == v988)
    {
      v574 = 0;
      v580 = 0;
    }
    else
    {
      if (v975 >= 0x666666666666667)
        sub_20E867F44();
      v573 = operator new(__sz);
      v574 = (float64x2_t **)v573;
      v575 = 0;
      do
      {
        v576 = &v988[v575];
        v577 = (char *)&v573[(unint64_t)v575 / 8];
        v578 = *(_OWORD *)&v988[v575 + 16];
        *(_OWORD *)v577 = *(_OWORD *)&v988[v575];
        *((_OWORD *)v577 + 1) = v578;
        *((_QWORD *)v577 + 4) = *(_QWORD *)&v988[v575 + 32];
        v575 += 40;
      }
      while (v576 + 40 != v475);
      v579 = v575 / 40;
      v580 = (float64x2_t **)&v573[5 * (v575 / 40)];
      if (v575)
      {
        v581 = 0;
        v582 = v573 + 4;
        v583 = 12345;
        do
        {
          v583 = 214013 * v583 + 2531011;
          v584 = (char *)&v573[5 * ((HIWORD(v583) & 0x7FFF) % v579) + 5 * v581];
          v585 = *(_OWORD *)v584;
          *(_OWORD *)v584 = *((_OWORD *)v582 - 2);
          *((_OWORD *)v582 - 2) = v585;
          v586 = *((_OWORD *)v584 + 1);
          *((_OWORD *)v584 + 1) = *((_OWORD *)v582 - 1);
          *((_OWORD *)v582 - 1) = v586;
          v587 = *((_QWORD *)v584 + 4);
          *((_QWORD *)v584 + 4) = *v582;
          *v582 = v587;
          v582 += 5;
          ++v581;
          --v579;
        }
        while (v579);
        v979 = 0;
        goto LABEL_828;
      }
    }
    v979 = 1;
    v583 = 12345;
LABEL_828:
    v588 = 0;
    v990 = 0;
    _V22.D[1] = v1032.f64[1];
    _V21.D[1] = v1035.f64[1];
    _V3.D[1] = v1039.f64[1];
    _V5.D[1] = __lena[1];
    v593 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1028, v1039.f64[0]), v1032, v1039, 1), v1035, v1041);
    _D19 = v1071;
    __asm { FMLA            D1, D19, V3.D[1] }
    _D20 = v1060;
    v597 = _D1 + v1060 * v1041;
    *((_QWORD *)&_Q7 + 1) = *(_QWORD *)&v1050.f64[1];
    _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1028, *(double *)__lena), v1032, *(float64x2_t *)__lena, 1), v1035, v1047);
    __asm { FMLA            D2, D19, V5.D[1] }
    _D2 = _D2 + v1060 * v1047;
    _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1028, v1050.f64[0]), v1032, v1050, 1), v1035, v1053);
    __asm { FMLA            D5, D19, V7.D[1] }
    _D5 = _D5 + v1060 * v1053;
    v1054 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v593, v1028.f64[0]), _Q3, v1032.f64[0]), _Q4, v1035.f64[0]);
    v1040 = vmlad_n_f64(vmlad_n_f64(v597 * v1028.f64[0], _D2, v1032.f64[0]), _D5, v1035.f64[0]);
    v1051 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v593, v1028, 1), _Q3, v1032, 1), _Q4, v1035, 1);
    __asm
    {
      FMLA            D6, D2, V22.D[1]
      FMLA            D6, D5, V21.D[1]
    }
    __lenb = _D6;
    v607 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v593, __pf), _Q3, v1071), _Q4, v1060);
    v1048 = v607;
    v607.f64[0] = v597 * __pf + _D2 * v1071 + _D5 * v1060;
    *(float64x2_t *)v1042 = v607;
    _Q6 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1028, v593.f64[0]), v1032, _Q3.f64[0]), v1035, _Q4.f64[0]);
    *(double *)&_Q7 = vmlad_n_f64(vmlad_n_f64(__pf * v593.f64[0], v1071, _Q3.f64[0]), v1060, _Q4.f64[0]);
    v609 = (int8x16_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v1028, v593, 1), v1032, _Q3, 1), v1035, _Q4, 1);
    __asm
    {
      FMLA            D17, D19, V3.D[1]
      FMLA            D17, D20, V4.D[1]
    }
    v612 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1028, v597), v1032, _D2), v1035, _D5);
    v1033 = _Q7;
    v1036 = _Q6.f64[0];
    v1016 = (float64x2_t)vdupq_lane_s64(_Q7, 0);
    v1018 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q6, 1);
    v1011 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v609, 1);
    v1013 = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
    v1026 = *(double *)&_D17;
    v1029 = *(double *)v609.i64;
    v1007 = vextq_s8(v609, v609, 8uLL).u64[0];
    v1009 = (float64x2_t)vdupq_lane_s64(_D17, 0);
    v1021 = __pf * v597 + v1071 * _D2 + v1060 * _D5;
    v1023 = *(double *)v612.i64;
    v1003 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1021, 0);
    v1005 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v612, 1);
    _Q0 = (float64x2_t)vextq_s8(v612, v612, 8uLL);
    v1001 = _Q0.f64[0];
    v987 = -1;
    while (1)
    {
      v614 = 0xCCCCCCCCCCCCCCCDLL * (v580 - v574);
      if (v614 <= 1)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/DataPointCorrespondenceUtil.h", 92, (uint64_t)"correspondences.size() >= SampleSize", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v615 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v615 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v616 = qword_254A6DE40;
          for (i21 = qword_254A6DE48; v616 != i21; v616 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v616)(*(_QWORD *)(v616 + 8), "correspondences.size() >= SampleSize", 36, "", 0);
        }
        v618 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v618 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          abort();
        qword_254A6DE58(unk_254A6DE60, "correspondences.size() >= SampleSize", 36, "", 0);
        v614 = 0xCCCCCCCCCCCCCCCDLL * (v580 - v574);
      }
      v583 = 214013 * v583 + 2531011;
      v619 = (HIWORD(v583) & 0x7FFF) % v614;
      do
      {
        v583 = 214013 * v583 + 2531011;
        v620 = (HIWORD(v583) & 0x7FFF) % v614;
      }
      while (v619 == v620);
      v621 = &v574[5 * v619];
      v622 = v621[2];
      v623 = v621[4];
      v624 = &v574[5 * v620];
      v625 = (double *)v624[2];
      v626 = v624[4];
      _Q5.f64[0] = v623[1].f64[0];
      _Q18 = *v623;
      v629 = v623[3].f64[0];
      _Q19 = v623[2];
      v631 = v623[5].f64[0];
      _Q4 = v623[4];
      _D13 = __lenb;
      __asm { FMLA            D0, D13, V18.D[1] }
      v634 = _Q0.f64[0] + *(double *)v1042 * _Q5.f64[0];
      __asm { FMLA            D0, D13, V19.D[1] }
      v635 = _Q0.f64[0] + *(double *)v1042 * v629;
      __asm { FMLA            D0, D13, V4.D[1] }
      v636 = _Q0.f64[0] + *(double *)v1042 * v631;
      _Q2.f64[0] = v626[1].f64[0];
      _Q7 = *v626;
      _Q16 = v626[2];
      _Q0.f64[0] = v626[5].f64[0];
      _Q1 = v626[4];
      _Q25.f64[0] = v623[7].f64[0];
      _Q26 = v623[6];
      v642 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q26.f64[0]), v1051, _Q26, 1), v1048, _Q25.f64[0]);
      __asm { FMLA            D29, D13, V26.D[1] }
      _Q25.f64[0] = _D29 + *(double *)v1042 * _Q25.f64[0];
      *(float64x2_t *)__pg = _Q25;
      _Q25.f64[0] = v626[7].f64[0];
      _Q26 = v626[6];
      v645 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q26.f64[0]), v1051, _Q26, 1), v1048, _Q25.f64[0]);
      __asm { FMLA            D29, D13, V26.D[1] }
      _Q25.f64[0] = _D29 + *(double *)v1042 * _Q25.f64[0];
      v1072 = _Q25;
      _Q25.f64[0] = v622->f64[1];
      __asm { FMLA            D22, D13, V7.D[1] }
      v648 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q4.f64[0]), v1051, _Q4, 1), v1048, v631), vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, v623->f64[0]), v1051, *v623, 1), v1048, _Q5.f64[0]), v622->f64[0]), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q19.f64[0]), v1051, _Q19, 1), v1048, v629), _Q25.f64[0]));
      v1061 = (int8x16_t)v648;
      v992 = v626[3].f64[0];
      v994 = _Q0;
      v648.f64[0] = v636 + v634 * v622->f64[0] + v635 * _Q25.f64[0];
      v997 = v648;
      _Q20.f64[0] = v625[1];
      _Q0 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q1.f64[0]), v1051, _Q1, 1), v1048, _Q0.f64[0]), vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, v626->f64[0]), v1051, *v626, 1), v1048, _Q2.f64[0]), *v625), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q16.f64[0]), v1051, _Q16, 1), v1048, v992), _Q20.f64[0]));
      __asm { FMLA            D23, D13, V16.D[1] }
      v651 = (_D22 + *(double *)v1042 * _Q2.f64[0]) * *v625 + (_D23 + *(double *)v1042 * v992) * _Q20.f64[0];
      __asm { FMLA            D23, D13, V1.D[1] }
      _Q6.f64[0] = _D23 + *(double *)v1042 * v626[5].f64[0] + v651;
      v653 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v623, (int64x2_t)_Q19);
      _Q18 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v623, (int64x2_t)_Q19);
      _Q5.f64[1] = v629;
      _Q19 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v653, v1036), v1018, _Q18), v1016, _Q5);
      _Q17 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v653, v1029), v1011, _Q18), v1009, _Q5);
      _Q22 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v653, v1023), v1005, _Q18), v1003, _Q5);
      __asm
      {
        FMLA            D5, D25, V19.D[1]
        FMLA            D18, D25, V17.D[1]
      }
      _D31 = v1013;
      __asm
      {
        FMLA            D17, D31, V4.D[1]
        FMLA            D19, D25, V22.D[1]
      }
      _D14 = v1007;
      __asm { FMLA            D22, D14, V4.D[1] }
      _D9 = v1001;
      __asm { FMLA            D23, D9, V4.D[1] }
      _Q25.f64[1] = *((float64_t *)&v1033 + 1);
      _Q5.f64[0] = _Q22.f64[0] + v631 * v1026 + _Q18.f64[0];
      *(_QWORD *)&_Q18.f64[1] = v1061.i64[1];
      v662 = _D23 + v631 * v1021 + _Q19.f64[0];
      _Q19.f64[1] = v997.f64[1];
      __asm
      {
        FMLA            D17, D5, V0.D[1]
        FMLA            D4, D5, V18.D[1]
      }
      v664 = _Q6;
      _Q5.f64[0] = _Q17.f64[0] + v662 * _Q6.f64[0];
      v665 = _Q4.f64[0] + v662 * v997.f64[0];
      v666 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v626, (int64x2_t)_Q16);
      _Q7 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v626, (int64x2_t)_Q16);
      _Q2.f64[1] = v992;
      _Q16 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v666, v1036), v1018, _Q7), v1016, _Q2);
      _Q6 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v666, v1029), v1011, _Q7), v1009, _Q2);
      _Q4 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v666, v1023), v1005, _Q7), v1003, _Q2);
      __asm
      {
        FMLA            D2, D20, V16.D[1]
        FMLA            D7, D20, V6.D[1]
        FMLA            D6, D31, V1.D[1]
        FMLA            D16, D20, V4.D[1]
        FMLA            D4, D14, V1.D[1]
        FMLA            D17, D9, V1.D[1]
      }
      _Q20.f64[1] = v994.f64[1];
      _Q6 = _Q0;
      _Q2.f64[0] = _Q4.f64[0] + v994.f64[0] * v1026 + _Q7.f64[0];
      __asm { FMLA            D1, D2, V6.D[1] }
      v672 = *v621;
      v673 = *v624;
      _Q0.f64[0] = sqrt(v665) * sqrt(_Q1.f64[0] + (_Q17.f64[0] + v994.f64[0] * v1021 + _Q16.f64[0]) * v664.f64[0]);
      _Q1.f64[0] = (*v621)[1].f64[0];
      *(float *)_Q0.f64 = _Q5.f64[0] / _Q0.f64[0];
      v674 = *(float *)_Q0.f64 <= 0.9998;
      v675 = **v624;
      v676 = vsubq_f64(**v621, v675);
      v675.f64[0] = (*v624)[1].f64[0];
      _Q0 = vsubq_f64(v676, vsubq_f64(v642, v645));
      v1148.columns[0] = (simd_double2)_Q0;
      *(_QWORD *)&v1148.columns[1].f64[0] = *(_OWORD *)&vsubq_f64(vsubq_f64(_Q1, v675), vsubq_f64(*(float64x2_t *)__pg, v1072));
      if (!v674)
        goto LABEL_857;
      *(_QWORD *)&v677.f64[0] = v1061.i64[0];
      v983 = vextq_s8(v1061, v1061, 8uLL).u64[0];
      v984 = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL);
      *(_QWORD *)&v677.f64[1] = v983;
      v985 = v664;
      v986 = _Q6.f64[0];
      v678.f64[0] = _Q6.f64[0];
      *(_QWORD *)&v678.f64[1] = v984.i64[0];
      v679 = (int8x16_t)vnegq_f64(v678);
      v1144 = &v1142;
      v1143 = (float64x2_t)vextq_s8(v679, (int8x16_t)vnegq_f64(v664), 8uLL);
      v1142.columns[0] = v677;
      v1142.columns[1] = (simd_double2)vzip1q_s64((int64x2_t)v997, (int64x2_t)v679);
      v1145.i32[0] = 0;
      v1147 = 2;
      v1150[0] = 0;
      LODWORD(v1127) = 0;
      sub_20E8BECF4();
      v680 = v1127;
      if (!(_DWORD)v1127)
      {
        v681 = operator new((8 * (int)*(double *)v1150 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        sub_20E8BECF4();
        MEMORY[0x212BC6368](v681, 0x1000C8000313F17);
        v680 = v1127;
      }
      v1147 = v680 != 0;
      v1150[0] = 0;
      if (!sub_20E8BEA4C())
      {
        v959 = operator new((8 * (int)*(double *)v1150 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        sub_20E8BEA4C();
        MEMORY[0x212BC6368](v959, 0x1000C8000313F17);
      }
      LODWORD(v1150[0]) = 0;
      sub_20E8BED2C();
      _Q16 = v645;
      v682 = v642;
      *(_QWORD *)&v683.f64[0] = v1061.i64[0];
      *(_QWORD *)&v683.f64[1] = v983;
      v684.f64[0] = v986;
      *(_QWORD *)&v685.f64[1] = v984.i64[1];
      *(_QWORD *)&v684.f64[1] = v984.i64[0];
      v686.f64[0] = v1148.columns[0].f64[1];
      v685.f64[0] = v1148.columns[0].f64[0];
      v687.f64[0] = v672[1].f64[0];
      v688 = vmlsq_lane_f64(*v672, v683, v1148.columns[0].f64[0], 0);
      v689 = vmlsq_f64(v687, v997, v685);
      v685.f64[0] = v673[1].f64[0];
      _Q6 = vmlsq_lane_f64(*v673, v684, v1148.columns[0].f64[1], 0);
      *(_QWORD *)&_Q16.f64[1] = vextq_s8((int8x16_t)_Q16, (int8x16_t)_Q16, 8uLL).u64[0];
      *(_QWORD *)&v682.f64[1] = vextq_s8((int8x16_t)v682, (int8x16_t)v682, 8uLL).u64[0];
      v690 = vsubq_f64(vaddq_f64(v689, vmlsq_f64(v685, v985, v686)), vaddq_f64(*(float64x2_t *)__pg, v1072));
      __asm { FMOV            V2.2D, #0.5 }
      v998 = (int8x16_t)vmulq_f64(vsubq_f64(vaddq_f64(v688, _Q6), vaddq_f64(v682, _Q16)), _Q2);
      _Q0 = vmulq_f64(v690, _Q2);
      v993 = _Q0;
      v995 = vextq_s8(v998, v998, 8uLL).u64[0];
      v692 = 0.0;
      v693 = 1.0;
      if ((v979 & 1) == 0)
      {
        v694 = v574;
        do
        {
          v695 = v694[1];
          v696 = v694[4];
          _Q6.f64[0] = v696[1].f64[0];
          _Q7 = *v696;
          v699 = v696[3].f64[0];
          _Q5 = v696[2];
          v701 = v696[5].f64[0];
          _Q2 = v696[4];
          _D28 = __lenb;
          v704 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, v696->f64[0]), v1051, *v696, 1), v1048, _Q6.f64[0]);
          __asm { FMLA            D3, D28, V7.D[1] }
          v706 = _D3 + *(double *)v1042 * _Q6.f64[0];
          _Q16.f64[0] = v696[7].f64[0];
          _Q17 = v696[6];
          v708 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q17.f64[0]), v1051, _Q17, 1), v1048, _Q16.f64[0]);
          __asm { FMLA            D19, D28, V17.D[1] }
          _Q16.f64[0] = _D19 + *(double *)v1042 * _Q16.f64[0];
          _Q17.f64[0] = (*v694)[1].f64[0];
          *(_QWORD *)&v710.f64[0] = v998.i64[0];
          *(_QWORD *)&v710.f64[1] = v995;
          v711 = vsubq_f64(**v694, v710);
          v712 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v696, (int64x2_t)_Q5);
          _Q7 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v696, (int64x2_t)_Q5);
          _Q6.f64[1] = v699;
          v714 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v712, v1036), v1018, _Q7), v1016, _Q6);
          _D23 = v1013;
          __asm { FMLA            D22, D23, V2.D[1] }
          v717 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v712, v1029), v1011, _Q7), v1009, _Q6);
          _D31 = v1007;
          __asm { FMLA            D24, D31, V2.D[1] }
          _D24 = _D24 + v701 * v1026;
          _Q20 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v712, v1023), v1005, _Q7), v1003, _Q6);
          _Q7.f64[0] = v1001;
          __asm { FMLA            D6, D7, V2.D[1] }
          _Q7.f64[0] = _Q6.f64[0] + v701 * v1021;
          *(_QWORD *)&_Q6.f64[0] = *(_OWORD *)&vsubq_f64(vsubq_f64(_Q17, v993), _Q16);
          _Q16 = vsubq_f64(v711, v708);
          __asm { FMLA            D17, D24, V16.D[1] }
          v723 = v693 / vmlad_n_f64(_Q17.f64[0], _Q7.f64[0], _Q6.f64[0]);
          __pi = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v714, _Q16.f64[0]), v717, _Q16, 1), _Q20, _Q6.f64[0]);
          _Q6 = vmulq_n_f64(vnegq_f64(__pi), v723 * v723);
          _Q17.f64[0] = 0.0;
          _Q17.f64[1] = v723;
          v725 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v723, v714.f64[0]), _Q17, v714, 1), _Q6, _D22 + v701 * *(double *)&v1033);
          v726 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v723, v717.f64[0]), _Q17, v717, 1), _Q6, _D24);
          v727 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v723, _Q20.f64[0]), _Q17, _Q20, 1);
          v728 = vmlaq_laneq_f64(vmulq_n_f64(v725, v695->f64[0]), v726, *v695, 1);
          v729 = vmlaq_laneq_f64(vmulq_n_f64(v725, v695[1].f64[1]), v726, *(float64x2_t *)((char *)v695 + 24), 1);
          v730 = vmlaq_laneq_f64(vmulq_n_f64(v725, v695[3].f64[0]), v726, v695[3], 1);
          __asm { FMLA            D20, D28, V5.D[1] }
          v731 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q5.f64[0]), v1051, _Q5, 1), v1048, v699);
          v732 = vmlaq_n_f64(v727, _Q6, _Q7.f64[0]);
          v733 = vmlaq_n_f64(v728, v732, v695[1].f64[0]);
          v734 = vmlaq_n_f64(v729, v732, v695[2].f64[1]);
          v735 = vmlaq_n_f64(v730, v732, v695[4].f64[0]);
          __asm { FMLA            D7, D28, V2.D[1] }
          v736 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q2.f64[0]), v1051, _Q2, 1), v1048, v701);
          _D1 = _Q7.f64[0] + *(double *)v1042 * v701;
          v738 = vmlaq_n_f64(vmlaq_f64(vmulq_n_f64(v704, v723), (float64x2_t)0, v731), v736, _Q6.f64[0]);
          v739 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_f64(v704, (float64x2_t)0), v731, v723), v736, _Q6, 1);
          v736.f64[0] = vmlad_n_f64(v706 * v723 + (_Q20.f64[0] + *(double *)v1042 * v699) * 0.0, _D1, _Q6.f64[0]);
          __asm { FMLA            D3, D1, V6.D[1] }
          v741 = vmlaq_laneq_f64(vmulq_n_f64(v733, v738.f64[0]), v734, v738, 1);
          v742 = v694[3];
          v743 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v733, v739.f64[0]), v734, v739, 1), v735, _D3);
          v744 = vaddq_f64(*v742, vmlaq_n_f64(v741, v735, v736.f64[0]));
          v745 = vaddq_f64(v742[1], v743);
          v1062 = *v694[2];
          v1073 = v723;
          v1142.columns[0] = (simd_double2)v744;
          v1142.columns[1] = (simd_double2)v745;
          sub_20E8BE3B0(&v1142, &v1148);
          _Q0 = vmlaq_n_f64(vnegq_f64(v1062), __pi, v1073);
          _D1 = v1148.columns[0].f64[1];
          __asm { FMLA            D3, D1, V0.D[1] }
          _D2 = v1148.columns[1].f64[1];
          __asm
          {
            FMLA            D1, D2, V0.D[1]
            FMLA            D2, D1, V0.D[1]
          }
          _Q0.f64[0] = 0.0;
          if (_D2 < 11.83)
            _Q0.f64[0] = 1.0;
          v692 = v692 + _Q0.f64[0];
          v694 += 5;
          v693 = 1.0;
        }
        while (v694 != v580);
      }
      ++v990;
      if (v692 > *(double *)v1152)
      {
        *(double *)v1152 = v692;
        *((_QWORD *)&v1152[1] + 1) = *(_QWORD *)&v993.f64[0];
        v751 = v998.i64[0];
        *(_QWORD *)&_Q0.f64[1] = v995;
        *(float64x2_t *)((char *)v1152 + 8) = _Q0;
        _Q0.f64[0] = v692 / v977 + sqrt((v692 + 1.0) * (v977 - v692 + 1.0) / v978) * -4.0;
        if (_Q0.f64[0] <= 0.0)
          _Q0.f64[0] = v692 / v977;
        if (_Q0.f64[0] <= 1.0)
        {
          v987 = vcvtpd_u64_f64(-11.5129255 / log(1.0 - _Q0.f64[0] * _Q0.f64[0]));
          if (v588 > 0xC6)
          {
LABEL_866:
            if (v574)
              operator delete(v574);
            v475 = v981;
            v473 = v982;
            if (!v990)
              goto LABEL_961;
            v752 = v1139;
            v1140 = v1139;
            v753 = (char *)v1137[0];
            v1137[1] = v1137[0];
            v999 = v1141;
            if (v975 <= (v1141 - (_BYTE *)v1139) >> 3)
            {
              v754 = (char *)v1139;
              *(double *)&v996 = v1138;
              if (v975 > (uint64_t)(*(_QWORD *)&v1138 - (unint64_t)v1137[0]) >> 3)
                goto LABEL_874;
LABEL_939:
              v755 = v753;
              if (v981 == v988)
                goto LABEL_656;
LABEL_878:
              v756 = 0;
              while (2)
              {
                while (2)
                {
                  v758 = (float64x2_t **)&v988[40 * v756];
                  v759 = v758[1];
                  v760 = v758[4];
                  _Q6.f64[0] = v760[1].f64[0];
                  _Q7 = *v760;
                  v763 = v760[3].f64[0];
                  _Q5 = v760[2];
                  v765 = v760[5].f64[0];
                  _Q2 = v760[4];
                  _D28 = __lenb;
                  v768 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, v760->f64[0]), v1051, *v760, 1), v1048, _Q6.f64[0]);
                  __asm { FMLA            D3, D28, V7.D[1] }
                  v770 = _D3 + *(double *)v1042 * _Q6.f64[0];
                  _Q16.f64[0] = v760[7].f64[0];
                  _Q17 = v760[6];
                  v772 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q17.f64[0]), v1051, _Q17, 1), v1048, _Q16.f64[0]);
                  __asm { FMLA            D19, D28, V17.D[1] }
                  _Q16.f64[0] = _Q19.f64[0] + *(double *)v1042 * _Q16.f64[0];
                  _Q19.f64[0] = (*v758)[1].f64[0];
                  _Q20.f64[0] = *((float64_t *)&v1152[1] + 1);
                  v773 = vsubq_f64(_Q19, _Q20);
                  v774 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v760, (int64x2_t)_Q5);
                  _Q7 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v760, (int64x2_t)_Q5);
                  _Q6.f64[1] = v763;
                  v776 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v774, v1036), v1018, _Q7), v1016, _Q6);
                  _D23 = v1013;
                  __asm { FMLA            D22, D23, V2.D[1] }
                  v779 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v774, v1029), v1011, _Q7), v1009, _Q6);
                  _D31 = v1007;
                  __asm { FMLA            D24, D31, V2.D[1] }
                  _D24 = _D24 + v765 * v1026;
                  _Q20 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v774, v1023), v1005, _Q7), v1003, _Q6);
                  _Q7.f64[0] = v1001;
                  __asm { FMLA            D6, D7, V2.D[1] }
                  _Q7.f64[0] = _Q6.f64[0] + v765 * v1021;
                  *(_QWORD *)&_Q6.f64[0] = *(_OWORD *)&vsubq_f64(v773, _Q16);
                  _Q16 = vsubq_f64(vsubq_f64(**v758, *(float64x2_t *)((char *)v1152 + 8)), v772);
                  __asm { FMLA            D17, D24, V16.D[1] }
                  v785 = 1.0 / vmlad_n_f64(_Q17.f64[0], _Q7.f64[0], _Q6.f64[0]);
                  __pj = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v776, _Q16.f64[0]), v779, _Q16, 1), _Q20, _Q6.f64[0]);
                  _Q6 = vmulq_n_f64(vnegq_f64(__pj), v785 * v785);
                  _Q17.f64[0] = 0.0;
                  _Q17.f64[1] = v785;
                  v787 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v785, v776.f64[0]), _Q17, v776, 1), _Q6, _D22 + v765 * *(double *)&v1033);
                  v788 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v785, v779.f64[0]), _Q17, v779, 1), _Q6, _D24);
                  v789 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v785, _Q20.f64[0]), _Q17, _Q20, 1);
                  v790 = vmlaq_laneq_f64(vmulq_n_f64(v787, v759->f64[0]), v788, *v759, 1);
                  v791 = vmlaq_laneq_f64(vmulq_n_f64(v787, v759[1].f64[1]), v788, *(float64x2_t *)((char *)v759 + 24), 1);
                  v792 = vmlaq_laneq_f64(vmulq_n_f64(v787, v759[3].f64[0]), v788, v759[3], 1);
                  __asm { FMLA            D20, D28, V5.D[1] }
                  v793 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q5.f64[0]), v1051, _Q5, 1), v1048, v763);
                  v794 = vmlaq_n_f64(v789, _Q6, _Q7.f64[0]);
                  v795 = vmlaq_n_f64(v790, v794, v759[1].f64[0]);
                  v796 = vmlaq_n_f64(v791, v794, v759[2].f64[1]);
                  v797 = vmlaq_n_f64(v792, v794, v759[4].f64[0]);
                  __asm { FMLA            D7, D28, V2.D[1] }
                  v798 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q2.f64[0]), v1051, _Q2, 1), v1048, v765);
                  _D1 = _Q7.f64[0] + *(double *)v1042 * v765;
                  v800 = vmlaq_n_f64(vmlaq_f64(vmulq_n_f64(v768, v785), (float64x2_t)0, v793), v798, _Q6.f64[0]);
                  v801 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_f64(v768, (float64x2_t)0), v793, v785), v798, _Q6, 1);
                  v798.f64[0] = vmlad_n_f64(v770 * v785 + (_Q20.f64[0] + *(double *)v1042 * v763) * 0.0, _D1, _Q6.f64[0]);
                  __asm { FMLA            D3, D1, V6.D[1] }
                  v803 = vmlaq_laneq_f64(vmulq_n_f64(v795, v800.f64[0]), v796, v800, 1);
                  v804 = v758[3];
                  v805 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v795, v801.f64[0]), v796, v801, 1), v797, _D3);
                  v806 = vaddq_f64(*v804, vmlaq_n_f64(v803, v797, v798.f64[0]));
                  v807 = vaddq_f64(v804[1], v805);
                  v1063 = *v758[2];
                  v1074 = v785;
                  v1142.columns[0] = (simd_double2)v806;
                  v1142.columns[1] = (simd_double2)v807;
                  sub_20E8BE3B0(&v1142, &v1148);
                  _Q0 = vmlaq_n_f64(vnegq_f64(v1063), __pj, v1074);
                  _D1 = v1148.columns[0].f64[1];
                  __asm { FMLA            D3, D1, V0.D[1] }
                  _D2 = v1148.columns[1].f64[1];
                  __asm
                  {
                    FMLA            D1, D2, V0.D[1]
                    FMLA            D2, D1, V0.D[1]
                  }
                  if (_D2 >= 11.83)
                  {
                    if (v755 < v996)
                    {
                      *(_QWORD *)v755 = v756;
                      v757 = v755 + 8;
                      v473 = v982;
                      goto LABEL_880;
                    }
                    v818 = (char *)v1137[0];
                    v819 = v755 - (char *)v1137[0];
                    v820 = (v755 - (char *)v1137[0]) >> 3;
                    v821 = v820 + 1;
                    if ((unint64_t)(v820 + 1) >> 61)
                      goto LABEL_994;
                    if ((v996 - (char *)v1137[0]) >> 2 > v821)
                      v821 = (v996 - (char *)v1137[0]) >> 2;
                    if ((unint64_t)(v996 - (char *)v1137[0]) >= 0x7FFFFFFFFFFFFFF8)
                      v822 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v822 = v821;
                    if (v822)
                    {
                      if (v822 >> 61)
                        goto LABEL_993;
                      v823 = operator new(8 * v822);
                      v824 = &v823[8 * v820];
                      *v824 = v756;
                      v757 = v824 + 1;
                      v825 = v755 - v818;
                      if (v755 != v818)
                      {
LABEL_894:
                        v826 = v825 - 8;
                        if (v826 < 0x168
                          || (v840 = (v755 - 8 - v818) & 0xFFFFFFFFFFFFFFF8, &v823[v819 - 8 - v840] > &v823[v819 - 8])
                          || &v755[-v840 - 8] > v755 - 8
                          || (unint64_t)(v755 - v823 - v819) < 0x20)
                        {
                          v827 = v755;
                          v473 = v982;
                        }
                        else
                        {
                          v841 = (v826 >> 3) + 1;
                          v842 = 8 * (v841 & 0x3FFFFFFFFFFFFFFCLL);
                          v827 = &v755[-v842];
                          v824 = (_QWORD *)((char *)v824 - v842);
                          v843 = &v823[8 * v820 - 16];
                          v844 = v755 - 16;
                          v845 = v841 & 0x3FFFFFFFFFFFFFFCLL;
                          v473 = v982;
                          do
                          {
                            v846 = *(_OWORD *)v844;
                            *(v843 - 1) = *((_OWORD *)v844 - 1);
                            *v843 = v846;
                            v843 -= 2;
                            v844 -= 32;
                            v845 -= 4;
                          }
                          while (v845);
                          if (v841 == (v841 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_897:
                            v1137[0] = v824;
                            v996 = &v823[8 * v822];
                            v1138 = *(double *)&v996;
                            if (v818)
                              goto LABEL_898;
                            goto LABEL_880;
                          }
                        }
                        do
                        {
                          v828 = *((_QWORD *)v827 - 1);
                          v827 -= 8;
                          *--v824 = v828;
                        }
                        while (v827 != v818);
                        goto LABEL_897;
                      }
                    }
                    else
                    {
                      v823 = 0;
                      v824 = (_QWORD *)(8 * v820);
                      *(_QWORD *)(8 * v820) = v756;
                      v757 = (void *)(8 * v820 + 8);
                      v825 = v755 - v818;
                      if (v755 != v818)
                        goto LABEL_894;
                    }
                    v473 = v982;
                    v1137[0] = v824;
                    v996 = &v823[8 * v822];
                    v1138 = *(double *)&v996;
                    if (v818)
LABEL_898:
                      operator delete(v818);
LABEL_880:
                    v1137[1] = v757;
                    v755 = (char *)v757;
                    v475 = v981;
                    if (++v756 == v980)
                      goto LABEL_936;
                    continue;
                  }
                  break;
                }
                if (v754 < v999)
                {
                  *(_QWORD *)v754 = v756;
                  v817 = (uint64_t)(v754 + 8);
                  v475 = v981;
                  v473 = v982;
                  goto LABEL_914;
                }
                v829 = (char *)v1139;
                v830 = v754 - (_BYTE *)v1139;
                v831 = (v754 - (_BYTE *)v1139) >> 3;
                v832 = v831 + 1;
                if ((unint64_t)(v831 + 1) >> 61)
                  goto LABEL_994;
                if ((v999 - (_BYTE *)v1139) >> 2 > v832)
                  v832 = (v999 - (_BYTE *)v1139) >> 2;
                if ((unint64_t)(v999 - (_BYTE *)v1139) >= 0x7FFFFFFFFFFFFFF8)
                  v833 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v833 = v832;
                if (v833)
                {
                  if (v833 >> 61)
LABEL_993:
                    sub_20E877A38();
                  v834 = operator new(8 * v833);
                  v835 = &v834[8 * v831];
                  *v835 = v756;
                  v817 = (uint64_t)(v835 + 1);
                  v836 = v754 - v829;
                  if (v754 != v829)
                  {
LABEL_909:
                    v837 = v836 - 8;
                    if (v837 < 0x168
                      || (v847 = (v754 - 8 - v829) & 0xFFFFFFFFFFFFFFF8, &v834[v830 - 8 - v847] > &v834[v830 - 8])
                      || &v754[-v847 - 8] > v754 - 8
                      || (unint64_t)(v754 - v834 - v830) < 0x20)
                    {
                      v838 = v754;
                      v475 = v981;
                      v473 = v982;
                    }
                    else
                    {
                      v848 = (v837 >> 3) + 1;
                      v849 = 8 * (v848 & 0x3FFFFFFFFFFFFFFCLL);
                      v838 = &v754[-v849];
                      v835 = (_QWORD *)((char *)v835 - v849);
                      v850 = &v834[8 * v831 - 16];
                      v851 = v754 - 16;
                      v852 = v848 & 0x3FFFFFFFFFFFFFFCLL;
                      v473 = v982;
                      do
                      {
                        v853 = *(_OWORD *)v851;
                        *(v850 - 1) = *((_OWORD *)v851 - 1);
                        *v850 = v853;
                        v850 -= 2;
                        v851 -= 32;
                        v852 -= 4;
                      }
                      while (v852);
                      v475 = v981;
                      if (v848 == (v848 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_912:
                        v1139 = v835;
                        v999 = &v834[8 * v833];
                        v1141 = v999;
                        if (v829)
                          goto LABEL_913;
                        goto LABEL_914;
                      }
                    }
                    do
                    {
                      v839 = *((_QWORD *)v838 - 1);
                      v838 -= 8;
                      *--v835 = v839;
                    }
                    while (v838 != v829);
                    goto LABEL_912;
                  }
                }
                else
                {
                  v834 = 0;
                  v835 = (_QWORD *)(8 * v831);
                  *(_QWORD *)(8 * v831) = v756;
                  v817 = 8 * v831 + 8;
                  v836 = v754 - v829;
                  if (v754 != v829)
                    goto LABEL_909;
                }
                v475 = v981;
                v473 = v982;
                v1139 = v835;
                v999 = &v834[8 * v833];
                v1141 = v999;
                if (v829)
LABEL_913:
                  operator delete(v829);
LABEL_914:
                v1140 = (_QWORD *)v817;
                v754 = (char *)v817;
                if (++v756 == v980)
                {
LABEL_936:
                  v854 = (char *)v1139;
                  _D20 = 0;
                  if ((unint64_t)(v754 - (_BYTE *)v1139) >= 0x10)
                  {
                    if (v1139 == v754)
                    {
                      v862.i64[0] = 0;
                      v863 = 0.0;
                      _Q16.f64[0] = 0.0;
                      v856.i64[0] = 0;
                      v857.f64[0] = 0.0;
                      v810.f64[0] = 0.0;
                      v858.f64[0] = 0.0;
                      v859 = 0.0;
                      _Q5.f64[0] = 0.0;
                      v860.i64[0] = 0;
                      *(double *)&v861 = 0.0;
                      v809.f64[0] = 0.0;
                    }
                    else
                    {
                      v856.i64[0] = 0;
                      v857.f64[0] = 0.0;
                      v810.f64[0] = 0.0;
                      v858.f64[0] = 0.0;
                      v859 = 0.0;
                      _Q5.f64[0] = 0.0;
                      v860.i64[0] = 0;
                      *(double *)&v861 = 0.0;
                      v809.f64[0] = 0.0;
                      v862.i64[0] = 0;
                      v863 = 0.0;
                      _Q16.f64[0] = 0.0;
                      do
                      {
                        v1014 = *(double *)&v861;
                        v1017 = v857.f64[0];
                        v1019 = v858.f64[0];
                        v1022 = *(double *)v860.i64;
                        v1024 = v859;
                        v1027 = v810;
                        v1030 = v809;
                        v1034 = _Q5;
                        v1037 = v863;
                        v1064 = _Q16;
                        v1075 = *(double *)v856.i64;
                        __ph = v862.i64[0];
                        v864 = (float64x2_t **)&v988[40 * *(unsigned int *)v854];
                        v866 = *v864;
                        v865 = v864[1];
                        v868 = (double *)v864[2];
                        v867 = v864[3];
                        v869 = v864[4];
                        v870 = v869[1].f64[0];
                        _Q2 = *v869;
                        v872 = v869[3].f64[0];
                        _Q4 = v869[2];
                        _Q5.f64[0] = v869[5].f64[0];
                        _Q6 = v869[4];
                        _D19 = __lenb;
                        v876 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, v869->f64[0]), v1051, *v869, 1), v1048, v870);
                        *(_QWORD *)&v887.f64[1] = v1042[1];
                        __asm { FMLA            D7, D19, V2.D[1] }
                        v878 = _D7 + *(double *)v1042 * v870;
                        v879 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q4.f64[0]), v1051, _Q4, 1), v1048, v872);
                        __asm { FMLA            D7, D19, V4.D[1] }
                        v881 = _D7 + *(double *)v1042 * v872;
                        v882 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q6.f64[0]), v1051, _Q6, 1), v1048, _Q5.f64[0]);
                        __asm { FMLA            D7, D19, V6.D[1] }
                        _Q5.f64[0] = _D7 + *(double *)v1042 * _Q5.f64[0];
                        _Q6.f64[0] = v869[7].f64[0];
                        _Q7 = v869[6];
                        v885 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1054, _Q7.f64[0]), v1051, _Q7, 1), v1048, _Q6.f64[0]);
                        __asm { FMLA            D16, D19, V7.D[1] }
                        v887.f64[0] = _D16 + *(double *)v1042 * _Q6.f64[0];
                        _Q7.f64[0] = v868[1];
                        _Q4 = vaddq_f64(v882, vmlaq_n_f64(vmulq_n_f64(v876, *v868), v879, _Q7.f64[0]));
                        _Q5.f64[0] = _Q5.f64[0] + v878 * *v868 + v881 * _Q7.f64[0];
                        v889 = vnegq_f64((float64x2_t)*(unint64_t *)&_Q5.f64[0]);
                        _Q16 = vnegq_f64(_Q4);
                        _D18 = _Q16.f64[1];
                        __asm { FMLS            D17, D18, V4.D[1] }
                        _Q7.f64[0] = vmlad_n_f64(vmulq_f64(_Q5, _Q5).f64[0], _Q4.f64[0], _Q4.f64[0]);
                        __asm { FMLS            D19, D4, V4.D[1] }
                        v894 = _D17 * _Q7.f64[0] - _D19 * _D19;
                        __asm
                        {
                          FMLS            D19, D16, V4.D[0]
                          FMLS            D16, D20, V4.D[0]
                        }
                        _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], 0.0, _Q4.f64[0]);
                        v896 = _D19 * _Q7.f64[0] - _Q16.f64[0] * _Q16.f64[0];
                        _Q16.f64[0] = _D17 * _D19;
                        __asm
                        {
                          FMLS            D17, D5, V4.D[0]
                          FMLS            D17, D20, V4.D[1]
                        }
                        v899 = _Q16.f64[0] - _D17 * _D17;
                        v900 = v896 > v894;
                        if (v896 <= v894)
                          v896 = v894;
                        if (v899 > v896)
                          v900 = 2;
                        if ((v900 + 1) < 3)
                          v901 = v900 + 1;
                        else
                          v901 = v900 + 2147483646;
                        v1143 = 0u;
                        memset(&v1142, 0, sizeof(v1142));
                        v1142.columns[0].f64[2 * v900] = 1.0;
                        v1142.columns[0].f64[(2 * v901) | 1u] = 1.0;
                        v902 = vmlsq_laneq_f64(vmlaq_n_f64(vmulq_f64((float64x2_t)v1142.columns[0], (float64x2_t)0), (float64x2_t)v1142.columns[1], _Q5.f64[0]), v1143, _Q4, 1);
                        v903 = vmlaq_n_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)v1142.columns[0], v889.f64[0]), (float64x2_t)0, (float64x2_t)v1142.columns[1]), v1143, _Q4.f64[0]);
                        v904 = vmlaq_f64(vmlsq_lane_f64(vmulq_laneq_f64((float64x2_t)v1142.columns[0], _Q4, 1), (float64x2_t)v1142.columns[1], _Q4.f64[0], 0), (float64x2_t)0, v1143);
                        v889.f64[0] = v866[1].f64[0];
                        _Q4.f64[0] = *((float64_t *)&v1152[1] + 1);
                        v1000 = *v866;
                        v1002 = v889;
                        v1010 = v887;
                        v1012 = v885;
                        v905 = vsubq_f64(vsubq_f64(*v866, *(float64x2_t *)((char *)v1152 + 8)), v885);
                        *(_QWORD *)&v906 = *(_OWORD *)&vsubq_f64(vsubq_f64(v889, _Q4), v887);
                        v907 = vsubq_f64(vmulq_n_f64((float64x2_t)v1142.columns[1], v906), vmulq_laneq_f64(v1143, v905, 1));
                        v908 = vsubq_f64(vmulq_n_f64(v1143, v905.f64[0]), vmulq_n_f64((float64x2_t)v1142.columns[0], v906));
                        v909 = vsubq_f64(vmulq_laneq_f64((float64x2_t)v1142.columns[0], v905, 1), vmulq_n_f64((float64x2_t)v1142.columns[1], v905.f64[0]));
                        v910 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v907, v876.f64[0]), v908, v876, 1), v909, v878);
                        v911 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v907, v879.f64[0]), v908, v879, 1), v909, v881);
                        v912 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v902, v865->f64[0]), v903, *v865, 1), v904, v865[1].f64[0]);
                        v913 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v902, v865[1].f64[1]), v903, *(float64x2_t *)((char *)v865 + 24), 1), v904, v865[2].f64[1]);
                        v914 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v902, v865[3].f64[0]), v903, v865[3], 1), v904, v865[4].f64[0]);
                        v915 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v912, v902.f64[0]), v913, v903.f64[0]), v914, v904.f64[0]);
                        v1004 = v902;
                        v1006 = v903;
                        v1008 = v904;
                        v916 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v912, v902, 1), v913, v903, 1), v914, v904, 1);
                        v917 = vmlaq_laneq_f64(vmulq_n_f64(v910, v867->f64[0]), v911, *v867, 1);
                        v918 = vmlaq_laneq_f64(vmulq_n_f64(v910, v867[1].f64[0]), v911, v867[1], 1);
                        v919 = vmlaq_n_f64(vmulq_n_f64(v917, v910.f64[0]), v918, v911.f64[0]);
                        v920 = vmlaq_laneq_f64(vmulq_laneq_f64(v917, v910, 1), v918, v911, 1);
                        v921 = vaddq_f64(v915, v919);
                        v922 = vaddq_f64(v916, v920);
                        v1148.columns[1].f64[0] = v921.f64[1];
                        v1148.columns[0].f64[1] = sqrt(v921.f64[0]);
                        v1148.columns[1].f64[1] = v922.f64[0] / v1148.columns[0].f64[1];
                        v922.f64[0] = v922.f64[1] - v1148.columns[1].f64[1] * v1148.columns[1].f64[1];
                        v923 = v921.f64[0] <= 0.0;
                        v1149 = sqrt(v922.f64[0]);
                        if (v922.f64[0] <= 0.0)
                          v923 = 1;
                        LODWORD(v1148.columns[0].f64[0]) = v923;
                        v1150[1] = 0;
                        v1151.f64[0] = 0.0;
                        v1150[0] = (void *)0x3FF0000000000000;
                        v1151.f64[1] = 1.0;
                        sub_20E8BE8E4();
                        v924 = v1012;
                        _V20.D[1] = v1004.f64[1];
                        _V18.D[1] = v1006.f64[1];
                        _Q5 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1004, 1);
                        _Q6 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1006, 1);
                        _V19.D[1] = v1008.f64[1];
                        _Q7 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v1008, 1);
                        *(_QWORD *)&v924.f64[1] = vextq_s8((int8x16_t)v924, (int8x16_t)v924, 8uLL).u64[0];
                        v931 = v1000;
                        *(_QWORD *)&v931.f64[1] = vextq_s8((int8x16_t)v931, (int8x16_t)v931, 8uLL).u64[0];
                        v932 = vsubq_f64(v931, v924);
                        _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1004, v932.f64[0]), v1006, v932, 1), v1008, vsubq_f64(v1002, v1010).f64[0]);
                        v934 = (float64x2_t)vzip1q_s64((int64x2_t)v1004, (int64x2_t)v1006);
                        v935 = (float64x2_t)vzip2q_s64((int64x2_t)v1004, (int64x2_t)v1006);
                        v936 = vmlaq_laneq_f64(vmulq_n_f64(v934, *(double *)v1150), v935, *(float64x2_t *)v1150, 1);
                        _Q2 = vmulq_f64(v1008, *(float64x2_t *)v1150);
                        _D3 = v1150[1];
                        __asm { FMLA            D2, D3, V19.D[1] }
                        v939 = vmlaq_laneq_f64(vmulq_n_f64(v934, v1151.f64[0]), v935, v1151, 1);
                        _D16 = v1151.f64[1];
                        __asm { FMLA            D3, D16, V19.D[1] }
                        v942 = vmlaq_f64(vmulq_n_f64(v936, v1004.f64[0]), _Q5, v939);
                        __asm { FMLA            D5, D3, V20.D[1] }
                        v943 = vmlaq_f64(vmulq_n_f64(v936, v1006.f64[0]), _Q6, v939);
                        __asm { FMLA            D6, D3, V18.D[1] }
                        v944 = vmlaq_f64(vmulq_n_f64(v936, v1008.f64[0]), _Q7, v939);
                        __asm { FMLA            D7, D3, V19.D[1] }
                        v945.f64[0] = v1075;
                        v946.f64[0] = v1019;
                        v945.f64[1] = v1017;
                        v947.f64[0] = v1022;
                        v946.f64[1] = v1024;
                        v947.f64[1] = v1014;
                        v856 = (int8x16_t)vaddq_f64(v945, v942);
                        v810 = vaddq_f64(v1027, _Q5);
                        v858 = vaddq_f64(v946, v943);
                        _Q5 = vaddq_f64(v1034, _Q6);
                        v860 = (int8x16_t)vaddq_f64(v947, v944);
                        v809 = vaddq_f64(v1030, _Q7);
                        v859 = v858.f64[1];
                        *(_QWORD *)&v857.f64[0] = vextq_s8(v856, v856, 8uLL).u64[0];
                        v861 = vextq_s8(v860, v860, 8uLL).u64[0];
                        *(_QWORD *)&_Q7.f64[0] = __ph;
                        _Q7.f64[1] = v1037;
                        __asm { FMLA            D2, D3, V0.D[1] }
                        v862 = (int8x16_t)vaddq_f64(_Q7, vmlaq_laneq_f64(vmulq_n_f64(v936, _Q0.f64[0]), v939, _Q0, 1));
                        *(_QWORD *)&v863 = vextq_s8(v862, v862, 8uLL).u64[0];
                        _Q16 = vaddq_f64(v1064, _Q2);
                        v854 += 8;
                        _D20 = 0;
                      }
                      while (v854 != v754);
                    }
                    v1143.f64[0] = v858.f64[0];
                    v860.i64[1] = v861;
                    v1145 = v860;
                    v948 = sqrt(*(double *)v856.i64);
                    v1142.columns[0].f64[1] = v948;
                    v857.f64[1] = v810.f64[0];
                    v949 = vdivq_f64(v857, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v948, 0));
                    v1142.columns[1] = (simd_double2)v949;
                    v950 = v859 - vmulq_f64(v949, v949).f64[0];
                    v951 = _Q5.f64[0] - vmuld_lane_f64(v949.f64[0], v949, 1);
                    v952 = sqrt(v950);
                    v953 = v951 / v952;
                    v1143.f64[1] = v952;
                    v1144 = *(simd_double2x2 **)&v953;
                    v954 = v809.f64[0] - vmuld_lane_f64(v949.f64[1], v949, 1) - v953 * v953;
                    v955 = sqrt(v954);
                    v1146 = v955;
                    v956 = *(double *)v856.i64 <= 0.0;
                    if (v950 <= 0.0)
                      v956 = 1;
                    if (v954 <= 0.0)
                      v956 = 1;
                    LODWORD(v1142.columns[0].f64[0]) = v956;
                    v957 = (v863 - *(double *)v862.i64 / v948 * v949.f64[0]) / v952;
                    *((double *)&v1152[1] + 1) = (_Q16.f64[0]
                                                - vmuld_lane_f64(*(double *)v862.i64 / v948, v949, 1)
                                                - v953 * v957)
                                               / v955
                                               / v955;
                    *(double *)&v1152[1] = (v957 - v953 * *((double *)&v1152[1] + 1)) / v952;
                    *((double *)v1152 + 1) = (*(double *)v862.i64 / v948
                                            - *(double *)&v1152[1] * v949.f64[0]
                                            - vmuld_lane_f64(*((double *)&v1152[1] + 1), v949, 1))
                                           / v948;
                    memset((char *)&v1153[2] + 8, 0, 24);
                    memset((char *)v1153 + 8, 0, 24);
                    *(_QWORD *)&v1153[0] = 0x3FF0000000000000;
                    *(_QWORD *)&v1153[2] = 0x3FF0000000000000;
                    v1154 = 0x3FF0000000000000;
                    sub_20E8BE8E4();
                  }
                  goto LABEL_656;
                }
                continue;
              }
            }
            if (v975 >> 61)
              goto LABEL_994;
            v754 = (char *)operator new(v962);
            v1139 = v754;
            v1140 = v754;
            v999 = &v754[8 * v975];
            v1141 = v999;
            if (v752)
              operator delete(v752);
            *(double *)&v996 = v1138;
            if (v975 <= (uint64_t)(*(_QWORD *)&v1138 - (_QWORD)v753) >> 3)
              goto LABEL_939;
LABEL_874:
            if (v975 >> 61)
LABEL_994:
              sub_20E867F44();
            v755 = (char *)operator new(v962);
            v1137[0] = v755;
            v1137[1] = v755;
            v996 = &v755[8 * v975];
            v1138 = *(double *)&v996;
            if (v753)
              operator delete(v753);
            if (v981 != v988)
              goto LABEL_878;
LABEL_656:
            _Q19.f64[0] = v971;
            *(_QWORD *)&_Q19.f64[1] = v966;
            _D22 = v969;
            v481 = (float64x2_t)vzip1q_s64(v968, v967);
            _D2 = v972.i64[1];
            __asm { FMLS            D6, D2, V19.D[1] }
            _D2 = v970;
            __asm { FMLS            D6, D2, V22.D[0] }
            v486 = *(int8x16_t *)((char *)v1152 + 8);
            v487 = (float64x2_t)vzip1q_s64(v974, v973);
            v488 = (float64x2_t)vzip2q_s64(v974, v973);
            v489 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v487, vnegq_f64(_Q19).f64[0]), v488, _Q19, 1), v481, v969, 0);
            v490 = *((double *)&v1152[1] + 1);
            v491 = vzip1q_s64(v972, (int64x2_t)v488);
            *(_QWORD *)&v492.f64[0] = vdupq_laneq_s64(v491, 1).u64[0];
            v493 = vextq_s8((int8x16_t)v488, (int8x16_t)vdupq_laneq_s64(v972, 1), 8uLL);
            *(_QWORD *)&v492.f64[1] = v493.i64[0];
            v493.i64[0] = v491.i64[0];
            _Q6.f64[1] = 1.0;
            v494 = (float64x2_t *)(v961 + (v991 << 7));
            v495 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v487, v1054.f64[0]), v492, v1054, 1), v481, v1040), (float64x2_t)0, v489);
            v496 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v493.u64[0], v1054.f64[0]), (float64x2_t)v493.u64[1], v1054, 1), (float64x2_t)(unint64_t)v970, v1040), (float64x2_t)0, _Q6);
            v497 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v487, v1051.f64[0]), v492, v1051, 1), v481, __lenb), (float64x2_t)0, v489);
            v498 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v493.u64[0], v1051.f64[0]), (float64x2_t)v493.u64[1], v1051, 1), (float64x2_t)(unint64_t)v970, __lenb), (float64x2_t)0, _Q6);
            _Q25 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v487, v1048.f64[0]), v492, v1048, 1), v481, *(double *)v1042), (float64x2_t)0, v489);
            v499 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v493.u64[0], v1048.f64[0]), (float64x2_t)v493.u64[1], v1048, 1), (float64x2_t)(unint64_t)v970, *(double *)v1042), (float64x2_t)0, _Q6);
            v500 = vaddq_f64(v489, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v487, *((double *)v1152 + 1)), v492, *(float64x2_t *)((char *)v1152 + 8), 1), v481, *((double *)&v1152[1] + 1)));
            v501 = vaddq_f64(_Q6, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v493.u64[0], *((double *)v1152 + 1)), (float64x2_t)v493.u64[1], *(float64x2_t *)((char *)v1152 + 8), 1), (float64x2_t)(unint64_t)v970, *((double *)&v1152[1] + 1)));
            *v494 = v495;
            v494[1] = v496;
            v494[2] = v497;
            v494[3] = v498;
            v965 = v991 > 2;
            v973 = (int64x2_t)v1051;
            v974 = (int64x2_t)v1054;
            v967 = (int64x2_t)*(unint64_t *)&__lenb;
            v968 = (int64x2_t)*(unint64_t *)&v1040;
            v494[4] = _Q25;
            v494[5] = v499;
            v494[6] = v500;
            v494[7] = v501;
            v966 = vextq_s8(v486, v486, 8uLL).u64[0];
            v971 = *(double *)v486.i64;
            v972 = (int64x2_t)v1048;
            v969 = v490;
            v970 = v1042[0];
            if (++v991 == 4)
            {
              v285 = 1;
              v958 = v988;
              if (!v988)
                goto LABEL_963;
LABEL_962:
              operator delete(v958);
              goto LABEL_963;
            }
            goto LABEL_657;
          }
        }
        else
        {
          v987 = v976;
          if (v588 > 0xC6)
            goto LABEL_866;
        }
      }
      else
      {
LABEL_857:
        if (v588 > 0xC6)
          goto LABEL_866;
      }
      ++v588;
      if (v990 >= v987)
        goto LABEL_866;
    }
  }
  v965 = 0;
LABEL_961:
  v958 = v988;
  *(_DWORD *)(v989 + 368) = 3;
  v285 = v965;
  if (v988)
    goto LABEL_962;
LABEL_963:
  if (v1137[0])
    operator delete(v1137[0]);
  if (v1139)
    operator delete(v1139);
  sub_20F0BC774(&v1087);
  v457 = v1096;
  if (v1096)
  {
LABEL_620:
    v1097 = v457;
    operator delete(v457);
  }
LABEL_621:
  if (v1099)
    operator delete(v1099);
  if (v1102)
    operator delete(v1102);
LABEL_625:
  sub_20F0BC774((void **)&v1113);
  if (v1125[0])
  {
    v1125[1] = v1125[0];
    operator delete(v1125[0]);
  }
  v458 = (char *)v1123[1];
  if (v1123[1])
  {
    v459 = (char *)v1124;
    v460 = v1123[1];
    if ((void *)v1124 != v1123[1])
    {
      v461 = (char *)v1124;
      do
      {
        v463 = (void *)*((_QWORD *)v461 - 3);
        v461 -= 24;
        v462 = v463;
        if (v463)
        {
          *((_QWORD *)v459 - 2) = v462;
          operator delete(v462);
        }
        v459 = v461;
      }
      while (v461 != v458);
      v460 = v1123[1];
    }
    *(_QWORD *)&v1124 = v458;
    operator delete(v460);
  }
  v464 = (char *)v1122[0];
  if (v1122[0])
  {
    v465 = v1122[1];
    v466 = v1122[0];
    if (v1122[1] != v1122[0])
    {
      v467 = (char *)v1122[1];
      do
      {
        v469 = (void *)*((_QWORD *)v467 - 3);
        v467 -= 24;
        v468 = v469;
        if (v469)
        {
          *(v465 - 2) = v468;
          operator delete(v468);
        }
        v465 = v467;
      }
      while (v467 != v464);
      v466 = v1122[0];
    }
    v1122[1] = v464;
    operator delete(v466);
  }
  return v285 & 1;
}

void sub_20F0B7638(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)STACK[0x5C0];
  if (STACK[0x5C0])
  {
    STACK[0x5C8] = (unint64_t)v2;
    operator delete(v2);
    v3 = (void *)STACK[0x5D8];
    if (!STACK[0x5D8])
      goto LABEL_6;
  }
  else
  {
    v3 = (void *)STACK[0x5D8];
    if (!STACK[0x5D8])
      goto LABEL_6;
  }
  STACK[0x5E0] = (unint64_t)v3;
  operator delete(v3);
LABEL_6:
  sub_20F0BC774((void **)&STACK[0x380]);
  v4 = (void *)STACK[0x3C8];
  if (STACK[0x3C8])
  {
    STACK[0x3D0] = (unint64_t)v4;
    operator delete(v4);
    v5 = (void *)STACK[0x3E0];
    if (!STACK[0x3E0])
    {
LABEL_8:
      v6 = (void *)STACK[0x3F8];
      if (!STACK[0x3F8])
      {
LABEL_13:
        sub_20F0BC774((void **)&STACK[0x498]);
        sub_20F0B7B28((void **)&STACK[0x4E0]);
        _Unwind_Resume(a1);
      }
LABEL_12:
      operator delete(v6);
      goto LABEL_13;
    }
  }
  else
  {
    v5 = (void *)STACK[0x3E0];
    if (!STACK[0x3E0])
      goto LABEL_8;
  }
  STACK[0x3E8] = (unint64_t)v5;
  operator delete(v5);
  v6 = (void *)STACK[0x3F8];
  if (!STACK[0x3F8])
    goto LABEL_13;
  goto LABEL_12;
}

void **sub_20F0B7B28(void **a1)
{
  void *v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (char *)a1[3];
  if (v3)
  {
    v4 = (char *)a1[4];
    v5 = a1[3];
    if (v4 != v3)
    {
      v6 = (char *)a1[4];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = a1[3];
    }
    a1[4] = v3;
    operator delete(v5);
  }
  v9 = (char *)*a1;
  if (*a1)
  {
    v10 = (char *)a1[1];
    v11 = *a1;
    if (v10 != v9)
    {
      v12 = (char *)a1[1];
      do
      {
        v14 = (void *)*((_QWORD *)v12 - 3);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *((_QWORD *)v10 - 2) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = *a1;
    }
    a1[1] = v9;
    operator delete(v11);
  }
  return a1;
}

void sub_20F0B7BF8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
      v19 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20F0B7DD0(char **a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  const void *v26;
  int64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  char *v33;
  void *v34;
  void *v35;
  __int128 v36;

  v6 = a1[2];
  v7 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      v14 = 24 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = 0;
        v17 = *(const void **)a3;
        v16 = *(_QWORD *)(a3 + 8);
        v18 = v16 - *(_QWORD *)a3;
        if (v16 != *(_QWORD *)a3)
        {
          if (v18 < 0)
            sub_20EABADD4();
          v19 = (char *)operator new(v16 - *(_QWORD *)a3);
          *(_QWORD *)v7 = v19;
          *((_QWORD *)v7 + 1) = v19;
          v15 = &v19[4 * (v18 >> 2)];
          *((_QWORD *)v7 + 2) = v15;
          memcpy(v19, v17, v18);
          *((_QWORD *)v7 + 1) = v15;
        }
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20EF47464();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v20 = &v12[24 * v8];
    *((_QWORD *)&v36 + 1) = &v12[24 * v11];
    v21 = 24 * a2;
    v22 = &v20[24 * a2];
    v23 = v20;
    do
    {
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = 0;
      v26 = *(const void **)a3;
      v25 = *(_QWORD *)(a3 + 8);
      v27 = v25 - *(_QWORD *)a3;
      if (v25 != *(_QWORD *)a3)
      {
        if (v27 < 0)
          sub_20EABADD4();
        v28 = (char *)operator new(v25 - *(_QWORD *)a3);
        *(_QWORD *)v23 = v28;
        *((_QWORD *)v23 + 1) = v28;
        v24 = &v28[4 * (v27 >> 2)];
        *((_QWORD *)v23 + 2) = v24;
        memcpy(v28, v26, v27);
        *((_QWORD *)v23 + 1) = v24;
      }
      v23 += 24;
      v21 -= 24;
    }
    while (v21);
    *(_QWORD *)&v36 = v22;
    v29 = *a1;
    v30 = a1[1];
    if (v30 == *a1)
    {
      *a1 = v20;
      a1[1] = v22;
      a1[2] = (char *)*((_QWORD *)&v36 + 1);
    }
    else
    {
      do
      {
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        v20 -= 24;
        *((_QWORD *)v20 + 2) = 0;
        v31 = *(_OWORD *)(v30 - 24);
        v30 -= 24;
        *(_OWORD *)v20 = v31;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v30 + 2);
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
        *((_QWORD *)v30 + 2) = 0;
      }
      while (v30 != v29);
      v30 = *a1;
      v32 = a1[1];
      *a1 = v20;
      *(_OWORD *)(a1 + 1) = v36;
      if (v32 != v30)
      {
        v33 = v32;
        do
        {
          v35 = (void *)*((_QWORD *)v33 - 3);
          v33 -= 24;
          v34 = v35;
          if (v35)
          {
            *((_QWORD *)v32 - 2) = v34;
            operator delete(v34);
          }
          v32 = v33;
        }
        while (v33 != v30);
      }
    }
    if (v30)
      operator delete(v30);
  }
}

void sub_20F0B805C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F0B8064(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_20F0B8084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20EB143E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0B809C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  a12 = v12;
  sub_20EB143E8((uint64_t)&a10);
  _Unwind_Resume(a1);
}

int8x16_t *sub_20F0B80C4(int8x16_t *result, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  __int32 v13;
  __int32 v14;
  uint64_t v15;
  __int32 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int8 *v22;
  uint64_t *v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int8 *v31;
  uint64_t *v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  int8x16_t *v52;
  int v53;
  int v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;
  int v59;
  char *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  int8x16_t *v64;
  int8x16_t *v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  __int32 v72;
  __int32 v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t *v78;
  BOOL v80;
  uint64_t v81;
  int8x16_t *v82;
  uint64_t *v83;
  __int32 v84;
  __int32 v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int64_t v89;
  int64_t v90;
  BOOL v91;
  uint64_t v92;
  __int32 *v93;
  __int32 v94;
  __int32 v95;
  __int32 *v96;
  uint64_t v97;
  int v98;
  __int32 v99;
  __int32 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  int8x16_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int32 v117;
  __int32 v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (a2[-1].i32[2] < v8->i32[0])
        {
          v71 = v8->i64[0];
          goto LABEL_106;
        }
        return result;
      case 3:
        v72 = v8->i32[2];
        v73 = a2[-1].i32[2];
        if (v72 < v8->i32[0])
        {
          v71 = v8->i64[0];
          if (v73 >= v72)
          {
            v8->i64[0] = v8->i64[1];
            v8->i64[1] = v71;
            if (a2[-1].i32[2] >= (int)v71)
              return result;
            v8->i64[1] = a2[-1].i64[1];
          }
          else
          {
LABEL_106:
            v8->i64[0] = a2[-1].i64[1];
          }
          a2[-1].i64[1] = v71;
          return result;
        }
        if (v73 < v72)
        {
          v114 = v8->i64[1];
          v8->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v114;
          if (v8->i32[2] < v8->i32[0])
            *v8 = vextq_s8(*v8, *v8, 8uLL);
        }
        return result;
      case 4:
        v74 = v8->i32[2];
        v75 = v8->i32[0];
        LODWORD(v76) = v8[1].i32[0];
        if (v74 >= v8->i32[0])
        {
          if ((int)v76 < v74)
          {
            v76 = v8->i64[1];
            v115 = v8[1].i64[0];
            v8->i64[1] = v115;
            v8[1].i64[0] = v76;
            if (v75 > (int)v115)
            {
              v116 = v8->i64[0];
              v8->i64[0] = v115;
              v8->i64[1] = v116;
            }
          }
        }
        else
        {
          v77 = v8->i64[0];
          if ((int)v76 >= v74)
          {
            v8->i64[0] = v8->i64[1];
            v8->i64[1] = v77;
            if ((int)v76 >= (int)v77)
              goto LABEL_187;
            v8->i64[1] = v8[1].i64[0];
          }
          else
          {
            v8->i64[0] = v8[1].i64[0];
          }
          v8[1].i64[0] = v77;
          LODWORD(v76) = v77;
        }
LABEL_187:
        if (a2[-1].i32[2] < (int)v76)
        {
          v122 = v8[1].i64[0];
          v8[1].i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v122;
          if (v8[1].i32[0] < v8->i32[2])
          {
            v124 = v8->i64[1];
            v123 = v8[1].i64[0];
            v8->i64[1] = v123;
            v8[1].i64[0] = v124;
            if (v8->i32[0] > (int)v123)
            {
              v125 = v8->i64[0];
              v8->i64[0] = v123;
              v8->i64[1] = v125;
            }
          }
        }
        return result;
      case 5:
        return (int8x16_t *)sub_20F0B8E18(v8->i64, &v8->i32[2], v8[1].i32, &v8[1].i64[1], &a2[-1].i64[1]);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 == a2)
              return result;
            v89 = (unint64_t)(v10 - 2) >> 1;
            v90 = v89;
            while (1)
            {
              if (v89 >= v90)
              {
                v92 = (2 * v90) | 1;
                v93 = &v8->i32[2 * v92];
                if (2 * v90 + 2 >= v10)
                {
                  v96 = &v8->i32[2 * v90];
                  if (*v93 >= *v96)
                    goto LABEL_142;
                }
                else
                {
                  v94 = *v93;
                  v95 = v93[2];
                  if (*v93 <= v95)
                    v94 = v93[2];
                  if (*v93 < v95)
                  {
                    v93 += 2;
                    v92 = 2 * v90 + 2;
                  }
                  v96 = &v8->i32[2 * v90];
                  if (v94 >= *v96)
                  {
LABEL_142:
                    v97 = *(_QWORD *)v96;
                    while (1)
                    {
                      v100 = v96;
                      v96 = v93;
                      *(_QWORD *)v100 = *(_QWORD *)v93;
                      if (v89 < v92)
                        break;
                      v101 = (2 * v92) | 1;
                      v93 = &v8->i32[2 * v101];
                      v92 = 2 * v92 + 2;
                      if (v92 < v10)
                      {
                        v98 = *v93;
                        result = (int8x16_t *)(v93 + 2);
                        v99 = v93[2];
                        if (*v93 <= v99)
                          v98 = v93[2];
                        if (*v93 >= v99)
                          v92 = v101;
                        else
                          v93 += 2;
                        if (v98 < (int)v97)
                          break;
                      }
                      else
                      {
                        v92 = v101;
                        if (*v93 < (int)v97)
                          break;
                      }
                    }
                    *(_QWORD *)v96 = v97;
                  }
                }
              }
              v91 = v90-- <= 0;
              if (v91)
              {
                v102 = (unint64_t)v9 >> 3;
                do
                {
                  v103 = 0;
                  v104 = v8->i64[0];
                  v105 = (uint64_t *)v8;
                  do
                  {
                    v106 = (int8x16_t *)&v105[v103 + 1];
                    v107 = (2 * v103) | 1;
                    v108 = 2 * v103 + 2;
                    if (v108 < v102 && v106->i32[0] < v106->i32[2])
                    {
                      v106 = (int8x16_t *)((char *)v106 + 8);
                      v107 = v108;
                    }
                    *v105 = v106->i64[0];
                    v105 = (uint64_t *)v106;
                    v103 = v107;
                  }
                  while (v107 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
                  a2 = (int8x16_t *)((char *)a2 - 8);
                  if (v106 == a2)
                  {
                    v106->i64[0] = v104;
                  }
                  else
                  {
                    v106->i64[0] = a2->i64[0];
                    a2->i64[0] = v104;
                    v109 = (char *)v106 - (char *)v8 + 8;
                    if (v109 >= 9)
                    {
                      v110 = (((unint64_t)v109 >> 3) - 2) >> 1;
                      v111 = &v8->i64[v110];
                      if (*(_DWORD *)v111 < v106->i32[0])
                      {
                        v112 = v106->i64[0];
                        do
                        {
                          v113 = (uint64_t *)v106;
                          v106 = (int8x16_t *)v111;
                          *v113 = *v111;
                          if (!v110)
                            break;
                          v110 = (v110 - 1) >> 1;
                          v111 = &v8->i64[v110];
                        }
                        while (*(_DWORD *)v111 < (int)v112);
                        v106->i64[0] = v112;
                      }
                    }
                  }
                  v91 = v102-- <= 2;
                }
                while (!v91);
                return result;
              }
            }
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8->i64[(unint64_t)v10 >> 1];
          v13 = a2[-1].i32[2];
          if ((unint64_t)v9 < 0x401)
          {
            v16 = v8->i32[0];
            if (v8->i32[0] >= *(_DWORD *)v12)
            {
              if (v13 < v16)
              {
                v20 = v8->i64[0];
                v8->i64[0] = a2[-1].i64[1];
                a2[-1].i64[1] = v20;
                if (v8->i32[0] < *(_DWORD *)v12)
                {
                  v21 = *v12;
                  *v12 = v8->i64[0];
                  v8->i64[0] = v21;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_57;
                }
              }
              goto LABEL_32;
            }
            v17 = *v12;
            if (v13 >= v16)
            {
              *v12 = v8->i64[0];
              v8->i64[0] = v17;
              if (a2[-1].i32[2] >= (int)v17)
                goto LABEL_32;
              v8->i64[0] = a2[-1].i64[1];
            }
            else
            {
              *v12 = a2[-1].i64[1];
            }
            a2[-1].i64[1] = v17;
LABEL_32:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
            goto LABEL_57;
          }
          v14 = *(_DWORD *)v12;
          if (*(_DWORD *)v12 >= v8->i32[0])
          {
            if (v13 < v14)
            {
              v18 = *v12;
              *v12 = a2[-1].i64[1];
              a2[-1].i64[1] = v18;
              if (*(_DWORD *)v12 < v8->i32[0])
              {
                v19 = v8->i64[0];
                v8->i64[0] = *v12;
                *v12 = v19;
              }
            }
          }
          else
          {
            v15 = v8->i64[0];
            if (v13 >= v14)
            {
              v8->i64[0] = *v12;
              *v12 = v15;
              if (a2[-1].i32[2] >= (int)v15)
                goto LABEL_23;
              *v12 = a2[-1].i64[1];
            }
            else
            {
              v8->i64[0] = a2[-1].i64[1];
            }
            a2[-1].i64[1] = v15;
          }
LABEL_23:
          v22 = &v8->i8[8 * v11];
          v25 = *((_DWORD *)v22 - 2);
          v23 = (uint64_t *)(v22 - 8);
          v24 = v25;
          v26 = a2[-1].i32[0];
          if (v25 >= v8->i32[2])
          {
            if (v26 < v24)
            {
              v28 = *v23;
              *v23 = a2[-1].i64[0];
              a2[-1].i64[0] = v28;
              if (*(_DWORD *)v23 < v8->i32[2])
              {
                v29 = v8->i64[1];
                v8->i64[1] = *v23;
                *v23 = v29;
              }
            }
          }
          else
          {
            v27 = v8->i64[1];
            if (v26 >= v24)
            {
              v8->i64[1] = *v23;
              *v23 = v27;
              if (a2[-1].i32[0] >= (int)v27)
                goto LABEL_37;
              *v23 = a2[-1].i64[0];
            }
            else
            {
              v8->i64[1] = a2[-1].i64[0];
            }
            a2[-1].i64[0] = v27;
          }
LABEL_37:
          v31 = &v8->i8[8 * v11];
          v34 = *((_DWORD *)v31 + 2);
          v32 = (uint64_t *)(v31 + 8);
          v33 = v34;
          v35 = a2[-2].i32[2];
          if (v34 >= v8[1].i32[0])
          {
            if (v35 < v33)
            {
              v37 = *v32;
              *v32 = a2[-2].i64[1];
              a2[-2].i64[1] = v37;
              if (*(_DWORD *)v32 < v8[1].i32[0])
              {
                v38 = v8[1].i64[0];
                v8[1].i64[0] = *v32;
                *v32 = v38;
              }
            }
          }
          else
          {
            v36 = v8[1].i64[0];
            if (v35 >= v33)
            {
              v8[1].i64[0] = *v32;
              *v32 = v36;
              if (a2[-2].i32[2] >= (int)v36)
                goto LABEL_46;
              *v32 = a2[-2].i64[1];
            }
            else
            {
              v8[1].i64[0] = a2[-2].i64[1];
            }
            a2[-2].i64[1] = v36;
          }
LABEL_46:
          v39 = *(_DWORD *)v12;
          v40 = *(_DWORD *)v23;
          v41 = *(_DWORD *)v32;
          if (*(_DWORD *)v12 < *(_DWORD *)v23)
          {
            v42 = *v23;
            if (v41 < v39)
            {
              *v23 = *v32;
              *v32 = v42;
              v43 = v8->i64[0];
              v8->i64[0] = *v12;
              *v12 = v43;
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_33;
              goto LABEL_57;
            }
            *v23 = *v12;
            *v12 = v42;
            if (v41 < (int)v42)
            {
              v47 = *v32;
              *v12 = *v32;
              *v32 = v42;
              v42 = v47;
            }
            goto LABEL_56;
          }
          v42 = *v12;
          if (v41 >= v39)
          {
LABEL_56:
            v48 = v8->i64[0];
            v8->i64[0] = v42;
            *v12 = v48;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_57:
            v30 = v8->i64[0];
            if (v8[-1].i32[2] < v8->i32[0])
              goto LABEL_58;
            if (a2[-1].i32[2] <= (int)v30)
            {
              v64 = (int8x16_t *)&v8->u64[1];
              do
              {
                v8 = v64;
                if (v64 >= a2)
                  break;
                v64 = (int8x16_t *)((char *)v64 + 8);
              }
              while (v8->i32[0] <= (int)v30);
            }
            else
            {
              do
              {
                v63 = v8->i32[2];
                v8 = (int8x16_t *)((char *)v8 + 8);
              }
              while (v63 <= (int)v30);
            }
            v65 = a2;
            if (v8 < a2)
            {
              v65 = a2;
              do
              {
                v66 = v65[-1].i32[2];
                v65 = (int8x16_t *)((char *)v65 - 8);
              }
              while (v66 > (int)v30);
            }
            while (v8 < v65)
            {
              v67 = v8->i64[0];
              v8->i64[0] = v65->i64[0];
              v65->i64[0] = v67;
              do
              {
                v68 = v8->i32[2];
                v8 = (int8x16_t *)((char *)v8 + 8);
              }
              while (v68 <= (int)v30);
              do
              {
                v69 = v65[-1].i32[2];
                v65 = (int8x16_t *)((char *)v65 - 8);
              }
              while (v69 > (int)v30);
            }
            v70 = &v8[-1].i64[1];
            if (&v8[-1].u64[1] != (unint64_t *)v7)
              v7->i64[0] = *v70;
            a4 = 0;
            *v70 = v30;
            continue;
          }
          v44 = *v32;
          *v12 = *v32;
          *v32 = v42;
          if (v40 > (int)v44)
          {
            v45 = *v23;
            *v23 = v44;
            *v12 = v45;
            v46 = v8->i64[0];
            v8->i64[0] = v45;
            *v12 = v46;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
            goto LABEL_57;
          }
          v62 = v8->i64[0];
          v8->i64[0] = v44;
          *v12 = v62;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_57;
LABEL_33:
          v30 = v8->i64[0];
LABEL_58:
          v49 = 0;
          do
          {
            v50 = v8->i32[v49 + 2];
            v49 += 2;
          }
          while (v50 < (int)v30);
          v51 = &v8->i8[v49 * 4];
          v52 = a2;
          if (v49 == 2)
          {
            v52 = a2;
            do
            {
              if (v51 >= (char *)v52)
                break;
              v54 = v52[-1].i32[2];
              v52 = (int8x16_t *)((char *)v52 - 8);
            }
            while (v54 >= (int)v30);
          }
          else
          {
            do
            {
              v53 = v52[-1].i32[2];
              v52 = (int8x16_t *)((char *)v52 - 8);
            }
            while (v53 >= (int)v30);
          }
          if (v51 >= (char *)v52)
          {
            v60 = v51 - 8;
            if (v51 - 8 == (char *)v8)
              goto LABEL_76;
LABEL_75:
            v8->i64[0] = *(_QWORD *)v60;
            goto LABEL_76;
          }
          v55 = &v8->i8[v49 * 4];
          v56 = (char *)v52;
          do
          {
            v57 = *(_QWORD *)v55;
            *(_QWORD *)v55 = *(_QWORD *)v56;
            *(_QWORD *)v56 = v57;
            do
            {
              v58 = *((_DWORD *)v55 + 2);
              v55 += 8;
            }
            while (v58 < (int)v30);
            do
            {
              v59 = *((_DWORD *)v56 - 2);
              v56 -= 8;
            }
            while (v59 >= (int)v30);
          }
          while (v55 < v56);
          v60 = v55 - 8;
          if (v55 - 8 != (char *)v8)
            goto LABEL_75;
LABEL_76:
          *(_QWORD *)v60 = v30;
          if (v51 < (char *)v52)
            goto LABEL_79;
          v61 = sub_20F0B8AFC(v8, (int8x16_t *)v60);
          v8 = (int8x16_t *)(v60 + 8);
          result = (int8x16_t *)sub_20F0B8AFC((int8x16_t *)(v60 + 8), a2);
          if (!(_DWORD)result)
          {
            if (v61)
              continue;
LABEL_79:
            result = (int8x16_t *)sub_20F0B80C4(v7, v60, a3, a4 & 1);
            a4 = 0;
            v8 = (int8x16_t *)(v60 + 8);
            continue;
          }
          a2 = (int8x16_t *)v60;
          if (v61)
            return result;
          goto LABEL_2;
        }
        v78 = (int8x16_t *)&v8->u64[1];
        v80 = v8 == a2 || v78 == a2;
        if ((a4 & 1) != 0)
        {
          if (v80)
            return result;
          v81 = 0;
          v82 = v8;
          while (1)
          {
            v84 = v82->i32[2];
            v85 = v82->i32[0];
            v82 = v78;
            if (v84 < v85)
            {
              v86 = v78->i64[0];
              v87 = v81;
              do
              {
                *(uint64_t *)((char *)&v8->i64[1] + v87) = *(uint64_t *)((char *)v8->i64 + v87);
                if (!v87)
                {
                  v83 = (uint64_t *)v8;
                  goto LABEL_122;
                }
                v88 = *(__int32 *)((char *)&v8->i32[-2] + v87);
                v87 -= 8;
              }
              while (v88 > (int)v86);
              v83 = (uint64_t *)((char *)&v8->i64[1] + v87);
LABEL_122:
              *v83 = v86;
            }
            v78 = (int8x16_t *)&v82->u64[1];
            v81 += 8;
            if (&v82->u64[1] == (unint64_t *)a2)
              return result;
          }
        }
        if (!v80)
        {
          do
          {
            v117 = v7->i32[2];
            v118 = v7->i32[0];
            v7 = v78;
            if (v117 < v118)
            {
              v119 = v78->i64[0];
              do
              {
                v120 = (uint64_t *)v78;
                v121 = v78[-1].i64[1];
                v78 = (int8x16_t *)((char *)v78 - 8);
                *v120 = v121;
              }
              while (*((_DWORD *)v120 - 4) > (int)v119);
              v78->i64[0] = v119;
            }
            v78 = (int8x16_t *)&v7->u64[1];
          }
          while (&v7->u64[1] != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F0B8AFC(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int32 v9;
  __int32 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int32 *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (a2[-1].i32[2] >= a1->i32[0])
        return 1;
      v8 = a1->i64[0];
      goto LABEL_10;
    case 3:
      v9 = a1->i32[2];
      v10 = a2[-1].i32[2];
      if (v9 >= a1->i32[0])
      {
        if (v10 < v9)
        {
          v18 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v18;
          if (a1->i32[2] < a1->i32[0])
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        v8 = a1->i64[0];
        if (v10 < v9)
        {
LABEL_10:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v8;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v8;
        if (a2[-1].i32[2] < (int)v8)
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v8;
          return 1;
        }
      }
      return 1;
    case 4:
      v11 = a1->i32[2];
      v12 = a1->i32[0];
      LODWORD(v13) = a1[1].i32[0];
      if (v11 >= a1->i32[0])
      {
        if ((int)v13 < v11)
        {
          v13 = a1->i64[1];
          v19 = a1[1].i64[0];
          a1->i64[1] = v19;
          a1[1].i64[0] = v13;
          if (v12 > (int)v19)
          {
            v20 = a1->i64[0];
            a1->i64[0] = v19;
            a1->i64[1] = v20;
          }
        }
      }
      else
      {
        v14 = a1->i64[0];
        if ((int)v13 >= v11)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v14;
          if ((int)v13 >= (int)v14)
            goto LABEL_44;
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v14;
        LODWORD(v13) = v14;
      }
LABEL_44:
      if (a2[-1].i32[2] >= (int)v13)
        return 1;
      v27 = a1[1].i64[0];
      a1[1].i64[0] = a2[-1].i64[1];
      a2[-1].i64[1] = v27;
      if (a1[1].i32[0] >= a1->i32[2])
        return 1;
      v29 = a1->i64[1];
      v28 = a1[1].i64[0];
      a1->i64[1] = v28;
      a1[1].i64[0] = v29;
      if (a1->i32[0] <= (int)v28)
        return 1;
      v30 = a1->i64[0];
      a1->i64[0] = v28;
      a1->i64[1] = v30;
      return 1;
    case 5:
      sub_20F0B8E18(a1->i64, &a1->i32[2], a1[1].i32, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      v3 = a1 + 1;
      v4 = a1[1].i32[0];
      v5 = a1->i32[2];
      v6 = a1->i32[0];
      if (v5 >= a1->i32[0])
      {
        if (v4 < v5)
        {
          v16 = a1->i64[1];
          v15 = a1[1].i64[0];
          a1->i64[1] = v15;
          a1[1].i64[0] = v16;
          if (v6 > (int)v15)
          {
            v17 = a1->i64[0];
            a1->i64[0] = v15;
            a1->i64[1] = v17;
          }
        }
      }
      else
      {
        v7 = a1->i64[0];
        if (v4 >= v5)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v7;
          if (v4 >= (int)v7)
            goto LABEL_28;
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v7;
      }
LABEL_28:
      v21 = &a1[1].i32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v22 = 0;
      v23 = 0;
      break;
  }
  while (*v21 >= v3->i32[0])
  {
LABEL_37:
    v3 = (int8x16_t *)v21;
    v22 += 8;
    v21 += 2;
    if (v21 == (__int32 *)a2)
      return 1;
  }
  v24 = *(_QWORD *)v21;
  v25 = v22;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v25) = *(uint64_t *)((char *)a1[1].i64 + v25);
    if (v25 == -16)
    {
      a1->i64[0] = v24;
      if (++v23 != 8)
        goto LABEL_37;
      return v21 + 2 == (__int32 *)a2;
    }
    v26 = *(__int32 *)((char *)&a1->i32[2] + v25);
    v25 -= 8;
  }
  while (v26 > (int)v24);
  *(uint64_t *)((char *)&a1[1].i64[1] + v25) = v24;
  if (++v23 != 8)
    goto LABEL_37;
  return v21 + 2 == (__int32 *)a2;
}

uint64_t *sub_20F0B8E18(uint64_t *result, int *a2, int *a3, _QWORD *a4, _QWORD *a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  LODWORD(v6) = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if ((int)v6 < v5)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (*a2 < *(_DWORD *)result)
      {
        v6 = *result;
        *result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v6;
        LODWORD(v6) = *a3;
      }
    }
  }
  else
  {
    v7 = *result;
    if ((int)v6 < v5)
    {
      *result = *(_QWORD *)a3;
LABEL_9:
      *(_QWORD *)a3 = v7;
      LODWORD(v6) = v7;
      goto LABEL_10;
    }
    *result = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    LODWORD(v6) = *a3;
    if (*a3 < (int)v7)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)a4 < (int)v6)
  {
    v8 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v8;
    if (*a3 < *a2)
    {
      v9 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v9;
      if (*a2 < *(_DWORD *)result)
      {
        v10 = *result;
        *result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v10;
      }
    }
  }
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(_DWORD *)a4 < *a3)
    {
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        v13 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v13;
        if (*a2 < *(_DWORD *)result)
        {
          v14 = *result;
          *result = *(_QWORD *)a2;
          *(_QWORD *)a2 = v14;
        }
      }
    }
  }
  return result;
}

void sub_20F0B8F8C(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v5;
  uint64_t v6;
  void **v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char **v20;
  _BYTE *v21;
  _BYTE *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  _QWORD *v36;
  unint64_t v37;
  int v38;

  v5 = a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 945, (uint64_t)"pose_idx < observation_bearings_.size() && \"Invalid access: Index out of range.\"", 80, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 3) <= v5&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 948, (uint64_t)"pose_idx < bearing_to_observation_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_30;
  }
  v6 = a1[6];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[7] - v6) >> 3) > v5)
    goto LABEL_8;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 951, (uint64_t)"pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_30:
    abort();
  }
  v6 = a1[6];
LABEL_8:
  v7 = (void **)(*a1 + 24 * v5);
  v8 = *v7;
  v7[1] = *v7;
  *(_QWORD *)(a1[3] + 24 * v5 + 8) = *(_QWORD *)(a1[3] + 24 * v5);
  *(_QWORD *)(v6 + 24 * v5 + 8) = *(_QWORD *)(v6 + 24 * v5);
  v9 = a3;
  v10 = *v7;
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v7[2] - (_BYTE *)*v7) >> 4) < v9)
  {
    v11 = (char *)operator new(48 * v9);
    v12 = &v11[v8 - v10];
    v13 = v12;
    if (v8 != v10)
    {
      v14 = &v11[v8 - v10];
      do
      {
        v13 = v14 - 48;
        *((_OWORD *)v14 - 3) = *((_OWORD *)v8 - 3);
        v15 = *((_OWORD *)v8 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v8 - 2);
        *((_OWORD *)v14 - 1) = v15;
        v8 -= 48;
        v14 -= 48;
      }
      while (v8 != v10);
    }
    *v7 = v13;
    v7[1] = v12;
    v7[2] = &v11[48 * v9];
    if (v10)
      operator delete(v10);
  }
  v16 = a1[3];
  v17 = v16 + 24 * v5;
  v18 = *(_BYTE **)v17;
  if (v9 > (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)v17) >> 2)
  {
    v19 = v16 + 24 * v5;
    v22 = *(_BYTE **)(v19 + 8);
    v20 = (char **)(v19 + 8);
    v21 = v22;
    v23 = (char *)operator new(4 * v9);
    v24 = v22 - v18;
    v25 = &v23[(v22 - v18) & 0xFFFFFFFFFFFFFFFCLL];
    v26 = v25;
    if (v22 == v18)
      goto LABEL_23;
    if ((unint64_t)(v24 - 4) >= 0x2C)
    {
      v26 = &v23[(v21 - v18) & 0xFFFFFFFFFFFFFFFCLL];
      if (v21 - v23 - (v24 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v27 = v24 >> 2;
        v28 = ((unint64_t)(v24 - 4) >> 2) + 1;
        v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
        v30 = &v21[-v29];
        v26 = &v25[-v29];
        v31 = &v23[4 * v27 - 16];
        v32 = (__int128 *)(v21 - 16);
        v33 = v28 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v34 = *v32;
          *((_OWORD *)v31 - 1) = *(v32 - 1);
          *(_OWORD *)v31 = v34;
          v31 -= 32;
          v32 -= 2;
          v33 -= 8;
        }
        while (v33);
        v21 = v30;
        if (v28 == (v28 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_23:
          *(_QWORD *)v17 = v26;
          *v20 = v25;
          *(_QWORD *)(v17 + 16) = &v23[4 * v9];
          if (v18)
            operator delete(v18);
          goto LABEL_25;
        }
      }
    }
    else
    {
      v26 = &v23[(v21 - v18) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v35 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v26 - 1) = v35;
      v26 -= 4;
    }
    while (v21 != v18);
    goto LABEL_23;
  }
LABEL_25:
  v36 = (_QWORD *)(a1[6] + 24 * v5);
  v38 = -1;
  v37 = (uint64_t)(v36[1] - *v36) >> 2;
  if (v9 <= v37)
  {
    if (v9 < v37)
      v36[1] = *v36 + 4 * v9;
  }
  else
  {
    sub_20EDDCBD0((uint64_t)v36, v9 - v37, (const float *)&v38);
  }
}

void sub_20F0B92D0(_QWORD *a1, unsigned int a2, unsigned int a3, double a4, int8x16_t a5, double a6, __n128 a7)
{
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  float64_t v14;
  double v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  char v19;
  int8x16_t v20;
  float64x2_t v24;
  double v31;
  double v32;
  double v33;
  double v36;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  double v51;
  double v54;
  double v55;
  long double v56;
  int64x2_t v57;
  int64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  float64x2_t v64;
  double v65;
  double v68;
  float64x2_t v69;
  double v70;
  unint64_t v71;
  long double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  float64x2_t v81;
  float64x2_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float64x2_t *v90;
  float64x2_t *v91;
  unint64_t v92;
  uint64_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  void **v98;
  char **v99;
  char **v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  float64x2_t *v105;
  char *v106;
  float64x2_t v107;
  uint64_t v108;
  uint64_t *v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  unsigned int *v120;
  char *v121;
  int64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  _OWORD *v127;
  char *v128;
  uint64_t v129;
  __int128 v130;
  unsigned int v131;
  double v133;
  double v134;
  double v135;
  double v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  double v142;
  double v143;
  double v144;
  double v145;
  simd_double2x2 v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  double v150;
  _BYTE v151[48];
  float64x2_t v152;
  simd_double2x2 v153;
  float64x2_t v154;
  uint64_t v155;

  v155 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v10 = (uint64_t *)a1[1];
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 376)
                              + 48
                              * ((*(_QWORD *)(*a1 + 400) + (unint64_t)a2)
                               % (0xAAAAAAAAAAAAAAABLL
                                * ((uint64_t)(*(_QWORD *)(*a1 + 384) - *(_QWORD *)(*a1 + 376)) >> 4))))
                  + 8);
  v12 = *(_QWORD *)(v11 + 48) + 16 * a3;
  v14 = *(double *)v12;
  v13 = *(double *)(v12 + 8);
  v15 = *(double *)(*(_QWORD *)(v11 + 184) + 8 * a3);
  v149.f64[0] = *(float64_t *)v12;
  v149.f64[1] = v13;
  v150 = 1.0;
  v16 = *v10;
  v17 = *(_DWORD *)(*v10 + 992);
  if (v17 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v17 = *(_DWORD *)(v16 + 992);
    if (v17 <= 7)
      goto LABEL_3;
  }
  else if (v17 <= 7)
  {
LABEL_3:
    if (v17 <= 3)
    {
      if (v17 <= 1)
      {
        if (!v17)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        v152 = v149;
        *(_OWORD *)&v151[24] = xmmword_2102DD520;
        *(_OWORD *)v151 = xmmword_21030D320;
        *(double *)&v151[16] = -v149.f64[0];
        *(double *)&v151[40] = -v149.f64[1];
        v18 = *(_DWORD *)(v16 + 992);
        if (v18 == -1)
        {
LABEL_31:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          if (!*(_DWORD *)(v16 + 992))
          {
LABEL_33:
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          goto LABEL_50;
        }
LABEL_49:
        if (!v18)
          goto LABEL_33;
LABEL_50:
        a5 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v151, *(double *)v16), *(float64x2_t *)&v151[24], *(double *)(v16 + 8));
        a7.n128_u64[0] = vextq_s8(a5, a5, 8uLL).u64[0];
        v20 = (int8x16_t)vmlaq_n_f64(vmulq_f64(*(float64x2_t *)v151, (float64x2_t)0), *(float64x2_t *)&v151[24], *(double *)(v16 + 32));
        *(_QWORD *)&a6 = vextq_s8(v20, v20, 8uLL).u64[0];
        goto LABEL_51;
      }
      if (v17 == 2)
      {
        if (*(_DWORD *)(v16 + 212))
        {
          v31 = *(double *)(v16 + 168);
          v32 = *(double *)(v16 + 176);
          v33 = *(double *)(v16 + 184);
          _D1 = v149.f64[1];
          __asm { FMLA            D5, D1, V0.D[1] }
          v36 = v31 * *(double *)&_D5 + 1.0 + *(double *)&_D5 * *(double *)&_D5 * (v32 + v33 * *(double *)&_D5);
          v37 = v31 + v31 + *(double *)&_D5 * (v32 * 4.0 + *(double *)&_D5 * (v33 * 6.0));
          v38 = *(float64x2_t *)(v16 + 192);
          v39 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D5, 0), vmulq_f64(v149, vaddq_f64(v149, v149))), (float64x2_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL));
          v40 = vaddq_f64(v38, v38);
          v41 = vmulq_n_f64(v40, v149.f64[0]);
          v152 = vmlaq_n_f64(vaddq_f64(v39, vmulq_laneq_f64(v41, v149, 1)), v149, v36);
          v42 = vmulq_n_f64(v149, v37);
          v43 = vmulq_n_f64(v42, v149.f64[0]);
          v44 = vmulq_laneq_f64(v42, v149, 1);
          v45 = (float64x2_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL);
          v46.f64[1] = v45.f64[1];
          v46.f64[0] = vmuld_lane_f64(6.0, v38, 1);
          v47 = vmulq_f64(v149, v46);
          v45.f64[1] = 6.0 * v38.f64[0];
          v48 = vaddq_f64(v41, vmulq_laneq_f64(v45, v149, 1));
          v49 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v48.f64[0], 0);
          *(_QWORD *)&v49.f64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v47, 1), v47);
          v43.f64[0] = v36 + v43.f64[0];
          v44.f64[1] = v36 + v44.f64[1];
          *(float64x2_t *)v151 = vaddq_f64(v49, v43);
          *(double *)&v151[16] = -(vmulq_f64(*(float64x2_t *)v151, v149).f64[0] + *(double *)&v151[8] * v149.f64[1]);
          *(float64x2_t *)&v151[24] = vaddq_f64(v48, v44);
          *(double *)&v151[40] = -(vmulq_f64(*(float64x2_t *)&v151[24], v149).f64[0] + *(double *)&v151[32]
                                                                                     * v149.f64[1]);
          v18 = *(_DWORD *)(v16 + 992);
          if (v18 == -1)
            goto LABEL_31;
        }
        else
        {
          _V0.D[1] = v149.f64[1];
          v133 = *(double *)(v16 + 168);
          v134 = *(double *)(v16 + 176);
          v135 = *(double *)(v16 + 184);
          _D5 = v149.f64[1];
          __asm { FMLA            D4, D5, V0.D[1] }
          v138 = v133 * _D4 + 1.0 + _D4 * _D4 * (v134 + v135 * _D4);
          v152 = vmulq_n_f64(v149, v138);
          v139 = vmulq_n_f64(v149, v133 + v133 + _D4 * (v134 * 4.0 + _D4 * (v135 * 6.0)));
          v140 = vmulq_n_f64(v139, v149.f64[0]);
          v141 = vmulq_laneq_f64(v139, v149, 1);
          v140.f64[0] = v138 + v140.f64[0];
          v142 = vmulq_f64(v141, v149).f64[0];
          v141.f64[1] = v138 + v141.f64[1];
          *(float64x2_t *)v151 = v140;
          *(double *)&v151[16] = -(v140.f64[0] * v149.f64[0] + v140.f64[1] * v149.f64[1]);
          *(float64x2_t *)&v151[24] = v141;
          *(double *)&v151[40] = -(v142 + v141.f64[1] * v149.f64[1]);
          v18 = *(_DWORD *)(v16 + 992);
          if (v18 == -1)
            goto LABEL_31;
        }
        goto LABEL_49;
      }
LABEL_36:
      _Q5 = v149;
      *(_QWORD *)&v51 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
      _D0 = v149.f64[1];
      __asm { FMLA            D1, D0, V5.D[1] }
      if (_D1 >= 0.00000001)
      {
        v54 = _D1 + 1.0;
        v55 = sqrt(_D1);
        v143 = _D1;
        v144 = v51;
        v56 = atan2(v55, 1.0);
        v57 = *(int64x2_t *)(v16 + 184);
        v58 = *(int64x2_t *)(v16 + 168);
        v59 = (float64x2_t)vzip2q_s64(v58, v57);
        v60 = (float64x2_t)vzip1q_s64(v58, v57);
        v61 = vmulq_n_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v59, (float64x2_t)xmmword_210312E20), v56 * v56)), v56 * v56);
        v62 = v56 * v56 * (v56 * v56);
        v63 = v61.f64[0] + vmuld_lane_f64(v62, v61, 1) + 1.0;
        v64 = vmulq_n_f64(vaddq_f64(v60, vmulq_n_f64(v59, v56 * v56)), v56 * v56);
        v51 = v144;
        _Q5 = v149;
        v65 = v56 + v56 * (v64.f64[0] + vmuld_lane_f64(v62, v64, 1));
LABEL_46:
        v70 = v65 / v55;
        v80 = v63 / v54;
        v69 = vmulq_n_f64(_Q5, (v63 / v54 - v70) / v143);
        v68 = -v80;
        v71 = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u64[0];
        goto LABEL_47;
      }
      goto LABEL_39;
    }
    if (v17 > 5)
    {
      if (v17 == 6)
      {
        v154.f64[0] = v149.f64[0];
        v154.f64[1] = v13;
        sub_20EB2837C(&v152, (double *)&v153, &v154, (double *)(v16 + 168), (float64x2_t *)(v16 + 192), (double *)(v16 + 208));
        *(simd_double2 *)v151 = v153.columns[0];
        *(double *)&v151[16] = -(v153.columns[0].f64[0] * v149.f64[0]) - v13 * v153.columns[0].f64[1];
        *(simd_double2 *)&v151[24] = v153.columns[1];
        *(double *)&v151[40] = -(v153.columns[1].f64[0] * v149.f64[0]) - v13 * v153.columns[1].f64[1];
        v18 = *(_DWORD *)(v16 + 992);
        if (v18 == -1)
          goto LABEL_31;
        goto LABEL_49;
      }
      v19 = sub_20EB3345C(v16, &v152, (uint64_t)v151, &v149, 0);
    }
    else
    {
      if (v17 != 5)
        goto LABEL_36;
      v19 = sub_20EB29218(v152.f64, (uint64_t)v151, &v149, (int64x2_t *)(v16 + 168));
    }
LABEL_43:
    if ((v19 & 1) == 0)
      goto LABEL_51;
LABEL_48:
    v18 = *(_DWORD *)(v16 + 992);
    if (v18 == -1)
      goto LABEL_31;
    goto LABEL_49;
  }
  if (v17 <= 0xB)
  {
    if (v17 > 9)
    {
      if (v17 == 10)
        v19 = sub_20EB2450C(&v152, (uint64_t)v151, 0, (uint64_t)&v149, (double *)(v16 + 168), (*(double *)v16 + *(double *)(v16 + 32)) * 0.5);
      else
        v19 = sub_20EB3AF98(v16, &v152, (uint64_t)v151, &v149, 0);
    }
    else
    {
      if (v17 != 9)
      {
        _Q5 = v149;
        *(_QWORD *)&v51 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
        _D0 = v149.f64[1];
        __asm { FMLA            D1, D0, V5.D[1] }
        if (_D1 >= 0.00000001)
        {
          v54 = _D1 + 1.0;
          v55 = sqrt(_D1);
          v143 = _D1;
          v145 = v51;
          v72 = atan2(v55, 1.0);
          v73 = *(double *)(v16 + 168);
          v74 = *(double *)(v16 + 176);
          v75 = *(double *)(v16 + 184);
          v76 = *(double *)(v16 + 192);
          v77 = *(double *)(v16 + 200);
          v78 = *(double *)(v16 + 208);
          v79 = *(double *)(v16 + 216);
          v63 = v72
              * v72
              * (v73 * 3.0
               + v72
               * v72
               * (v74 * 5.0
                + v72
                * v72
                * (v75 * 7.0
                 + v72
                 * v72
                 * (v76 * 9.0 + v72 * v72 * (v77 * 11.0 + v72 * v72 * (v78 * 13.0 + v72 * v72 * 15.0 * v79))))))
              + 1.0;
          v51 = v145;
          _Q5 = v149;
          v65 = v72
              * (v72
               * v72
               * (v73
                + v72
                * v72
                * (v74 + v72 * v72 * (v75 + v72 * v72 * (v76 + v72 * v72 * (v77 + v72 * v72 * (v78 + v72 * v72 * v79))))))
               + 1.0);
          goto LABEL_46;
        }
LABEL_39:
        v68 = -1.0;
        v69.f64[0] = 0.0;
        v70 = 1.0;
        v71 = 0;
LABEL_47:
        v152 = vmulq_n_f64(_Q5, v70);
        *(_QWORD *)&v69.f64[1] = v71;
        v81 = vmulq_n_f64(v69, _Q5.f64[0]);
        v82 = vmulq_laneq_f64(v69, _Q5, 1);
        *(float64_t *)&v151[24] = v82.f64[0];
        v81.f64[0] = v70 + v81.f64[0];
        *(double *)&v151[16] = v68 * _Q5.f64[0];
        *(float64x2_t *)v151 = v81;
        *(double *)&v151[32] = v70 + v82.f64[1];
        *(double *)&v151[40] = v68 * v51;
        goto LABEL_48;
      }
      v19 = sub_20EB372E0(v16, &v152, (uint64_t)v151, &v149, 0);
    }
    goto LABEL_43;
  }
  if (v17 > 0xD)
  {
    if (v17 == 14)
      v19 = sub_20EB2498C(&v152, (uint64_t)v151, 0, (uint64_t)&v149, (double *)(v16 + 168), (*(double *)v16 + *(double *)(v16 + 32)) * 0.5);
    else
      v19 = sub_20EB3F050(v16, &v152, (uint64_t)v151, &v149, 0);
    goto LABEL_43;
  }
  if (v17 == 13)
  {
    v154 = v149;
    if (!sub_20EB295B8(&v152, (float64x2_t *)&v153, 0, (uint64_t)&v154, (double *)(v16 + 168), (*(double *)v16 + *(double *)(v16 + 32)) * 0.5))goto LABEL_51;
    _D0 = -v149.f64[1] / (v150 * v150);
    _V3.D[1] = v153.columns[0].f64[1];
    _V4.D[1] = v153.columns[1].f64[1];
    v24.f64[0] = 0.0;
    v24.f64[1] = 1.0 / v150;
    __asm { FMLA            D7, D0, V3.D[1] }
    *(_QWORD *)&v151[16] = _D7;
    *(float64x2_t *)v151 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v150), v153.columns[0].f64[0]), v24, (float64x2_t)v153.columns[0], 1);
    __asm { FMLA            D2, D0, V4.D[1] }
    *(_QWORD *)&v151[40] = _D2;
    *(float64x2_t *)&v151[24] = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v150), v153.columns[1].f64[0]), v24, (float64x2_t)v153.columns[1], 1);
    v18 = *(_DWORD *)(v16 + 992);
    if (v18 == -1)
      goto LABEL_31;
    goto LABEL_49;
  }
  v152 = 0uLL;
  v20.i64[0] = 0;
  memset(v151, 0, sizeof(v151));
LABEL_51:
  a5.i64[1] = v20.i64[0];
  a7.n128_f64[1] = a6;
  *(int8x16_t *)v151 = a5;
  *(__n128 *)&v151[16] = a7;
  sub_20E8BE3B0((simd_double2x2 *)v151, &v153);
  v146 = v153;
  v83 = (uint64_t *)a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v83[1] - *v83) >> 3) <= v9
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 968, (uint64_t)"pose_idx < observation_bearings_.size() && \"Invalid access: Index out of range.\"", 80, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v83[4] - v83[3]) >> 3) <= v9
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 971, (uint64_t)"pose_idx < bearing_to_observation_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v84 = v83[6];
  if (0xAAAAAAAAAAAAAAABLL * ((v83[7] - v84) >> 3) <= v9)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 974, (uint64_t)"pose_idx < observation_to_bearing_index_mappping_.size() && \"Invalid access: Index out of range.\"", 97, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v84 = v83[6];
  }
  v86 = (uint64_t *)(v84 + 24 * v9);
  v85 = *v86;
  if (a3 >= (unint64_t)((v86[1] - *v86) >> 2))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 977, (uint64_t)"observation_idx < observation_to_bearing_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 114, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v85 = *(_QWORD *)(v83[6] + 24 * v9);
  }
  if ((*(_DWORD *)(v85 + 4 * a3) & 0x80000000) == 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 980, (uint64_t)"observation_to_bearing_index_mappping_[pose_idx][observation_idx] < 0 && \"Observation is already assigned to an existing bearing.\"", 130, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v87 = *v83;
  v88 = 24 * v9;
  v89 = *v83 + 24 * v9;
  v90 = *(float64x2_t **)v89;
  v91 = *(float64x2_t **)(v89 + 8);
  v92 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v91 - *(_QWORD *)v89) >> 4);
  if (v92 != (uint64_t)(*(_QWORD *)(v83[3] + 24 * v9 + 8) - *(_QWORD *)(v83[3] + 24 * v9)) >> 2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 984, (uint64_t)"observation_bearings_[pose_idx].size() == bearing_to_observation_index_mappping_[pose_idx].size() && \"Size mismatch.\"", 117, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v87 = *v83;
    v93 = *v83 + 24 * v9;
    v90 = *(float64x2_t **)v93;
    v91 = *(float64x2_t **)(v93 + 8);
    v92 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v91 - *(_QWORD *)v93) >> 4);
  }
  v94 = vmulq_n_f64((float64x2_t)v146.columns[0], v15 * v15);
  v95 = vmulq_n_f64((float64x2_t)v146.columns[1], v15 * v15);
  v96 = vmlaq_n_f64(vmulq_n_f64(v94, v146.columns[0].f64[0]), v95, v146.columns[1].f64[0]);
  v97 = vmlaq_laneq_f64(vmulq_laneq_f64(v94, (float64x2_t)v146.columns[0], 1), v95, (float64x2_t)v146.columns[1], 1);
  v98 = (void **)(v87 + v88);
  v99 = (char **)(v87 + v88 + 8);
  *(_DWORD *)(*(_QWORD *)(v83[6] + 24 * v9) + 4 * a3) = v92;
  v100 = (char **)(v87 + v88 + 16);
  if (v91 >= (float64x2_t *)*v100)
  {
    v102 = v92 + 1;
    if (v92 + 1 > 0x555555555555555)
      sub_20E867F44();
    v147 = v97;
    v148 = v96;
    if (0x5555555555555556 * ((*v100 - (char *)v90) >> 4) > v102)
      v102 = 0x5555555555555556 * ((*v100 - (char *)v90) >> 4);
    if (0xAAAAAAAAAAAAAAABLL * ((*v100 - (char *)v90) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v103 = 0x555555555555555;
    else
      v103 = v102;
    if (v103 > 0x555555555555555)
      sub_20E877A38();
    v104 = (char *)operator new(48 * v103);
    v105 = (float64x2_t *)&v104[48 * v92];
    v105->f64[0] = v14;
    v105->f64[1] = v13;
    v106 = &v104[48 * v103];
    v105[1] = v148;
    v105[2] = v147;
    v101 = (char *)&v105[3];
    if (v91 != v90)
    {
      do
      {
        v105[-3] = v91[-3];
        v107 = v91[-1];
        v105[-2] = v91[-2];
        v105[-1] = v107;
        v105 -= 3;
        v91 -= 3;
      }
      while (v91 != v90);
      v90 = (float64x2_t *)*v98;
    }
    *v98 = v105;
    *v99 = v101;
    *v100 = v106;
    if (v90)
      operator delete(v90);
  }
  else
  {
    v91->f64[0] = v14;
    v91->f64[1] = v13;
    v101 = (char *)&v91[3];
    v91[1] = v96;
    v91[2] = v97;
  }
  *v99 = v101;
  v108 = v83[3] + 24 * v9;
  v109 = (uint64_t *)(v108 + 8);
  v110 = *(char **)(v108 + 8);
  v111 = *(_QWORD *)(v108 + 16);
  if ((unint64_t)v110 < v111)
  {
    *(_DWORD *)v110 = a3;
    v112 = (uint64_t)(v110 + 4);
    goto LABEL_101;
  }
  v113 = *(char **)v108;
  v114 = (uint64_t)&v110[-*(_QWORD *)v108];
  v115 = v114 >> 2;
  v116 = (v114 >> 2) + 1;
  if (v116 >> 62)
    sub_20E867F44();
  v117 = v111 - (_QWORD)v113;
  if (v117 >> 1 > v116)
    v116 = v117 >> 1;
  if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
    v118 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v118 = v116;
  if (v118)
  {
    if (v118 >> 62)
      sub_20E877A38();
    v119 = operator new(4 * v118);
    v120 = (unsigned int *)&v119[4 * v115];
    v121 = &v119[4 * v118];
    *v120 = a3;
    v112 = (uint64_t)(v120 + 1);
    v122 = v110 - v113;
    if (v110 == v113)
      goto LABEL_99;
    goto LABEL_93;
  }
  v119 = 0;
  v120 = (unsigned int *)(4 * v115);
  v121 = 0;
  *(_DWORD *)(4 * v115) = a3;
  v112 = 4 * v115 + 4;
  v122 = v110 - v113;
  if (v110 != v113)
  {
LABEL_93:
    v123 = v122 - 4;
    if (v123 < 0x2C)
      goto LABEL_119;
    if ((unint64_t)(v110 - &v119[v114]) < 0x20)
      goto LABEL_119;
    v124 = (v123 >> 2) + 1;
    v125 = 4 * (v124 & 0x7FFFFFFFFFFFFFF8);
    v126 = &v110[-v125];
    v120 = (unsigned int *)((char *)v120 - v125);
    v127 = &v119[4 * v115 - 16];
    v128 = v110 - 16;
    v129 = v124 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v130 = *(_OWORD *)v128;
      *(v127 - 1) = *((_OWORD *)v128 - 1);
      *v127 = v130;
      v127 -= 2;
      v128 -= 32;
      v129 -= 8;
    }
    while (v129);
    v110 = v126;
    if (v124 != (v124 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_119:
      do
      {
        v131 = *((_DWORD *)v110 - 1);
        v110 -= 4;
        *--v120 = v131;
      }
      while (v110 != v113);
    }
  }
LABEL_99:
  *(_QWORD *)v108 = v120;
  *v109 = v112;
  *(_QWORD *)(v108 + 16) = v121;
  if (v113)
    operator delete(v113);
LABEL_101:
  *v109 = v112;
}

BOOL sub_20F0BA0C8(float64x2_t *a1, uint64_t a2, float64x2_t *a3, double *a4)
{
  double v4;
  double v6;
  double v7;
  double v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;

  v4 = a3[1].f64[0];
  if (v4 >= 0.00000001)
  {
    _Q5 = vmulq_n_f64(*a3, 1.0 / v4);
    v6 = a4[1];
    v7 = a4[2];
    _D4 = vmuld_lane_f64(1.0 / v4, *a3, 1);
    __asm { FMLA            D17, D4, V5.D[1] }
    v14 = *a4 * _D17 + 1.0 + _D17 * _D17 * (v6 + v7 * _D17);
    v15 = *a4 + *a4 + _D17 * (v6 * 4.0 + _D17 * (v7 * 6.0));
    v16 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14, 0);
    *a1 = vmulq_n_f64(_Q5, v14);
    v17 = vmulq_n_f64(_Q5, v15);
    v18 = vmulq_n_f64(v17, _Q5.f64[0]);
    v19 = vmulq_n_f64(v17, _D4);
    v20.f64[0] = v18.f64[0];
    v20.f64[1] = v19.f64[1];
    v21 = vaddq_f64(v16, v20);
    v16.f64[0] = v21.f64[0];
    v16.f64[1] = v18.f64[1];
    v21.f64[0] = v19.f64[0];
    v22 = vmulq_n_f64(v21, 1.0 / v4);
    v23 = vmulq_n_f64(v16, 1.0 / v4);
    *(float64x2_t *)a2 = v23;
    *(double *)(a2 + 16) = -(vmuld_n_f64(v23.f64[0], _Q5.f64[0]) + v23.f64[1] * _Q5.f64[1]);
    *(float64x2_t *)(a2 + 24) = v22;
    *(double *)(a2 + 40) = -(vmuld_n_f64(v22.f64[0], _Q5.f64[0]) + v22.f64[1] * _Q5.f64[1]);
  }
  return v4 >= 0.00000001;
}

float64_t sub_20F0BA1B0(int64x2_t *a1, double *a2, double a3)
{
  int64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  double v7;
  float64x2_t v8;

  v3 = a1[1];
  v4 = (float64x2_t)vzip2q_s64(*a1, v3);
  v5 = (float64x2_t)vzip1q_s64(*a1, v3);
  v6 = vmulq_n_f64(vaddq_f64(vmulq_f64(v5, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v4, (float64x2_t)xmmword_210312E20), a3 * a3)), a3 * a3);
  v7 = a3 * a3 * (a3 * a3);
  *a2 = v6.f64[0] + vmuld_lane_f64(v7, v6, 1) + 1.0;
  v8 = vmulq_n_f64(vaddq_f64(v5, vmulq_n_f64(v4, a3 * a3)), a3 * a3);
  return (v8.f64[0] + vmuld_lane_f64(v7, v8, 1)) * a3 + a3;
}

double sub_20F0BA21C(double *a1, double *a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  *a2 = a3
      * a3
      * (*a1 * 3.0
       + a3
       * a3
       * (v4 * 5.0
        + a3
        * a3
        * (v5 * 7.0 + a3 * a3 * (v6 * 9.0 + a3 * a3 * (v7 * 11.0 + a3 * a3 * (v8 * 13.0 + a3 * a3 * 15.0 * v9))))))
      + 1.0;
  return (a3
        * a3
        * (v3 + a3 * a3 * (v4 + a3 * a3 * (v5 + a3 * a3 * (v6 + a3 * a3 * (v7 + a3 * a3 * (v8 + a3 * a3 * v9))))))
        + 1.0)
       * a3;
}

uint64_t sub_20F0BA2E8(uint64_t *a1, char **a2, uint64_t *a3, uint64_t a4, unint64_t **a5, unint64_t **a6, __n128 a7)
{
  BOOL v12;
  char v13;
  _BOOL8 v14;
  double v15;
  double v16;
  char *v17;
  char *v18;
  int64_t v19;
  int64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  unsigned int v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  double v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  unint64_t v45;
  float64x2_t v46;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  float64x2_t *v54;
  double *v55;
  double v63;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  double v72;
  char *v73;
  float64x2_t *v74;
  double *v75;
  double v80;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  double v88;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  double v103;
  double v106;
  int v108;
  int v109;
  int v110;
  float64_t v111;
  float64x2_t v112;
  float64x2_t v113;
  double v114;
  int v115;
  uint64_t v116;
  float64x2_t v117;
  char *v118;
  float64x2_t *v119;
  double *v120;
  float64x2_t *v121;
  double v122;
  double v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  double v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  int8x16_t v144;
  int8x16_t v145;
  double v146;
  double v147;
  double v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  char *v153;
  __int128 *v154;
  double *v155;
  __int128 *v156;
  double v157;
  double v158;
  double v159;
  double v169;
  double v174;
  double v175;
  char v176;
  uint64_t v177;
  unint64_t **v178;
  unint64_t **v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t *v182;
  unint64_t *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  unint64_t v188;
  char *v189;
  char *v190;
  unint64_t v191;
  BOOL v193;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  _OWORD *v198;
  __int128 *v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  __int128 *v213;
  uint64_t v214;
  __int128 v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  __int128 *v228;
  uint64_t v229;
  __int128 v230;
  uint64_t v231;
  int64x2_t *v232;
  char *v233;
  unint64_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v240;
  double v241;
  double v242;
  double v243;
  double *v244;
  float64x2_t **v245;
  float64x2_t *v246;
  float64x2_t *v247;
  float64x2_t *v248;
  double *v249;
  double v251;
  int8x16_t v256;
  float64x2_t v267;
  unint64_t v270;
  unint64_t *v271;
  unint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  _BYTE *v278;
  unint64_t *v279;
  uint64_t v280;
  int64_t v281;
  unint64_t v282;
  float64x2_t v283;
  double v284;
  float64x2_t v285;
  unint64_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  unint64_t v300;
  unint64_t *v301;
  uint64_t v302;
  unint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  _BYTE *v309;
  unint64_t *v310;
  int64_t v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t *v316;
  _OWORD *v317;
  unint64_t *v318;
  uint64_t v319;
  __int128 v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t *v325;
  _OWORD *v326;
  unint64_t *v327;
  uint64_t v328;
  __int128 v329;
  unint64_t v330;
  unint64_t *v331;
  unint64_t *v332;
  int8x16_t v333;
  float64x2_t v334;
  int8x16_t v335;
  int8x16_t v336;
  unint64_t v337;
  float64_t v338;
  float64_t v339;
  float64x2_t v340;
  uint64_t v341;
  float64_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v347;
  int8x16_t v348;
  float64x2_t v349;
  float64x2_t v350;
  double v352;
  double v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  unint64_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  unint64_t v365;
  float64x2_t v366;
  int v367;
  char *v368;
  int8x16_t *v369;
  float64x2_t *v370;
  __int128 *v371;
  double *v372;
  double v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v391;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  int v397;
  unint64_t v402;
  uint64_t v403;
  BOOL v404;
  uint64_t *v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  double v414;
  double v415;
  float64x2_t v416;
  double v417;
  float64x2_t v418;
  double v419;
  float64x2_t v420;
  double *v421;
  char v422;
  float64x2_t v423;
  unint64_t **v425;
  uint64_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  uint64_t v430;
  unint64_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  int8x16_t v442;
  int8x16_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  double v450;
  __n128 v451;
  float64x2_t v452;
  uint64_t v453;
  double v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  simd_double2x2 v461;
  float64x2_t v462;
  double v463;
  double v464;
  double v465;
  uint64_t v466;
  char v467;
  simd_double2x2 v468;
  float64x2_t v469;
  float64x2_t v470;
  float64_t v471;

  if (a6)
    v12 = a5 != 0;
  else
    v12 = 0;
  if ((a5 != 0) != (a6 != 0)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/TwoPoint2D2DAdaptiveRansac.h", 86, (uint64_t)"classify_correspondences || (!inlier_correspondence_indices && !outlier_correspondence_indices)", 95, (uint64_t)"The inlier and outlier correspondence indices must be used together.", 68, (void (*)(void **))sub_21023DDB0)|| ((v425 = a6, !*((_BYTE *)a1 + 24)) ? (v13 = 1) : (v13 = v12), (v13 & 1) == 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/TwoPoint2D2DAdaptiveRansac.h", 88, (uint64_t)"!config_.enable_refinement || classify_correspondences", 54, (uint64_t)"Refinement requires correspondence classification.", 50, (void (*)(void **))sub_21023DDB0)))
  {
    abort();
  }
  v14 = 0;
  v453 = a3[2];
  a7.n128_u64[0] = a3[5];
  v451 = a7;
  v442 = *(int8x16_t *)(a3 + 3);
  v443 = *(int8x16_t *)a3;
  v450 = *((double *)a3 + 8);
  v405 = a3;
  v429 = *((float64x2_t *)a3 + 3);
  v432 = *a1;
  v15 = *((double *)a1 + 1);
  v16 = *((double *)a1 + 2);
  *(_DWORD *)(a4 + 32) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  v18 = *a2;
  v17 = a2[1];
  v19 = v17 - *a2;
  if ((unint64_t)v19 < 0x40)
    return v14;
  v20 = v17 - v18;
  v421 = (double *)a1;
  v404 = v12;
  if (v17 == v18)
  {
    v22 = 0;
    v26 = 0;
    goto LABEL_23;
  }
  if (v19 < 0)
    sub_20E867F44();
  v21 = (char *)operator new(v19);
  v22 = v21;
  v23 = v20 - 32;
  if ((unint64_t)(v20 - 32) < 0xE0)
  {
    v24 = v21;
    do
    {
LABEL_16:
      *(_OWORD *)v24 = *(_OWORD *)v18;
      *((_OWORD *)v24 + 1) = *((_OWORD *)v18 + 1);
      v24 += 32;
      v18 += 32;
    }
    while (v18 != v17);
    goto LABEL_17;
  }
  v188 = v23 & 0xFFFFFFFFFFFFFFE0 | 0x18;
  v189 = &v21[v188];
  v190 = &v18[v188];
  v191 = (v23 & 0xFFFFFFFFFFFFFFE0) + 32;
  v193 = v21 + 8 < &v18[v191] && v18 + 8 < &v21[v191];
  v24 = v21;
  if (v18 < v189 && v21 < v190)
    goto LABEL_16;
  if (v193)
    goto LABEL_16;
  v195 = (v23 >> 5) + 1;
  v196 = 32 * (v195 & 0xFFFFFFFFFFFFFFCLL);
  v197 = &v18[v196];
  v24 = &v21[v196];
  v198 = v21 + 64;
  v199 = (__int128 *)(v18 + 64);
  v200 = v195 & 0xFFFFFFFFFFFFFFCLL;
  do
  {
    v202 = *(v199 - 4);
    v201 = *(v199 - 3);
    v203 = *(v199 - 1);
    v205 = *v199;
    v204 = v199[1];
    v207 = v199[2];
    v206 = v199[3];
    *(v198 - 2) = *(v199 - 2);
    *(v198 - 1) = v203;
    *(v198 - 4) = v202;
    *(v198 - 3) = v201;
    v198[2] = v207;
    v198[3] = v206;
    *v198 = v205;
    v198[1] = v204;
    v198 += 8;
    v199 += 8;
    v200 -= 4;
  }
  while (v200);
  v18 = v197;
  if (v195 != (v195 & 0xFFFFFFFFFFFFFFCLL))
    goto LABEL_16;
LABEL_17:
  v25 = v24 - v21;
  v26 = &v21[(v24 - v21) & 0xFFFFFFFFFFFFFFE0];
  if (v24 != v21)
  {
    v27 = 0;
    v28 = v25 >> 5;
    v29 = v21 + 16;
    v30 = 12345;
    do
    {
      v30 = 214013 * v30 + 2531011;
      v31 = &v21[32 * ((HIWORD(v30) & 0x7FFF) % v28) + 32 * v27];
      v32 = *(_OWORD *)v31;
      *(_OWORD *)v31 = *(v29 - 1);
      *(v29 - 1) = v32;
      v33 = *((_OWORD *)v31 + 1);
      *((_OWORD *)v31 + 1) = *v29;
      *v29 = v33;
      v29 += 2;
      ++v27;
      --v28;
    }
    while (v28);
    v422 = 0;
    if (v15 < 0.0)
      goto LABEL_25;
LABEL_24:
    if (v15 <= 1.0)
      goto LABEL_27;
    goto LABEL_25;
  }
LABEL_23:
  v422 = 1;
  v30 = 12345;
  if (v15 >= 0.0)
    goto LABEL_24;
LABEL_25:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/AdaptiveRansac.h", 75, (uint64_t)"max_inlier_probability >= 0.0 && max_inlier_probability <= 1.0", 62, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v19 = a2[1] - *a2;
LABEL_27:
  v403 = vextq_s8(v442, v442, 8uLL).u64[0];
  v426 = vextq_s8(v443, v443, 8uLL).u64[0];
  v428 = (float64x2_t)vextq_s8((int8x16_t)v429, (int8x16_t)v429, 8uLL);
  v34 = v15 * v15;
  if (v15 * v15 < 0.00000001)
  {
    v402 = -1;
    v430 = a4;
    if (v432)
      goto LABEL_29;
  }
  else
  {
    v402 = vcvtpd_u64_f64(-11.5129255 / log(1.0 - v34));
    v430 = a4;
    if (v432)
    {
LABEL_29:
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = (double)(unint64_t)(v19 >> 5);
      v39 = (v38 + 2.0) * (v38 + 2.0);
      v419 = v38;
      v40 = v38 + 3.0;
      *(_QWORD *)&_Q3.f64[0] = v443.i64[0];
      *(_QWORD *)&v41.f64[0] = v443.i64[0];
      *(_QWORD *)&v42.f64[0] = v426;
      v43.f64[0] = v428.f64[0];
      *(_QWORD *)&v41.f64[1] = v426;
      v448 = v41;
      *(_QWORD *)&v41.f64[0] = v442.i64[0];
      *(_QWORD *)&v41.f64[1] = v403;
      v446 = v41;
      v41.f64[0] = v429.f64[0];
      v41.f64[1] = v428.f64[0];
      v444 = v41;
      v440 = (float64x2_t)vdupq_lane_s64(v426, 0);
      v436 = (float64x2_t)vdupq_lane_s64(v403, 0);
      v438 = (float64x2_t)vdupq_lane_s64(v453, 0);
      v417 = v40 * v39;
      *(_QWORD *)&v44.f64[0] = v451.n128_u64[0];
      v434 = (float64x2_t)vdupq_lane_s64(v451.n128_i64[0], 0);
      v45 = -1;
      *(_QWORD *)&v46.f64[0] = v453;
      *(_QWORD *)&v46.f64[1] = v443.i64[0];
      v413 = v46;
      *(_QWORD *)&v46.f64[0] = v426;
      *(_QWORD *)&v46.f64[1] = v451.n128_u64[0];
      v412 = v46;
      *(_QWORD *)&v46.f64[0] = v442.i64[0];
      *(_QWORD *)&v46.f64[1] = v403;
      v411 = v46;
      _Q17.f64[0] = v450;
      _Q17.f64[1] = v429.f64[0];
      *(_QWORD *)&v42.f64[1] = v453;
      v409 = v42;
      v410 = _Q17;
      *(_QWORD *)&_Q3.f64[1] = v403;
      *(_QWORD *)&v44.f64[1] = v442.i64[0];
      v407 = v44;
      v408 = _Q3;
      v43.f64[1] = v450;
      v406 = v43;
      v414 = v15 * v15;
      v415 = v15;
      while (1)
      {
        v49 = v26 - v22;
        if ((unint64_t)(v26 - v22) <= 0x20)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/DataPointCorrespondenceUtil.h", 92, (uint64_t)"correspondences.size() >= SampleSize", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v49 = v26 - v22;
        }
        v50 = v49 >> 5;
        v30 = 214013 * v30 + 2531011;
        v51 = (HIWORD(v30) & 0x7FFF) % (unint64_t)(v49 >> 5);
        do
        {
          v30 = 214013 * v30 + 2531011;
          v52 = (HIWORD(v30) & 0x7FFF) % v50;
        }
        while (v51 == v52);
        v53 = &v22[32 * v51];
        v54 = *(float64x2_t **)v53;
        v55 = (double *)*((_QWORD *)v53 + 2);
        _Q0 = *v54;
        _D2 = _Q0.f64[1];
        __asm { FMLA            D1, D2, V0.D[1] }
        _Q3.f64[0] = 1.0 / sqrt(_D1 + 1.0);
        _Q6 = vmulq_n_f64(*v54, _Q3.f64[0]);
        v63 = v55[1];
        _Q2 = vaddq_f64(v444, vmlaq_n_f64(vmulq_n_f64(v448, *v55), v446, v63));
        *(_QWORD *)&_Q19.f64[1] = v451.n128_u64[1];
        _Q0.f64[0] = v450 + *(double *)&v453 * *v55 + v451.n128_f64[0] * v63;
        _Q1 = vmulq_f64(_Q2, _Q2);
        _D4 = _Q2.f64[1];
        __asm { FMLA            D1, D4, V2.D[1] }
        _Q1.f64[0] = 1.0 / sqrt(_Q1.f64[0] + _Q0.f64[0] * _Q0.f64[0]);
        v67 = vmulq_n_f64(_Q2, _Q1.f64[0]);
        v70 = vmulq_f64(_Q0, _Q1);
        v68 = (float64x2_t)vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q3, 8uLL);
        _Q3.f64[1] = _Q6.f64[0];
        v69 = (float64x2_t)vextq_s8((int8x16_t)v67, (int8x16_t)v70, 8uLL);
        v70.f64[1] = v67.f64[0];
        _Q1 = vmlsq_f64(vmulq_f64(v68, v70), _Q3, v69);
        *(_QWORD *)&v72 = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(_Q6, v67, 1), v67, _Q6, 1);
        _Q3 = vmulq_f64(_Q1, _Q1);
        _Q6.f64[0] = _Q1.f64[1];
        __asm { FMLA            D3, D6, V1.D[1] }
        _Q3.f64[0] = sqrt(vmlad_n_f64(_Q3.f64[0], v72, v72));
        if (_Q3.f64[0] < 0.02)
          goto LABEL_48;
        v73 = &v22[32 * v52];
        v74 = *(float64x2_t **)v73;
        v75 = (double *)*((_QWORD *)v73 + 2);
        _Q6 = *v74;
        _D16 = _Q6.f64[1];
        __asm { FMLA            D7, D16, V6.D[1] }
        _Q17.f64[0] = 1.0 / sqrt(_D7 + 1.0);
        _Q20 = vmulq_n_f64(*v74, _Q17.f64[0]);
        v80 = v75[1];
        _Q16 = vaddq_f64(v444, vmlaq_n_f64(vmulq_n_f64(v448, *v75), v446, v80));
        _Q6.f64[0] = v450 + *(double *)&v453 * *v75 + v451.n128_f64[0] * v80;
        _Q7 = vmulq_f64(_Q16, _Q16);
        _D18 = _Q16.f64[1];
        __asm { FMLA            D7, D18, V16.D[1] }
        _Q7.f64[0] = 1.0 / sqrt(_Q7.f64[0] + _Q6.f64[0] * _Q6.f64[0]);
        v84 = vmulq_n_f64(_Q16, _Q7.f64[0]);
        _Q19 = vmulq_f64(_Q6, _Q7);
        v85 = (float64x2_t)vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q17, 8uLL);
        _Q17.f64[1] = _Q20.f64[0];
        v86 = (float64x2_t)vextq_s8((int8x16_t)v84, (int8x16_t)_Q19, 8uLL);
        _Q19.f64[1] = v84.f64[0];
        _Q7 = vmlsq_f64(vmulq_f64(v85, _Q19), _Q17, v86);
        *(_QWORD *)&v88 = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(_Q20, v84, 1), v84, _Q20, 1);
        _Q17 = vmulq_f64(_Q7, _Q7);
        _Q20.f64[0] = _Q7.f64[1];
        __asm { FMLA            D17, D20, V7.D[1] }
        _Q17.f64[0] = sqrt(vmlad_n_f64(_Q17.f64[0], v88, v88));
        if (_Q17.f64[0] < 0.02)
        {
LABEL_48:
          if (v35)
          {
            v35 = 1;
          }
          else
          {
            _Q3 = v446;
            v117 = v448;
            if ((v422 & 1) != 0)
            {
              v115 = 0;
              v112.f64[0] = 0.0;
              v35 = 1;
              v113.f64[0] = 0.0;
              v111 = 0.0;
              v114 = 0.0;
              ++v37;
              v116 = v430;
              if (*(double *)v430 < 0.0)
                goto LABEL_66;
            }
            else
            {
              v114 = 0.0;
              v118 = v22;
              do
              {
                v119 = (float64x2_t *)*((_QWORD *)v118 + 1);
                v120 = (double *)*((_QWORD *)v118 + 2);
                v121 = (float64x2_t *)*((_QWORD *)v118 + 3);
                v122 = v120[1];
                v123 = 1.0 / (v450 + *(double *)&v453 * *v120 + v451.n128_f64[0] * v122);
                v456 = vaddq_f64(v444, vmlaq_n_f64(vmulq_n_f64(v117, *v120), _Q3, v122));
                v458 = *(float64x2_t *)*(_QWORD *)v118;
                v124 = vmulq_n_f64(vnegq_f64(v456), v123 * v123);
                v125.f64[0] = 0.0;
                v454 = v123;
                v125.f64[1] = v123;
                v126 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v123, *(double *)v443.i64), v440, v125), v438, v124);
                v127 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v123, *(double *)v442.i64), v436, v125), v434, v124);
                v128 = vmlaq_laneq_f64(vmulq_n_f64(v126, v121->f64[0]), v127, *v121, 1);
                v129 = vmlaq_laneq_f64(vmulq_n_f64(v126, v121[1].f64[0]), v127, v121[1], 1);
                v130 = vmlaq_n_f64(vmulq_n_f64(v128, v126.f64[0]), v129, v127.f64[0]);
                v131 = vaddq_f64(v119[1], vmlaq_laneq_f64(vmulq_laneq_f64(v128, v126, 1), v129, v127, 1));
                v461.columns[0] = (simd_double2)vaddq_f64(*v119, v130);
                v461.columns[1] = (simd_double2)v131;
                sub_20E8BE3B0(&v461, &v468);
                _Q5 = vmlsq_lane_f64(v458, v456, v454, 0);
                _D0 = vmuld_lane_f64(0.225, _Q5, 1);
                _V2.D[1] = v468.columns[0].f64[1];
                _V3.D[1] = v468.columns[1].f64[1];
                __asm
                {
                  FMLA            D4, D0, V2.D[1]
                  FMLA            D1, D0, V3.D[1]
                  FMLA            D0, D1, V5.D[1]
                }
                _NF = _D0 < v16;
                v111 = 0.0;
                if (_NF)
                  v139 = 1.0;
                else
                  v139 = 0.0;
                v114 = v114 + v139;
                v118 += 32;
                _Q3 = v446;
                v117 = v448;
              }
              while (v118 != v26);
              v115 = 0;
              v35 = 1;
              v112.f64[0] = 0.0;
              v113.f64[0] = 0.0;
              ++v37;
              v116 = v430;
              if (v114 > *(double *)v430)
              {
LABEL_66:
                *(double *)v116 = v114;
                *(float64_t *)(v116 + 24) = v111;
                v112.f64[1] = v113.f64[0];
                *(float64x2_t *)(v116 + 8) = v112;
                *(_DWORD *)(v116 + 32) = v115;
                if (v34 >= 0.00000001)
                {
                  v175 = v114 / v419 + sqrt((v114 + 1.0) * (v419 - v114 + 1.0) / v417) * -4.0;
                  if (v175 <= 0.0)
                    v175 = v114 / v419;
                  if (v175 <= v15)
                    v45 = vcvtpd_u64_f64(-11.5129255 / log(1.0 - v175 * v175));
                  else
                    v45 = v402;
                }
              }
            }
          }
        }
        else
        {
          _Q21 = (float64x2_t)vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL);
          _Q20 = (float64x2_t)vextq_s8((int8x16_t)_Q7, (int8x16_t)_Q7, 8uLL);
          v91.f64[0] = _Q21.f64[0];
          v91.f64[1] = v72;
          v92.f64[0] = v72;
          v92.f64[1] = _Q1.f64[0];
          _Q26.f64[0] = _Q20.f64[0];
          _Q26.f64[1] = v88;
          v94.f64[0] = v88;
          v94.f64[1] = _Q7.f64[0];
          _Q24 = vmlsq_f64(vmulq_f64(v91, v94), v92, _Q26);
          v96 = vmlsq_f64(vmulq_f64(_Q1, _Q20), _Q21, _Q7);
          _Q25 = vmulq_f64(_Q24, _Q24);
          _Q26.f64[0] = _Q24.f64[1];
          __asm { FMLA            D25, D26, V24.D[1] }
          _Q25.f64[0] = sqrt(vmlad_n_f64(_Q25.f64[0], v96.f64[0], v96.f64[0]));
          if (_Q25.f64[0] / (_Q3.f64[0] * _Q17.f64[0]) >= 0.02)
          {
            _Q25.f64[0] = 1.0 / _Q25.f64[0];
            v98 = vmulq_f64(v96, _Q25);
            *(_QWORD *)&_Q24.f64[1] = vextq_s8((int8x16_t)_Q24, (int8x16_t)_Q24, 8uLL).u64[0];
            v99 = vmulq_n_f64(_Q24, _Q25.f64[0]);
            v100 = (float64x2_t)vextq_s8((int8x16_t)v99, (int8x16_t)v98, 8uLL);
            v101.f64[0] = v98.f64[0];
            v101.f64[1] = v99.f64[0];
            *(_QWORD *)&v70.f64[1] = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
            *(_QWORD *)&v69.f64[1] = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u64[0];
            _Q5 = vmlsq_f64(vmulq_f64(v70, v100), v69, v101);
            *(_QWORD *)&_Q19.f64[1] = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
            *(_QWORD *)&v103 = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v67, 1), v99), v67, v99, 1);
            *(_QWORD *)&v86.f64[1] = vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u64[0];
            _Q2 = vmlsq_f64(vmulq_f64(_Q19, v100), v86, v101);
            __asm { FMLA            D1, D21, V5.D[1] }
            v106 = vmlad_n_f64(_D1, v72, v103) / (_Q3.f64[0] * _Q3.f64[0]);
            _Q1 = vmulq_f64(_Q7, _Q2);
            __asm { FMLA            D1, D20, V2.D[1] }
            _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v88, vmlsq_laneq_f64(vmulq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v84, 1), v99), v84, v99, 1).f64[0])/ (_Q17.f64[0]* _Q17.f64[0]);
            v108 = _Q1.f64[0] < 0.0 ? -1 : 0;
            v109 = v106 >= 0.0 ? (_Q1.f64[0] >= 0.0) + 1 : v108;
            v110 = v109 - (_Q1.f64[0] < 0.0);
            if (v110)
            {
              _Q1.f64[0] = (double)((v110 >> 31) + (v110 >= 0));
              *(_QWORD *)&v111 = *(_OWORD *)&vmulq_f64(v98, _Q1);
              *(_QWORD *)&v99.f64[1] = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u64[0];
              v112 = vmulq_n_f64(v99, _Q1.f64[0]);
              v113 = (float64x2_t)vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL);
              if ((v422 & 1) != 0)
              {
                v114 = 0.0;
                v115 = 1;
                ++v37;
                v116 = v430;
                if (*(double *)v430 < 0.0)
                  goto LABEL_66;
              }
              else
              {
                v140.f64[0] = v111;
                v140.f64[1] = v112.f64[0];
                v141.f64[0] = v112.f64[0];
                v141.f64[1] = v113.f64[0];
                v142.f64[0] = v113.f64[0];
                v142.f64[1] = v111;
                v143 = vmlsq_f64(vmulq_f64(v410, v142), v406, v140);
                v144 = (int8x16_t)vmlsq_f64(vmulq_f64(v411, v140), v407, v141);
                v145 = (int8x16_t)vmlsq_f64(vmulq_f64(v412, v141), v408, v142);
                _Q3 = vmlsq_f64(vmulq_f64(v413, v142), v409, v140);
                *(_QWORD *)&v146 = *(_OWORD *)&vmlsq_f64(vmulq_f64(v428, v112), v429, v113);
                *(_QWORD *)&v147 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
                _Q17 = (float64x2_t)vextq_s8(v145, v145, 8uLL);
                *(_QWORD *)&v148 = vextq_s8(v144, v144, 8uLL).u64[0];
                _Q19 = (float64x2_t)vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL);
                v149 = (float64x2_t)vextq_s8(v145, v144, 8uLL);
                v150.f64[0] = _Q3.f64[0];
                *(_QWORD *)&v150.f64[1] = v145.i64[1];
                v151 = (float64x2_t)vextq_s8((int8x16_t)_Q3, v144, 8uLL);
                *(_QWORD *)&v152.f64[0] = v145.i64[0];
                *(_QWORD *)&v152.f64[1] = v144.i64[1];
                v114 = 0.0;
                v153 = v22;
                do
                {
                  v154 = (__int128 *)*((_QWORD *)v153 + 1);
                  v155 = (double *)*((_QWORD *)v153 + 2);
                  v156 = (__int128 *)*((_QWORD *)v153 + 3);
                  v158 = **(double **)v153;
                  v157 = *(double *)(*(_QWORD *)v153 + 8);
                  v159 = v155[1];
                  _D29 = v148 + v158 * _Q17.f64[0] + v157 * *(double *)v144.i64;
                  _D8 = _Q19.f64[0] + *v155 * v147 + v159 * *(double *)v144.i64;
                  _Q11 = *v154;
                  _Q12 = v154[1];
                  __asm
                  {
                    FMLA            D10, D8, V11.D[1]
                    FMLA            D31, D8, V12.D[1]
                  }
                  _Q26 = vaddq_f64(v143, vmlaq_n_f64(vmulq_n_f64(_Q3, *v155), v149, v159));
                  _Q8 = *v156;
                  _Q10 = v156[1];
                  v169 = v146
                       + v158 * v143.f64[0]
                       + v157 * _Q19.f64[0]
                       + (*(double *)v145.i64 + v158 * _Q3.f64[0] + v157 * v147) * *v155
                       + _D29 * v159;
                  __asm
                  {
                    FMLA            D11, D29, V8.D[1]
                    FMLA            D28, D29, V10.D[1]
                    FMLA            D27, D31, V26.D[1]
                  }
                  _Q24 = vaddq_f64(v152, vmlaq_n_f64(vmulq_n_f64(v150, v158), v151, v157));
                  __asm { FMLA            D25, D28, V24.D[1] }
                  if (v169 * v169 / (_D27 + _D25) >= v16)
                    v174 = 0.0;
                  else
                    v174 = 1.0;
                  v114 = v114 + v174;
                  v153 += 32;
                }
                while (v153 != v26);
                v115 = 1;
                v34 = v414;
                v15 = v415;
                ++v37;
                v116 = v430;
                if (v114 > *(double *)v430)
                  goto LABEL_66;
              }
            }
          }
        }
        if (++v36 >= v432 || v37 >= v45)
        {
          v14 = v37 != 0;
          if (v22)
            goto LABEL_75;
          goto LABEL_76;
        }
      }
    }
  }
  v37 = 0;
  v14 = 0;
  if (v22)
LABEL_75:
    operator delete(v22);
LABEL_76:
  v176 = !v404;
  if (!v37)
    v176 = 1;
  v177 = v430;
  if ((v176 & 1) != 0)
    return v14;
  v179 = a5;
  v178 = a6;
  a5[1] = *a5;
  a6[1] = *a6;
  v180 = a2[1] - *a2;
  v181 = v180 >> 5;
  v182 = *a5;
  if (v180 >> 5 > (unint64_t)(v179[2] - *v179))
  {
    if (v180 < 0)
      sub_20E867F44();
    v183 = a5[1];
    v184 = (char *)operator new((unint64_t)v180 >> 2);
    v185 = (char *)v183 - (char *)v182;
    v186 = &v184[((char *)v183 - (char *)v182) & 0xFFFFFFFFFFFFFFF8];
    v187 = v186;
    if (v183 == v182)
      goto LABEL_108;
    if ((unint64_t)(v185 - 8) >= 0x58)
    {
      v187 = &v184[((char *)v183 - (char *)v182) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)((char *)v183 - &v184[v185 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        v208 = v185 >> 3;
        v209 = ((unint64_t)(v185 - 8) >> 3) + 1;
        v210 = 8 * (v209 & 0x3FFFFFFFFFFFFFFCLL);
        v211 = (char *)&v183[v210 / 0xFFFFFFFFFFFFFFF8];
        v187 = &v186[-v210];
        v212 = &v184[8 * v208 - 16];
        v213 = (__int128 *)(v183 - 2);
        v214 = v209 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v215 = *v213;
          *((_OWORD *)v212 - 1) = *(v213 - 1);
          *(_OWORD *)v212 = v215;
          v212 -= 32;
          v213 -= 2;
          v214 -= 4;
        }
        while (v214);
        v183 = (unint64_t *)v211;
        if (v209 == (v209 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_108:
          *a5 = (unint64_t *)v187;
          a5[1] = (unint64_t *)v186;
          a5[2] = (unint64_t *)&v184[8 * v181];
          v178 = v425;
          if (v182)
            operator delete(v182);
          goto LABEL_110;
        }
      }
    }
    else
    {
      v187 = &v184[((char *)v183 - (char *)v182) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v216 = *--v183;
      *((_QWORD *)v187 - 1) = v216;
      v187 -= 8;
    }
    while (v183 != v182);
    goto LABEL_108;
  }
LABEL_110:
  v217 = *v178;
  if (v181 > v178[2] - *v178)
  {
    if (v180 < 0)
      sub_20E867F44();
    v218 = v178[1];
    v219 = (char *)operator new((unint64_t)v180 >> 2);
    v220 = (char *)v218 - (char *)v217;
    v221 = &v219[((char *)v218 - (char *)v217) & 0xFFFFFFFFFFFFFFF8];
    v222 = v221;
    if (v218 == v217)
      goto LABEL_120;
    if ((unint64_t)(v220 - 8) >= 0x58)
    {
      v222 = &v219[((char *)v218 - (char *)v217) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)((char *)v218 - &v219[v220 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        v223 = v220 >> 3;
        v224 = ((unint64_t)(v220 - 8) >> 3) + 1;
        v225 = 8 * (v224 & 0x3FFFFFFFFFFFFFFCLL);
        v226 = (char *)&v218[v225 / 0xFFFFFFFFFFFFFFF8];
        v222 = &v221[-v225];
        v227 = &v219[8 * v223 - 16];
        v228 = (__int128 *)(v218 - 2);
        v229 = v224 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v230 = *v228;
          *((_OWORD *)v227 - 1) = *(v228 - 1);
          *(_OWORD *)v227 = v230;
          v227 -= 32;
          v228 -= 2;
          v229 -= 4;
        }
        while (v229);
        v218 = (unint64_t *)v226;
        if (v224 == (v224 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_120:
          v178 = v425;
          *v425 = (unint64_t *)v222;
          v425[1] = (unint64_t *)v221;
          v425[2] = (unint64_t *)&v219[8 * v181];
          if (v217)
            operator delete(v217);
          goto LABEL_122;
        }
      }
    }
    else
    {
      v222 = &v219[((char *)v218 - (char *)v217) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v231 = *--v218;
      *((_QWORD *)v222 - 1) = v231;
      v222 -= 8;
    }
    while (v218 != v217);
    goto LABEL_120;
  }
LABEL_122:
  v232 = (int64x2_t *)(v430 + 8);
  v233 = a2[1];
  if (v233 != *a2)
  {
    v234 = 0;
    *(_QWORD *)&v235.f64[0] = v443.i64[0];
    *(_QWORD *)&v236.f64[0] = v443.i64[0];
    *(_QWORD *)&v237.f64[0] = v426;
    v238.f64[0] = v428.f64[0];
    *(_QWORD *)&v236.f64[1] = v426;
    v437 = v236;
    *(_QWORD *)&_Q2.f64[0] = v442.i64[0];
    *(_QWORD *)&_Q2.f64[1] = v403;
    v435 = _Q2;
    _Q2.f64[1] = v429.f64[1];
    v240.f64[0] = v429.f64[0];
    v240.f64[1] = v428.f64[0];
    v433 = v240;
    v423 = (float64x2_t)vdupq_lane_s64(v426, 0);
    v242 = v451.n128_f64[0];
    v241 = *(double *)&v453;
    v418 = (float64x2_t)vdupq_lane_s64(v403, 0);
    v420 = (float64x2_t)vdupq_lane_s64(v453, 0);
    v416 = (float64x2_t)vdupq_lane_s64(v451.n128_i64[0], 0);
    *(_QWORD *)&v240.f64[0] = v453;
    *(_QWORD *)&v240.f64[1] = v443.i64[0];
    v457 = v240;
    *(_QWORD *)&v240.f64[0] = v426;
    *(_QWORD *)&v240.f64[1] = v451.n128_u64[0];
    v455 = v240;
    *(_QWORD *)&v240.f64[0] = v442.i64[0];
    *(_QWORD *)&v240.f64[1] = v403;
    v449 = v240;
    v243 = v450;
    v240.f64[0] = v450;
    v240.f64[1] = v429.f64[0];
    *(_QWORD *)&v237.f64[1] = v453;
    v427 = v237;
    *(_QWORD *)&v235.f64[1] = v403;
    v445 = v235;
    v447 = v240;
    *(_QWORD *)&v235.f64[0] = v451.n128_u64[0];
    *(_QWORD *)&v235.f64[1] = v442.i64[0];
    v238.f64[1] = v450;
    v439 = v238;
    v441 = v235;
    v233 = *a2;
    v244 = v421;
    while (1)
    {
      v245 = (float64x2_t **)&v233[32 * v234];
      v247 = *v245;
      v246 = v245[1];
      v249 = (double *)v245[2];
      v248 = v245[3];
      v251 = *v249;
      _D4 = v249[1];
      if (*(_DWORD *)(v177 + 32))
      {
        _D0 = v247->f64[1];
        _Q2.f64[0] = *(float64_t *)(v430 + 24);
        _Q16 = (float64x2_t)vzip1q_s64((int64x2_t)_Q2, *v232);
        _Q17 = (float64x2_t)vextq_s8(*(int8x16_t *)v232, (int8x16_t)_Q2, 8uLL);
        _Q18 = vmlsq_f64(vmulq_f64(v447, _Q17), v439, _Q16);
        v256 = (int8x16_t)vmlsq_f64(vmulq_f64(v449, _Q16), v441, *(float64x2_t *)v232);
        _Q2 = vmlsq_f64(vmulq_f64(v455, *(float64x2_t *)v232), v445, _Q17);
        _Q3 = vmlsq_f64(vmulq_f64(v457, _Q17), v427, _Q16);
        _Q19 = vmlsq_laneq_f64(vmulq_f64(v428, *(float64x2_t *)v232), v429, *(float64x2_t *)v232, 1);
        __asm { FMLA            D7, D0, V3.D[1] }
        _Q16.f64[0] = *(double *)&v256.i64[1]
                    + vmlad_n_f64(vmuld_lane_f64(v247->f64[0], _Q2, 1), _D0, *(double *)v256.i64);
        __asm { FMLA            D17, D0, V18.D[1] }
        _Q17.f64[0] = _Q19.f64[0] + _Q17.f64[0] + (_Q2.f64[0] + _D7) * v251 + _Q16.f64[0] * _D4;
        __asm { FMLA            D19, D4, V2.D[1] }
        _D20 = _Q18.f64[1] + vmlad_n_f64(vmuld_lane_f64(v251, _Q3, 1), _D4, *(double *)v256.i64);
        _Q21 = *v246;
        _Q22 = v246[1];
        __asm
        {
          FMLA            D23, D20, V21.D[1]
          FMLA            D19, D20, V22.D[1]
        }
        _Q4 = vaddq_f64(_Q18, vmlaq_n_f64(vmulq_n_f64(_Q3, v251), (float64x2_t)vextq_s8((int8x16_t)_Q2, v256, 8uLL), _D4));
        __asm { FMLA            D6, D19, V4.D[1] }
        _Q4 = *v248;
        _Q18 = v248[1];
        __asm
        {
          FMLA            D19, D16, V4.D[1]
          FMLA            D4, D16, V18.D[1]
        }
        v267 = (float64x2_t)vextq_s8((int8x16_t)_Q3, v256, 8uLL);
        _Q3.f64[1] = _Q2.f64[1];
        *(_QWORD *)&_Q2.f64[1] = v256.i64[1];
        _Q0 = vaddq_f64(_Q2, vmlaq_n_f64(vmulq_n_f64(_Q3, v247->f64[0]), v267, _D0));
        __asm { FMLA            D1, D4, V0.D[1] }
        if (_Q17.f64[0] * _Q17.f64[0] / (_D1 + _D6) >= v244[2])
          goto LABEL_141;
      }
      else
      {
        v283 = vaddq_f64(v433, vmlaq_n_f64(vmulq_n_f64(v437, v251), v435, _D4));
        v284 = 1.0 / (v243 + v241 * v251 + v242 * _D4);
        v459 = vmlsq_lane_f64(*v247, v283, v284, 0);
        v285 = vmulq_n_f64(vnegq_f64(v283), v284 * v284);
        *(double *)&v286 = v284;
        v287.f64[0] = 0.0;
        v287.f64[1] = v284;
        v288 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v284, *(double *)v443.i64), v423, v287), v420, v285);
        v289 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)v286, *(double *)v442.i64), v418, v287), v416, v285);
        v290 = vmlaq_laneq_f64(vmulq_n_f64(v288, v248->f64[0]), v289, *v248, 1);
        v291 = vmlaq_laneq_f64(vmulq_n_f64(v288, v248[1].f64[0]), v289, v248[1], 1);
        v292 = vmlaq_n_f64(vmulq_n_f64(v290, v288.f64[0]), v291, v289.f64[0]);
        v293 = vaddq_f64(v246[1], vmlaq_laneq_f64(vmulq_laneq_f64(v290, v288, 1), v291, v289, 1));
        v461.columns[0] = (simd_double2)vaddq_f64(*v246, v292);
        v461.columns[1] = (simd_double2)v293;
        sub_20E8BE3B0(&v461, &v468);
        v243 = v450;
        v242 = v451.n128_f64[0];
        v241 = *(double *)&v453;
        _D0 = vmuld_lane_f64(0.225, v459, 1);
        _V5.D[1] = v459.f64[1];
        _Q2.f64[1] = v468.columns[0].f64[1];
        _V3.D[1] = v468.columns[1].f64[1];
        __asm
        {
          FMLA            D4, D0, V2.D[1]
          FMLA            D1, D0, V3.D[1]
          FMLA            D0, D1, V5.D[1]
        }
        if (_D0 >= v244[2])
        {
LABEL_141:
          v301 = v178[1];
          v300 = (unint64_t)v178[2];
          if ((unint64_t)v301 < v300)
          {
            *v301 = v234;
            v302 = (uint64_t)(v301 + 1);
LABEL_174:
            v178[1] = (unint64_t *)v302;
            goto LABEL_125;
          }
          v303 = *v178;
          v304 = (char *)v301 - (char *)*v178;
          v305 = v304 >> 3;
          v306 = (v304 >> 3) + 1;
          if (v306 >> 61)
            sub_20E867F44();
          v307 = v300 - (_QWORD)v303;
          if (v307 >> 2 > v306)
            v306 = v307 >> 2;
          if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFF8)
            v308 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v308 = v306;
          if (v308)
          {
            if (v308 >> 61)
LABEL_193:
              sub_20E877A38();
            v309 = operator new(8 * v308);
            v242 = v451.n128_f64[0];
            v241 = *(double *)&v453;
            v243 = v450;
            v310 = (unint64_t *)&v309[8 * v305];
            *v310 = v234;
            v302 = (uint64_t)(v310 + 1);
            v311 = (char *)v301 - (char *)v303;
            if (v301 != v303)
            {
LABEL_152:
              v312 = v311 - 8;
              if (v312 < 0x58)
              {
                v178 = v425;
                goto LABEL_170;
              }
              v322 = (char *)v301 - v309 - v304;
              v178 = v425;
              if (v322 < 0x20)
                goto LABEL_203;
              v323 = (v312 >> 3) + 1;
              v324 = 8 * (v323 & 0x3FFFFFFFFFFFFFFCLL);
              v325 = &v301[v324 / 0xFFFFFFFFFFFFFFF8];
              v310 = (unint64_t *)((char *)v310 - v324);
              v326 = &v309[8 * v305 - 16];
              v327 = v301 - 2;
              v328 = v323 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v329 = *(_OWORD *)v327;
                *(v326 - 1) = *((_OWORD *)v327 - 1);
                *v326 = v329;
                v326 -= 2;
                v327 -= 4;
                v328 -= 4;
              }
              while (v328);
              v301 = v325;
              if (v323 != (v323 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_203:
                do
                {
LABEL_170:
                  v330 = *--v301;
                  *--v310 = v330;
                }
                while (v301 != v303);
              }
LABEL_171:
              *v178 = v310;
              v178[1] = (unint64_t *)v302;
              v178[2] = (unint64_t *)&v309[8 * v308];
              if (v303)
              {
                operator delete(v303);
                v243 = v450;
                v242 = v451.n128_f64[0];
                v241 = *(double *)&v453;
              }
              v177 = v430;
              v179 = a5;
              v244 = v421;
              goto LABEL_174;
            }
          }
          else
          {
            v309 = 0;
            v310 = (unint64_t *)(8 * v305);
            *(_QWORD *)(8 * v305) = v234;
            v302 = 8 * v305 + 8;
            v311 = (char *)v301 - (char *)v303;
            if (v301 != v303)
              goto LABEL_152;
          }
          v178 = v425;
          goto LABEL_171;
        }
      }
      v271 = v179[1];
      v270 = (unint64_t)v179[2];
      if ((unint64_t)v271 >= v270)
      {
        v272 = *v179;
        v273 = (char *)v271 - (char *)*v179;
        v274 = v273 >> 3;
        v275 = (v273 >> 3) + 1;
        if (v275 >> 61)
          sub_20E867F44();
        v276 = v270 - (_QWORD)v272;
        if (v276 >> 2 > v275)
          v275 = v276 >> 2;
        if ((unint64_t)v276 >= 0x7FFFFFFFFFFFFFF8)
          v277 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v277 = v275;
        if (v277)
        {
          if (v277 >> 61)
            goto LABEL_193;
          v278 = operator new(8 * v277);
          v242 = v451.n128_f64[0];
          v241 = *(double *)&v453;
          v243 = v450;
          v279 = (unint64_t *)&v278[8 * v274];
          *v279 = v234;
          v280 = (uint64_t)(v279 + 1);
          v281 = (char *)v271 - (char *)v272;
          if (v271 != v272)
          {
LABEL_138:
            v282 = v281 - 8;
            if (v282 < 0x58)
            {
              v178 = v425;
              goto LABEL_162;
            }
            v313 = (char *)v271 - v278 - v273;
            v178 = v425;
            if (v313 < 0x20)
              goto LABEL_204;
            v314 = (v282 >> 3) + 1;
            v315 = 8 * (v314 & 0x3FFFFFFFFFFFFFFCLL);
            v316 = &v271[v315 / 0xFFFFFFFFFFFFFFF8];
            v279 = (unint64_t *)((char *)v279 - v315);
            v317 = &v278[8 * v274 - 16];
            v318 = v271 - 2;
            v319 = v314 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v320 = *(_OWORD *)v318;
              *(v317 - 1) = *((_OWORD *)v318 - 1);
              *v317 = v320;
              v317 -= 2;
              v318 -= 4;
              v319 -= 4;
            }
            while (v319);
            v271 = v316;
            if (v314 != (v314 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_204:
              do
              {
LABEL_162:
                v321 = *--v271;
                *--v279 = v321;
              }
              while (v271 != v272);
            }
LABEL_163:
            v179 = a5;
            *a5 = v279;
            a5[1] = (unint64_t *)v280;
            a5[2] = (unint64_t *)&v278[8 * v277];
            if (v272)
            {
              operator delete(v272);
              v243 = v450;
              v242 = v451.n128_f64[0];
              v241 = *(double *)&v453;
            }
            v177 = v430;
            v244 = v421;
            a5[1] = (unint64_t *)v280;
            goto LABEL_125;
          }
        }
        else
        {
          v278 = 0;
          v279 = (unint64_t *)(8 * v274);
          *(_QWORD *)(8 * v274) = v234;
          v280 = 8 * v274 + 8;
          v281 = (char *)v271 - (char *)v272;
          if (v271 != v272)
            goto LABEL_138;
        }
        v178 = v425;
        goto LABEL_163;
      }
      *v271 = v234;
      v179[1] = v271 + 1;
LABEL_125:
      ++v234;
      v233 = *a2;
      if (v234 >= (a2[1] - *a2) >> 5)
        goto LABEL_176;
    }
  }
  v244 = v421;
LABEL_176:
  if (!*((_BYTE *)v244 + 24))
    return 1;
  v331 = *v179;
  v332 = v179[1];
  v14 = 1;
  if ((unint64_t)((char *)v332 - (char *)*v179) >= 0x10 && *(_DWORD *)(v177 + 32))
  {
    if (v331 == v332)
    {
      v358.f64[0] = 0.0;
      v359 = 0;
      v360.f64[0] = 0.0;
      v361.f64[0] = 0.0;
      v362.f64[0] = 0.0;
      v363.f64[0] = 0.0;
      v364.f64[0] = 0.0;
      v365 = 0;
      v366.f64[0] = 0.0;
    }
    else
    {
      v333 = *(int8x16_t *)v405;
      *(_QWORD *)&v334.f64[0] = vextq_s8(v333, v333, 8uLL).u64[0];
      v335 = *(int8x16_t *)(v405 + 3);
      v336 = *((int8x16_t *)v405 + 3);
      v337 = vextq_s8(v336, v336, 8uLL).u64[0];
      v338 = *((double *)v405 + 3);
      *(_QWORD *)&v363.f64[1] = vextq_s8(v335, v335, 8uLL).u64[0];
      v339 = *((double *)v405 + 8);
      *(_QWORD *)&v361.f64[1] = v405[6];
      *(_QWORD *)&v340.f64[0] = v405[2];
      *(_QWORD *)&v340.f64[1] = *v405;
      v341 = *v405;
      v342 = v334.f64[0];
      v333.i64[1] = *(_QWORD *)&v334.f64[0];
      v460 = (float64x2_t)v333;
      *(_QWORD *)&v334.f64[1] = v405[5];
      _Q19.f64[0] = *(float64_t *)(v430 + 24);
      v343 = (float64x2_t)vzip1q_s64((int64x2_t)_Q19, *v232);
      v344 = (float64x2_t)vextq_s8(*(int8x16_t *)v232, (int8x16_t)_Q19, 8uLL);
      v345 = vmulq_f64(v334, *(float64x2_t *)v232);
      v334.f64[0] = v334.f64[1];
      v360.f64[1] = v338;
      v336.i64[1] = v337;
      v452 = (float64x2_t)v336;
      v364.f64[1] = v339;
      v366.f64[1] = v363.f64[1];
      v362.f64[1] = v340.f64[0];
      _Q23 = (int8x16_t)vmlsq_f64(vmulq_f64(v363, v343), v360, *(float64x2_t *)v232);
      v347 = vmlsq_f64(vmulq_f64(v361, v344), v364, v343);
      v348 = (int8x16_t)vmlsq_f64(v345, v366, v344);
      v349 = vmlsq_f64(vmulq_f64(v340, v344), v362, v343);
      v335.i64[1] = *(_QWORD *)&v363.f64[1];
      v350 = (float64x2_t)v335;
      *(_QWORD *)&_D26 = vextq_s8((int8x16_t)v349, (int8x16_t)v349, 8uLL).u64[0];
      *(_QWORD *)&v352 = vextq_s8((int8x16_t)v347, (int8x16_t)v347, 8uLL).u64[0];
      *(_QWORD *)&v353 = vextq_s8(_Q23, _Q23, 8uLL).u64[0];
      v354 = (float64x2_t)vextq_s8(v348, _Q23, 8uLL);
      v355.f64[0] = v349.f64[0];
      *(_QWORD *)&v355.f64[1] = v348.i64[1];
      v356 = (float64x2_t)vextq_s8((int8x16_t)v349, _Q23, 8uLL);
      *(_QWORD *)&v357.f64[0] = v348.i64[0];
      *(_QWORD *)&v357.f64[1] = _Q23.i64[1];
      v358.f64[0] = 0.0;
      v359 = 0;
      v360.f64[0] = 0.0;
      v361.f64[0] = 0.0;
      v362.f64[0] = 0.0;
      v363.f64[0] = 0.0;
      v364.f64[0] = 0.0;
      v365 = 0;
      v366.f64[0] = 0.0;
      do
      {
        v367 = *(_DWORD *)v331++;
        v368 = &v233[32 * v367];
        v369 = *(int8x16_t **)v368;
        v370 = (float64x2_t *)*((_QWORD *)v368 + 1);
        v372 = (double *)*((_QWORD *)v368 + 2);
        v371 = (__int128 *)*((_QWORD *)v368 + 3);
        _Q13 = *v369;
        __asm { FMOV            V14.2D, #1.0 }
        v375 = v372[1];
        v376 = vmlaq_n_f64(vmulq_n_f64(v460, *v372), v350, v375);
        v377 = vaddq_f64(v452, v376);
        v376.f64[0] = *((double *)v405 + 8) + *((double *)v405 + 2) * *v372 + *((double *)v405 + 5) * v375;
        _Q2 = (float64x2_t)vextq_s8(*v369, (int8x16_t)_Q14, 8uLL);
        *(_QWORD *)&_Q14.f64[1] = v369->i64[0];
        v379 = (float64x2_t)vextq_s8((int8x16_t)v377, (int8x16_t)v376, 8uLL);
        v376.f64[1] = v377.f64[0];
        v380 = vmlsq_f64(vmulq_f64(_Q2, v376), _Q14, v379);
        _D1 = v352 + *v372 * _D26 + v375 * *(double *)_Q23.i64;
        _Q4 = *v370;
        _Q14 = v370[1];
        __asm
        {
          FMLA            D5, D1, V4.D[1]
          FMLA            D2, D1, V14.D[1]
          FMLA            D1, D26, V13.D[1]
          FMLA            D4, D23, V13.D[1]
        }
        _Q4.f64[0] = v353 + _Q4.f64[0];
        _Q10 = vaddq_f64(v347, vmlaq_n_f64(vmulq_n_f64(v349, *v372), v354, v375));
        __asm { FMLA            D5, D2, V10.D[1] }
        _Q2 = *v371;
        _Q10 = v371[1];
        __asm
        {
          FMLA            D14, D4, V2.D[1]
          FMLA            D1, D4, V10.D[1]
        }
        v391 = vmlsq_laneq_f64(vmulq_laneq_f64(*(float64x2_t *)v369, v377, 1), v377, *(float64x2_t *)v369, 1);
        _Q0 = vaddq_f64(v357, vmlaq_laneq_f64(vmulq_n_f64(v355, *(double *)v369->i64), v356, *(float64x2_t *)v369, 1));
        __asm { FMLA            D4, D1, V0.D[1] }
        *(_QWORD *)&v358.f64[1] = v359;
        _Q0.f64[0] = 1.0 / (_Q4.f64[0] + _D5);
        v361.f64[1] = v362.f64[0];
        v393 = vmulq_f64(v391, _Q0);
        *(_QWORD *)&v364.f64[1] = v365;
        _Q4.f64[0] = vmuld_n_f64(v393.f64[0], v380.f64[0]);
        v360 = vaddq_f64(v360, _Q4);
        v394 = vmulq_n_f64(v380, _Q0.f64[0]);
        v358 = vmlaq_n_f64(v358, v394, v380.f64[0]);
        v361 = vmlaq_laneq_f64(v361, v394, v380, 1);
        _Q4.f64[0] = vmuld_lane_f64(v393.f64[0], v380, 1);
        v363 = vaddq_f64(v363, _Q4);
        v364 = vmlaq_n_f64(v364, v394, v391.f64[0]);
        v366 = vmlaq_f64(v366, v393, v391);
        v362.f64[0] = v361.f64[1];
        v365 = vextq_s8((int8x16_t)v364, (int8x16_t)v364, 8uLL).u64[0];
        v359 = vextq_s8((int8x16_t)v358, (int8x16_t)v358, 8uLL).u64[0];
      }
      while (v331 != v332);
    }
    v467 = 0;
    *(_QWORD *)&v358.f64[1] = v359;
    v466 = 0x300000003;
    v360.f64[1] = v361.f64[0];
    v362.f64[1] = v363.f64[0];
    v468.columns[0] = (simd_double2)v358;
    v468.columns[1] = (simd_double2)v360;
    v471 = v366.f64[0];
    *(_QWORD *)&v364.f64[1] = v365;
    v469 = v362;
    v470 = v364;
    sub_20EB48638((uint64_t)&v461);
    if (v464 / v465 >= 4.0)
    {
      _Q0 = v462;
      _Q2 = *v232;
      v396.f64[0] = v463;
      __asm { FMLA            D3, D1, V2.D[1] }
      v395.f64[0] = 1.0;
      if (_D3 + *(double *)(v430 + 24) * v463 < 0.0)
        v395.f64[0] = -1.0;
      *(float64x2_t *)v232 = vmulq_n_f64(v462, v395.f64[0]);
      *(_QWORD *)(v430 + 24) = *(_OWORD *)&vmulq_f64(v396, v395);
      v397 = 1;
    }
    else
    {
      v397 = 0;
      v232->i64[0] = 0;
      *(_QWORD *)(v430 + 16) = 0;
      *(_QWORD *)(v430 + 24) = 0;
    }
    *(_DWORD *)(v177 + 32) = v397;
    return 1;
  }
  return v14;
}

void sub_20F0BB9EC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F0BBA10(_QWORD *a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, __int128 *a5, uint64_t a6, uint64_t a7, int a8, double a9, double a10, double a11, double a12, double a13, float64x2_t a14)
{
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  unint64_t v17;
  uint64_t v24;
  double v31;
  double v32;
  int v33;
  uint64_t v34;
  double v35;
  float64x2_t v36;
  uint64_t v37;
  int8x16_t v38;
  uint64_t v39;
  uint64_t v40;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  uint64_t v47;
  unsigned int v48;
  double v49;
  unsigned int v52;
  char v53;
  float64x2_t v57;
  double v61;
  double v62;
  double v63;
  double v66;
  double v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  double v78;
  float64_t v79;
  double v80;
  double v81;
  float64_t v84;
  long double v85;
  long double v86;
  int64x2_t v87;
  int64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  double v92;
  double v93;
  double v95;
  float64x2_t v96;
  unint64_t v97;
  double v98;
  double v99;
  float64x2_t v100;
  double v101;
  double v102;
  double v104;
  double v106;
  float64x2_t v107;
  uint64_t v108;
  float64x2_t v110;
  double v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v115;
  double v117;
  float64x2_t v118;
  double v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  int8x16_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64_t v129;
  long double v130;
  long double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  long double v139;
  long double v140;
  float64x2_t v141;
  double v142;
  double v143;
  double v144;
  double v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  double v153;
  double v154;
  double v155;
  float64_t v156;
  double v157;
  float64_t v158;
  float64x2_t v159;
  double v160;
  __int128 v162;
  __int128 v163;
  double v165;
  float64x2_t v166;
  float64x2_t v167;
  double v168;
  int v170;
  float64_t v172;
  float64_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64_t v176;
  float64x2_t v177;
  _OWORD v178[2];
  float64x2_t v179;
  float64_t v180;
  float64x2_t v181;
  _BYTE v182[32];
  __int128 v183;
  uint64_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  uint64_t v189;

  v189 = *MEMORY[0x24BDAC8D0];
  v17 = a1[1] - *a1;
  if ((v17 & 0xFFFFFFFE0) == 0)
    return 0;
  v180 = 0.0;
  v179 = 0u;
  v177 = 0u;
  memset(v178, 0, sizeof(v178));
  v24 = *((_QWORD *)a5 + 2);
  *(_OWORD *)a6 = *a5;
  *(_QWORD *)(a6 + 16) = v24;
  _Q1 = *a5;
  _D3 = *((_QWORD *)a5 + 1);
  __asm { FMLA            D2, D3, V1.D[1] }
  v31 = sqrt(_D2 + *((double *)a5 + 2) * *((double *)a5 + 2));
  a14.f64[0] = 1.0;
  if (v31 >= 10.0)
  {
    v32 = log10(v31);
    a14.f64[0] = __exp10(floor(v32));
  }
  if (a8)
  {
    v33 = 0;
    v34 = (v17 >> 4);
    v35 = 1.79769313e308;
    v36 = 0uLL;
    v168 = a14.f64[0];
    do
    {
      v170 = v33;
      v37 = 0;
      v180 = 0.0;
      v178[1] = v36;
      v179 = v36;
      v38.i64[0] = 0;
      v177 = v36;
      v178[0] = v36;
      v14.f64[0] = 0.0;
      v36.f64[0] = 0.0;
      v174 = v36;
      v39 = *a3;
      do
      {
        v172 = v14.f64[0];
        v173 = *(double *)v38.i64;
        v40 = *(_QWORD *)(v39 + 8 * v37);
        _Q0.f64[0] = *(float64_t *)(v40 + 16);
        _Q4 = *(_OWORD *)(v40 + 64);
        a14.f64[0] = *(float64_t *)(a6 + 16);
        v14.f64[0] = *(float64_t *)(v40 + 112);
        *(_QWORD *)&v43 = *(_OWORD *)&vsubq_f64(a14, v14);
        v44 = vsubq_f64(*(float64x2_t *)a6, *(float64x2_t *)(v40 + 96));
        _Q0.f64[1] = *(float64_t *)(v40 + 48);
        v45 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v40, *(int64x2_t *)(v40 + 32)), v44.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v40, *(int64x2_t *)(v40 + 32)), v44, 1), _Q0, v43);
        _D1 = v44.f64[1];
        __asm { FMLA            D0, D1, V4.D[1] }
        _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], *(double *)(v40 + 80), v43);
        v175 = v45;
        v176 = _Q0.f64[0];
        v47 = *(_QWORD *)(*a4 + 8 * v37);
        v48 = *(_DWORD *)(v47 + 992);
        if (v48 == -1)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v48 = *(_DWORD *)(v47 + 992);
          if (v48 <= 7)
          {
LABEL_9:
            if (v48 > 3)
            {
              if (v48 <= 5)
              {
                if (v48 == 5)
                {
                  if (!sub_20EB29218(v185.f64, (uint64_t)&v181, &v175, (int64x2_t *)(v47 + 168)))
                    return 0;
                  goto LABEL_56;
                }
LABEL_48:
                v81 = v176;
                _Q6 = v175;
                _Q1 = vmulq_f64(_Q6, _Q6);
                _D0 = v175.f64[1];
                __asm { FMLA            D1, D0, V6.D[1] }
                if (_Q1.f64[0] >= 0.00000001)
                {
                  v84 = v176 * v176 + _Q1.f64[0];
                  v85 = sqrt(_Q1.f64[0]);
                  v165 = _Q1.f64[0];
                  v166 = v175;
                  v86 = atan2(v85, v176);
                  v87 = *(int64x2_t *)(v47 + 184);
                  v88 = *(int64x2_t *)(v47 + 168);
                  v89 = (float64x2_t)vzip2q_s64(v88, v87);
                  v90 = (float64x2_t)vzip1q_s64(v88, v87);
                  v91 = vmulq_n_f64(vaddq_f64(vmulq_f64(v90, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v89, (float64x2_t)xmmword_210312E20), v86 * v86)), v86 * v86);
                  v92 = v86 * v86 * (v86 * v86);
                  _Q6 = v166;
                  _Q1 = vmulq_n_f64(vaddq_f64(v90, vmulq_n_f64(v89, v86 * v86)), v86 * v86);
                  v93 = (v86 + v86 * (_Q1.f64[0] + vmuld_lane_f64(v92, _Q1, 1))) / v85;
                  _Q1.f64[0] = (v91.f64[0] + vmuld_lane_f64(v92, v91, 1) + 1.0) / v84;
                  goto LABEL_68;
                }
LABEL_51:
                v93 = 1.0 / v81;
                v95 = -(v93 * v93);
                v96.f64[0] = 0.0;
                v97 = 0;
                goto LABEL_69;
              }
              if (v48 != 6)
              {
                v53 = sub_20EB3345C(v47, &v185, (uint64_t)&v181, &v175, 0);
                goto LABEL_55;
              }
              if (v176 == 0.0)
                v78 = 1.0;
              else
                v78 = 1.0 / v176;
              v79 = v175.f64[0] * v78;
              v80 = v78 * v175.f64[1];
              v188.f64[0] = v175.f64[0] * v78;
              v188.f64[1] = v78 * v175.f64[1];
              sub_20EB2837C(&v185, v186.f64, &v188, (double *)(v47 + 168), (float64x2_t *)(v47 + 192), (double *)(v47 + 208));
              v181.f64[0] = v78 * v186.f64[0];
              v181.f64[1] = v78 * v186.f64[1];
              *(double *)v182 = v78 * (-(v186.f64[0] * v79) - v80 * v186.f64[1]);
              *(double *)&v182[8] = v78 * v187.f64[0];
              *(double *)&v182[16] = v78 * v187.f64[1];
              *(double *)&v182[24] = v78 * (-(v187.f64[0] * v79) - v80 * v187.f64[1]);
              v52 = *(_DWORD *)(v47 + 992);
              if (v52 != -1)
                goto LABEL_57;
            }
            else if (v48 > 1)
            {
              if (v48 != 2)
                goto LABEL_48;
              if (*(_DWORD *)(v47 + 212))
              {
                if (v176 < 0.00000001)
                  return 0;
                _Q0 = vmulq_n_f64(v175, 1.0 / v176);
                v61 = *(double *)(v47 + 168);
                v62 = *(double *)(v47 + 176);
                v63 = *(double *)(v47 + 184);
                _D2 = vmuld_lane_f64(1.0 / v176, v175, 1);
                __asm { FMLA            D6, D2, V0.D[1] }
                v66 = v61 * *(double *)&_D6 + 1.0 + *(double *)&_D6 * *(double *)&_D6 * (v62 + v63 * *(double *)&_D6);
                v67 = v61 + v61 + *(double *)&_D6 * (v62 * 4.0 + *(double *)&_D6 * (v63 * 6.0));
                v68 = *(float64x2_t *)(v47 + 192);
                v69 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D6, 0), vmulq_f64(_Q0, vaddq_f64(_Q0, _Q0))), (float64x2_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL));
                v70 = vaddq_f64(v68, v68);
                v71 = vmulq_n_f64(v70, _Q0.f64[0]);
                v15 = vmulq_laneq_f64(v71, _Q0, 1);
                v185 = vmlaq_n_f64(vaddq_f64(v69, v15), _Q0, v66);
                v72 = vmulq_n_f64(_Q0, v67);
                v73 = vmulq_n_f64(v72, _Q0.f64[0]);
                v74 = vmulq_n_f64(v72, _D2);
                v75 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v71.f64[0], 0);
                v75.f64[0] = vmuld_lane_f64(6.0, v68, 1) * _Q0.f64[0];
                v76 = vaddq_f64(v75, vmulq_laneq_f64(v70, _Q0, 1));
                v73.f64[0] = v66 + v73.f64[0];
                v77 = vaddq_f64(v76, v73);
                *(_QWORD *)&v76.f64[0] = vdupq_laneq_s64((int64x2_t)v76, 1).u64[0];
                v76.f64[1] = vmuld_lane_f64(6.0 * v68.f64[0], _Q0, 1) + v71.f64[1];
                v74.f64[1] = v66 + v74.f64[1];
                _Q2 = vmulq_n_f64(vaddq_f64(v76, v74), 1.0 / v176);
                _Q1 = vmulq_n_f64(v77, 1.0 / v176);
                v181 = _Q1;
                *(float64x2_t *)&v182[8] = _Q2;
                *(double *)v182 = -(vmuld_n_f64(_Q1.f64[0], _Q0.f64[0]) + _Q1.f64[1] * _Q0.f64[1]);
                *(double *)&v182[24] = -(vmuld_n_f64(_Q2.f64[0], _Q0.f64[0]) + _Q2.f64[1] * _Q0.f64[1]);
                v52 = *(_DWORD *)(v47 + 992);
                if (v52 != -1)
                  goto LABEL_57;
              }
              else
              {
                if (v176 < 0.00000001)
                  return 0;
                _Q2 = vmulq_n_f64(v175, 1.0 / v176);
                v142 = *(double *)(v47 + 168);
                v143 = *(double *)(v47 + 176);
                v144 = *(double *)(v47 + 184);
                _D1 = vmuld_lane_f64(1.0 / v176, v175, 1);
                __asm { FMLA            D6, D1, V2.D[1] }
                v147 = v142 * _D6 + 1.0 + _D6 * _D6 * (v143 + v144 * _D6);
                v185 = vmulq_n_f64(_Q2, v147);
                v148 = vmulq_n_f64(_Q2, v142 + v142 + _D6 * (v143 * 4.0 + _D6 * (v144 * 6.0)));
                v149 = vmulq_n_f64(v148, _Q2.f64[0]);
                v150 = vmulq_n_f64(v148, _D1);
                v148.f64[0] = v149.f64[0];
                v148.f64[1] = v150.f64[1];
                v151 = vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v147, 0), v148);
                v152.f64[0] = v151.f64[0];
                v152.f64[1] = v149.f64[1];
                v151.f64[0] = v150.f64[0];
                _Q1 = vmulq_n_f64(v151, 1.0 / v176);
                v181 = vmulq_n_f64(v152, 1.0 / v176);
                *(float64x2_t *)&v182[8] = _Q1;
                *(double *)v182 = -(vmuld_n_f64(v181.f64[0], _Q2.f64[0]) + v181.f64[1] * _Q2.f64[1]);
                *(double *)&v182[24] = -(vmuld_n_f64(_Q1.f64[0], _Q2.f64[0]) + _Q1.f64[1] * _Q2.f64[1]);
                v52 = *(_DWORD *)(v47 + 992);
                if (v52 != -1)
                  goto LABEL_57;
              }
            }
            else
            {
              if (!v48)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              if (v176 < 0.00000001)
                return 0;
              v49 = 1.0 / v176;
              _Q1.f64[1] = v175.f64[1];
              _Q2 = vmulq_n_f64(v175, 1.0 / v176);
              v185 = _Q2;
              v181 = (float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v176);
              *(_QWORD *)&v182[8] = 0;
              *(double *)v182 = v49 * -(v175.f64[0] * v49);
              *(double *)&v182[16] = 1.0 / v176;
              *(double *)&v182[24] = v49 * -(v175.f64[1] * v49);
              v52 = *(_DWORD *)(v47 + 992);
              if (v52 != -1)
              {
LABEL_57:
                if (v52 > 7)
                  goto LABEL_61;
                goto LABEL_58;
              }
            }
            goto LABEL_14;
          }
        }
        else if (v48 <= 7)
        {
          goto LABEL_9;
        }
        if (v48 <= 0xB)
        {
          if (v48 > 9)
          {
            if (v48 == 10)
              v53 = sub_20EB2450C(&v185, (uint64_t)&v181, 0, (uint64_t)&v175, (double *)(v47 + 168), (*(double *)v47 + *(double *)(v47 + 32)) * 0.5);
            else
              v53 = sub_20EB3AF98(v47, &v185, (uint64_t)&v181, &v175, 0);
            goto LABEL_55;
          }
          if (v48 == 9)
          {
            v53 = sub_20EB372E0(v47, &v185, (uint64_t)&v181, &v175, 0);
LABEL_55:
            if ((v53 & 1) == 0)
              return 0;
LABEL_56:
            v52 = *(_DWORD *)(v47 + 992);
            if (v52 != -1)
              goto LABEL_57;
            goto LABEL_14;
          }
          v81 = v176;
          _Q6 = v175;
          _Q1 = vmulq_f64(_Q6, _Q6);
          _D0 = v175.f64[1];
          __asm { FMLA            D1, D0, V6.D[1] }
          if (_Q1.f64[0] < 0.00000001)
            goto LABEL_51;
          v129 = v176 * v176 + _Q1.f64[0];
          v130 = sqrt(_Q1.f64[0]);
          v165 = _Q1.f64[0];
          v167 = v175;
          v131 = atan2(v130, v176);
          v132 = *(double *)(v47 + 168);
          v133 = *(double *)(v47 + 176);
          v134 = *(double *)(v47 + 184);
          v135 = *(double *)(v47 + 192);
          v136 = *(double *)(v47 + 200);
          v137 = *(double *)(v47 + 208);
          v138 = *(double *)(v47 + 216);
          v139 = v131
               * v131
               * (v132 * 3.0
                + v131
                * v131
                * (v133 * 5.0
                 + v131
                 * v131
                 * (v134 * 7.0
                  + v131
                  * v131
                  * (v135 * 9.0 + v131 * v131 * (v136 * 11.0 + v131 * v131 * (v137 * 13.0 + v131 * v131 * 15.0 * v138))))))
               + 1.0;
          v140 = v134 + v131 * v131 * (v135 + v131 * v131 * (v136 + v131 * v131 * (v137 + v131 * v131 * v138)));
          _Q6 = v167;
          v93 = v131 * (v131 * v131 * (v132 + v131 * v131 * (v133 + v131 * v131 * v140)) + 1.0) / v130;
          _Q1.f64[0] = v139 / v129;
LABEL_68:
          v96 = vmulq_n_f64(_Q6, (v81 * _Q1.f64[0] - v93) / v165);
          v95 = -_Q1.f64[0];
          v97 = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u64[0];
LABEL_69:
          v185 = vmulq_n_f64(_Q6, v93);
          *(_QWORD *)&v96.f64[1] = v97;
          v141 = vmulq_n_f64(v96, _Q6.f64[0]);
          _Q2 = vmulq_laneq_f64(v96, _Q6, 1);
          *(float64_t *)&v182[8] = _Q2.f64[0];
          v141.f64[0] = v93 + v141.f64[0];
          *(double *)v182 = v95 * _Q6.f64[0];
          v181 = v141;
          *(double *)&v182[16] = v93 + _Q2.f64[1];
          *(double *)&v182[24] = v95 * *(double *)vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).i64;
          v52 = *(_DWORD *)(v47 + 992);
          if (v52 != -1)
            goto LABEL_57;
          goto LABEL_14;
        }
        if (v48 > 0xD)
        {
          if (v48 == 14)
            v53 = sub_20EB2498C(&v185, (uint64_t)&v181, 0, (uint64_t)&v175, (double *)(v47 + 168), (*(double *)v47 + *(double *)(v47 + 32)) * 0.5);
          else
            v53 = sub_20EB3F050(v47, &v185, (uint64_t)&v181, &v175, 0);
          goto LABEL_55;
        }
        if (v48 != 13)
          return 0;
        if (v176 < 0.00000001)
          return 0;
        v188 = vdivq_f64(v175, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v176, 0));
        if (!sub_20EB295B8(&v185, &v186, 0, (uint64_t)&v188, (double *)(v47 + 168), (*(double *)v47 + *(double *)(v47 + 32)) * 0.5))return 0;
        _D0 = -v175.f64[1] / (v176 * v176);
        _V3.D[1] = v186.f64[1];
        _V4.D[1] = v187.f64[1];
        v57.f64[0] = 0.0;
        v57.f64[1] = 1.0 / v176;
        _Q1 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v176), v186.f64[0]), v57, v186, 1);
        __asm { FMLA            D7, D0, V3.D[1] }
        v181 = _Q1;
        __asm { FMLA            D2, D0, V4.D[1] }
        *(_QWORD *)v182 = _D7;
        *(_QWORD *)&v182[24] = _D2;
        *(float64x2_t *)&v182[8] = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v176), v187.f64[0]), v57, v187, 1);
        v52 = *(_DWORD *)(v47 + 992);
        if (v52 != -1)
          goto LABEL_57;
LABEL_14:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v52 = *(_DWORD *)(v47 + 992);
        if (v52 > 7)
        {
LABEL_61:
          v98 = *(double *)(v47 + 8);
          v99 = *(double *)v47;
          v101 = *(double *)(v47 + 32);
          v100.f64[0] = *(double *)(v47 + 16) + *(double *)v47 * v185.f64[0] + v98 * v185.f64[1];
          v102 = *(double *)(v47 + 40) + v101 * v185.f64[1];
          goto LABEL_62;
        }
LABEL_58:
        if (v52 > 1)
          goto LABEL_61;
        if (!v52)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        v98 = *(double *)(v47 + 8);
        v99 = *(double *)v47;
        v100.f64[0] = *(double *)(v47 + 16) + *(double *)v47 * v185.f64[0] + v98 * v185.f64[1];
        v101 = *(double *)(v47 + 32);
        v102 = v185.f64[1] * v101 + *(double *)(v47 + 40);
LABEL_62:
        v100.f64[1] = v102;
        _Q16 = vmlaq_n_f64(vmulq_n_f64(v181, v99), *(float64x2_t *)&v182[8], v98);
        v104 = *(double *)v182 * v99 + *(double *)&v182[24] * v98;
        _Q4 = vmlaq_n_f64(vmulq_f64(v181, (float64x2_t)0), *(float64x2_t *)&v182[8], v101);
        v106 = *(double *)v182 * 0.0 + *(double *)&v182[24] * v101;
        v107 = vsubq_f64(*(float64x2_t *)(*a1 + 16 * v37), v100);
        v39 = *a3;
        v108 = *(_QWORD *)(*a3 + 8 * v37);
        _D6 = *(_QWORD *)(v108 + 48);
        v110 = *(float64x2_t *)(v108 + 32);
        v111 = *(double *)(v108 + 80);
        v112 = *(float64x2_t *)(v108 + 64);
        v113 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v108, _Q16.f64[0]), v110, _Q16, 1), v112, v104);
        __asm { FMLA            D20, D6, V16.D[1] }
        _Q1.f64[0] = _D20 + v111 * v104;
        v115 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v108, _Q4.f64[0]), v110, _Q4, 1), v112, v106);
        __asm { FMLA            D3, D6, V4.D[1] }
        _Q2.f64[0] = _Q3.f64[0] + v111 * v106;
        _Q3.f64[0] = *(double *)(*a2 + 8 * v37) * *(double *)(*a2 + 8 * v37);
        if (_Q3.f64[0] == 0.0)
          _Q3.f64[0] = 1.0;
        else
          _Q3.f64[0] = 1.0 / _Q3.f64[0];
        _Q4.f64[0] = *(float64_t *)v178;
        v110.f64[0] = *((float64_t *)&v178[1] + 1);
        v15.f64[0] = v180;
        v117 = vmulq_f64(_Q1, _Q3).f64[0];
        v118 = vmulq_n_f64(v113, _Q3.f64[0]);
        *(_QWORD *)&v119 = *(_OWORD *)&vmulq_f64(_Q2, _Q3);
        v120 = vmulq_n_f64(v115, _Q3.f64[0]);
        v121 = vmlaq_n_f64(vmulq_n_f64(v118, v113.f64[0]), v120, v115.f64[0]);
        v16.f64[0] = vmlad_n_f64(vmuld_n_f64(v117, v113.f64[0]), v115.f64[0], v119);
        v122 = vmlaq_laneq_f64(vmulq_laneq_f64(v118, v113, 1), v120, v115, 1);
        v113.f64[0] = vmlad_n_f64(vmuld_lane_f64(v117, v113, 1), v115.f64[1], v119);
        v123 = vmlaq_n_f64(vmulq_n_f64(v118, _Q1.f64[0]), v120, _Q2.f64[0]);
        _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0] * v117, _Q2.f64[0], v119);
        v124 = vaddq_f64(v177, v121);
        v125 = vaddq_f64(_Q4, v16);
        v126 = (int8x16_t)vaddq_f64(*(float64x2_t *)((char *)v178 + 8), v122);
        v127 = vaddq_f64(v179, v123);
        *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vaddq_f64(v15, _Q1);
        v177 = v124;
        *(float64_t *)v178 = v125.f64[0];
        *(int8x16_t *)((char *)v178 + 8) = v126;
        *((_QWORD *)&v178[1] + 1) = *(_OWORD *)&vaddq_f64(v110, v113);
        v179 = v127;
        v180 = _Q1.f64[0];
        a14 = vmlaq_laneq_f64(vmulq_n_f64(v118, v107.f64[0]), v120, v107, 1);
        v128.f64[0] = v173;
        v128.f64[1] = v172;
        v125.f64[0] = vmlad_n_f64(vmuld_n_f64(v117, v107.f64[0]), v107.f64[1], v119);
        v38 = (int8x16_t)vaddq_f64(v128, a14);
        v14 = (float64x2_t)vextq_s8(v38, v38, 8uLL);
        v174 = vaddq_f64(v174, v125);
        ++v37;
      }
      while (v34 != v37);
      v159 = (float64x2_t)vextq_s8(v126, v126, 8uLL);
      a14 = (float64x2_t)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL);
      v153 = sqrt(v124.f64[0]);
      v154 = *(double *)v126.i64 / v153;
      v155 = sqrt(v159.f64[0] - v154 * v154);
      v156 = v127.f64[0] / v153;
      a14.f64[0] = (a14.f64[0] - v154 * v156) / v155;
      v159.f64[0] = sqrt(_Q1.f64[0] - v156 * v156 - a14.f64[0] * a14.f64[0]);
      v157 = *(double *)v38.i64 / v153;
      v158 = (v14.f64[0] - *(double *)v38.i64 / v153 * v154) / v155;
      v15.f64[1] = v174.f64[1];
      v159.f64[0] = (v174.f64[0] - v157 * v156 - v158 * a14.f64[0]) / v159.f64[0] / v159.f64[0];
      v124.f64[0] = (v158 - a14.f64[0] * v159.f64[0]) / v155;
      v127.f64[0] = (v157 - v156 * v159.f64[0] - v154 * v124.f64[0]) / v153;
      v160 = sqrt(v127.f64[0] * v127.f64[0] + v124.f64[0] * v124.f64[0] + v159.f64[0] * v159.f64[0]) / v168;
      if (v160 > v35)
        return 0;
      v127.f64[1] = v124.f64[0];
      v124.f64[0] = *(float64_t *)(a6 + 16);
      *(float64x2_t *)a6 = vaddq_f64(v127, *(float64x2_t *)a6);
      *(_QWORD *)(a6 + 16) = *(_OWORD *)&vaddq_f64(v159, v124);
      v33 = v170 + 1;
      _ZF = v160 < a9 || v33 == a8;
      v35 = v160;
      v36 = 0uLL;
    }
    while (!_ZF);
  }
  if (a7)
  {
    sub_20E8BE424((uint64_t)&v181);
    v162 = v183;
    *(_OWORD *)(a7 + 32) = *(_OWORD *)&v182[16];
    *(_OWORD *)(a7 + 48) = v162;
    *(_QWORD *)(a7 + 64) = v184;
    v163 = *(_OWORD *)v182;
    *(float64x2_t *)a7 = v181;
    *(_OWORD *)(a7 + 16) = v163;
  }
  return 1;
}

void **sub_20F0BC774(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  void *v19;

  v2 = (char *)a1[6];
  if (v2)
  {
    v3 = (char *)a1[7];
    v4 = a1[6];
    if (v3 != v2)
    {
      v5 = (char *)a1[7];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v8 = (char *)a1[3];
  if (v8)
  {
    v9 = (char *)a1[4];
    v10 = a1[3];
    if (v9 != v8)
    {
      v11 = (char *)a1[4];
      do
      {
        v13 = (void *)*((_QWORD *)v11 - 3);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *((_QWORD *)v9 - 2) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = a1[3];
    }
    a1[4] = v8;
    operator delete(v10);
  }
  v14 = (char *)*a1;
  if (*a1)
  {
    v15 = (char *)a1[1];
    v16 = *a1;
    if (v15 != v14)
    {
      v17 = (char *)a1[1];
      do
      {
        v19 = (void *)*((_QWORD *)v17 - 3);
        v17 -= 24;
        v18 = v19;
        if (v19)
        {
          *((_QWORD *)v15 - 2) = v18;
          operator delete(v18);
        }
        v15 = v17;
      }
      while (v17 != v14);
      v16 = *a1;
    }
    a1[1] = v14;
    operator delete(v16);
  }
  return a1;
}

void sub_20F0BC880(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20F0BCDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F0BCE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0BCE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F0BCE84(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20F0BD268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F0BD28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0BD2A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F0BD2C4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F0BD654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0BD678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0BD68C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0BD6B0(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  _OWORD *v3;
  _OWORD *v4;
  float64x2_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  float64x2_t *v10;
  double v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  void **v19;
  _BYTE *v20;
  unint64_t v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  char *v33;
  char **v34;
  _BYTE *v35;
  _BYTE *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  char *v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t i;
  unsigned __int8 v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t j;
  unsigned __int8 v63;
  int32x4_t **v64;
  int32x4_t *v65;
  int32x4_t *v66;
  unint64_t v67;
  unsigned int v68;
  int32x4_t *v69;
  uint64_t v70;
  int32x4_t *v71;
  int32x4_t v72;
  uint64_t v73;
  int32x4_t v74;
  int32x4_t v75;
  __int32 v76;
  unsigned int *v77;
  unsigned int *v78;
  char *v79;
  unint64_t v80;
  unsigned __int8 v81;
  uint64_t k;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t m;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t *v91;
  unsigned __int8 v92;
  uint64_t n;
  uint64_t v94;
  unsigned __int8 v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  float64_t v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  _BYTE *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  size_t v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  __int128 *v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  _BYTE *v138;
  _BYTE *v139;
  int64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  unint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  char *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  _OWORD *v153;
  __int128 *v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  _BYTE *v158;
  _BYTE *v159;
  int64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  unint64_t v165;
  _BYTE *v166;
  char *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  _OWORD *v172;
  __int128 *v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  unint64_t v177;
  unsigned int v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned __int8 v186;
  uint64_t v187;
  uint64_t ii;
  unsigned __int8 v189;
  uint64_t v190;
  uint64_t *v191;
  unsigned __int8 v192;
  uint64_t v193;
  uint64_t jj;
  unsigned __int8 v195;
  uint64_t v196;
  uint64_t *v197;
  unsigned __int8 v198;
  uint64_t v199;
  uint64_t kk;
  unsigned __int8 v201;
  uint64_t v202;
  uint64_t v203;
  unsigned __int8 v204;
  char *v205;
  uint64_t v206;
  uint64_t mm;
  unsigned __int8 v208;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  double v217;
  float64x2_t v218;
  unint64_t v219;
  double v220;
  uint64_t v221;
  double v222;
  uint64_t v226;
  double v227;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  double v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v239;
  char *v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  char *v244;
  void **v245;
  float64x2_t *v246;
  float64x2_t *v247;
  unint64_t v248;
  void **v249;
  void **v250;
  char **v251;
  char *v252;
  float64_t v253;
  float64x2_t v254;
  float64x2_t v255;
  char *v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  char *v260;
  char *v261;
  __int128 v262;
  __int128 v263;
  char *v264;
  float64x2_t v265;
  __int128 v266;
  __int128 v267;
  float64_t v268;
  float64x2_t *v269;
  char **v270;
  char *v271;
  uint64_t *v272;
  char *v273;
  unint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  _BYTE *v284;
  _DWORD *v285;
  int64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  _OWORD *v291;
  char *v292;
  uint64_t v293;
  __int128 v294;
  int v295;
  long double v296;
  uint64_t v297;
  unint64_t v298;
  char *v299;
  unint64_t v300;
  size_t v301;
  size_t v302;
  int64x2_t *v303;
  char *v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  unint64_t v309;
  unsigned __int8 v310;
  uint64_t v311;
  uint64_t nn;
  unsigned __int8 v313;
  uint64_t v314;
  char *v315;
  unsigned __int8 v316;
  uint64_t v317;
  uint64_t i1;
  unsigned __int8 v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  unsigned __int8 v324;
  uint64_t v325;
  uint64_t v326;
  unsigned __int8 v327;
  uint64_t v328;
  uint64_t *v329;
  unsigned __int8 v330;
  uint64_t v331;
  uint64_t v332;
  unsigned __int8 v333;
  uint64_t v334;
  uint64_t *v335;
  unsigned __int8 v336;
  uint64_t v337;
  uint64_t v338;
  unsigned __int8 v339;
  unint64_t v340;
  unint64_t v341;
  char *v342;
  unsigned __int8 v343;
  uint64_t v344;
  uint64_t i2;
  unsigned __int8 v346;
  uint64_t v347;
  char *v348;
  unsigned __int8 v349;
  uint64_t v350;
  uint64_t i3;
  unsigned __int8 v352;
  unint64_t v353;
  char *v354;
  unsigned __int8 v355;
  uint64_t v356;
  uint64_t i4;
  unsigned __int8 v358;
  uint64_t v359;
  uint64_t *v360;
  unsigned __int8 v361;
  uint64_t v362;
  uint64_t i5;
  unsigned __int8 v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  unint64_t v368;
  _BYTE *v369;
  int64x2_t *v370;
  int64_t v371;
  unint64_t v372;
  int64x2_t *v373;
  uint64_t v374;
  char *v375;
  unint64_t v376;
  unsigned __int8 v377;
  uint64_t v378;
  uint64_t i6;
  unsigned __int8 v380;
  uint64_t v381;
  uint64_t *v382;
  unint64_t v383;
  unsigned __int8 v384;
  uint64_t v385;
  uint64_t i7;
  unsigned __int8 v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t v391;
  _BYTE *v392;
  int64x2_t *v393;
  int64_t v394;
  unint64_t v395;
  int64x2_t *v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int64x2_t *v401;
  int64x2_t *v402;
  uint64_t v403;
  int64x2_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  _OWORD *v408;
  char *v409;
  uint64_t v410;
  __int128 v411;
  unint64_t v412;
  unint64_t v413;
  int v414;
  float64x2_t *v415;
  uint64_t v416;
  __int128 v417;
  uint64_t v418;
  double *v419;
  unint64_t v420;
  void *v421;
  int64x2_t *v422;
  char v424;
  uint64_t v426;
  double *v427;
  int64x2_t *v428;
  int64x2_t *v429;
  unint64_t v430;
  int64x2_t v431;
  int64x2_t v432;
  double *v433;
  unint64_t v434;
  char *v435;
  uint64_t *v436;
  double *v437;
  uint64_t v438;
  double v439;
  char *v440;
  char *v442;
  unint64_t v443;
  double *v444;
  char *v445;
  uint64_t v446;
  uint64_t v447;
  _OWORD *v448;
  __int128 *v449;
  uint64_t v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  unint64_t v460;
  uint64_t v461;
  _OWORD *v462;
  unsigned int v463;
  unint64_t v464;
  char *v465;
  __int128 v466;
  __int128 v467;
  unint64_t v468;
  float64x2_t v473;
  double v476;
  double v484;
  double v487;
  float64x2_t **v488;
  double v489;
  double v490;
  int8x16_t v491;
  uint64_t v492;
  int8x16_t v493;
  int8x16_t v494;
  float64x2_t v495;
  unint64_t v496;
  unint64_t v497;
  float64x2_t **v498;
  float64x2_t *v499;
  float64x2_t *v500;
  float64x2_t v502;
  double v504;
  float64x2_t **v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t *v509;
  float64x2_t *v510;
  float64x2_t *v511;
  float64x2_t v512;
  double v514;
  float64x2_t v517;
  float64x2_t v519;
  double v521;
  float64x2_t v522;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  double v539;
  uint64_t v540;
  void *v542;
  char *v543;
  char *v544;
  char *v545;
  char *v546;
  char *v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  uint64_t v551;
  int64x2_t v552;
  uint64_t v553;
  float64x2_t v554;
  unsigned int *v555;
  float64x2_t **v556;
  float64x2_t *v557;
  float64x2_t *v558;
  float64x2_t *v559;
  float64x2_t *v560;
  double v562;
  float64x2_t v565;
  float64x2_t v567;
  double v569;
  float64x2_t v570;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  uint64_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  char *v595;
  int64_t v596;
  uint64_t v597;
  unint64_t v598;
  unint64_t v599;
  char *v600;
  char *v601;
  char *v602;
  int64_t v603;
  unint64_t v604;
  char *v605;
  uint64_t v606;
  uint64_t v607;
  unint64_t v608;
  unint64_t v609;
  _BYTE *v610;
  char *v611;
  _QWORD *v612;
  void *v613;
  int64_t v614;
  unint64_t v615;
  char *v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  float64x2_t *v621;
  float64x2_t *v622;
  uint64_t v623;
  unint64_t v624;
  uint64_t v625;
  uint64_t v626;
  float64x2_t *v627;
  float64x2_t *v628;
  uint64_t v629;
  unsigned int *v630;
  int8x16_t v631;
  float64x2_t v632;
  double v633;
  int8x16_t v634;
  double v635;
  int8x16_t v636;
  unint64_t v637;
  int8x16_t v638;
  double v639;
  double *v640;
  uint64_t v641;
  uint64_t v642;
  __int128 *v643;
  float64x2_t *v644;
  double v646;
  float64x2_t v649;
  float64x2_t v651;
  double v653;
  float64x2_t v654;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  _BOOL4 v664;
  float64x2_t v666;
  int8x16_t v667;
  float64x2_t v668;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  double v676;
  float64x2_t v677;
  double v678;
  double v679;
  double v680;
  double v681;
  double v682;
  _BOOL4 v683;
  double v684;
  uint64_t v685;
  __int128 v686;
  void *v687;
  unint64_t v689;
  unint64_t v690;
  unint64_t v691;
  char v692;
  unint64_t v693;
  float64x2_t v694;
  double v695;
  int8x16_t v696;
  float64x2_t v697;
  float64_t v698;
  float64_t v699;
  float64_t v700;
  unint64_t v701;
  char *v702;
  float64_t v703;
  double *v704;
  float64_t v705;
  float64x2_t v706;
  uint64_t v707;
  float64_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  int8x16_t v715;
  float64x2_t v716;
  float64x2_t v717;
  int8x16_t v718;
  float64x2_t v719;
  float64x2_t v720;
  double v721;
  float64x2_t v722;
  double v723;
  float64x2_t v724;
  double v725;
  float64x2_t v726;
  double v727;
  float64x2_t v728;
  double v729;
  double v730;
  double v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  __int128 v735;
  float64x2_t v736;
  double v737;
  float64x2_t *v738;
  __int128 v739;
  float64x2_t v740;
  int v741;
  float64x2_t v742;
  float64x2_t v743;
  char *v744;
  unint64_t v745;
  uint64_t v746;
  double v747;
  float64x2_t v748;
  char *v749;
  unint64_t v750;
  char *v751;
  int64x2_t *v752;
  unint64_t v753;
  _BYTE *v754;
  _BYTE *v755;
  char **v756;
  uint64_t v757;
  int64x2_t *v758;
  unint64_t v759;
  uint64_t v760;
  unint64_t v761;
  unint64_t v762;
  char *v763;
  _QWORD *v764;
  unint64_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64_t v769;
  char *v770;
  char *v771;
  double v772;
  int8x16_t v773;
  float64x2_t v774;
  float64_t v775;
  unint64_t v776;
  int64x2_t *v777;
  double v778;
  double v779;
  float64x2_t v780;
  float64x2_t v781;
  char *v782;
  char *v783;
  char *v784;
  unint64_t v785;
  double v786;
  float64x2_t v787;
  double v788;
  float64_t v789;
  uint64_t v790;
  unint64_t v791;
  uint64_t v792;
  void **v793;
  unint64_t v794;
  char *v795;
  char *v796;
  char *v797;
  char *v798;
  char *v799;
  char *v800;
  char *v801;
  char *v802;
  char *v803;
  void **v804[3];
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  _QWORD v809[3];
  float64x2_t v810;
  double v811;
  _OWORD v812[2];
  _OWORD v813[4];
  double v814;
  void *__p;
  void *v816;
  char *v817;
  void *v818;
  void *v819;
  char *v820;
  float64x2_t v821;
  _BYTE v822[24];
  double v823;
  _BYTE v824[24];
  double v825;
  _BYTE v826[24];
  float64x2_t v827;
  double v828[3];
  double v829;
  float64x2x4_t v830;
  float64x2x4_t v831;

  v1 = a1;
  sub_20F0C27E8((uint64_t)v804, (unsigned int *)(a1 + 208), (_QWORD *)(a1 + 376), (_QWORD *)(a1 + 424));
  v2 = operator new(0x48uLL);
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  *((_QWORD *)v2 + 8) = 0;
  v795 = (char *)v2;
  v796 = (char *)v2 + 72;
  v797 = (char *)v2 + 72;
  v3 = operator new(0x48uLL);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *((_QWORD *)v3 + 8) = 0;
  v798 = (char *)v3;
  v799 = (char *)v3 + 72;
  v800 = (char *)v3 + 72;
  v4 = operator new(0x48uLL);
  v803 = (char *)v4 + 72;
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  *((_QWORD *)v4 + 8) = 0;
  v801 = (char *)v4;
  v802 = (char *)v4 + 72;
  if (*(_DWORD *)(v1 + 104) <= 1u
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 943, (uint64_t)"config_.mininum_track_length_for_spatial_track_triangulation >= kMinTrackLengthForTriangulation && \"Minimum track length cannot be less than 2\"", 143, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v821 = 0uLL;
  *(_QWORD *)v822 = 0;
  memset(v826, 0, sizeof(v826));
  v819 = 0;
  v818 = 0;
  v820 = 0;
  v816 = 0;
  __p = 0;
  v817 = 0;
  v6 = *(unsigned int *)(v1 + 216);
  if ((_DWORD)v6)
  {
    v7 = (char *)operator new(16 * v6);
    *(_QWORD *)&v821.f64[0] = operator new(16 * v6);
    v821.f64[1] = v821.f64[0];
    *(_QWORD *)v822 = *(_QWORD *)&v821.f64[0] + 16 * v6;
    *(_QWORD *)v826 = operator new(8 * v6);
    *(_QWORD *)&v826[8] = *(_QWORD *)v826;
    *(_QWORD *)&v826[16] = *(_QWORD *)v826 + 8 * v6;
    v818 = operator new(8 * v6);
    v819 = v818;
    v820 = (char *)v818 + 8 * v6;
    v770 = &v7[16 * v6];
    __p = operator new(8 * v6);
    v816 = __p;
    v817 = (char *)__p + 8 * v6;
  }
  else
  {
    v7 = 0;
    v770 = 0;
  }
  v8 = 0;
  _ZF = *(_BYTE *)(v1 + 164) == 0;
  v10 = (float64x2_t *)v809;
  v810 = 0uLL;
  if (_ZF)
    v10 = &v810;
  v738 = v10;
  v811 = 0.0;
  memset(v809, 0, sizeof(v809));
  v741 = *(_DWORD *)(v1 + 136);
  v11 = *(double *)(v1 + 144);
  v12 = v7;
  v790 = v1;
  do
  {
    v782 = v7;
    v13 = v805;
    if (0xAAAAAAAAAAAAAAABLL * ((v806 - v805) >> 3) <= v8)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 498, (uint64_t)"pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v13 = v805;
    }
    v14 = (uint64_t *)(v13 + 24 * v8);
    v16 = *v14;
    v15 = v14[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v796 - v795) >> 3) <= v8
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 844, (uint64_t)"pose_idx < tracks_structures_.size() && \"Invalid access: Index out of range.\"", 77, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| 0xAAAAAAAAAAAAAAABLL * ((v799 - v798) >> 3) <= v8&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 847, (uint64_t)"pose_idx < structure_to_track_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_755:
      abort();
    }
    v17 = v801;
    if (0xAAAAAAAAAAAAAAABLL * ((v802 - v801) >> 3) <= v8)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 850, (uint64_t)"pose_idx < track_to_structure_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_755;
      }
      v17 = v801;
    }
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3);
    v19 = (void **)&v795[24 * v8];
    v20 = *v19;
    v19[1] = *v19;
    *(_QWORD *)&v798[24 * v8 + 8] = *(_QWORD *)&v798[24 * v8];
    *(_QWORD *)&v17[24 * v8 + 8] = *(_QWORD *)&v17[24 * v8];
    v21 = v18;
    v22 = *v19;
    v776 = v18;
    if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v19[2] - (_BYTE *)*v19) >> 5) < v18)
    {
      v23 = (char *)operator new(96 * v18);
      v24 = &v23[v20 - v22];
      v25 = v24;
      if (v20 != v22)
      {
        v26 = &v23[v20 - v22];
        do
        {
          v25 = v26 - 96;
          v27 = *((_OWORD *)v20 - 6);
          *((_QWORD *)v26 - 10) = *((_QWORD *)v20 - 10);
          *((_OWORD *)v26 - 6) = v27;
          v28 = *(_OWORD *)(v20 - 40);
          v29 = *(_OWORD *)(v20 - 24);
          v30 = *((_QWORD *)v20 - 1);
          *(_OWORD *)(v26 - 56) = *(_OWORD *)(v20 - 56);
          *((_QWORD *)v26 - 1) = v30;
          *(_OWORD *)(v26 - 24) = v29;
          *(_OWORD *)(v26 - 40) = v28;
          *(_OWORD *)(v26 - 72) = *(_OWORD *)(v20 - 72);
          v20 -= 96;
          v26 -= 96;
        }
        while (v20 != v22);
      }
      *v19 = v25;
      v21 = v776;
      v19[1] = v24;
      v19[2] = &v23[96 * v776];
      if (v22)
        operator delete(v22);
    }
    v31 = &v798[24 * v8];
    v32 = *(_BYTE **)v31;
    if (v21 > (uint64_t)(*((_QWORD *)v31 + 2) - *(_QWORD *)v31) >> 2)
    {
      v33 = &v798[24 * v8];
      v36 = (_BYTE *)*((_QWORD *)v33 + 1);
      v34 = (char **)(v33 + 8);
      v35 = v36;
      v37 = (char *)operator new(4 * v21);
      v38 = v36 - v32;
      v39 = &v37[(v36 - v32) & 0xFFFFFFFFFFFFFFFCLL];
      v40 = v39;
      if (v36 == v32)
        goto LABEL_36;
      if ((unint64_t)(v38 - 4) >= 0x2C)
      {
        v40 = &v37[(v35 - v32) & 0xFFFFFFFFFFFFFFFCLL];
        if (v35 - v37 - (v38 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
        {
          v41 = v38 >> 2;
          v42 = ((unint64_t)(v38 - 4) >> 2) + 1;
          v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
          v44 = &v35[-v43];
          v40 = &v39[-v43];
          v45 = &v37[4 * v41 - 16];
          v46 = (__int128 *)(v35 - 16);
          v47 = v42 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v48 = *v46;
            *((_OWORD *)v45 - 1) = *(v46 - 1);
            *(_OWORD *)v45 = v48;
            v45 -= 32;
            v46 -= 2;
            v47 -= 8;
          }
          while (v47);
          v35 = v44;
          if (v42 == (v42 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_36:
            *(_QWORD *)v31 = v40;
            v21 = v776;
            *v34 = v39;
            *((_QWORD *)v31 + 2) = &v37[4 * v776];
            if (v32)
              operator delete(v32);
            goto LABEL_38;
          }
        }
      }
      else
      {
        v40 = &v37[(v35 - v32) & 0xFFFFFFFFFFFFFFFCLL];
      }
      do
      {
        v49 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v40 - 1) = v49;
        v40 -= 4;
      }
      while (v35 != v32);
      goto LABEL_36;
    }
LABEL_38:
    v50 = &v801[24 * v8];
    LODWORD(v812[0]) = -1;
    v51 = (uint64_t)(*((_QWORD *)v50 + 1) - *(_QWORD *)v50) >> 2;
    if (v21 > v51)
    {
      sub_20EDDCBD0((uint64_t)v50, v21 - v51, (const float *)v812);
      v52 = v782;
LABEL_43:
      v53 = 0;
      while (1)
      {
        v54 = v805;
        if (0xAAAAAAAAAAAAAAABLL * ((v806 - v805) >> 3) <= v8)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 522, (uint64_t)"pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v55 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v56 = qword_254A6DE40;
            for (i = qword_254A6DE48; v56 != i; v56 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v56)(*(_QWORD *)(v56 + 8), "pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, "", 0);
          }
          v58 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
LABEL_744:
            abort();
          qword_254A6DE58(unk_254A6DE60, "pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, "", 0);
          v54 = v805;
        }
        v59 = *(_QWORD *)(v54 + 24 * v8);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v54 + 24 * v8 + 8) - v59) >> 3) <= v53)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 525, (uint64_t)"track_idx < spatial_tracks_observation_indices_[pose_idx].size() && \"Invalid access: Index out of range.\"", 105, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          v60 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v60 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v61 = qword_254A6DE40;
            for (j = qword_254A6DE48; v61 != j; v61 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v61)(*(_QWORD *)(v61 + 8), "track_idx < spatial_tracks_observation_indices_[pose_idx].size() && \"Invalid access: Index out of range.\"", 105, "", 0);
          }
          v63 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_744;
          qword_254A6DE58(unk_254A6DE60, "track_idx < spatial_tracks_observation_indices_[pose_idx].size() && \"Invalid access: Index out of range.\"", 105, "", 0);
          v54 = v805;
          v59 = *(_QWORD *)(v805 + 24 * v8);
        }
        v64 = (int32x4_t **)(v59 + 24 * v53);
        v66 = *v64;
        v65 = v64[1];
        if (v66 == v65)
        {
          v68 = 0;
          goto LABEL_72;
        }
        v67 = (char *)v65 - (char *)v66 - 4;
        if (v67 < 0x1C)
          break;
        v70 = (v67 >> 2) + 1;
        v69 = (int32x4_t *)((char *)v66 + 4 * (v70 & 0x7FFFFFFFFFFFFFF8));
        v71 = v66 + 1;
        v72 = 0uLL;
        v73 = v70 & 0x7FFFFFFFFFFFFFF8;
        v74 = 0uLL;
        v75.i64[0] = -1;
        v75.i64[1] = -1;
        do
        {
          v72 = vsubq_s32(v72, vcgtq_s32(v71[-1], v75));
          v74 = vsubq_s32(v74, vcgtq_s32(*v71, v75));
          v71 += 2;
          v73 -= 8;
        }
        while (v73);
        v68 = vaddvq_s32(vaddq_s32(v74, v72));
        if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_71;
LABEL_72:
        if (v68 >= *(_DWORD *)(v1 + 104))
        {
          v783 = v52;
          v78 = *(unsigned int **)(v1 + 112);
          v77 = *(unsigned int **)(v1 + 120);
          v79 = v12;
          if (v78 != v77)
          {
            while (1)
            {
              v80 = *v78;
              if (0xAAAAAAAAAAAAAAABLL * ((v806 - v54) >> 3) <= v8)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 461, (uint64_t)"pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                v81 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v83 = qword_254A6DE40;
                  for (k = qword_254A6DE48; v83 != k; v83 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v83)(*(_QWORD *)(v83 + 8), "pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, "", 0);
                }
                v84 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v84 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                v1 = v790;
                v12 = v79;
                if (!byte_254A6DE68)
LABEL_739:
                  abort();
                qword_254A6DE58(unk_254A6DE60, "pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, "", 0);
                v54 = v805;
              }
              v85 = *(_QWORD *)(v54 + 24 * v8);
              if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v54 + 24 * v8 + 8) - v85) >> 3) <= v53)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 464, (uint64_t)"track_idx < spatial_tracks_observation_indices_[pose_idx].size() && \"Invalid access: Index out of range.\"", 105, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                v86 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v86 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v88 = qword_254A6DE40;
                  for (m = qword_254A6DE48; v88 != m; v88 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v88)(*(_QWORD *)(v88 + 8), "track_idx < spatial_tracks_observation_indices_[pose_idx].size() && \"Invalid access: Index out of range.\"", 105, "", 0);
                }
                v89 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                v1 = v790;
                v12 = v79;
                if (!byte_254A6DE68)
                  goto LABEL_739;
                qword_254A6DE58(unk_254A6DE60, "track_idx < spatial_tracks_observation_indices_[pose_idx].size() && \"Invalid access: Index out of range.\"", 105, "", 0);
                v54 = v805;
                v85 = *(_QWORD *)(v805 + 24 * v8);
              }
              v91 = (uint64_t *)(v85 + 24 * v53);
              v90 = *v91;
              if (v80 >= (v91[1] - *v91) >> 2)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 468, (uint64_t)"camera_stream_idx < spatial_tracks_observation_indices_[pose_idx][track_idx].size() && \"Invalid access: Index out of range.\"", 124, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                v92 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v94 = qword_254A6DE40;
                  for (n = qword_254A6DE48; v94 != n; v94 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v94)(*(_QWORD *)(v94 + 8), "camera_stream_idx < spatial_tracks_observation_indices_[pose_idx][track_idx].size() && \"Invalid access: Index out of range.\"", 124, "", 0);
                }
                v95 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v95 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                v1 = v790;
                v12 = v79;
                if (!byte_254A6DE68)
                  goto LABEL_739;
                qword_254A6DE58(unk_254A6DE60, "camera_stream_idx < spatial_tracks_observation_indices_[pose_idx][track_idx].size() && \"Invalid access: Index out of range.\"", 124, "", 0);
                v54 = v805;
                v90 = *(_QWORD *)(*(_QWORD *)(v805 + 24 * v8) + 24 * v53);
              }
              if ((*(_DWORD *)(v90 + 4 * v80) & 0x80000000) != 0)
                break;
              if (++v78 == v77)
                goto LABEL_116;
            }
            v7 = v783;
            goto LABEL_45;
          }
LABEL_116:
          v96 = v68;
          v97 = v783;
          v98 = (v783 - v12) >> 4;
          v99 = v96 - v98;
          v791 = v96;
          if (v96 <= v98)
          {
            v107 = &v12[16 * v96];
            if (v96 >= v98)
              v107 = v783;
            v784 = v107;
            v100 = v770;
          }
          else
          {
            v100 = v770;
            if (v99 <= (v770 - v783) >> 4)
            {
              v784 = &v783[16 * v99];
            }
            else
            {
              v101 = (v770 - v12) >> 3;
              if (v101 <= v96)
                v101 = v96;
              if ((unint64_t)(v770 - v12) >= 0x7FFFFFFFFFFFFFF0)
                v102 = 0xFFFFFFFFFFFFFFFLL;
              else
                v102 = v101;
              if (v102 >> 60)
                sub_20E877A38();
              v103 = (char *)operator new(16 * v102);
              v104 = &v103[16 * v98];
              if (v783 == v12)
              {
                v12 = &v103[16 * v98];
                v100 = &v103[16 * v102];
                v784 = &v104[16 * v99];
                if (v97)
                  goto LABEL_128;
              }
              else
              {
                v105 = &v103[16 * v98];
                do
                {
                  *((_OWORD *)v105 - 1) = *((_OWORD *)v97 - 1);
                  v105 -= 16;
                  v97 -= 16;
                }
                while (v97 != v12);
                v97 = v12;
                v12 = v105;
                v100 = &v103[16 * v102];
                v784 = &v104[16 * v99];
                if (v97)
                {
LABEL_128:
                  v106 = v100;
                  operator delete(v97);
                  v100 = v106;
                }
              }
              v96 = v791;
            }
          }
          v770 = v100;
          v108 = v821.f64[1];
          v109 = *(char **)&v821.f64[0];
          v110 = (uint64_t)(*(_QWORD *)&v821.f64[1] - *(_QWORD *)&v821.f64[0]) >> 4;
          v111 = v96 - v110;
          if (v96 <= v110)
          {
            if (v96 >= v110)
              goto LABEL_155;
            v115 = *(_QWORD *)&v821.f64[0] + 16 * v96;
          }
          else
          {
            if (v111 > (uint64_t)(*(_QWORD *)v822 - *(_QWORD *)&v821.f64[1]) >> 4)
            {
              v112 = (uint64_t)(*(_QWORD *)v822 - *(_QWORD *)&v821.f64[0]) >> 3;
              if (v112 <= v96)
                v112 = v96;
              if (*(_QWORD *)v822 - *(_QWORD *)&v821.f64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
                v112 = 0xFFFFFFFFFFFFFFFLL;
              if (v112 >> 60)
LABEL_748:
                sub_20E877A38();
              v759 = v112;
              v113 = (char *)operator new(16 * v112);
              v114 = &v113[16 * v110];
              if (*(char **)&v108 == v109)
              {
                v96 = v791;
              }
              else
              {
                v96 = v791;
                do
                {
                  *((_OWORD *)v114 - 1) = *(_OWORD *)(*(_QWORD *)&v108 - 16);
                  v114 -= 16;
                  *(_QWORD *)&v108 -= 16;
                }
                while (*(char **)&v108 != v109);
                v108 = *(double *)&v109;
              }
              *(_QWORD *)&v821.f64[0] = v114;
              *(_QWORD *)&v821.f64[1] = &v113[16 * v110 + 16 * v111];
              *(_QWORD *)v822 = &v113[16 * v759];
              if (v108 != 0.0)
              {
                operator delete(*(void **)&v108);
                v96 = v791;
              }
LABEL_155:
              v116 = *(char **)v826;
              v117 = *(_BYTE **)&v826[8];
              v118 = (uint64_t)(*(_QWORD *)&v826[8] - *(_QWORD *)v826) >> 3;
              v119 = v96 - v118;
              if (v96 <= v118)
              {
                if (v96 >= v118)
                  goto LABEL_177;
                v129 = *(_QWORD *)v826 + 8 * v96;
              }
              else
              {
                if (v119 > (uint64_t)(*(_QWORD *)&v826[16] - *(_QWORD *)&v826[8]) >> 3)
                {
                  v760 = (uint64_t)(*(_QWORD *)&v826[8] - *(_QWORD *)v826) >> 3;
                  v120 = (uint64_t)(*(_QWORD *)&v826[16] - *(_QWORD *)v826) >> 2;
                  if (v120 <= v96)
                    v120 = v96;
                  if (*(_QWORD *)&v826[16] - *(_QWORD *)v826 >= 0x7FFFFFFFFFFFFFF8uLL)
                    v120 = 0x1FFFFFFFFFFFFFFFLL;
                  if (v120 >> 61)
                    goto LABEL_748;
                  v753 = v120;
                  v121 = (char *)operator new(8 * v120);
                  v122 = 8 * v119;
                  v744 = v121;
                  v123 = &v121[8 * v760];
                  v749 = (char *)v122;
                  bzero(v123, v122);
                  v124 = v117 - v116;
                  if (v117 == v116)
                  {
                    v126 = v123;
                    v96 = v791;
                    v127 = v744;
                    v128 = v749;
                  }
                  else
                  {
                    v125 = v124 - 8;
                    v96 = v791;
                    if ((unint64_t)(v124 - 8) < 0x58)
                    {
                      v126 = v123;
                      v127 = v744;
                      v128 = v749;
                      goto LABEL_174;
                    }
                    v127 = v744;
                    v126 = v123;
                    v128 = v749;
                    if ((unint64_t)(v116 - v744) < 0x20)
                      goto LABEL_767;
                    v130 = (v125 >> 3) + 1;
                    v131 = 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
                    v132 = &v117[-v131];
                    v126 = &v123[-v131];
                    v133 = &v744[8 * v760 - 16];
                    v134 = (__int128 *)(v117 - 16);
                    v135 = v130 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v136 = *v134;
                      *((_OWORD *)v133 - 1) = *(v134 - 1);
                      *(_OWORD *)v133 = v136;
                      v133 -= 32;
                      v134 -= 2;
                      v135 -= 4;
                    }
                    while (v135);
                    v117 = v132;
                    if (v130 != (v130 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_767:
                      do
                      {
LABEL_174:
                        v137 = *((_QWORD *)v117 - 1);
                        v117 -= 8;
                        *((_QWORD *)v126 - 1) = v137;
                        v126 -= 8;
                      }
                      while (v117 != v116);
                    }
                  }
                  *(_QWORD *)v826 = v126;
                  *(_QWORD *)&v826[8] = &v128[(_QWORD)v123];
                  *(_QWORD *)&v826[16] = &v127[8 * v753];
                  if (v116)
                  {
                    operator delete(v116);
                    v96 = v791;
                  }
LABEL_177:
                  v138 = v819;
                  v139 = v818;
                  v140 = (_BYTE *)v819 - (_BYTE *)v818;
                  v141 = ((_BYTE *)v819 - (_BYTE *)v818) >> 3;
                  v142 = v96 - v141;
                  if (v96 <= v141)
                  {
                    if (v96 < v141)
                      v819 = (char *)v818 + 8 * v96;
                  }
                  else if (v142 <= (v820 - (_BYTE *)v819) >> 3)
                  {
                    v148 = (char *)v819 + 8 * v142;
                    bzero(v819, ((8 * v96 - v140 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
                    v96 = v791;
                    v819 = v148;
                  }
                  else
                  {
                    v143 = (v820 - (_BYTE *)v818) >> 2;
                    if (v143 <= v96)
                      v143 = v96;
                    if ((unint64_t)(v820 - (_BYTE *)v818) >= 0x7FFFFFFFFFFFFFF8)
                      v143 = 0x1FFFFFFFFFFFFFFFLL;
                    if (v143 >> 61)
                      sub_20E877A38();
                    v761 = v143;
                    v754 = operator new(8 * v143);
                    v745 = v141;
                    v144 = &v754[8 * v141];
                    bzero(v144, ((8 * v791 - v140 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
                    if (v138 == v139)
                    {
                      v96 = v791;
                      v149 = v761;
                      v146 = v754;
                      v147 = 8 * v791;
                    }
                    else
                    {
                      v145 = v138 - v139 - 8;
                      if (v145 < 0x58)
                      {
                        v96 = v791;
                        v146 = v754;
                        v147 = 8 * v791;
                        goto LABEL_196;
                      }
                      v146 = v754;
                      v96 = v791;
                      v147 = 8 * v791;
                      if ((unint64_t)(v138 - &v754[v140]) < 0x20)
                        goto LABEL_196;
                      v150 = (v145 >> 3) + 1;
                      v151 = 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
                      v152 = &v138[-v151];
                      v144 -= v151;
                      v153 = &v754[8 * v745 - 16];
                      v154 = (__int128 *)(v138 - 16);
                      v155 = v150 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v156 = *v154;
                        *(v153 - 1) = *(v154 - 1);
                        *v153 = v156;
                        v153 -= 2;
                        v154 -= 2;
                        v155 -= 4;
                      }
                      while (v155);
                      v138 = v152;
                      if (v150 == (v150 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        v138 = v139;
                        v149 = v761;
                      }
                      else
                      {
LABEL_196:
                        v149 = v761;
                        do
                        {
                          v157 = *((_QWORD *)v138 - 1);
                          v138 -= 8;
                          *((_QWORD *)v144 - 1) = v157;
                          v144 -= 8;
                        }
                        while (v138 != v139);
                        v138 = v139;
                      }
                    }
                    v818 = v144;
                    v819 = &v146[v147];
                    v820 = &v146[8 * v149];
                    if (v138)
                    {
                      operator delete(v138);
                      v96 = v791;
                    }
                  }
                  v158 = v816;
                  v159 = __p;
                  v160 = (_BYTE *)v816 - (_BYTE *)__p;
                  v161 = ((_BYTE *)v816 - (_BYTE *)__p) >> 3;
                  v162 = v96 - v161;
                  if (v96 <= v161)
                  {
                    if (v96 < v161)
                      v816 = (char *)__p + 8 * v96;
                  }
                  else if (v162 <= (v817 - (_BYTE *)v816) >> 3)
                  {
                    v167 = (char *)v816 + 8 * v162;
                    bzero(v816, ((8 * v96 - v160 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
                    v816 = v167;
                  }
                  else
                  {
                    v163 = (v817 - (_BYTE *)__p) >> 2;
                    if (v163 <= v96)
                      v163 = v96;
                    if ((unint64_t)(v817 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                      v163 = 0x1FFFFFFFFFFFFFFFLL;
                    if (v163 >> 61)
                      sub_20E877A38();
                    v762 = v163;
                    v755 = operator new(8 * v163);
                    v750 = v161;
                    v164 = &v755[8 * v161];
                    v792 = 8 * v791;
                    bzero(v164, ((v792 - v160 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
                    if (v158 == v159)
                    {
                      v168 = v762;
                      v166 = v755;
                    }
                    else
                    {
                      v165 = v158 - v159 - 8;
                      if (v165 < 0x58)
                      {
                        v166 = v755;
                        goto LABEL_220;
                      }
                      v166 = v755;
                      if ((unint64_t)(v158 - &v755[v160]) < 0x20)
                        goto LABEL_220;
                      v169 = (v165 >> 3) + 1;
                      v170 = 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
                      v171 = &v158[-v170];
                      v164 -= v170;
                      v172 = &v755[8 * v750 - 16];
                      v173 = (__int128 *)(v158 - 16);
                      v174 = v169 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v175 = *v173;
                        *(v172 - 1) = *(v173 - 1);
                        *v172 = v175;
                        v172 -= 2;
                        v173 -= 2;
                        v174 -= 4;
                      }
                      while (v174);
                      v158 = v171;
                      if (v169 == (v169 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        v158 = v159;
                        v168 = v762;
                      }
                      else
                      {
LABEL_220:
                        v168 = v762;
                        do
                        {
                          v176 = *((_QWORD *)v158 - 1);
                          v158 -= 8;
                          *((_QWORD *)v164 - 1) = v176;
                          v164 -= 8;
                        }
                        while (v158 != v159);
                        v158 = v159;
                      }
                    }
                    __p = v164;
                    v816 = &v166[v792];
                    v817 = &v166[8 * v168];
                    if (v158)
                      operator delete(v158);
                  }
                  if (*(_DWORD *)(v1 + 216))
                  {
                    v177 = 0;
                    v178 = 0;
                    do
                    {
                      v185 = v805;
                      if (0xAAAAAAAAAAAAAAABLL * ((v806 - v805) >> 3) <= v8)
                      {
                        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 461, (uint64_t)"pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                        v186 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                        if ((v186 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                        {
                          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                          __cxa_guard_release(&qword_254A6DE78);
                        }
                        if (!byte_254A6DE68 || byte_254A6DE70)
                        {
                          v187 = qword_254A6DE40;
                          for (ii = qword_254A6DE48; v187 != ii; v187 += 16)
                            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v187)(*(_QWORD *)(v187 + 8), "pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, "", 0);
                        }
                        v189 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                        if ((v189 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                        {
                          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                          __cxa_guard_release(&qword_254A6DE78);
                        }
                        if (!byte_254A6DE68)
LABEL_738:
                          abort();
                        qword_254A6DE58(unk_254A6DE60, "pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, "", 0);
                        v185 = v805;
                      }
                      v191 = (uint64_t *)(v185 + 24 * v8);
                      v190 = *v191;
                      if (0xAAAAAAAAAAAAAAABLL * ((v191[1] - *v191) >> 3) <= v53)
                      {
                        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 464, (uint64_t)"track_idx < spatial_tracks_observation_indices_[pose_idx].size() && \"Invalid access: Index out of range.\"", 105, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                        v192 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                        if ((v192 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                        {
                          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                          __cxa_guard_release(&qword_254A6DE78);
                        }
                        if (!byte_254A6DE68 || byte_254A6DE70)
                        {
                          v193 = qword_254A6DE40;
                          for (jj = qword_254A6DE48; v193 != jj; v193 += 16)
                            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v193)(*(_QWORD *)(v193 + 8), "track_idx < spatial_tracks_observation_indices_[pose_idx].size() && \"Invalid access: Index out of range.\"", 105, "", 0);
                        }
                        v195 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                        if ((v195 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                        {
                          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                          __cxa_guard_release(&qword_254A6DE78);
                        }
                        if (!byte_254A6DE68)
                          goto LABEL_738;
                        qword_254A6DE58(unk_254A6DE60, "track_idx < spatial_tracks_observation_indices_[pose_idx].size() && \"Invalid access: Index out of range.\"", 105, "", 0);
                        v190 = *(_QWORD *)(v805 + 24 * v8);
                      }
                      v197 = (uint64_t *)(v190 + 24 * v53);
                      v196 = *v197;
                      if (v177 >= (v197[1] - *v197) >> 2)
                      {
                        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 468, (uint64_t)"camera_stream_idx < spatial_tracks_observation_indices_[pose_idx][track_idx].size() && \"Invalid access: Index out of range.\"", 124, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                        v198 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                        if ((v198 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                        {
                          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                          __cxa_guard_release(&qword_254A6DE78);
                        }
                        if (!byte_254A6DE68 || byte_254A6DE70)
                        {
                          v199 = qword_254A6DE40;
                          for (kk = qword_254A6DE48; v199 != kk; v199 += 16)
                            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v199)(*(_QWORD *)(v199 + 8), "camera_stream_idx < spatial_tracks_observation_indices_[pose_idx][track_idx].size() && \"Invalid access: Index out of range.\"", 124, "", 0);
                        }
                        v201 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                        if ((v201 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                        {
                          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                          __cxa_guard_release(&qword_254A6DE78);
                        }
                        if (!byte_254A6DE68)
                          goto LABEL_738;
                        qword_254A6DE58(unk_254A6DE60, "camera_stream_idx < spatial_tracks_observation_indices_[pose_idx][track_idx].size() && \"Invalid access: Index out of range.\"", 124, "", 0);
                        v196 = *(_QWORD *)(*(_QWORD *)(v805 + 24 * v8) + 24 * v53);
                      }
                      v202 = *(unsigned int *)(v196 + 4 * v177);
                      if ((v202 & 0x80000000) == 0)
                      {
                        v203 = *(_QWORD *)(v1 + 320);
                        if (v177 >= (*(_QWORD *)(v1 + 328) - v203) >> 3)
                        {
                          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 181, (uint64_t)"camera_stream_idx < serialized_camera_stream_index_to_camera_stream_indices_mapping_.size() && \"Invalid access: Index out of range.\"", 132, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                          v204 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                          if ((v204 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                          {
                            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                            __cxa_guard_release(&qword_254A6DE78);
                          }
                          v205 = v12;
                          if (!byte_254A6DE68 || byte_254A6DE70)
                          {
                            v206 = qword_254A6DE40;
                            for (mm = qword_254A6DE48; v206 != mm; v206 += 16)
                              (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v206)(*(_QWORD *)(v206 + 8), "camera_stream_idx < serialized_camera_stream_index_to_camera_stream_indices_mapping_.size() && \"Invalid access: Index out of range.\"", 132, "", 0);
                          }
                          v208 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                          if ((v208 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                          {
                            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                            __cxa_guard_release(&qword_254A6DE78);
                          }
                          v12 = v205;
                          if (!byte_254A6DE68)
                            abort();
                          qword_254A6DE58(unk_254A6DE60, "camera_stream_idx < serialized_camera_stream_index_to_camera_stream_indices_mapping_.size() && \"Invalid access: Index out of range.\"", 132, "", 0);
                          v203 = *(_QWORD *)(v1 + 320);
                        }
                        v179 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 376)
                                                                + 48
                                                                * ((*(_QWORD *)(v1 + 400) + v8)
                                                                 % (0xAAAAAAAAAAAAAAABLL
                                                                  * ((uint64_t)(*(_QWORD *)(v1 + 384)
                                                                             - *(_QWORD *)(v1 + 376)) >> 4))))
                                                    + 104 * *(unsigned int *)(v203 + 8 * v177)
                                                    + 8)
                                        + 440 * *(unsigned int *)(v203 + 8 * v177 + 4));
                        v180 = v179[3];
                        v181 = *(_QWORD *)(v179[23] + 8 * v202);
                        v182 = *(_OWORD *)(v179[6] + 16 * v202);
                        v183 = 16 * v178;
                        *(_OWORD *)&v12[v183] = v182;
                        *(_OWORD *)(*(_QWORD *)&v821.f64[0] + v183) = *(_OWORD *)(v180 + 16 * v202);
                        v184 = 8 * v178;
                        *(_QWORD *)(*(_QWORD *)v826 + v184) = v181;
                        *(_QWORD *)((char *)v818 + v184) = *(_QWORD *)(v1 + 272) + (v177 << 7);
                        *(_QWORD *)((char *)__p + v184) = *(_QWORD *)(v1 + 248) + 1440 * v177;
                        ++v178;
                      }
                      ++v177;
                    }
                    while (v177 < *(unsigned int *)(v1 + 216));
                  }
                  v7 = v784;
                  if (((v784 - v12) & 0xFFFFFFFE0) == 0)
                    goto LABEL_45;
                  _Q0 = *(float64x2_t *)v12;
                  _Q1 = vmulq_f64(_Q0, _Q0);
                  _D2 = *((_QWORD *)v12 + 1);
                  __asm { FMLA            D1, D2, V0.D[1] }
                  _Q1.f64[0] = 1.0 / sqrt(_Q1.f64[0] + 1.0);
                  v214 = vmulq_n_f64(*(float64x2_t *)v12, _Q1.f64[0]);
                  v215 = (float64x2_t)vextq_s8((int8x16_t)v214, (int8x16_t)v214, 8uLL);
                  v216.f64[0] = _Q1.f64[0];
                  v216.f64[1] = v214.f64[0];
                  *(_QWORD *)&v217 = vextq_s8((int8x16_t)v216, (int8x16_t)v216, 8uLL).u64[0];
                  v218 = (float64x2_t)vextq_s8((int8x16_t)v214, (int8x16_t)_Q1, 8uLL);
                  v219 = vextq_s8((int8x16_t)v218, (int8x16_t)v218, 8uLL).u64[0];
                  v220 = 0.0;
                  v221 = 1;
                  v222 = 0.0;
                  do
                  {
                    _Q17 = *(float64x2_t *)&v12[16 * v221];
                    _D19 = _Q17.f64[1];
                    __asm { FMLA            D18, D19, V17.D[1] }
                    v226 = *((_QWORD *)v818 + v221);
                    v227 = 1.0 / sqrt(_D18 + 1.0);
                    _D21 = *(_QWORD *)(v226 + 48);
                    _Q17 = vmulq_n_f64(_Q17, v227);
                    _Q20 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v226, _Q17.f64[0]), *(float64x2_t *)(v226 + 32), _Q17, 1), *(float64x2_t *)(v226 + 64), v227);
                    __asm { FMLA            D19, D21, V17.D[1] }
                    _Q17.f64[0] = _D19 + *(double *)(v226 + 80) * v227;
                    v232 = (float64x2_t)vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q17, 8uLL);
                    v233.f64[0] = _Q1.f64[0];
                    _Q17.f64[1] = _Q20.f64[0];
                    v233.f64[1] = v217;
                    v234.f64[0] = v218.f64[0];
                    *(_QWORD *)&v234.f64[1] = v219;
                    *(_QWORD *)&v235 = *(_OWORD *)&vmlsq_laneq_f64(vmulq_f64(v215, _Q20), v214, _Q20, 1);
                    v5.f64[0] = *(float64_t *)(v226 + 112);
                    v236 = *(float64x2_t *)(v226 + 96);
                    v237 = (float64x2_t)vextq_s8((int8x16_t)v236, (int8x16_t)v5, 8uLL);
                    _Q19 = vmlsq_f64(vmulq_f64(v233, v232), v234, _Q17);
                    v5.f64[1] = *(float64_t *)(v226 + 96);
                    v239 = vmlsq_f64(vmulq_f64(v5, v232), v237, _Q17);
                    *(_QWORD *)&v234.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(_Q20, v236, 1), v236, _Q20, 1);
                    _Q20.f64[0] = _Q19.f64[1];
                    __asm { FMLA            D17, D20, V19.D[1] }
                    v222 = v222 + vmlad_n_f64(_Q17.f64[0], v235, v235);
                    _Q17.f64[0] = v239.f64[1];
                    __asm { FMLA            D20, D17, V19.D[1] }
                    v220 = v220 + vmlad_n_f64(_Q20.f64[0], v234.f64[0], v235);
                    ++v221;
                  }
                  while (((unint64_t)(v784 - v12) >> 4) != v221);
                  if (v222 == 0.0)
                    goto LABEL_45;
                  v216.f64[0] = v220 / v222;
                  if (v220 / v222 <= 0.0)
                    goto LABEL_45;
                  v214.f64[1] = v215.f64[0];
                  v810 = vmulq_n_f64(v214, v216.f64[0]);
                  *(_QWORD *)&v811 = *(_OWORD *)&vmulq_f64(_Q1, v216);
                  memset(v813, 0, 40);
                  memset(v812, 0, sizeof(v812));
                  if ((sub_20F0BBA10(&v821, v826, (uint64_t *)&v818, &__p, (__int128 *)&v810, (uint64_t)v809, (uint64_t)v812, v741, v11, v811, v215.f64[0], v216.f64[0], v217, v218) & 1) != 0)
                  {
                    if (0xAAAAAAAAAAAAAAABLL * ((v796 - v795) >> 3) <= v8
                      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 866, (uint64_t)"pose_idx < tracks_structures_.size() && \"Invalid access: Index out of range.\"", 77, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| 0xAAAAAAAAAAAAAAABLL * ((v799 - v798) >> 3) <= v8&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 869, (uint64_t)"pose_idx < structure_to_track_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                    {
                      goto LABEL_753;
                    }
                    v240 = v801;
                    if (0xAAAAAAAAAAAAAAABLL * ((v802 - v801) >> 3) <= v8)
                    {
                      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 872, (uint64_t)"pose_idx < track_to_structure_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                      {
                        goto LABEL_753;
                      }
                      v240 = v801;
                    }
                    v242 = &v240[24 * v8];
                    v241 = *(_QWORD *)v242;
                    if (v53 >= (uint64_t)(*((_QWORD *)v242 + 1) - *(_QWORD *)v242) >> 2)
                    {
                      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 875, (uint64_t)"track_idx < track_to_structure_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 104, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                      {
                        goto LABEL_753;
                      }
                      v241 = *(_QWORD *)&v801[24 * v8];
                    }
                    if ((*(_DWORD *)(v241 + 4 * v53) & 0x80000000) == 0
                      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 878, (uint64_t)"track_to_structure_index_mappping_[pose_idx][track_idx] < 0 && \"Track is already assigned to an existing structure.\"", 116, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                    {
LABEL_753:
                      abort();
                    }
                    v243 = 24 * v8;
                    v244 = v795;
                    v245 = (void **)&v795[24 * v8];
                    v247 = (float64x2_t *)*v245;
                    v246 = (float64x2_t *)v245[1];
                    v248 = 0xAAAAAAAAAAAAAAABLL * (((char *)v246 - (_BYTE *)*v245) >> 5);
                    if (v248 != (uint64_t)(*(_QWORD *)&v798[24 * v8 + 8] - *(_QWORD *)&v798[24 * v8]) >> 2)
                    {
                      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 882, (uint64_t)"tracks_structures_[pose_idx].size() == structure_to_track_index_mappping_[pose_idx].size() && \"Size mismatch.\"", 110, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                      {
                        goto LABEL_753;
                      }
                      v244 = v795;
                      v249 = (void **)&v795[24 * v8];
                      v247 = (float64x2_t *)*v249;
                      v246 = (float64x2_t *)v249[1];
                      v248 = 0xAAAAAAAAAAAAAAABLL * (((char *)v246 - (_BYTE *)*v249) >> 5);
                    }
                    v250 = (void **)&v244[v243];
                    v251 = (char **)&v244[v243 + 8];
                    *(_DWORD *)(*(_QWORD *)&v801[24 * v8] + 4 * v53) = v248;
                    v252 = &v244[v243 + 16];
                    if ((unint64_t)v246 >= *(_QWORD *)v252)
                    {
                      v257 = v248 + 1;
                      v258 = 0x2AAAAAAAAAAAAAALL;
                      if (v248 + 1 > 0x2AAAAAAAAAAAAAALL)
                        sub_20E867F44();
                      if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)v252 - (_QWORD)v247) >> 5) > v257)
                        v257 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)v252 - (_QWORD)v247) >> 5);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v252 - (_QWORD)v247) >> 5) < 0x155555555555555)
                        v258 = v257;
                      if (v258)
                      {
                        v763 = v252;
                        v793 = (void **)&v244[v243];
                        v756 = (char **)&v244[v243 + 8];
                        if (v258 > 0x2AAAAAAAAAAAAAALL)
                          goto LABEL_758;
                        v259 = v258;
                        v260 = (char *)operator new(96 * v258);
                        v251 = v756;
                        v250 = v793;
                        v252 = v763;
                        v258 = v259;
                      }
                      else
                      {
                        v260 = 0;
                      }
                      v261 = &v260[96 * v248];
                      *(float64x2_t *)v261 = *v738;
                      v262 = v812[0];
                      *(_OWORD *)(v261 + 40) = v812[1];
                      v263 = v813[1];
                      *(_OWORD *)(v261 + 56) = v813[0];
                      *(_OWORD *)(v261 + 72) = v263;
                      *((_QWORD *)v261 + 2) = *(_QWORD *)&v738[1].f64[0];
                      *((_QWORD *)v261 + 11) = *(_QWORD *)&v813[2];
                      *(_OWORD *)(v261 + 24) = v262;
                      v264 = v261;
                      if (v246 != v247)
                      {
                        do
                        {
                          v265 = v246[-6];
                          *((_QWORD *)v264 - 10) = *(_QWORD *)&v246[-5].f64[0];
                          *((float64x2_t *)v264 - 6) = v265;
                          v266 = *(__int128 *)((char *)&v246[-3] + 8);
                          v267 = *(__int128 *)((char *)&v246[-2] + 8);
                          v268 = v246[-1].f64[1];
                          *(float64x2_t *)(v264 - 56) = *(float64x2_t *)((char *)v246 - 56);
                          *((float64_t *)v264 - 1) = v268;
                          *(_OWORD *)(v264 - 24) = v267;
                          *(_OWORD *)(v264 - 40) = v266;
                          *(float64x2_t *)(v264 - 72) = *(float64x2_t *)((char *)v246 - 72);
                          v264 -= 96;
                          v246 -= 6;
                        }
                        while (v246 != v247);
                        v247 = (float64x2_t *)*v250;
                      }
                      *v250 = v264;
                      v256 = v261 + 96;
                      *v251 = v261 + 96;
                      *(_QWORD *)v252 = &v260[96 * v258];
                      if (v247)
                      {
                        v269 = v247;
                        v270 = v251;
                        operator delete(v269);
                        v251 = v270;
                      }
                    }
                    else
                    {
                      *v246 = *v738;
                      v246[1].f64[0] = v738[1].f64[0];
                      v253 = *(double *)&v813[2];
                      v254 = (float64x2_t)v813[1];
                      *(_OWORD *)((char *)v246 + 56) = v813[0];
                      v255 = (float64x2_t)v812[0];
                      *(_OWORD *)((char *)v246 + 40) = v812[1];
                      *(float64x2_t *)((char *)v246 + 72) = v254;
                      v246[5].f64[1] = v253;
                      *(float64x2_t *)((char *)v246 + 24) = v255;
                      v256 = (char *)&v246[6];
                    }
                    *v251 = v256;
                    v271 = &v798[24 * v8];
                    v272 = (uint64_t *)(v271 + 8);
                    v273 = (char *)*((_QWORD *)v271 + 1);
                    v275 = v271 + 16;
                    v274 = *((_QWORD *)v271 + 2);
                    if ((unint64_t)v273 < v274)
                    {
                      *(_DWORD *)v273 = v53;
                      v276 = (uint64_t)(v273 + 4);
                      goto LABEL_340;
                    }
                    v277 = *(char **)v271;
                    v278 = (uint64_t)&v273[-*(_QWORD *)v271];
                    v279 = v278 >> 2;
                    v280 = (v278 >> 2) + 1;
                    if (v280 >> 62)
                      sub_20E867F44();
                    v281 = v274 - (_QWORD)v277;
                    if (v281 >> 1 > v280)
                      v280 = v281 >> 1;
                    if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFFCLL)
                      v282 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v282 = v280;
                    if (v282)
                    {
                      v751 = &v273[-*(_QWORD *)v271];
                      v757 = v278 >> 2;
                      v764 = v271 + 16;
                      if (v282 >> 62)
LABEL_758:
                        sub_20E877A38();
                      v283 = v282;
                      v284 = operator new(4 * v282);
                      v271 = &v798[24 * v8];
                      v275 = v764;
                      v282 = v283;
                      v279 = v757;
                      v278 = (uint64_t)v751;
                      v285 = &v284[4 * v757];
                      *v285 = v53;
                      v276 = (uint64_t)(v285 + 1);
                      v286 = v273 - v277;
                      if (v273 == v277)
                        goto LABEL_338;
LABEL_332:
                      v287 = v286 - 4;
                      if (v287 < 0x2C)
                        goto LABEL_768;
                      if ((unint64_t)(v273 - v284 - v278) < 0x20)
                        goto LABEL_768;
                      v288 = (v287 >> 2) + 1;
                      v289 = 4 * (v288 & 0x7FFFFFFFFFFFFFF8);
                      v290 = &v273[-v289];
                      v285 = (_DWORD *)((char *)v285 - v289);
                      v291 = &v284[4 * v279 - 16];
                      v292 = v273 - 16;
                      v293 = v288 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v294 = *(_OWORD *)v292;
                        *(v291 - 1) = *((_OWORD *)v292 - 1);
                        *v291 = v294;
                        v291 -= 2;
                        v292 -= 32;
                        v293 -= 8;
                      }
                      while (v293);
                      v273 = v290;
                      if (v288 != (v288 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_768:
                        do
                        {
                          v295 = *((_DWORD *)v273 - 1);
                          v273 -= 4;
                          *--v285 = v295;
                        }
                        while (v273 != v277);
                      }
                    }
                    else
                    {
                      v284 = 0;
                      v285 = (_DWORD *)(4 * v279);
                      *(_DWORD *)(4 * v279) = v53;
                      v276 = 4 * v279 + 4;
                      v286 = v273 - v277;
                      if (v273 != v277)
                        goto LABEL_332;
                    }
LABEL_338:
                    *(_QWORD *)v271 = v285;
                    *v272 = v276;
                    *v275 = &v284[4 * v282];
                    if (v277)
                      operator delete(v277);
LABEL_340:
                    *v272 = v276;
                  }
                  v7 = v784;
                  goto LABEL_45;
                }
                bzero(*(void **)&v826[8], 8 * v119);
                v96 = v791;
                v129 = (uint64_t)&v117[8 * v119];
              }
              *(_QWORD *)&v826[8] = v129;
              goto LABEL_177;
            }
            v115 = *(_QWORD *)&v821.f64[1] + 16 * v111;
          }
          *(_QWORD *)&v821.f64[1] = v115;
          goto LABEL_155;
        }
        v7 = v52;
LABEL_45:
        ++v53;
        v52 = v7;
        if (v53 == v776)
          goto LABEL_10;
      }
      v68 = 0;
      v69 = v66;
      do
      {
LABEL_71:
        v76 = v69->i32[0];
        v69 = (int32x4_t *)((char *)v69 + 4);
        v68 += v76 >= 0;
      }
      while (v69 != v65);
      goto LABEL_72;
    }
    v52 = v782;
    if (v21 < v51)
      *((_QWORD *)v50 + 1) = *(_QWORD *)v50 + 4 * v21;
    if (v21)
      goto LABEL_43;
    v7 = v782;
LABEL_10:
    ++v8;
  }
  while (v8 != 3);
  if (__p)
    operator delete(__p);
  if (v818)
    operator delete(v818);
  if (*(_QWORD *)v826)
    operator delete(*(void **)v826);
  if (*(_QWORD *)&v821.f64[0])
    operator delete(*(void **)&v821.f64[0]);
  if (v12)
    operator delete(v12);
  v296 = log(0.0);
  LOBYTE(v297) = 0;
  v298 = 1;
  v693 = vcvtpd_u64_f64(-11.5129255 / v296);
  while (2)
  {
    v692 = v297;
    v819 = 0;
    v818 = 0;
    v820 = 0;
    v816 = 0;
    __p = 0;
    v817 = 0;
    v299 = v795;
    v794 = v298;
    if (0xAAAAAAAAAAAAAAABLL * ((v796 - v795) >> 3) <= v298)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 929, (uint64_t)"pose_idx < tracks_structures_.size() && \"Invalid access: Index out of range.\"", 77, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v299 = v795;
    }
    v300 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v299[24 * v794 + 8] - *(_QWORD *)&v299[24 * v794]) >> 5);
    v301 = (*(_DWORD *)(v790 + 216) * v300);
    if ((_DWORD)v301)
    {
      v302 = 8 * v301;
      v303 = (int64x2_t *)operator new(8 * v301);
      v304 = (char *)operator new(v302);
      v777 = (int64x2_t *)((char *)v303 + v302);
      v771 = &v304[v302];
      if ((_DWORD)v300)
      {
LABEL_367:
        v305 = 0;
        v785 = (v794 - 1);
        v746 = v300;
        v752 = (int64x2_t *)v304;
        v758 = v303;
        while (1)
        {
          v308 = v798;
          v309 = v794;
          v765 = v305;
          if (0xAAAAAAAAAAAAAAABLL * ((v799 - v798) >> 3) <= v794)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 894, (uint64_t)"pose_idx < structure_to_track_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v310 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v310 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v311 = qword_254A6DE40;
              for (nn = qword_254A6DE48; v311 != nn; v311 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v311)(*(_QWORD *)(v311 + 8), "pose_idx < structure_to_track_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, "", 0);
            }
            v313 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v313 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v305 = v765;
            if (!byte_254A6DE68)
LABEL_747:
              abort();
            qword_254A6DE58(unk_254A6DE60, "pose_idx < structure_to_track_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, "", 0);
            v308 = v798;
            v309 = v794;
          }
          v315 = &v308[24 * v309];
          v314 = *(_QWORD *)v315;
          if (v305 >= (uint64_t)(*((_QWORD *)v315 + 1) - *(_QWORD *)v315) >> 2)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 897, (uint64_t)"structure_idx < structure_to_track_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 108, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v316 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v316 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v317 = qword_254A6DE40;
              for (i1 = qword_254A6DE48; v317 != i1; v317 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v317)(*(_QWORD *)(v317 + 8), "structure_idx < structure_to_track_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 108, "", 0);
            }
            v319 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v319 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v305 = v765;
            if (!byte_254A6DE68)
              goto LABEL_747;
            qword_254A6DE58(unk_254A6DE60, "structure_idx < structure_to_track_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 108, "", 0);
            v314 = *(_QWORD *)&v798[24 * v794];
          }
          if (*(_DWORD *)(v790 + 216))
            break;
          v306 = (uint64_t)v304;
          v307 = (uint64_t)v303;
LABEL_369:
          v305 = v765 + 1;
          v304 = (char *)v306;
          v303 = (int64x2_t *)v307;
          if (v765 + 1 == v746)
            goto LABEL_578;
        }
        v320 = 0;
        v321 = *(unsigned int *)(v314 + 4 * v305);
        while (2)
        {
          v322 = v807;
          v323 = v794;
          if (0xAAAAAAAAAAAAAAABLL * ((v808 - v807) >> 3) <= v794)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 478, (uint64_t)"current_pose_idx < current_to_previous_spatial_tracks_indices_mapping_.size() && \"Invalid access: Index out of range.\"", 118, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v324 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v324 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v325 = qword_254A6DE40;
              v326 = qword_254A6DE48;
              while (v325 != v326)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v325)(*(_QWORD *)(v325 + 8), "current_pose_idx < current_to_previous_spatial_tracks_indices_mapping_.size() && \"Invalid access: Index out of range.\"", 118, "", 0);
                v325 += 16;
              }
            }
            v327 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v327 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
LABEL_737:
              abort();
            qword_254A6DE58(unk_254A6DE60, "current_pose_idx < current_to_previous_spatial_tracks_indices_mapping_.size() && \"Invalid access: Index out of range.\"", 118, "", 0);
            v322 = v807;
            v323 = v794;
          }
          v329 = (uint64_t *)(v322 + 24 * v323);
          v328 = *v329;
          if (0xAAAAAAAAAAAAAAABLL * ((v329[1] - *v329) >> 3) <= v321)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 482, (uint64_t)"track_idx < current_to_previous_spatial_tracks_indices_mapping_[current_pose_idx].size() && \"Invalid access: Index out of range.\"", 129, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v330 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v330 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v331 = qword_254A6DE40;
              v332 = qword_254A6DE48;
              while (v331 != v332)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v331)(*(_QWORD *)(v331 + 8), "track_idx < current_to_previous_spatial_tracks_indices_mapping_[current_pose_idx].size() && \"Invalid access: Index out of range.\"", 129, "", 0);
                v331 += 16;
              }
            }
            v333 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v333 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_737;
            qword_254A6DE58(unk_254A6DE60, "track_idx < current_to_previous_spatial_tracks_indices_mapping_[current_pose_idx].size() && \"Invalid access: Index out of range.\"", 129, "", 0);
            v328 = *(_QWORD *)(v807 + 24 * v794);
          }
          v335 = (uint64_t *)(v328 + 24 * v321);
          v334 = *v335;
          if (v320 >= (v335[1] - *v335) >> 2)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 488, (uint64_t)"camera_stream_idx < current_to_previous_spatial_tracks_indices_mapping_[current_pose_idx][track_idx] .size() && \"Invalid access: Index out of range.\"", 149, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v336 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v336 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v337 = qword_254A6DE40;
              v338 = qword_254A6DE48;
              while (v337 != v338)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v337)(*(_QWORD *)(v337 + 8), "camera_stream_idx < current_to_previous_spatial_tracks_indices_mapping_[current_pose_idx][track_idx] .size() && \"Invalid access: Index out of range.\"", 149, "", 0);
                v337 += 16;
              }
            }
            v339 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v339 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_737;
            qword_254A6DE58(unk_254A6DE60, "camera_stream_idx < current_to_previous_spatial_tracks_indices_mapping_[current_pose_idx][track_idx] .size() && \"Invalid access: Index out of range.\"", 149, "", 0);
            v334 = *(_QWORD *)(*(_QWORD *)(v807 + 24 * v794) + 24 * v321);
          }
          v340 = *(unsigned int *)(v334 + 4 * v320);
          v341 = (v794 - 1);
          if ((v340 & 0x80000000) != 0)
            goto LABEL_390;
          v342 = v801;
          if (0xAAAAAAAAAAAAAAABLL * ((v802 - v801) >> 3) <= v785)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 906, (uint64_t)"pose_idx < track_to_structure_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v343 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v343 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v344 = qword_254A6DE40;
              for (i2 = qword_254A6DE48; v344 != i2; v344 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v344)(*(_QWORD *)(v344 + 8), "pose_idx < track_to_structure_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, "", 0);
            }
            v346 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v346 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_737;
            qword_254A6DE58(unk_254A6DE60, "pose_idx < track_to_structure_index_mappping_.size() && \"Invalid access: Index out of range.\"", 93, "", 0);
            v342 = v801;
            v341 = (v794 - 1);
          }
          v348 = &v342[24 * v341];
          v347 = *(_QWORD *)v348;
          if (v340 >= (uint64_t)(*((_QWORD *)v348 + 1) - *(_QWORD *)v348) >> 2)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 909, (uint64_t)"track_idx < track_to_structure_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 104, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v349 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v349 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v350 = qword_254A6DE40;
              for (i3 = qword_254A6DE48; v350 != i3; v350 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v350)(*(_QWORD *)(v350 + 8), "track_idx < track_to_structure_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 104, "", 0);
            }
            v352 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v352 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_737;
            qword_254A6DE58(unk_254A6DE60, "track_idx < track_to_structure_index_mappping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 104, "", 0);
            v341 = (v794 - 1);
            v347 = *(_QWORD *)&v801[24 * v785];
          }
          v353 = *(unsigned int *)(v347 + 4 * v340);
          if ((v353 & 0x80000000) != 0)
          {
LABEL_390:
            v306 = (uint64_t)v304;
            v307 = (uint64_t)v303;
            goto LABEL_391;
          }
          v354 = v795;
          if (0xAAAAAAAAAAAAAAABLL * ((v796 - v795) >> 3) <= v341)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 918, (uint64_t)"pose_idx < tracks_structures_.size() && \"Invalid access: Index out of range.\"", 77, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v355 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v355 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v356 = qword_254A6DE40;
              for (i4 = qword_254A6DE48; v356 != i4; v356 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v356)(*(_QWORD *)(v356 + 8), "pose_idx < tracks_structures_.size() && \"Invalid access: Index out of range.\"", 77, "", 0);
            }
            v358 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v358 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_737;
            qword_254A6DE58(unk_254A6DE60, "pose_idx < tracks_structures_.size() && \"Invalid access: Index out of range.\"", 77, "", 0);
            v354 = v795;
            LODWORD(v341) = v794 - 1;
          }
          v360 = (uint64_t *)&v354[24 * v341];
          v359 = *v360;
          if (0xAAAAAAAAAAAAAAABLL * ((v360[1] - *v360) >> 5) <= v353)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 921, (uint64_t)"structure_idx < tracks_structures_[pose_idx].size() && \"Invalid access: Index out of range.\"", 92, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v361 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v361 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v362 = qword_254A6DE40;
              for (i5 = qword_254A6DE48; v362 != i5; v362 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v362)(*(_QWORD *)(v362 + 8), "structure_idx < tracks_structures_[pose_idx].size() && \"Invalid access: Index out of range.\"", 92, "", 0);
            }
            v364 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v364 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_737;
            qword_254A6DE58(unk_254A6DE60, "structure_idx < tracks_structures_[pose_idx].size() && \"Invalid access: Index out of range.\"", 92, "", 0);
            v359 = *(_QWORD *)&v795[24 * v785];
          }
          v365 = v359 + 96 * v353;
          if (v303 < v777)
          {
            v303->i64[0] = v365;
            v307 = (uint64_t)&v303->i64[1];
            goto LABEL_479;
          }
          v366 = ((char *)v303 - (char *)v758) >> 3;
          v367 = v366 + 1;
          if ((unint64_t)(v366 + 1) >> 61)
            sub_20E867F44();
          if (((char *)v777 - (char *)v758) >> 2 > v367)
            v367 = ((char *)v777 - (char *)v758) >> 2;
          if ((unint64_t)((char *)v777 - (char *)v758) >= 0x7FFFFFFFFFFFFFF8)
            v368 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v368 = v367;
          if (v368)
          {
            if (v368 >> 61)
              sub_20E877A38();
            v369 = operator new(8 * v368);
            v370 = (int64x2_t *)&v369[8 * v366];
            v370->i64[0] = v365;
            v307 = (uint64_t)&v370->i64[1];
            v371 = (char *)v303 - (char *)v758;
            if (v303 == v758)
            {
LABEL_477:
              v758 = v370;
              v777 = (int64x2_t *)&v369[8 * v368];
              if (v303)
                goto LABEL_478;
              goto LABEL_479;
            }
          }
          else
          {
            v369 = 0;
            v370 = (int64x2_t *)(8 * v366);
            *(_QWORD *)(8 * v366) = v365;
            v307 = 8 * v366 + 8;
            v371 = (char *)v303 - (char *)v758;
            if (v303 == v758)
              goto LABEL_477;
          }
          v372 = v371 - 8;
          if (v372 < 0x168
            || (v398 = ((char *)&v303[-1].u64[1] - (char *)v758) & 0xFFFFFFFFFFFFFFF8,
                &v369[(char *)v303 - (char *)v758 - 8 - v398] > &v369[(char *)v303 - (char *)v758 - 8])
            || (unint64_t *)((char *)&v303[-1].u64[1] - v398) > &v303[-1].u64[1]
            || (unint64_t)((char *)v758 - v369) < 0x20)
          {
            v373 = v303;
          }
          else
          {
            v399 = (v372 >> 3) + 1;
            v400 = 8 * (v399 & 0x3FFFFFFFFFFFFFFCLL);
            v373 = (int64x2_t *)((char *)v303 - v400);
            v370 = (int64x2_t *)((char *)v370 - v400);
            v401 = (int64x2_t *)&v369[8 * v366 - 16];
            v402 = v303 - 1;
            v403 = v399 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v404 = *v402;
              v401[-1] = v402[-1];
              *v401 = v404;
              v401 -= 2;
              v402 -= 2;
              v403 -= 4;
            }
            while (v403);
            if (v399 == (v399 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v303 = v758;
              v758 = v370;
              v777 = (int64x2_t *)&v369[8 * v368];
              if (v303)
LABEL_478:
                operator delete(v303);
LABEL_479:
              v375 = v795;
              v376 = v794;
              if (0xAAAAAAAAAAAAAAABLL * ((v796 - v795) >> 3) <= v794)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 918, (uint64_t)"pose_idx < tracks_structures_.size() && \"Invalid access: Index out of range.\"", 77, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                v377 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v377 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v378 = qword_254A6DE40;
                  for (i6 = qword_254A6DE48; v378 != i6; v378 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v378)(*(_QWORD *)(v378 + 8), "pose_idx < tracks_structures_.size() && \"Invalid access: Index out of range.\"", 77, "", 0);
                }
                v380 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v380 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68)
LABEL_740:
                  abort();
                qword_254A6DE58(unk_254A6DE60, "pose_idx < tracks_structures_.size() && \"Invalid access: Index out of range.\"", 77, "", 0);
                v375 = v795;
                v376 = v794;
              }
              v382 = (uint64_t *)&v375[24 * v376];
              v381 = *v382;
              v383 = v765;
              if (0xAAAAAAAAAAAAAAABLL * ((v382[1] - *v382) >> 5) <= v765)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 921, (uint64_t)"structure_idx < tracks_structures_[pose_idx].size() && \"Invalid access: Index out of range.\"", 92, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                v384 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v384 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v385 = qword_254A6DE40;
                  for (i7 = qword_254A6DE48; v385 != i7; v385 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v385)(*(_QWORD *)(v385 + 8), "structure_idx < tracks_structures_[pose_idx].size() && \"Invalid access: Index out of range.\"", 92, "", 0);
                }
                v387 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v387 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68)
                  goto LABEL_740;
                qword_254A6DE58(unk_254A6DE60, "structure_idx < tracks_structures_[pose_idx].size() && \"Invalid access: Index out of range.\"", 92, "", 0);
                v381 = *(_QWORD *)&v795[24 * v794];
                v383 = v765;
              }
              v388 = v381 + 96 * v383;
              if (v304 < v771)
              {
                *(_QWORD *)v304 = v388;
                v306 = (uint64_t)(v304 + 8);
                goto LABEL_391;
              }
              v389 = (v304 - (char *)v752) >> 3;
              v390 = v389 + 1;
              if ((unint64_t)(v389 + 1) >> 61)
                sub_20E867F44();
              if ((v771 - (char *)v752) >> 2 > v390)
                v390 = (v771 - (char *)v752) >> 2;
              if ((unint64_t)(v771 - (char *)v752) >= 0x7FFFFFFFFFFFFFF8)
                v391 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v391 = v390;
              if (v391)
              {
                if (v391 >> 61)
                  sub_20E877A38();
                v392 = operator new(8 * v391);
                v393 = (int64x2_t *)&v392[8 * v389];
                v393->i64[0] = v388;
                v306 = (uint64_t)&v393->i64[1];
                v394 = v304 - (char *)v752;
                if (v304 == (char *)v752)
                {
LABEL_514:
                  v752 = v393;
                  v771 = &v392[8 * v391];
                  if (v304)
                    goto LABEL_515;
                  goto LABEL_391;
                }
              }
              else
              {
                v392 = 0;
                v393 = (int64x2_t *)(8 * v389);
                *(_QWORD *)(8 * v389) = v388;
                v306 = 8 * v389 + 8;
                v394 = v304 - (char *)v752;
                if (v304 == (char *)v752)
                  goto LABEL_514;
              }
              v395 = v394 - 8;
              if (v395 < 0x168
                || (v405 = (v304 - 8 - (char *)v752) & 0xFFFFFFFFFFFFFFF8,
                    &v392[v304 - (char *)v752 - 8 - v405] > &v392[v304 - (char *)v752 - 8])
                || &v304[-v405 - 8] > v304 - 8
                || (unint64_t)((char *)v752 - v392) < 0x20)
              {
                v396 = (int64x2_t *)v304;
              }
              else
              {
                v406 = (v395 >> 3) + 1;
                v407 = 8 * (v406 & 0x3FFFFFFFFFFFFFFCLL);
                v396 = (int64x2_t *)&v304[-v407];
                v393 = (int64x2_t *)((char *)v393 - v407);
                v408 = &v392[8 * v389 - 16];
                v409 = v304 - 16;
                v410 = v406 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v411 = *(_OWORD *)v409;
                  *(v408 - 1) = *((_OWORD *)v409 - 1);
                  *v408 = v411;
                  v408 -= 2;
                  v409 -= 32;
                  v410 -= 4;
                }
                while (v410);
                if (v406 == (v406 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v304 = (char *)v752;
                  v752 = v393;
                  v771 = &v392[8 * v391];
                  if (v304)
LABEL_515:
                    operator delete(v304);
LABEL_391:
                  ++v320;
                  v304 = (char *)v306;
                  v303 = (int64x2_t *)v307;
                  if (v320 >= *(unsigned int *)(v790 + 216))
                    goto LABEL_369;
                  continue;
                }
              }
              v304 = (char *)v752;
              do
              {
                v397 = v396[-1].i64[1];
                v396 = (int64x2_t *)((char *)v396 - 8);
                v393[-1].i64[1] = v397;
                v393 = (int64x2_t *)((char *)v393 - 8);
              }
              while (v396 != v752);
              goto LABEL_514;
            }
          }
          break;
        }
        v303 = v758;
        do
        {
          v374 = v373[-1].i64[1];
          v373 = (int64x2_t *)((char *)v373 - 8);
          v370[-1].i64[1] = v374;
          v370 = (int64x2_t *)((char *)v370 - 8);
        }
        while (v373 != v758);
        goto LABEL_477;
      }
    }
    else
    {
      v303 = 0;
      v777 = 0;
      v771 = 0;
      v304 = 0;
      if ((_DWORD)v300)
        goto LABEL_367;
    }
    v306 = (uint64_t)v304;
    v752 = (int64x2_t *)v304;
    v307 = (uint64_t)v303;
    v758 = v303;
LABEL_578:
    v412 = v307 - (_QWORD)v758;
    v413 = ((unint64_t)(v307 - (_QWORD)v758) >> 3);
    if (v413 != (v306 - (uint64_t)v752) >> 3
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 312, (uint64_t)"structures_ptrs_in_curr_pose.size() == num_correspondences", 58, (uint64_t)"Size mismatch.", 14, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v414 = *(_DWORD *)(v790 + 160);
    if (v414 == 1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitialization.hpp", 394, (uint64_t)"config_.solver_relative_pose_estimation_from_3d_3d_correspondences < RelativePoseEstimationFrom3D3DCorrespondencesSolverType::EnumCount && \"Invalid enum.\"", 154, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
LABEL_586:
      v421 = __p;
      if (!__p)
        goto LABEL_588;
      goto LABEL_587;
    }
    if (v414)
      goto LABEL_586;
    if (!v413)
    {
      *(_DWORD *)(v790 + 368) = 3;
      v687 = __p;
      if (!__p)
      {
LABEL_727:
        if (v818)
          operator delete(v818);
        if (v752)
          operator delete(v752);
        if (v758)
          operator delete(v758);
        v297 = 0;
        break;
      }
LABEL_726:
      operator delete(v687);
      goto LABEL_727;
    }
    v415 = *(float64x2_t **)(v790 + 224);
    v786 = v415[1].f64[0];
    v416 = v1 + 856 + 72 * v794;
    v778 = v415[3].f64[0];
    v734 = *v415;
    v736 = v415[2];
    v772 = v415[5].f64[0];
    v766 = v415[4];
    v730 = *(double *)(v416 + 16);
    v728 = *(float64x2_t *)v416;
    *((_QWORD *)&v417 + 1) = *(_QWORD *)(v416 + 8);
    *(_QWORD *)&v417 = *(_QWORD *)(v416 + 40);
    v739 = v417;
    v732 = *(float64x2_t *)(v416 + 24);
    v747 = *(double *)(v416 + 64);
    v418 = 4 * v413;
    v742 = *(float64x2_t *)(v416 + 48);
    v419 = (double *)operator new(32 * v413);
    bzero(v419, 32 * v413);
    if (v413 < 6)
    {
      v420 = 0;
      goto LABEL_609;
    }
    v420 = 0;
    v422 = (int64x2_t *)&v419[v418];
    _CF = v419 >= (double *)&v752->i64[v413] || v752 >= v422;
    v424 = !_CF;
    if (v758 < v422 && v419 < (double *)&v758->i64[v413])
      goto LABEL_609;
    if ((v424 & 1) != 0)
      goto LABEL_609;
    v426 = (v412 >> 3) & 3;
    v420 = v413 - v426;
    v427 = v419 + 8;
    v428 = v758 + 1;
    v429 = v752 + 1;
    v430 = v413 - v426;
    do
    {
      v830.val[0] = (float64x2_t)v428[-1];
      v831.val[0] = (float64x2_t)*v428;
      v431 = vdupq_n_s64(0x18uLL);
      v830.val[1] = (float64x2_t)vaddq_s64((int64x2_t)v830.val[0], v431);
      v830.val[2] = (float64x2_t)v429[-1];
      v830.val[3] = (float64x2_t)vaddq_s64((int64x2_t)v830.val[2], v431);
      v831.val[1] = (float64x2_t)vaddq_s64(*v428, v431);
      v432 = *v429;
      v429 += 2;
      v831.val[2] = (float64x2_t)v432;
      v831.val[3] = (float64x2_t)vaddq_s64(v432, v431);
      v433 = v427 - 8;
      vst4q_f64(v433, v830);
      vst4q_f64(v427, v831);
      v427 += 16;
      v428 += 2;
      v430 -= 4;
    }
    while (v430);
    if (v426)
    {
LABEL_609:
      v434 = v420 - v413;
      v435 = &v752->i8[8 * v420];
      v436 = &v758->i64[v420];
      v437 = &v419[4 * v420 + 2];
      do
      {
        *((_QWORD *)v437 - 2) = *v436;
        v438 = *v436++;
        *((_QWORD *)v437 - 1) = v438 + 24;
        *v437 = *(double *)v435;
        v439 = *(double *)v435;
        v435 += 8;
        *((_QWORD *)v437 + 1) = *(_QWORD *)&v439 + 24;
        v437 += 4;
        _CF = __CFADD__(v434++, 1);
      }
      while (!_CF);
    }
    v814 = 0.0;
    memset(v813, 0, sizeof(v813));
    memset(v812, 0, sizeof(v812));
    v440 = (char *)operator new(32 * v413);
    v442 = v440;
    v443 = v418 * 8 - 32;
    v444 = v419;
    v445 = v440;
    if ((unint64_t)(v418 * 8 - 32) < 0x60)
      goto LABEL_769;
    if (v440 < (char *)v419 + v443 + 24)
    {
      v444 = v419;
      v445 = v440;
      if (v419 < (double *)&v440[v443 + 24])
        goto LABEL_769;
    }
    v446 = (v443 >> 5) + 1;
    v447 = 4 * (v446 & 0xFFFFFFFFFFFFFFCLL);
    v444 = &v419[v447];
    v445 = &v440[v447 * 8];
    v448 = v440 + 64;
    v449 = (__int128 *)(v419 + 8);
    v450 = v446 & 0xFFFFFFFFFFFFFFCLL;
    do
    {
      v451 = *(v449 - 4);
      v452 = *(v449 - 3);
      v453 = *(v449 - 1);
      v454 = *v449;
      v455 = v449[1];
      v456 = v449[2];
      v457 = v449[3];
      *(v448 - 2) = *(v449 - 2);
      *(v448 - 1) = v453;
      *(v448 - 4) = v451;
      *(v448 - 3) = v452;
      v448[2] = v456;
      v448[3] = v457;
      *v448 = v454;
      v448[1] = v455;
      v448 += 8;
      v449 += 8;
      v450 -= 4;
    }
    while (v450);
    if (v446 != (v446 & 0xFFFFFFFFFFFFFFCLL))
    {
LABEL_769:
      do
      {
        v458 = *(_OWORD *)v444;
        v459 = *((_OWORD *)v444 + 1);
        v444 += 4;
        *(_OWORD *)v445 = v458;
        *((_OWORD *)v445 + 1) = v459;
        v445 += 32;
      }
      while (v444 != &v419[v418]);
    }
    v460 = (v445 - v440) >> 5;
    v704 = v419;
    v701 = v413;
    if (v445 == v440)
    {
      v463 = 12345;
    }
    else
    {
      v461 = 0;
      v462 = v440 + 16;
      v463 = 12345;
      v464 = (v445 - v440) >> 5;
      do
      {
        v463 = 214013 * v463 + 2531011;
        v465 = &v440[32 * ((HIWORD(v463) & 0x7FFF) % v464) + 32 * v461];
        v466 = *(_OWORD *)v465;
        *(_OWORD *)v465 = *(v462 - 1);
        *(v462 - 1) = v466;
        v467 = *((_OWORD *)v465 + 1);
        *((_OWORD *)v465 + 1) = *v462;
        *v462 = v467;
        v462 += 2;
        ++v461;
        --v464;
      }
      while (v464);
    }
    v468 = 0;
    _V22.D[1] = v736.f64[1];
    _V3.D[1] = v728.f64[1];
    _V21.D[1] = v766.f64[1];
    _D20 = v772;
    v473 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v734, v728.f64[0]), v736, v728, 1), v766, v730);
    _D19 = v778;
    __asm { FMLA            D1, D19, V3.D[1] }
    v476 = _D1 + v772 * v730;
    _V5.D[1] = v732.f64[1];
    _Q4.f64[1] = *((float64_t *)&v739 + 1);
    _V7.D[1] = v742.f64[1];
    _Q3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v734, v732.f64[0]), v736, v732, 1), v766, *(double *)&v739);
    __asm { FMLA            D2, D19, V5.D[1] }
    _D2 = _D2 + v772 * *(double *)&v739;
    _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v734, v742.f64[0]), v736, v742, 1), v766, v747);
    __asm { FMLA            D4, D19, V7.D[1] }
    _Q4.f64[0] = _Q4.f64[0] + v772 * v747;
    v484 = vmlad_n_f64(vmlad_n_f64(v476 * v734.f64[0], _D2, v736.f64[0]), _Q4.f64[0], v766.f64[0]);
    v748 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v473, v734.f64[0]), _Q3, v736.f64[0]), _Q5, v766.f64[0]);
    __asm
    {
      FMLA            D15, D2, V22.D[1]
      FMLA            D15, D4, V21.D[1]
    }
    v743 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v473, v734, 1), _Q3, v736, 1), _Q5, v766, 1);
    v690 = vextq_s8((int8x16_t)v743, (int8x16_t)v743, 8uLL).u64[0];
    v691 = vextq_s8((int8x16_t)v748, (int8x16_t)v748, 8uLL).u64[0];
    v487 = v476 * v786 + _D2 * v778 + _Q4.f64[0] * v772;
    v740 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v473, v786), _Q3, v778), _Q5, v772);
    v689 = vextq_s8((int8x16_t)v740, (int8x16_t)v740, 8uLL).u64[0];
    v488 = (float64x2_t **)&v440[(v445 - v440) & 0xFFFFFFFFFFFFFFE0];
    v489 = (double)v413;
    v490 = ((double)v413 + 3.0) * (((double)v413 + 2.0) * ((double)v413 + 2.0));
    v491 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v734, v473.f64[0]), v736, _Q3.f64[0]), v766, _Q5.f64[0]);
    *(double *)&v492 = vmlad_n_f64(vmlad_n_f64(v786 * v473.f64[0], v778, _Q3.f64[0]), v772, _Q5.f64[0]);
    v493 = (int8x16_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v734, v473, 1), v736, _Q3, 1), v766, _Q5, 1);
    __asm
    {
      FMLA            D17, D19, V3.D[1]
      FMLA            D17, D20, V5.D[1]
    }
    v494 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v734, v476), v736, _D2), v766, _Q4.f64[0]);
    v473.f64[0] = v786 * v476 + v778 * _D2 + v772 * _Q4.f64[0];
    v735 = _Q17;
    v737 = *(double *)&v492;
    v711 = (float64x2_t)vdupq_lane_s64(v492, 0);
    v729 = *(double *)v493.i64;
    v731 = *(double *)v491.i64;
    *(_QWORD *)&v725 = vextq_s8(v491, v491, 8uLL).u64[0];
    v726 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v491, 1);
    *(_QWORD *)&v723 = vextq_s8(v493, v493, 8uLL).u64[0];
    v724 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v493, 1);
    v733 = v473;
    v706 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v473.f64[0], 0);
    v709 = (float64x2_t)vdupq_lane_s64(_Q17, 0);
    v727 = *(double *)v494.i64;
    v495 = (float64x2_t)vextq_s8(v494, v494, 8uLL);
    v721 = v495.f64[0];
    v722 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v494, 1);
    v496 = -1;
    do
    {
      if (v445 == v442
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/RANSAC/DataPointCorrespondenceUtil.h", 92, (uint64_t)"correspondences.size() >= SampleSize", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v463 = 214013 * v463 + 2531011;
      v497 = v460;
      v498 = (float64x2_t **)&v442[32 * ((HIWORD(v463) & 0x7FFF) % v460)];
      v499 = *v498;
      v500 = v498[2];
      v495.f64[0] = v500[1].f64[0];
      _Q1 = *v500;
      v502 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v748, v500->f64[0]), v743, *v500, 1), v740, v495.f64[0]);
      __asm { FMLA            D3, D15, V1.D[1] }
      v495.f64[0] = _D3 + v487 * v495.f64[0];
      _Q1.f64[0] = v499[1].f64[0];
      v718 = (int8x16_t)vsubq_f64(*v499, v502);
      v495 = vsubq_f64(_Q1, v495);
      v713 = v495;
      v715 = vextq_s8(v718, v718, 8uLL);
      v504 = 0.0;
      if (v445 != v442)
      {
        v505 = (float64x2_t **)v442;
        v507 = v743;
        v506 = v748;
        v508 = v740;
        do
        {
          v509 = v505[1];
          v510 = v505[2];
          v511 = v505[3];
          v779 = v510[1].f64[0];
          v773 = *(int8x16_t *)v510;
          v512.f64[1] = v510->f64[1];
          v512.f64[0] = (*v505)[1].f64[0];
          v787 = v512;
          v512.f64[0] = v511[1].f64[0];
          _Q1 = *v511;
          v514 = v511[2].f64[1];
          _Q3 = *(float64x2_t *)((char *)v511 + 24);
          _Q4.f64[0] = v511[4].f64[0];
          _Q5 = v511[3];
          v517 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v506, v511->f64[0]), v507, *v511, 1), v508, v512.f64[0]);
          __asm { FMLA            D7, D15, V1.D[1] }
          v512.f64[0] = _D7 + v487 * v512.f64[0];
          v519 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v506, _Q3.f64[0]), v507, _Q3, 1), v508, v514);
          __asm { FMLA            D7, D15, V3.D[1] }
          v521 = _D7 + v487 * v514;
          v522 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v506, _Q5.f64[0]), v507, _Q5, 1), v508, _Q4.f64[0]);
          __asm { FMLA            D7, D15, V5.D[1] }
          _Q4.f64[0] = _D7 + v487 * _Q4.f64[0];
          v524 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v517, v731), v726, v519), v711, v522);
          v525 = vmlaq_f64(vmulq_n_f64(v517, v729), v724, v519);
          v526 = vmlaq_f64(vmulq_n_f64(v517, v727), v722, v519);
          v519.f64[0] = v512.f64[0] * v731 + v521 * v725;
          v527 = vmlaq_f64(v525, v709, v522);
          v528 = vmlaq_f64(v526, v706, v522);
          v522.f64[0] = v512.f64[0] * v729 + v521 * v723;
          v512.f64[0] = v512.f64[0] * v727 + v521 * v721;
          v767 = **v505;
          v519.f64[0] = v519.f64[0] + _Q4.f64[0] * v737;
          v529.f64[1] = *((float64_t *)&v735 + 1);
          v529.f64[0] = v522.f64[0] + _Q4.f64[0] * *(double *)&v735;
          v522.f64[1] = v733.f64[1];
          v512.f64[0] = v512.f64[0] + _Q4.f64[0] * v733.f64[0];
          v522.f64[0] = v509[1].f64[0];
          *(_QWORD *)&v519.f64[0] = *(_OWORD *)&vaddq_f64(v522, v519);
          v530 = vaddq_f64(*v509, v524);
          _Q4.f64[0] = v509[2].f64[1];
          *(_QWORD *)&v529.f64[0] = *(_OWORD *)&vaddq_f64(_Q4, v529);
          v531 = vaddq_f64(*(float64x2_t *)((char *)v509 + 24), v527);
          v524.f64[0] = v509[4].f64[0];
          *(_QWORD *)&v512.f64[0] = *(_OWORD *)&vaddq_f64(v524, v512);
          v532 = v509[3];
          v821 = v530;
          *(float64x2_t *)&v822[8] = v531;
          *(float64_t *)v822 = v519.f64[0];
          v823 = v529.f64[0];
          *(float64x2_t *)v824 = vaddq_f64(v532, v528);
          *(float64_t *)&v824[16] = v512.f64[0];
          sub_20E8BE424((uint64_t)v826);
          v533 = v767;
          v534 = (float64x2_t)vextq_s8(v773, v773, 8uLL);
          v507 = v743;
          v506 = v748;
          v508 = v740;
          _Q2 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v748, *(double *)v773.i64), v743, v534.f64[0]), v740, v779);
          v534.f64[0] = v484 * *(double *)v773.i64 + _D15 * v534.f64[0] + v487 * v779;
          *(_QWORD *)&_Q4.f64[1] = v715.i64[1];
          *(_QWORD *)&_Q3.f64[0] = v718.i64[0];
          *(_QWORD *)&_Q3.f64[1] = v715.i64[0];
          *(_QWORD *)&v533.f64[1] = vextq_s8((int8x16_t)v533, (int8x16_t)v533, 8uLL).u64[0];
          _Q1 = vsubq_f64(v533, vaddq_f64(_Q3, _Q2));
          v495 = vsubq_f64(v787, vaddq_f64(v713, v534));
          _Q2.f64[0] = *(float64_t *)&v826[8];
          __asm { FMLA            D16, D2, V1.D[1] }
          _Q3.f64[0] = v827.f64[1];
          __asm { FMLA            D2, D3, V1.D[1] }
          _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v828[0], v495.f64[0]);
          _Q4.f64[0] = v828[2];
          __asm
          {
            FMLA            D3, D4, V1.D[1]
            FMLA            D4, D2, V1.D[1]
          }
          if (vmlad_n_f64(_Q4.f64[0], vmlad_n_f64(_Q3.f64[0], v829, v495.f64[0]), v495.f64[0]) >= 14.156)
            v539 = 0.0;
          else
            v539 = 1.0;
          v504 = v504 + v539;
          v505 += 4;
        }
        while (v505 != v488);
      }
      if (v504 > *(double *)v812)
      {
        *(double *)v812 = v504;
        *((_QWORD *)&v812[1] + 1) = *(_QWORD *)&v713.f64[0];
        v540 = v718.i64[0];
        *(_QWORD *)&v495.f64[1] = v715.i64[0];
        *(float64x2_t *)((char *)v812 + 8) = v495;
        v495.f64[0] = v504 / v489 + sqrt((v504 + 1.0) * (v489 - v504 + 1.0) / v490) * -4.0;
        if (v495.f64[0] <= 0.0)
          v495.f64[0] = v504 / v489;
        v496 = v693;
        if (v495.f64[0] <= 1.0)
          v496 = vcvtpd_u64_f64(-11.5129255 / log(1.0 - v495.f64[0]));
      }
      if (v468 > 0xC6)
        break;
      v460 = v497;
      ++v468;
    }
    while (v468 < v496);
    operator delete(v442);
    v542 = v818;
    v543 = v820;
    v819 = v818;
    v544 = (char *)__p;
    v816 = __p;
    if (v701 <= (v820 - (_BYTE *)v818) >> 3)
    {
      v545 = (char *)v818;
      v546 = v817;
      if (v701 > (v817 - (_BYTE *)__p) >> 3)
        goto LABEL_644;
      goto LABEL_647;
    }
    v545 = (char *)operator new(8 * v701);
    v543 = &v545[8 * v701];
    v818 = v545;
    v819 = v545;
    v820 = v543;
    if (v542)
      operator delete(v542);
    v546 = v817;
    if (v701 <= (v817 - v544) >> 3)
    {
LABEL_647:
      v547 = v544;
      goto LABEL_648;
    }
LABEL_644:
    v547 = (char *)operator new(8 * v701);
    v546 = &v547[8 * v701];
    __p = v547;
    v816 = v547;
    v817 = v546;
    if (v544)
      operator delete(v544);
LABEL_648:
    v549 = v743;
    v548 = v748;
    v550 = v740;
    v551 = 0;
    v552 = vdupq_lane_s64(*(uint64_t *)&v737, 0);
    if (v701 <= 1)
      v553 = 1;
    else
      v553 = v701;
    v707 = v553;
    v712 = (float64x2_t)vdupq_lane_s64(v735, 0);
    v714 = (float64x2_t)v552;
    v554 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v733.f64[0], 0);
    v710 = v554;
    v555 = (unsigned int *)v545;
    while (2)
    {
      while (2)
      {
        while (2)
        {
          v556 = (float64x2_t **)&v419[4 * v551];
          v557 = *v556;
          v558 = v556[1];
          v560 = v556[2];
          v559 = v556[3];
          v780 = *v560;
          v788 = v560[1].f64[0];
          v554.f64[0] = v559[1].f64[0];
          _Q1 = *v559;
          v562 = v559[2].f64[1];
          _Q3 = *(float64x2_t *)((char *)v559 + 24);
          _Q4.f64[0] = v559[4].f64[0];
          _Q5 = v559[3];
          v565 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v548, v559->f64[0]), v549, *v559, 1), v550, v554.f64[0]);
          __asm { FMLA            D7, D15, V1.D[1] }
          v554.f64[0] = _D7 + v487 * v554.f64[0];
          v567 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v548, _Q3.f64[0]), v549, _Q3, 1), v550, v562);
          __asm { FMLA            D7, D15, V3.D[1] }
          v569 = _D7 + v487 * v562;
          v570 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v548, _Q5.f64[0]), v549, _Q5, 1), v550, _Q4.f64[0]);
          __asm { FMLA            D7, D15, V5.D[1] }
          _Q4.f64[0] = _D7 + v487 * _Q4.f64[0];
          v572 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v565, v731), v726, v567), v714, v570);
          v573 = vmlaq_f64(vmulq_n_f64(v565, v729), v724, v567);
          v574 = vmlaq_f64(vmulq_n_f64(v565, v727), v722, v567);
          v567.f64[0] = v554.f64[0] * v731 + v569 * v725;
          v575 = vmlaq_f64(v573, v712, v570);
          v576 = vmlaq_f64(v574, v710, v570);
          v570.f64[0] = v554.f64[0] * v729 + v569 * v723;
          v554.f64[0] = v554.f64[0] * v727 + v569 * v721;
          v774 = *v557;
          v567.f64[0] = v567.f64[0] + _Q4.f64[0] * v737;
          v577.f64[1] = *((float64_t *)&v735 + 1);
          v577.f64[0] = v570.f64[0] + _Q4.f64[0] * *(double *)&v735;
          v570.f64[1] = v733.f64[1];
          v554.f64[0] = v554.f64[0] + _Q4.f64[0] * v733.f64[0];
          v570.f64[0] = v558[1].f64[0];
          v578 = vaddq_f64(v570, v567);
          v579 = vaddq_f64(*v558, v572);
          _Q4.f64[0] = v558[2].f64[1];
          *(_QWORD *)&v577.f64[0] = *(_OWORD *)&vaddq_f64(_Q4, v577);
          v580 = vaddq_f64(*(float64x2_t *)((char *)v558 + 24), v575);
          v572.f64[0] = v558[4].f64[0];
          v581 = *(_OWORD *)&vaddq_f64(v572, v554);
          v582 = vaddq_f64(v558[3], v576);
          v576.f64[0] = v557[1].f64[0];
          v768 = v576;
          v821 = v579;
          *(float64x2_t *)&v822[8] = v580;
          *(float64_t *)v822 = v578.f64[0];
          v823 = v577.f64[0];
          *(float64x2_t *)v824 = v582;
          v578.f64[0] = *((float64_t *)&v812[1] + 1);
          *(_QWORD *)&v824[16] = v581;
          v716 = *(float64x2_t *)((char *)v812 + 8);
          v719 = v578;
          sub_20E8BE424((uint64_t)v826);
          v586 = v774;
          _Q4 = v780;
          v587 = (float64x2_t)vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL);
          v588 = v716;
          _Q3 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v748, v780.f64[0]), v743, v587.f64[0]), v740, v788);
          *(_QWORD *)&v588.f64[1] = vextq_s8((int8x16_t)v588, (int8x16_t)v588, 8uLL).u64[0];
          v587.f64[0] = v484 * v780.f64[0] + _D15 * v587.f64[0] + v487 * v788;
          *(_QWORD *)&v586.f64[1] = vextq_s8((int8x16_t)v586, (int8x16_t)v586, 8uLL).u64[0];
          _Q1 = vsubq_f64(v586, vaddq_f64(v588, _Q3));
          v554 = vsubq_f64(v768, vaddq_f64(v719, v587));
          _D2 = *(_QWORD *)&v826[8];
          __asm { FMLA            D16, D2, V1.D[1] }
          _Q3.f64[0] = v827.f64[1];
          __asm { FMLA            D2, D3, V1.D[1] }
          _D2 = vmlad_n_f64(_D2, v828[0], v554.f64[0]);
          _Q4.f64[0] = v828[2];
          __asm
          {
            FMLA            D3, D4, V1.D[1]
            FMLA            D4, D2, V1.D[1]
          }
          v548 = v748;
          v549 = v743;
          v550 = v740;
          if (vmlad_n_f64(_Q4.f64[0], vmlad_n_f64(_Q3.f64[0], v829, v554.f64[0]), v554.f64[0]) < 14.156)
          {
            if (v555 < (unsigned int *)v543)
            {
              *(_QWORD *)v555 = v551;
              v555 += 2;
              v419 = v704;
              v819 = v555;
              if (++v551 == v707)
                goto LABEL_710;
              continue;
            }
            v607 = ((char *)v555 - v545) >> 3;
            v608 = v607 + 1;
            if ((unint64_t)(v607 + 1) >> 61)
LABEL_756:
              sub_20E867F44();
            if ((v543 - v545) >> 2 > v608)
              v608 = (v543 - v545) >> 2;
            if ((unint64_t)(v543 - v545) >= 0x7FFFFFFFFFFFFFF8)
              v609 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v609 = v608;
            v702 = v546;
            if (v609)
            {
              if (v609 >> 61)
LABEL_754:
                sub_20E877A38();
              v610 = operator new(8 * v609);
              v549 = v743;
              v548 = v748;
              v550 = v740;
              v611 = v547;
              v612 = &v610[8 * v607];
              *v612 = v551;
              v613 = v612 + 1;
              v614 = (char *)v555 - v545;
              if (v555 != (unsigned int *)v545)
              {
LABEL_682:
                v615 = v614 - 8;
                if (v615 < 0x168
                  || (v624 = ((char *)(v555 - 2) - v545) & 0xFFFFFFFFFFFFFFF8,
                      &v610[(char *)v555 - v545 - 8 - v624] > &v610[(char *)v555 - v545 - 8])
                  || (unsigned int *)((char *)v555 - v624 - 8) > v555 - 2
                  || (unint64_t)(v545 - v610) < 0x20)
                {
                  v616 = (char *)v555;
                  v419 = v704;
                }
                else
                {
                  v625 = (v615 >> 3) + 1;
                  v626 = 8 * (v625 & 0x3FFFFFFFFFFFFFFCLL);
                  v616 = (char *)&v555[v626 / 0xFFFFFFFFFFFFFFFCLL];
                  v612 = (_QWORD *)((char *)v612 - v626);
                  v627 = (float64x2_t *)&v610[8 * v607 - 16];
                  v628 = (float64x2_t *)(v555 - 4);
                  v629 = v625 & 0x3FFFFFFFFFFFFFFCLL;
                  v419 = v704;
                  do
                  {
                    v554 = *v628;
                    v627[-1] = v628[-1];
                    *v627 = v554;
                    v627 -= 2;
                    v628 -= 2;
                    v629 -= 4;
                  }
                  while (v629);
                  if (v625 == (v625 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_685:
                    v543 = &v610[8 * v609];
                    v818 = v612;
                    v819 = v613;
                    v820 = v543;
                    if (v545)
                      goto LABEL_686;
                    goto LABEL_687;
                  }
                }
                do
                {
                  v617 = *((_QWORD *)v616 - 1);
                  v616 -= 8;
                  *--v612 = v617;
                }
                while (v616 != v545);
                goto LABEL_685;
              }
            }
            else
            {
              v611 = v547;
              v610 = 0;
              v612 = (_QWORD *)(8 * v607);
              *(_QWORD *)(8 * v607) = v551;
              v613 = (void *)(8 * v607 + 8);
              v614 = (char *)v555 - v545;
              if (v555 != (unsigned int *)v545)
                goto LABEL_682;
            }
            v419 = v704;
            v543 = &v610[8 * v609];
            v818 = v612;
            v819 = v613;
            v820 = v543;
            if (v545)
            {
LABEL_686:
              operator delete(v545);
              v550 = v740;
              v549 = v743;
              v548 = v748;
            }
LABEL_687:
            v545 = (char *)v612;
            v547 = v611;
            v546 = v702;
            v819 = v613;
            v555 = (unsigned int *)v613;
            if (++v551 == v707)
              goto LABEL_710;
            continue;
          }
          break;
        }
        if (v547 < v546)
        {
          *(_QWORD *)v547 = v551;
          v547 += 8;
          v419 = v704;
          goto LABEL_653;
        }
        v595 = (char *)__p;
        v596 = v547 - (_BYTE *)__p;
        v597 = (v547 - (_BYTE *)__p) >> 3;
        v598 = v597 + 1;
        if ((unint64_t)(v597 + 1) >> 61)
          goto LABEL_756;
        if ((v546 - (_BYTE *)__p) >> 2 > v598)
          v598 = (v546 - (_BYTE *)__p) >> 2;
        if ((unint64_t)(v546 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v599 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v599 = v598;
        if (v599)
        {
          if (v599 >> 61)
            goto LABEL_754;
          v600 = (char *)operator new(8 * v599);
          v549 = v743;
          v548 = v748;
          v550 = v740;
          v601 = v547;
          v602 = &v600[8 * v597];
          *(_QWORD *)v602 = v551;
          v547 = v602 + 8;
          v603 = v601 - v595;
          if (v601 != v595)
          {
LABEL_668:
            v604 = v603 - 8;
            if (v604 < 0x168
              || (v618 = (v601 - 8 - v595) & 0xFFFFFFFFFFFFFFF8, &v600[v596 - 8 - v618] > &v600[v596 - 8])
              || &v601[-v618 - 8] > v601 - 8
              || (unint64_t)(v601 - v600 - v596) < 0x20)
            {
              v605 = v601;
              v419 = v704;
            }
            else
            {
              v619 = (v604 >> 3) + 1;
              v620 = 8 * (v619 & 0x3FFFFFFFFFFFFFFCLL);
              v605 = &v601[-v620];
              v602 -= v620;
              v621 = (float64x2_t *)&v600[8 * v597 - 16];
              v622 = (float64x2_t *)(v601 - 16);
              v623 = v619 & 0x3FFFFFFFFFFFFFFCLL;
              v419 = v704;
              do
              {
                v554 = *v622;
                v621[-1] = v622[-1];
                *v621 = v554;
                v621 -= 2;
                v622 -= 2;
                v623 -= 4;
              }
              while (v623);
              if (v619 == (v619 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_671;
            }
            do
            {
              v606 = *((_QWORD *)v605 - 1);
              v605 -= 8;
              *((_QWORD *)v602 - 1) = v606;
              v602 -= 8;
            }
            while (v605 != v595);
LABEL_671:
            v546 = &v600[8 * v599];
            __p = v602;
            v817 = v546;
            if (v595)
              goto LABEL_691;
LABEL_653:
            v816 = v547;
            if (++v551 == v707)
              goto LABEL_710;
            continue;
          }
        }
        else
        {
          v601 = v547;
          v600 = 0;
          v602 = (char *)(8 * v597);
          *(_QWORD *)(8 * v597) = v551;
          v547 = (char *)(8 * v597 + 8);
          v603 = v601 - v595;
          if (v601 != v595)
            goto LABEL_668;
        }
        break;
      }
      v419 = v704;
      v546 = &v600[8 * v599];
      __p = v602;
      v817 = v546;
      if (!v595)
        goto LABEL_653;
LABEL_691:
      operator delete(v595);
      v550 = v740;
      v549 = v743;
      v548 = v748;
      v816 = v547;
      if (++v551 != v707)
        continue;
      break;
    }
LABEL_710:
    v630 = (unsigned int *)v818;
    if (v555 != v818)
    {
      v631.i64[0] = 0;
      v632.f64[0] = 0.0;
      v633 = 0.0;
      v634.i64[0] = 0;
      v635 = 0.0;
      v584.f64[0] = 0.0;
      v636.i64[0] = 0;
      *(double *)&v637 = 0.0;
      v585.f64[0] = 0.0;
      v638.i64[0] = 0;
      v639 = 0.0;
      v583.f64[0] = 0.0;
      do
      {
        v698 = v635;
        v699 = *(double *)&v637;
        v700 = *(double *)v636.i64;
        v703 = v632.f64[0];
        v705 = v633;
        v708 = *(double *)v634.i64;
        v717 = v585;
        v720 = v584;
        v769 = v639;
        v775 = *(double *)v638.i64;
        v781 = v583;
        v789 = *(double *)v631.i64;
        v640 = &v419[4 * *v630];
        v642 = *(_QWORD *)v640;
        v641 = *((_QWORD *)v640 + 1);
        v644 = (float64x2_t *)*((_QWORD *)v640 + 2);
        v643 = (__int128 *)*((_QWORD *)v640 + 3);
        v694 = *v644;
        v695 = v644[1].f64[0];
        v554.f64[0] = *(float64_t *)(v642 + 16);
        v696 = *(int8x16_t *)v642;
        v697 = v554;
        v554.f64[0] = *((float64_t *)v643 + 2);
        _Q1 = *v643;
        v646 = *((double *)v643 + 5);
        _Q3 = *(float64x2_t *)((char *)v643 + 24);
        _Q4.f64[0] = *((float64_t *)v643 + 8);
        _Q5 = (float64x2_t)v643[3];
        v649 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v548, *(double *)v643), v549, *(float64x2_t *)v643, 1), v550, v554.f64[0]);
        __asm { FMLA            D7, D15, V1.D[1] }
        v554.f64[0] = _D7 + v487 * v554.f64[0];
        v651 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v548, _Q3.f64[0]), v549, _Q3, 1), v550, v646);
        __asm { FMLA            D7, D15, V3.D[1] }
        v653 = _D7 + v487 * v646;
        v654 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v548, _Q5.f64[0]), v549, _Q5, 1), v550, _Q4.f64[0]);
        __asm { FMLA            D7, D15, V5.D[1] }
        _Q4.f64[0] = _D7 + v487 * _Q4.f64[0];
        v656 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v649, v731), v726, v651), v714, v654);
        v657 = vmlaq_f64(vmulq_n_f64(v649, v729), v724, v651);
        v658 = vmlaq_f64(vmulq_n_f64(v649, v727), v722, v651);
        v651.f64[0] = v554.f64[0] * v731 + v653 * v725 + _Q4.f64[0] * v737;
        v659 = vmlaq_f64(v657, v712, v654);
        v660 = vmlaq_f64(v658, v710, v654);
        v654.f64[0] = v554.f64[0] * v729 + v653 * v723 + _Q4.f64[0] * *(double *)&v735;
        v554.f64[0] = v554.f64[0] * v727 + v653 * v721 + _Q4.f64[0] * v733.f64[0];
        _Q4.f64[0] = *(float64_t *)(v641 + 16);
        *(_QWORD *)&v651.f64[0] = *(_OWORD *)&vaddq_f64(_Q4, v651);
        v661 = vaddq_f64(*(float64x2_t *)v641, v656);
        v656.f64[0] = *(float64_t *)(v641 + 40);
        *(_QWORD *)&v654.f64[0] = *(_OWORD *)&vaddq_f64(v656, v654);
        v662 = vaddq_f64(*(float64x2_t *)(v641 + 24), v659);
        v659.f64[0] = *(float64_t *)(v641 + 64);
        v663 = vaddq_f64(*(float64x2_t *)(v641 + 48), v660);
        *(float64_t *)v822 = v661.f64[1];
        *(float64_t *)&v822[8] = v651.f64[0];
        v821.f64[1] = sqrt(v661.f64[0]);
        v651.f64[0] = v662.f64[0] / v821.f64[1];
        v662.f64[0] = v662.f64[1] - v651.f64[0] * v651.f64[0];
        v660.f64[0] = v663.f64[0] / v821.f64[1];
        v663.f64[0] = v663.f64[1] - v651.f64[0] * (v663.f64[0] / v821.f64[1]);
        *(float64_t *)&v822[16] = v651.f64[0];
        v823 = sqrt(v662.f64[0]);
        *(float64_t *)v824 = v654.f64[0];
        *(float64_t *)&v824[8] = v660.f64[0];
        v554.f64[0] = vaddq_f64(v659, v554).f64[0]
                    - v660.f64[0] * v660.f64[0]
                    - v663.f64[0] / v823 * (v663.f64[0] / v823);
        v664 = v661.f64[0] <= 0.0;
        *(double *)&v824[16] = v663.f64[0] / v823;
        v825 = sqrt(v554.f64[0]);
        if (v662.f64[0] <= 0.0)
          v664 = 1;
        if (v554.f64[0] <= 0.0)
          v664 = 1;
        LODWORD(v821.f64[0]) = v664;
        v827.f64[0] = 0.0;
        memset(v828, 0, sizeof(v828));
        *(_OWORD *)&v826[8] = 0u;
        *(_QWORD *)v826 = 0x3FF0000000000000;
        v827.f64[1] = 1.0;
        v829 = 1.0;
        sub_20E8BE8E4();
        _Q3 = v694;
        v666 = (float64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL);
        v667 = v696;
        v550 = v740;
        v668 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v748, v694.f64[0]), v743, v666.f64[0]), v740, v695);
        v666.f64[0] = v484 * v694.f64[0] + _D15 * v666.f64[0] + v487 * v695;
        *(_QWORD *)&_Q4.f64[1] = vextq_s8(v667, v667, 8uLL).u64[0];
        _Q1 = vsubq_f64(_Q4, v668);
        v554 = vsubq_f64(v697, v666);
        _Q3.f64[0] = *(float64_t *)&v826[16];
        _Q4.f64[0] = v828[0];
        v670.f64[0] = v829;
        v672.f64[0] = v705;
        v671.f64[0] = v708;
        v672.f64[1] = v708;
        v673.f64[0] = v789;
        v674.f64[0] = v700;
        v673.f64[1] = v703;
        v671.f64[1] = v698;
        v674.f64[1] = v699;
        v631 = (int8x16_t)vaddq_f64(v673, *(float64x2_t *)v826);
        *(_QWORD *)&v632.f64[0] = vextq_s8(v631, v631, 8uLL).u64[0];
        *(_QWORD *)&v633 = *(_OWORD *)&vaddq_f64(v672, _Q3);
        v584 = vaddq_f64(v720, _Q4);
        v634 = (int8x16_t)vaddq_f64(v671, v827);
        v585 = vaddq_f64(v717, v670);
        v636 = (int8x16_t)vaddq_f64(v674, *(float64x2_t *)&v828[1]);
        v637 = vextq_s8(v636, v636, 8uLL).u64[0];
        v635 = *(double *)&v634.i64[1];
        __asm { FMLA            D3, D4, V1.D[1] }
        v675.f64[0] = v775;
        v675.f64[1] = v769;
        _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v829, v554.f64[0]);
        v638 = (int8x16_t)vaddq_f64(v675, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v826, _Q1.f64[0]), v827, _Q1, 1), *(float64x2_t *)&v828[1], v554.f64[0]));
        *(_QWORD *)&v639 = vextq_s8(v638, v638, 8uLL).u64[0];
        v583 = vaddq_f64(v781, _Q3);
        v630 += 2;
        v548 = v748;
        v549 = v743;
      }
      while (v630 != v555);
      v636.i64[1] = v637;
      *(int8x16_t *)&v824[8] = v636;
      v676 = sqrt(*(double *)v631.i64);
      v632.f64[1] = v633;
      v821.f64[1] = v676;
      v677 = vdivq_f64(v632, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v676, 0));
      *(float64x2_t *)v822 = v677;
      *(_QWORD *)&v822[16] = v634.i64[0];
      v678 = *(double *)vextq_s8(v634, v634, 8uLL).i64 - vmulq_f64(v677, v677).f64[0];
      v679 = sqrt(v678);
      v680 = (v584.f64[0] - vmuld_lane_f64(v677.f64[0], v677, 1)) / v679;
      v823 = v679;
      *(double *)v824 = v680;
      v681 = v585.f64[0] - vmuld_lane_f64(v677.f64[1], v677, 1) - v680 * v680;
      v682 = sqrt(v681);
      v825 = v682;
      v683 = *(double *)v631.i64 <= 0.0;
      if (v678 <= 0.0)
        v683 = 1;
      if (v681 <= 0.0)
        v683 = 1;
      LODWORD(v821.f64[0]) = v683;
      v684 = (v639 - *(double *)v638.i64 / v676 * v677.f64[0]) / v679;
      *((double *)&v812[1] + 1) = (v583.f64[0] - vmuld_lane_f64(*(double *)v638.i64 / v676, v677, 1) - v680 * v684)
                                / v682
                                / v682;
      *(double *)&v812[1] = (v684 - v680 * *((double *)&v812[1] + 1)) / v679;
      *((double *)v812 + 1) = (*(double *)v638.i64 / v676
                             - *(double *)&v812[1] * v677.f64[0]
                             - vmuld_lane_f64(*((double *)&v812[1] + 1), v677, 1))
                            / v676;
      memset((char *)&v813[2] + 8, 0, 24);
      memset((char *)v813 + 8, 0, 24);
      *(_QWORD *)&v813[0] = 0x3FF0000000000000;
      *(_QWORD *)&v813[2] = 0x3FF0000000000000;
      v814 = 1.0;
      sub_20E8BE8E4();
      v549.f64[0] = v743.f64[0];
      v548.f64[0] = v748.f64[0];
      v550.f64[0] = v740.f64[0];
    }
    if (*(double *)v813 + *(double *)&v813[2] + v814 > *(double *)(v790 + 168))
    {
      *(_DWORD *)(v790 + 368) = 4;
      operator delete(v419);
      v687 = __p;
      if (!__p)
        goto LABEL_727;
      goto LABEL_726;
    }
    v685 = v1 + 472 + (v794 << 7);
    *(double *)(v685 + 16) = v484;
    *(_QWORD *)&v548.f64[1] = v691;
    *(float64x2_t *)v685 = v548;
    *(double *)(v685 + 48) = _D15;
    *(_QWORD *)&v549.f64[1] = v690;
    *(float64x2_t *)(v685 + 32) = v549;
    *(_QWORD *)&v550.f64[1] = v689;
    *(double *)(v685 + 80) = v487;
    *(float64x2_t *)(v685 + 64) = v550;
    v686 = *(_OWORD *)((char *)v812 + 8);
    *(_QWORD *)(v685 + 112) = *((_QWORD *)&v812[1] + 1);
    *(_OWORD *)(v685 + 96) = v686;
    operator delete(v419);
    v421 = __p;
    if (__p)
LABEL_587:
      operator delete(v421);
LABEL_588:
    if (v818)
      operator delete(v818);
    if (v752)
      operator delete(v752);
    if (v758)
      operator delete(v758);
    v297 = 1;
    v298 = 2;
    if ((v692 & 1) == 0)
      continue;
    break;
  }
  sub_20F0BC774((void **)&v795);
  sub_20F0C8874(v804);
  return v297;
}

void sub_20F0C2548(_Unwind_Exception *a1)
{
  sub_20F0BC774((void **)&STACK[0x2C0]);
  sub_20F0C8874((void ***)&STACK[0x308]);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F0C27E8(uint64_t a1, unsigned int *a2, _QWORD *a3, _QWORD *a4)
{
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  void **v17;
  void **v18;
  _QWORD *v19;
  __int128 v20;
  void **v21;
  void **v22;
  void *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  void **v30;
  void **v31;
  void *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  void *v37;
  void *v38;
  void **v39;
  uint64_t v40;
  char *v41;
  int8x16_t *v42;
  int8x16_t *v43;
  char *v44;
  void *v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t i;
  unsigned __int8 v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char **v65;
  char **v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  _OWORD *v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t j;
  unsigned __int8 v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD **v99;
  _QWORD *v100;
  _QWORD **v101;
  unsigned int v102;
  _QWORD *v103;
  unsigned __int8 v104;
  uint64_t v105;
  uint64_t k;
  unsigned __int8 v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 v110;
  uint64_t v111;
  uint64_t m;
  unsigned __int8 v113;
  uint64_t v114;
  const void *v115;
  int64_t v116;
  int8x16_t *v117;
  int8x16_t *v118;
  uint64_t v119;
  uint64_t v120;
  size_t v121;
  int8x16_t *v122;
  int8x16_t *v123;
  unint64_t v124;
  uint64_t v125;
  int8x16_t *v126;
  int8x16_t *v127;
  uint64_t v128;
  uint64_t v129;
  size_t v130;
  char *v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  void *v142;
  unint64_t v143;
  unsigned int v144;
  unsigned __int8 v145;
  uint64_t v146;
  uint64_t n;
  unsigned __int8 v148;
  unint64_t v149;
  uint64_t v150;
  unsigned __int8 v151;
  uint64_t v152;
  uint64_t ii;
  unsigned __int8 v154;
  uint64_t v155;
  unsigned __int8 v156;
  uint64_t v157;
  uint64_t jj;
  unsigned __int8 v159;
  unsigned __int8 v160;
  uint64_t v161;
  uint64_t kk;
  unsigned __int8 v163;
  unsigned __int8 v164;
  uint64_t v165;
  uint64_t mm;
  unsigned __int8 v167;
  uint64_t v168;
  uint64_t *v169;
  unsigned __int8 v170;
  uint64_t v171;
  uint64_t nn;
  unsigned __int8 v173;
  uint64_t v174;
  uint64_t *v175;
  unsigned __int8 v176;
  uint64_t v177;
  uint64_t i1;
  unsigned __int8 v179;
  unint64_t v180;
  uint64_t v181;
  unsigned __int8 v182;
  uint64_t v183;
  uint64_t i2;
  unsigned __int8 v185;
  unsigned __int8 v186;
  uint64_t v187;
  uint64_t i3;
  unsigned __int8 v189;
  unsigned __int8 v190;
  uint64_t v191;
  uint64_t i4;
  unsigned __int8 v193;
  uint64_t v194;
  unsigned __int8 v195;
  uint64_t v196;
  uint64_t i5;
  unsigned __int8 v198;
  uint64_t v199;
  uint64_t *v200;
  unsigned __int8 v201;
  uint64_t v202;
  uint64_t i6;
  unsigned __int8 v204;
  unsigned __int8 v205;
  uint64_t v206;
  uint64_t i7;
  unsigned __int8 v208;
  _QWORD *v209;
  _QWORD **v210;
  _QWORD *v211;
  unsigned int v212;
  _QWORD *v213;
  _QWORD *v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  _BYTE *v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  void *v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  _QWORD **v239;
  _QWORD *v240;
  unsigned int v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  _BYTE *v247;
  int v248;
  uint64_t v249;
  int v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void **v258;
  unint64_t v259;
  void **v260;
  void **v261;
  void *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  void *v267;
  void *v268;
  char v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  size_t v277;
  _QWORD *v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  void *v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unsigned __int8 v295;
  uint64_t v296;
  uint64_t i8;
  unsigned __int8 v298;
  uint64_t v299;
  unsigned int *v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unsigned __int8 v304;
  uint64_t v305;
  uint64_t i9;
  unsigned __int8 v307;
  uint64_t v308;
  unsigned __int8 v309;
  uint64_t v310;
  uint64_t i10;
  unsigned __int8 v312;
  uint64_t v313;
  uint64_t *v314;
  unsigned __int8 v315;
  uint64_t v316;
  uint64_t i11;
  unsigned __int8 v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unsigned __int8 v322;
  uint64_t i12;
  uint64_t v324;
  unsigned __int8 v325;
  uint64_t v326;
  uint64_t *v327;
  unsigned __int8 v328;
  uint64_t i13;
  uint64_t v330;
  unsigned __int8 v331;
  uint64_t v332;
  uint64_t *v333;
  unsigned __int8 v334;
  uint64_t i14;
  uint64_t v336;
  unsigned __int8 v337;
  unsigned int v338;
  uint64_t v339;
  unsigned __int8 v340;
  uint64_t i15;
  uint64_t v342;
  unsigned __int8 v343;
  unsigned __int8 v344;
  uint64_t i16;
  uint64_t v346;
  unsigned __int8 v347;
  unint64_t v348;
  unsigned __int8 v349;
  uint64_t i17;
  uint64_t v351;
  unsigned __int8 v352;
  unsigned __int8 v353;
  uint64_t i18;
  uint64_t v355;
  unsigned __int8 v356;
  uint64_t v357;
  unsigned __int8 v358;
  uint64_t i19;
  uint64_t v360;
  unsigned __int8 v361;
  uint64_t v362;
  unsigned __int8 v363;
  uint64_t i20;
  uint64_t v365;
  unsigned __int8 v366;
  uint64_t v367;
  uint64_t *v368;
  unsigned __int8 v369;
  uint64_t i21;
  uint64_t v371;
  unsigned __int8 v372;
  unsigned __int8 v373;
  uint64_t i22;
  uint64_t v375;
  unsigned __int8 v376;
  unsigned int *v377;
  uint64_t v378;
  char *v379;
  char *v380;
  char *v381;
  char *v382;
  char *v383;
  _QWORD *v384;
  unint64_t v385;
  unint64_t v386;
  _QWORD *v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  _QWORD *v392;
  _QWORD *v393;
  _QWORD *v394;
  int64_t v395;
  uint64_t v396;
  _QWORD *v397;
  char *v398;
  char *v399;
  _QWORD *v400;
  char *v401;
  char *v402;
  void *v403;
  void *v404;
  uint64_t v405;
  uint64_t v406;
  char *v407;
  char *v408;
  char *v409;
  __int128 v410;
  char *v411;
  char *v412;
  void *v413;
  void *v414;
  uint64_t v415;
  uint64_t v416;
  _QWORD *v417;
  unint64_t v418;
  unint64_t i23;
  unint64_t v420;
  uint64_t v421;
  uint64_t i24;
  unint64_t v423;
  uint64_t v424;
  unsigned __int8 v425;
  uint64_t v426;
  uint64_t i25;
  unsigned __int8 v428;
  uint64_t v429;
  unint64_t v432;
  _BYTE *v433;
  _QWORD *v434;
  uint64_t v435;
  uint64_t v437;
  char v438;
  uint64_t v439;
  uint64_t *v440;
  uint64_t v441;
  unint64_t v442;
  unsigned int *v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t *v447;
  unint64_t v448;
  uint64_t v449;
  unsigned int *v450;
  uint64_t v451;
  unsigned int __p;
  void *__pa;
  unint64_t __pb;
  char *__pc;
  _QWORD *v456;
  char *v457;
  char *v458;
  char *v459;
  int8x16_t *v460;
  int8x16_t *v461;
  int8x16_t *v462;
  _QWORD *v463;
  _QWORD *v464;
  __int128 v465;
  _QWORD *v466;

  v4 = a2;
  v5 = (_QWORD *)a1;
  *(_OWORD *)(a1 + 48) = 0u;
  v440 = (uint64_t *)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = a2;
  v447 = (uint64_t *)(a1 + 24);
  sub_20F0C765C(a1 + 24, 3uLL);
  v6 = v4[2];
  v461 = 0;
  v462 = 0;
  v460 = 0;
  if ((_DWORD)v6)
  {
    v460 = (int8x16_t *)operator new(24 * v6);
    v462 = (int8x16_t *)((char *)v460 + 24 * v6);
    bzero(v460, 24 * ((24 * v6 - 24) / 0x18uLL) + 24);
    v461 = (int8x16_t *)((char *)v460 + 24 * ((24 * v6 - 24) / 0x18uLL) + 24);
  }
  v7 = *v5;
  v8 = (void **)v5[1];
  v9 = (uint64_t)v8 - *v5;
  v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  v456 = v5;
  v443 = v4;
  if (v10 > 2)
  {
    if (v9 != 72)
    {
      v30 = (void **)(v7 + 72);
      if (v8 != (void **)(v7 + 72))
      {
        v31 = (void **)v5[1];
        do
        {
          v34 = (char *)*(v31 - 3);
          v31 -= 3;
          v33 = v34;
          if (v34)
          {
            v35 = (char *)*(v8 - 2);
            v32 = v33;
            if (v35 != v33)
            {
              v36 = (char *)*(v8 - 2);
              do
              {
                v38 = (void *)*((_QWORD *)v36 - 3);
                v36 -= 24;
                v37 = v38;
                if (v38)
                {
                  *((_QWORD *)v35 - 2) = v37;
                  operator delete(v37);
                }
                v35 = v36;
              }
              while (v36 != v33);
              v32 = *v31;
              v4 = v443;
            }
            *(v8 - 2) = v33;
            operator delete(v32);
          }
          v8 = v31;
        }
        while (v31 != v30);
      }
      v5[1] = v30;
    }
  }
  else
  {
    v11 = v5[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v8) >> 3) >= 3 - v10)
    {
      v39 = &v8[3 * (3 - v10)];
      v40 = 72 - 8 * (v9 >> 3);
      do
      {
        sub_20F0C7914(v8, (uint64_t *)&v460);
        v8 += 3;
        v40 -= 24;
      }
      while (v40);
      v5[1] = v39;
    }
    else
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v7) >> 3);
      v13 = 2 * v12;
      if (2 * v12 <= 3)
        v13 = 3;
      if (v12 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v13;
      v466 = v5 + 2;
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v15 = operator new(24 * v14);
      v463 = v15;
      v464 = &v15[3 * v10];
      *((_QWORD *)&v465 + 1) = &v15[3 * v14];
      sub_20F0C7914(v464, (uint64_t *)&v460);
      if (v10 != 2)
      {
        sub_20F0C7914(&v15[3 * v10 + 3], (uint64_t *)&v460);
        if (v10 != 1)
          sub_20F0C7914(&v15[3 * v10 + 6], (uint64_t *)&v460);
      }
      v16 = (char *)(v15 + 9);
      v17 = (void **)*v5;
      v18 = (void **)v5[1];
      v19 = v464;
      if (v18 == (void **)*v5)
      {
        *v5 = v464;
        v5[1] = v16;
        v5[2] = *((_QWORD *)&v465 + 1);
      }
      else
      {
        do
        {
          *(v19 - 3) = 0;
          *(v19 - 2) = 0;
          v19 -= 3;
          v19[2] = 0;
          v20 = *(_OWORD *)(v18 - 3);
          v18 -= 3;
          *(_OWORD *)v19 = v20;
          v19[2] = v18[2];
          *v18 = 0;
          v18[1] = 0;
          v18[2] = 0;
        }
        while (v18 != v17);
        v18 = (void **)*v5;
        v21 = (void **)v5[1];
        *v5 = v19;
        v5[1] = v16;
        v5[2] = *((_QWORD *)&v465 + 1);
        if (v21 != v18)
        {
          v22 = v21;
          do
          {
            v25 = (char *)*(v22 - 3);
            v22 -= 3;
            v24 = v25;
            if (v25)
            {
              v26 = (char *)*(v21 - 2);
              v23 = v24;
              if (v26 != v24)
              {
                v27 = (char *)*(v21 - 2);
                do
                {
                  v29 = (void *)*((_QWORD *)v27 - 3);
                  v27 -= 24;
                  v28 = v29;
                  if (v29)
                  {
                    *((_QWORD *)v26 - 2) = v28;
                    operator delete(v28);
                  }
                  v26 = v27;
                }
                while (v27 != v24);
                v23 = *v22;
                v4 = v443;
              }
              *(v21 - 2) = v24;
              operator delete(v23);
            }
            v21 = v22;
          }
          while (v22 != v18);
        }
      }
      if (v18)
        operator delete(v18);
    }
  }
  v41 = (char *)v460;
  if (v460)
  {
    v42 = v461;
    v43 = v460;
    if (v461 != v460)
    {
      v44 = (char *)v461;
      do
      {
        v46 = (void *)*((_QWORD *)v44 - 3);
        v44 -= 24;
        v45 = v46;
        if (v46)
        {
          v42[-1].i64[0] = (uint64_t)v45;
          operator delete(v45);
        }
        v42 = (int8x16_t *)v44;
      }
      while (v44 != v41);
      v43 = v460;
    }
    v461 = (int8x16_t *)v41;
    operator delete(v43);
  }
  v47 = 0;
  while (2)
  {
    while (1)
    {
      v464 = 0;
      *(_QWORD *)&v465 = 0;
      v463 = &v464;
      v48 = *v4;
      if ((_DWORD)v48)
        break;
      sub_20E86872C((uint64_t)&v463, 0);
      if (++v47 == 3)
        goto LABEL_439;
    }
    v49 = 0;
    __p = 0;
    v432 = v47;
    do
    {
      v50 = v49;
      v51 = *(_QWORD *)(*a3 + 48 * ((a3[3] + v47) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4))));
      v437 = v50;
      v435 = 1483715975 * ((*(_QWORD *)(v51 + 104 * v50 + 16) - *(_QWORD *)(v51 + 104 * v50 + 8)) >> 3);
      if ((_DWORD)v435)
      {
        v52 = 0;
        while (1)
        {
          v53 = *(_QWORD *)(*(_QWORD *)(*a3
                                      + 48 * ((a3[3] + v47) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4))))
                          + 104 * v437
                          + 8)
              + 440 * v52;
          v55 = *(_QWORD *)(v53 + 24);
          v54 = *(_QWORD *)(v53 + 32);
          v441 = v52;
          v56 = v52 + v4[1] * (_DWORD)v437;
          v57 = *((_QWORD *)v4 + 11);
          if (v56 >= (*((_QWORD *)v4 + 12) - v57) >> 2)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v58 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v59 = qword_254A6DE40;
              for (i = qword_254A6DE48; v59 != i; v59 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v59)(*(_QWORD *)(v59 + 8), "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
            }
            v61 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v4 = v443;
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
            v57 = *((_QWORD *)v443 + 11);
          }
          v62 = v54 - v55;
          v63 = *(unsigned int *)(v57 + 4 * v56);
          v64 = *(_QWORD *)(*v5 + 24 * v47);
          v65 = (char **)(v64 + 24 * v63);
          v444 = v62;
          v66 = v65 + 1;
          v67 = v65[1];
          v68 = *v65;
          v69 = v67 - *v65;
          v70 = v69 >> 2;
          v448 = (v62 >> 4);
          v71 = v448 - (v69 >> 2);
          if (v448 <= v69 >> 2)
          {
            if (v448 < v69 >> 2)
              *v66 = &v68[4 * v448];
            goto LABEL_93;
          }
          v72 = v64 + 24 * v63;
          v75 = *(_QWORD *)(v72 + 16);
          v74 = (_QWORD *)(v72 + 16);
          v73 = v75;
          if (v71 > (v75 - (uint64_t)v67) >> 2)
            break;
          v83 = &v67[4 * v71];
          memset(v67, 255, ((4 * v448 - v69 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          *v66 = v83;
          v4 = v443;
LABEL_93:
          v92 = *((_QWORD *)v4 + 17);
          v5 = v456;
          if (v63 >= (*((_QWORD *)v4 + 18) - v92) >> 2)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 191, (uint64_t)"secondary_camera_stream_idx < secondary_to_primary_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 127, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
            v93 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v93 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v94 = qword_254A6DE40;
              for (j = qword_254A6DE48; v94 != j; v94 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v94)(*(_QWORD *)(v94 + 8), "secondary_camera_stream_idx < secondary_to_primary_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 127, "", 0);
            }
            v96 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v96 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              abort();
            qword_254A6DE58(unk_254A6DE60, "secondary_camera_stream_idx < secondary_to_primary_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 127, "", 0);
            v92 = *((_QWORD *)v4 + 17);
          }
          v445 = v444 >> 4;
          v97 = *(unsigned int *)(v92 + 4 * v63);
          if ((v97 & 0x80000000) != 0)
          {
            v119 = *v447;
            v120 = v4[2];
            v461 = 0;
            v462 = 0;
            v460 = 0;
            if ((_DWORD)v120)
            {
              v121 = 4 * v120;
              v122 = (int8x16_t *)operator new(4 * v120);
              v123 = (int8x16_t *)((char *)v122 + 4 * v120);
              v460 = v122;
              v462 = v123;
              memset(v122, 255, v121);
              v461 = v123;
              v4 = v443;
            }
            else
            {
              v122 = 0;
            }
            v225 = v119 + 24 * v47;
            v227 = (uint64_t *)(v225 + 8);
            v226 = *(_QWORD *)(v225 + 8);
            v228 = __p + v445;
            v229 = 0xAAAAAAAAAAAAAAABLL * ((v226 - *(_QWORD *)v225) >> 3);
            if (v228 <= v229)
            {
              if (v228 < v229)
              {
                v230 = *(_QWORD *)v225 + 24 * v228;
                if (v226 != v230)
                {
                  v231 = *(_QWORD *)(v225 + 8);
                  do
                  {
                    v233 = *(void **)(v231 - 24);
                    v231 -= 24;
                    v232 = v233;
                    if (v233)
                    {
                      *(_QWORD *)(v226 - 16) = v232;
                      operator delete(v232);
                    }
                    v226 = v231;
                  }
                  while (v231 != v230);
                }
                *v227 = v230;
                v4 = v443;
              }
            }
            else
            {
              sub_20F0B7DD0((char **)v225, v228 - v229, (uint64_t)&v460);
            }
            if (v122)
              operator delete(v122);
            if ((_DWORD)v445)
            {
              v235 = 0;
              v236 = *(_QWORD *)(v456[3] + 24 * v47);
              v237 = *(_QWORD *)(*(_QWORD *)(*v456 + 24 * v47) + 24 * v63);
              do
              {
                *(_DWORD *)(*(_QWORD *)(v236 + 24 * (__p + v235)) + 4 * v63) = v235;
                *(_DWORD *)(v237 + 4 * v235) = __p + v235;
                ++v235;
              }
              while (v448 != v235);
              __p += v235;
            }
            v238 = v464;
            v239 = &v464;
LABEL_380:
            v240 = v239;
            if (v238)
            {
              do
              {
                v239 = (_QWORD **)v238;
                v241 = *((_DWORD *)v238 + 7);
                if (v63 < v241)
                {
                  v238 = *v239;
                  goto LABEL_380;
                }
                if (v241 >= v63)
                  goto LABEL_62;
                v238 = v239[1];
              }
              while (v238);
              v240 = v239 + 1;
            }
            v242 = operator new(0x20uLL);
            *((_DWORD *)v242 + 7) = v63;
            *v242 = 0;
            v242[1] = 0;
            v242[2] = v239;
            *v240 = v242;
            if (*v463)
            {
              v463 = (_QWORD *)*v463;
              v242 = (_QWORD *)*v240;
            }
            v243 = v464;
            *((_BYTE *)v242 + 24) = v242 == v464;
            if (v242 != v243)
            {
              do
              {
                v244 = v242[2];
                if (*(_BYTE *)(v244 + 24))
                  break;
                v245 = *(_QWORD **)(v244 + 16);
                v246 = *v245;
                if (*v245 == v244)
                {
                  v249 = v245[1];
                  if (!v249 || (v250 = *(unsigned __int8 *)(v249 + 24), v247 = (_BYTE *)(v249 + 24), v250))
                  {
                    if (*(_QWORD **)v244 == v242)
                    {
                      *(_BYTE *)(v244 + 24) = 1;
                      *((_BYTE *)v245 + 24) = 0;
                      v253 = *(_QWORD *)(v244 + 8);
                      *v245 = v253;
                      if (v253)
                        goto LABEL_401;
                    }
                    else
                    {
                      v251 = *(uint64_t **)(v244 + 8);
                      v252 = *v251;
                      *(_QWORD *)(v244 + 8) = *v251;
                      if (v252)
                      {
                        *(_QWORD *)(v252 + 16) = v244;
                        v245 = *(_QWORD **)(v244 + 16);
                      }
                      v251[2] = (uint64_t)v245;
                      *(_QWORD *)(*(_QWORD *)(v244 + 16) + 8 * (**(_QWORD **)(v244 + 16) != v244)) = v251;
                      *v251 = v244;
                      *(_QWORD *)(v244 + 16) = v251;
                      v245 = (_QWORD *)v251[2];
                      v244 = *v245;
                      *((_BYTE *)v251 + 24) = 1;
                      *((_BYTE *)v245 + 24) = 0;
                      v253 = *(_QWORD *)(v244 + 8);
                      *v245 = v253;
                      if (v253)
LABEL_401:
                        *(_QWORD *)(v253 + 16) = v245;
                    }
                    *(_QWORD *)(v244 + 16) = v245[2];
                    *(_QWORD *)(v245[2] + 8 * (*(_QWORD *)v245[2] != (_QWORD)v245)) = v244;
                    *(_QWORD *)(v244 + 8) = v245;
LABEL_407:
                    v245[2] = v244;
                    break;
                  }
                }
                else if (!v246 || (v248 = *(unsigned __int8 *)(v246 + 24), v247 = (_BYTE *)(v246 + 24), v248))
                {
                  if (*(_QWORD **)v244 == v242)
                  {
                    v256 = v242[1];
                    *(_QWORD *)v244 = v256;
                    if (v256)
                    {
                      *(_QWORD *)(v256 + 16) = v244;
                      v245 = *(_QWORD **)(v244 + 16);
                    }
                    v242[2] = v245;
                    *(_QWORD *)(*(_QWORD *)(v244 + 16) + 8 * (**(_QWORD **)(v244 + 16) != v244)) = v242;
                    v242[1] = v244;
                    *(_QWORD *)(v244 + 16) = v242;
                    v245 = (_QWORD *)v242[2];
                    *((_BYTE *)v242 + 24) = 1;
                    *((_BYTE *)v245 + 24) = 0;
                    v244 = v245[1];
                    v254 = *(_QWORD **)v244;
                    v245[1] = *(_QWORD *)v244;
                    if (v254)
LABEL_405:
                      v254[2] = v245;
                  }
                  else
                  {
                    *(_BYTE *)(v244 + 24) = 1;
                    *((_BYTE *)v245 + 24) = 0;
                    v244 = v245[1];
                    v254 = *(_QWORD **)v244;
                    v245[1] = *(_QWORD *)v244;
                    if (v254)
                      goto LABEL_405;
                  }
                  *(_QWORD *)(v244 + 16) = v245[2];
                  *(_QWORD *)(v245[2] + 8 * (*(_QWORD *)v245[2] != (_QWORD)v245)) = v244;
                  *(_QWORD *)v244 = v245;
                  goto LABEL_407;
                }
                *(_BYTE *)(v244 + 24) = 1;
                v242 = v245;
                *((_BYTE *)v245 + 24) = v245 == v243;
                *v247 = 1;
              }
              while (v245 != v243);
            }
            *(_QWORD *)&v465 = v465 + 1;
            v52 = v441 + 1;
            if (v441 + 1 == v435)
            {
LABEL_58:
              v48 = *v4;
              goto LABEL_59;
            }
          }
          else
          {
            v98 = v464;
            if (!v464)
              goto LABEL_112;
            v99 = &v464;
            do
            {
              v100 = v98;
              v101 = v99;
              v102 = *((_DWORD *)v98 + 7);
              v103 = v98 + 1;
              if (v102 >= v97)
              {
                v103 = v100;
                v99 = (_QWORD **)v100;
              }
              v98 = (_QWORD *)*v103;
            }
            while (v98);
            if (v99 == &v464)
              goto LABEL_112;
            if (v102 < v97)
              v100 = v101;
            if (v97 < *((_DWORD *)v100 + 7))
            {
LABEL_112:
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 280, (uint64_t)"visited_camera_stream_indices.contains(pri_camera_stream_idx) && \"The camera stream cannot be visited before its associated primary camera \" \"stream has been visited. Please check the ordering in the config \" \"vstream_mapping and multi_camera_stereo_primary_mapping parameters.\"", 278, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v104 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v104 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v105 = qword_254A6DE40;
                for (k = qword_254A6DE48; v105 != k; v105 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v105)(*(_QWORD *)(v105 + 8), "visited_camera_stream_indices.contains(pri_camera_stream_idx) && \"The camera stream cannot be visited before its associated primary camera \" \"stream has been visited. Please check the ordering in the config \" \"vstream_mapping and multi_camera_stereo_primary_mapping parameters.\"", 278, "", 0);
              }
              v107 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                abort();
              qword_254A6DE58(unk_254A6DE60, "visited_camera_stream_indices.contains(pri_camera_stream_idx) && \"The camera stream cannot be visited before its associated primary camera \" \"stream has been visited. Please check the ordering in the config \" \"vstream_mapping and multi_camera_stereo_primary_mapping parameters.\"", 278, "", 0);
            }
            v108 = *(_QWORD *)(*(_QWORD *)(*a3
                                         + 48 * ((a3[3] + v47) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4))))
                             + 104 * v437
                             + 8)
                 + 440 * v441;
            v109 = v108 + 96;
            if (!*(_BYTE *)(v108 + 120))
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 289, (uint64_t)"opt_sec_to_pri_matches.has_value() && \"This camera stream should have had a primary camera stream.\"", 99, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v110 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v110 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v111 = qword_254A6DE40;
                for (m = qword_254A6DE48; v111 != m; v111 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v111)(*(_QWORD *)(v111 + 8), "opt_sec_to_pri_matches.has_value() && \"This camera stream should have had a primary camera stream.\"", 99, "", 0);
              }
              v113 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v113 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                abort();
              qword_254A6DE58(unk_254A6DE60, "opt_sec_to_pri_matches.has_value() && \"This camera stream should have had a primary camera stream.\"", 99, "", 0);
              if (!*(_BYTE *)(v109 + 24))
                sub_20E866B34();
            }
            v460 = 0;
            v461 = 0;
            v462 = 0;
            v115 = *(const void **)v109;
            v114 = *(_QWORD *)(v109 + 8);
            v116 = v114 - *(_QWORD *)v109;
            if (v114 == *(_QWORD *)v109)
            {
              v118 = 0;
              v117 = 0;
            }
            else
            {
              if (v116 < 0)
                sub_20E867F44();
              v117 = (int8x16_t *)operator new(v114 - *(_QWORD *)v109);
              v118 = (int8x16_t *)((char *)v117 + 8 * (v116 >> 3));
              v460 = v117;
              v462 = v118;
              memcpy(v117, v115, v116);
              v461 = v118;
            }
            v124 = 126 - 2 * __clz(((char *)v118 - (char *)v117) >> 3);
            if (v118 == v117)
              v125 = 0;
            else
              v125 = v124;
            sub_20F0C7B20(v117, v118, v125, 1);
            v127 = v460;
            v126 = v461;
            v128 = *v447;
            v129 = v443[2];
            v458 = 0;
            v459 = 0;
            v457 = 0;
            if ((_DWORD)v129)
            {
              v130 = 4 * v129;
              v131 = (char *)operator new(4 * v129);
              v132 = &v131[4 * v129];
              v457 = v131;
              v459 = v132;
              memset(v131, 255, v130);
              v458 = v132;
            }
            else
            {
              v131 = 0;
            }
            v133 = (unint64_t)((char *)v126 - (char *)v127) >> 3;
            v134 = v128 + 24 * v47;
            v136 = (uint64_t *)(v134 + 8);
            v135 = *(_QWORD *)(v134 + 8);
            v137 = __p + v445 - v133;
            v138 = 0xAAAAAAAAAAAAAAABLL * ((v135 - *(_QWORD *)v134) >> 3);
            if (v137 <= v138)
            {
              v5 = v456;
              if (v137 < v138)
              {
                v139 = *(_QWORD *)v134 + 24 * v137;
                if (v135 != v139)
                {
                  v140 = *(_QWORD *)(v134 + 8);
                  do
                  {
                    v142 = *(void **)(v140 - 24);
                    v140 -= 24;
                    v141 = v142;
                    if (v142)
                    {
                      *(_QWORD *)(v135 - 16) = v141;
                      operator delete(v141);
                    }
                    v135 = v140;
                  }
                  while (v140 != v139);
                }
                *v136 = v139;
                v5 = v456;
              }
            }
            else
            {
              v5 = v456;
              sub_20F0B7DD0((char **)v134, v137 - v138, (uint64_t)&v457);
            }
            if (v131)
              operator delete(v131);
            if ((_DWORD)v445)
            {
              v143 = 0;
              v144 = 0;
              do
              {
                while (v144 == (_DWORD)v133 || v143 < v460->u32[2 * v144])
                {
                  if (v144 < v133 && v460->i32[2 * v144] >= v445)
                  {
                    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 320, (uint64_t)"sec_observ_idx < num_observations && \"The index1 exceeds the number of observations.\"", 85, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                    v145 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v145 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    if (!byte_254A6DE68 || byte_254A6DE70)
                    {
                      v146 = qword_254A6DE40;
                      for (n = qword_254A6DE48; v146 != n; v146 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v146)(*(_QWORD *)(v146 + 8), "sec_observ_idx < num_observations && \"The index1 exceeds the number of observations.\"", 85, "", 0);
                    }
                    v148 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                    if ((v148 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                    {
                      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A6DE78);
                    }
                    v5 = v456;
                    if (!byte_254A6DE68)
                      abort();
                    qword_254A6DE58(unk_254A6DE60, "sec_observ_idx < num_observations && \"The index1 exceeds the number of observations.\"", 85, "", 0);
                  }
                  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5[3] + 24 * v47) + 24 * __p) + 4 * v63) = v143;
                  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v5 + 24 * v47) + 24 * v63) + 4 * v143) = __p++;
                  if (++v143 == v448)
                    goto LABEL_329;
                }
                v149 = v460->u32[2 * v144 + 1];
                v150 = *v5;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 3) <= v47)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 508, (uint64_t)"pose_idx < observation_index_to_spatial_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 108, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v151 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v151 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v152 = qword_254A6DE40;
                    for (ii = qword_254A6DE48; v152 != ii; v152 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v152)(*(_QWORD *)(v152 + 8), "pose_idx < observation_index_to_spatial_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 108, "", 0);
                  }
                  v154 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v154 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
LABEL_682:
                    abort();
                  qword_254A6DE58(unk_254A6DE60, "pose_idx < observation_index_to_spatial_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 108, "", 0);
                  v150 = *v456;
                }
                v155 = *(_QWORD *)(v150 + 24 * v47);
                if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v150 + 24 * v47 + 8) - v155) >> 3) <= v97)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 512, (uint64_t)"camera_stream_idx < observation_index_to_spatial_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 127, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v156 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v156 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v157 = qword_254A6DE40;
                    for (jj = qword_254A6DE48; v157 != jj; v157 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v157)(*(_QWORD *)(v157 + 8), "camera_stream_idx < observation_index_to_spatial_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 127, "", 0);
                  }
                  v159 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v159 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_682;
                  qword_254A6DE58(unk_254A6DE60, "camera_stream_idx < observation_index_to_spatial_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 127, "", 0);
                  v150 = *v456;
                  v155 = *(_QWORD *)(*v456 + 24 * v47);
                }
                if (v149 >= ((*(_QWORD *)(v155 + 24 * v97 + 8)
                                                         - *(_QWORD *)(v155 + 24 * v97)) >> 2))
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 341, (uint64_t)"pri_observ_idx < num_pri_observations && \"The index2 exceeds the number of observations.\"", 89, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v160 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v160 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v161 = qword_254A6DE40;
                    for (kk = qword_254A6DE48; v161 != kk; v161 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v161)(*(_QWORD *)(v161 + 8), "pri_observ_idx < num_pri_observations && \"The index2 exceeds the number of observations.\"", 89, "", 0);
                  }
                  v163 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v163 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_682;
                  qword_254A6DE58(unk_254A6DE60, "pri_observ_idx < num_pri_observations && \"The index2 exceeds the number of observations.\"", 89, "", 0);
                  v150 = *v456;
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v5[1] - v150) >> 3) <= v47)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 442, (uint64_t)"pose_idx < observation_index_to_spatial_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 108, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v164 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v164 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v165 = qword_254A6DE40;
                    for (mm = qword_254A6DE48; v165 != mm; v165 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v165)(*(_QWORD *)(v165 + 8), "pose_idx < observation_index_to_spatial_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 108, "", 0);
                  }
                  v167 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v167 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
LABEL_678:
                    abort();
                  qword_254A6DE58(unk_254A6DE60, "pose_idx < observation_index_to_spatial_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 108, "", 0);
                  v150 = *v456;
                }
                v169 = (uint64_t *)(v150 + 24 * v47);
                v168 = *v169;
                if (0xAAAAAAAAAAAAAAABLL * ((v169[1] - *v169) >> 3) <= v97)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 446, (uint64_t)"camera_stream_idx < observation_index_to_spatial_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 127, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v170 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v170 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v171 = qword_254A6DE40;
                    for (nn = qword_254A6DE48; v171 != nn; v171 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v171)(*(_QWORD *)(v171 + 8), "camera_stream_idx < observation_index_to_spatial_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 127, "", 0);
                  }
                  v173 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v173 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_678;
                  qword_254A6DE58(unk_254A6DE60, "camera_stream_idx < observation_index_to_spatial_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 127, "", 0);
                  v168 = *(_QWORD *)(*v456 + 24 * v47);
                }
                v175 = (uint64_t *)(v168 + 24 * v97);
                v174 = *v175;
                if (v149 >= (v175[1] - *v175) >> 2)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 451, (uint64_t)"observ_idx < observation_index_to_spatial_track_index_mapping_[pose_idx][camera_stream_idx].size() && \"Invalid access: Index out of range.\"", 139, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v176 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v176 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v177 = qword_254A6DE40;
                    for (i1 = qword_254A6DE48; v177 != i1; v177 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v177)(*(_QWORD *)(v177 + 8), "observ_idx < observation_index_to_spatial_track_index_mapping_[pose_idx][camera_stream_idx].size() && \"Invalid access: Index out of range.\"", 139, "", 0);
                  }
                  v179 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v179 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_678;
                  qword_254A6DE58(unk_254A6DE60, "observ_idx < observation_index_to_spatial_track_index_mapping_[pose_idx][camera_stream_idx].size() && \"Invalid access: Index out of range.\"", 139, "", 0);
                  v174 = *(_QWORD *)(*(_QWORD *)(*v456 + 24 * v47) + 24 * v97);
                }
                v180 = *(unsigned int *)(v174 + 4 * v149);
                v181 = v5[3];
                if (0xAAAAAAAAAAAAAAABLL * ((v5[4] - v181) >> 3) <= v47)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 498, (uint64_t)"pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v182 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v182 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v183 = qword_254A6DE40;
                    for (i2 = qword_254A6DE48; v183 != i2; v183 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v183)(*(_QWORD *)(v183 + 8), "pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, "", 0);
                  }
                  v185 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v185 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_678;
                  qword_254A6DE58(unk_254A6DE60, "pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, "", 0);
                  v181 = *v447;
                }
                if (v180 >= -1431655765
                                         * ((*(_QWORD *)(v181 + 24 * v47 + 8)
                                                         - *(_QWORD *)(v181 + 24 * v47)) >> 3))
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 349, (uint64_t)"track_idx < NumTracks(pose_idx) && \"All observations must be associated to a valid spatial track.\"", 98, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v186 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v186 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v187 = qword_254A6DE40;
                    for (i3 = qword_254A6DE48; v187 != i3; v187 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v187)(*(_QWORD *)(v187 + 8), "track_idx < NumTracks(pose_idx) && \"All observations must be associated to a valid spatial track.\"", 98, "", 0);
                  }
                  v189 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v189 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_678;
                  qword_254A6DE58(unk_254A6DE60, "track_idx < NumTracks(pose_idx) && \"All observations must be associated to a valid spatial track.\"", 98, "", 0);
                  v181 = *v447;
                }
                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v5 + 24 * v47) + 24 * v63) + 4 * v143) = v180;
                if (0xAAAAAAAAAAAAAAABLL * ((v5[4] - v181) >> 3) <= v47)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 461, (uint64_t)"pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v190 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v190 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v191 = qword_254A6DE40;
                    for (i4 = qword_254A6DE48; v191 != i4; v191 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v191)(*(_QWORD *)(v191 + 8), "pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, "", 0);
                  }
                  v193 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v193 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_678;
                  qword_254A6DE58(unk_254A6DE60, "pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, "", 0);
                  v181 = *v447;
                }
                v194 = *(_QWORD *)(v181 + 24 * v47);
                if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v181 + 24 * v47 + 8) - v194) >> 3) <= v180)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 464, (uint64_t)"track_idx < spatial_tracks_observation_indices_[pose_idx].size() && \"Invalid access: Index out of range.\"", 105, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v195 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v195 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v196 = qword_254A6DE40;
                    for (i5 = qword_254A6DE48; v196 != i5; v196 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v196)(*(_QWORD *)(v196 + 8), "track_idx < spatial_tracks_observation_indices_[pose_idx].size() && \"Invalid access: Index out of range.\"", 105, "", 0);
                  }
                  v198 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v198 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_678;
                  qword_254A6DE58(unk_254A6DE60, "track_idx < spatial_tracks_observation_indices_[pose_idx].size() && \"Invalid access: Index out of range.\"", 105, "", 0);
                  v181 = *v447;
                  v194 = *(_QWORD *)(*v447 + 24 * v47);
                }
                v200 = (uint64_t *)(v194 + 24 * v180);
                v199 = *v200;
                if (v63 >= (v200[1] - *v200) >> 2)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 468, (uint64_t)"camera_stream_idx < spatial_tracks_observation_indices_[pose_idx][track_idx].size() && \"Invalid access: Index out of range.\"", 124, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v201 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v201 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v202 = qword_254A6DE40;
                    for (i6 = qword_254A6DE48; v202 != i6; v202 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v202)(*(_QWORD *)(v202 + 8), "camera_stream_idx < spatial_tracks_observation_indices_[pose_idx][track_idx].size() && \"Invalid access: Index out of range.\"", 124, "", 0);
                  }
                  v204 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v204 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_678;
                  qword_254A6DE58(unk_254A6DE60, "camera_stream_idx < spatial_tracks_observation_indices_[pose_idx][track_idx].size() && \"Invalid access: Index out of range.\"", 124, "", 0);
                  v181 = *v447;
                  v199 = *(_QWORD *)(*(_QWORD *)(*v447 + 24 * v47) + 24 * v180);
                }
                if ((*(_DWORD *)(v199 + 4 * v63) & 0x80000000) == 0)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 360, (uint64_t)"ObservationIndex(pose_idx, track_idx, camera_stream_idx) < 0 && \"Observation from this camera stream to this track already exists, \" \"possibly the sec. to pri. matches is not an one-to-one mapping.\"", 198, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v205 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v205 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v206 = qword_254A6DE40;
                    for (i7 = qword_254A6DE48; v206 != i7; v206 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v206)(*(_QWORD *)(v206 + 8), "ObservationIndex(pose_idx, track_idx, camera_stream_idx) < 0 && \"Observation from this camera stream to this track already exists, \" \"possibly the sec. to pri. matches is not an one-to-one mapping.\"", 198, "", 0);
                  }
                  v208 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v208 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_678;
                  qword_254A6DE58(unk_254A6DE60, "ObservationIndex(pose_idx, track_idx, camera_stream_idx) < 0 && \"Observation from this camera stream to this track already exists, \" \"possibly the sec. to pri. matches is not an one-to-one mapping.\"", 198, "", 0);
                  v181 = *v447;
                }
                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v181 + 24 * v47) + 24 * v180) + 4 * v63) = v143;
                ++v144;
                ++v143;
              }
              while (v143 != v448);
            }
LABEL_329:
            v209 = v464;
            v210 = &v464;
            v211 = &v464;
            v4 = v443;
            if (v464)
            {
              while (1)
              {
                while (1)
                {
                  v210 = (_QWORD **)v209;
                  v212 = *((_DWORD *)v209 + 7);
                  if (v63 >= v212)
                    break;
                  v209 = *v210;
                  v211 = v210;
                  if (!*v210)
                    goto LABEL_336;
                }
                if (v212 >= v63)
                  break;
                v209 = v210[1];
                if (!v209)
                {
                  v211 = v210 + 1;
                  goto LABEL_336;
                }
              }
            }
            else
            {
LABEL_336:
              v213 = operator new(0x20uLL);
              *((_DWORD *)v213 + 7) = v63;
              *v213 = 0;
              v213[1] = 0;
              v213[2] = v210;
              *v211 = v213;
              if (*v463)
              {
                v463 = (_QWORD *)*v463;
                v213 = (_QWORD *)*v211;
              }
              v214 = v464;
              *((_BYTE *)v213 + 24) = v213 == v464;
              if (v213 != v214)
              {
                do
                {
                  v215 = v213[2];
                  if (*(_BYTE *)(v215 + 24))
                    break;
                  v216 = *(_QWORD **)(v215 + 16);
                  v217 = *v216;
                  if (*v216 == v215)
                  {
                    v220 = v216[1];
                    if (!v220 || (v221 = *(unsigned __int8 *)(v220 + 24), v218 = (_BYTE *)(v220 + 24), v221))
                    {
                      if (*(_QWORD **)v215 == v213)
                      {
                        *(_BYTE *)(v215 + 24) = 1;
                        *((_BYTE *)v216 + 24) = 0;
                        v224 = *(_QWORD *)(v215 + 8);
                        *v216 = v224;
                        if (v224)
                          goto LABEL_352;
                      }
                      else
                      {
                        v222 = *(uint64_t **)(v215 + 8);
                        v223 = *v222;
                        *(_QWORD *)(v215 + 8) = *v222;
                        if (v223)
                        {
                          *(_QWORD *)(v223 + 16) = v215;
                          v216 = *(_QWORD **)(v215 + 16);
                        }
                        v222[2] = (uint64_t)v216;
                        *(_QWORD *)(*(_QWORD *)(v215 + 16) + 8 * (**(_QWORD **)(v215 + 16) != v215)) = v222;
                        *v222 = v215;
                        *(_QWORD *)(v215 + 16) = v222;
                        v216 = (_QWORD *)v222[2];
                        v215 = *v216;
                        *((_BYTE *)v222 + 24) = 1;
                        *((_BYTE *)v216 + 24) = 0;
                        v224 = *(_QWORD *)(v215 + 8);
                        *v216 = v224;
                        if (v224)
LABEL_352:
                          *(_QWORD *)(v224 + 16) = v216;
                      }
                      *(_QWORD *)(v215 + 16) = v216[2];
                      *(_QWORD *)(v216[2] + 8 * (*(_QWORD *)v216[2] != (_QWORD)v216)) = v215;
                      *(_QWORD *)(v215 + 8) = v216;
LABEL_367:
                      v216[2] = v215;
                      break;
                    }
                  }
                  else if (!v217 || (v219 = *(unsigned __int8 *)(v217 + 24), v218 = (_BYTE *)(v217 + 24), v219))
                  {
                    if (*(_QWORD **)v215 == v213)
                    {
                      v255 = v213[1];
                      *(_QWORD *)v215 = v255;
                      if (v255)
                      {
                        *(_QWORD *)(v255 + 16) = v215;
                        v216 = *(_QWORD **)(v215 + 16);
                      }
                      v213[2] = v216;
                      *(_QWORD *)(*(_QWORD *)(v215 + 16) + 8 * (**(_QWORD **)(v215 + 16) != v215)) = v213;
                      v213[1] = v215;
                      *(_QWORD *)(v215 + 16) = v213;
                      v216 = (_QWORD *)v213[2];
                      *((_BYTE *)v213 + 24) = 1;
                      *((_BYTE *)v216 + 24) = 0;
                      v215 = v216[1];
                      v234 = *(_QWORD **)v215;
                      v216[1] = *(_QWORD *)v215;
                      if (v234)
LABEL_365:
                        v234[2] = v216;
                    }
                    else
                    {
                      *(_BYTE *)(v215 + 24) = 1;
                      *((_BYTE *)v216 + 24) = 0;
                      v215 = v216[1];
                      v234 = *(_QWORD **)v215;
                      v216[1] = *(_QWORD *)v215;
                      if (v234)
                        goto LABEL_365;
                    }
                    *(_QWORD *)(v215 + 16) = v216[2];
                    *(_QWORD *)(v216[2] + 8 * (*(_QWORD *)v216[2] != (_QWORD)v216)) = v215;
                    *(_QWORD *)v215 = v216;
                    goto LABEL_367;
                  }
                  *(_BYTE *)(v215 + 24) = 1;
                  v213 = v216;
                  *((_BYTE *)v216 + 24) = v216 == v214;
                  *v218 = 1;
                }
                while (v216 != v214);
              }
              *(_QWORD *)&v465 = v465 + 1;
            }
            if (v460)
              operator delete(v460);
LABEL_62:
            v52 = v441 + 1;
            if (v441 + 1 == v435)
              goto LABEL_58;
          }
        }
        v76 = v73 - (_QWORD)v68;
        v77 = v76 >> 1;
        if (v76 >> 1 <= v448)
          v77 = (v62 >> 4);
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
          v77 = 0x3FFFFFFFFFFFFFFFLL;
        if (v77 >> 62)
          sub_20E877A38();
        v78 = v77;
        v433 = operator new(4 * v77);
        v434 = v74;
        v79 = &v433[4 * v70];
        memset(v79, 255, ((4 * v448 - v69 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        if (v67 == v68)
        {
          v81 = v78;
          v47 = v432;
          v82 = v433;
          goto LABEL_91;
        }
        v80 = v67 - v68 - 4;
        v81 = v78;
        if (v80 >= 0x2C)
        {
          v82 = v433;
          v47 = v432;
          if ((unint64_t)(&v67[-v69] - v433) >= 0x20)
          {
            v84 = (v80 >> 2) + 1;
            v85 = 4 * (v84 & 0x7FFFFFFFFFFFFFF8);
            v86 = &v67[-v85];
            v79 -= v85;
            v87 = &v433[4 * v70 - 16];
            v88 = v67 - 16;
            v89 = v84 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v90 = *(_OWORD *)v88;
              *(v87 - 1) = *((_OWORD *)v88 - 1);
              *v87 = v90;
              v87 -= 2;
              v88 -= 32;
              v89 -= 8;
            }
            while (v89);
            v67 = v86;
            if (v84 == (v84 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_91:
              *v65 = v79;
              *v66 = &v82[4 * v448];
              *v434 = &v82[4 * v81];
              v4 = v443;
              if (v68)
                operator delete(v68);
              goto LABEL_93;
            }
          }
        }
        else
        {
          v47 = v432;
          v82 = v433;
        }
        do
        {
          v91 = *((_DWORD *)v67 - 1);
          v67 -= 4;
          *((_DWORD *)v79 - 1) = v91;
          v79 -= 4;
        }
        while (v67 != v68);
        goto LABEL_91;
      }
LABEL_59:
      v49 = v437 + 1;
    }
    while (v437 + 1 < v48);
    sub_20E86872C((uint64_t)&v463, v464);
    if (++v47 != 3)
      continue;
    break;
  }
LABEL_439:
  v257 = v5[6];
  v258 = (void **)v5[7];
  v259 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v258 - v257) >> 3);
  if (v259 > 2)
  {
    if ((void **)((char *)v258 - v257) != (void **)72)
    {
      v260 = (void **)(v257 + 72);
      if (v258 != (void **)(v257 + 72))
      {
        v261 = (void **)v5[7];
        do
        {
          v264 = (char *)*(v261 - 3);
          v261 -= 3;
          v263 = v264;
          if (v264)
          {
            v265 = (char *)*(v258 - 2);
            v262 = v263;
            if (v265 != v263)
            {
              v266 = (char *)*(v258 - 2);
              do
              {
                v268 = (void *)*((_QWORD *)v266 - 3);
                v266 -= 24;
                v267 = v268;
                if (v268)
                {
                  *((_QWORD *)v265 - 2) = v267;
                  operator delete(v267);
                }
                v265 = v266;
              }
              while (v266 != v263);
              v262 = *v261;
            }
            *(v258 - 2) = v263;
            operator delete(v262);
          }
          v258 = v261;
        }
        while (v261 != v260);
      }
      v5[7] = v260;
    }
  }
  else
  {
    sub_20F0C765C((uint64_t)v440, 3 - v259);
  }
  v269 = 0;
  v270 = 1;
  do
  {
    v438 = v269;
    v271 = v5[6];
    v272 = v5[3];
    if (0xAAAAAAAAAAAAAAABLL * ((v5[4] - v272) >> 3) <= v270)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 498, (uint64_t)"pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v272 = *v447;
    }
    v273 = (uint64_t *)(v272 + 24 * v270);
    v274 = *v273;
    v275 = v273[1];
    v276 = v443[2];
    v464 = 0;
    *(_QWORD *)&v465 = 0;
    v463 = 0;
    if ((_DWORD)v276)
    {
      v449 = v274;
      v277 = 4 * v276;
      v278 = operator new(4 * v276);
      v279 = (_QWORD *)((char *)v278 + 4 * v276);
      v463 = v278;
      *(_QWORD *)&v465 = v279;
      __pa = v278;
      memset(v278, 255, v277);
      v464 = v279;
      v274 = v449;
    }
    else
    {
      __pa = 0;
    }
    v280 = v271 + 24 * v270;
    v282 = (uint64_t *)(v280 + 8);
    v281 = *(_QWORD *)(v280 + 8);
    v283 = -1431655765 * ((v275 - v274) >> 3);
    v284 = 0xAAAAAAAAAAAAAAABLL * ((v281 - *(_QWORD *)v280) >> 3);
    if (v283 <= v284)
    {
      if (v283 < v284)
      {
        v285 = *(_QWORD *)v280 + 24 * v283;
        if (v281 != v285)
        {
          v286 = *(_QWORD *)(v280 + 8);
          do
          {
            v288 = *(void **)(v286 - 24);
            v286 -= 24;
            v287 = v288;
            if (v288)
            {
              *(_QWORD *)(v281 - 16) = v287;
              operator delete(v287);
            }
            v281 = v286;
          }
          while (v286 != v285);
        }
        *v282 = v285;
      }
    }
    else
    {
      sub_20F0B7DD0((char **)v280, v283 - v284, (uint64_t)&v463);
    }
    if (__pa)
      operator delete(__pa);
    v289 = *v443;
    if ((_DWORD)v289)
    {
      v290 = 0;
      __pb = v270 - 1;
      do
      {
        v291 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4);
        v439 = 1483715975
             * ((*(_QWORD *)(*(_QWORD *)(*a3 + 48 * ((a3[3] + v270) % v291)) + 104 * v290 + 16)
                             - *(_QWORD *)(*(_QWORD *)(*a3 + 48 * ((a3[3] + v270) % v291)) + 104 * v290 + 8)) >> 3);
        if ((_DWORD)v439)
        {
          v292 = 0;
          v442 = v290;
          do
          {
            v293 = v292 + v443[1] * (_DWORD)v290;
            v294 = *((_QWORD *)v443 + 11);
            if (v293 >= (*((_QWORD *)v443 + 12) - v294) >> 2)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v295 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v295 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v296 = qword_254A6DE40;
                for (i8 = qword_254A6DE48; v296 != i8; v296 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v296)(*(_QWORD *)(v296 + 8), "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
              }
              v298 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v298 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              v290 = v442;
              if (!byte_254A6DE68)
                abort();
              qword_254A6DE58(unk_254A6DE60, "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
              v294 = *((_QWORD *)v443 + 11);
            }
            v446 = v292;
            v299 = *(_QWORD *)(*(_QWORD *)(*a3
                                         + 48
                                         * ((a3[3] + v270) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4))))
                             + 104 * v290
                             + 8)
                 + 440 * v292;
            v300 = *(unsigned int **)(v299 + 72);
            v450 = *(unsigned int **)(v299 + 80);
            if (v300 != v450)
            {
              v301 = *(unsigned int *)(v294 + 4 * v293);
              do
              {
                v302 = *v300;
                v303 = *v5;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 3) <= v270)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 442, (uint64_t)"pose_idx < observation_index_to_spatial_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 108, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v304 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v304 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v305 = qword_254A6DE40;
                    for (i9 = qword_254A6DE48; v305 != i9; v305 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v305)(*(_QWORD *)(v305 + 8), "pose_idx < observation_index_to_spatial_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 108, "", 0);
                  }
                  v307 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v307 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68)
LABEL_704:
                    abort();
                  qword_254A6DE58(unk_254A6DE60, "pose_idx < observation_index_to_spatial_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 108, "", 0);
                  v303 = *v5;
                }
                v308 = *(_QWORD *)(v303 + 24 * v270);
                if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v303 + 24 * v270 + 8) - v308) >> 3) <= v301)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 446, (uint64_t)"camera_stream_idx < observation_index_to_spatial_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 127, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v309 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v309 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v310 = qword_254A6DE40;
                    for (i10 = qword_254A6DE48; v310 != i10; v310 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v310)(*(_QWORD *)(v310 + 8), "camera_stream_idx < observation_index_to_spatial_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 127, "", 0);
                  }
                  v312 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v312 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68)
                    goto LABEL_704;
                  qword_254A6DE58(unk_254A6DE60, "camera_stream_idx < observation_index_to_spatial_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 127, "", 0);
                  v303 = *v5;
                  v308 = *(_QWORD *)(*v5 + 24 * v270);
                }
                v314 = (uint64_t *)(v308 + 24 * v301);
                v313 = *v314;
                if (v302 >= (v314[1] - *v314) >> 2)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 451, (uint64_t)"observ_idx < observation_index_to_spatial_track_index_mapping_[pose_idx][camera_stream_idx].size() && \"Invalid access: Index out of range.\"", 139, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v315 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v315 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v316 = qword_254A6DE40;
                    for (i11 = qword_254A6DE48; v316 != i11; v316 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v316)(*(_QWORD *)(v316 + 8), "observ_idx < observation_index_to_spatial_track_index_mapping_[pose_idx][camera_stream_idx].size() && \"Invalid access: Index out of range.\"", 139, "", 0);
                  }
                  v318 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v318 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68)
                    goto LABEL_704;
                  qword_254A6DE58(unk_254A6DE60, "observ_idx < observation_index_to_spatial_track_index_mapping_[pose_idx][camera_stream_idx].size() && \"Invalid access: Index out of range.\"", 139, "", 0);
                  v303 = *v5;
                  v313 = *(_QWORD *)(*(_QWORD *)(*v5 + 24 * v270) + 24 * v301);
                }
                v319 = *(unsigned int *)(v313 + 4 * v302);
                v320 = v300[1];
                v321 = v270 - 1;
                if (0xAAAAAAAAAAAAAAABLL * ((v5[1] - v303) >> 3) <= __pb)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 442, (uint64_t)"pose_idx < observation_index_to_spatial_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 108, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v322 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v322 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v324 = qword_254A6DE40;
                    for (i12 = qword_254A6DE48; v324 != i12; v324 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v324)(*(_QWORD *)(v324 + 8), "pose_idx < observation_index_to_spatial_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 108, "", 0);
                  }
                  v325 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v325 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
LABEL_681:
                    abort();
                  qword_254A6DE58(unk_254A6DE60, "pose_idx < observation_index_to_spatial_track_index_mapping_.size() && \"Invalid access: Index out of range.\"", 108, "", 0);
                  v303 = *v456;
                  v321 = v270 - 1;
                }
                v327 = (uint64_t *)(v303 + 24 * v321);
                v326 = *v327;
                if (0xAAAAAAAAAAAAAAABLL * ((v327[1] - *v327) >> 3) <= v301)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 446, (uint64_t)"camera_stream_idx < observation_index_to_spatial_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 127, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v328 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v328 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v330 = qword_254A6DE40;
                    for (i13 = qword_254A6DE48; v330 != i13; v330 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v330)(*(_QWORD *)(v330 + 8), "camera_stream_idx < observation_index_to_spatial_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 127, "", 0);
                  }
                  v331 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v331 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_681;
                  qword_254A6DE58(unk_254A6DE60, "camera_stream_idx < observation_index_to_spatial_track_index_mapping_[pose_idx].size() && \"Invalid access: Index out of range.\"", 127, "", 0);
                  v326 = *(_QWORD *)(*v456 + 24 * __pb);
                }
                v333 = (uint64_t *)(v326 + 24 * v301);
                v332 = *v333;
                if (v320 >= (v333[1] - *v333) >> 2)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 451, (uint64_t)"observ_idx < observation_index_to_spatial_track_index_mapping_[pose_idx][camera_stream_idx].size() && \"Invalid access: Index out of range.\"", 139, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v334 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v334 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v336 = qword_254A6DE40;
                    for (i14 = qword_254A6DE48; v336 != i14; v336 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v336)(*(_QWORD *)(v336 + 8), "observ_idx < observation_index_to_spatial_track_index_mapping_[pose_idx][camera_stream_idx].size() && \"Invalid access: Index out of range.\"", 139, "", 0);
                  }
                  v337 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v337 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_681;
                  qword_254A6DE58(unk_254A6DE60, "observ_idx < observation_index_to_spatial_track_index_mapping_[pose_idx][camera_stream_idx].size() && \"Invalid access: Index out of range.\"", 139, "", 0);
                  v332 = *(_QWORD *)(*(_QWORD *)(*v456 + 24 * __pb) + 24 * v301);
                }
                v338 = *(_DWORD *)(v332 + 4 * v320);
                v339 = v5[3];
                if (0xAAAAAAAAAAAAAAABLL * ((v5[4] - v339) >> 3) <= v270)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 498, (uint64_t)"pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v340 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v340 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v342 = qword_254A6DE40;
                    for (i15 = qword_254A6DE48; v342 != i15; v342 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v342)(*(_QWORD *)(v342 + 8), "pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, "", 0);
                  }
                  v343 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v343 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_681;
                  qword_254A6DE58(unk_254A6DE60, "pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, "", 0);
                  v339 = *v447;
                }
                if (v319 >= -1431655765
                                         * ((*(_QWORD *)(v339 + 24 * v270 + 8)
                                                         - *(_QWORD *)(v339 + 24 * v270)) >> 3))
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 413, (uint64_t)"curr_track_idx < NumTracks(pose_idx) && \"All observations must be associated to a valid spatial track.\"", 103, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v344 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v344 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v346 = qword_254A6DE40;
                    for (i16 = qword_254A6DE48; v346 != i16; v346 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v346)(*(_QWORD *)(v346 + 8), "curr_track_idx < NumTracks(pose_idx) && \"All observations must be associated to a valid spatial track.\"", 103, "", 0);
                  }
                  v347 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v347 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_681;
                  qword_254A6DE58(unk_254A6DE60, "curr_track_idx < NumTracks(pose_idx) && \"All observations must be associated to a valid spatial track.\"", 103, "", 0);
                  v339 = *v447;
                }
                v348 = v270 - 1;
                if (0xAAAAAAAAAAAAAAABLL * ((v5[4] - v339) >> 3) <= __pb)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 498, (uint64_t)"pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v349 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v349 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v351 = qword_254A6DE40;
                    for (i17 = qword_254A6DE48; v351 != i17; v351 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v351)(*(_QWORD *)(v351 + 8), "pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, "", 0);
                  }
                  v352 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v352 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_681;
                  qword_254A6DE58(unk_254A6DE60, "pose_idx < spatial_tracks_observation_indices_.size() && \"Invalid access: Index out of range.\"", 94, "", 0);
                  v339 = *v447;
                  v348 = v270 - 1;
                }
                if (v338 >= -1431655765
                           * ((*(_QWORD *)(v339 + 24 * v348 + 8) - *(_QWORD *)(v339 + 24 * v348)) >> 3))
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 416, (uint64_t)"prev_track_idx < NumTracks(pose_idx - 1) && \"All observations must be associated to a valid spatial track.\"", 107, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v353 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v353 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v355 = qword_254A6DE40;
                    for (i18 = qword_254A6DE48; v355 != i18; v355 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v355)(*(_QWORD *)(v355 + 8), "prev_track_idx < NumTracks(pose_idx - 1) && \"All observations must be associated to a valid spatial track.\"", 107, "", 0);
                  }
                  v356 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v356 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_681;
                  qword_254A6DE58(unk_254A6DE60, "prev_track_idx < NumTracks(pose_idx - 1) && \"All observations must be associated to a valid spatial track.\"", 107, "", 0);
                }
                v357 = v5[6];
                if (0xAAAAAAAAAAAAAAABLL * ((v5[7] - v357) >> 3) <= v270)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 478, (uint64_t)"current_pose_idx < current_to_previous_spatial_tracks_indices_mapping_.size() && \"Invalid access: Index out of range.\"", 118, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v358 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v358 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v360 = qword_254A6DE40;
                    for (i19 = qword_254A6DE48; v360 != i19; v360 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v360)(*(_QWORD *)(v360 + 8), "current_pose_idx < current_to_previous_spatial_tracks_indices_mapping_.size() && \"Invalid access: Index out of range.\"", 118, "", 0);
                  }
                  v361 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v361 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_681;
                  qword_254A6DE58(unk_254A6DE60, "current_pose_idx < current_to_previous_spatial_tracks_indices_mapping_.size() && \"Invalid access: Index out of range.\"", 118, "", 0);
                  v357 = *v440;
                }
                v362 = *(_QWORD *)(v357 + 24 * v270);
                if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v357 + 24 * v270 + 8) - v362) >> 3) <= v319)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 482, (uint64_t)"track_idx < current_to_previous_spatial_tracks_indices_mapping_[current_pose_idx].size() && \"Invalid access: Index out of range.\"", 129, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v363 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v363 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v365 = qword_254A6DE40;
                    for (i20 = qword_254A6DE48; v365 != i20; v365 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v365)(*(_QWORD *)(v365 + 8), "track_idx < current_to_previous_spatial_tracks_indices_mapping_[current_pose_idx].size() && \"Invalid access: Index out of range.\"", 129, "", 0);
                  }
                  v366 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v366 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_681;
                  qword_254A6DE58(unk_254A6DE60, "track_idx < current_to_previous_spatial_tracks_indices_mapping_[current_pose_idx].size() && \"Invalid access: Index out of range.\"", 129, "", 0);
                  v357 = *v440;
                  v362 = *(_QWORD *)(*v440 + 24 * v270);
                }
                v368 = (uint64_t *)(v362 + 24 * v319);
                v367 = *v368;
                if (v301 >= (v368[1] - *v368) >> 2)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 488, (uint64_t)"camera_stream_idx < current_to_previous_spatial_tracks_indices_mapping_[current_pose_idx][track_idx] .size() && \"Invalid access: Index out of range.\"", 149, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                  v369 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v369 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v371 = qword_254A6DE40;
                    for (i21 = qword_254A6DE48; v371 != i21; v371 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v371)(*(_QWORD *)(v371 + 8), "camera_stream_idx < current_to_previous_spatial_tracks_indices_mapping_[current_pose_idx][track_idx] .size() && \"Invalid access: Index out of range.\"", 149, "", 0);
                  }
                  v372 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v372 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_681;
                  qword_254A6DE58(unk_254A6DE60, "camera_stream_idx < current_to_previous_spatial_tracks_indices_mapping_[current_pose_idx][track_idx] .size() && \"Invalid access: Index out of range.\"", 149, "", 0);
                  v357 = *v440;
                  v367 = *(_QWORD *)(*(_QWORD *)(*v440 + 24 * v270) + 24 * v319);
                }
                if ((*(_DWORD *)(v367 + 4 * v301) & 0x80000000) == 0)
                {
                  sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 422, (uint64_t)"PreviousTrackIndex(pose_idx, curr_track_idx, camera_stream_idx) < 0", 67, (uint64_t)"Temporal link from this observation to observation in the previous camera stream already exists, possibly the curr. to prev. matches is not an one-to-one mapping.", 162, (void (*)(void **))sub_21023DDB0);
                  v373 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v373 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  if (!byte_254A6DE68 || byte_254A6DE70)
                  {
                    v375 = qword_254A6DE40;
                    for (i22 = qword_254A6DE48; v375 != i22; v375 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v375)(*(_QWORD *)(v375 + 8), "PreviousTrackIndex(pose_idx, curr_track_idx, camera_stream_idx) < 0", 67, "Temporal link from this observation to observation in the previous camera stream already exists, possibly the curr. to prev. matches is not an one-to-one mapping.", 162);
                  }
                  v376 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                  if ((v376 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                  {
                    __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A6DE78);
                  }
                  v5 = v456;
                  if (!byte_254A6DE68)
                    goto LABEL_681;
                  qword_254A6DE58(unk_254A6DE60, "PreviousTrackIndex(pose_idx, curr_track_idx, camera_stream_idx) < 0", 67, "Temporal link from this observation to observation in the previous camera stream already exists, possibly the curr. to prev. matches is not an one-to-one mapping.", 162);
                  v357 = *v440;
                }
                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v357 + 24 * v270) + 24 * v319) + 4 * v301) = v338;
                v300 += 2;
              }
              while (v300 != v450);
            }
            v292 = v446 + 1;
            v290 = v442;
          }
          while (v446 + 1 != v439);
          v289 = *v443;
        }
        ++v290;
      }
      while (v290 < v289);
    }
    v269 = 1;
    v270 = 2;
  }
  while ((v438 & 1) == 0);
  v377 = (unsigned int *)v5[12];
  v378 = v377[2];
  if ((_DWORD)v378)
  {
    v379 = (char *)operator new(8 * v378);
    v380 = &v379[8 * v378];
    bzero(v379, 8 * v378);
  }
  else
  {
    v379 = 0;
    v380 = 0;
  }
  v382 = (char *)v5[9];
  v381 = (char *)v5[10];
  v383 = (char *)(v381 - v382);
  v384 = v5;
  v385 = 0xAAAAAAAAAAAAAAABLL * ((v381 - v382) >> 3);
  if (v385 > 2)
  {
    v400 = v384;
    if (v383 != (char *)72)
    {
      v401 = v382 + 72;
      if (v381 != v382 + 72)
      {
        v402 = v381;
        do
        {
          v404 = (void *)*((_QWORD *)v402 - 3);
          v402 -= 24;
          v403 = v404;
          if (v404)
          {
            *((_QWORD *)v381 - 2) = v403;
            operator delete(v403);
          }
          v381 = v402;
        }
        while (v402 != v401);
      }
      v400[10] = v401;
    }
  }
  else
  {
    v386 = 3 - v385;
    v387 = v384 + 11;
    v388 = v384[11];
    if (0xAAAAAAAAAAAAAAABLL * ((v388 - (uint64_t)v381) >> 3) >= 3 - v385)
    {
      v405 = v380 - v379;
      if (v380 == v379)
      {
        bzero(v381, 24 * ((48 - (uint64_t)v383) / 0x18uLL) + 24);
      }
      else
      {
        if (v405 < 0)
        {
          *(_QWORD *)v381 = 0;
          *((_QWORD *)v381 + 1) = 0;
          *((_QWORD *)v381 + 2) = 0;
          sub_20E867F44();
        }
        v406 = 72 - 8 * ((v381 - v382) >> 3);
        v407 = v381;
        do
        {
          *(_QWORD *)v407 = 0;
          *((_QWORD *)v407 + 1) = 0;
          *((_QWORD *)v407 + 2) = 0;
          v408 = (char *)operator new(v380 - v379);
          *(_QWORD *)v407 = v408;
          *((_QWORD *)v407 + 1) = v408;
          v409 = &v408[8 * (v405 >> 3)];
          *((_QWORD *)v407 + 2) = v409;
          memcpy(v408, v379, v380 - v379);
          *((_QWORD *)v407 + 1) = v409;
          v407 += 24;
          v406 -= 24;
        }
        while (v406);
      }
      v400 = v456;
      v456[10] = &v381[24 * v386];
    }
    else
    {
      v389 = 0xAAAAAAAAAAAAAAABLL * ((v388 - (uint64_t)v382) >> 3);
      v390 = 0x5555555555555556 * ((v388 - (uint64_t)v382) >> 3);
      if (v390 <= 3)
        v390 = 3;
      if (v389 >= 0x555555555555555)
        v391 = 0xAAAAAAAAAAAAAAALL;
      else
        v391 = v390;
      v466 = v387;
      __pc = v379;
      if (v391 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v392 = operator new(24 * v391);
      v393 = v392;
      v394 = &v392[(v381 - v382) >> 3];
      v463 = v392;
      v464 = v394;
      *((_QWORD *)&v465 + 1) = &v392[3 * v391];
      v395 = v380 - v379;
      v451 = *((_QWORD *)&v465 + 1);
      if (v395)
      {
        if (v395 < 0)
        {
          *v394 = 0;
          v394[1] = 0;
          v394[2] = 0;
          sub_20E867F44();
        }
        v396 = (v381 - v382) >> 3;
        do
        {
          v397 = &v393[v396];
          *v397 = 0;
          v397[1] = 0;
          v397[2] = 0;
          v398 = (char *)operator new(v395);
          *v397 = v398;
          v399 = &v398[8 * (v395 >> 3)];
          v397[2] = v399;
          memcpy(v398, __pc, v395);
          v397[1] = v399;
          v396 += 3;
        }
        while (v396 != 9);
      }
      else
      {
        bzero(&v392[(v381 - v382) >> 3], 24 * ((48 - (uint64_t)v383) / 0x18uLL) + 24);
      }
      *(_QWORD *)&v465 = v393 + 9;
      if (v381 == v382)
      {
        v379 = __pc;
        v400 = v456;
        v456[9] = v394;
        v456[10] = v393 + 9;
        v456[11] = v451;
      }
      else
      {
        v400 = v456;
        do
        {
          *(v394 - 3) = 0;
          *(v394 - 2) = 0;
          v394 -= 3;
          v394[2] = 0;
          v410 = *(_OWORD *)(v381 - 24);
          v381 -= 24;
          *(_OWORD *)v394 = v410;
          v394[2] = *((_QWORD *)v381 + 2);
          *(_QWORD *)v381 = 0;
          *((_QWORD *)v381 + 1) = 0;
          *((_QWORD *)v381 + 2) = 0;
        }
        while (v381 != v382);
        v381 = (char *)v456[9];
        v411 = (char *)v456[10];
        v456[9] = v394;
        *((_OWORD *)v456 + 5) = v465;
        v379 = __pc;
        if (v411 != v381)
        {
          v412 = v411;
          do
          {
            v414 = (void *)*((_QWORD *)v412 - 3);
            v412 -= 24;
            v413 = v414;
            if (v414)
            {
              *((_QWORD *)v411 - 2) = v413;
              operator delete(v413);
            }
            v411 = v412;
          }
          while (v412 != v381);
        }
      }
      if (v381)
        operator delete(v381);
    }
  }
  if (v379)
    operator delete(v379);
  v415 = 0;
  v416 = a4[3];
  do
  {
    v417 = (_QWORD *)(*a4 + 24 * ((v415 + v416) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3))));
    if (*v417 != v417[1])
    {
      v418 = *v377;
      if ((_DWORD)v418)
      {
        for (i23 = 0; i23 < v418; ++i23)
        {
          v420 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4);
          v421 = 1483715975
               * ((*(_QWORD *)(*(_QWORD *)(*a3 + 48 * ((a3[3] + v415) % v420)) + 104 * i23 + 16)
                               - *(_QWORD *)(*(_QWORD *)(*a3 + 48 * ((a3[3] + v415) % v420)) + 104 * i23 + 8)) >> 3);
          if ((_DWORD)v421)
          {
            for (i24 = 0; i24 != v421; ++i24)
            {
              v423 = i24 + v377[1] * (_DWORD)i23;
              v424 = *((_QWORD *)v377 + 11);
              if (v423 >= (*((_QWORD *)v377 + 12) - v424) >> 2)
              {
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/DynamicMotionInitializationUtils.hpp", 171, (uint64_t)"hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                v425 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v425 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v426 = qword_254A6DE40;
                  for (i25 = qword_254A6DE48; v426 != i25; v426 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v426)(*(_QWORD *)(v426 + 8), "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
                }
                v428 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v428 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68)
                  abort();
                qword_254A6DE58(unk_254A6DE60, "hash_key < camera_stream_indices_to_serialized_camera_stream_index_mapping_.size() && \"Invalid access: Index out of range.\"", 123, "", 0);
                v424 = *((_QWORD *)v377 + 11);
                v416 = a4[3];
              }
              v429 = *(_QWORD *)(*(_QWORD *)(*a4
                                           + 24
                                           * ((v416 + v415) % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3))))
                               + 240 * i23
                               + 72)
                   + 408 * i24;
              if (*(_BYTE *)(v429 + 400))
                *(_QWORD *)(*(_QWORD *)(v456[9] + 24 * v415) + 8 * *(unsigned int *)(v424 + 4 * v423)) = v429;
            }
            v418 = *v377;
            v400 = v456;
          }
        }
      }
    }
    ++v415;
  }
  while (v415 != 3);
  return v400;
}

void sub_20F0C7138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,void *__p,void **a26)
{
  void **v26;
  void *v28;
  void **v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  void *v34;
  void *v35;
  void **v36;
  void **v37;
  void *v38;
  void **v39;
  void *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  void *v45;
  void *v46;
  void **v47;
  void **v48;
  void *v49;
  void **v50;
  void *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  void *v56;
  void *v57;
  void **v58;
  void **v59;
  void *v60;
  void **v61;
  void *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  void *v67;
  void *v68;

  v28 = *v26;
  if (*v26)
  {
    v26[1] = v28;
    operator delete(v28);
  }
  a26[10] = v26;
  if (__p)
  {
    operator delete(__p);
    v29 = a26;
    v30 = (char *)a26[9];
    if (!v30)
    {
LABEL_53:
      v36 = (void **)*a19;
      if (!*a19)
        goto LABEL_54;
      goto LABEL_14;
    }
  }
  else
  {
    v29 = a26;
    v30 = (char *)a26[9];
    if (!v30)
      goto LABEL_53;
  }
  v31 = (char *)v29[10];
  v32 = v30;
  if (v31 != v30)
  {
    v33 = (char *)v29[10];
    do
    {
      v35 = (void *)*((_QWORD *)v33 - 3);
      v33 -= 24;
      v34 = v35;
      if (v35)
      {
        *((_QWORD *)v31 - 2) = v34;
        operator delete(v34);
      }
      v31 = v33;
    }
    while (v33 != v30);
    v32 = (char *)v29[9];
  }
  v29[10] = v30;
  operator delete(v32);
  v36 = (void **)*a19;
  if (!*a19)
  {
LABEL_54:
    v47 = (void **)*a23;
    if (!*a23)
      goto LABEL_55;
    goto LABEL_27;
  }
LABEL_14:
  v37 = (void **)v29[7];
  v38 = v36;
  if (v37 != v36)
  {
    v39 = (void **)v29[7];
    do
    {
      v42 = (char *)*(v39 - 3);
      v39 -= 3;
      v41 = v42;
      if (v42)
      {
        v43 = (char *)*(v37 - 2);
        v40 = v41;
        if (v43 != v41)
        {
          v44 = (char *)*(v37 - 2);
          do
          {
            v46 = (void *)*((_QWORD *)v44 - 3);
            v44 -= 24;
            v45 = v46;
            if (v46)
            {
              *((_QWORD *)v43 - 2) = v45;
              operator delete(v45);
            }
            v43 = v44;
          }
          while (v44 != v41);
          v40 = *v39;
        }
        *(v37 - 2) = v41;
        operator delete(v40);
      }
      v37 = v39;
    }
    while (v39 != v36);
    v38 = *a19;
  }
  v29[7] = v36;
  operator delete(v38);
  v47 = (void **)*a23;
  if (!*a23)
  {
LABEL_55:
    v58 = (void **)*v29;
    if (!*v29)
      goto LABEL_56;
    goto LABEL_40;
  }
LABEL_27:
  v48 = (void **)v29[4];
  v49 = v47;
  if (v48 != v47)
  {
    v50 = (void **)v29[4];
    do
    {
      v53 = (char *)*(v50 - 3);
      v50 -= 3;
      v52 = v53;
      if (v53)
      {
        v54 = (char *)*(v48 - 2);
        v51 = v52;
        if (v54 != v52)
        {
          v55 = (char *)*(v48 - 2);
          do
          {
            v57 = (void *)*((_QWORD *)v55 - 3);
            v55 -= 24;
            v56 = v57;
            if (v57)
            {
              *((_QWORD *)v54 - 2) = v56;
              operator delete(v56);
            }
            v54 = v55;
          }
          while (v55 != v52);
          v51 = *v50;
        }
        *(v48 - 2) = v52;
        operator delete(v51);
      }
      v48 = v50;
    }
    while (v50 != v47);
    v49 = *a23;
  }
  v29[4] = v47;
  operator delete(v49);
  v58 = (void **)*v29;
  if (!*v29)
LABEL_56:
    _Unwind_Resume(a1);
LABEL_40:
  v59 = (void **)v29[1];
  v60 = v58;
  if (v59 != v58)
  {
    v61 = (void **)v29[1];
    do
    {
      v64 = (char *)*(v61 - 3);
      v61 -= 3;
      v63 = v64;
      if (v64)
      {
        v65 = (char *)*(v59 - 2);
        v62 = v63;
        if (v65 != v63)
        {
          v66 = (char *)*(v59 - 2);
          do
          {
            v68 = (void *)*((_QWORD *)v66 - 3);
            v66 -= 24;
            v67 = v68;
            if (v68)
            {
              *((_QWORD *)v65 - 2) = v67;
              operator delete(v67);
            }
            v65 = v66;
          }
          while (v66 != v63);
          v62 = *v61;
        }
        *(v59 - 2) = v63;
        operator delete(v62);
      }
      v59 = v61;
    }
    while (v61 != v58);
    v60 = *v29;
  }
  v29[1] = v58;
  operator delete(v60);
  _Unwind_Resume(a1);
}

void sub_20F0C765C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  void **v19;
  void **v20;
  void *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;

  v5 = *(void ***)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(*(void **)(a1 + 8), v12);
    *(_QWORD *)(a1 + 8) = (char *)v5 + v12;
  }
  else
  {
    v6 = *(void ***)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(void ***)a1;
      v19 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v23 = (char *)*(v20 - 3);
          v20 -= 3;
          v22 = v23;
          if (v23)
          {
            v24 = (char *)*(v19 - 2);
            v21 = v22;
            if (v24 != v22)
            {
              v25 = (char *)*(v19 - 2);
              do
              {
                v27 = (void *)*((_QWORD *)v25 - 3);
                v25 -= 24;
                v26 = v27;
                if (v27)
                {
                  *((_QWORD *)v24 - 2) = v26;
                  operator delete(v26);
                }
                v24 = v25;
              }
              while (v25 != v22);
              v21 = *v20;
            }
            *(v19 - 2) = v22;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_20F0C7864(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    v4 = *(void ***)(a1 + 16);
    do
    {
      v7 = (char *)*(v4 - 3);
      v4 -= 3;
      v6 = v7;
      *(_QWORD *)(a1 + 16) = v4;
      if (v7)
      {
        v8 = (char *)*(v3 - 2);
        v5 = v6;
        if (v8 != v6)
        {
          v9 = (char *)*(v3 - 2);
          do
          {
            v11 = (void *)*((_QWORD *)v9 - 3);
            v9 -= 24;
            v10 = v11;
            if (v11)
            {
              *((_QWORD *)v8 - 2) = v10;
              operator delete(v10);
            }
            v8 = v9;
          }
          while (v9 != v6);
          v5 = *v4;
        }
        *(v3 - 2) = v6;
        operator delete(v5);
        v4 = *(void ***)(a1 + 16);
      }
      v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_20F0C7914(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_20F0C7A20(v3, v4, v5, v8);
  }
  return a1;
}

void sub_20F0C79BC(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F0C7A20(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_20E867F44();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_20F0C7AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F0C7AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_20E96AC74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int8x16_t *sub_20F0C7B20(int8x16_t *result, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  __int32 v13;
  __int32 v14;
  uint64_t v15;
  __int32 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int8 *v22;
  uint64_t *v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int8 *v31;
  uint64_t *v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  int8x16_t *v52;
  int v53;
  int v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;
  int v59;
  char *v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  int8x16_t *v64;
  int8x16_t *v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  __int32 v72;
  __int32 v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t *v78;
  BOOL v80;
  uint64_t v81;
  int8x16_t *v82;
  uint64_t *v83;
  __int32 v84;
  __int32 v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int64_t v89;
  int64_t v90;
  BOOL v91;
  uint64_t v92;
  __int32 *v93;
  __int32 v94;
  __int32 v95;
  __int32 *v96;
  uint64_t v97;
  int v98;
  __int32 v99;
  __int32 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  int8x16_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int32 v117;
  __int32 v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (a2[-1].i32[2] < v8->i32[0])
        {
          v71 = v8->i64[0];
          goto LABEL_106;
        }
        return result;
      case 3:
        v72 = v8->i32[2];
        v73 = a2[-1].i32[2];
        if (v72 < v8->i32[0])
        {
          v71 = v8->i64[0];
          if (v73 >= v72)
          {
            v8->i64[0] = v8->i64[1];
            v8->i64[1] = v71;
            if (a2[-1].i32[2] >= (int)v71)
              return result;
            v8->i64[1] = a2[-1].i64[1];
          }
          else
          {
LABEL_106:
            v8->i64[0] = a2[-1].i64[1];
          }
          a2[-1].i64[1] = v71;
          return result;
        }
        if (v73 < v72)
        {
          v114 = v8->i64[1];
          v8->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v114;
          if (v8->i32[2] < v8->i32[0])
            *v8 = vextq_s8(*v8, *v8, 8uLL);
        }
        return result;
      case 4:
        v74 = v8->i32[2];
        v75 = v8->i32[0];
        LODWORD(v76) = v8[1].i32[0];
        if (v74 >= v8->i32[0])
        {
          if ((int)v76 < v74)
          {
            v76 = v8->i64[1];
            v115 = v8[1].i64[0];
            v8->i64[1] = v115;
            v8[1].i64[0] = v76;
            if (v75 > (int)v115)
            {
              v116 = v8->i64[0];
              v8->i64[0] = v115;
              v8->i64[1] = v116;
            }
          }
        }
        else
        {
          v77 = v8->i64[0];
          if ((int)v76 >= v74)
          {
            v8->i64[0] = v8->i64[1];
            v8->i64[1] = v77;
            if ((int)v76 >= (int)v77)
              goto LABEL_187;
            v8->i64[1] = v8[1].i64[0];
          }
          else
          {
            v8->i64[0] = v8[1].i64[0];
          }
          v8[1].i64[0] = v77;
          LODWORD(v76) = v77;
        }
LABEL_187:
        if (a2[-1].i32[2] < (int)v76)
        {
          v122 = v8[1].i64[0];
          v8[1].i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v122;
          if (v8[1].i32[0] < v8->i32[2])
          {
            v124 = v8->i64[1];
            v123 = v8[1].i64[0];
            v8->i64[1] = v123;
            v8[1].i64[0] = v124;
            if (v8->i32[0] > (int)v123)
            {
              v125 = v8->i64[0];
              v8->i64[0] = v123;
              v8->i64[1] = v125;
            }
          }
        }
        return result;
      case 5:
        return (int8x16_t *)sub_20F0B8E18(v8->i64, &v8->i32[2], v8[1].i32, &v8[1].i64[1], &a2[-1].i64[1]);
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 == a2)
              return result;
            v89 = (unint64_t)(v10 - 2) >> 1;
            v90 = v89;
            while (1)
            {
              if (v89 >= v90)
              {
                v92 = (2 * v90) | 1;
                v93 = &v8->i32[2 * v92];
                if (2 * v90 + 2 >= v10)
                {
                  v96 = &v8->i32[2 * v90];
                  if (*v93 >= *v96)
                    goto LABEL_142;
                }
                else
                {
                  v94 = *v93;
                  v95 = v93[2];
                  if (*v93 <= v95)
                    v94 = v93[2];
                  if (*v93 < v95)
                  {
                    v93 += 2;
                    v92 = 2 * v90 + 2;
                  }
                  v96 = &v8->i32[2 * v90];
                  if (v94 >= *v96)
                  {
LABEL_142:
                    v97 = *(_QWORD *)v96;
                    while (1)
                    {
                      v100 = v96;
                      v96 = v93;
                      *(_QWORD *)v100 = *(_QWORD *)v93;
                      if (v89 < v92)
                        break;
                      v101 = (2 * v92) | 1;
                      v93 = &v8->i32[2 * v101];
                      v92 = 2 * v92 + 2;
                      if (v92 < v10)
                      {
                        v98 = *v93;
                        result = (int8x16_t *)(v93 + 2);
                        v99 = v93[2];
                        if (*v93 <= v99)
                          v98 = v93[2];
                        if (*v93 >= v99)
                          v92 = v101;
                        else
                          v93 += 2;
                        if (v98 < (int)v97)
                          break;
                      }
                      else
                      {
                        v92 = v101;
                        if (*v93 < (int)v97)
                          break;
                      }
                    }
                    *(_QWORD *)v96 = v97;
                  }
                }
              }
              v91 = v90-- <= 0;
              if (v91)
              {
                v102 = (unint64_t)v9 >> 3;
                do
                {
                  v103 = 0;
                  v104 = v8->i64[0];
                  v105 = (uint64_t *)v8;
                  do
                  {
                    v106 = (int8x16_t *)&v105[v103 + 1];
                    v107 = (2 * v103) | 1;
                    v108 = 2 * v103 + 2;
                    if (v108 < v102 && v106->i32[0] < v106->i32[2])
                    {
                      v106 = (int8x16_t *)((char *)v106 + 8);
                      v107 = v108;
                    }
                    *v105 = v106->i64[0];
                    v105 = (uint64_t *)v106;
                    v103 = v107;
                  }
                  while (v107 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
                  a2 = (int8x16_t *)((char *)a2 - 8);
                  if (v106 == a2)
                  {
                    v106->i64[0] = v104;
                  }
                  else
                  {
                    v106->i64[0] = a2->i64[0];
                    a2->i64[0] = v104;
                    v109 = (char *)v106 - (char *)v8 + 8;
                    if (v109 >= 9)
                    {
                      v110 = (((unint64_t)v109 >> 3) - 2) >> 1;
                      v111 = &v8->i64[v110];
                      if (*(_DWORD *)v111 < v106->i32[0])
                      {
                        v112 = v106->i64[0];
                        do
                        {
                          v113 = (uint64_t *)v106;
                          v106 = (int8x16_t *)v111;
                          *v113 = *v111;
                          if (!v110)
                            break;
                          v110 = (v110 - 1) >> 1;
                          v111 = &v8->i64[v110];
                        }
                        while (*(_DWORD *)v111 < (int)v112);
                        v106->i64[0] = v112;
                      }
                    }
                  }
                  v91 = v102-- <= 2;
                }
                while (!v91);
                return result;
              }
            }
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8->i64[(unint64_t)v10 >> 1];
          v13 = a2[-1].i32[2];
          if ((unint64_t)v9 < 0x401)
          {
            v16 = v8->i32[0];
            if (v8->i32[0] >= *(_DWORD *)v12)
            {
              if (v13 < v16)
              {
                v20 = v8->i64[0];
                v8->i64[0] = a2[-1].i64[1];
                a2[-1].i64[1] = v20;
                if (v8->i32[0] < *(_DWORD *)v12)
                {
                  v21 = *v12;
                  *v12 = v8->i64[0];
                  v8->i64[0] = v21;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_57;
                }
              }
              goto LABEL_32;
            }
            v17 = *v12;
            if (v13 >= v16)
            {
              *v12 = v8->i64[0];
              v8->i64[0] = v17;
              if (a2[-1].i32[2] >= (int)v17)
                goto LABEL_32;
              v8->i64[0] = a2[-1].i64[1];
            }
            else
            {
              *v12 = a2[-1].i64[1];
            }
            a2[-1].i64[1] = v17;
LABEL_32:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
            goto LABEL_57;
          }
          v14 = *(_DWORD *)v12;
          if (*(_DWORD *)v12 >= v8->i32[0])
          {
            if (v13 < v14)
            {
              v18 = *v12;
              *v12 = a2[-1].i64[1];
              a2[-1].i64[1] = v18;
              if (*(_DWORD *)v12 < v8->i32[0])
              {
                v19 = v8->i64[0];
                v8->i64[0] = *v12;
                *v12 = v19;
              }
            }
          }
          else
          {
            v15 = v8->i64[0];
            if (v13 >= v14)
            {
              v8->i64[0] = *v12;
              *v12 = v15;
              if (a2[-1].i32[2] >= (int)v15)
                goto LABEL_23;
              *v12 = a2[-1].i64[1];
            }
            else
            {
              v8->i64[0] = a2[-1].i64[1];
            }
            a2[-1].i64[1] = v15;
          }
LABEL_23:
          v22 = &v8->i8[8 * v11];
          v25 = *((_DWORD *)v22 - 2);
          v23 = (uint64_t *)(v22 - 8);
          v24 = v25;
          v26 = a2[-1].i32[0];
          if (v25 >= v8->i32[2])
          {
            if (v26 < v24)
            {
              v28 = *v23;
              *v23 = a2[-1].i64[0];
              a2[-1].i64[0] = v28;
              if (*(_DWORD *)v23 < v8->i32[2])
              {
                v29 = v8->i64[1];
                v8->i64[1] = *v23;
                *v23 = v29;
              }
            }
          }
          else
          {
            v27 = v8->i64[1];
            if (v26 >= v24)
            {
              v8->i64[1] = *v23;
              *v23 = v27;
              if (a2[-1].i32[0] >= (int)v27)
                goto LABEL_37;
              *v23 = a2[-1].i64[0];
            }
            else
            {
              v8->i64[1] = a2[-1].i64[0];
            }
            a2[-1].i64[0] = v27;
          }
LABEL_37:
          v31 = &v8->i8[8 * v11];
          v34 = *((_DWORD *)v31 + 2);
          v32 = (uint64_t *)(v31 + 8);
          v33 = v34;
          v35 = a2[-2].i32[2];
          if (v34 >= v8[1].i32[0])
          {
            if (v35 < v33)
            {
              v37 = *v32;
              *v32 = a2[-2].i64[1];
              a2[-2].i64[1] = v37;
              if (*(_DWORD *)v32 < v8[1].i32[0])
              {
                v38 = v8[1].i64[0];
                v8[1].i64[0] = *v32;
                *v32 = v38;
              }
            }
          }
          else
          {
            v36 = v8[1].i64[0];
            if (v35 >= v33)
            {
              v8[1].i64[0] = *v32;
              *v32 = v36;
              if (a2[-2].i32[2] >= (int)v36)
                goto LABEL_46;
              *v32 = a2[-2].i64[1];
            }
            else
            {
              v8[1].i64[0] = a2[-2].i64[1];
            }
            a2[-2].i64[1] = v36;
          }
LABEL_46:
          v39 = *(_DWORD *)v12;
          v40 = *(_DWORD *)v23;
          v41 = *(_DWORD *)v32;
          if (*(_DWORD *)v12 < *(_DWORD *)v23)
          {
            v42 = *v23;
            if (v41 < v39)
            {
              *v23 = *v32;
              *v32 = v42;
              v43 = v8->i64[0];
              v8->i64[0] = *v12;
              *v12 = v43;
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_33;
              goto LABEL_57;
            }
            *v23 = *v12;
            *v12 = v42;
            if (v41 < (int)v42)
            {
              v47 = *v32;
              *v12 = *v32;
              *v32 = v42;
              v42 = v47;
            }
            goto LABEL_56;
          }
          v42 = *v12;
          if (v41 >= v39)
          {
LABEL_56:
            v48 = v8->i64[0];
            v8->i64[0] = v42;
            *v12 = v48;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_57:
            v30 = v8->i64[0];
            if (v8[-1].i32[2] < v8->i32[0])
              goto LABEL_58;
            if (a2[-1].i32[2] <= (int)v30)
            {
              v64 = (int8x16_t *)&v8->u64[1];
              do
              {
                v8 = v64;
                if (v64 >= a2)
                  break;
                v64 = (int8x16_t *)((char *)v64 + 8);
              }
              while (v8->i32[0] <= (int)v30);
            }
            else
            {
              do
              {
                v63 = v8->i32[2];
                v8 = (int8x16_t *)((char *)v8 + 8);
              }
              while (v63 <= (int)v30);
            }
            v65 = a2;
            if (v8 < a2)
            {
              v65 = a2;
              do
              {
                v66 = v65[-1].i32[2];
                v65 = (int8x16_t *)((char *)v65 - 8);
              }
              while (v66 > (int)v30);
            }
            while (v8 < v65)
            {
              v67 = v8->i64[0];
              v8->i64[0] = v65->i64[0];
              v65->i64[0] = v67;
              do
              {
                v68 = v8->i32[2];
                v8 = (int8x16_t *)((char *)v8 + 8);
              }
              while (v68 <= (int)v30);
              do
              {
                v69 = v65[-1].i32[2];
                v65 = (int8x16_t *)((char *)v65 - 8);
              }
              while (v69 > (int)v30);
            }
            v70 = &v8[-1].i64[1];
            if (&v8[-1].u64[1] != (unint64_t *)v7)
              v7->i64[0] = *v70;
            a4 = 0;
            *v70 = v30;
            continue;
          }
          v44 = *v32;
          *v12 = *v32;
          *v32 = v42;
          if (v40 > (int)v44)
          {
            v45 = *v23;
            *v23 = v44;
            *v12 = v45;
            v46 = v8->i64[0];
            v8->i64[0] = v45;
            *v12 = v46;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
            goto LABEL_57;
          }
          v62 = v8->i64[0];
          v8->i64[0] = v44;
          *v12 = v62;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_57;
LABEL_33:
          v30 = v8->i64[0];
LABEL_58:
          v49 = 0;
          do
          {
            v50 = v8->i32[v49 + 2];
            v49 += 2;
          }
          while (v50 < (int)v30);
          v51 = &v8->i8[v49 * 4];
          v52 = a2;
          if (v49 == 2)
          {
            v52 = a2;
            do
            {
              if (v51 >= (char *)v52)
                break;
              v54 = v52[-1].i32[2];
              v52 = (int8x16_t *)((char *)v52 - 8);
            }
            while (v54 >= (int)v30);
          }
          else
          {
            do
            {
              v53 = v52[-1].i32[2];
              v52 = (int8x16_t *)((char *)v52 - 8);
            }
            while (v53 >= (int)v30);
          }
          if (v51 >= (char *)v52)
          {
            v60 = v51 - 8;
            if (v51 - 8 == (char *)v8)
              goto LABEL_76;
LABEL_75:
            v8->i64[0] = *(_QWORD *)v60;
            goto LABEL_76;
          }
          v55 = &v8->i8[v49 * 4];
          v56 = (char *)v52;
          do
          {
            v57 = *(_QWORD *)v55;
            *(_QWORD *)v55 = *(_QWORD *)v56;
            *(_QWORD *)v56 = v57;
            do
            {
              v58 = *((_DWORD *)v55 + 2);
              v55 += 8;
            }
            while (v58 < (int)v30);
            do
            {
              v59 = *((_DWORD *)v56 - 2);
              v56 -= 8;
            }
            while (v59 >= (int)v30);
          }
          while (v55 < v56);
          v60 = v55 - 8;
          if (v55 - 8 != (char *)v8)
            goto LABEL_75;
LABEL_76:
          *(_QWORD *)v60 = v30;
          if (v51 < (char *)v52)
            goto LABEL_79;
          v61 = sub_20F0C8558(v8, (int8x16_t *)v60);
          v8 = (int8x16_t *)(v60 + 8);
          result = (int8x16_t *)sub_20F0C8558((int8x16_t *)(v60 + 8), a2);
          if (!(_DWORD)result)
          {
            if (v61)
              continue;
LABEL_79:
            result = (int8x16_t *)sub_20F0C7B20(v7, v60, a3, a4 & 1);
            a4 = 0;
            v8 = (int8x16_t *)(v60 + 8);
            continue;
          }
          a2 = (int8x16_t *)v60;
          if (v61)
            return result;
          goto LABEL_2;
        }
        v78 = (int8x16_t *)&v8->u64[1];
        v80 = v8 == a2 || v78 == a2;
        if ((a4 & 1) != 0)
        {
          if (v80)
            return result;
          v81 = 0;
          v82 = v8;
          while (1)
          {
            v84 = v82->i32[2];
            v85 = v82->i32[0];
            v82 = v78;
            if (v84 < v85)
            {
              v86 = v78->i64[0];
              v87 = v81;
              do
              {
                *(uint64_t *)((char *)&v8->i64[1] + v87) = *(uint64_t *)((char *)v8->i64 + v87);
                if (!v87)
                {
                  v83 = (uint64_t *)v8;
                  goto LABEL_122;
                }
                v88 = *(__int32 *)((char *)&v8->i32[-2] + v87);
                v87 -= 8;
              }
              while (v88 > (int)v86);
              v83 = (uint64_t *)((char *)&v8->i64[1] + v87);
LABEL_122:
              *v83 = v86;
            }
            v78 = (int8x16_t *)&v82->u64[1];
            v81 += 8;
            if (&v82->u64[1] == (unint64_t *)a2)
              return result;
          }
        }
        if (!v80)
        {
          do
          {
            v117 = v7->i32[2];
            v118 = v7->i32[0];
            v7 = v78;
            if (v117 < v118)
            {
              v119 = v78->i64[0];
              do
              {
                v120 = (uint64_t *)v78;
                v121 = v78[-1].i64[1];
                v78 = (int8x16_t *)((char *)v78 - 8);
                *v120 = v121;
              }
              while (*((_DWORD *)v120 - 4) > (int)v119);
              v78->i64[0] = v119;
            }
            v78 = (int8x16_t *)&v7->u64[1];
          }
          while (&v7->u64[1] != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F0C8558(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int32 v9;
  __int32 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int32 *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (a2[-1].i32[2] >= a1->i32[0])
        return 1;
      v8 = a1->i64[0];
      goto LABEL_10;
    case 3:
      v9 = a1->i32[2];
      v10 = a2[-1].i32[2];
      if (v9 >= a1->i32[0])
      {
        if (v10 < v9)
        {
          v18 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v18;
          if (a1->i32[2] < a1->i32[0])
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        v8 = a1->i64[0];
        if (v10 < v9)
        {
LABEL_10:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v8;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v8;
        if (a2[-1].i32[2] < (int)v8)
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v8;
          return 1;
        }
      }
      return 1;
    case 4:
      v11 = a1->i32[2];
      v12 = a1->i32[0];
      LODWORD(v13) = a1[1].i32[0];
      if (v11 >= a1->i32[0])
      {
        if ((int)v13 < v11)
        {
          v13 = a1->i64[1];
          v19 = a1[1].i64[0];
          a1->i64[1] = v19;
          a1[1].i64[0] = v13;
          if (v12 > (int)v19)
          {
            v20 = a1->i64[0];
            a1->i64[0] = v19;
            a1->i64[1] = v20;
          }
        }
      }
      else
      {
        v14 = a1->i64[0];
        if ((int)v13 >= v11)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v14;
          if ((int)v13 >= (int)v14)
            goto LABEL_44;
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v14;
        LODWORD(v13) = v14;
      }
LABEL_44:
      if (a2[-1].i32[2] >= (int)v13)
        return 1;
      v27 = a1[1].i64[0];
      a1[1].i64[0] = a2[-1].i64[1];
      a2[-1].i64[1] = v27;
      if (a1[1].i32[0] >= a1->i32[2])
        return 1;
      v29 = a1->i64[1];
      v28 = a1[1].i64[0];
      a1->i64[1] = v28;
      a1[1].i64[0] = v29;
      if (a1->i32[0] <= (int)v28)
        return 1;
      v30 = a1->i64[0];
      a1->i64[0] = v28;
      a1->i64[1] = v30;
      return 1;
    case 5:
      sub_20F0B8E18(a1->i64, &a1->i32[2], a1[1].i32, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      v3 = a1 + 1;
      v4 = a1[1].i32[0];
      v5 = a1->i32[2];
      v6 = a1->i32[0];
      if (v5 >= a1->i32[0])
      {
        if (v4 < v5)
        {
          v16 = a1->i64[1];
          v15 = a1[1].i64[0];
          a1->i64[1] = v15;
          a1[1].i64[0] = v16;
          if (v6 > (int)v15)
          {
            v17 = a1->i64[0];
            a1->i64[0] = v15;
            a1->i64[1] = v17;
          }
        }
      }
      else
      {
        v7 = a1->i64[0];
        if (v4 >= v5)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v7;
          if (v4 >= (int)v7)
            goto LABEL_28;
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v7;
      }
LABEL_28:
      v21 = &a1[1].i32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v22 = 0;
      v23 = 0;
      break;
  }
  while (*v21 >= v3->i32[0])
  {
LABEL_37:
    v3 = (int8x16_t *)v21;
    v22 += 8;
    v21 += 2;
    if (v21 == (__int32 *)a2)
      return 1;
  }
  v24 = *(_QWORD *)v21;
  v25 = v22;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v25) = *(uint64_t *)((char *)a1[1].i64 + v25);
    if (v25 == -16)
    {
      a1->i64[0] = v24;
      if (++v23 != 8)
        goto LABEL_37;
      return v21 + 2 == (__int32 *)a2;
    }
    v26 = *(__int32 *)((char *)&a1->i32[2] + v25);
    v25 -= 8;
  }
  while (v26 > (int)v24);
  *(uint64_t *)((char *)&a1[1].i64[1] + v25) = v24;
  if (++v23 != 8)
    goto LABEL_37;
  return v21 + 2 == (__int32 *)a2;
}

void ***sub_20F0C8874(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  void *v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  void **v30;
  void **v31;
  void **v32;
  void **v33;
  void *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;

  v2 = a1[9];
  if (v2)
  {
    v3 = a1[10];
    v4 = a1[9];
    if (v3 != v2)
    {
      v5 = a1[10];
      do
      {
        v7 = *(v5 - 3);
        v5 -= 3;
        v6 = v7;
        if (v7)
        {
          *(v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  v8 = a1[6];
  if (v8)
  {
    v9 = a1[7];
    v10 = a1[6];
    if (v9 != v8)
    {
      v11 = a1[7];
      do
      {
        v14 = (char *)*(v11 - 3);
        v11 -= 3;
        v13 = v14;
        if (v14)
        {
          v15 = (char *)*(v9 - 2);
          v12 = v13;
          if (v15 != v13)
          {
            v16 = (char *)*(v9 - 2);
            do
            {
              v18 = (void *)*((_QWORD *)v16 - 3);
              v16 -= 24;
              v17 = v18;
              if (v18)
              {
                *((_QWORD *)v15 - 2) = v17;
                operator delete(v17);
              }
              v15 = v16;
            }
            while (v16 != v13);
            v12 = *v11;
          }
          *(v9 - 2) = v13;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = a1[6];
    }
    a1[7] = v8;
    operator delete(v10);
  }
  v19 = a1[3];
  if (v19)
  {
    v20 = a1[4];
    v21 = a1[3];
    if (v20 != v19)
    {
      v22 = a1[4];
      do
      {
        v25 = (char *)*(v22 - 3);
        v22 -= 3;
        v24 = v25;
        if (v25)
        {
          v26 = (char *)*(v20 - 2);
          v23 = v24;
          if (v26 != v24)
          {
            v27 = (char *)*(v20 - 2);
            do
            {
              v29 = (void *)*((_QWORD *)v27 - 3);
              v27 -= 24;
              v28 = v29;
              if (v29)
              {
                *((_QWORD *)v26 - 2) = v28;
                operator delete(v28);
              }
              v26 = v27;
            }
            while (v27 != v24);
            v23 = *v22;
          }
          *(v20 - 2) = v24;
          operator delete(v23);
        }
        v20 = v22;
      }
      while (v22 != v19);
      v21 = a1[3];
    }
    a1[4] = v19;
    operator delete(v21);
  }
  v30 = *a1;
  if (*a1)
  {
    v31 = a1[1];
    v32 = *a1;
    if (v31 != v30)
    {
      v33 = a1[1];
      do
      {
        v36 = (char *)*(v33 - 3);
        v33 -= 3;
        v35 = v36;
        if (v36)
        {
          v37 = (char *)*(v31 - 2);
          v34 = v35;
          if (v37 != v35)
          {
            v38 = (char *)*(v31 - 2);
            do
            {
              v40 = (void *)*((_QWORD *)v38 - 3);
              v38 -= 24;
              v39 = v40;
              if (v40)
              {
                *((_QWORD *)v37 - 2) = v39;
                operator delete(v39);
              }
              v37 = v38;
            }
            while (v38 != v35);
            v34 = *v33;
          }
          *(v31 - 2) = v35;
          operator delete(v34);
        }
        v31 = v33;
      }
      while (v33 != v30);
      v32 = *a1;
    }
    a1[1] = v30;
    operator delete(v32);
  }
  return a1;
}

void sub_20F0C8A7C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20F0C8FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F0C9014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0C9028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F0C9080(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20F0C9464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F0C9488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0C949C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0C94C0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  __int128 v12;

  __p = operator new(0x28uLL);
  v12 = xmmword_2102DCA10;
  strcpy((char *)__p, "InertialStateInitializer parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "InertialStateInitializerConfig.enable_dynamic_motion_initialization", v4, "Flag specifing whether the inertial state initializer will enable Dynamic Motion Initialization (DMI). It cannot be enabled at the same time as monocular Dynamic Motion Initialization (mDMI)");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 1));
  sub_20E8B2F9C((uint64_t *)&__p, "InertialStateInitializerConfig.enable_mono_dynamic_motion_initialization", v5, "Flag specifing whether the inertial state initializer will enable monocular Dynamic Motion Initialization (mDMI). It cannot be enabled at the same time as Dynamic Motion Initialization (DMI)");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 208));
  sub_20E8B2F9C((uint64_t *)&__p, "InertialStateInitializerConfig.use_in_motion_initialization", v6, "Set to true to use in-motion initialization and to false to use stationary initialization");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 472));
  sub_20E8B2F9C((uint64_t *)&__p, "InertialStateInitializerConfig.correct_gravity_direction_using_stationary_init", v7, "A flag indicating wether to enable gravity-direction correction using a second stationary initialization");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EAA14D8((_BYTE *)(a1 + 473));
  sub_20E8B2F9C((uint64_t *)&__p, "InertialStateInitializerConfig.preserve_gyro_accel_bias_override_from_prior_inertial_state", v8, "A flag indicating whether to enable gyro/accel bias override from the prior inertial state.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DCF0((unsigned int *)(a1 + 476));
  sub_20E8B2F9C((uint64_t *)&__p, "InertialStateInitializerConfig.num_failed_dmi_attempts_before_attempting_imu_based_initialization", v9, "Number of failed Dynamic Motion Intialization (DMI) attempts before the inertial state initializer starts attempting IMU-based initialization as well.");
  sub_20F115CF0((double *)(a1 + 392), &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20F09C230((double *)(a1 + 216), &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20EFFDB60(a1 + 8, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  return sub_20E869298((uint64_t)&__p);
}

void sub_20F0C96C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0C9744(uint64_t a1, double *a2, char a3, unsigned int a4, uint64_t a5, double a6)
{
  uint64_t v7;
  int v10;
  unint64_t v11;
  unint64_t v12;
  size_t v14;
  const char *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v24;
  uint64_t v25;
  double v28;
  double v31;
  double v32;
  double v33;
  _BOOL4 v34;
  unsigned int v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  const char *v41;
  size_t v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  _BYTE *v46;
  unint64_t v47;
  const char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  size_t v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  int v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  double v95;
  unsigned __int8 v96;
  const char *v97;
  size_t v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  double v107;
  size_t v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  int v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  int v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  int v145;
  void *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  const char *v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  double v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  __int128 v160;
  double v161;
  int v162;
  const char *v163;
  int v164;
  const char *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE object[24];
  __int128 v172;
  _BYTE __p[32];
  __int16 v174;
  int v175;
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  v7 = 1;
  if (*(double *)(a1 + 40) > a6 && (a3 & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 8) > a4)
    {
      sub_20F0CD508(&v168);
      if (**(int **)(v168 + 56) > 2)
        return 1;
      v10 = *(unsigned __int8 *)(v168 + 72);
      v11 = sub_20E8C31DC(v168, "OSLogSurrogateAppender", 1, 0);
      v12 = v11;
      if (!v10 && v11 == 0)
        return 1;
      *(_QWORD *)&v160 = &v168;
      *((std::chrono::steady_clock::time_point *)&v160 + 1) = std::chrono::steady_clock::now();
      v161 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
      v162 = 2;
      v163 = "unknown file";
      v164 = 200;
      v166 = 0;
      v167 = 0;
      v165 = "unknown function";
      v157 = v168;
      if (*(char *)(v168 + 39) < 0)
      {
        v15 = *(const char **)(v168 + 16);
        v14 = *(_QWORD *)(v168 + 24);
      }
      else
      {
        v14 = *(unsigned __int8 *)(v168 + 39);
        v15 = (const char *)(v168 + 16);
      }
      v155 = v168 + 16;
      v43 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v172 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v44 = byte_254A4A4F8;
      else
        v44 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v45 = byte_254A4A4F8[23];
      else
        v45 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v44, v15);
      v46 = &object[8];
      if (v45 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v45 >= 0x17)
      {
        v47 = v12;
        v48 = v15;
        v49 = v10;
        v50 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v45 | 7) != 0x17)
          v50 = v45 | 7;
        v51 = v50 + 1;
        v46 = operator new(v50 + 1);
        *(_QWORD *)&object[16] = v45;
        *(_QWORD *)&v172 = v51 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v46;
        v10 = v49;
        v15 = v48;
        v12 = v47;
      }
      else
      {
        BYTE7(v172) = v45;
        if (!v45)
        {
LABEL_41:
          v46[v45] = 0;
          BYTE8(v172) = 1;
          v52 = __p;
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v14 >= 0x17)
          {
            v53 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v53 = v14 | 7;
            v54 = v53 + 1;
            v52 = operator new(v53 + 1);
            *(_QWORD *)&__p[8] = v14;
            *(_QWORD *)&__p[16] = v54 | 0x8000000000000000;
            *(_QWORD *)__p = v52;
          }
          else
          {
            __p[23] = v14;
            if (!v14)
              goto LABEL_49;
          }
          memmove(v52, v15, v14);
LABEL_49:
          v52[v14] = 0;
          __p[24] = 1;
          v55 = *(NSObject **)object;
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if (BYTE8(v172) && SBYTE7(v172) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v12 && *(_QWORD *)(v12 + 24))
          {
            v56 = _os_log_pack_size();
            v57 = (std::__shared_weak_count_vtbl *)operator new(v56, (std::align_val_t)8uLL);
            v58 = (std::__shared_weak_count *)operator new();
            v59 = v58;
            v58->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v58->__shared_owners_;
            v58->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v58->__shared_weak_owners_ = 0;
            v58[1].__vftable = v57;
            *(_QWORD *)object = v57;
            *(_QWORD *)&object[8] = v57;
            *(_QWORD *)&object[16] = v58;
            do
              v61 = __ldxr(p_shared_owners);
            while (__stxr(v61 + 1, p_shared_owners));
            v172 = 0uLL;
            *(_QWORD *)__p = 0;
            do
              v62 = __ldaxr(p_shared_owners);
            while (__stlxr(v62 - 1, p_shared_owners));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v59);
            }
            v63 = *(_QWORD *)object;
            v64 = _os_log_pack_fill();
            v65 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)v64 = 67109376;
            *(_DWORD *)(v64 + 4) = a4;
            *(_WORD *)(v64 + 8) = 1024;
            *(_DWORD *)(v64 + 10) = v65;
            v66 = operator new();
            v67 = *(unsigned __int8 *)(v157 + 39);
            v68 = v155;
            if ((v67 & 0x80u) != 0)
            {
              v68 = *(_QWORD *)(v157 + 16);
              v67 = *(_QWORD *)(v157 + 24);
            }
            *(_QWORD *)v66 = v63;
            *(_OWORD *)(v66 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v66 + 24) = v172;
            v172 = 0uLL;
            *(_QWORD *)(v66 + 40) = v68;
            *(_QWORD *)(v66 + 48) = v67;
            *(_BYTE *)(v66 + 56) = 2;
            v169 = 0;
            v170 = v66;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), &v170);
            v69 = v170;
            v170 = 0;
            if (v69)
            {
              v70 = *(std::__shared_weak_count **)(v69 + 32);
              if (v70)
              {
                v71 = (unint64_t *)&v70->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (!v72)
                {
                  ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                  std::__shared_weak_count::__release_weak(v70);
                }
              }
              v73 = *(std::__shared_weak_count **)(v69 + 16);
              if (v73)
              {
                v74 = (unint64_t *)&v73->__shared_owners_;
                do
                  v75 = __ldaxr(v74);
                while (__stlxr(v75 - 1, v74));
                if (!v75)
                {
                  ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                  std::__shared_weak_count::__release_weak(v73);
                }
              }
              MEMORY[0x212BC6398](v69, 0x10F0C40B62ED6C6);
              v76 = v169;
              v169 = 0;
              if (v76)
              {
                v77 = *(std::__shared_weak_count **)(v76 + 32);
                if (v77)
                {
                  v78 = (unint64_t *)&v77->__shared_owners_;
                  do
                    v79 = __ldaxr(v78);
                  while (__stlxr(v79 - 1, v78));
                  if (!v79)
                  {
                    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                    std::__shared_weak_count::__release_weak(v77);
                  }
                }
                v80 = *(std::__shared_weak_count **)(v76 + 16);
                if (v80)
                {
                  v81 = (unint64_t *)&v80->__shared_owners_;
                  do
                    v82 = __ldaxr(v81);
                  while (__stlxr(v82 - 1, v81));
                  if (!v82)
                  {
                    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                    std::__shared_weak_count::__release_weak(v80);
                  }
                }
                MEMORY[0x212BC6398](v76, 0x10F0C40B62ED6C6);
              }
            }
            v83 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
            if (*((_QWORD *)&v172 + 1))
            {
              v84 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
              do
                v85 = __ldaxr(v84);
              while (__stlxr(v85 - 1, v84));
              if (!v85)
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
              }
            }
            v86 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v87 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v88 = __ldaxr(v87);
              while (__stlxr(v88 - 1, v87));
              if (!v88)
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
              }
            }
          }
          else
          {
            os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG);
            v89 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)object = 67109376;
            *(_DWORD *)&object[4] = a4;
            *(_WORD *)&object[8] = 1024;
            *(_DWORD *)&object[10] = v89;
            v90 = (void *)_os_log_send_and_compose_impl();
            if (v90)
              free(v90);
          }
          if (v10)
          {
            sub_20E8C003C((uint64_t)&v160, "Should add adaptive keyframe, num_inliers < config_.min_num_inliers_to_consider_parallax: %d < %d", a4, *(_DWORD *)(a1 + 8));
            sub_20E863570((uint64_t)&v160);
          }
          sub_20E863570((uint64_t)&v160);
          v91 = v167;
          if (v167)
          {
            v92 = (unint64_t *)&v167->__shared_owners_;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          return 1;
        }
      }
      memmove(v46, v44, v45);
      goto LABEL_41;
    }
    *(double *)&v17 = *a2;
    *(double *)&v18 = a2[1];
    *(double *)&v19 = a2[2];
    __asm { FMOV            V3.2D, #1.0 }
    v154 = a2[11];
    v24 = *((_QWORD *)a2 + 9);
    v159 = *((_QWORD *)a2 + 7);
    *((double *)&v19 + 1) = a2[6];
    *((double *)&v18 + 1) = a2[5];
    v25 = *((_QWORD *)a2 + 10);
    *((double *)&v17 + 1) = a2[4];
    *(double *)&object[16] = a2[8];
    *(_OWORD *)object = v17;
    *(_QWORD *)__p = v24;
    v172 = v18;
    *(_QWORD *)&__p[24] = v25;
    *(_OWORD *)&__p[8] = v19;
    v160 = 0uLL;
    v161 = 0.0;
    sub_20E9733B8((float64x2_t *)object, (double *)&v160);
    if ((a5 & 0xFF00000000) == 0)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/InformativeBaselineDetermination.cpp", 213, (uint64_t)"opt_num_triangulated_points_for_pnp_ransac", 42, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      sub_20E866B34();
    }
    _D3 = *((_QWORD *)&v160 + 1);
    __asm { FMLA            D2, D3, V1.D[1] }
    v28 = sqrt(_D2 + v161 * v161) * 180.0 / 3.14159265;
    _D1 = v159;
    __asm { FMLA            D0, D1, V2.D[1] }
    v31 = sqrt(vmlad_n_f64(_D0, v154, v154));
    v32 = *(double *)(a1 + 80);
    v33 = *(double *)(a1 + 88) * a6;
    v34 = v31 > v32;
    v35 = *(_DWORD *)(a1 + 96);
    if (v28 > v33)
      v34 = 1;
    v7 = v35 >= a5 || (unint64_t)v34;
    if ((_DWORD)v7 == 1)
    {
      *(_DWORD *)(a1 + 104) = a4;
      v36 = 1;
    }
    else
    {
      kdebug_trace();
      v36 = 0;
    }
    sub_20F0CD508(&v168);
    if (**(int **)(v168 + 56) <= 2)
    {
      v37 = *(unsigned __int8 *)(v168 + 72);
      v38 = sub_20E8C31DC(v168, "OSLogSurrogateAppender", 1, 0);
      v39 = v38;
      if (v37 || v38)
      {
        v152 = v37;
        *(_QWORD *)&v160 = &v168;
        *((std::chrono::steady_clock::time_point *)&v160 + 1) = std::chrono::steady_clock::now();
        v161 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
        v162 = 2;
        v163 = "unknown file";
        v164 = 234;
        v166 = 0;
        v167 = 0;
        v165 = "unknown function";
        v40 = *(_QWORD *)v160;
        v41 = (const char *)(*(_QWORD *)v160 + 16);
        v150 = v41;
        v151 = *(_QWORD *)v160;
        if (*(char *)(*(_QWORD *)v160 + 39) < 0)
        {
          v41 = *(const char **)(v40 + 16);
          v42 = *(_QWORD *)(v40 + 24);
        }
        else
        {
          v42 = *(unsigned __int8 *)(*(_QWORD *)v160 + 39);
        }
        v158 = v39;
        v156 = v36;
        v95 = *(double *)(a1 + 88);
        v96 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        v153 = v35;
        if ((v96 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if ((_BYTE)v172 && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v97 = byte_254A4A4F8;
        else
          v97 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v98 = byte_254A4A4F8[23];
        else
          v98 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v97, v41);
        v99 = &object[8];
        if (v98 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v98 >= 0x17)
        {
          v100 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v98 | 7) != 0x17)
            v100 = v98 | 7;
          v101 = v100 + 1;
          v99 = operator new(v100 + 1);
          *(_QWORD *)&object[16] = v98;
          *(_QWORD *)&v172 = v101 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v99;
          v35 = v153;
        }
        else
        {
          BYTE7(v172) = v98;
          if (!v98)
          {
LABEL_126:
            v99[v98] = 0;
            BYTE8(v172) = 1;
            v102 = __p;
            if (v42 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v42 >= 0x17)
            {
              v104 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v42 | 7) != 0x17)
                v104 = v42 | 7;
              v105 = v104 + 1;
              v102 = operator new(v104 + 1);
              *(_QWORD *)&__p[8] = v42;
              *(_QWORD *)&__p[16] = v105 | 0x8000000000000000;
              *(_QWORD *)__p = v102;
              v103 = v158;
            }
            else
            {
              __p[23] = v42;
              v103 = v158;
              if (!v42)
                goto LABEL_134;
            }
            memmove(v102, v41, v42);
LABEL_134:
            v102[v42] = 0;
            __p[24] = 1;
            v106 = *(NSObject **)object;
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            if (BYTE8(v172) && SBYTE7(v172) < 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            v107 = v95 * a6;
            if (v103 && *(_QWORD *)(v103 + 24))
            {
              v108 = _os_log_pack_size();
              v109 = (std::__shared_weak_count_vtbl *)operator new(v108, (std::align_val_t)8uLL);
              v110 = (std::__shared_weak_count *)operator new();
              v111 = v110;
              v110->__shared_owners_ = 0;
              v112 = (unint64_t *)&v110->__shared_owners_;
              v110->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v110->__shared_weak_owners_ = 0;
              v110[1].__vftable = v109;
              *(_QWORD *)object = v109;
              *(_QWORD *)&object[8] = v109;
              *(_QWORD *)&object[16] = v110;
              do
                v113 = __ldxr(v112);
              while (__stxr(v113 + 1, v112));
              v172 = 0uLL;
              *(_QWORD *)__p = 0;
              do
                v114 = __ldaxr(v112);
              while (__stlxr(v114 - 1, v112));
              if (!v114)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v111);
              }
              v115 = *(_QWORD *)object;
              v116 = _os_log_pack_fill();
              v117 = *(_QWORD *)(a1 + 80);
              v118 = *(_DWORD *)(a1 + 96);
              *(_DWORD *)v116 = 67111424;
              *(_DWORD *)(v116 + 4) = v36;
              *(_WORD *)(v116 + 8) = 1024;
              *(_DWORD *)(v116 + 10) = v31 > v32;
              *(_WORD *)(v116 + 14) = 2048;
              *(double *)(v116 + 16) = v31;
              *(_WORD *)(v116 + 24) = 2048;
              *(_QWORD *)(v116 + 26) = v117;
              *(_WORD *)(v116 + 34) = 1024;
              *(_DWORD *)(v116 + 36) = v28 > v33;
              *(_WORD *)(v116 + 40) = 2048;
              *(double *)(v116 + 42) = v28;
              *(_WORD *)(v116 + 50) = 2048;
              *(double *)(v116 + 52) = v107;
              *(_WORD *)(v116 + 60) = 1024;
              *(_DWORD *)(v116 + 62) = v35 >= a5;
              *(_WORD *)(v116 + 66) = 1024;
              *(_DWORD *)(v116 + 68) = a5;
              *(_WORD *)(v116 + 72) = 1024;
              *(_DWORD *)(v116 + 74) = v118;
              v119 = operator new();
              v120 = *(unsigned __int8 *)(v151 + 39);
              v121 = v150;
              if ((v120 & 0x80u) != 0)
              {
                v121 = *(const char **)(v151 + 16);
                v120 = *(_QWORD *)(v151 + 24);
              }
              *(_QWORD *)v119 = v115;
              *(_OWORD *)(v119 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v119 + 24) = v172;
              v172 = 0uLL;
              *(_QWORD *)(v119 + 40) = v121;
              *(_QWORD *)(v119 + 48) = v120;
              *(_BYTE *)(v119 + 56) = 2;
              v169 = 0;
              v170 = v119;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v158 + 24) + 40))(*(_QWORD *)(v158 + 24), &v170);
              v122 = v170;
              v170 = 0;
              v123 = v156;
              if (v122)
              {
                v124 = *(std::__shared_weak_count **)(v122 + 32);
                if (v124)
                {
                  v125 = (unint64_t *)&v124->__shared_owners_;
                  do
                    v126 = __ldaxr(v125);
                  while (__stlxr(v126 - 1, v125));
                  if (!v126)
                  {
                    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                    std::__shared_weak_count::__release_weak(v124);
                  }
                }
                v127 = *(std::__shared_weak_count **)(v122 + 16);
                if (v127)
                {
                  v128 = (unint64_t *)&v127->__shared_owners_;
                  do
                    v129 = __ldaxr(v128);
                  while (__stlxr(v129 - 1, v128));
                  if (!v129)
                  {
                    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                    std::__shared_weak_count::__release_weak(v127);
                  }
                }
                MEMORY[0x212BC6398](v122, 0x10F0C40B62ED6C6);
                v130 = v169;
                v169 = 0;
                if (v130)
                {
                  v131 = *(std::__shared_weak_count **)(v130 + 32);
                  if (v131)
                  {
                    v132 = (unint64_t *)&v131->__shared_owners_;
                    do
                      v133 = __ldaxr(v132);
                    while (__stlxr(v133 - 1, v132));
                    if (!v133)
                    {
                      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                      std::__shared_weak_count::__release_weak(v131);
                    }
                  }
                  v134 = *(std::__shared_weak_count **)(v130 + 16);
                  if (v134)
                  {
                    v135 = (unint64_t *)&v134->__shared_owners_;
                    do
                      v136 = __ldaxr(v135);
                    while (__stlxr(v136 - 1, v135));
                    if (!v136)
                    {
                      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                      std::__shared_weak_count::__release_weak(v134);
                    }
                  }
                  MEMORY[0x212BC6398](v130, 0x10F0C40B62ED6C6);
                }
              }
              v137 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
              v138 = v152;
              if (*((_QWORD *)&v172 + 1))
              {
                v139 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
                do
                  v140 = __ldaxr(v139);
                while (__stlxr(v140 - 1, v139));
                if (!v140)
                {
                  ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                  std::__shared_weak_count::__release_weak(v137);
                }
              }
              v141 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v142 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v143 = __ldaxr(v142);
                while (__stlxr(v143 - 1, v142));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
            }
            else
            {
              os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG);
              v144 = *(_QWORD *)(a1 + 80);
              v145 = *(_DWORD *)(a1 + 96);
              *(_DWORD *)object = 67111424;
              v123 = v36;
              *(_DWORD *)&object[4] = v36;
              *(_WORD *)&object[8] = 1024;
              *(_DWORD *)&object[10] = v31 > v32;
              *(_WORD *)&object[14] = 2048;
              *(double *)&object[16] = v31;
              LOWORD(v172) = 2048;
              *(_QWORD *)((char *)&v172 + 2) = v144;
              WORD5(v172) = 1024;
              HIDWORD(v172) = v28 > v33;
              *(_WORD *)__p = 2048;
              *(double *)&__p[2] = v28;
              *(_WORD *)&__p[10] = 2048;
              *(double *)&__p[12] = v107;
              *(_WORD *)&__p[20] = 1024;
              *(_DWORD *)&__p[22] = v35 >= a5;
              *(_WORD *)&__p[26] = 1024;
              *(_DWORD *)&__p[28] = a5;
              v174 = 1024;
              v175 = v145;
              v146 = (void *)_os_log_send_and_compose_impl();
              v138 = v152;
              if (v146)
                free(v146);
            }
            if (v138)
            {
              sub_20E8C003C((uint64_t)&v160, "ShouldAddFrontEndKeyframeForVisualSLAM(%d), large_translation(%d): %lf > %lf, large_rotation(%d): %lf > %lf, not enough 3d pts(%d): %d <= %d, ", v123, v31 > v32, v31, *(double *)(a1 + 80), v28 > v33, v28, *(double *)(a1 + 88) * a6, v153 >= a5, a5, *(_DWORD *)(a1 + 96));
              sub_20E863570((uint64_t)&v160);
            }
            sub_20E863570((uint64_t)&v160);
            v147 = v167;
            if (v167)
            {
              v148 = (unint64_t *)&v167->__shared_owners_;
              do
                v149 = __ldaxr(v148);
              while (__stlxr(v149 - 1, v148));
              if (!v149)
              {
                ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                std::__shared_weak_count::__release_weak(v147);
              }
            }
            return v7;
          }
        }
        memmove(v99, v97, v98);
        goto LABEL_126;
      }
    }
  }
  return v7;
}

void sub_20F0CA7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  if (a45)
  {
    if (a44 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F0CA83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E86E8C4(&a38);
  sub_20E86E8C4(&a37);
  sub_20E86E658((uint64_t)&a39);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F0CA87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F0CA8AC()
{
  JUMPOUT(0x20F0CA8B4);
}

void sub_20F0CA8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F0CA8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *object,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F0CA9C4(uint64_t a1, _QWORD *a2, uint64_t *a3, double *a4, double a5)
{
  unint64_t v9;
  unint64_t v10;
  double *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  double *v30;
  double v31;
  double v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  size_t v37;
  const char *v38;
  unsigned __int8 v39;
  double v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  double v45;
  const char *v46;
  size_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  size_t v52;
  const char *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  double v58;
  const char *v59;
  size_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  char *v66;
  unsigned __int8 v70;
  const char *v71;
  size_t v72;
  void **v73;
  unint64_t v74;
  const char *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  double v84;
  size_t v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  double v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  const char *v125;
  size_t v126;
  _BOOL8 v127;
  double *v128;
  unsigned __int8 v129;
  const char *v130;
  size_t v131;
  void **v132;
  unint64_t v133;
  const char *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  size_t v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  double v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  void *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unsigned __int8 v178;
  const char *v179;
  size_t v180;
  void **v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  NSObject *v187;
  double v188;
  size_t v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  char *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  double v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  void *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  int v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  char *v230;
  unsigned __int8 v231;
  const char *v232;
  size_t v233;
  void **v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  NSObject *v240;
  size_t v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  void *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  char *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  void *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  unsigned __int8 v276;
  const char *v277;
  size_t v278;
  void **v279;
  uint64_t v280;
  uint64_t v281;
  void *p_p;
  uint64_t v283;
  uint64_t v284;
  NSObject *v285;
  size_t v286;
  std::__shared_weak_count_vtbl *v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count *v289;
  unint64_t *p_shared_owners;
  unint64_t v291;
  unint64_t v292;
  void *v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  char *v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  void *v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  unsigned __int8 v321;
  double *v322;
  char *v323;
  NSObject *v324;
  unsigned __int8 v325;
  double *v326;
  char *v327;
  NSObject *v328;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  const char *v333;
  uint64_t v334;
  void *v335;
  double *v336;
  uint64_t v337;
  uint64_t v338;
  double *v339;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v341;
  int v342;
  const char *v343;
  int v344;
  const char *v345;
  uint64_t v346;
  std::__shared_weak_count *v347;
  int v348;
  char *category;
  uint64_t v350;
  double v351;
  void *object[3];
  __int128 v353;
  void *__p;
  size_t v355;
  unint64_t v356;
  char v357;
  uint64_t v358;

  v358 = *MEMORY[0x24BDAC8D0];
  v9 = a3[1] - *a3;
  v10 = v9 >> 4;
  v348 = v9 >> 4;
  if (!*(_BYTE *)(a1 + 1))
  {
    v40 = *(double *)(a1 + 40);
    if (v40 > a5)
    {
      if (*(_DWORD *)(a1 + 4) > v10)
      {
        sub_20F0CD508(&v351);
        if (**(int **)(*(_QWORD *)&v351 + 56) > 2)
          return 0;
        v41 = *(unsigned __int8 *)(*(_QWORD *)&v351 + 72);
        v42 = sub_20E8C31DC(*(uint64_t *)&v351, "OSLogSurrogateAppender", 1, 0);
        v43 = v42;
        _ZF = !v41 && v42 == 0;
        if (_ZF)
          return 0;
        v339 = &v351;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v341 = std::chrono::system_clock::now().__d_.__rep_;
        v342 = 2;
        v343 = "unknown file";
        v344 = 104;
        v346 = 0;
        v347 = 0;
        v345 = "unknown function";
        v45 = v351;
        v46 = (const char *)(*(_QWORD *)&v351 + 16);
        v331 = *(_QWORD *)&v351 + 16;
        if (*(char *)(*(_QWORD *)&v351 + 39) < 0)
        {
          v46 = *(const char **)(*(_QWORD *)&v351 + 16);
          v47 = *(_QWORD *)(*(_QWORD *)&v351 + 24);
        }
        else
        {
          v47 = *(unsigned __int8 *)(*(_QWORD *)&v351 + 39);
        }
        v276 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v276 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if ((_BYTE)v353 && SHIBYTE(object[2]) < 0)
            operator delete(object[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v277 = byte_254A4A4F8;
        else
          v277 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v278 = byte_254A4A4F8[23];
        else
          v278 = *(_QWORD *)&byte_254A4A4F8[8];
        object[0] = os_log_create(v277, v46);
        v279 = &object[1];
        if (v278 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v278 >= 0x17)
        {
          v280 = (v278 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v278 | 7) != 0x17)
            v280 = v278 | 7;
          v281 = v280 + 1;
          v279 = (void **)operator new(v280 + 1);
          object[2] = (void *)v278;
          *(_QWORD *)&v353 = v281 | 0x8000000000000000;
          object[1] = v279;
        }
        else
        {
          BYTE7(v353) = v278;
          if (!v278)
          {
LABEL_422:
            *((_BYTE *)v279 + v278) = 0;
            BYTE8(v353) = 1;
            p_p = &__p;
            if (v47 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v47 >= 0x17)
            {
              v283 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v47 | 7) != 0x17)
                v283 = v47 | 7;
              v284 = v283 + 1;
              p_p = operator new(v283 + 1);
              v355 = v47;
              v356 = v284 | 0x8000000000000000;
              __p = p_p;
            }
            else
            {
              HIBYTE(v356) = v47;
              if (!v47)
                goto LABEL_430;
            }
            memmove(p_p, v46, v47);
LABEL_430:
            *((_BYTE *)p_p + v47) = 0;
            v357 = 1;
            v285 = object[0];
            if (SHIBYTE(v356) < 0)
              operator delete(__p);
            if (BYTE8(v353) && SBYTE7(v353) < 0)
              operator delete(object[1]);
            if (object[0])
              os_release(object[0]);
            if (v43 && *(_QWORD *)(v43 + 24))
            {
              v286 = _os_log_pack_size();
              v287 = (std::__shared_weak_count_vtbl *)operator new(v286, (std::align_val_t)8uLL);
              v288 = (std::__shared_weak_count *)operator new();
              v289 = v288;
              v288->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v288->__shared_owners_;
              v288->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v288->__shared_weak_owners_ = 0;
              v288[1].__vftable = v287;
              object[0] = v287;
              object[1] = v287;
              object[2] = v288;
              do
                v291 = __ldxr(p_shared_owners);
              while (__stxr(v291 + 1, p_shared_owners));
              v353 = 0uLL;
              __p = 0;
              do
                v292 = __ldaxr(p_shared_owners);
              while (__stlxr(v292 - 1, p_shared_owners));
              if (!v292)
              {
                ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                std::__shared_weak_count::__release_weak(v289);
              }
              v293 = object[0];
              *(_WORD *)_os_log_pack_fill() = 0;
              v294 = (char *)operator new();
              v295 = *(unsigned __int8 *)(*(_QWORD *)&v45 + 39);
              v296 = v331;
              if ((v295 & 0x80u) != 0)
              {
                v296 = *(_QWORD *)(*(_QWORD *)&v45 + 16);
                v295 = *(_QWORD *)(*(_QWORD *)&v45 + 24);
              }
              *(_QWORD *)v294 = v293;
              *(_OWORD *)(v294 + 8) = *(_OWORD *)&object[1];
              object[1] = 0;
              object[2] = 0;
              *(_OWORD *)(v294 + 24) = v353;
              v353 = 0uLL;
              *((_QWORD *)v294 + 5) = v296;
              *((_QWORD *)v294 + 6) = v295;
              v294[56] = 2;
              category = 0;
              v335 = v294;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v43 + 24) + 40))(*(_QWORD *)(v43 + 24), &v335);
              v297 = v335;
              v335 = 0;
              if (v297)
              {
                v298 = (std::__shared_weak_count *)*((_QWORD *)v297 + 4);
                if (v298)
                {
                  v299 = (unint64_t *)&v298->__shared_owners_;
                  do
                    v300 = __ldaxr(v299);
                  while (__stlxr(v300 - 1, v299));
                  if (!v300)
                  {
                    ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                    std::__shared_weak_count::__release_weak(v298);
                  }
                }
                v301 = (std::__shared_weak_count *)*((_QWORD *)v297 + 2);
                if (v301)
                {
                  v302 = (unint64_t *)&v301->__shared_owners_;
                  do
                    v303 = __ldaxr(v302);
                  while (__stlxr(v303 - 1, v302));
                  if (!v303)
                  {
                    ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                    std::__shared_weak_count::__release_weak(v301);
                  }
                }
                MEMORY[0x212BC6398](v297, 0x10F0C40B62ED6C6);
                v304 = category;
                category = 0;
                if (v304)
                {
                  v305 = (std::__shared_weak_count *)*((_QWORD *)v304 + 4);
                  if (v305)
                  {
                    v306 = (unint64_t *)&v305->__shared_owners_;
                    do
                      v307 = __ldaxr(v306);
                    while (__stlxr(v307 - 1, v306));
                    if (!v307)
                    {
                      ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                      std::__shared_weak_count::__release_weak(v305);
                    }
                  }
                  v308 = (std::__shared_weak_count *)*((_QWORD *)v304 + 2);
                  if (v308)
                  {
                    v309 = (unint64_t *)&v308->__shared_owners_;
                    do
                      v310 = __ldaxr(v309);
                    while (__stlxr(v310 - 1, v309));
                    if (!v310)
                    {
                      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                      std::__shared_weak_count::__release_weak(v308);
                    }
                  }
                  MEMORY[0x212BC6398](v304, 0x10F0C40B62ED6C6);
                }
              }
              v311 = (std::__shared_weak_count *)*((_QWORD *)&v353 + 1);
              if (*((_QWORD *)&v353 + 1))
              {
                v312 = (unint64_t *)(*((_QWORD *)&v353 + 1) + 8);
                do
                  v313 = __ldaxr(v312);
                while (__stlxr(v313 - 1, v312));
                if (!v313)
                {
                  ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                  std::__shared_weak_count::__release_weak(v311);
                }
              }
              v314 = (std::__shared_weak_count *)object[2];
              if (object[2])
              {
                v315 = (unint64_t *)((char *)object[2] + 8);
                do
                  v316 = __ldaxr(v315);
                while (__stlxr(v316 - 1, v315));
                if (!v316)
                {
                  ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                  std::__shared_weak_count::__release_weak(v314);
                }
              }
            }
            else
            {
              os_log_type_enabled(v285, OS_LOG_TYPE_DEBUG);
              LOWORD(object[0]) = 0;
              v317 = (void *)_os_log_send_and_compose_impl();
              if (v317)
                free(v317);
            }
            if (v41)
            {
              sub_20E8C003C((uint64_t)&v339, "Drop the keyframe because of too few inliers.");
              sub_20E863570((uint64_t)&v339);
            }
            sub_20E863570((uint64_t)&v339);
            v318 = v347;
            if (v347)
            {
              v319 = (unint64_t *)&v347->__shared_owners_;
              do
                v320 = __ldaxr(v319);
              while (__stlxr(v320 - 1, v319));
              if (!v320)
              {
                ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                std::__shared_weak_count::__release_weak(v318);
              }
            }
            return 0;
          }
        }
        memmove(v279, v277, v278);
        goto LABEL_422;
      }
      if (*(_DWORD *)(a1 + 8) <= v10 || (v40 = *(double *)(a1 + 16), v40 >= a5))
      {
        LODWORD(v40) = *(_DWORD *)(a1 + 104);
        if (v10 >= (*(double *)(a1 + 32) * (double)*(unint64_t *)&v40))
          goto LABEL_2;
        LODWORD(v339) = 3;
        rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)a4;
        LODWORD(v341) = 0;
        memset(object, 0, sizeof(object));
        sub_20F053450((unsigned int *)&v339, (double *)object);
        _V1.D[1] = object[1];
        _D3 = object[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v351 = sqrt(_D2 + *(double *)&object[2] * *(double *)&object[2]) * 180.0 / 3.14159265;
        if (v351 <= *(double *)(a1 + 64))
        {
          v9 = a3[1] - *a3;
          goto LABEL_2;
        }
        sub_20F0CD508(&v338);
        if (**(int **)(v338 + 56) <= 2)
        {
          v225 = *(unsigned __int8 *)(v338 + 72);
          v226 = sub_20E8C31DC(v338, "OSLogSurrogateAppender", 1, 0);
          v227 = v226 ? v226 + 16 : 0;
          if (v225 || v226)
          {
            v339 = (double *)&v338;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v341 = std::chrono::system_clock::now().__d_.__rep_;
            v342 = 2;
            v343 = "unknown file";
            v344 = 137;
            v346 = 0;
            v347 = 0;
            v345 = "unknown function";
            v228 = (uint64_t *)(v338 + 16);
            if (*(char *)(v338 + 39) < 0)
            {
              v230 = *(char **)(v338 + 16);
              v229 = *(_QWORD *)(v338 + 24);
            }
            else
            {
              v229 = *(unsigned __int8 *)(v338 + 39);
              v230 = (char *)(v338 + 16);
            }
            category = v230;
            v350 = v229;
            v325 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v325 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)object);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
              if ((_BYTE)v353 && SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v326 = (double *)byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v327 = byte_254A4A4F8;
            }
            else
            {
              v326 = *(double **)&byte_254A4A4F8[8];
              v327 = *(char **)byte_254A4A4F8;
            }
            v335 = v327;
            v336 = v326;
            object[0] = os_log_create(v327, category);
            sub_20E86E5A8(&object[1], (uint64_t)&v335);
            sub_20E86E5A8(&__p, (uint64_t)&category);
            v328 = object[0];
            sub_20E86E44C((uint64_t)object);
            sub_20F0CDA3C(v227, v228, v328, OS_LOG_TYPE_DEBUG, (uint64_t *)&v351);
            if (v225)
            {
              sub_20E8C003C((uint64_t)&v339, "Add a keyframe because of large rotation (%f deg) and small inlier ratio.", v351);
              sub_20E863570((uint64_t)&v339);
            }
            sub_20E863714((uint64_t)&v339);
            LODWORD(v10) = v348;
          }
        }
      }
      else
      {
        sub_20F0CD508(&v351);
        if (**(int **)(*(_QWORD *)&v351 + 56) <= 2)
        {
          v61 = *(unsigned __int8 *)(*(_QWORD *)&v351 + 72);
          v62 = sub_20E8C31DC(*(uint64_t *)&v351, "OSLogSurrogateAppender", 1, 0);
          v63 = v62 ? v62 + 16 : 0;
          if (v61 || v62)
          {
            v339 = &v351;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v341 = std::chrono::system_clock::now().__d_.__rep_;
            v342 = 2;
            v343 = "unknown file";
            v344 = 113;
            v346 = 0;
            v347 = 0;
            v345 = "unknown function";
            v64 = (uint64_t *)(*(_QWORD *)&v351 + 16);
            if (*(char *)(*(_QWORD *)&v351 + 39) < 0)
            {
              v66 = *(char **)(*(_QWORD *)&v351 + 16);
              v65 = *(_QWORD *)(*(_QWORD *)&v351 + 24);
            }
            else
            {
              v65 = *(unsigned __int8 *)(*(_QWORD *)&v351 + 39);
              v66 = (char *)(*(_QWORD *)&v351 + 16);
            }
            category = v66;
            v350 = v65;
            v321 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v321 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)object);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
              if ((_BYTE)v353 && SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v322 = (double *)byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v323 = byte_254A4A4F8;
            }
            else
            {
              v322 = *(double **)&byte_254A4A4F8[8];
              v323 = *(char **)byte_254A4A4F8;
            }
            v335 = v323;
            v336 = v322;
            object[0] = os_log_create(v323, category);
            sub_20E86E5A8(&object[1], (uint64_t)&v335);
            sub_20E86E5A8(&__p, (uint64_t)&category);
            v324 = object[0];
            sub_20E86E44C((uint64_t)object);
            sub_20F0CD5FC(v63, v64, v324, OS_LOG_TYPE_DEBUG, &v348);
            LODWORD(v10) = v348;
            if (v61)
            {
              sub_20E8C003C((uint64_t)&v339, "Add a keyframe because of absolute number of inliers (%d) being too small.", v348);
              sub_20E863570((uint64_t)&v339);
            }
            sub_20E863714((uint64_t)&v339);
          }
        }
      }
      *(_DWORD *)(a1 + 104) = v10;
      return 1;
    }
    sub_20F0CD508(&v351);
    if (**(int **)(*(_QWORD *)&v351 + 56) > 2)
      return 1;
    v54 = *(unsigned __int8 *)(*(_QWORD *)&v351 + 72);
    v55 = sub_20E8C31DC(*(uint64_t *)&v351, "OSLogSurrogateAppender", 1, 0);
    v56 = v55;
    if (!v54 && v55 == 0)
      return 1;
    v339 = &v351;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v341 = std::chrono::system_clock::now().__d_.__rep_;
    v342 = 2;
    v343 = "unknown file";
    v344 = 97;
    v346 = 0;
    v347 = 0;
    v345 = "unknown function";
    v58 = v351;
    v59 = (const char *)(*(_QWORD *)&v351 + 16);
    v332 = *(_QWORD *)&v351 + 16;
    if (*(char *)(*(_QWORD *)&v351 + 39) < 0)
    {
      v59 = *(const char **)(*(_QWORD *)&v351 + 16);
      v60 = *(_QWORD *)(*(_QWORD *)&v351 + 24);
    }
    else
    {
      v60 = *(unsigned __int8 *)(*(_QWORD *)&v351 + 39);
    }
    v231 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v231 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v353 && SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v232 = byte_254A4A4F8;
    else
      v232 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v233 = byte_254A4A4F8[23];
    else
      v233 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v232, v59);
    v234 = &object[1];
    if (v233 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v233 >= 0x17)
    {
      v235 = (v233 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v233 | 7) != 0x17)
        v235 = v233 | 7;
      v236 = v235 + 1;
      v234 = (void **)operator new(v235 + 1);
      object[2] = (void *)v233;
      *(_QWORD *)&v353 = v236 | 0x8000000000000000;
      object[1] = v234;
    }
    else
    {
      BYTE7(v353) = v233;
      if (!v233)
      {
LABEL_339:
        *((_BYTE *)v234 + v233) = 0;
        BYTE8(v353) = 1;
        v237 = &__p;
        if (v60 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v60 >= 0x17)
        {
          v238 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v60 | 7) != 0x17)
            v238 = v60 | 7;
          v239 = v238 + 1;
          v237 = operator new(v238 + 1);
          v355 = v60;
          v356 = v239 | 0x8000000000000000;
          __p = v237;
        }
        else
        {
          HIBYTE(v356) = v60;
          if (!v60)
            goto LABEL_347;
        }
        memmove(v237, v59, v60);
LABEL_347:
        *((_BYTE *)v237 + v60) = 0;
        v357 = 1;
        v240 = object[0];
        if (SHIBYTE(v356) < 0)
          operator delete(__p);
        if (BYTE8(v353) && SBYTE7(v353) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        if (v56 && *(_QWORD *)(v56 + 24))
        {
          v241 = _os_log_pack_size();
          v242 = (std::__shared_weak_count_vtbl *)operator new(v241, (std::align_val_t)8uLL);
          v243 = (std::__shared_weak_count *)operator new();
          v244 = v243;
          v243->__shared_owners_ = 0;
          v245 = (unint64_t *)&v243->__shared_owners_;
          v243->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v243->__shared_weak_owners_ = 0;
          v243[1].__vftable = v242;
          object[0] = v242;
          object[1] = v242;
          object[2] = v243;
          do
            v246 = __ldxr(v245);
          while (__stxr(v246 + 1, v245));
          v353 = 0uLL;
          __p = 0;
          do
            v247 = __ldaxr(v245);
          while (__stlxr(v247 - 1, v245));
          if (!v247)
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v244);
          }
          v248 = object[0];
          *(_WORD *)_os_log_pack_fill() = 0;
          v249 = (char *)operator new();
          v250 = *(unsigned __int8 *)(*(_QWORD *)&v58 + 39);
          v251 = v332;
          if ((v250 & 0x80u) != 0)
          {
            v251 = *(_QWORD *)(*(_QWORD *)&v58 + 16);
            v250 = *(_QWORD *)(*(_QWORD *)&v58 + 24);
          }
          *(_QWORD *)v249 = v248;
          *(_OWORD *)(v249 + 8) = *(_OWORD *)&object[1];
          object[1] = 0;
          object[2] = 0;
          *(_OWORD *)(v249 + 24) = v353;
          v353 = 0uLL;
          *((_QWORD *)v249 + 5) = v251;
          *((_QWORD *)v249 + 6) = v250;
          v249[56] = 2;
          category = 0;
          v335 = v249;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v56 + 24) + 40))(*(_QWORD *)(v56 + 24), &v335);
          v252 = v335;
          v335 = 0;
          if (v252)
          {
            v253 = (std::__shared_weak_count *)*((_QWORD *)v252 + 4);
            if (v253)
            {
              v254 = (unint64_t *)&v253->__shared_owners_;
              do
                v255 = __ldaxr(v254);
              while (__stlxr(v255 - 1, v254));
              if (!v255)
              {
                ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                std::__shared_weak_count::__release_weak(v253);
              }
            }
            v256 = (std::__shared_weak_count *)*((_QWORD *)v252 + 2);
            if (v256)
            {
              v257 = (unint64_t *)&v256->__shared_owners_;
              do
                v258 = __ldaxr(v257);
              while (__stlxr(v258 - 1, v257));
              if (!v258)
              {
                ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                std::__shared_weak_count::__release_weak(v256);
              }
            }
            MEMORY[0x212BC6398](v252, 0x10F0C40B62ED6C6);
            v259 = category;
            category = 0;
            if (v259)
            {
              v260 = (std::__shared_weak_count *)*((_QWORD *)v259 + 4);
              if (v260)
              {
                v261 = (unint64_t *)&v260->__shared_owners_;
                do
                  v262 = __ldaxr(v261);
                while (__stlxr(v262 - 1, v261));
                if (!v262)
                {
                  ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                  std::__shared_weak_count::__release_weak(v260);
                }
              }
              v263 = (std::__shared_weak_count *)*((_QWORD *)v259 + 2);
              if (v263)
              {
                v264 = (unint64_t *)&v263->__shared_owners_;
                do
                  v265 = __ldaxr(v264);
                while (__stlxr(v265 - 1, v264));
                if (!v265)
                {
                  ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                  std::__shared_weak_count::__release_weak(v263);
                }
              }
              MEMORY[0x212BC6398](v259, 0x10F0C40B62ED6C6);
            }
          }
          v266 = (std::__shared_weak_count *)*((_QWORD *)&v353 + 1);
          if (*((_QWORD *)&v353 + 1))
          {
            v267 = (unint64_t *)(*((_QWORD *)&v353 + 1) + 8);
            do
              v268 = __ldaxr(v267);
            while (__stlxr(v268 - 1, v267));
            if (!v268)
            {
              ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
              std::__shared_weak_count::__release_weak(v266);
            }
          }
          v269 = (std::__shared_weak_count *)object[2];
          if (object[2])
          {
            v270 = (unint64_t *)((char *)object[2] + 8);
            do
              v271 = __ldaxr(v270);
            while (__stlxr(v271 - 1, v270));
            if (!v271)
            {
              ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
              std::__shared_weak_count::__release_weak(v269);
            }
          }
        }
        else
        {
          os_log_type_enabled(v240, OS_LOG_TYPE_DEBUG);
          LOWORD(object[0]) = 0;
          v272 = (void *)_os_log_send_and_compose_impl();
          if (v272)
            free(v272);
        }
        if (v54)
        {
          sub_20E8C003C((uint64_t)&v339, "Add a keyframe because it has been too long since last keyframe.");
          sub_20E863570((uint64_t)&v339);
        }
        sub_20E863570((uint64_t)&v339);
        v273 = v347;
        if (v347)
        {
          v274 = (unint64_t *)&v347->__shared_owners_;
          do
            v275 = __ldaxr(v274);
          while (__stlxr(v275 - 1, v274));
          if (!v275)
          {
            ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
            std::__shared_weak_count::__release_weak(v273);
          }
        }
        return 1;
      }
    }
    memmove(v234, v232, v233);
    goto LABEL_339;
  }
LABEL_2:
  v11 = 0;
  v335 = 0;
  v336 = 0;
  v337 = 0;
  if (v9 >= 0x10)
  {
    v12 = (unint64_t)((uint64_t)v9 >> 3) >> 1;
    sub_20E93D8FC((uint64_t)&v335, v12);
    v13 = 0;
    v11 = (double *)v335;
    v14 = *a3;
    if (v12 <= 1)
      v15 = 1;
    else
      v15 = v12;
    v16 = (double *)(*a2 + 8);
    do
    {
      v17 = *(v16 - 1);
      v18 = a4[8] + a4[6] * v17 + a4[7] * *v16;
      v19 = a4[2] + v17 * *a4 + *v16 * a4[1];
      v20 = v17 * a4[3];
      _ZF = v18 == 0.0;
      v21 = 1.0 / v18;
      if (_ZF)
        v21 = 1.0;
      _Q3.f64[0] = v21 * v19;
      _Q3.f64[1] = v21 * (a4[5] + v20 + *v16 * a4[4]);
      _Q3.f64[0] = vsubq_f64(*(float64x2_t *)(v14 + 16 * v13), _Q3).f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      v11[v13++] = _D2;
      v16 += 2;
    }
    while (v15 != v13);
  }
  if (v11 == v336)
  {
    sub_20F0CD508(&v338);
    if (**(int **)(v338 + 56) > 2)
      goto LABEL_228;
    v48 = *(unsigned __int8 *)(v338 + 72);
    v49 = sub_20E8C31DC(v338, "OSLogSurrogateAppender", 1, 0);
    v50 = v49;
    if (!v48 && !v49)
      goto LABEL_228;
    v339 = (double *)&v338;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v341 = std::chrono::system_clock::now().__d_.__rep_;
    v342 = 2;
    v343 = "unknown file";
    v344 = 153;
    v346 = 0;
    v347 = 0;
    v345 = "unknown function";
    v51 = *(_QWORD *)v339;
    if (*(char *)(*(_QWORD *)v339 + 39) < 0)
    {
      v53 = *(const char **)(v51 + 16);
      v52 = *(_QWORD *)(v51 + 24);
    }
    else
    {
      v52 = *(unsigned __int8 *)(*(_QWORD *)v339 + 39);
      v53 = (const char *)(*(_QWORD *)v339 + 16);
    }
    v334 = *(_QWORD *)v339 + 16;
    v129 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v129 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v353 && SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v130 = byte_254A4A4F8;
    else
      v130 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v131 = byte_254A4A4F8[23];
    else
      v131 = *(_QWORD *)&byte_254A4A4F8[8];
    object[0] = os_log_create(v130, v53);
    v132 = &object[1];
    if (v131 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v131 >= 0x17)
    {
      v133 = v50;
      v134 = v53;
      v135 = v51;
      v136 = v48;
      v137 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v131 | 7) != 0x17)
        v137 = v131 | 7;
      v138 = v137 + 1;
      v132 = (void **)operator new(v137 + 1);
      object[2] = (void *)v131;
      *(_QWORD *)&v353 = v138 | 0x8000000000000000;
      object[1] = v132;
      v48 = v136;
      v51 = v135;
      v53 = v134;
      v50 = v133;
    }
    else
    {
      BYTE7(v353) = v131;
      if (!v131)
      {
LABEL_161:
        *((_BYTE *)v132 + v131) = 0;
        BYTE8(v353) = 1;
        v139 = &__p;
        if (v52 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v52 >= 0x17)
        {
          v140 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v52 | 7) != 0x17)
            v140 = v52 | 7;
          v141 = v140 + 1;
          v139 = operator new(v140 + 1);
          v355 = v52;
          v356 = v141 | 0x8000000000000000;
          __p = v139;
        }
        else
        {
          HIBYTE(v356) = v52;
          if (!v52)
            goto LABEL_169;
        }
        memmove(v139, v53, v52);
LABEL_169:
        *((_BYTE *)v139 + v52) = 0;
        v357 = 1;
        v142 = object[0];
        if (SHIBYTE(v356) < 0)
          operator delete(__p);
        if (BYTE8(v353) && SBYTE7(v353) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        if (v50 && *(_QWORD *)(v50 + 24))
        {
          v143 = _os_log_pack_size();
          v144 = (std::__shared_weak_count_vtbl *)operator new(v143, (std::align_val_t)8uLL);
          v145 = (std::__shared_weak_count *)operator new();
          v146 = v145;
          v145->__shared_owners_ = 0;
          v147 = (unint64_t *)&v145->__shared_owners_;
          v145->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v145->__shared_weak_owners_ = 0;
          v145[1].__vftable = v144;
          object[0] = v144;
          object[1] = v144;
          object[2] = v145;
          do
            v148 = __ldxr(v147);
          while (__stxr(v148 + 1, v147));
          v353 = 0uLL;
          __p = 0;
          do
            v149 = __ldaxr(v147);
          while (__stlxr(v149 - 1, v147));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v146);
          }
          v150 = object[0];
          *(_WORD *)_os_log_pack_fill() = 0;
          v151 = operator new();
          v152 = *(unsigned __int8 *)(v51 + 39);
          v153 = v334;
          if ((v152 & 0x80u) != 0)
          {
            v153 = *(_QWORD *)(v51 + 16);
            v152 = *(_QWORD *)(v51 + 24);
          }
          *(_QWORD *)v151 = v150;
          *(_OWORD *)(v151 + 8) = *(_OWORD *)&object[1];
          object[1] = 0;
          object[2] = 0;
          *(_OWORD *)(v151 + 24) = v353;
          v353 = 0uLL;
          *(_QWORD *)(v151 + 40) = v153;
          *(_QWORD *)(v151 + 48) = v152;
          *(_BYTE *)(v151 + 56) = 2;
          v351 = 0.0;
          category = (char *)v151;
          (*(void (**)(_QWORD, char **))(**(_QWORD **)(v50 + 24) + 40))(*(_QWORD *)(v50 + 24), &category);
          v154 = category;
          category = 0;
          if (v154)
          {
            v155 = (std::__shared_weak_count *)*((_QWORD *)v154 + 4);
            if (v155)
            {
              v156 = (unint64_t *)&v155->__shared_owners_;
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                std::__shared_weak_count::__release_weak(v155);
              }
            }
            v158 = (std::__shared_weak_count *)*((_QWORD *)v154 + 2);
            if (v158)
            {
              v159 = (unint64_t *)&v158->__shared_owners_;
              do
                v160 = __ldaxr(v159);
              while (__stlxr(v160 - 1, v159));
              if (!v160)
              {
                ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                std::__shared_weak_count::__release_weak(v158);
              }
            }
            MEMORY[0x212BC6398](v154, 0x10F0C40B62ED6C6);
            v161 = v351;
            v351 = 0.0;
            if (v161 != 0.0)
            {
              v162 = *(std::__shared_weak_count **)(*(_QWORD *)&v161 + 32);
              if (v162)
              {
                v163 = (unint64_t *)&v162->__shared_owners_;
                do
                  v164 = __ldaxr(v163);
                while (__stlxr(v164 - 1, v163));
                if (!v164)
                {
                  ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                  std::__shared_weak_count::__release_weak(v162);
                }
              }
              v165 = *(std::__shared_weak_count **)(*(_QWORD *)&v161 + 16);
              if (v165)
              {
                v166 = (unint64_t *)&v165->__shared_owners_;
                do
                  v167 = __ldaxr(v166);
                while (__stlxr(v167 - 1, v166));
                if (!v167)
                {
                  ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                  std::__shared_weak_count::__release_weak(v165);
                }
              }
              MEMORY[0x212BC6398](*(_QWORD *)&v161, 0x10F0C40B62ED6C6);
            }
          }
          v168 = (std::__shared_weak_count *)*((_QWORD *)&v353 + 1);
          if (*((_QWORD *)&v353 + 1))
          {
            v169 = (unint64_t *)(*((_QWORD *)&v353 + 1) + 8);
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
          v171 = (std::__shared_weak_count *)object[2];
          if (object[2])
          {
            v172 = (unint64_t *)((char *)object[2] + 8);
            do
              v173 = __ldaxr(v172);
            while (__stlxr(v173 - 1, v172));
            if (!v173)
            {
              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
              std::__shared_weak_count::__release_weak(v171);
            }
          }
        }
        else
        {
          os_log_type_enabled(v142, OS_LOG_TYPE_DEBUG);
          LOWORD(object[0]) = 0;
          v174 = (void *)_os_log_send_and_compose_impl();
          if (v174)
            free(v174);
        }
        if (v48)
        {
          sub_20E8C003C((uint64_t)&v339, "Add a keyframe because of empty parallax.");
          sub_20E863570((uint64_t)&v339);
        }
        sub_20E863570((uint64_t)&v339);
        v175 = v347;
        if (v347)
        {
          v176 = (unint64_t *)&v347->__shared_owners_;
          do
            v177 = __ldaxr(v176);
          while (__stlxr(v177 - 1, v176));
          if (!v177)
          {
            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
            std::__shared_weak_count::__release_weak(v175);
          }
        }
LABEL_228:
        v127 = *(_BYTE *)(a1 + 1) == 0;
        v128 = (double *)v335;
        if (!v335)
          return v127;
        goto LABEL_314;
      }
    }
    memmove(v132, v130, v131);
    goto LABEL_161;
  }
  v27 = v336 - v11;
  v28 = vcvtmd_s64_f64(*(double *)(a1 + 48) * (double)(unint64_t)v27);
  v29 = v27 - 1;
  if (v29 >= v28)
    v29 = v28;
  v30 = &v11[v29];
  if (v30 != v336)
    sub_20EDE2884(v11, &v11[v29], v336);
  v31 = *v30;
  v32 = *(double *)(a1 + 56);
  sub_20F0CD508(&v338);
  if (**(int **)(v338 + 56) <= 2)
  {
    v33 = *(unsigned __int8 *)(v338 + 72);
    v34 = sub_20E8C31DC(v338, "OSLogSurrogateAppender", 1, 0);
    v35 = v34;
    if (v33 || v34)
    {
      v339 = (double *)&v338;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v341 = std::chrono::system_clock::now().__d_.__rep_;
      v342 = 2;
      v343 = "unknown file";
      v344 = 167;
      v346 = 0;
      v347 = 0;
      v345 = "unknown function";
      v36 = *(_QWORD *)v339;
      if (*(char *)(*(_QWORD *)v339 + 39) < 0)
      {
        v38 = *(const char **)(v36 + 16);
        v37 = *(_QWORD *)(v36 + 24);
        v330 = *(_QWORD *)v339 + 16;
        v70 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v70 & 1) != 0)
          goto LABEL_56;
      }
      else
      {
        v37 = *(unsigned __int8 *)(*(_QWORD *)v339 + 39);
        v38 = (const char *)(*(_QWORD *)v339 + 16);
        v330 = (uint64_t)v38;
        v39 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v39 & 1) != 0)
          goto LABEL_56;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v353 && SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_56:
      if (byte_254A4A4F8[23] >= 0)
        v71 = byte_254A4A4F8;
      else
        v71 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v72 = byte_254A4A4F8[23];
      else
        v72 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v71, v38);
      v73 = &object[1];
      if (v72 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v72 >= 0x17)
      {
        v74 = v35;
        v75 = v38;
        v76 = v36;
        v77 = v33;
        v78 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v72 | 7) != 0x17)
          v78 = v72 | 7;
        v79 = v78 + 1;
        v73 = (void **)operator new(v78 + 1);
        object[2] = (void *)v72;
        *(_QWORD *)&v353 = v79 | 0x8000000000000000;
        object[1] = v73;
        v33 = v77;
        v36 = v76;
        v38 = v75;
        v35 = v74;
      }
      else
      {
        BYTE7(v353) = v72;
        if (!v72)
        {
LABEL_70:
          *((_BYTE *)v73 + v72) = 0;
          BYTE8(v353) = 1;
          v80 = &__p;
          if (v37 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v37 >= 0x17)
          {
            v81 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v37 | 7) != 0x17)
              v81 = v37 | 7;
            v82 = v81 + 1;
            v80 = operator new(v81 + 1);
            v355 = v37;
            v356 = v82 | 0x8000000000000000;
            __p = v80;
          }
          else
          {
            HIBYTE(v356) = v37;
            if (!v37)
              goto LABEL_78;
          }
          memmove(v80, v38, v37);
LABEL_78:
          *((_BYTE *)v80 + v37) = 0;
          v357 = 1;
          v83 = object[0];
          if (SHIBYTE(v356) < 0)
            operator delete(__p);
          if (BYTE8(v353) && SBYTE7(v353) < 0)
            operator delete(object[1]);
          if (object[0])
            os_release(object[0]);
          v84 = sqrt(v31);
          if (v35 && *(_QWORD *)(v35 + 24))
          {
            v85 = _os_log_pack_size();
            v86 = (std::__shared_weak_count_vtbl *)operator new(v85, (std::align_val_t)8uLL);
            v87 = (std::__shared_weak_count *)operator new();
            v88 = v87;
            v87->__shared_owners_ = 0;
            v89 = (unint64_t *)&v87->__shared_owners_;
            v87->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v87->__shared_weak_owners_ = 0;
            v87[1].__vftable = v86;
            object[0] = v86;
            object[1] = v86;
            object[2] = v87;
            do
              v90 = __ldxr(v89);
            while (__stxr(v90 + 1, v89));
            v353 = 0uLL;
            __p = 0;
            do
              v91 = __ldaxr(v89);
            while (__stlxr(v91 - 1, v89));
            if (!v91)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v88);
            }
            v92 = object[0];
            v93 = _os_log_pack_fill();
            *(_DWORD *)v93 = 134217984;
            *(double *)(v93 + 4) = v84;
            v94 = operator new();
            v95 = *(unsigned __int8 *)(v36 + 39);
            v96 = v330;
            if ((v95 & 0x80u) != 0)
            {
              v96 = *(_QWORD *)(v36 + 16);
              v95 = *(_QWORD *)(v36 + 24);
            }
            *(_QWORD *)v94 = v92;
            *(_OWORD *)(v94 + 8) = *(_OWORD *)&object[1];
            object[1] = 0;
            object[2] = 0;
            *(_OWORD *)(v94 + 24) = v353;
            v353 = 0uLL;
            *(_QWORD *)(v94 + 40) = v96;
            *(_QWORD *)(v94 + 48) = v95;
            *(_BYTE *)(v94 + 56) = 2;
            v351 = 0.0;
            category = (char *)v94;
            (*(void (**)(_QWORD, char **))(**(_QWORD **)(v35 + 24) + 40))(*(_QWORD *)(v35 + 24), &category);
            v97 = category;
            category = 0;
            if (v97)
            {
              v98 = (std::__shared_weak_count *)*((_QWORD *)v97 + 4);
              if (v98)
              {
                v99 = (unint64_t *)&v98->__shared_owners_;
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                }
              }
              v101 = (std::__shared_weak_count *)*((_QWORD *)v97 + 2);
              if (v101)
              {
                v102 = (unint64_t *)&v101->__shared_owners_;
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              MEMORY[0x212BC6398](v97, 0x10F0C40B62ED6C6);
              v104 = v351;
              v351 = 0.0;
              if (v104 != 0.0)
              {
                v105 = *(std::__shared_weak_count **)(*(_QWORD *)&v104 + 32);
                if (v105)
                {
                  v106 = (unint64_t *)&v105->__shared_owners_;
                  do
                    v107 = __ldaxr(v106);
                  while (__stlxr(v107 - 1, v106));
                  if (!v107)
                  {
                    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                    std::__shared_weak_count::__release_weak(v105);
                  }
                }
                v108 = *(std::__shared_weak_count **)(*(_QWORD *)&v104 + 16);
                if (v108)
                {
                  v109 = (unint64_t *)&v108->__shared_owners_;
                  do
                    v110 = __ldaxr(v109);
                  while (__stlxr(v110 - 1, v109));
                  if (!v110)
                  {
                    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                    std::__shared_weak_count::__release_weak(v108);
                  }
                }
                MEMORY[0x212BC6398](*(_QWORD *)&v104, 0x10F0C40B62ED6C6);
              }
            }
            v111 = (std::__shared_weak_count *)*((_QWORD *)&v353 + 1);
            if (*((_QWORD *)&v353 + 1))
            {
              v112 = (unint64_t *)(*((_QWORD *)&v353 + 1) + 8);
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            v114 = (std::__shared_weak_count *)object[2];
            if (object[2])
            {
              v115 = (unint64_t *)((char *)object[2] + 8);
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 - 1, v115));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
            }
          }
          else
          {
            os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG);
            LODWORD(object[0]) = 134217984;
            *(void **)((char *)object + 4) = *(void **)&v84;
            v117 = (void *)_os_log_send_and_compose_impl();
            if (v117)
              free(v117);
          }
          if (v33)
          {
            sub_20E8C003C((uint64_t)&v339, "N-th percentile parallax: %f.", v84);
            sub_20E863570((uint64_t)&v339);
          }
          sub_20E863570((uint64_t)&v339);
          v118 = v347;
          if (v347)
          {
            v119 = (unint64_t *)&v347->__shared_owners_;
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
            }
          }
          goto LABEL_137;
        }
      }
      memmove(v73, v71, v72);
      goto LABEL_70;
    }
  }
LABEL_137:
  if (v31 <= v32)
  {
    v127 = 0;
    v128 = (double *)v335;
    if (!v335)
      return v127;
    goto LABEL_314;
  }
  *(_DWORD *)(a1 + 104) = v348;
  sub_20F0CD508(&v338);
  if (**(int **)(v338 + 56) <= 2)
  {
    v121 = *(unsigned __int8 *)(v338 + 72);
    v122 = sub_20E8C31DC(v338, "OSLogSurrogateAppender", 1, 0);
    v123 = v122;
    if (v121 || v122)
    {
      v339 = (double *)&v338;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v341 = std::chrono::system_clock::now().__d_.__rep_;
      v342 = 2;
      v343 = "unknown file";
      v344 = 173;
      v346 = 0;
      v347 = 0;
      v345 = "unknown function";
      v124 = *(_QWORD *)v339;
      v125 = (const char *)(*(_QWORD *)v339 + 16);
      v333 = v125;
      if (*(char *)(*(_QWORD *)v339 + 39) < 0)
      {
        v125 = *(const char **)(v124 + 16);
        v126 = *(_QWORD *)(v124 + 24);
      }
      else
      {
        v126 = *(unsigned __int8 *)(*(_QWORD *)v339 + 39);
      }
      v178 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v178 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v353 && SHIBYTE(object[2]) < 0)
          operator delete(object[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v179 = byte_254A4A4F8;
      else
        v179 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v180 = byte_254A4A4F8[23];
      else
        v180 = *(_QWORD *)&byte_254A4A4F8[8];
      object[0] = os_log_create(v179, v125);
      v181 = &object[1];
      if (v180 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v180 >= 0x17)
      {
        v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v180 | 7) != 0x17)
          v182 = v180 | 7;
        v183 = v182 + 1;
        v181 = (void **)operator new(v182 + 1);
        object[2] = (void *)v180;
        *(_QWORD *)&v353 = v183 | 0x8000000000000000;
        object[1] = v181;
      }
      else
      {
        BYTE7(v353) = v180;
        if (!v180)
        {
LABEL_246:
          *((_BYTE *)v181 + v180) = 0;
          BYTE8(v353) = 1;
          v184 = &__p;
          if (v126 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v126 >= 0x17)
          {
            v185 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v126 | 7) != 0x17)
              v185 = v126 | 7;
            v186 = v185 + 1;
            v184 = operator new(v185 + 1);
            v355 = v126;
            v356 = v186 | 0x8000000000000000;
            __p = v184;
          }
          else
          {
            HIBYTE(v356) = v126;
            if (!v126)
              goto LABEL_254;
          }
          memmove(v184, v125, v126);
LABEL_254:
          *((_BYTE *)v184 + v126) = 0;
          v357 = 1;
          v187 = object[0];
          if (SHIBYTE(v356) < 0)
            operator delete(__p);
          if (BYTE8(v353) && SBYTE7(v353) < 0)
            operator delete(object[1]);
          if (object[0])
            os_release(object[0]);
          v188 = sqrt(v31);
          if (v123 && *(_QWORD *)(v123 + 24))
          {
            v189 = _os_log_pack_size();
            v190 = (std::__shared_weak_count_vtbl *)operator new(v189, (std::align_val_t)8uLL);
            v191 = (std::__shared_weak_count *)operator new();
            v192 = v191;
            v191->__shared_owners_ = 0;
            v193 = (unint64_t *)&v191->__shared_owners_;
            v191->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v191->__shared_weak_owners_ = 0;
            v191[1].__vftable = v190;
            object[0] = v190;
            object[1] = v190;
            object[2] = v191;
            do
              v194 = __ldxr(v193);
            while (__stxr(v194 + 1, v193));
            v353 = 0uLL;
            __p = 0;
            do
              v195 = __ldaxr(v193);
            while (__stlxr(v195 - 1, v193));
            if (!v195)
            {
              ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
              std::__shared_weak_count::__release_weak(v192);
            }
            v196 = object[0];
            v197 = _os_log_pack_fill();
            *(_DWORD *)v197 = 134217984;
            *(double *)(v197 + 4) = v188;
            v198 = operator new();
            v199 = *(unsigned __int8 *)(v124 + 39);
            v200 = v333;
            if ((v199 & 0x80u) != 0)
            {
              v200 = *(const char **)(v124 + 16);
              v199 = *(_QWORD *)(v124 + 24);
            }
            *(_QWORD *)v198 = v196;
            *(_OWORD *)(v198 + 8) = *(_OWORD *)&object[1];
            object[1] = 0;
            object[2] = 0;
            *(_OWORD *)(v198 + 24) = v353;
            v353 = 0uLL;
            *(_QWORD *)(v198 + 40) = v200;
            *(_QWORD *)(v198 + 48) = v199;
            *(_BYTE *)(v198 + 56) = 2;
            v351 = 0.0;
            category = (char *)v198;
            (*(void (**)(_QWORD, char **))(**(_QWORD **)(v123 + 24) + 40))(*(_QWORD *)(v123 + 24), &category);
            v201 = category;
            category = 0;
            if (v201)
            {
              v202 = (std::__shared_weak_count *)*((_QWORD *)v201 + 4);
              if (v202)
              {
                v203 = (unint64_t *)&v202->__shared_owners_;
                do
                  v204 = __ldaxr(v203);
                while (__stlxr(v204 - 1, v203));
                if (!v204)
                {
                  ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                  std::__shared_weak_count::__release_weak(v202);
                }
              }
              v205 = (std::__shared_weak_count *)*((_QWORD *)v201 + 2);
              if (v205)
              {
                v206 = (unint64_t *)&v205->__shared_owners_;
                do
                  v207 = __ldaxr(v206);
                while (__stlxr(v207 - 1, v206));
                if (!v207)
                {
                  ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                  std::__shared_weak_count::__release_weak(v205);
                }
              }
              MEMORY[0x212BC6398](v201, 0x10F0C40B62ED6C6);
              v208 = v351;
              v351 = 0.0;
              if (v208 != 0.0)
              {
                v209 = *(std::__shared_weak_count **)(*(_QWORD *)&v208 + 32);
                if (v209)
                {
                  v210 = (unint64_t *)&v209->__shared_owners_;
                  do
                    v211 = __ldaxr(v210);
                  while (__stlxr(v211 - 1, v210));
                  if (!v211)
                  {
                    ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                    std::__shared_weak_count::__release_weak(v209);
                  }
                }
                v212 = *(std::__shared_weak_count **)(*(_QWORD *)&v208 + 16);
                if (v212)
                {
                  v213 = (unint64_t *)&v212->__shared_owners_;
                  do
                    v214 = __ldaxr(v213);
                  while (__stlxr(v214 - 1, v213));
                  if (!v214)
                  {
                    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                    std::__shared_weak_count::__release_weak(v212);
                  }
                }
                MEMORY[0x212BC6398](*(_QWORD *)&v208, 0x10F0C40B62ED6C6);
              }
            }
            v215 = (std::__shared_weak_count *)*((_QWORD *)&v353 + 1);
            if (*((_QWORD *)&v353 + 1))
            {
              v216 = (unint64_t *)(*((_QWORD *)&v353 + 1) + 8);
              do
                v217 = __ldaxr(v216);
              while (__stlxr(v217 - 1, v216));
              if (!v217)
              {
                ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                std::__shared_weak_count::__release_weak(v215);
              }
            }
            v218 = (std::__shared_weak_count *)object[2];
            if (object[2])
            {
              v219 = (unint64_t *)((char *)object[2] + 8);
              do
                v220 = __ldaxr(v219);
              while (__stlxr(v220 - 1, v219));
              if (!v220)
              {
                ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                std::__shared_weak_count::__release_weak(v218);
              }
            }
          }
          else
          {
            os_log_type_enabled(v187, OS_LOG_TYPE_DEBUG);
            LODWORD(object[0]) = 134217984;
            *(void **)((char *)object + 4) = *(void **)&v188;
            v221 = (void *)_os_log_send_and_compose_impl();
            if (v221)
              free(v221);
          }
          if (v121)
          {
            sub_20E8C003C((uint64_t)&v339, "Add a keyframe because of large parallax: %f.", v188);
            sub_20E863570((uint64_t)&v339);
          }
          sub_20E863570((uint64_t)&v339);
          v222 = v347;
          if (v347)
          {
            v223 = (unint64_t *)&v347->__shared_owners_;
            do
              v224 = __ldaxr(v223);
            while (__stlxr(v224 - 1, v223));
            if (!v224)
            {
              ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
              std::__shared_weak_count::__release_weak(v222);
            }
          }
          goto LABEL_313;
        }
      }
      memmove(v181, v179, v180);
      goto LABEL_246;
    }
  }
LABEL_313:
  v127 = 1;
  v128 = (double *)v335;
  if (v335)
  {
LABEL_314:
    v336 = v128;
    operator delete(v128);
  }
  return v127;
}

