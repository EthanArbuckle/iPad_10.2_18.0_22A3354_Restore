void sub_20EFF94A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;
  uint64_t v28;

  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  sub_20E86665C((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  sub_20EFF97C8(a12);
  sub_20EFFB150(v28);
  sub_20EFF9828(v27);
  _Unwind_Resume(a1);
}

void sub_20EFF9730(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 24) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFF9748(uint64_t a1)
{
  sub_20EFFA30C(a1 + 112);
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 64));
    if (!*(_BYTE *)(a1 + 56))
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    goto LABEL_6;
LABEL_3:
  if (!*(_BYTE *)(a1 + 56))
    return a1;
LABEL_7:
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 32));
  return a1;
}

uint64_t sub_20EFF97C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 640))
  {
    v2 = *(_QWORD *)(a1 + 632);
    *(_QWORD *)(a1 + 632) = 0;
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      v3 = *(_QWORD *)(a1 + 632);
      *(_QWORD *)(a1 + 632) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    sub_20EFFAFE4(a1);
  }
  return a1;
}

_QWORD *sub_20EFF9828(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_20EFF986C(uint64_t a1)
{
  char *v2;
  char *v3;

  *(_OWORD *)a1 = xmmword_210398D50;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v2 = (char *)operator new(0xC800uLL);
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v2 + 51200;
  v3 = (char *)operator new(0x12C0uLL);
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v3 + 4800;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 1016) = 0;
  return a1;
}

void sub_20EFF98EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 24) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFF9904(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 1016))
  {
    v2 = *(_QWORD *)(a1 + 1008);
    *(_QWORD *)(a1 + 1008) = 0;
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      v3 = *(_QWORD *)(a1 + 1008);
      *(_QWORD *)(a1 + 1008) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    sub_20EFFAFE4(a1 + 376);
  }
  sub_20EFFB150(a1 + 64);
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a1 + 48) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 16);
  if (v5)
  {
    *(_QWORD *)(a1 + 24) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_20EFF9990(uint64_t a1, uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = (_QWORD *)(a1 + 16);
  v4 = *(void **)(a1 + 16);
  v6 = (_QWORD *)(a2 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    operator delete(v4);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    *(_QWORD *)(a1 + 48) = v7;
    operator delete(v7);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  sub_20EFFB208(a1 + 64, a2 + 64);
  sub_20EFFB44C(a1 + 376, a2 + 376);
  return a1;
}

void sub_20EFF9A50(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)a2[15];
  if (v3)
  {
    a2[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[8];
  if (v4)
  {
    a2[9] = v4;
    operator delete(v4);
  }
  v5 = (void *)a2[1];
  if (v5)
  {
    a2[2] = v5;
    operator delete(v5);
  }
}

void sub_20EFF9AA4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = *(std::__shared_weak_count **)(a2 + 136);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *(std::__shared_weak_count **)(a2 + 112);
    if (!v6)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v6 = *(std::__shared_weak_count **)(a2 + 112);
    if (!v6)
      goto LABEL_11;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_11:
  v9 = *(std::__shared_weak_count **)(a2 + 88);
  if (!v9)
    goto LABEL_15;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if ((*(char *)(a2 + 71) & 0x80000000) == 0)
    {
LABEL_16:
      if ((*(char *)(a2 + 47) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_21;
    }
  }
  else
  {
LABEL_15:
    if ((*(char *)(a2 + 71) & 0x80000000) == 0)
      goto LABEL_16;
  }
  operator delete(*(void **)(a2 + 48));
  if ((*(char *)(a2 + 47) & 0x80000000) == 0)
  {
LABEL_17:
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      return;
LABEL_22:
    operator delete(*(void **)a2);
    return;
  }
LABEL_21:
  operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    goto LABEL_22;
}

void sub_20EFF9BC4(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  __int128 v7;
  char *v8;
  char *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  double *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;

  v2 = **a1;
  v3 = *v2;
  v4 = v2[1];
  if (*v2 != v4)
  {
    v6 = *(_QWORD *)(a2 + 104);
    v7 = 0uLL;
    v8 = *(char **)(a2 + 64);
    v9 = *(char **)(a2 + 72);
    do
    {
      v10 = *(double *)v3;
      v11 = (v9 - v8) >> 5;
      if (v6 == v11)
      {
        if (!v6)
        {
          v20 = *(_QWORD *)(a2 + 96);
          v21 = *(double *)v3;
          goto LABEL_26;
        }
        if ((2 * v6) >> 59)
          sub_20E867F44();
        v12 = v6 << 6;
        v13 = (char *)operator new(v6 << 6);
        bzero(v13, v6 << 6);
        if (v6 >= 2 * v6)
          v14 = 2 * v6;
        else
          v14 = v6;
        v15 = *(_QWORD *)(a2 + 88);
        if ((v6 & 0x8000000000000000) != 0)
        {
          v22 = v14;
          v23 = v13;
          do
          {
            v24 = &v8[32 * (v15 % v6)];
            *(_OWORD *)v23 = *(_OWORD *)v24;
            v25 = *((_QWORD *)v24 + 2);
            *((_DWORD *)v23 + 6) = *((_DWORD *)v24 + 6);
            *((_QWORD *)v23 + 2) = v25;
            *((_DWORD *)v23 + 7) = *((_DWORD *)v24 + 7);
            ++v15;
            v23 += 32;
            --v22;
          }
          while (v22);
        }
        else
        {
          v16 = v6;
          v17 = v13;
          do
          {
            v18 = &v8[32 * (v15 % v6)];
            *(_OWORD *)v17 = *(_OWORD *)v18;
            v19 = *((_QWORD *)v18 + 2);
            *((_DWORD *)v17 + 6) = *((_DWORD *)v18 + 6);
            *((_QWORD *)v17 + 2) = v19;
            *((_DWORD *)v17 + 7) = *((_DWORD *)v18 + 7);
            ++v15;
            v17 += 32;
            --v16;
          }
          while (v16);
        }
        v9 = &v13[v12];
        *(_QWORD *)(a2 + 72) = v8;
        operator delete(v8);
        *(_QWORD *)(a2 + 64) = v13;
        *(_QWORD *)(a2 + 72) = &v13[v12];
        *(_QWORD *)(a2 + 80) = &v13[64 * v6];
        *(_QWORD *)(a2 + 88) = 0;
        v26 = v12 >> 5;
        v20 = v14 % (v12 >> 5);
        *(_QWORD *)(a2 + 96) = v20;
        *(_QWORD *)(a2 + 104) = v14;
        v7 = 0uLL;
        if (v20)
          v26 = v14 % (v12 >> 5);
        if (*(double *)&v13[32 * v26 - 32] >= v10)
          goto LABEL_3;
      }
      else
      {
        v20 = *(_QWORD *)(a2 + 96);
        v13 = v8;
        v14 = v6;
        v21 = *(double *)v3;
        if (!v6)
          goto LABEL_26;
        if (v20)
          v11 = *(_QWORD *)(a2 + 96);
        if (*(double *)&v8[32 * v11 - 32] >= v10)
          goto LABEL_3;
      }
      v21 = *(double *)v3;
      v8 = v13;
LABEL_26:
      v39 = *(_QWORD *)(v3 + 8);
      v40 = *(_DWORD *)(v3 + 16);
      v27 = *(_DWORD *)(v3 + 20);
      v28 = (double *)&v8[32 * v20];
      *v28 = v10;
      v28[1] = v21;
      *((_DWORD *)v28 + 6) = v40;
      *((_QWORD *)v28 + 2) = v39;
      *((_DWORD *)v28 + 7) = v27;
      v13 = *(char **)(a2 + 64);
      v9 = *(char **)(a2 + 72);
      v14 = (v9 - v13) >> 5;
      v29 = *(_QWORD *)(a2 + 104);
      v30 = *(_QWORD *)(a2 + 96) + 1;
      if (v30 >= v14)
        v31 = (v9 - v13) >> 5;
      else
        v31 = 0;
      *(_QWORD *)(a2 + 96) = v30 - v31;
      if (v29 == v14)
      {
        v32 = *(_QWORD *)(a2 + 88) + 1;
        if (v32 >= v14)
          v33 = (v9 - v13) >> 5;
        else
          v33 = 0;
        *(_QWORD *)(a2 + 88) = v32 - v33;
        if (v14)
        {
LABEL_36:
          v34 = *(_QWORD *)(a2 + 88);
          do
          {
            v35 = &v13[32 * v34];
            if (*(double *)v35 >= v10 - *(double *)(a2 + 56))
              break;
            *(_OWORD *)v35 = v7;
            *((_OWORD *)v35 + 1) = v7;
            v13 = *(char **)(a2 + 64);
            v9 = *(char **)(a2 + 72);
            v36 = (v9 - v13) >> 5;
            v37 = *(_QWORD *)(a2 + 88) + 1;
            if (v37 < v36)
              v36 = 0;
            v34 = v37 - v36;
            *(_QWORD *)(a2 + 88) = v34;
            v38 = *(_QWORD *)(a2 + 104);
            v14 = v38 - 1;
            *(_QWORD *)(a2 + 104) = v38 - 1;
          }
          while (v38 != 1);
        }
      }
      else
      {
        v14 = v29 + 1;
        *(_QWORD *)(a2 + 104) = v29 + 1;
        if (v29 != -1)
          goto LABEL_36;
      }
LABEL_3:
      v3 += 24;
      v8 = v13;
      v6 = v14;
    }
    while (v3 != v4);
  }
}

_QWORD *sub_20EFF9E90(uint64_t a1, uint64_t a2)
{
  return sub_20EFF729C(a2, *(uint64_t **)(*(_QWORD *)a1 + 8));
}

uint64_t sub_20EFF9EA4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  v9 = a2[5];
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  v10 = *(std::__shared_weak_count **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = v9;
  if (!v10)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v17 = *(__int128 *)((char *)a2 + 104);
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
    v14 = *(std::__shared_weak_count **)(a1 + 112);
    *(_OWORD *)(a1 + 104) = v17;
    if (!v14)
      goto LABEL_17;
  }
  else
  {
LABEL_11:
    v13 = *(__int128 *)((char *)a2 + 104);
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
    v14 = *(std::__shared_weak_count **)(a1 + 112);
    *(_OWORD *)(a1 + 104) = v13;
    if (!v14)
      goto LABEL_17;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_17:
  v18 = a2[8];
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  v19 = *(std::__shared_weak_count **)(a1 + 136);
  *(_OWORD *)(a1 + 128) = v18;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 144) = v22;
  return a1;
}

void sub_20EFFA04C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (*(unsigned __int8 *)(a1 + 56) == *((unsigned __int8 *)a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      if (*(unsigned __int8 *)(a1 + 48) == *((unsigned __int8 *)a2 + 48))
      {
        if (*(_BYTE *)(a1 + 48))
        {
          v4 = *a2;
          *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
          *(_OWORD *)a1 = v4;
          v5 = (void **)(a1 + 24);
          if (*(char *)(a1 + 47) < 0)
            operator delete(*v5);
          v6 = *(__int128 *)((char *)a2 + 24);
          *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
          *(_OWORD *)v5 = v6;
          *((_BYTE *)a2 + 47) = 0;
          *((_BYTE *)a2 + 24) = 0;
        }
      }
      else if (*(_BYTE *)(a1 + 48))
      {
        if (*(char *)(a1 + 47) < 0)
        {
          operator delete(*(void **)(a1 + 24));
          *(_BYTE *)(a1 + 48) = 0;
        }
        else
        {
          *(_BYTE *)(a1 + 48) = 0;
        }
      }
      else
      {
        v9 = *a2;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = v9;
        v10 = *(__int128 *)((char *)a2 + 24);
        *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
        *(_OWORD *)(a1 + 24) = v10;
        *((_QWORD *)a2 + 4) = 0;
        *((_QWORD *)a2 + 5) = 0;
        *((_QWORD *)a2 + 3) = 0;
        *(_BYTE *)(a1 + 48) = 1;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
    {
      operator delete(*(void **)(a1 + 24));
      *(_BYTE *)(a1 + 56) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 56) = 0;
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 48) = 0;
    if (*((_BYTE *)a2 + 48))
    {
      v7 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v7;
      v8 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)(a1 + 24) = v8;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 3) = 0;
      *(_BYTE *)(a1 + 48) = 1;
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
}

void sub_20EFFA1F0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (*(_BYTE *)(a1 + 168))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 136);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__shared_weak_count **)(a1 + 112);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v8)
      goto LABEL_16;
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_17:
        if ((*(char *)(a1 + 47) & 0x80000000) == 0)
          goto LABEL_18;
        goto LABEL_23;
      }
    }
    else
    {
LABEL_16:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_17;
    }
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
LABEL_18:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
LABEL_19:
        *(_BYTE *)(a1 + 168) = 0;
        return;
      }
LABEL_24:
      operator delete(*(void **)a1);
      goto LABEL_19;
    }
LABEL_23:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_24;
  }
}

uint64_t sub_20EFFA30C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (!*(_BYTE *)(a1 + 168))
    return a1;
  v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 112);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v8)
    goto LABEL_16;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_17:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0)
        goto LABEL_18;
LABEL_22:
      operator delete(*(void **)(a1 + 24));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return a1;
      goto LABEL_23;
    }
  }
  else
  {
LABEL_16:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_17;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_22;
LABEL_18:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_23:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20EFFA434(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = a1 + 32;
  v6 = (__int128 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      if (*(char *)(a1 + 55) < 0)
        operator delete(*(void **)v5);
      v7 = *v6;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v7;
      *(_BYTE *)(a2 + 55) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      v8 = a1 + 64;
      v9 = (__int128 *)(a2 + 64);
      if (*(char *)(a1 + 87) < 0)
        goto LABEL_12;
      goto LABEL_13;
    }
LABEL_11:
    v8 = a1 + 64;
    v9 = (__int128 *)(a2 + 64);
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)v5);
    *(_BYTE *)(a1 + 56) = 0;
    goto LABEL_11;
  }
  v16 = *v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)v5 = v16;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(a1 + 56) = 1;
  v8 = a1 + 64;
  v9 = (__int128 *)(a2 + 64);
  if (*(char *)(a1 + 87) < 0)
LABEL_12:
    operator delete(*(void **)v8);
LABEL_13:
  v10 = *v9;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v8 = v10;
  *(_BYTE *)(a2 + 87) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  v11 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v11);
  v12 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)v11 = v12;
  *(_BYTE *)(a2 + 111) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  v13 = (__int128 *)(a1 + 112);
  v14 = (__int128 *)(a2 + 112);
  if (*(unsigned __int8 *)(a1 + 280) == *(unsigned __int8 *)(a2 + 280))
  {
    if (*(_BYTE *)(a1 + 280))
      sub_20EFF9EA4((uint64_t)v13, v14);
    return a1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 280))
    {
      sub_20EFFA1F0((uint64_t)v13);
    }
    else
    {
      v17 = *v14;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *v13 = v17;
      *(_QWORD *)(a2 + 120) = 0;
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)v14 = 0;
      v18 = *(_OWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = v18;
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      v19 = *(_OWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = v19;
      *(_QWORD *)(a2 + 168) = 0;
      *(_QWORD *)(a2 + 176) = 0;
      *(_QWORD *)(a2 + 160) = 0;
      *(_QWORD *)(a1 + 184) = &off_24CA1F288;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_QWORD *)(a2 + 192) = 0;
      *(_QWORD *)(a2 + 200) = 0;
      *(_QWORD *)(a1 + 208) = &off_24CA1F288;
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_QWORD *)(a2 + 216) = 0;
      *(_QWORD *)(a2 + 224) = 0;
      *(_QWORD *)(a1 + 232) = &off_24CA1F288;
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
      *(_QWORD *)(a2 + 240) = 0;
      *(_QWORD *)(a2 + 248) = 0;
      v20 = *(_OWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 256) = v20;
      *(_BYTE *)(a1 + 280) = 1;
    }
    return a1;
  }
}

uint64_t sub_20EFFA654(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  v6 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v7 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v8 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    *(_BYTE *)(a1 + 200) = 0;
    if (*(_BYTE *)(a2 + 200))
    {
      v9 = *(_OWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = v9;
      v10 = *(_OWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = v10;
      *(_QWORD *)(a2 + 184) = 0;
      *(_QWORD *)(a2 + 192) = 0;
      *(_QWORD *)(a2 + 176) = 0;
      *(_BYTE *)(a1 + 200) = 1;
    }
    *(_BYTE *)(a1 + 208) = 1;
  }
  *(_BYTE *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 384) = -1;
  v11 = *(unsigned int *)(a2 + 384);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(char *))off_24C9F6B58[v11])(&v27);
    *(_DWORD *)(a1 + 384) = v11;
  }
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  v12 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = v12;
  v13 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a2 + 408) = 0;
  *(_QWORD *)(a2 + 416) = 0;
  *(_QWORD *)(a2 + 424) = 0;
  *(_QWORD *)(a2 + 432) = 0;
  *(_QWORD *)(a1 + 432) = v13;
  v14 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a2 + 440) = 0;
  *(_QWORD *)(a1 + 440) = v14;
  v15 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a2 + 448) = 0;
  v16 = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 448) = v15;
  v17 = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 456) = v16;
  *(_QWORD *)(a2 + 464) = 0;
  *(_QWORD *)(a2 + 472) = 0;
  *(_QWORD *)(a2 + 480) = 0;
  *(_QWORD *)(a2 + 488) = 0;
  *(_QWORD *)(a1 + 488) = v17;
  v18 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a2 + 496) = 0;
  *(_QWORD *)(a1 + 496) = v18;
  v19 = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a2 + 504) = 0;
  *(_QWORD *)(a1 + 504) = v19;
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a2 + 528) = 0;
  *(_QWORD *)(a2 + 520) = 0;
  *(_QWORD *)(a2 + 536) = 0;
  v20 = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a2 + 544) = 0;
  *(_QWORD *)(a1 + 544) = v20;
  v21 = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a2 + 552) = 0;
  *(_QWORD *)(a1 + 552) = v21;
  v22 = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a2 + 560) = 0;
  *(_QWORD *)(a1 + 560) = v22;
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a2 + 584) = 0;
  *(_QWORD *)(a2 + 576) = 0;
  *(_QWORD *)(a2 + 592) = 0;
  v23 = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a2 + 600) = 0;
  *(_QWORD *)(a1 + 600) = v23;
  v24 = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a2 + 608) = 0;
  *(_QWORD *)(a1 + 608) = v24;
  v25 = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a2 + 616) = 0;
  *(_QWORD *)(a1 + 616) = v25;
  return a1;
}

double sub_20EFFA8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  v3 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a2 + 32) = v3;
  v4 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  v6 = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a2 + 88) = v6;
  v7 = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a2 + 96) = v7;
  v8 = *(_QWORD *)(a3 + 104);
  *(_QWORD *)(a3 + 104) = 0;
  result = *(double *)(a3 + 112);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(_QWORD *)(a2 + 104) = v8;
  v10 = *(_QWORD *)(a3 + 144);
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
  *(double *)(a2 + 112) = result;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a2 + 144) = v10;
  v11 = *(_QWORD *)(a3 + 152);
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a2 + 152) = v11;
  v12 = *(_QWORD *)(a3 + 160);
  *(_QWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a2 + 160) = v12;
  return result;
}

__n128 sub_20EFFA9C0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v4 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v5 = a3[3];
  *(_QWORD *)(a2 + 64) = *((_QWORD *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 6) = 0;
  *(_QWORD *)(a2 + 72) = &off_24CA1F288;
  *(_OWORD *)(a2 + 80) = a3[5];
  *((_QWORD *)a3 + 10) = 0;
  *((_QWORD *)a3 + 11) = 0;
  *(_QWORD *)(a2 + 96) = &off_24CA1F288;
  *(_OWORD *)(a2 + 104) = *(__int128 *)((char *)a3 + 104);
  *((_QWORD *)a3 + 13) = 0;
  *((_QWORD *)a3 + 14) = 0;
  *(_QWORD *)(a2 + 120) = &off_24CA1F288;
  *(_OWORD *)(a2 + 128) = a3[8];
  *((_QWORD *)a3 + 16) = 0;
  *((_QWORD *)a3 + 17) = 0;
  result = (__n128)a3[9];
  *(_QWORD *)(a2 + 160) = *((_QWORD *)a3 + 20);
  *(__n128 *)(a2 + 144) = result;
  return result;
}

uint64_t sub_20EFFAA54(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  uint64_t v23;
  char v24;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = a1 + 32;
  v6 = (__int128 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      if (*(char *)(a1 + 55) < 0)
        operator delete(*(void **)v5);
      v7 = *v6;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v7;
      *(_BYTE *)(a2 + 55) = 0;
      *(_BYTE *)(a2 + 32) = 0;
      v8 = a1 + 64;
      v9 = (__int128 *)(a2 + 64);
      if (*(char *)(a1 + 87) < 0)
        goto LABEL_12;
      goto LABEL_13;
    }
LABEL_11:
    v8 = a1 + 64;
    v9 = (__int128 *)(a2 + 64);
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)v5);
    *(_BYTE *)(a1 + 56) = 0;
    goto LABEL_11;
  }
  v22 = *v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)v5 = v22;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(a1 + 56) = 1;
  v8 = a1 + 64;
  v9 = (__int128 *)(a2 + 64);
  if (*(char *)(a1 + 87) < 0)
LABEL_12:
    operator delete(*(void **)v8);
LABEL_13:
  v10 = *v9;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v8 = v10;
  *(_BYTE *)(a2 + 87) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  v11 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v11);
  v12 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)v11 = v12;
  *(_BYTE *)(a2 + 111) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  v13 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*v13);
  v14 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)v13 = v14;
  *(_BYTE *)(a2 + 135) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  v15 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  v16 = *(std::__shared_weak_count **)(a1 + 144);
  *(_OWORD *)(a1 + 136) = v15;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  sub_20EFFA04C(a1 + 152, (__int128 *)(a2 + 152));
  v19 = *(unsigned int *)(a1 + 384);
  v20 = *(unsigned int *)(a2 + 384);
  if ((_DWORD)v19 == -1)
  {
    if ((_DWORD)v20 == -1)
      goto LABEL_27;
LABEL_26:
    v23 = a1 + 216;
    ((void (*)(uint64_t *))off_24C9F6B68[v20])(&v23);
    goto LABEL_27;
  }
  if ((_DWORD)v20 != -1)
    goto LABEL_26;
  ((void (*)(char *, uint64_t))off_24C9F6B38[v19])(&v24, a1 + 216);
  *(_DWORD *)(a1 + 384) = -1;
LABEL_27:
  sub_20EFF884C(a1 + 392, a2 + 392);
  return a1;
}

double sub_20EFFAC88(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 168);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_24C9F6B38[v5])(&v31, v4);
LABEL_11:
    *(_QWORD *)v4 = *(_QWORD *)a3;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    v21 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(v4 + 32) = v21;
    v22 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(v4 + 40) = v22;
    v23 = *(_QWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(v4 + 48) = v23;
    *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
    *(_QWORD *)(v4 + 72) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 64) = 0;
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(a3 + 64);
    v24 = *(_QWORD *)(a3 + 88);
    *(_QWORD *)(v4 + 80) = *(_QWORD *)(a3 + 80);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(v4 + 88) = v24;
    v25 = *(_QWORD *)(a3 + 96);
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(v4 + 96) = v25;
    v26 = *(_QWORD *)(a3 + 104);
    *(_QWORD *)(a3 + 104) = 0;
    *(_QWORD *)&v17 = *(_QWORD *)(a3 + 112);
    *(_QWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 136) = 0;
    *(_QWORD *)(v4 + 120) = 0;
    *(_OWORD *)(v4 + 120) = *(_OWORD *)(a3 + 120);
    *(_QWORD *)(v4 + 104) = v26;
    v27 = *(_QWORD *)(a3 + 144);
    *(_QWORD *)(v4 + 136) = *(_QWORD *)(a3 + 136);
    *(_QWORD *)(v4 + 112) = v17;
    *(_QWORD *)(a3 + 120) = 0;
    *(_QWORD *)(a3 + 128) = 0;
    *(_QWORD *)(a3 + 136) = 0;
    *(_QWORD *)(a3 + 144) = 0;
    *(_QWORD *)(v4 + 144) = v27;
    v28 = *(_QWORD *)(a3 + 152);
    *(_QWORD *)(a3 + 152) = 0;
    *(_QWORD *)(v4 + 152) = v28;
    v29 = *(_QWORD *)(a3 + 160);
    *(_QWORD *)(a3 + 160) = 0;
    *(_QWORD *)(v4 + 160) = v29;
    *(_DWORD *)(v4 + 168) = 0;
    return *(double *)&v17;
  }
  *a2 = *(_QWORD *)a3;
  v8 = a2 + 1;
  v7 = (void *)a2[1];
  if (v7)
  {
    a2[2] = v7;
    operator delete(v7);
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 32);
  a2[3] = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v10 = (void *)a2[8];
  a2[4] = v9;
  v11 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = 0;
  a2[5] = v11;
  v12 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  a2[6] = v12;
  a2[7] = *(_QWORD *)(a3 + 56);
  if (v10)
  {
    a2[9] = v10;
    operator delete(v10);
    a2[8] = 0;
    a2[9] = 0;
    a2[10] = 0;
  }
  *((_OWORD *)a2 + 4) = *(_OWORD *)(a3 + 64);
  v13 = *(_QWORD *)(a3 + 88);
  a2[10] = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  v14 = (void *)a2[15];
  a2[11] = v13;
  v15 = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 96) = 0;
  a2[12] = v15;
  v16 = *(_QWORD *)(a3 + 104);
  *(_QWORD *)(a3 + 104) = 0;
  a2[13] = v16;
  a2[14] = *(_QWORD *)(a3 + 112);
  if (v14)
  {
    a2[16] = v14;
    operator delete(v14);
    a2[15] = 0;
    a2[16] = 0;
    a2[17] = 0;
  }
  v17 = *(_OWORD *)(a3 + 120);
  *(_OWORD *)(a2 + 15) = v17;
  v18 = *(_QWORD *)(a3 + 144);
  a2[17] = *(_QWORD *)(a3 + 136);
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  a2[18] = v18;
  v19 = *(_QWORD *)(a3 + 152);
  *(_QWORD *)(a3 + 152) = 0;
  a2[19] = v19;
  v20 = *(_QWORD *)(a3 + 160);
  *(_QWORD *)(a3 + 160) = 0;
  a2[20] = v20;
  return *(double *)&v17;
}

__n128 sub_20EFFAED4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 168);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      sub_20EFF9EA4(a2, (__int128 *)a3);
      return result;
    }
    ((void (*)(char *, uint64_t))off_24C9F6B38[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 168) = -1;
  v7 = *(_OWORD *)a3;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)v4 = v7;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v8 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(a3 + 40);
  *(_OWORD *)(v4 + 24) = v8;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v9 = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 48) = v9;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(v4 + 72) = &off_24CA1F288;
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(v4 + 96) = &off_24CA1F288;
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a3 + 104);
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(v4 + 120) = &off_24CA1F288;
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a3 + 128);
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  result = *(__n128 *)(a3 + 144);
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(a3 + 160);
  *(__n128 *)(v4 + 144) = result;
  *(_DWORD *)(v4 + 168) = 1;
  return result;
}

uint64_t sub_20EFFAFE4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v11;

  v2 = *(void **)(a1 + 576);
  if (v2)
  {
    *(_QWORD *)(a1 + 584) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 520);
  if (v3)
  {
    *(_QWORD *)(a1 + 528) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 464);
  if (v4)
  {
    *(_QWORD *)(a1 + 472) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 408);
  if (v5)
  {
    *(_QWORD *)(a1 + 416) = v5;
    operator delete(v5);
  }
  v6 = *(unsigned int *)(a1 + 384);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, uint64_t))off_24C9F6B38[v6])(&v11, a1 + 216);
  *(_DWORD *)(a1 + 384) = -1;
  if (*(_BYTE *)(a1 + 208) && *(_BYTE *)(a1 + 200) && *(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  v7 = *(std::__shared_weak_count **)(a1 + 144);
  if (!v7)
    goto LABEL_19;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_20:
      if ((*(char *)(a1 + 111) & 0x80000000) == 0)
        goto LABEL_21;
      goto LABEL_26;
    }
  }
  else
  {
LABEL_19:
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
      goto LABEL_20;
  }
  operator delete(*(void **)(a1 + 112));
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_21:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_22;
LABEL_27:
    operator delete(*(void **)(a1 + 64));
    if (!*(_BYTE *)(a1 + 56))
      return a1;
    goto LABEL_28;
  }
LABEL_26:
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    goto LABEL_27;
LABEL_22:
  if (!*(_BYTE *)(a1 + 56))
    return a1;
LABEL_28:
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 32));
  return a1;
}

uint64_t sub_20EFFB150(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 304))
    return a1;
  v2 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 296) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  sub_20EFFA30C(a1 + 112);
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_10:
    operator delete(*(void **)(a1 + 64));
    if (!*(_BYTE *)(a1 + 56))
      return a1;
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    goto LABEL_10;
LABEL_7:
  if (!*(_BYTE *)(a1 + 56))
    return a1;
LABEL_11:
  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_20EFFB208(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  if (*(unsigned __int8 *)(a1 + 304) == *(unsigned __int8 *)(a2 + 304))
  {
    if (*(_BYTE *)(a1 + 304))
    {
      sub_20EFFA434(a1, a2);
      v4 = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a2 + 296) = 0;
      v5 = *(_QWORD *)(a1 + 296);
      *(_QWORD *)(a1 + 296) = v4;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    return;
  }
  if (*(_BYTE *)(a1 + 304))
  {
    v6 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 296) = 0;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(_QWORD *)(a1 + 296);
      *(_QWORD *)(a1 + 296) = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
    sub_20EFFA30C(a1 + 112);
    if (*(char *)(a1 + 111) < 0)
    {
      operator delete(*(void **)(a1 + 88));
      if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      {
LABEL_11:
        if (!*(_BYTE *)(a1 + 56))
          goto LABEL_22;
LABEL_21:
        if (*(char *)(a1 + 55) < 0)
        {
          operator delete(*(void **)(a1 + 32));
          *(_BYTE *)(a1 + 304) = 0;
          return;
        }
LABEL_22:
        *(_BYTE *)(a1 + 304) = 0;
        return;
      }
    }
    else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*(void **)(a1 + 64));
    if (!*(_BYTE *)(a1 + 56))
      goto LABEL_22;
    goto LABEL_21;
  }
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    v9 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  v10 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v11 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  if (*(_BYTE *)(a2 + 280))
  {
    v12 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = v12;
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    v13 = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v13;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    v14 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = v14;
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a1 + 184) = &off_24CA1F288;
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a1 + 208) = &off_24CA1F288;
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a2 + 216) = 0;
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a1 + 232) = &off_24CA1F288;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    v15 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = v15;
    *(_BYTE *)(a1 + 280) = 1;
  }
  v16 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a1 + 288) = &off_24C9B1898;
  *(_QWORD *)(a1 + 296) = v16;
  *(_BYTE *)(a1 + 304) = 1;
}

uint64_t sub_20EFFB44C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  if (*(unsigned __int8 *)(result + 640) == *(unsigned __int8 *)(a2 + 640))
  {
    if (*(_BYTE *)(result + 640))
    {
      sub_20EFFAA54(result, a2);
      v4 = *(_QWORD *)(a2 + 632);
      *(_QWORD *)(a2 + 632) = 0;
      result = *(_QWORD *)(v3 + 632);
      *(_QWORD *)(v3 + 632) = v4;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else if (*(_BYTE *)(result + 640))
  {
    v5 = *(_QWORD *)(result + 632);
    *(_QWORD *)(v3 + 632) = 0;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v6 = *(_QWORD *)(v3 + 632);
      *(_QWORD *)(v3 + 632) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    result = sub_20EFFAFE4(v3);
    *(_BYTE *)(v3 + 640) = 0;
  }
  else
  {
    result = sub_20EFFA654(result, a2);
    *(_QWORD *)(v3 + 624) = &off_24C9B1898;
    v7 = *(_QWORD *)(a2 + 632);
    *(_QWORD *)(a2 + 632) = 0;
    *(_QWORD *)(v3 + 632) = v7;
    *(_BYTE *)(v3 + 640) = 1;
  }
  return result;
}

void sub_20EFFB530()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFFB544()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9F6B88;
  return result;
}

void sub_20EFFB568(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9F6B88;
}

uint64_t sub_20EFFB580()
{
  return pthread_setname_np("DataCollectionDiagnostics-Manual");
}

uint64_t sub_20EFFB5A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry25DataCollectionDiagnosticsC1ERKNS1_31DataCollectionDiagnosticsConfigERKNSt3__1"
                     "4__fs10filesystem4pathESB_RKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry25DataCollectionDiagnosticsC1ERKNS1_31DataCollectionDiagnosticsConfi"
                                "gERKNSt3__14__fs10filesystem4pathESB_RKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9all"
                                "ocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry25DataCollectionDiagnosticsC1ERKNS1_31DataCollectionDiagnosticsConfigERKNSt3__14__fs10filesystem4pathESB_RKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry25DataCollectionDiagnosticsC1ERKNS1_31DataCollectionDiagnosticsConfigERKNSt3__14__fs10filesystem4pathESB_RKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFFB60C()
{
  return &unk_24C9F6BE8;
}

void sub_20EFFB618(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F6C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EFFB628(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F6C08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFFB658(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20EFFB66C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFFB680()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C9F6C58;
  return result;
}

void sub_20EFFB6A4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C9F6C58;
}

uint64_t sub_20EFFB6BC()
{
  return pthread_setname_np("DataCollectionDiagnostics-Automatic");
}

uint64_t sub_20EFFB6DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry25DataCollectionDiagnosticsC1ERKNS1_31DataCollectionDiagnosticsConfigERKNSt3__1"
                     "4__fs10filesystem4pathESB_RKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry25DataCollectionDiagnosticsC1ERKNS1_31DataCollectionDiagnosticsConfi"
                                "gERKNSt3__14__fs10filesystem4pathESB_RKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9all"
                                "ocatorIcEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry25DataCollectionDiagnosticsC1ERKNS1_31DataCollectionDiagnosticsConfigERKNSt3__14__fs10filesystem4pathESB_RKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry25DataCollectionDiagnosticsC1ERKNS1_31DataCollectionDiagnosticsConfigERKNSt3__14__fs10filesystem4pathESB_RKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFFB748()
{
  return &unk_24C9F6CB8;
}

void sub_20EFFB758()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFFB76C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9F6CD8;
  result[1] = v3;
  return result;
}

uint64_t sub_20EFFB7A0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9F6CD8;
  a2[1] = v2;
  return result;
}

void sub_20EFFB7BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  char *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  char *v30;
  char *v31;
  int64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v3 + 368))
    goto LABEL_27;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 == *a2)
  {
    v8 = 0;
    v9 = 0;
LABEL_12:
    v14 = 0;
    goto LABEL_13;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v7 = (char *)operator new(v6);
  v8 = v7;
  v9 = 0;
  do
  {
    v10 = v4 + v9;
    v11 = &v7[v9];
    *(_QWORD *)v11 = *(_QWORD *)(v4 + v9);
    v12 = *(_QWORD *)(v4 + v9 + 8);
    *((_DWORD *)v11 + 4) = *(_DWORD *)(v4 + v9 + 16);
    *((_QWORD *)v11 + 1) = v12;
    *((_DWORD *)v11 + 5) = *(_DWORD *)(v4 + v9 + 20);
    v9 += 24;
  }
  while (v10 + 24 != v5);
  if (!v9)
    goto LABEL_12;
  if (0xAAAAAAAAAAAAAAABLL * (v9 >> 3) > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v13 = (char *)operator new(v9);
  v14 = v13;
  v15 = 0;
  do
  {
    v16 = &v8[v15];
    v17 = &v13[v15];
    *(_QWORD *)v17 = *(_QWORD *)&v8[v15];
    *((_QWORD *)v17 + 1) = *(_QWORD *)&v8[v15 + 8];
    *((_DWORD *)v17 + 4) = *(_DWORD *)&v8[v15 + 16];
    *((_DWORD *)v17 + 5) = *(_DWORD *)&v8[v15 + 20];
    v15 += 24;
  }
  while (v16 + 24 != &v8[v9]);
  v9 = (int64_t)&v13[v15];
LABEL_13:
  v52 = 0;
  v18 = operator new(0x28uLL);
  *v18 = &off_24C9F6D58;
  v18[1] = v3;
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = 0;
  v19 = v9 - (_QWORD)v14;
  if ((char *)v9 != v14)
  {
    v20 = 0xAAAAAAAAAAAAAAABLL * (v19 >> 3);
    if (v20 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v21 = (char *)operator new(v19);
    v22 = 0;
    v18[2] = v21;
    v18[3] = v21;
    v18[4] = &v21[24 * v20];
    do
    {
      v23 = &v14[v22];
      v24 = &v21[v22];
      *(_QWORD *)v24 = *(_QWORD *)&v14[v22];
      *((_QWORD *)v24 + 1) = *(_QWORD *)&v14[v22 + 8];
      *((_DWORD *)v24 + 4) = *(_DWORD *)&v14[v22 + 16];
      *((_DWORD *)v24 + 5) = *(_DWORD *)&v14[v22 + 20];
      v22 += 24;
    }
    while (v23 + 24 != (char *)v9);
    v18[3] = &v21[v22];
  }
  v52 = v18;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v3 + 352) + 40))(v3 + 352, v51);
  v25 = v52;
  if (v52 == v51)
  {
    v26 = 4;
    v25 = v51;
    goto LABEL_22;
  }
  if (v52)
  {
    v26 = 5;
LABEL_22:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  if (v14)
    operator delete(v14);
  if (v8)
    operator delete(v8);
LABEL_27:
  if (!*(_BYTE *)(v3 + 1016))
    return;
  v28 = *a2;
  v27 = a2[1];
  v29 = v27 - v28;
  if (v27 == v28)
  {
    v31 = 0;
LABEL_38:
    v41 = 0;
    v37 = 0;
    goto LABEL_39;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v29 >> 3) > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v30 = (char *)operator new(v29);
  v31 = v30;
  v32 = 0;
  do
  {
    v33 = v28 + v32;
    v34 = &v30[v32];
    *(_QWORD *)v34 = *(_QWORD *)(v28 + v32);
    v35 = *(_QWORD *)(v28 + v32 + 8);
    *((_DWORD *)v34 + 4) = *(_DWORD *)(v28 + v32 + 16);
    *((_QWORD *)v34 + 1) = v35;
    *((_DWORD *)v34 + 5) = *(_DWORD *)(v28 + v32 + 20);
    v32 += 24;
  }
  while (v33 + 24 != v27);
  if (!v32)
    goto LABEL_38;
  if (0xAAAAAAAAAAAAAAABLL * (v32 >> 3) > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  v36 = (char *)operator new(v32);
  v37 = v36;
  v38 = 0;
  do
  {
    v39 = &v31[v38];
    v40 = &v36[v38];
    *(_QWORD *)v40 = *(_QWORD *)&v31[v38];
    *((_QWORD *)v40 + 1) = *(_QWORD *)&v31[v38 + 8];
    *((_DWORD *)v40 + 4) = *(_DWORD *)&v31[v38 + 16];
    *((_DWORD *)v40 + 5) = *(_DWORD *)&v31[v38 + 20];
    v38 += 24;
  }
  while (v39 + 24 != &v31[v32]);
  v41 = &v36[v38];
LABEL_39:
  v52 = 0;
  v42 = operator new(0x28uLL);
  *v42 = &off_24C9F6DD8;
  v42[1] = v3;
  v42[2] = 0;
  v42[3] = 0;
  v42[4] = 0;
  v43 = v41 - v37;
  if (v41 != v37)
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * (v43 >> 3);
    if (v44 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v45 = (char *)operator new(v43);
    v46 = 0;
    v42[2] = v45;
    v42[3] = v45;
    v42[4] = &v45[24 * v44];
    do
    {
      v47 = &v37[v46];
      v48 = &v45[v46];
      *(_QWORD *)v48 = *(_QWORD *)&v37[v46];
      *((_QWORD *)v48 + 1) = *(_QWORD *)&v37[v46 + 8];
      *((_DWORD *)v48 + 4) = *(_DWORD *)&v37[v46 + 16];
      *((_DWORD *)v48 + 5) = *(_DWORD *)&v37[v46 + 20];
      v46 += 24;
    }
    while (v47 + 24 != v41);
    v42[3] = &v45[v46];
  }
  v52 = v42;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(v3 + 1000) + 40))(v3 + 1000, v51);
  v49 = v52;
  if (v52 == v51)
  {
    v50 = 4;
    v49 = v51;
    goto LABEL_48;
  }
  if (v52)
  {
    v50 = 5;
LABEL_48:
    (*(void (**)(void))(*v49 + 8 * v50))();
  }
  if (v37)
    operator delete(v37);
  if (v31)
    operator delete(v31);
}

void sub_20EFFBC3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20EFFBC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void *v13;
  void *v14;
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a13;
  if (a13 == v15)
  {
    v18 = 4;
    v17 = &a10;
  }
  else
  {
    if (!a13)
    {
      if (v14)
      {
LABEL_8:
        operator delete(v14);
        if (v13)
        {
LABEL_12:
          operator delete(v13);
          _Unwind_Resume(a1);
        }
LABEL_11:
        _Unwind_Resume(a1);
      }
LABEL_10:
      if (v13)
        goto LABEL_12;
      goto LABEL_11;
    }
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
  if (v14)
    goto LABEL_8;
  goto LABEL_10;
}

uint64_t sub_20EFFBD68(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry25DataCollectionDiagnostics11PushCompassERKNS0_8cv_types18CompassMeasurementEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry25DataCollectionDiagnostics11PushCompassERKNS0_8cv_types18CompassMeasurementEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry25DataCollectionDiagnostics11PushCompassERKNS0_8cv_types18CompassMeasurementEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry25DataCollectionDiagnostics11PushCompassERKNS0_8cv_types18CompassMeasurementEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFFBDD4()
{
  return &unk_24C9F6E48;
}

_QWORD *sub_20EFFBDE0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9F6D58;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20EFFBE1C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9F6D58;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFFBE68(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v2 = operator new(0x28uLL);
  v3 = a1[1];
  v4 = a1[2];
  *v2 = &off_24C9F6D58;
  v2[1] = v3;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  v5 = a1[3];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v8 = (char *)operator new(v6);
    v9 = 0;
    v2[2] = v8;
    v2[3] = v8;
    v2[4] = &v8[24 * v7];
    do
    {
      v10 = v4 + v9;
      v11 = &v8[v9];
      *(_QWORD *)v11 = *(_QWORD *)(v4 + v9);
      v12 = *(_QWORD *)(v4 + v9 + 8);
      *((_DWORD *)v11 + 4) = *(_DWORD *)(v4 + v9 + 16);
      *((_QWORD *)v11 + 1) = v12;
      *((_DWORD *)v11 + 5) = *(_DWORD *)(v4 + v9 + 20);
      v9 += 24;
    }
    while (v10 + 24 != v5);
    v2[3] = &v8[v9];
  }
  return v2;
}

void sub_20EFFBF44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

int64_t sub_20EFFBF58(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[1];
  a2[2] = 0;
  *a2 = &off_24C9F6D58;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  v3 = a1[2];
  v4 = a1[3];
  result = v4 - v3;
  if (v4 != v3)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (result >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    result = (int64_t)operator new(result);
    v8 = 0;
    a2[2] = result;
    a2[3] = result;
    a2[4] = result + 24 * v7;
    do
    {
      v9 = v3 + v8;
      v10 = result + v8;
      *(_QWORD *)v10 = *(_QWORD *)(v3 + v8);
      v11 = *(_QWORD *)(v3 + v8 + 8);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v3 + v8 + 16);
      *(_QWORD *)(v10 + 8) = v11;
      *(_DWORD *)(v10 + 20) = *(_DWORD *)(v3 + v8 + 20);
      v8 += 24;
    }
    while (v9 + 24 != v4);
    a2[3] = result + v8;
  }
  return result;
}

void sub_20EFFC030(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFFC04C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_20EFFC064(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

_QWORD *sub_20EFFC094(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  if (*(_BYTE *)(v1 + 344))
    return sub_20EFF729C(v1 + 176, result + 2);
  return result;
}

#error "20EFFC7B4: call analysis failed (funcsize=486)"

uint64_t sub_20EFFCB10(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d3vio8odometry25DataCollectionDiagnostics11PushCompassERKNS0_8cv_types18CompassMeasurementEE"
                     "NK3$_0clERKNSt3__16vectorIS4_NS8_9allocatorIS4_EEEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d3vio8odometry25DataCollectionDiagnostics11PushCompassERKNS0_8cv_types18CompassMe"
                                "asurementEENK3$_0clERKNSt3__16vectorIS4_NS8_9allocatorIS4_EEEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d3vio8odometry25DataCollectionDiagnostics11PushCompassERKNS0_8cv_types18CompassMeasurementEENK3$_0clERKNSt3__16vectorIS4_NS8_9allocatorIS4_EEEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d3vio8odometry25DataCollectionDiagnostics11PushCompassERKNS0_8cv_types18CompassMeasurementEENK3$_0clERKNSt3__16vectorIS4_NS8_9allocatorIS4_EEEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFFCB7C()
{
  return &unk_24C9F6DB8;
}

_QWORD *sub_20EFFCB88(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9F6DD8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20EFFCBC4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9F6DD8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EFFCC10(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v2 = operator new(0x28uLL);
  v3 = a1[1];
  v4 = a1[2];
  *v2 = &off_24C9F6DD8;
  v2[1] = v3;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  v5 = a1[3];
  v6 = v5 - v4;
  if (v5 != v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    v8 = (char *)operator new(v6);
    v9 = 0;
    v2[2] = v8;
    v2[3] = v8;
    v2[4] = &v8[24 * v7];
    do
    {
      v10 = v4 + v9;
      v11 = &v8[v9];
      *(_QWORD *)v11 = *(_QWORD *)(v4 + v9);
      v12 = *(_QWORD *)(v4 + v9 + 8);
      *((_DWORD *)v11 + 4) = *(_DWORD *)(v4 + v9 + 16);
      *((_QWORD *)v11 + 1) = v12;
      *((_DWORD *)v11 + 5) = *(_DWORD *)(v4 + v9 + 20);
      v9 += 24;
    }
    while (v10 + 24 != v5);
    v2[3] = &v8[v9];
  }
  return v2;
}

void sub_20EFFCCEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

int64_t sub_20EFFCD00(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[1];
  a2[2] = 0;
  *a2 = &off_24C9F6DD8;
  a2[1] = v2;
  a2[3] = 0;
  a2[4] = 0;
  v3 = a1[2];
  v4 = a1[3];
  result = v4 - v3;
  if (v4 != v3)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (result >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_20E867F44();
    result = (int64_t)operator new(result);
    v8 = 0;
    a2[2] = result;
    a2[3] = result;
    a2[4] = result + 24 * v7;
    do
    {
      v9 = v3 + v8;
      v10 = result + v8;
      *(_QWORD *)v10 = *(_QWORD *)(v3 + v8);
      v11 = *(_QWORD *)(v3 + v8 + 8);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v3 + v8 + 16);
      *(_QWORD *)(v10 + 8) = v11;
      *(_DWORD *)(v10 + 20) = *(_DWORD *)(v3 + v8 + 20);
      v8 += 24;
    }
    while (v9 + 24 != v4);
    a2[3] = result + v8;
  }
  return result;
}

void sub_20EFFCDD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EFFCDF4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_20EFFCE0C(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t sub_20EFFCE3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[15];

  v5[12] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  v4[0] = a1 + 16;
  v4[1] = a1 + 16;
  v2 = *(unsigned int *)(v1 + 760);
  if ((_DWORD)v2 == -1)
    sub_20E877AB8();
  v5[0] = v4;
  return ((uint64_t (*)(_QWORD *, uint64_t))*(&off_24C9F6B48 + v2))(v5, v1 + 592);
}

#error "20EFFD584: call analysis failed (funcsize=487)"

void sub_20EFFD700(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_guard_abort(&qword_254A4A510);
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFFD71C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (a2)
  {
    v4 = *(_QWORD *)(v2 - 192);
    *(_QWORD *)(v2 - 192) = 0;
    if (v4)
    {
      v5 = *(std::__shared_weak_count **)(v4 + 32);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v8 = *(std::__shared_weak_count **)(v4 + 16);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      MEMORY[0x212BC6398](v4, 0x10F0C40B62ED6C6);
      sub_20E860DA4(a1);
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFFD7C0(_Unwind_Exception *a1, int a2)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v7;
  unint64_t v8;

  if (a2)
  {
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 - 1, v5));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    do
      v8 = __ldaxr(v3);
    while (__stlxr(v8 - 1, v3));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      sub_20E860DA4(a1);
    }
    sub_20E860DA4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EFFD884(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20E860DA4(a1);
}

uint64_t sub_20EFFD8E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d3vio8odometry25DataCollectionDiagnostics11PushCompassERKNS0_8cv_types18CompassMeasurementEE"
                     "NK3$_0clERKNSt3__16vectorIS4_NS8_9allocatorIS4_EEEEEUlvE0_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d3vio8odometry25DataCollectionDiagnostics11PushCompassERKNS0_8cv_types18CompassMe"
                                "asurementEENK3$_0clERKNSt3__16vectorIS4_NS8_9allocatorIS4_EEEEEUlvE0_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d3vio8odometry25DataCollectionDiagnostics11PushCompassERKNS0_8cv_types18CompassMeasurementEENK3$_0clERKNSt3__16vectorIS4_NS8_9allocatorIS4_EEEEEUlvE0_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d3vio8odometry25DataCollectionDiagnostics11PushCompassERKNS0_8cv_types18CompassMeasurementEENK3$_0clERKNSt3__16vectorIS4_NS8_9allocatorIS4_EEEEEUlvE0_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EFFD950()
{
  return &unk_24C9F6E38;
}

uint64_t *sub_20EFFD95C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  __int128 v12;

  __p = operator new(0x38uLL);
  v12 = xmmword_2102DBEE0;
  strcpy((char *)__p, "Configuration to record IMU data and trajectories live.");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "DataCollectionDiagnosticsConfig.enable_manual", v4, "Enable recording of IMU data and trajectories and persisting long-term, where they need to be retrieved manually from the device.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 1));
  sub_20E8B2F9C((uint64_t *)&__p, "DataCollectionDiagnosticsConfig.enable_automatic", v5, "Enable recording of IMU data and trajectories temporarily, where they are automatically sent to Diagnostic Pipeline.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "DataCollectionDiagnosticsConfig.automatic_data_daily_duration_budget", v6, "The number of seconds of data per day that should be collected automatically. (This is decided by the Diagnostic Pipelines and privacy team.)");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAE34E8(a1 + 32);
  sub_20E8B2F9C((uint64_t *)&__p, "DataCollectionDiagnosticsConfig.automatic_data_output_directory", v7, "Specifying this changes the directory to use when doing automated data collection.");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "DataCollectionDiagnosticsConfig.automatic_data_minimum_duration", v8, "Minimum size when automatically collecting data.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 24));
  return sub_20E8B2F9C((uint64_t *)&__p, "DataCollectionDiagnosticsConfig.automatic_data_prior_active_duration", v9, "The window of data that should be included in a dataset prior to when a user becomes \"active\" (i.e. the data buffer size).");
}

void sub_20EFFDB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EFFDB60@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  std::string *v16;
  __int128 v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  std::string v36;
  std::string v37;
  _BYTE __p[24];

  *(_QWORD *)__p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DC8D0;
  strcpy(*(char **)__p, "Dynamic motion initialization parameters");
  sub_20E8B30B4(a2, (__int128 *)__p, 180, 160);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_QWORD *)__p = nullsub_1(a2);
  v4 = sub_20EB8894C(a1 + 48);
  sub_20E8B2F9C((uint64_t *)__p, "DynamicMotionInitializationConfig.output_path", v4, "Path for saving various outputs of dynamic motion initialization (debug only).");
  *(_QWORD *)__p = nullsub_1(a2);
  v5 = sub_20EB8894C(a1 + 72);
  sub_20E8B2F9C((uint64_t *)__p, "DynamicMotionInitializationConfig.input_path", v5, "Path for reading various inputs for dynamic motion initialization (debug only).");
  *(_QWORD *)__p = nullsub_1(a2);
  v6 = sub_20EA9DCF0((unsigned int *)(a1 + 96));
  sub_20E8B2F9C((uint64_t *)__p, "DynamicMotionInitializationConfig.mininum_track_length_for_spatial_track_triangulation", v6, "Minimum track length required to perform spatial track triangulation.");
  v35 = nullsub_1(a2);
  v7 = operator new();
  *(_QWORD *)(v7 + 109) = 0;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_QWORD *)v7 = &off_24C9F6E68;
  *(_QWORD *)(v7 + 8) = &unk_24C9F6EE0;
  *(_QWORD *)(v7 + 152) = &unk_24C9F6F08;
  *(_OWORD *)(v7 + 160) = 0u;
  v8 = (_QWORD *)(v7 + 160);
  *(_OWORD *)(v7 + 176) = 0u;
  *(_QWORD *)(v7 + 120) = (char *)off_24C9F7080 + 1;
  *(_QWORD *)(v7 + 128) = a1 + 104;
  v9 = (_QWORD *)operator new();
  v10 = v9;
  v9[1] = 0;
  *v9 = &off_24C9F7048;
  v9[2] = 0;
  v9[3] = 0;
  v11 = *(char **)(a1 + 104);
  v12 = *(char **)(a1 + 112);
  v13 = v12 - v11;
  if (v12 != v11)
  {
    if (v13 < 0)
      sub_20E867F44();
    v14 = (char *)operator new(v12 - v11);
    v10[1] = v14;
    v15 = &v14[4 * (v13 >> 2)];
    v10[3] = v15;
    memcpy(v14, v11, v12 - v11);
    v10[2] = v15;
    *v8 = v10;
    *((_BYTE *)&v36.__r_.__value_.__s + 23) = 1;
    LOWORD(v36.__r_.__value_.__l.__data_) = 123;
    while (1)
    {
      sub_20E9F6A6C((unsigned int *)v11);
      v16 = std::string::append(&v37, ", ", 2uLL);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (__p[23] >= 0)
        v18 = __p;
      else
        v18 = *(const std::string::value_type **)__p;
      if (__p[23] >= 0)
        v19 = __p[23];
      else
        v19 = *(_QWORD *)&__p[8];
      std::string::append(&v36, v18, v19);
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
LABEL_17:
          operator delete(v37.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_17;
      }
      v11 += 4;
      if (v11 == v12)
        goto LABEL_19;
    }
  }
  *v8 = v9;
  *((_BYTE *)&v36.__r_.__value_.__s + 23) = 1;
  LOWORD(v36.__r_.__value_.__l.__data_) = 123;
LABEL_19:
  std::string::append(&v36, "}", 1uLL);
  *(std::string *)(v7 + 168) = v36;
  *(_BYTE *)(v7 + 114) = 1;
  *(_BYTE *)(v7 + 112) = 1;
  sub_20E8B2F9C(&v35, "DynamicMotionInitializationConfig.required_observing_camera_streams_for_spatial_track_triangulation", v7, "Required observing camera streams to a spatial track to perform spatial track triangulation.");
  *(_QWORD *)__p = nullsub_1(a2);
  v20 = sub_20EA9DCF0((unsigned int *)(a1 + 128));
  sub_20E8B2F9C((uint64_t *)__p, "DynamicMotionInitializationConfig.maximum_number_iterations_in_spatial_track_triangulation_refinement", v20, "Maximum number of iterations in spatial track triangulation refinement.");
  *(_QWORD *)__p = nullsub_1(a2);
  v21 = sub_20EA9DB90((double *)(a1 + 136));
  sub_20E8B2F9C((uint64_t *)__p, "DynamicMotionInitializationConfig.correction_norm_threshold_in_spatial_track_triangulation_refinement", v21, "Correction norm threshold for early termination in spatial track triangulation refinement (m).");
  *(_QWORD *)__p = nullsub_1(a2);
  v22 = operator new();
  *(_QWORD *)(v22 + 109) = 0;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_QWORD *)v22 = &off_24C9F70B0;
  *(_QWORD *)(v22 + 8) = &unk_24C9F7128;
  *(_QWORD *)(v22 + 152) = &unk_24C9F7150;
  *(_QWORD *)(v22 + 176) = 0;
  *(_QWORD *)(v22 + 184) = 0;
  *(_QWORD *)(v22 + 120) = (char *)off_24C9F72C8 + 1;
  *(_QWORD *)(v22 + 128) = a1 + 144;
  v23 = operator new();
  *(_QWORD *)v23 = &off_24C9F7290;
  *(_DWORD *)(v23 + 8) = *(_DWORD *)(a1 + 144);
  *(_QWORD *)(v22 + 160) = v23;
  *(_QWORD *)(v22 + 168) = 0x6E776F6E6B6E75;
  *(_BYTE *)(v22 + 191) = 7;
  sub_20E8B2F9C((uint64_t *)__p, "DynamicMotionInitializationConfig.relative_pose_6dof_estimation_approach", v22, "Approach for estimating the 6DOF relative pose in dynamic motion intialization.");
  *(_QWORD *)__p = nullsub_1(a2);
  v24 = operator new();
  *(_QWORD *)(v24 + 109) = 0;
  *(_OWORD *)(v24 + 80) = 0u;
  *(_OWORD *)(v24 + 96) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_OWORD *)(v24 + 32) = 0u;
  *(_QWORD *)v24 = &off_24C9F72F8;
  *(_QWORD *)(v24 + 8) = &unk_24C9F7370;
  *(_QWORD *)(v24 + 152) = &unk_24C9F7398;
  *(_QWORD *)(v24 + 176) = 0;
  *(_QWORD *)(v24 + 184) = 0;
  *(_QWORD *)(v24 + 120) = (char *)off_24C9F7510 + 1;
  *(_QWORD *)(v24 + 128) = a1 + 148;
  v25 = operator new();
  *(_QWORD *)v25 = &off_24C9F74D8;
  *(_DWORD *)(v25 + 8) = *(_DWORD *)(a1 + 148);
  *(_QWORD *)(v24 + 160) = v25;
  *(_QWORD *)(v24 + 168) = 0x6E776F6E6B6E75;
  *(_BYTE *)(v24 + 191) = 7;
  sub_20E8B2F9C((uint64_t *)__p, "DynamicMotionInitializationConfig.relative_pose_5dof_estimation_approach", v24, "Approach for estimating the 5DOF relative pose in dynamic motion intialization.");
  *(_QWORD *)__p = nullsub_1(a2);
  v26 = operator new();
  *(_QWORD *)(v26 + 109) = 0;
  *(_OWORD *)(v26 + 80) = 0u;
  *(_OWORD *)(v26 + 96) = 0u;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)(v26 + 64) = 0u;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_QWORD *)v26 = &off_24C9F7540;
  *(_QWORD *)(v26 + 8) = &unk_24C9F75B8;
  *(_QWORD *)(v26 + 152) = &unk_24C9F75E0;
  *(_QWORD *)(v26 + 176) = 0;
  *(_QWORD *)(v26 + 184) = 0;
  *(_QWORD *)(v26 + 120) = (char *)off_24C9F7758 + 1;
  *(_QWORD *)(v26 + 128) = a1 + 152;
  v27 = operator new();
  *(_QWORD *)v27 = &off_24C9F7720;
  *(_DWORD *)(v27 + 8) = *(_DWORD *)(a1 + 152);
  *(_QWORD *)(v26 + 160) = v27;
  *(_QWORD *)(v26 + 168) = 0x6E776F6E6B6E75;
  *(_BYTE *)(v26 + 191) = 7;
  sub_20E8B2F9C((uint64_t *)__p, "DynamicMotionInitializationConfig.solver_relative_pose_estimation_from_3d_3d_correspondences", v26, "Solver for 6DOF relative pose estimation from 3D-3D correspondences.");
  *(_QWORD *)__p = nullsub_1(a2);
  v28 = sub_20EAA14D8((_BYTE *)(a1 + 156));
  sub_20E8B2F9C((uint64_t *)__p, "DynamicMotionInitializationConfig.use_refined_points_for_relative_pose_estimation", v28, "Use the refined instead of the triangulated points in relative pose estimation.");
  *(_QWORD *)__p = nullsub_1(a2);
  v29 = sub_20EA9DB90((double *)(a1 + 160));
  sub_20E8B2F9C((uint64_t *)__p, "DynamicMotionInitializationConfig.relative_position_estimate_mean_squared_error_threshold", v29, "Threshold for the maximum mean squared error in relative position estimate (m^2). ");
  *(_QWORD *)__p = nullsub_1(a2);
  v30 = sub_20EA9DB90((double *)(a1 + 168));
  sub_20E8B2F9C((uint64_t *)__p, "DynamicMotionInitializationConfig.nominal_gravity_magnitude", v30, "Nominal gravity magnitude (m/s^2).");
  *(_QWORD *)__p = nullsub_1(a2);
  v31 = sub_20EA9DB90((double *)(a1 + 176));
  sub_20E8B2F9C((uint64_t *)__p, "DynamicMotionInitializationConfig.gravity_magnitude_difference_threshold", v31, "Threshold for the maximum difference between estimated and nominal gravity magnitude for the initialization to be considered a success (m/s^2).");
  *(_QWORD *)__p = nullsub_1(a2);
  v32 = sub_20EA9DB90((double *)(a1 + 184));
  sub_20E8B2F9C((uint64_t *)__p, "DynamicMotionInitializationConfig.initial_velocity_magnitude_threshold", v32, "Threshold for the maximum estimated initial velocity magnitude for the initialization to be considered a success (m/s).");
  *(_QWORD *)__p = nullsub_1(a2);
  v33 = sub_20EA9DB90((double *)(a1 + 192));
  return sub_20E8B2F9C((uint64_t *)__p, "DynamicMotionInitializationConfig.estimated_scale_threshold", v33, "Threshold for the maximum estimated scale in monocular DMI for the initialization to be considered a success (m).");
}

void sub_20EFFE260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  sub_20E869298(v28);
  _Unwind_Resume(a1);
}

void sub_20EFFE3A4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20EFFE8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20EFFE9B8(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20EFFE9D8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20EFFE9F8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20EFFEA00(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20EFFEA08(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

char **sub_20EFFEA60(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  const char *v5;
  char **v6;
  char **result;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  v5 = (const char *)(*(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (v5 == (const char *)(0x80000002103996EFLL & 0x7FFFFFFFFFFFFFFFLL)
    || !strcmp(v5, (const char *)(0x80000002103996EFLL & 0x7FFFFFFFFFFFFFFFLL)))
  {
    v6 = (char **)(*a2 + 8);
    result = *(char ***)(a1 + 16);
    if (!result)
      goto LABEL_11;
  }
  else
  {
    v6 = 0;
    result = *(char ***)(a1 + 16);
    if (!result)
      goto LABEL_11;
  }
  if (result != v6)
    result = (char **)sub_20E867E00(result, *v6, v6[1], (v6[1] - *v6) >> 2);
LABEL_11:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_619;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (char **)(*(uint64_t (**)(uint64_t, char **))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20EFFEB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFFEB88(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F6E68;
  *(_QWORD *)(a1 + 8) = &unk_24C9F6EE0;
  *(_QWORD *)(a1 + 152) = &unk_24C9F6F08;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20EFFF38C(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20EFFF38C(a1);
}

void sub_20EFFEBF0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F6E68;
  *(_QWORD *)(a1 + 8) = &unk_24C9F6EE0;
  *(_QWORD *)(a1 + 152) = &unk_24C9F6F08;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20EFFF38C(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

uint64_t sub_20EFFEC6C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  int v15;
  unint64_t v16;
  char *v17;
  void **v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _DWORD *v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  void **v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  void *__p;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  std::bad_cast v49;

  v3 = a3;
  if (*a3 != a3[1] || (v41 = *(_QWORD *)(a1 + 80)) == 0)
  {
    v5 = (_QWORD *)*a2;
    if (*a2)
      goto LABEL_3;
    v5 = (_QWORD *)operator new();
    *v5 = &off_24C9F7048;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = 0;
    v43 = (_QWORD *)*a2;
    *a2 = (uint64_t)v5;
    if (!v43 || ((*(void (**)(_QWORD *))(*v43 + 8))(v43), (v5 = (_QWORD *)*a2) != 0))
LABEL_3:
      v6 = (*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    else
      v6 = MEMORY[0x24BEDB7C8];
    result = *(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == (0x80000002103996EFLL & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)(0x80000002103996EFLL & 0x7FFFFFFFFFFFFFFFLL)),
          !(_DWORD)result))
    {
      v8 = *a2 + 8;
      v9 = *v3;
      if (v3[1] == *v3)
        return result;
    }
    else
    {
      v8 = 0;
      v9 = *v3;
      if (v3[1] == *v3)
        return result;
    }
    v10 = 0;
    v11 = 0;
    v12 = MEMORY[0x24BEDB7A0];
    v44 = v3;
    while (1)
    {
      v48 = 0;
      __p = 0;
      v46 = 0;
      v47 = 0;
      v46 = sub_20E8ADE68((uint64_t *)&__p, (__int128 *)(v9 + 24 * v10));
      sub_20EAA0C18((uint64_t *)&v48, &__p);
      if (v48)
      {
        v13 = (const char *)(*(_QWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v48 + 16))(v48) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v14 = (const char *)(*(_QWORD *)(v12 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (v13 == v14)
          goto LABEL_16;
      }
      else
      {
        v13 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7C8] + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v14 = (const char *)(*(_QWORD *)(v12 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (v13 == v14)
          goto LABEL_16;
      }
      if (strcmp(v13, v14))
      {
        v49.__vftable = 0;
        std::bad_cast::bad_cast(&v49);
        v49.__vftable = (std::bad_cast_vtbl *)&unk_24C9C3120;
        sub_20EAA40CC();
      }
LABEL_16:
      v15 = v48[2];
      v17 = *(char **)(v8 + 8);
      v16 = *(_QWORD *)(v8 + 16);
      if ((unint64_t)v17 >= v16)
      {
        v19 = v12;
        v20 = *(char **)v8;
        v21 = (uint64_t)&v17[-*(_QWORD *)v8];
        v22 = v21 >> 2;
        v23 = (v21 >> 2) + 1;
        if (v23 >> 62)
          sub_20E867F44();
        v24 = v16 - (_QWORD)v20;
        if (v24 >> 1 > v23)
          v23 = v24 >> 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          if (v25 >> 62)
            sub_20E877A38();
          v26 = operator new(4 * v25);
          v27 = &v26[4 * v22];
          *v27 = v15;
          v28 = (uint64_t)(v27 + 1);
          v29 = v17 - v20;
          if (v17 != v20)
          {
LABEL_28:
            v30 = v29 - 4;
            if (v30 < 0x2C)
              goto LABEL_61;
            if ((unint64_t)(v17 - &v26[v21]) < 0x20)
              goto LABEL_61;
            v31 = (v30 >> 2) + 1;
            v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
            v33 = &v17[-v32];
            v27 = (_DWORD *)((char *)v27 - v32);
            v34 = &v26[4 * v22 - 16];
            v35 = v17 - 16;
            v36 = v31 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v37 = *(_OWORD *)v35;
              *(v34 - 1) = *((_OWORD *)v35 - 1);
              *v34 = v37;
              v34 -= 2;
              v35 -= 32;
              v36 -= 8;
            }
            while (v36);
            v17 = v33;
            if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_61:
              do
              {
                v38 = *((_DWORD *)v17 - 1);
                v17 -= 4;
                *--v27 = v38;
              }
              while (v17 != v20);
            }
          }
        }
        else
        {
          v26 = 0;
          v27 = (_DWORD *)(4 * v22);
          *(_DWORD *)(4 * v22) = v15;
          v28 = 4 * v22 + 4;
          v29 = v17 - v20;
          if (v17 != v20)
            goto LABEL_28;
        }
        *(_QWORD *)v8 = v27;
        *(_QWORD *)(v8 + 8) = v28;
        *(_QWORD *)(v8 + 16) = &v26[4 * v25];
        if (v20)
          operator delete(v20);
        v12 = v19;
        v3 = v44;
        v18 = (void **)__p;
        *(_QWORD *)(v8 + 8) = v28;
        if (!v18)
          goto LABEL_47;
LABEL_40:
        v39 = (void **)v46;
        v40 = v18;
        if ((void **)v46 != v18)
        {
          do
          {
            if (*((char *)v39 - 1) < 0)
              operator delete(*(v39 - 3));
            v39 -= 3;
          }
          while (v39 != v18);
          v40 = __p;
        }
        v46 = (uint64_t)v18;
        operator delete(v40);
        goto LABEL_47;
      }
      *(_DWORD *)v17 = v15;
      *(_QWORD *)(v8 + 8) = v17 + 4;
      v18 = (void **)__p;
      if (__p)
        goto LABEL_40;
LABEL_47:
      result = (uint64_t)v48;
      if (v48)
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
      v9 = *v3;
      v10 = ++v11;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3) <= v11)
        return result;
    }
  }
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
  result = *a2;
  *a2 = v42;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20EFFF08C(_Unwind_Exception *a1, int a2, _QWORD *a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  va_list va;

  va_start(va, a3);
  sub_20E89FB98((void **)va);
  v7 = *(_QWORD *)(v4 - 104);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_20E8B898C((void **)va, *a3 + 24 * v3);
    sub_20EA9ED20((uint64_t)va);
  }
  _Unwind_Resume(a1);
}

void sub_20EFFF100(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20EFFF118);
}

void *sub_20EFFF124()
{
  return &unk_24C9F7028;
}

uint64_t sub_20EFFF130(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20EFFF138()
{
  return &unk_24C9F7028;
}

uint64_t sub_20EFFF144(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F6E68;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F6EE0;
  *(_QWORD *)(a1 + 144) = &unk_24C9F6F08;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20EFFF38C(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EFFF38C(v2);
}

void sub_20EFFF1B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F6E68;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F6EE0;
  *(_QWORD *)(a1 + 144) = &unk_24C9F6F08;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20EFFF38C(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EFFF238(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F6E68;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F6EE0;
  *(_QWORD *)a1 = &unk_24C9F6F08;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20EFFF38C(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20EFFF38C(v2);
}

void sub_20EFFF2A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F6E68;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F6EE0;
  *(_QWORD *)a1 = &unk_24C9F6F08;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20EFFF38C(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20EFFF32C(uint64_t a1)
{
  return a1 + 16;
}

void sub_20EFFF338(uint64_t a1)
{
  sub_20EFFF38C(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFFF35C(uint64_t a1)
{
  return sub_20EFFF38C(a1 - 8);
}

void sub_20EFFF364(uint64_t a1)
{
  sub_20EFFF38C(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EFFF38C(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9F6FA0;
  *(_QWORD *)(a1 + 8) = &unk_24C9F7010;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_20EFFF458(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20EFFF488(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

void *sub_20EFFF4C8()
{
  return &unk_24C9F7028;
}

_QWORD *sub_20EFFF4D4(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  *v2 = &off_24C9F7048;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      sub_20E867F44();
    v6 = (char *)operator new(v3 - v4);
    v2[1] = v6;
    v7 = &v6[4 * (v5 >> 2)];
    v2[3] = v7;
    memcpy(v6, v4, v5);
    v2[2] = v7;
  }
  return v2;
}

void sub_20EFFF574(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x212BC6398](v1, 0x91C4089455612);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFFF5A8(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F7090;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentINSt3__16vectorIjNS0_9allocatorIjEEEEEP"
                                      "N5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentINSt3__16vectorIjNS0_9allocatorIjEEEEEPN5boost15program_options11typed_valueIT_cEERS8_EUlRKS4_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

char **sub_20EFFF654(char ***a1, char **a2)
{
  char **result;

  result = *a1;
  if (result != a2)
    return (char **)sub_20E867E00(result, *a2, a2[1], (a2[1] - *a2) >> 2);
  return result;
}

void sub_20EFFF678(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20EFFFB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20EFFFC8C(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20EFFFCAC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20EFFFCCC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20EFFFCD4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20EFFFCDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20EFFFD34(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3vio8odometry38RelativePoseEstimation6DOFApproachTypeE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3vio8odometry38RelativePoseEstimation6DOFApproachTypeE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_DWORD *)(*a2 + 8);
    v7 = *(_DWORD **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_DWORD **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_620;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _DWORD *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20EFFFE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EFFFE40(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F70B0;
  *(_QWORD *)(a1 + 8) = &unk_24C9F7128;
  *(_QWORD *)(a1 + 152) = &unk_24C9F7150;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F000604(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F000604(a1);
}

void sub_20EFFFEA8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F70B0;
  *(_QWORD *)(a1 + 8) = &unk_24C9F7128;
  *(_QWORD *)(a1 + 152) = &unk_24C9F7150;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F000604(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20EFFFF24(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  char *v12;
  void **v13;
  char *v14;
  std::ios_base *v15;
  std::bad_cast_vtbl *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  void *v20;
  uint64_t v21;
  BOOL v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  std::runtime_error *exception;
  void *__p[2];
  uint64_t v29;
  std::bad_cast v30;
  void *v31;
  std::ios_base v32;
  uint64_t v33;
  int v34;
  _QWORD __sb[8];
  std::string v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;

  if (*a3 == a3[1])
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v9 = *a2;
      *a2 = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v5 = (char *)sub_20E8B850C(a3, 0);
  if (v5[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v29 = *((_QWORD *)v5 + 2);
    *(_OWORD *)__p = v6;
  }
  v10 = (char *)HIBYTE(v29);
  v11 = (void **)__p[0];
  v12 = (char *)__p[1];
  std::streambuf::basic_streambuf();
  v13 = __p;
  if ((char)v10 >= 0)
  {
    v14 = v10;
  }
  else
  {
    v13 = v11;
    v14 = v12;
  }
  __sb[0] = &off_24C9C2750;
  __sb[2] = v13;
  __sb[3] = v13;
  __sb[4] = &v14[(_QWORD)v13];
  v31 = 0;
  v32.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v30.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB820] + 24);
  std::ios_base::init(&v32, __sb);
  v33 = 0;
  v34 = -1;
  v15 = (std::ios_base *)((char *)&v30 + (unint64_t)v30.__vftable[-1].~bad_cast);
  v15->__exceptions_ = 1;
  std::ios_base::clear(v15, v15->__rdstate_);
  v16 = v30.__vftable;
  *(_DWORD *)((char *)&v30 + (unint64_t)v30.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
  *(std::ios_base_vtbl **)((char *)&v32.__vftable + (unint64_t)v16[-1].~bad_cast) = (std::ios_base_vtbl *)6;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  sub_20EA94AF4((uint64_t *)&v30, (uint64_t)&v37);
  v17 = HIBYTE(v39);
  if (v39 < 0)
    v17 = v38;
  if (v17 != 23)
    goto LABEL_33;
  v18 = (void **)&v37;
  if (v39 < 0)
    v18 = v37;
  v19 = *v18;
  v20 = v18[1];
  v21 = *(uint64_t *)((char *)v18 + 15);
  v22 = v19 == (void *)0x443344336D6F7246 && v20 == (void *)0x6F70736572726F43;
  if (!v22 || v21 != 0x7365636E65646E6FLL)
  {
LABEL_33:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(v39) < 0)
    operator delete(v37);
  if ((*((_BYTE *)&v32.__precision_ + (unint64_t)v30.__vftable[-1].~bad_cast) & 5) != 0)
  {
    std::istream::~istream();
    std::streambuf::~streambuf();
LABEL_35:
    std::bad_cast::bad_cast(&v30);
    v30.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v31 = &unk_24C9AB9F0;
    v32.__vftable = (std::ios_base_vtbl *)&unk_24C9F7270;
    sub_20EA9F254((uint64_t)&v30);
  }
  v24 = std::istream::get();
  std::istream::~istream();
  std::streambuf::~streambuf();
  if (v24 != -1)
    goto LABEL_35;
  v25 = operator new();
  *(_QWORD *)v25 = &off_24C9F7290;
  *(_DWORD *)(v25 + 8) = 0;
  v26 = *a2;
  *a2 = v25;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
}

void sub_20F0002F0()
{
  JUMPOUT(0x20F0002FCLL);
}

void sub_20F000308()
{
  uint64_t v0;

  MEMORY[0x212BC6290](v0);
  JUMPOUT(0x20F000318);
}

void sub_20F000324(void *a1, int a2)
{
  uint64_t v2;
  _BYTE v3[344];

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_20E8B898C(v3, &v2);
    sub_20EA9ED20(v3);
  }
  JUMPOUT(0x20F000380);
}

void sub_20F000330(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  JUMPOUT(0x20F000340);
}

void sub_20F000368(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F000380);
}

void *sub_20F00039C()
{
  return &unk_24C9F7270;
}

uint64_t sub_20F0003A8(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F0003B0()
{
  return &unk_24C9F7270;
}

uint64_t sub_20F0003BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F70B0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F7128;
  *(_QWORD *)(a1 + 144) = &unk_24C9F7150;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F000604(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F000604(v2);
}

void sub_20F00042C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F70B0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F7128;
  *(_QWORD *)(a1 + 144) = &unk_24C9F7150;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F000604(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F0004B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F70B0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F7128;
  *(_QWORD *)a1 = &unk_24C9F7150;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F000604(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F000604(v2);
}

void sub_20F000520(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F70B0;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F7128;
  *(_QWORD *)a1 = &unk_24C9F7150;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F000604(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F0005A4(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F0005B0(uint64_t a1)
{
  sub_20F000604(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F0005D4(uint64_t a1)
{
  return sub_20F000604(a1 - 8);
}

void sub_20F0005DC(uint64_t a1)
{
  sub_20F000604(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F000604(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9F71E8;
  *(_QWORD *)(a1 + 8) = &unk_24C9F7258;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20F0006D4()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20F0006E8()
{
  return &unk_24C9F7270;
}

uint64_t sub_20F0006F4(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9F7290;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_20F00073C(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F72D8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio8odometry38RelativePoseEstim"
                                      "ation6DOFApproachTypeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio8odometry38RelativePoseEstimation6DOFApproachTypeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_DWORD **sub_20F0007E8(_DWORD **result, _DWORD *a2)
{
  **result = *a2;
  return result;
}

void sub_20F0007F8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F000D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F000E0C(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F000E2C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F000E4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F000E54(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F000E5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20F000EB4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3vio8odometry38RelativePoseEstimation5DOFApproachTypeE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3vio8odometry38RelativePoseEstimation5DOFApproachTypeE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_DWORD *)(*a2 + 8);
    v7 = *(_DWORD **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_DWORD **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_622;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _DWORD *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F000FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F000FC0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F72F8;
  *(_QWORD *)(a1 + 8) = &unk_24C9F7370;
  *(_QWORD *)(a1 + 152) = &unk_24C9F7398;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F001784(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F001784(a1);
}

void sub_20F001028(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F72F8;
  *(_QWORD *)(a1 + 8) = &unk_24C9F7370;
  *(_QWORD *)(a1 + 152) = &unk_24C9F7398;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F001784(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20F0010A4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  char *v12;
  void **v13;
  char *v14;
  std::ios_base *v15;
  std::bad_cast_vtbl *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  void *v20;
  uint64_t v21;
  BOOL v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  std::runtime_error *exception;
  void *__p[2];
  uint64_t v29;
  std::bad_cast v30;
  void *v31;
  std::ios_base v32;
  uint64_t v33;
  int v34;
  _QWORD __sb[8];
  std::string v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;

  if (*a3 == a3[1])
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v9 = *a2;
      *a2 = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v5 = (char *)sub_20E8B850C(a3, 0);
  if (v5[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v29 = *((_QWORD *)v5 + 2);
    *(_OWORD *)__p = v6;
  }
  v10 = (char *)HIBYTE(v29);
  v11 = (void **)__p[0];
  v12 = (char *)__p[1];
  std::streambuf::basic_streambuf();
  v13 = __p;
  if ((char)v10 >= 0)
  {
    v14 = v10;
  }
  else
  {
    v13 = v11;
    v14 = v12;
  }
  __sb[0] = &off_24C9C2750;
  __sb[2] = v13;
  __sb[3] = v13;
  __sb[4] = &v14[(_QWORD)v13];
  v31 = 0;
  v32.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v30.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB820] + 24);
  std::ios_base::init(&v32, __sb);
  v33 = 0;
  v34 = -1;
  v15 = (std::ios_base *)((char *)&v30 + (unint64_t)v30.__vftable[-1].~bad_cast);
  v15->__exceptions_ = 1;
  std::ios_base::clear(v15, v15->__rdstate_);
  v16 = v30.__vftable;
  *(_DWORD *)((char *)&v30 + (unint64_t)v30.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
  *(std::ios_base_vtbl **)((char *)&v32.__vftable + (unint64_t)v16[-1].~bad_cast) = (std::ios_base_vtbl *)6;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  sub_20EA94AF4((uint64_t *)&v30, (uint64_t)&v37);
  v17 = HIBYTE(v39);
  if (v39 < 0)
    v17 = v38;
  if (v17 != 23)
    goto LABEL_33;
  v18 = (void **)&v37;
  if (v39 < 0)
    v18 = v37;
  v19 = *v18;
  v20 = v18[1];
  v21 = *(uint64_t *)((char *)v18 + 15);
  v22 = v19 == (void *)0x443244336D6F7246 && v20 == (void *)0x6F70736572726F43;
  if (!v22 || v21 != 0x7365636E65646E6FLL)
  {
LABEL_33:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(v39) < 0)
    operator delete(v37);
  if ((*((_BYTE *)&v32.__precision_ + (unint64_t)v30.__vftable[-1].~bad_cast) & 5) != 0)
  {
    std::istream::~istream();
    std::streambuf::~streambuf();
LABEL_35:
    std::bad_cast::bad_cast(&v30);
    v30.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v31 = &unk_24C9AB9F0;
    v32.__vftable = (std::ios_base_vtbl *)&unk_24C9F74B8;
    sub_20EA9F254((uint64_t)&v30);
  }
  v24 = std::istream::get();
  std::istream::~istream();
  std::streambuf::~streambuf();
  if (v24 != -1)
    goto LABEL_35;
  v25 = operator new();
  *(_QWORD *)v25 = &off_24C9F74D8;
  *(_DWORD *)(v25 + 8) = 0;
  v26 = *a2;
  *a2 = v25;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
}

void sub_20F001470()
{
  JUMPOUT(0x20F00147CLL);
}

void sub_20F001488()
{
  uint64_t v0;

  MEMORY[0x212BC6290](v0);
  JUMPOUT(0x20F001498);
}

void sub_20F0014A4(void *a1, int a2)
{
  uint64_t v2;
  _BYTE v3[344];

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_20E8B898C(v3, &v2);
    sub_20EA9ED20(v3);
  }
  JUMPOUT(0x20F001500);
}

void sub_20F0014B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  JUMPOUT(0x20F0014C0);
}

void sub_20F0014E8(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F001500);
}

void *sub_20F00151C()
{
  return &unk_24C9F74B8;
}

uint64_t sub_20F001528(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F001530()
{
  return &unk_24C9F74B8;
}

uint64_t sub_20F00153C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F72F8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F7370;
  *(_QWORD *)(a1 + 144) = &unk_24C9F7398;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F001784(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F001784(v2);
}

void sub_20F0015AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F72F8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F7370;
  *(_QWORD *)(a1 + 144) = &unk_24C9F7398;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F001784(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F001630(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F72F8;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F7370;
  *(_QWORD *)a1 = &unk_24C9F7398;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F001784(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F001784(v2);
}

void sub_20F0016A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F72F8;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F7370;
  *(_QWORD *)a1 = &unk_24C9F7398;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F001784(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F001724(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F001730(uint64_t a1)
{
  sub_20F001784(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F001754(uint64_t a1)
{
  return sub_20F001784(a1 - 8);
}

void sub_20F00175C(uint64_t a1)
{
  sub_20F001784(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F001784(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9F7430;
  *(_QWORD *)(a1 + 8) = &unk_24C9F74A0;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20F001854()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20F001868()
{
  return &unk_24C9F74B8;
}

uint64_t sub_20F001874(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9F74D8;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_20F0018BC(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F7520;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio8odometry38RelativePoseEstim"
                                      "ation5DOFApproachTypeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio8odometry38RelativePoseEstimation5DOFApproachTypeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_DWORD **sub_20F001968(_DWORD **result, _DWORD *a2)
{
  **result = *a2;
  return result;
}

void sub_20F001978(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F001E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F001F8C(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F001FAC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F001FCC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F001FD4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F001FDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20F002034(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3vio8odometry55RelativePoseEstimationFrom3D3DCorrespondencesSolverTypeE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3vio8odometry55RelativePoseEstimationFrom3D3DCorrespondencesSolverTypeE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_DWORD *)(*a2 + 8);
    v7 = *(_DWORD **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_DWORD **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_624;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _DWORD *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F00212C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F002140(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F7540;
  *(_QWORD *)(a1 + 8) = &unk_24C9F75B8;
  *(_QWORD *)(a1 + 152) = &unk_24C9F75E0;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F0028F8(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F0028F8(a1);
}

void sub_20F0021A8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F7540;
  *(_QWORD *)(a1 + 8) = &unk_24C9F75B8;
  *(_QWORD *)(a1 + 152) = &unk_24C9F75E0;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F0028F8(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20F002224(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  char *v12;
  void **v13;
  char *v14;
  std::ios_base *v15;
  std::bad_cast_vtbl *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  void *v20;
  int v21;
  BOOL v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  std::runtime_error *exception;
  void *__p[2];
  uint64_t v29;
  std::bad_cast v30;
  void *v31;
  std::ios_base v32;
  uint64_t v33;
  int v34;
  _QWORD __sb[8];
  std::string v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;

  if (*a3 == a3[1])
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v9 = *a2;
      *a2 = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v5 = (char *)sub_20E8B850C(a3, 0);
  if (v5[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v29 = *((_QWORD *)v5 + 2);
    *(_OWORD *)__p = v6;
  }
  v10 = (char *)HIBYTE(v29);
  v11 = (void **)__p[0];
  v12 = (char *)__p[1];
  std::streambuf::basic_streambuf();
  v13 = __p;
  if ((char)v10 >= 0)
  {
    v14 = v10;
  }
  else
  {
    v13 = v11;
    v14 = v12;
  }
  __sb[0] = &off_24C9C2750;
  __sb[2] = v13;
  __sb[3] = v13;
  __sb[4] = &v14[(_QWORD)v13];
  v31 = 0;
  v32.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v30.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB820] + 24);
  std::ios_base::init(&v32, __sb);
  v33 = 0;
  v34 = -1;
  v15 = (std::ios_base *)((char *)&v30 + (unint64_t)v30.__vftable[-1].~bad_cast);
  v15->__exceptions_ = 1;
  std::ios_base::clear(v15, v15->__rdstate_);
  v16 = v30.__vftable;
  *(_DWORD *)((char *)&v30 + (unint64_t)v30.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
  *(std::ios_base_vtbl **)((char *)&v32.__vftable + (unint64_t)v16[-1].~bad_cast) = (std::ios_base_vtbl *)6;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  sub_20EA94AF4((uint64_t *)&v30, (uint64_t)&v37);
  v17 = HIBYTE(v39);
  if (v39 < 0)
    v17 = v38;
  if (v17 != 18)
    goto LABEL_33;
  v18 = (void **)&v37;
  if (v39 < 0)
    v18 = v37;
  v19 = *v18;
  v20 = v18[1];
  v21 = *((unsigned __int16 *)v18 + 8);
  v22 = v19 == (void *)0x746E696F50656E4FLL && v20 == (void *)0x534E415244334433;
  if (!v22 || v21 != 17217)
  {
LABEL_33:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v36);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (SHIBYTE(v39) < 0)
    operator delete(v37);
  if ((*((_BYTE *)&v32.__precision_ + (unint64_t)v30.__vftable[-1].~bad_cast) & 5) != 0)
  {
    std::istream::~istream();
    std::streambuf::~streambuf();
LABEL_35:
    std::bad_cast::bad_cast(&v30);
    v30.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v31 = &unk_24C9AB9F0;
    v32.__vftable = (std::ios_base_vtbl *)&unk_24C9F7700;
    sub_20EA9F254((uint64_t)&v30);
  }
  v24 = std::istream::get();
  std::istream::~istream();
  std::streambuf::~streambuf();
  if (v24 != -1)
    goto LABEL_35;
  v25 = operator new();
  *(_QWORD *)v25 = &off_24C9F7720;
  *(_DWORD *)(v25 + 8) = 0;
  v26 = *a2;
  *a2 = v25;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
}

void sub_20F0025E4()
{
  JUMPOUT(0x20F0025F0);
}

void sub_20F0025FC()
{
  uint64_t v0;

  MEMORY[0x212BC6290](v0);
  JUMPOUT(0x20F00260CLL);
}

void sub_20F002618(void *a1, int a2)
{
  uint64_t v2;
  _BYTE v3[344];

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    sub_20E8B898C(v3, &v2);
    sub_20EA9ED20(v3);
  }
  JUMPOUT(0x20F002674);
}

void sub_20F002624(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  JUMPOUT(0x20F002634);
}

void sub_20F00265C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F002674);
}

void *sub_20F002690()
{
  return &unk_24C9F7700;
}

uint64_t sub_20F00269C(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F0026A4()
{
  return &unk_24C9F7700;
}

uint64_t sub_20F0026B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F7540;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F75B8;
  *(_QWORD *)(a1 + 144) = &unk_24C9F75E0;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F0028F8(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F0028F8(v2);
}

void sub_20F002720(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F7540;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F75B8;
  *(_QWORD *)(a1 + 144) = &unk_24C9F75E0;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F0028F8(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F0027A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F7540;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F75B8;
  *(_QWORD *)a1 = &unk_24C9F75E0;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F0028F8(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F0028F8(v2);
}

void sub_20F002814(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F7540;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F75B8;
  *(_QWORD *)a1 = &unk_24C9F75E0;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F0028F8(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F002898(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F0028A4(uint64_t a1)
{
  sub_20F0028F8(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F0028C8(uint64_t a1)
{
  return sub_20F0028F8(a1 - 8);
}

void sub_20F0028D0(uint64_t a1)
{
  sub_20F0028F8(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F0028F8(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9F7678;
  *(_QWORD *)(a1 + 8) = &unk_24C9F76E8;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20F0029C8()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20F0029DC()
{
  return &unk_24C9F7700;
}

uint64_t sub_20F0029E8(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9F7720;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_20F002A30(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F7768;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio8odometry55RelativePoseEstim"
                                      "ationFrom3D3DCorrespondencesSolverTypeEEPN5boost15program_options11typed_valueIT_c"
                                      "EERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio8odometry55RelativePoseEstimationFrom3D3DCorrespondencesSolverTypeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_DWORD **sub_20F002ADC(_DWORD **result, _DWORD *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20F002AEC(uint64_t a1, uint64_t a2, unsigned int a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = sub_20F0D1A84(a1, a2, a3, a4);
  v6 = v5 + 512;
  *(_OWORD *)(v5 + 576) = 0u;
  *(_OWORD *)(v5 + 592) = 0u;
  *(_OWORD *)(v5 + 544) = 0u;
  *(_OWORD *)(v5 + 560) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_OWORD *)(v5 + 528) = 0u;
  v7 = *(_QWORD *)(v5 + 488);
  v8 = *(_DWORD *)(v5 + 348);
  v9 = (3 * v8);
  v10 = (12 * v8);
  if ((_DWORD)v10)
  {
    sub_20E93D8FC(v5 + 536, v10);
    v11 = *(_QWORD *)(a1 + 512);
    v12 = v9 + 2 * v7;
    v13 = (*(_QWORD *)(a1 + 520) - v11) >> 2;
    v14 = v12 >= v13;
    v15 = v12 - v13;
    if (v12 > v13)
    {
LABEL_3:
      sub_20E93DC84(v6, v15);
      goto LABEL_7;
    }
  }
  else
  {
    v11 = 0;
    v12 = v9 + 2 * v7;
    v14 = 1;
    v15 = v12;
    if (v12)
      goto LABEL_3;
  }
  if (!v14)
    *(_QWORD *)(a1 + 520) = v11 + 4 * v12;
LABEL_7:
  v16 = *(unsigned int *)(a1 + 348);
  v17 = *(_QWORD *)(a1 + 568);
  v18 = *(_QWORD *)(a1 + 560);
  v19 = v17 - v18;
  v20 = (v17 - v18) >> 4;
  v21 = v16 - v20;
  if (v16 <= v20)
  {
    if (v16 >= v20)
      return a1;
    v37 = v18 + 16 * v16;
LABEL_31:
    *(_QWORD *)(a1 + 568) = v37;
    return a1;
  }
  v22 = *(_QWORD *)(a1 + 576);
  if (v21 <= (v22 - v17) >> 4)
  {
    v37 = v17 + 16 * v21;
    v38 = 16 * v16 - v19 - 16;
    if (v38 < 0x10)
      goto LABEL_38;
    v39 = (v38 >> 4) + 1;
    v40 = v17 + 16;
    v41 = v39 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v40 - 16) = 0;
      *(_QWORD *)v40 = 0;
      *(_DWORD *)(v40 - 8) = 0;
      *(_DWORD *)(v40 + 8) = 0;
      v40 += 32;
      v41 -= 2;
    }
    while (v41);
    v17 += 16 * (v39 & 0x1FFFFFFFFFFFFFFELL);
    if (v39 != (v39 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_38:
      do
      {
        *(_QWORD *)v17 = 0;
        *(_DWORD *)(v17 + 8) = 0;
        v17 += 16;
      }
      while (v17 != v37);
    }
    goto LABEL_31;
  }
  v23 = v22 - v18;
  v24 = (v22 - v18) >> 3;
  if (v24 <= v16)
    v24 = *(unsigned int *)(a1 + 348);
  if (v23 >= 0x7FFFFFFFFFFFFFF0)
    v25 = 0xFFFFFFFFFFFFFFFLL;
  else
    v25 = v24;
  if (v25 >> 60)
    sub_20E877A38();
  v26 = (char *)operator new(16 * v25);
  v27 = &v26[16 * v20];
  v28 = &v26[16 * v16];
  v29 = 16 * v16 - v19 - 16;
  v30 = v27;
  if (v29 < 0x10)
    goto LABEL_39;
  v31 = (v29 >> 4) + 1;
  v30 = &v27[16 * (v31 & 0x1FFFFFFFFFFFFFFELL)];
  v32 = v27 + 16;
  v33 = v31 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *((_QWORD *)v32 - 2) = 0;
    *(_QWORD *)v32 = 0;
    *((_DWORD *)v32 - 2) = 0;
    *((_DWORD *)v32 + 2) = 0;
    v32 += 32;
    v33 -= 2;
  }
  while (v33);
  if (v31 != (v31 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_39:
    do
    {
      *(_QWORD *)v30 = 0;
      *((_DWORD *)v30 + 2) = 0;
      v30 += 16;
    }
    while (v30 != v28);
  }
  v34 = &v26[16 * v25];
  if (v17 == v18)
  {
    v36 = *(void **)(a1 + 560);
    *(_QWORD *)(a1 + 560) = v27;
    *(_QWORD *)(a1 + 568) = v28;
    *(_QWORD *)(a1 + 576) = v34;
    if (!v36)
      return a1;
LABEL_33:
    operator delete(v36);
    return a1;
  }
  do
  {
    v35 = v27 - 16;
    *((_OWORD *)v27 - 1) = *(_OWORD *)(v17 - 16);
    v17 -= 16;
    v27 -= 16;
  }
  while (v17 != v18);
  v36 = *(void **)(a1 + 560);
  *(_QWORD *)(a1 + 560) = v35;
  *(_QWORD *)(a1 + 568) = v28;
  *(_QWORD *)(a1 + 576) = v34;
  if (v36)
    goto LABEL_33;
  return a1;
}

void sub_20F002D68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = (void *)v1[73];
  if (v5)
  {
    v1[74] = v5;
    operator delete(v5);
    v6 = (void *)v1[70];
    if (!v6)
    {
LABEL_3:
      v7 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v6 = (void *)v1[70];
    if (!v6)
      goto LABEL_3;
  }
  v1[71] = v6;
  operator delete(v6);
  v7 = *v3;
  if (!*v3)
  {
LABEL_4:
    v8 = *v2;
    if (!*v2)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  v1[68] = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
  {
LABEL_5:
    sub_20ED29320((uint64_t)(v1 + 21));
    sub_20ED29320((uint64_t)v1);
    _Unwind_Resume(a1);
  }
LABEL_9:
  v1[65] = v8;
  operator delete(v8);
  sub_20ED29320((uint64_t)(v1 + 21));
  sub_20ED29320((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_20F002DF4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A61918);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A61918))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A61910);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A61918);
  }
  *a1 = qword_254A61910;
}

void sub_20F002E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A61918);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A61918);
  _Unwind_Resume(a1);
}

uint64_t sub_20F002EE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X4>, double *a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v39;
  double v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  size_t v52;
  std::__shared_weak_count_vtbl *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  size_t v83;
  unsigned __int8 v84;
  const char *v85;
  size_t v86;
  _BYTE *v87;
  double *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  NSObject *v93;
  uint64_t v94;
  double *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  size_t v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  int v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  void *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unsigned int v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  BOOL v162;
  char *v163;
  size_t v164;
  const char *v165;
  unsigned __int8 v166;
  const char *v167;
  size_t v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  size_t v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  double v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  void *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  int v211;
  int v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  size_t v216;
  const char *v217;
  unsigned __int8 v218;
  unsigned __int8 v219;
  const char *v220;
  size_t v221;
  _BYTE *v222;
  const char *v223;
  int v224;
  int v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  unint64_t v230;
  NSObject *v231;
  uint64_t v232;
  uint64_t v233;
  size_t v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  double v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  void *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  char *v278;
  char *category;
  int categorya;
  char *categoryb;
  _QWORD **__src;
  unsigned int __srca;
  const char *__srcb;
  char *v285;
  char *v286;
  char *v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  char *v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unint64_t v298;
  unint64_t v299;
  char *v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303[2];
  uint64_t v304[2];
  uint64_t *v305;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v307;
  int v308;
  const char *v309;
  int v310;
  const char *v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  uint64_t v314;
  double v315;
  double v316;
  double v317;
  double v318;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  _BYTE v327[48];
  __int128 v328;
  uint64_t v329;
  uint64_t v330;

  v330 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v301 = a2;
  v293 = sub_20F17608C(*(_QWORD *)(a2 + 56) + 168 * a3, a1 + 48, a1, 0, 0, (_QWORD *)(a1 + 72), 1u, a5, a4, 1u, 0);
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  v14 = (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3) >> 1;
  v15 = *(_QWORD *)(a1 + 584);
  v16 = (*(_QWORD *)(a1 + 592) - v15) >> 3;
  if (5 * v14 <= v16)
  {
    if (5 * v14 < v16)
      *(_QWORD *)(a1 + 592) = v15 + 40 * v14;
  }
  else
  {
    sub_20E93D8FC(a1 + 584, 5 * v14 - v16);
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 152) = 0;
  v17 = *(_DWORD *)(a1 + 364);
  if (v17 != 1)
  {
    if (v17)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/EpipolarOutlierRejection.cpp", 173, (uint64_t)"", 0, (uint64_t)"BAFilter] prepare_to_optimize failed", 36, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    sub_20F002DF4(&v314);
    if (**(int **)(v314 + 56) > 3)
      goto LABEL_85;
    v18 = *(unsigned __int8 *)(v314 + 72);
    __src = (_QWORD **)sub_20E8C31DC(v314, "OSLogSurrogateAppender", 1, 0);
    if (!v18 && !__src)
      goto LABEL_85;
    v294 = a4;
    v305 = &v314;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v307 = std::chrono::system_clock::now().__d_.__rep_;
    v308 = 3;
    v309 = "unknown file";
    v310 = 128;
    v312 = 0;
    v313 = 0;
    v311 = "unknown function";
    v274 = v314;
    if (*(char *)(v314 + 39) < 0)
    {
      v19 = *(_QWORD *)(v314 + 24);
      category = *(char **)(v314 + 16);
    }
    else
    {
      v19 = *(unsigned __int8 *)(v314 + 39);
      category = (char *)(v314 + 16);
    }
    v272 = v314 + 16;
    v276 = v18;
    v289 = a3;
    v41 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v327);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v327);
      if (v327[24] && (v327[23] & 0x80000000) != 0)
        operator delete(*(void **)v327);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v42 = byte_254A4A4F8;
    else
      v42 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v43 = byte_254A4A4F8[23];
    else
      v43 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v327 = os_log_create(v42, category);
    v44 = &v327[8];
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v43 >= 0x17)
    {
      v285 = (char *)v14;
      v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v45 = v43 | 7;
      v46 = v45 + 1;
      v44 = operator new(v45 + 1);
      *(_QWORD *)&v327[16] = v43;
      *(_QWORD *)&v327[24] = v46 | 0x8000000000000000;
      *(_QWORD *)&v327[8] = v44;
      v14 = (unint64_t)v285;
    }
    else
    {
      v327[31] = v43;
      if (!v43)
      {
LABEL_29:
        v44[v43] = 0;
        v327[32] = 1;
        v47 = &v327[40];
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        a3 = v289;
        if (v19 >= 0x17)
        {
          v48 = v14;
          v49 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v49 = v19 | 7;
          v50 = v49 + 1;
          v47 = operator new(v49 + 1);
          *(_QWORD *)&v328 = v19;
          *((_QWORD *)&v328 + 1) = v50 | 0x8000000000000000;
          *(_QWORD *)&v327[40] = v47;
          v14 = v48;
        }
        else
        {
          HIBYTE(v328) = v19;
          if (!v19)
            goto LABEL_37;
        }
        memmove(v47, category, v19);
LABEL_37:
        v47[v19] = 0;
        LOBYTE(v329) = 1;
        v51 = *(NSObject **)v327;
        if (SHIBYTE(v328) < 0)
          operator delete(*(void **)&v327[40]);
        if (v327[32] && (v327[31] & 0x80000000) != 0)
          operator delete(*(void **)&v327[8]);
        if (*(_QWORD *)v327)
          os_release(*(void **)v327);
        if (__src && __src[3])
        {
          v52 = _os_log_pack_size();
          v53 = (std::__shared_weak_count_vtbl *)operator new(v52, (std::align_val_t)8uLL);
          v54 = (std::__shared_weak_count *)operator new();
          v55 = v54;
          v54->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v54->__shared_owners_;
          v54->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v54->__shared_weak_owners_ = 0;
          v54[1].__vftable = v53;
          *(_QWORD *)v327 = v53;
          *(_QWORD *)&v327[8] = v53;
          *(_QWORD *)&v327[16] = v54;
          do
            v57 = __ldxr(p_shared_owners);
          while (__stxr(v57 + 1, p_shared_owners));
          memset(&v327[24], 0, 24);
          do
            v58 = __ldaxr(p_shared_owners);
          while (__stlxr(v58 - 1, p_shared_owners));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v55);
          }
          v59 = *(_QWORD *)v327;
          *(_WORD *)_os_log_pack_fill() = 0;
          v60 = operator new();
          v61 = *(unsigned __int8 *)(v274 + 39);
          v62 = v272;
          if ((v61 & 0x80u) != 0)
          {
            v62 = *(_QWORD *)(v274 + 16);
            v61 = *(_QWORD *)(v274 + 24);
          }
          *(_QWORD *)v60 = v59;
          *(_OWORD *)(v60 + 8) = *(_OWORD *)&v327[8];
          *(_QWORD *)&v327[8] = 0;
          *(_QWORD *)&v327[16] = 0;
          *(_OWORD *)(v60 + 24) = *(_OWORD *)&v327[24];
          *(_QWORD *)&v327[24] = 0;
          *(_QWORD *)&v327[32] = 0;
          *(_QWORD *)(v60 + 40) = v62;
          *(_QWORD *)(v60 + 48) = v61;
          *(_BYTE *)(v60 + 56) = 1;
          v303[0] = 0;
          v304[0] = v60;
          (*(void (**)(_QWORD *, uint64_t *))(*__src[3] + 40))(__src[3], v304);
          v63 = v304[0];
          v304[0] = 0;
          a3 = v289;
          if (v63)
          {
            v64 = *(std::__shared_weak_count **)(v63 + 32);
            if (v64)
            {
              v65 = (unint64_t *)&v64->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
            v67 = *(std::__shared_weak_count **)(v63 + 16);
            if (v67)
            {
              v68 = (unint64_t *)&v67->__shared_owners_;
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            MEMORY[0x212BC6398](v63, 0x10F0C40B62ED6C6);
            v303[0] = 0;
          }
          v70 = *(std::__shared_weak_count **)&v327[32];
          a4 = v294;
          if (*(_QWORD *)&v327[32])
          {
            v71 = (unint64_t *)(*(_QWORD *)&v327[32] + 8);
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          v73 = *(std::__shared_weak_count **)&v327[16];
          if (*(_QWORD *)&v327[16])
          {
            v74 = (unint64_t *)(*(_QWORD *)&v327[16] + 8);
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
        }
        else
        {
          os_log_type_enabled(v51, OS_LOG_TYPE_INFO);
          *(_WORD *)v327 = 0;
          v76 = (void *)_os_log_send_and_compose_impl();
          a4 = v294;
          if (v76)
            free(v76);
        }
        if (v276)
        {
          sub_20E8C003C((uint64_t)&v305, "Using five-point algorithm");
          sub_20E863570((uint64_t)&v305);
        }
        sub_20E863570((uint64_t)&v305);
        v77 = v313;
        if (v313)
        {
          v78 = (unint64_t *)&v313->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
LABEL_85:
        sub_2100F2FEC(a7, (uint64_t)&v318, *(_QWORD *)a1, *(_QWORD *)(a1 + 48), v14, (uint64_t *)(a1 + 536), (int32x4_t **)(a1 + 512), (uint64_t *)(a1 + 560), *(double *)(a1 + 504), *(unsigned int *)(a1 + 348), *(unsigned int *)(a1 + 352), *(unsigned int *)(a1 + 356));
        goto LABEL_86;
      }
    }
    memmove(v44, v42, v43);
    goto LABEL_29;
  }
  v20 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v305 = *(uint64_t **)a1;
  rep = v20;
  v21 = (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3;
  v304[0] = *(_QWORD *)(a1 + 48);
  v304[1] = v21;
  v22 = (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3;
  v303[0] = *(_QWORD *)(a1 + 72);
  v303[1] = v22;
  v23 = *(_OWORD *)a6;
  v24 = *((_OWORD *)a6 + 1);
  v25 = *((_OWORD *)a6 + 2);
  v26 = *((_OWORD *)a6 + 3);
  v329 = *((_QWORD *)a6 + 8);
  *(_OWORD *)&v327[32] = v25;
  v328 = v26;
  *(_OWORD *)v327 = v23;
  *(_OWORD *)&v327[16] = v24;
  sub_2100F17B4(&v315, (uint64_t *)&v305, v304, v303, v14, (uint64_t)v327, *(_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3, *(double *)(a1 + 504), *(int32x4_t **)(a1 + 512), (uint64_t)(*(_QWORD *)(a1 + 520) - *(_QWORD *)(a1 + 512)) >> 2, *(_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a1 + 568) - *(_QWORD *)(a1 + 560)) >> 4, *(_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3, *(_QWORD *)(a1 + 348), *(_DWORD *)(a1 + 356));
  v27 = *a6;
  v28 = a6[1];
  *(double *)a7 = *a6;
  *(double *)(a7 + 8) = v28;
  v29 = a6[2];
  v30 = a6[3];
  v31 = a6[4];
  v32 = a6[5];
  *(double *)(a7 + 32) = v30;
  *(double *)(a7 + 40) = v31;
  v33 = a6[6];
  v34 = a6[7];
  *(double *)(a7 + 64) = v33;
  *(double *)(a7 + 72) = v34;
  v35 = v315;
  v36 = v316;
  v37 = v317;
  v38 = v33 * v316 - v30 * v317;
  *(double *)&v39 = v34 * v316 - v31 * v317;
  v40 = a6[8];
  *(double *)(a7 + 16) = v29;
  *(double *)(a7 + 24) = v35;
  *(double *)(a7 + 48) = v32;
  *(double *)(a7 + 56) = v36;
  *(double *)(a7 + 80) = v40;
  *(double *)(a7 + 88) = v37;
  v318 = v38;
  v319 = v39;
  v320 = v40 * v36 - v32 * v37;
  v321 = v27 * v37 - v33 * v35;
  v322 = v28 * v37 - v34 * v35;
  v323 = v29 * v37 - v40 * v35;
  v324 = v30 * v35 - v27 * v36;
  v325 = v31 * v35 - v28 * v36;
  v326 = v32 * v35 - v29 * v36;
LABEL_86:
  v80 = sub_20F0D40AC(&v318, (uint64_t *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 72), (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 120), (uint64_t *)(a1 + 144), *(double *)(a1 + 504));
  sub_20F002DF4(&v314);
  if (**(int **)(v314 + 56) > 3)
    goto LABEL_175;
  v81 = *(unsigned __int8 *)(v314 + 72);
  v298 = sub_20E8C31DC(v314, "OSLogSurrogateAppender", 1, 0);
  if (!v81 && !v298)
    goto LABEL_175;
  v295 = a4;
  v305 = &v314;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v307 = std::chrono::system_clock::now().__d_.__rep_;
  v308 = 3;
  v309 = "unknown file";
  v310 = 183;
  v312 = 0;
  v313 = 0;
  v311 = "unknown function";
  v82 = *v305;
  v275 = *v305 + 16;
  v277 = *v305;
  if (*(char *)(*v305 + 39) < 0)
  {
    v83 = *(_QWORD *)(v82 + 24);
    v286 = *(char **)(v82 + 16);
  }
  else
  {
    v83 = *(unsigned __int8 *)(*v305 + 39);
    v286 = (char *)(*v305 + 16);
  }
  categorya = v81;
  __srca = v80;
  v290 = a3;
  v84 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v84 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v327);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v327);
    if (v327[24] && (v327[23] & 0x80000000) != 0)
      operator delete(*(void **)v327);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v85 = byte_254A4A4F8;
  else
    v85 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v86 = byte_254A4A4F8[23];
  else
    v86 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v327 = os_log_create(v85, v286);
  v87 = &v327[8];
  if (v86 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v86 >= 0x17)
  {
    v273 = a5;
    v88 = a6;
    v89 = v14;
    v90 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v86 | 7) != 0x17)
      v90 = v86 | 7;
    v91 = v90 + 1;
    v87 = operator new(v90 + 1);
    *(_QWORD *)&v327[16] = v86;
    *(_QWORD *)&v327[24] = v91 | 0x8000000000000000;
    *(_QWORD *)&v327[8] = v87;
    v14 = v89;
    a6 = v88;
    a5 = v273;
    goto LABEL_106;
  }
  v327[31] = v86;
  if (v86)
LABEL_106:
    memmove(v87, v85, v86);
  v87[v86] = 0;
  v327[32] = 1;
  v92 = &v327[40];
  if (v83 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  a3 = v290;
  if (v83 >= 0x17)
  {
    v94 = a5;
    v95 = a6;
    v96 = v14;
    v97 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v83 | 7) != 0x17)
      v97 = v83 | 7;
    v98 = v97 + 1;
    v92 = operator new(v97 + 1);
    *(_QWORD *)&v328 = v83;
    *((_QWORD *)&v328 + 1) = v98 | 0x8000000000000000;
    *(_QWORD *)&v327[40] = v92;
    v14 = v96;
    a6 = v95;
    a5 = v94;
    v80 = __srca;
  }
  else
  {
    HIBYTE(v328) = v83;
    v80 = __srca;
    if (!v83)
    {
      v327[40] = 0;
      LOBYTE(v329) = 1;
      v93 = *(NSObject **)v327;
      if ((SHIBYTE(v328) & 0x80000000) == 0)
        goto LABEL_111;
      goto LABEL_117;
    }
  }
  memmove(v92, v286, v83);
  v92[v83] = 0;
  LOBYTE(v329) = 1;
  v93 = *(NSObject **)v327;
  if ((SHIBYTE(v328) & 0x80000000) == 0)
  {
LABEL_111:
    if (!v327[32])
      goto LABEL_120;
LABEL_118:
    if ((v327[31] & 0x80000000) != 0)
      operator delete(*(void **)&v327[8]);
    goto LABEL_120;
  }
LABEL_117:
  operator delete(*(void **)&v327[40]);
  if (v327[32])
    goto LABEL_118;
LABEL_120:
  v287 = (char *)v14;
  if (*(_QWORD *)v327)
    os_release(*(void **)v327);
  v99 = v80;
  if (v298 && *(_QWORD *)(v298 + 24))
  {
    v100 = _os_log_pack_size();
    v101 = (std::__shared_weak_count_vtbl *)operator new(v100, (std::align_val_t)8uLL);
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v102;
    v102->__shared_owners_ = 0;
    v104 = (unint64_t *)&v102->__shared_owners_;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v101;
    *(_QWORD *)v327 = v101;
    *(_QWORD *)&v327[8] = v101;
    *(_QWORD *)&v327[16] = v102;
    do
      v105 = __ldxr(v104);
    while (__stxr(v105 + 1, v104));
    memset(&v327[24], 0, 24);
    do
      v106 = __ldaxr(v104);
    while (__stlxr(v106 - 1, v104));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v103);
    }
    v107 = *(_QWORD *)v327;
    v108 = _os_log_pack_fill();
    v109 = *(_QWORD *)(a1 + 504);
    *(_DWORD *)v108 = 134218496;
    *(_QWORD *)(v108 + 4) = v80;
    *(_WORD *)(v108 + 12) = 2048;
    *(_QWORD *)(v108 + 14) = v287;
    *(_WORD *)(v108 + 22) = 2048;
    *(_QWORD *)(v108 + 24) = v109;
    v110 = operator new();
    v111 = *(unsigned __int8 *)(v277 + 39);
    v112 = v275;
    if ((v111 & 0x80u) != 0)
    {
      v112 = *(_QWORD *)(v277 + 16);
      v111 = *(_QWORD *)(v277 + 24);
    }
    *(_QWORD *)v110 = v107;
    *(_OWORD *)(v110 + 8) = *(_OWORD *)&v327[8];
    *(_QWORD *)&v327[8] = 0;
    *(_QWORD *)&v327[16] = 0;
    *(_OWORD *)(v110 + 24) = *(_OWORD *)&v327[24];
    *(_QWORD *)&v327[24] = 0;
    *(_QWORD *)&v327[32] = 0;
    *(_QWORD *)(v110 + 40) = v112;
    *(_QWORD *)(v110 + 48) = v111;
    *(_BYTE *)(v110 + 56) = 1;
    v303[0] = 0;
    v304[0] = v110;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v298 + 24) + 40))(*(_QWORD *)(v298 + 24), v304);
    v113 = v304[0];
    v304[0] = 0;
    a3 = v290;
    v80 = __srca;
    if (v113)
    {
      v114 = *(std::__shared_weak_count **)(v113 + 32);
      if (v114)
      {
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v117 = *(std::__shared_weak_count **)(v113 + 16);
      if (v117)
      {
        v118 = (unint64_t *)&v117->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      MEMORY[0x212BC6398](v113, 0x10F0C40B62ED6C6);
      v120 = v303[0];
      v303[0] = 0;
      if (v120)
      {
        v121 = *(std::__shared_weak_count **)(v120 + 32);
        if (v121)
        {
          v122 = (unint64_t *)&v121->__shared_owners_;
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 - 1, v122));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
          }
        }
        v124 = *(std::__shared_weak_count **)(v120 + 16);
        if (v124)
        {
          v125 = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
        MEMORY[0x212BC6398](v120, 0x10F0C40B62ED6C6);
      }
    }
    v127 = *(std::__shared_weak_count **)&v327[32];
    v128 = categorya;
    if (*(_QWORD *)&v327[32])
    {
      v129 = (unint64_t *)(*(_QWORD *)&v327[32] + 8);
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    v131 = *(std::__shared_weak_count **)&v327[16];
    if (*(_QWORD *)&v327[16])
    {
      v132 = (unint64_t *)(*(_QWORD *)&v327[16] + 8);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
  }
  else
  {
    os_log_type_enabled(v93, OS_LOG_TYPE_INFO);
    v134 = *(_QWORD *)(a1 + 504);
    *(_DWORD *)v327 = 134218496;
    *(_QWORD *)&v327[4] = v80;
    *(_WORD *)&v327[12] = 2048;
    *(_QWORD *)&v327[14] = v287;
    *(_WORD *)&v327[22] = 2048;
    *(_QWORD *)&v327[24] = v134;
    v135 = (void *)_os_log_send_and_compose_impl();
    v128 = categorya;
    if (v135)
      free(v135);
  }
  if (v128)
  {
    sub_20E8C003C((uint64_t)&v305, "Two-view found %zu inliers (of %zu total) sampson: %f", v99, (size_t)v287, *(double *)(a1 + 504));
    sub_20E863570((uint64_t)&v305);
  }
  sub_20E863570((uint64_t)&v305);
  v136 = v313;
  if (v313)
  {
    v137 = (unint64_t *)&v313->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  a4 = v295;
LABEL_175:
  v139 = *(_DWORD *)(a1 + 344);
  if (v80 >= v139)
  {
    v140 = *(double *)(a7 + 24);
    v141 = *(double *)(a7 + 56);
    v142 = *(double *)(a7 + 88);
    v143 = sqrt(v140 * v140 + v141 * v141 + v142 * v142);
    v144 = 0.0;
    v145 = 0.0;
    v146 = 0.0;
    if (v143 > 0.00001)
    {
      if (v143 == 0.0)
        v147 = 1.0;
      else
        v147 = 1.0 / v143;
      v144 = v140 * v147;
      v145 = v141 * v147;
      v146 = v142 * v147;
    }
    *(double *)(a7 + 24) = v144;
    *(double *)(a7 + 56) = v145;
    *(double *)(a7 + 88) = v146;
  }
  v148 = *(_QWORD *)(*(_QWORD *)(v301 + 56) + 168 * a3 + 16) + ((unint64_t)a4 << 8);
  v151 = *(_QWORD *)(v148 + 48);
  v149 = (uint64_t *)(v148 + 48);
  v150 = v151;
  v152 = v149[1];
  if (v152 != v151)
  {
    v153 = 0;
    v154 = 0;
    do
    {
      v155 = *(_QWORD **)(v150 + 8 * v153);
      if (v155)
      {
        v156 = v155[8];
        if ((int)v156 > (int)a5)
        {
          v157 = v155[9];
          v158 = (v156 + v155[12] - 1) % (unint64_t)(v155[10] - v157);
          if (((*(_QWORD *)(*(_QWORD *)(a1 + 144) + ((v154 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v154) & 1) != 0)
          {
            *(_BYTE *)(v157 + v158) = 1;
            *(_BYTE *)(v155[9] + (unint64_t)(v155[12] + (int)v156 + ~(_DWORD)a5) % (v155[10] - v155[9])) = 1;
          }
          else
          {
            *(_BYTE *)(v157 + v158) = 0;
          }
          ++v154;
          v152 = v149[1];
          v150 = *v149;
        }
      }
      ++v153;
    }
    while (v153 < (v152 - v150) >> 3);
  }
  if (v80 < v139)
  {
    sub_20F002DF4(v304);
    if (**(int **)(v304[0] + 56) > 3
      || ((v159 = *(unsigned __int8 *)(v304[0] + 72),
           v160 = sub_20E8C31DC(v304[0], "OSLogSurrogateAppender", 1, 0),
           v161 = v160,
           !v159)
        ? (v162 = v160 == 0)
        : (v162 = 0),
          v162))
    {
LABEL_282:
      *(_OWORD *)a7 = *(_OWORD *)a6;
      *(double *)(a7 + 16) = a6[2];
      *(_QWORD *)(a7 + 24) = 0;
      *(_OWORD *)(a7 + 32) = *(_OWORD *)(a6 + 3);
      *(double *)(a7 + 48) = a6[5];
      *(_QWORD *)(a7 + 56) = 0;
      *(_OWORD *)(a7 + 64) = *((_OWORD *)a6 + 3);
      *(double *)(a7 + 80) = a6[8];
      *(_QWORD *)(a7 + 88) = 0;
      goto LABEL_283;
    }
    v296 = a4;
    v318 = COERCE_DOUBLE(v304);
    v319 = std::chrono::steady_clock::now().__d_.__rep_;
    v320 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v321) = 3;
    v322 = COERCE_DOUBLE("unknown file");
    LODWORD(v323) = 212;
    v325 = 0.0;
    v326 = 0.0;
    v324 = COERCE_DOUBLE("unknown function");
    v163 = **(char ***)&v318;
    categoryb = **(char ***)&v318;
    if (*(char *)(**(_QWORD **)&v318 + 39) < 0)
    {
      v165 = (const char *)*((_QWORD *)v163 + 2);
      v164 = *((_QWORD *)v163 + 3);
    }
    else
    {
      v164 = *(unsigned __int8 *)(**(_QWORD **)&v318 + 39);
      v165 = v163 + 16;
    }
    v278 = v163 + 16;
    v299 = v161;
    v288 = v159;
    v291 = a3;
    v166 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v166 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v327);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v327);
      if (v327[24] && (v327[23] & 0x80000000) != 0)
        operator delete(*(void **)v327);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v167 = byte_254A4A4F8;
    else
      v167 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v168 = byte_254A4A4F8[23];
    else
      v168 = *(_QWORD *)&byte_254A4A4F8[8];
    __srcb = v165;
    *(_QWORD *)v327 = os_log_create(v167, v165);
    v169 = &v327[8];
    if (v168 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v168 >= 0x17)
    {
      v170 = (v168 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v168 | 7) != 0x17)
        v170 = v168 | 7;
      v171 = v170 + 1;
      v169 = operator new(v170 + 1);
      *(_QWORD *)&v327[16] = v168;
      *(_QWORD *)&v327[24] = v171 | 0x8000000000000000;
      *(_QWORD *)&v327[8] = v169;
    }
    else
    {
      v327[31] = v168;
      if (!v168)
      {
LABEL_215:
        v169[v168] = 0;
        v327[32] = 1;
        v172 = &v327[40];
        if (v164 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        a3 = v291;
        if (v164 >= 0x17)
        {
          v173 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v164 | 7) != 0x17)
            v173 = v164 | 7;
          v174 = v173 + 1;
          v172 = operator new(v173 + 1);
          *(_QWORD *)&v328 = v164;
          *((_QWORD *)&v328 + 1) = v174 | 0x8000000000000000;
          *(_QWORD *)&v327[40] = v172;
        }
        else
        {
          HIBYTE(v328) = v164;
          if (!v164)
            goto LABEL_223;
        }
        memmove(v172, __srcb, v164);
LABEL_223:
        v172[v164] = 0;
        LOBYTE(v329) = 1;
        v175 = *(NSObject **)v327;
        if (SHIBYTE(v328) < 0)
          operator delete(*(void **)&v327[40]);
        if (v327[32] && (v327[31] & 0x80000000) != 0)
          operator delete(*(void **)&v327[8]);
        if (*(_QWORD *)v327)
          os_release(*(void **)v327);
        if (v299 && *(_QWORD *)(v299 + 24))
        {
          v176 = _os_log_pack_size();
          v177 = (std::__shared_weak_count_vtbl *)operator new(v176, (std::align_val_t)8uLL);
          v178 = (std::__shared_weak_count *)operator new();
          v179 = v178;
          v178->__shared_owners_ = 0;
          v180 = (unint64_t *)&v178->__shared_owners_;
          v178->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v178->__shared_weak_owners_ = 0;
          v178[1].__vftable = v177;
          *(_QWORD *)v327 = v177;
          *(_QWORD *)&v327[8] = v177;
          *(_QWORD *)&v327[16] = v178;
          do
            v181 = __ldxr(v180);
          while (__stxr(v181 + 1, v180));
          memset(&v327[24], 0, 24);
          do
            v182 = __ldaxr(v180);
          while (__stlxr(v182 - 1, v180));
          if (!v182)
          {
            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
            std::__shared_weak_count::__release_weak(v179);
          }
          v183 = *(_QWORD *)v327;
          *(_WORD *)_os_log_pack_fill() = 0;
          v184 = operator new();
          v185 = categoryb[39];
          v186 = v278;
          if ((v185 & 0x80u) != 0)
          {
            v186 = (char *)*((_QWORD *)categoryb + 2);
            v185 = *((_QWORD *)categoryb + 3);
          }
          *(_QWORD *)v184 = v183;
          *(_OWORD *)(v184 + 8) = *(_OWORD *)&v327[8];
          *(_QWORD *)&v327[8] = 0;
          *(_QWORD *)&v327[16] = 0;
          *(_OWORD *)(v184 + 24) = *(_OWORD *)&v327[24];
          *(_QWORD *)&v327[24] = 0;
          *(_QWORD *)&v327[32] = 0;
          *(_QWORD *)(v184 + 40) = v186;
          *(_QWORD *)(v184 + 48) = v185;
          *(_BYTE *)(v184 + 56) = 1;
          v315 = 0.0;
          v305 = (uint64_t *)v184;
          (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v299 + 24) + 40))(*(_QWORD *)(v299 + 24), &v305);
          v187 = (uint64_t)v305;
          v305 = 0;
          a3 = v291;
          if (v187)
          {
            v188 = *(std::__shared_weak_count **)(v187 + 32);
            if (v188)
            {
              v189 = (unint64_t *)&v188->__shared_owners_;
              do
                v190 = __ldaxr(v189);
              while (__stlxr(v190 - 1, v189));
              if (!v190)
              {
                ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                std::__shared_weak_count::__release_weak(v188);
              }
            }
            v191 = *(std::__shared_weak_count **)(v187 + 16);
            if (v191)
            {
              v192 = (unint64_t *)&v191->__shared_owners_;
              do
                v193 = __ldaxr(v192);
              while (__stlxr(v193 - 1, v192));
              if (!v193)
              {
                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                std::__shared_weak_count::__release_weak(v191);
              }
            }
            MEMORY[0x212BC6398](v187, 0x10F0C40B62ED6C6);
            v194 = v315;
            v315 = 0.0;
            if (v194 != 0.0)
            {
              v195 = *(std::__shared_weak_count **)(*(_QWORD *)&v194 + 32);
              if (v195)
              {
                v196 = (unint64_t *)&v195->__shared_owners_;
                do
                  v197 = __ldaxr(v196);
                while (__stlxr(v197 - 1, v196));
                if (!v197)
                {
                  ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                  std::__shared_weak_count::__release_weak(v195);
                }
              }
              v198 = *(std::__shared_weak_count **)(*(_QWORD *)&v194 + 16);
              if (v198)
              {
                v199 = (unint64_t *)&v198->__shared_owners_;
                do
                  v200 = __ldaxr(v199);
                while (__stlxr(v200 - 1, v199));
                if (!v200)
                {
                  ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                  std::__shared_weak_count::__release_weak(v198);
                }
              }
              MEMORY[0x212BC6398](*(_QWORD *)&v194, 0x10F0C40B62ED6C6);
            }
          }
          v201 = *(std::__shared_weak_count **)&v327[32];
          a4 = v296;
          if (*(_QWORD *)&v327[32])
          {
            v202 = (unint64_t *)(*(_QWORD *)&v327[32] + 8);
            do
              v203 = __ldaxr(v202);
            while (__stlxr(v203 - 1, v202));
            if (!v203)
            {
              ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
              std::__shared_weak_count::__release_weak(v201);
            }
          }
          v204 = *(std::__shared_weak_count **)&v327[16];
          if (*(_QWORD *)&v327[16])
          {
            v205 = (unint64_t *)(*(_QWORD *)&v327[16] + 8);
            do
              v206 = __ldaxr(v205);
            while (__stlxr(v206 - 1, v205));
            if (!v206)
            {
              ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
              std::__shared_weak_count::__release_weak(v204);
            }
          }
        }
        else
        {
          os_log_type_enabled(v175, OS_LOG_TYPE_INFO);
          *(_WORD *)v327 = 0;
          v207 = (void *)_os_log_send_and_compose_impl();
          a4 = v296;
          if (v207)
            free(v207);
        }
        if (v288)
        {
          sub_20E8C003C((uint64_t)&v318, "Falling back to propagating relative rotation from IMU.");
          sub_20E863570((uint64_t)&v318);
        }
        sub_20E863570((uint64_t)&v318);
        v208 = *(std::__shared_weak_count **)&v326;
        if (v326 != 0.0)
        {
          v209 = (unint64_t *)(*(_QWORD *)&v326 + 8);
          do
            v210 = __ldaxr(v209);
          while (__stlxr(v210 - 1, v209));
          if (!v210)
          {
            ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
            std::__shared_weak_count::__release_weak(v208);
          }
        }
        goto LABEL_282;
      }
    }
    memmove(v169, v167, v168);
    goto LABEL_215;
  }
LABEL_283:
  v211 = sub_20F0D2798(a1, v301, a3, a4, a5);
  sub_20F002DF4(v304);
  if (**(int **)(v304[0] + 56) > 3)
    return kdebug_trace();
  v212 = *(unsigned __int8 *)(v304[0] + 72);
  v213 = sub_20E8C31DC(v304[0], "OSLogSurrogateAppender", 1, 0);
  v214 = v213;
  if (!v212 && !v213)
    return kdebug_trace();
  v297 = a4;
  v318 = COERCE_DOUBLE(v304);
  v319 = std::chrono::steady_clock::now().__d_.__rep_;
  v320 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v321) = 3;
  v322 = COERCE_DOUBLE("unknown file");
  LODWORD(v323) = 223;
  v325 = 0.0;
  v326 = 0.0;
  v324 = COERCE_DOUBLE("unknown function");
  v215 = **(char ***)&v318;
  v300 = **(char ***)&v318;
  if (*(char *)(**(_QWORD **)&v318 + 39) < 0)
  {
    v217 = (const char *)*((_QWORD *)v215 + 2);
    v216 = *((_QWORD *)v215 + 3);
    v292 = v215 + 16;
    v302 = v214;
    v219 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v219 & 1) != 0)
      goto LABEL_290;
  }
  else
  {
    v216 = *(unsigned __int8 *)(**(_QWORD **)&v318 + 39);
    v217 = v215 + 16;
    v292 = v215 + 16;
    v302 = v214;
    v218 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v218 & 1) != 0)
      goto LABEL_290;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v327);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v327);
    if (v327[24] && (v327[23] & 0x80000000) != 0)
      operator delete(*(void **)v327);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_290:
  if (byte_254A4A4F8[23] >= 0)
    v220 = byte_254A4A4F8;
  else
    v220 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v221 = byte_254A4A4F8[23];
  else
    v221 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v327 = os_log_create(v220, v217);
  v222 = &v327[8];
  if (v221 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v221 >= 0x17)
  {
    v223 = v217;
    v224 = v212;
    v225 = v211;
    v226 = a3;
    v227 = (v221 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v221 | 7) != 0x17)
      v227 = v221 | 7;
    v228 = v227 + 1;
    v222 = operator new(v227 + 1);
    *(_QWORD *)&v327[16] = v221;
    *(_QWORD *)&v327[24] = v228 | 0x8000000000000000;
    *(_QWORD *)&v327[8] = v222;
    a3 = v226;
    v211 = v225;
    v212 = v224;
    v217 = v223;
    goto LABEL_303;
  }
  v327[31] = v221;
  if (v221)
LABEL_303:
    memmove(v222, v220, v221);
  v222[v221] = 0;
  v327[32] = 1;
  v229 = &v327[40];
  if (v216 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v216 >= 0x17)
  {
    v232 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17)
      v232 = v216 | 7;
    v233 = v232 + 1;
    v229 = operator new(v232 + 1);
    *(_QWORD *)&v328 = v216;
    *((_QWORD *)&v328 + 1) = v233 | 0x8000000000000000;
    *(_QWORD *)&v327[40] = v229;
    v230 = v302;
  }
  else
  {
    HIBYTE(v328) = v216;
    v230 = v302;
    if (!v216)
    {
      v327[40] = 0;
      LOBYTE(v329) = 1;
      v231 = *(NSObject **)v327;
      if ((SHIBYTE(v328) & 0x80000000) == 0)
        goto LABEL_308;
      goto LABEL_314;
    }
  }
  memmove(v229, v217, v216);
  v229[v216] = 0;
  LOBYTE(v329) = 1;
  v231 = *(NSObject **)v327;
  if ((SHIBYTE(v328) & 0x80000000) == 0)
  {
LABEL_308:
    if (!v327[32])
      goto LABEL_317;
LABEL_315:
    if ((v327[31] & 0x80000000) != 0)
      operator delete(*(void **)&v327[8]);
    goto LABEL_317;
  }
LABEL_314:
  operator delete(*(void **)&v327[40]);
  if (v327[32])
    goto LABEL_315;
LABEL_317:
  if (*(_QWORD *)v327)
    os_release(*(void **)v327);
  if (v230 && *(_QWORD *)(v230 + 24))
  {
    v234 = _os_log_pack_size();
    v235 = (std::__shared_weak_count_vtbl *)operator new(v234, (std::align_val_t)8uLL);
    v236 = (std::__shared_weak_count *)operator new();
    v237 = v236;
    v236->__shared_owners_ = 0;
    v238 = (unint64_t *)&v236->__shared_owners_;
    v236->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = v235;
    *(_QWORD *)v327 = v235;
    *(_QWORD *)&v327[8] = v235;
    *(_QWORD *)&v327[16] = v236;
    do
      v239 = __ldxr(v238);
    while (__stxr(v239 + 1, v238));
    memset(&v327[24], 0, 24);
    do
      v240 = __ldaxr(v238);
    while (__stlxr(v240 - 1, v238));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v237);
    }
    v241 = *(_QWORD *)v327;
    v242 = _os_log_pack_fill();
    *(_DWORD *)v242 = 67110144;
    *(_DWORD *)(v242 + 4) = a3;
    *(_WORD *)(v242 + 8) = 1024;
    *(_DWORD *)(v242 + 10) = v297;
    *(_WORD *)(v242 + 14) = 1024;
    *(_DWORD *)(v242 + 16) = v293;
    *(_WORD *)(v242 + 20) = 1024;
    *(_DWORD *)(v242 + 22) = v211;
    *(_WORD *)(v242 + 26) = 2048;
    *(_QWORD *)(v242 + 28) = a5;
    v243 = operator new();
    v244 = v212;
    v245 = v300[39];
    v246 = v292;
    if ((v245 & 0x80u) != 0)
    {
      v246 = (char *)*((_QWORD *)v300 + 2);
      v245 = *((_QWORD *)v300 + 3);
    }
    *(_QWORD *)v243 = v241;
    *(_OWORD *)(v243 + 8) = *(_OWORD *)&v327[8];
    *(_QWORD *)&v327[8] = 0;
    *(_QWORD *)&v327[16] = 0;
    *(_OWORD *)(v243 + 24) = *(_OWORD *)&v327[24];
    *(_QWORD *)&v327[24] = 0;
    *(_QWORD *)&v327[32] = 0;
    *(_QWORD *)(v243 + 40) = v246;
    *(_QWORD *)(v243 + 48) = v245;
    *(_BYTE *)(v243 + 56) = 1;
    v315 = 0.0;
    v305 = (uint64_t *)v243;
    (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v302 + 24) + 40))(*(_QWORD *)(v302 + 24), &v305);
    v247 = (uint64_t)v305;
    v305 = 0;
    if (v247)
    {
      v248 = *(std::__shared_weak_count **)(v247 + 32);
      if (v248)
      {
        v249 = (unint64_t *)&v248->__shared_owners_;
        do
          v250 = __ldaxr(v249);
        while (__stlxr(v250 - 1, v249));
        if (!v250)
        {
          ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
          std::__shared_weak_count::__release_weak(v248);
        }
      }
      v251 = *(std::__shared_weak_count **)(v247 + 16);
      if (v251)
      {
        v252 = (unint64_t *)&v251->__shared_owners_;
        do
          v253 = __ldaxr(v252);
        while (__stlxr(v253 - 1, v252));
        if (!v253)
        {
          ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
          std::__shared_weak_count::__release_weak(v251);
        }
      }
      MEMORY[0x212BC6398](v247, 0x10F0C40B62ED6C6);
      v254 = v315;
      v315 = 0.0;
      if (v254 != 0.0)
      {
        v255 = *(std::__shared_weak_count **)(*(_QWORD *)&v254 + 32);
        if (v255)
        {
          v256 = (unint64_t *)&v255->__shared_owners_;
          do
            v257 = __ldaxr(v256);
          while (__stlxr(v257 - 1, v256));
          if (!v257)
          {
            ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
            std::__shared_weak_count::__release_weak(v255);
          }
        }
        v258 = *(std::__shared_weak_count **)(*(_QWORD *)&v254 + 16);
        if (v258)
        {
          v259 = (unint64_t *)&v258->__shared_owners_;
          do
            v260 = __ldaxr(v259);
          while (__stlxr(v260 - 1, v259));
          if (!v260)
          {
            ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
            std::__shared_weak_count::__release_weak(v258);
          }
        }
        MEMORY[0x212BC6398](*(_QWORD *)&v254, 0x10F0C40B62ED6C6);
      }
    }
    v261 = *(std::__shared_weak_count **)&v327[32];
    v212 = v244;
    if (*(_QWORD *)&v327[32])
    {
      v262 = (unint64_t *)(*(_QWORD *)&v327[32] + 8);
      do
        v263 = __ldaxr(v262);
      while (__stlxr(v263 - 1, v262));
      if (!v263)
      {
        ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
        std::__shared_weak_count::__release_weak(v261);
      }
    }
    v264 = *(std::__shared_weak_count **)&v327[16];
    if (*(_QWORD *)&v327[16])
    {
      v265 = (unint64_t *)(*(_QWORD *)&v327[16] + 8);
      do
        v266 = __ldaxr(v265);
      while (__stlxr(v266 - 1, v265));
      if (!v266)
      {
        ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
        std::__shared_weak_count::__release_weak(v264);
      }
    }
  }
  else
  {
    os_log_type_enabled(v231, OS_LOG_TYPE_INFO);
    *(_DWORD *)v327 = 67110144;
    *(_DWORD *)&v327[4] = a3;
    *(_WORD *)&v327[8] = 1024;
    *(_DWORD *)&v327[10] = v297;
    *(_WORD *)&v327[14] = 1024;
    *(_DWORD *)&v327[16] = v293;
    *(_WORD *)&v327[20] = 1024;
    *(_DWORD *)&v327[22] = v211;
    *(_WORD *)&v327[26] = 2048;
    *(_QWORD *)&v327[28] = a5;
    v267 = (void *)_os_log_send_and_compose_impl();
    if (v267)
      free(v267);
  }
  if (v212)
  {
    sub_20E8C003C((uint64_t)&v318, "[Camera %u, stream %u] Got %d point correspondences and %d line correspondences to reference frame (which is %zu frames back)", a3, v297, v293, v211, a5);
    sub_20E863570((uint64_t)&v318);
  }
  sub_20E863570((uint64_t)&v318);
  v268 = *(std::__shared_weak_count **)&v326;
  if (v326 != 0.0)
  {
    v269 = (unint64_t *)(*(_QWORD *)&v326 + 8);
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
      std::__shared_weak_count::__release_weak(v268);
    }
  }
  return kdebug_trace();
}

void sub_20F005008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 152))
  {
    if (*(char *)(v29 - 153) < 0)
      operator delete(*(void **)(v29 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v29 - 248);
  sub_20E8E69C4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F0052C8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int64x2_t *v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = (int64x2_t *)(v7 + 16);
      v19 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20 = vdupq_lane_s64(*a3, 0);
        v18[-1] = v20;
        *v18 = v20;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_43:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(uint64_t **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + a2;
    if (v12 >> 61)
      sub_20E867F44();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_20E877A38();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[8 * v11];
    v22 = (uint64_t *)(v21 + 8 * a2);
    v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v24 = (uint64_t *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    v26 = vdupq_lane_s64(*a3, 0);
    v27 = (int64x2_t *)&v15[8 * v11 + 16];
    v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 8;
      if (v29 < 0x58)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[8 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_QWORD *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
}

uint64_t sub_20F005530(uint64_t a1, __int128 *a2, uint64_t a3)
{
  void **v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  size_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  void *v44;
  void **v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  std::logic_error *exception;
  int v53;
  __int128 v54;
  uint64_t v55;

  *(_OWORD *)(a1 + 32) = 0u;
  v6 = (void **)(a1 + 32);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  v7 = *a2;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 16);
  *(_OWORD *)(a1 + 72) = v7;
  sub_20E86C0E4(a1 + 96, (uint64_t)a2 + 24);
  v8 = a2[62];
  *(_OWORD *)(a1 + 1048) = a2[61];
  *(_OWORD *)(a1 + 1064) = v8;
  v9 = a2[63];
  v10 = a2[64];
  v11 = a2[65];
  *(_OWORD *)(a1 + 1128) = a2[66];
  *(_OWORD *)(a1 + 1112) = v11;
  *(_OWORD *)(a1 + 1080) = v9;
  *(_OWORD *)(a1 + 1096) = v10;
  v12 = a2[67];
  v13 = a2[68];
  v14 = a2[69];
  *(_OWORD *)(a1 + 1192) = a2[70];
  *(_OWORD *)(a1 + 1176) = v14;
  *(_OWORD *)(a1 + 1160) = v13;
  *(_OWORD *)(a1 + 1144) = v12;
  sub_20E8A1408(a1 + 1208, a3);
  *(_QWORD *)(a1 + 3640) = 0;
  *(_BYTE *)(a1 + 3648) = 0;
  *(_DWORD *)(a1 + 3652) = 0;
  *(_BYTE *)(a1 + 593) = 0;
  v15 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 1216) - *(_QWORD *)(a1 + 1208)) >> 6);
  v17 = *(char **)(a1 + 32);
  v16 = *(char **)(a1 + 40);
  v18 = (v16 - v17) >> 5;
  v19 = v15 - v18;
  if (v15 <= v18)
  {
    if (v15 >= v18)
    {
      if (v16 == *v6)
        goto LABEL_52;
    }
    else
    {
      v35 = &v17[0x1E1E1E1E1E1E1E20 * ((uint64_t)(*(_QWORD *)(a1 + 1216) - *(_QWORD *)(a1 + 1208)) >> 6)];
      while (v16 != v35)
      {
        v36 = *((_QWORD *)v16 - 3);
        if (v36)
        {
          v37 = *((_QWORD *)v16 - 2);
          v38 = (void *)*((_QWORD *)v16 - 3);
          if (v37 != v36)
          {
            do
              v37 = sub_20EB8188C(v37 - 1664);
            while (v37 != v36);
            v38 = (void *)*((_QWORD *)v16 - 3);
          }
          *((_QWORD *)v16 - 2) = v36;
          operator delete(v38);
        }
        v16 -= 32;
      }
      *(_QWORD *)(a1 + 40) = v35;
      if (v35 == *v6)
        goto LABEL_52;
    }
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 48);
    if (v19 <= (v20 - (uint64_t)v16) >> 5)
    {
      bzero(*(void **)(a1 + 40), 32 * v19);
      *(_QWORD *)(a1 + 40) = &v16[32 * v19];
      if (&v16[32 * v19] == *v6)
        goto LABEL_52;
    }
    else
    {
      if (v15 >> 59)
        sub_20E867F44();
      v21 = v20 - (_QWORD)v17;
      if (v21 >> 4 > v15)
        v15 = v21 >> 4;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0)
        v22 = 0x7FFFFFFFFFFFFFFLL;
      else
        v22 = v15;
      if (v22 >> 59)
        sub_20E877A38();
      v23 = (char *)operator new(32 * v22);
      v24 = &v23[32 * v18];
      v25 = 32 * v19;
      v26 = &v23[32 * v22];
      bzero(v24, v25);
      v27 = &v24[v25];
      if (v16 == v17)
      {
        *(_QWORD *)(a1 + 32) = v24;
        *(_QWORD *)(a1 + 40) = v27;
        *(_QWORD *)(a1 + 48) = v26;
      }
      else
      {
        v28 = 0;
        do
        {
          v29 = &v24[v28];
          v30 = &v16[v28];
          *((_DWORD *)v29 - 8) = *(_DWORD *)&v16[v28 - 32];
          *(_OWORD *)(v29 - 24) = *(_OWORD *)&v16[v28 - 24];
          *((_QWORD *)v29 - 1) = *(_QWORD *)&v16[v28 - 8];
          *((_QWORD *)v30 - 3) = 0;
          *((_QWORD *)v30 - 2) = 0;
          *((_QWORD *)v30 - 1) = 0;
          v28 -= 32;
        }
        while (&v16[v28] != v17);
        v16 = *(char **)(a1 + 32);
        v31 = *(char **)(a1 + 40);
        *(_QWORD *)(a1 + 32) = &v24[v28];
        *(_QWORD *)(a1 + 40) = v27;
        *(_QWORD *)(a1 + 48) = v26;
        while (v31 != v16)
        {
          v32 = *((_QWORD *)v31 - 3);
          if (v32)
          {
            v33 = *((_QWORD *)v31 - 2);
            v34 = (void *)*((_QWORD *)v31 - 3);
            if (v33 != v32)
            {
              do
                v33 = sub_20EB8188C(v33 - 1664);
              while (v33 != v32);
              v34 = (void *)*((_QWORD *)v31 - 3);
            }
            *((_QWORD *)v31 - 2) = v32;
            operator delete(v34);
          }
          v31 -= 32;
        }
      }
      if (v16)
        operator delete(v16);
      if (*(void **)(a1 + 40) == *v6)
        goto LABEL_52;
    }
  }
  v39 = 0;
  v40 = 0;
  do
  {
    v41 = *(_DWORD **)(a1 + 1208);
    v42 = *(_DWORD **)(a1 + 1216);
    if (v41 != v42)
    {
      while (*v41 != v40)
      {
        v41 += 272;
        if (v41 == v42)
          goto LABEL_53;
      }
    }
    if (v41 == v42)
    {
LABEL_53:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Requested camera id not found.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    sub_20EA82680((uint64_t)v41, (uint64_t)&v53, *(double *)(a1 + 1048));
    v43 = *v6;
    v43[8 * v39] = v53;
    v45 = (void **)&v43[8 * v39 + 2];
    v44 = *v45;
    if (*v45)
    {
      v46 = (char *)&v43[8 * v39];
      v49 = *((_QWORD *)v46 + 2);
      v48 = v46 + 16;
      v47 = v49;
      v50 = *(void **)&v43[8 * v39 + 2];
      if ((void *)v49 != v44)
      {
        do
          v47 = sub_20EB8188C(v47 - 1664);
        while ((void *)v47 != v44);
        v50 = *v45;
      }
      *v48 = v44;
      operator delete(v50);
      *v45 = 0;
      *(_QWORD *)&v43[8 * v39 + 4] = 0;
      *(_QWORD *)&v43[8 * v39 + 6] = 0;
    }
    *(_OWORD *)v45 = v54;
    *(_QWORD *)&v43[8 * v39 + 6] = v55;
    v39 = ++v40;
  }
  while (v40 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 5));
LABEL_52:
  sub_20F0059F4(a1);
  return a1;
}

void sub_20F005958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10)
{
  _QWORD *v10;
  void **v11;
  uint64_t v12;

  sub_20E8696AC(v12);
  sub_20ED29074(a10, 0);
  sub_20EA896D4(v11);
  sub_20F006734(v10 + 3);
  sub_20F0067DC(v10);
  _Unwind_Resume(a1);
}

void sub_20F0059F4(uint64_t a1)
{
  int **v2;
  char *v3;
  char *v4;
  char *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  int v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  size_t v31;
  const char *v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  const char *v35;
  size_t v36;
  __int128 *v37;
  unint64_t v38;
  int **v39;
  const char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  size_t v48;
  std::__shared_weak_count_vtbl *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t *v83;
  _OWORD *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  char *v89;
  void *v90;
  char *v91;
  char *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97[3];
  int v98;
  const char *v99;
  int v100;
  const char *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  char *v105;
  std::__shared_weak_count *v106;
  void *v107;
  char *v108;
  void *object;
  __int128 v110;
  __int128 v111;
  void *__p[2];
  unint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116[3];

  v2 = (int **)(a1 + 1208);
  sub_20F151C70(a1 + 1208, (__int128 *)(a1 + 96), (char **)&v107);
  v3 = (char *)operator new(0x28uLL);
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_OWORD *)(v3 + 24) = xmmword_210399E20;
  *(_QWORD *)v3 = &off_24C9F77D8;
  v105 = v3 + 24;
  v106 = (std::__shared_weak_count *)v3;
  v4 = (char *)v107;
  v5 = v108;
  while (v4 != v5)
  {
    v6 = (void *)operator new();
    sub_20F143EB8((uint64_t)v6, (uint64_t)v4, &v105, &v105);
    object = v6;
    v7 = *(_QWORD **)(a1 + 8);
    if ((unint64_t)v7 >= *(_QWORD *)(a1 + 16))
    {
      v8 = sub_20F006E1C((_QWORD *)a1, (uint64_t *)&object);
    }
    else
    {
      object = 0;
      *v7 = v6;
      v8 = v7 + 1;
    }
    *(_QWORD *)(a1 + 8) = v8;
    v9 = object;
    object = 0;
    if (v9)
    {
      v10 = sub_20ED293AC((uint64_t)v9);
      MEMORY[0x212BC6398](v10, 0x10B2C4036EE574ELL);
    }
    v4 += 416;
  }
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  if (v11 != v12)
  {
    while (*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8) != 3328)
    {
      v11 += 32;
      if (v11 == v12)
        goto LABEL_30;
    }
  }
  if (v11 != v12)
  {
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(double *)(v13 + 1552);
    if (*(_BYTE *)(v13 + 1536))
      v15 = v13 + 96;
    else
      v15 = 0;
    v16 = *(_DWORD *)(v15 + 992);
    if (v16 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_21025533E, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_150;
      }
      v16 = *(_DWORD *)(v15 + 992);
    }
    if (v16)
    {
      v17 = *(double *)v15;
      v18 = operator new();
      sub_20F166FCC(v18, (__int128 *)(a1 + 1048), *(_DWORD *)(a1 + 116), v14 / v17);
      v19 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v18;
      if (v19)
      {
        v20 = *(_QWORD **)(v19 + 8);
        if (v20)
        {
          v21 = *(_QWORD **)(v19 + 16);
          v22 = *(void **)(v19 + 8);
          if (v21 != v20)
          {
            do
            {
              v21 -= 51;
              sub_20ED29134(v21);
            }
            while (v21 != v20);
            v22 = *(void **)(v19 + 8);
          }
          *(_QWORD *)(v19 + 16) = v20;
          operator delete(v22);
        }
        v23 = *(_QWORD **)v19;
        *(_QWORD *)v19 = 0;
        if (v23)
        {
          v24 = sub_20ED291D8(v23);
          MEMORY[0x212BC6398](v24, 0x10F0C405208BBE6);
        }
        MEMORY[0x212BC6398](v19, 0x1020C4001A2EF61);
      }
      goto LABEL_121;
    }
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_21025533E, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_150:
    abort();
  }
LABEL_30:
  v25 = atomic_load((unsigned __int8 *)&qword_254A61928);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254A61928))
  {
    sub_21021D3D8(v97);
    sub_20E8610C0(&object, "cv3d.vio.odometry");
    sub_20E8C4068(v97, (uint64_t)&object, &qword_254A61920);
    if (SHIBYTE(v110) < 0)
      operator delete(object);
    __cxa_guard_release(&qword_254A61928);
  }
  v104 = qword_254A61920;
  if (**(int **)(qword_254A61920 + 56) <= 3)
  {
    v26 = *(unsigned __int8 *)(qword_254A61920 + 72);
    v27 = sub_20E8C31DC(qword_254A61920, "OSLogSurrogateAppender", 1, 0);
    v28 = v27;
    if (v26 || v27 != 0)
    {
      v97[0] = &v104;
      v97[1] = (uint64_t *)std::chrono::steady_clock::now().__d_.__rep_;
      v97[2] = (uint64_t *)std::chrono::system_clock::now().__d_.__rep_;
      v98 = 3;
      v99 = "unknown file";
      v100 = 233;
      v102 = 0;
      v103 = 0;
      v101 = "unknown function";
      v30 = *v97[0];
      v96 = *v97[0];
      if (*(char *)(*v97[0] + 39) < 0)
      {
        v32 = *(const char **)(v30 + 16);
        v31 = *(_QWORD *)(v30 + 24);
        v95 = *v97[0] + 16;
        v34 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v34 & 1) != 0)
          goto LABEL_40;
      }
      else
      {
        v31 = *(unsigned __int8 *)(*v97[0] + 39);
        v32 = (const char *)(*v97[0] + 16);
        v95 = (uint64_t)v32;
        v33 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v33 & 1) != 0)
          goto LABEL_40;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v111 && SHIBYTE(v110) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_40:
      if (byte_254A4A4F8[23] >= 0)
        v35 = byte_254A4A4F8;
      else
        v35 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v36 = byte_254A4A4F8[23];
      else
        v36 = *(_QWORD *)&byte_254A4A4F8[8];
      object = os_log_create(v35, v32);
      v37 = &v110;
      if (v36 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v36 >= 0x17)
      {
        v38 = v28;
        v39 = v2;
        v40 = v32;
        v41 = v26;
        v42 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v42 = v36 | 7;
        v43 = v42 + 1;
        v37 = (__int128 *)operator new(v42 + 1);
        *((_QWORD *)&v110 + 1) = v36;
        *(_QWORD *)&v111 = v43 | 0x8000000000000000;
        *(_QWORD *)&v110 = v37;
        v26 = v41;
        v32 = v40;
        v2 = v39;
        v28 = v38;
      }
      else
      {
        BYTE7(v111) = v36;
        if (!v36)
        {
LABEL_54:
          *((_BYTE *)v37 + v36) = 0;
          BYTE8(v111) = 1;
          v44 = __p;
          if (v31 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v31 >= 0x17)
          {
            v45 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17)
              v45 = v31 | 7;
            v46 = v45 + 1;
            v44 = operator new(v45 + 1);
            __p[1] = (void *)v31;
            v113 = v46 | 0x8000000000000000;
            __p[0] = v44;
          }
          else
          {
            HIBYTE(v113) = v31;
            if (!v31)
              goto LABEL_62;
          }
          memmove(v44, v32, v31);
LABEL_62:
          *((_BYTE *)v44 + v31) = 0;
          v114 = 1;
          v47 = object;
          if (SHIBYTE(v113) < 0)
            operator delete(__p[0]);
          if (BYTE8(v111) && SBYTE7(v111) < 0)
            operator delete((void *)v110);
          if (object)
            os_release(object);
          if (v28 && *(_QWORD *)(v28 + 24))
          {
            v48 = _os_log_pack_size();
            v49 = (std::__shared_weak_count_vtbl *)operator new(v48, (std::align_val_t)8uLL);
            v50 = (std::__shared_weak_count *)operator new();
            v51 = v50;
            v50->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v50->__shared_owners_;
            v50->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v50->__shared_weak_owners_ = 0;
            v50[1].__vftable = v49;
            object = v49;
            *(_QWORD *)&v110 = v49;
            *((_QWORD *)&v110 + 1) = v50;
            do
              v53 = __ldxr(p_shared_owners);
            while (__stxr(v53 + 1, p_shared_owners));
            v111 = 0uLL;
            __p[0] = 0;
            do
              v54 = __ldaxr(p_shared_owners);
            while (__stlxr(v54 - 1, p_shared_owners));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v51);
            }
            v55 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v56 = operator new();
            v57 = *(unsigned __int8 *)(v96 + 39);
            v58 = v95;
            if ((v57 & 0x80u) != 0)
            {
              v58 = *(_QWORD *)(v96 + 16);
              v57 = *(_QWORD *)(v96 + 24);
            }
            *(_QWORD *)v56 = v55;
            *(_OWORD *)(v56 + 8) = v110;
            v110 = 0uLL;
            *(_OWORD *)(v56 + 24) = v111;
            v111 = 0uLL;
            *(_QWORD *)(v56 + 40) = v58;
            *(_QWORD *)(v56 + 48) = v57;
            *(_BYTE *)(v56 + 56) = 1;
            v115 = 0;
            v116[0] = v56;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v28 + 24) + 40))(*(_QWORD *)(v28 + 24), v116);
            v59 = v116[0];
            v116[0] = 0;
            if (v59)
            {
              v60 = *(std::__shared_weak_count **)(v59 + 32);
              if (v60)
              {
                v61 = (unint64_t *)&v60->__shared_owners_;
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              v63 = *(std::__shared_weak_count **)(v59 + 16);
              if (v63)
              {
                v64 = (unint64_t *)&v63->__shared_owners_;
                do
                  v65 = __ldaxr(v64);
                while (__stlxr(v65 - 1, v64));
                if (!v65)
                {
                  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                  std::__shared_weak_count::__release_weak(v63);
                }
              }
              MEMORY[0x212BC6398](v59, 0x10F0C40B62ED6C6);
              v66 = v115;
              v115 = 0;
              if (v66)
              {
                v67 = *(std::__shared_weak_count **)(v66 + 32);
                if (v67)
                {
                  v68 = (unint64_t *)&v67->__shared_owners_;
                  do
                    v69 = __ldaxr(v68);
                  while (__stlxr(v69 - 1, v68));
                  if (!v69)
                  {
                    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                    std::__shared_weak_count::__release_weak(v67);
                  }
                }
                v70 = *(std::__shared_weak_count **)(v66 + 16);
                if (v70)
                {
                  v71 = (unint64_t *)&v70->__shared_owners_;
                  do
                    v72 = __ldaxr(v71);
                  while (__stlxr(v72 - 1, v71));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
                MEMORY[0x212BC6398](v66, 0x10F0C40B62ED6C6);
              }
            }
            v73 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
            if (*((_QWORD *)&v111 + 1))
            {
              v74 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            v76 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
            if (*((_QWORD *)&v110 + 1))
            {
              v77 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
          }
          else
          {
            os_log_type_enabled(v47, OS_LOG_TYPE_INFO);
            LOWORD(object) = 0;
            v79 = (void *)_os_log_send_and_compose_impl();
            if (v79)
              free(v79);
          }
          if (v26)
          {
            sub_20E8C003C((uint64_t)v97, "Failed to set vision-pose tracker because no there is no stereo-camera");
            sub_20E863570((uint64_t)v97);
          }
          sub_20E863570((uint64_t)v97);
          v80 = v103;
          if (v103)
          {
            v81 = (unint64_t *)&v103->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          goto LABEL_121;
        }
      }
      memmove(v37, v35, v36);
      goto LABEL_54;
    }
  }
LABEL_121:
  if (!*(_QWORD *)(a1 + 64))
  {
    sub_20F00C44C((_QWORD *)a1, v2, &object);
    v83 = (uint64_t *)operator new();
    sub_20F007054(v83, (uint64_t *)&object);
    v97[0] = 0;
    sub_20ED29074((void ***)(a1 + 64), (void **)v83);
    sub_20ED29074((void ***)v97, 0);
    if (object)
    {
      *(_QWORD *)&v110 = object;
      operator delete(object);
    }
  }
  v84 = (_OWORD *)operator new();
  *v84 = 0u;
  v84[1] = 0u;
  *(_QWORD *)v84 = 0xBFF0000000000000;
  *((_QWORD *)v84 + 2) = 0xBFF0000000000000;
  v85 = *(_QWORD *)(a1 + 3640);
  *(_QWORD *)(a1 + 3640) = v84;
  if (v85)
    MEMORY[0x212BC6398](v85, 0x1000C40244176AFLL);
  *(_BYTE *)(a1 + 3648) = 0;
  v86 = v106;
  if (v106)
  {
    v87 = (unint64_t *)&v106->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = (char *)v107;
  if (!v107)
    return;
  v90 = v107;
  if (v108 == v107)
    goto LABEL_143;
  v91 = v108 - 280;
  do
  {
    if ((v91[119] & 0x80000000) == 0)
    {
      v93 = (void *)*((_QWORD *)v91 + 4);
      if (!v93)
        goto LABEL_138;
LABEL_137:
      *((_QWORD *)v91 + 5) = v93;
      operator delete(v93);
      goto LABEL_138;
    }
    operator delete(*((void **)v91 + 12));
    v93 = (void *)*((_QWORD *)v91 + 4);
    if (v93)
      goto LABEL_137;
LABEL_138:
    v94 = *(void **)v91;
    if (*(_QWORD *)v91)
    {
      *((_QWORD *)v91 + 1) = v94;
      operator delete(v94);
    }
    v92 = v91 - 136;
    v91 -= 416;
  }
  while (v92 != v89);
  v90 = v107;
LABEL_143:
  v108 = v89;
  operator delete(v90);
}

void sub_20F006504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,void *a30,int a31,__int16 a32,char a33,char a34,char a35,int a36,__int16 a37,char a38,char a39)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  sub_20E86665C((uint64_t)&a24);
  sub_20F006D78(&a26);
  _Unwind_Resume(a1);
}

void sub_20F006630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  sub_20E86665C((uint64_t)&a24);
  sub_20F006D78(&a26);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F006734(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD **)(v2 + 16);
      v5 = *(void **)(v2 + 8);
      if (v4 != v3)
      {
        do
        {
          v4 -= 51;
          sub_20ED29134(v4);
        }
        while (v4 != v3);
        v5 = *(void **)(v2 + 8);
      }
      *(_QWORD *)(v2 + 16) = v3;
      operator delete(v5);
    }
    v6 = *(_QWORD **)v2;
    *(_QWORD *)v2 = 0;
    if (v6)
    {
      v7 = sub_20ED291D8(v6);
      MEMORY[0x212BC6398](v7, 0x10F0C405208BBE6);
    }
    MEMORY[0x212BC6398](v2, 0x1020C4001A2EF61);
  }
  return a1;
}

_QWORD *sub_20F0067DC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = sub_20ED293AC(v5);
          MEMORY[0x212BC6398](v7, 0x10B2C4036EE574ELL);
        }
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20F00685C(uint64_t a1@<X0>, double *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X7>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  void *v12;
  double v13;
  double v14;
  int64x2_t *v15;
  int64x2_t v16;
  uint64_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  float64x2_t v21;
  double v22;
  double v23;
  void *__p[2];
  double v25;
  int64x2_t v26;
  double v27;
  int64x2_t v28;
  double v29;
  float64x2_t v30;
  double v31;
  uint64_t v32;
  char v33;
  _QWORD v34[3];
  int v35;
  char v36;

  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_10;
  LOBYTE(v35) = 0;
  v36 = 0;
  if (*a3 != a3[1])
  {
    v8 = sub_20F1082E4(*(_QWORD *)(a1 + 3640), a2, *(_DWORD *)(a1 + 56), *(double *)(*a3 + 8));
    v35 = v8;
    v36 = BYTE4(v8);
  }
  __p[0] = 0;
  __p[1] = 0;
  v25 = 0.0;
  v9 = *(_DWORD *)(a1 + 56);
  memset(v34, 0, sizeof(v34));
  sub_20F021EF0((int64x2_t *)(a1 + 96), (uint64_t)&v35, (int8x16_t *)__p, a3, (_QWORD *)(a1 + 32), v9, (uint64_t)v34, a4, 0, 0, (_QWORD *)a1, *(uint64_t **)(a1 + 64));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_20F16723C(*(uint64_t **)(a1 + 24), (uint64_t *)(a1 + 32), (_QWORD *)(*(_QWORD *)(a1 + 64) + 24), &v35, __p);
  if (v33 && ((++*(_DWORD *)(a1 + 56), !*(_BYTE *)(a1 + 88)) || *(_BYTE *)(a1 + 3648)))
  {
    v23 = v25;
    v22 = v27;
    v18 = v26;
    v10 = v29;
    v19 = v28;
    v20 = *(int64x2_t *)__p;
    v11 = v31;
    v21 = v30;
    v12 = __p[1];
    v13 = *(double *)&v26.i64[1];
    v14 = *(double *)&v28.i64[1];
    v15 = (int64x2_t *)operator new(0x80uLL);
    v15->i64[1] = 0;
    v15[1].i64[0] = 0;
    v15->i64[0] = (uint64_t)&off_24C9F7788;
    v16.i64[0] = v19.i64[0];
    v16.i64[1] = v20.i64[1];
    v15[2] = vzip1q_s64(v20, v18);
    v15[3] = v16;
    *(double *)v16.i64 = v23;
    *(double *)&v16.i64[1] = v22;
    v15[4] = vzip2q_s64(v18, v19);
    v15[5] = v16;
    v17 = v32;
    a5[1] = v15;
    *(double *)v15[6].i64 = v10;
    *(double *)&v15[6].i64[1] = -(v23 * v11
                                + vmuld_n_f64(*(double *)v20.i64, v21.f64[0])
                                + vmuld_lane_f64(*(double *)&v12, v21, 1));
    *(double *)v15[7].i64 = -(v22 * v11 + vmuld_n_f64(*(double *)v18.i64, v21.f64[0]) + vmuld_lane_f64(v13, v21, 1));
    *(double *)&v15[7].i64[1] = -(v10 * v11 + vmuld_n_f64(*(double *)v19.i64, v21.f64[0]) + vmuld_lane_f64(v14, v21, 1));
    v15[1].i64[1] = v17;
    *a5 = (char *)v15 + 24;
  }
  else
  {
LABEL_10:
    *a5 = 0;
    a5[1] = 0;
  }
}

void sub_20F006A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F006A90(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __int128 v6;
  __int128 v7;
  float64x2_t v8;
  unsigned int v9;
  _QWORD *v10;
  float64x2_t v18;
  float64x2_t v19;
  char *v21;
  _QWORD *v22;
  void *v23;
  char *v24;
  void *v25;
  void *v26;
  float64x2_t v27[8];
  double v28;
  int64x2_t v29;
  _OWORD v30[2];
  __int128 v31;
  double v32[4];
  void *__p[3];

  memset(__p, 0, sizeof(__p));
  memset(v32, 0, sizeof(v32));
  v31 = 0u;
  memset(v30, 0, sizeof(v30));
  v29 = 0u;
  v28 = *(double *)(a2 + 8);
  if (__p != (void **)(a2 + 744))
    sub_20EE625E0((uint64_t)__p, *(char ***)(a2 + 744), *(_QWORD *)(a2 + 752), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 752) - *(_QWORD *)(a2 + 744)) >> 3));
  v6 = *(_OWORD *)(a2 + 32);
  v29 = *(int64x2_t *)(a2 + 16);
  v30[0] = v6;
  v7 = *(_OWORD *)(a2 + 64);
  v30[1] = *(_OWORD *)(a2 + 48);
  v31 = v7;
  v32[0] = *(double *)(a2 + 80);
  *(_OWORD *)&v32[1] = *(_OWORD *)(a2 + 160);
  v8.f64[1] = v32[2];
  v32[3] = *(double *)(a2 + 176);
  v8.f64[0] = v32[3];
  sub_20F3E7DCC((uint64_t)__p, (int **)(a1 + 32), v8);
  v9 = *(_DWORD *)(a1 + 3652);
  *(_DWORD *)(a1 + 3652) = a3;
  if (v9 >= a3)
  {
    v10 = *(_QWORD **)(a1 + 24);
    if (v10)
    {
      _V5.D[1] = *((_QWORD *)&v31 + 1);
      _D0 = v32[2];
      __asm { FMLA            D16, D0, V5.D[1] }
      v18.f64[0] = *(float64_t *)v30;
      v18.f64[1] = *((float64_t *)&v30[1] + 1);
      *(_QWORD *)&v19.f64[0] = vdupq_laneq_s64(v29, 1).u64[0];
      v19.f64[1] = *(float64_t *)&v30[1];
      __asm { FMOV            V7.2D, #1.0 }
      _Q7.f64[0] = -(_D16 + v32[0] * v32[3]);
      v27[0] = (float64x2_t)vzip1q_s64(v29, *(int64x2_t *)((char *)v30 + 8));
      v27[1] = (float64x2_t)(unint64_t)v31;
      v27[2] = v19;
      v27[3] = (float64x2_t)*((unint64_t *)&v31 + 1);
      v27[4] = v18;
      v27[5] = (float64x2_t)*(unint64_t *)&v32[0];
      v27[6] = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v27[0], v32[1]), (float64x2_t)vzip2q_s64(v29, *(int64x2_t *)((char *)v30 + 8)), *(float64x2_t *)&v32[1], 1), v18, v32[3]));
      v27[7] = _Q7;
      *(_BYTE *)(a1 + 3648) = sub_20F16807C(v10, (__int128 *)v27, v28);
    }
  }
  else
  {
    sub_20F0059F4(a1);
  }
  v21 = (char *)__p[0];
  if (__p[0])
  {
    v22 = __p[1];
    v23 = __p[0];
    if (__p[1] != __p[0])
    {
      v24 = (char *)__p[1];
      do
      {
        v26 = (void *)*((_QWORD *)v24 - 3);
        v24 -= 24;
        v25 = v26;
        if (v26)
        {
          *(v22 - 2) = v25;
          operator delete(v25);
        }
        v22 = v24;
      }
      while (v24 != v21);
      v23 = __p[0];
    }
    __p[1] = v21;
    operator delete(v23);
  }
}

void sub_20F006C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20F006CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F006C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20F006CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F006C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20F006CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F006CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_20F006CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F006CC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 104);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 112);
    v4 = *(void **)(a1 + 104);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 112);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_20F006D34(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20ED293AC(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4036EE574ELL);
  }
  return a1;
}

void **sub_20F006D78(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *a1;
  if (!*a1)
    return a1;
  v3 = a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_13;
  v5 = (uint64_t)v3 - 280;
  do
  {
    if ((*(char *)(v5 + 119) & 0x80000000) == 0)
    {
      v7 = *(void **)(v5 + 32);
      if (!v7)
        goto LABEL_8;
LABEL_7:
      *(_QWORD *)(v5 + 40) = v7;
      operator delete(v7);
      goto LABEL_8;
    }
    operator delete(*(void **)(v5 + 96));
    v7 = *(void **)(v5 + 32);
    if (v7)
      goto LABEL_7;
LABEL_8:
    v8 = *(void **)v5;
    if (*(_QWORD *)v5)
    {
      *(_QWORD *)(v5 + 8) = v8;
      operator delete(v8);
    }
    v6 = (void *)(v5 - 136);
    v5 -= 416;
  }
  while (v6 != v2);
  v4 = *a1;
LABEL_13:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

_QWORD *sub_20F006E1C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    sub_20E867F44();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      sub_20E877A38();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v18;
    v19 = &v15[-v18];
    v20 = v15 - 16;
    v21 = &v9[8 * v4 - 16];
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v20 - 1);
      v23 = *(_OWORD *)v20;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)v20 = 0uLL;
      *((_OWORD *)v21 - 1) = v24;
      *(_OWORD *)v21 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        v29 = sub_20ED293AC(v27);
        MEMORY[0x212BC6398](v29, 0x10B2C4036EE574ELL);
      }
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_20F006FC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F7788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F006FD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F7788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F00700C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F77D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F00701C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F77D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20F007054(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t i;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  void **v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  char **v97;

  v97 = (char **)(a1 + 3);
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = a2[1] - *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
  if (v3)
  {
    if (v4 >= 0x111111111111112)
      sub_20E867F44();
    v5 = (char *)operator new(80 * (v3 >> 3));
    v6 = &v5[240 * v4];
    v7 = v5;
    do
    {
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0xBFF0000000000000;
      *((_OWORD *)v7 + 1) = 0uLL;
      *((_OWORD *)v7 + 2) = 0uLL;
      *((_OWORD *)v7 + 3) = 0uLL;
      *((_OWORD *)v7 + 4) = 0uLL;
      *((_OWORD *)v7 + 5) = 0uLL;
      *((_OWORD *)v7 + 6) = 0uLL;
      *((_OWORD *)v7 + 7) = 0uLL;
      *((_OWORD *)v7 + 8) = 0uLL;
      *((_OWORD *)v7 + 9) = 0uLL;
      *((_OWORD *)v7 + 10) = 0uLL;
      *((_OWORD *)v7 + 11) = 0uLL;
      *((_OWORD *)v7 + 12) = 0uLL;
      *((_OWORD *)v7 + 13) = 0uLL;
      *((_OWORD *)v7 + 14) = 0uLL;
      v7 += 240;
    }
    while (v7 != v6);
    sub_20F009CC8((uint64_t)(a1 + 2), 0, 0, 0, 0, (uint64_t)v5, (uint64_t)v5);
    v8 = (void *)*a1;
    v9 = a1[1];
    *a1 = v10;
    a1[1] = (uint64_t)v6;
    a1[2] = (uint64_t)v6;
    while ((void *)v9 != v8)
    {
      v9 -= 240;
      sub_20E990F68(v9);
    }
    if (v8)
      operator delete(v8);
    v11 = a1[3];
    v12 = (_QWORD *)a1[4];
    v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v12 - v11) >> 3);
  if (v4 <= v13)
  {
    if (v4 < v13)
    {
      v14 = (_QWORD *)(v11 + 104 * v4);
      while (v12 != v14)
      {
        v12 -= 13;
        sub_20E9905B4(v12);
      }
      a1[4] = (uint64_t)v14;
    }
  }
  else
  {
    sub_20F009E24(v97, v4 - v13);
  }
  v15 = *a2;
  if (a2[1] != *a2)
  {
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3); ++i)
    {
      v17 = *a1;
      v18 = *a1 + 240 * i;
      v19 = (_DWORD *)(v15 + 24 * i);
      *(_DWORD *)v18 = *v19;
      v20 = *(uint64_t **)(v18 + 32);
      v23 = *(_QWORD *)(v18 + 24);
      v22 = (uint64_t **)(v18 + 24);
      v21 = v23;
      v24 = v19[1];
      v25 = ((uint64_t)v20 - v23) >> 4;
      v26 = v24 - v25;
      if (v24 <= v25)
      {
        if (v24 < v25)
        {
          v27 = (uint64_t *)(v21 + 16 * v24);
          while (v20 != v27)
          {
            v28 = (std::__shared_weak_count *)*(v20 - 1);
            if (v28)
            {
              p_shared_owners = (unint64_t *)&v28->__shared_owners_;
              do
                v30 = __ldaxr(p_shared_owners);
              while (__stlxr(v30 - 1, p_shared_owners));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *, unint64_t))v28->__on_zero_shared)(v28, v26);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            v20 -= 2;
          }
          v22[1] = v27;
        }
      }
      else
      {
        sub_20EE68A10((uint64_t)v22, v26);
      }
      v31 = v17 + 240 * i;
      v34 = *(_QWORD *)(v31 + 56);
      v32 = (_QWORD *)(v31 + 56);
      v33 = v34;
      v35 = *(v32 - 1);
      v36 = *(unsigned int *)(*a2 + 24 * i + 4);
      v37 = (v34 - v35) >> 4;
      v38 = v36 - v37;
      if (v36 <= v37)
      {
        if (v36 < v37)
        {
          v39 = v35 + 16 * v36;
          while (v33 != v39)
          {
            v40 = *(std::__shared_weak_count **)(v33 - 8);
            if (v40)
            {
              v41 = (unint64_t *)&v40->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *, unint64_t))v40->__on_zero_shared)(v40, v38);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            v33 -= 16;
          }
          *v32 = v39;
        }
      }
      else
      {
        sub_20EE68A10((uint64_t)(v32 - 1), v38);
      }
      sub_20F007804((_QWORD *)(v17 + 240 * i + 72), *(unsigned int *)(*a2 + 24 * i + 4));
      v43 = v17 + 240 * i;
      v46 = *(_QWORD *)(v43 + 104);
      v44 = (_QWORD *)(v43 + 104);
      v45 = v46;
      v47 = *(v44 - 1);
      v48 = *(unsigned int *)(*a2 + 24 * i + 4);
      v49 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v47) >> 3);
      v50 = v48 - v49;
      if (v48 <= v49)
      {
        if (v48 < v49)
        {
          v53 = v47 + 24 * v48;
          while (v45 != v53)
          {
            if (*(_BYTE *)(v45 - 8))
            {
              v54 = *(std::__shared_weak_count **)(v45 - 16);
              if (v54)
              {
                v55 = (unint64_t *)&v54->__shared_owners_;
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *, unint64_t))v54->__on_zero_shared)(v54, v50);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
            }
            v45 -= 24;
          }
          *v44 = v53;
          v51 = *v22;
          v52 = v22[1];
          if (*v22 == v52)
            goto LABEL_60;
          do
          {
LABEL_62:
            v59 = (char *)operator new(0xD8uLL);
            *((_QWORD *)v59 + 1) = 0;
            *((_QWORD *)v59 + 2) = 0;
            *(_QWORD *)v59 = &off_24C9EDD70;
            *(_OWORD *)(v59 + 72) = 0u;
            *(_OWORD *)(v59 + 88) = 0u;
            *(_OWORD *)(v59 + 104) = 0u;
            *(_OWORD *)(v59 + 120) = 0u;
            *(_OWORD *)(v59 + 136) = 0u;
            *(_OWORD *)(v59 + 152) = 0u;
            *(_OWORD *)(v59 + 40) = 0u;
            *(_OWORD *)(v59 + 56) = 0u;
            *(_OWORD *)(v59 + 168) = 0u;
            *(_OWORD *)(v59 + 184) = 0u;
            *(_OWORD *)(v59 + 200) = 0u;
            *(_OWORD *)(v59 + 24) = 0u;
            v59[72] = 1;
            *((_OWORD *)v59 + 5) = 0u;
            *((_OWORD *)v59 + 6) = 0u;
            *((_OWORD *)v59 + 7) = 0u;
            *((_OWORD *)v59 + 8) = 0u;
            *(_OWORD *)(v59 + 138) = 0u;
            v59[208] = 0;
            *((_OWORD *)v59 + 11) = 0u;
            *((_OWORD *)v59 + 12) = 0u;
            *((_OWORD *)v59 + 10) = 0u;
            v60 = (std::__shared_weak_count *)v51[1];
            *v51 = (uint64_t)(v59 + 24);
            v51[1] = (uint64_t)v59;
            if (v60)
            {
              v61 = (unint64_t *)&v60->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            v63 = *v51;
            *(_OWORD *)v63 = *(_OWORD *)(*a2 + 24 * i + 8);
            *(_QWORD *)(v63 + 64) = *(_QWORD *)(v63 + 56);
            *(_QWORD *)(v63 + 88) = *(_QWORD *)(v63 + 80);
            *(_QWORD *)(v63 + 168) = *(_QWORD *)(v63 + 160);
            *(_BYTE *)(v63 + 184) = 0;
            *(_QWORD *)(v63 + 16) = 0;
            *(_QWORD *)(v63 + 32) = 0;
            if (*(_BYTE *)(v63 + 48))
              *(_BYTE *)(v63 + 48) = 0;
            v51 += 2;
          }
          while (v51 != v52);
          goto LABEL_60;
        }
      }
      else
      {
        sub_20F00A450(v44 - 1, v50);
      }
      v51 = *v22;
      v52 = v22[1];
      if (*v22 != v52)
        goto LABEL_62;
LABEL_60:
      v57 = (_QWORD *)*(v32 - 1);
      v58 = (_QWORD *)*v32;
      while (v57 != v58)
      {
        v64 = operator new(0x30uLL);
        v64[1] = 0;
        v64[2] = 0;
        *v64 = &off_24C9EDDC0;
        v64[4] = 0;
        v64[5] = 0;
        v64[3] = 0;
        v65 = (std::__shared_weak_count *)v57[1];
        *v57 = v64 + 3;
        v57[1] = v64;
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v57 += 2;
      }
      v68 = (uint64_t)&(*v97)[104 * i];
      v69 = (_DWORD *)(*a2 + 24 * i);
      *(_DWORD *)v68 = *v69;
      v70 = (void **)(v68 + 8);
      v71 = *(_QWORD *)(v68 + 8);
      v72 = v69[1];
      v75 = *(_QWORD *)(v68 + 16);
      v74 = (_QWORD *)(v68 + 16);
      v73 = v75;
      v76 = 0x6FB586FB586FB587 * ((v75 - v71) >> 3);
      if (v72 > v76)
      {
        sub_20F00A71C(v70, v72 - v76);
      }
      else if (v72 < v76)
      {
        v77 = v71 + 440 * v72;
        if (v73 != v77)
        {
          v78 = v73 - 208;
          do
          {
            v80 = *(void **)(v78 + 184);
            if (v80)
            {
              *(_QWORD *)(v78 + 192) = v80;
              operator delete(v80);
            }
            v81 = *(void **)(v78 + 160);
            if (v81)
            {
              *(_QWORD *)(v78 + 168) = v81;
              operator delete(v81);
            }
            if (*(_BYTE *)(v78 + 152))
            {
              v82 = *(void **)(v78 + 128);
              if (v82)
              {
                *(_QWORD *)(v78 + 136) = v82;
                operator delete(v82);
              }
            }
            v83 = *(void **)(v78 + 104);
            if (v83)
            {
              *(_QWORD *)(v78 + 112) = v83;
              operator delete(v83);
            }
            if (*(_BYTE *)(v78 + 96))
            {
              v84 = *(void **)(v78 + 72);
              if (v84)
              {
                *(_QWORD *)(v78 + 80) = v84;
                operator delete(v84);
              }
            }
            v85 = *(void **)(v78 + 48);
            if (v85)
            {
              *(_QWORD *)(v78 + 56) = v85;
              operator delete(v85);
            }
            v86 = *(void **)(v78 + 24);
            if (v86)
            {
              *(_QWORD *)(v78 + 32) = v86;
              operator delete(v86);
            }
            v87 = *(void **)v78;
            if (*(_QWORD *)v78)
            {
              *(_QWORD *)(v78 + 8) = v87;
              operator delete(v87);
            }
            v88 = *(void **)(v78 - 24);
            if (v88)
            {
              *(_QWORD *)(v78 - 16) = v88;
              operator delete(v88);
            }
            v89 = *(void **)(v78 - 48);
            if (v89)
            {
              *(_QWORD *)(v78 - 40) = v89;
              operator delete(v89);
            }
            if (*(_BYTE *)(v78 - 56))
            {
              v90 = *(void **)(v78 - 80);
              if (v90)
              {
                *(_QWORD *)(v78 - 72) = v90;
                operator delete(v90);
              }
            }
            v91 = *(void **)(v78 - 104);
            if (v91)
            {
              *(_QWORD *)(v78 - 96) = v91;
              operator delete(v91);
            }
            if (*(_BYTE *)(v78 - 112))
            {
              v92 = *(void **)(v78 - 136);
              if (v92)
              {
                *(_QWORD *)(v78 - 128) = v92;
                operator delete(v92);
              }
            }
            v93 = *(void **)(v78 - 160);
            if (v93)
            {
              *(_QWORD *)(v78 - 152) = v93;
              operator delete(v93);
            }
            v94 = *(void **)(v78 - 184);
            if (v94)
            {
              *(_QWORD *)(v78 - 176) = v94;
              operator delete(v94);
            }
            v95 = *(void **)(v78 - 208);
            if (v95)
            {
              *(_QWORD *)(v78 - 200) = v95;
              operator delete(v95);
            }
            v79 = v78 - 232;
            v78 -= 440;
          }
          while (v79 != v77);
        }
        *v74 = v77;
      }
      v15 = *a2;
    }
  }
  return a1;
}

void sub_20F0077B4(_Unwind_Exception *a1, uint64_t a2, _QWORD *a3, void **a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20F009C78((uint64_t)va);
  sub_20EE5EE28(a3);
  sub_20ED2894C(a4);
  _Unwind_Resume(a1);
}

void sub_20F0077D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, void **a11)
{
  sub_20EE5EE28(a10);
  sub_20ED2894C(a11);
  _Unwind_Resume(a1);
}

void sub_20F007804(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v3 = a1[1];
  v4 = 0xFAFAFAFAFAFAFAFBLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_20F00A090(a1, v6);
    return;
  }
  if (!v5)
  {
    v7 = *a1 + 408 * a2;
    while (1)
    {
      if (v3 == v7)
      {
        a1[1] = v7;
        return;
      }
      if (*(_BYTE *)(v3 - 8))
      {
        v8 = *(std::__shared_weak_count **)(v3 - 304);
        if (!v8)
          goto LABEL_13;
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
          v11 = *(std::__shared_weak_count **)(v3 - 320);
          if (!v11)
            goto LABEL_6;
        }
        else
        {
LABEL_13:
          v11 = *(std::__shared_weak_count **)(v3 - 320);
          if (!v11)
            goto LABEL_6;
        }
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
LABEL_6:
      v3 -= 408;
    }
  }
}

void **sub_20F00791C(void **result, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 *v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  __int128 *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  unsigned int v32;
  __int128 *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  __int128 *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  __int128 *v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  __int128 *v52;
  unsigned int v53;
  unsigned int v54;
  __int128 *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unint64_t v62;
  __int128 *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  __int128 *v69;
  unsigned int v70;
  __int128 *v71;
  unsigned int v72;
  _DWORD *v73;
  unsigned int v74;
  uint64_t v75;
  __int128 *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  void *v94;
  unsigned int v95;
  void *v96;
  int64_t v97;
  int64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  int64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  __int128 *v124;
  BOOL v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  __int128 v129;
  unsigned int v130;
  uint64_t v131;
  __int128 v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  __int128 v141;
  unint64_t v142;
  unsigned int v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  __int128 *v157;
  _QWORD *v158;
  __int128 *v159;
  __int128 *v161;
  __int128 *v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  void *v175[2];
  uint64_t v176;
  void *v177[2];
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  void *v181[2];
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  void *v197[2];
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  void *v201[2];
  uint64_t v202;
  __int128 __p;
  uint64_t v204;

  v6 = (unint64_t)result;
LABEL_2:
  v7 = (unint64_t)a2;
  v8 = a2 - 15;
  v157 = a2 - 45;
  v159 = a2 - 30;
  while (2)
  {
    v9 = v6;
    v10 = v7 - v6;
    v11 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v7 - v6) >> 4);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v67 = *((_DWORD *)a2 - 60);
        v161 = a2 - 15;
        if (v67 < *(_DWORD *)v6)
        {
          v68 = v6;
          v69 = v161;
          return sub_20F0095B8(v68, v69);
        }
        return result;
      case 3uLL:
        v71 = (__int128 *)(v6 + 240);
        v70 = *(_DWORD *)(v6 + 240);
        v72 = *((_DWORD *)a2 - 60);
        if (v70 >= *(_DWORD *)v6)
        {
          if (v72 < v70)
          {
            v75 = v6 + 240;
            v76 = a2 - 15;
            goto LABEL_250;
          }
        }
        else
        {
          if (v72 < v70)
          {
            v68 = v6;
            v69 = a2 - 15;
            return sub_20F0095B8(v68, v69);
          }
          result = sub_20F0095B8(v6, (__int128 *)(v6 + 240));
          if (*((_DWORD *)a2 - 60) < *(_DWORD *)(v6 + 240))
          {
            v69 = a2 - 15;
            v68 = v6 + 240;
            return sub_20F0095B8(v68, v69);
          }
        }
        return result;
      case 4uLL:
        return sub_20F009B74((void **)v6, (__int128 *)(v6 + 240), (__int128 *)(v6 + 480), v8);
      case 5uLL:
        v71 = (__int128 *)(v6 + 240);
        v73 = (_DWORD *)(v6 + 480);
        result = sub_20F009B74((void **)v6, (__int128 *)(v6 + 240), (__int128 *)(v6 + 480), (__int128 *)(v6 + 720));
        v74 = *((_DWORD *)a2 - 60);
        v162 = a2 - 15;
        if (v74 < *(_DWORD *)(v6 + 720))
        {
          result = sub_20F0095B8(v6 + 720, v162);
          if (*(_DWORD *)(v6 + 720) < *v73)
          {
            result = sub_20F0095B8(v6 + 480, (__int128 *)(v6 + 720));
            if (*v73 < *(_DWORD *)v71)
            {
              v75 = v6 + 240;
              v76 = (__int128 *)(v6 + 480);
LABEL_250:
              result = sub_20F0095B8(v75, v76);
              if (*(_DWORD *)(v6 + 240) < *(_DWORD *)v6)
              {
                v68 = v6;
                v69 = v71;
                return sub_20F0095B8(v68, v69);
              }
            }
          }
        }
        return result;
      default:
        if (v10 > 5759)
        {
          v163 = v6;
          if (!a3)
          {
            if ((__int128 *)v6 == a2)
              return result;
            v97 = (v11 - 2) >> 1;
            v98 = v97;
            while (1)
            {
              v99 = v98;
              if (v97 >= v98)
              {
                v100 = (2 * v98) | 1;
                v101 = v9 + 240 * v100;
                if (2 * v99 + 2 >= (uint64_t)v11)
                {
                  v104 = v9 + 240 * v99;
                  if (*(_DWORD *)v101 >= *(_DWORD *)v104)
                    goto LABEL_173;
                }
                else
                {
                  v102 = *(_DWORD *)v101;
                  v103 = *(_DWORD *)(v101 + 240);
                  if (*(_DWORD *)v101 <= v103)
                    v102 = *(_DWORD *)(v101 + 240);
                  if (*(_DWORD *)v101 < v103)
                  {
                    v101 += 240;
                    v100 = 2 * v99 + 2;
                  }
                  v104 = v9 + 240 * v99;
                  if (v102 >= *(_DWORD *)v104)
                  {
LABEL_173:
                    v105 = *(_OWORD *)v104;
                    v186 = *(_QWORD *)(v104 + 16);
                    v185 = v105;
                    v106 = v9 + 240 * v99;
                    v187 = *(_OWORD *)(v106 + 24);
                    v188 = *(_QWORD *)(v106 + 40);
                    *(_QWORD *)(v106 + 24) = 0;
                    *(_QWORD *)(v106 + 32) = 0;
                    *(_QWORD *)(v106 + 40) = 0;
                    v189 = *(_OWORD *)(v106 + 48);
                    v190 = *(_QWORD *)(v106 + 64);
                    *(_QWORD *)(v106 + 48) = 0;
                    *(_QWORD *)(v106 + 56) = 0;
                    *(_QWORD *)(v106 + 64) = 0;
                    v191 = *(_OWORD *)(v106 + 72);
                    v192 = *(_QWORD *)(v106 + 88);
                    *(_QWORD *)(v106 + 72) = 0;
                    *(_QWORD *)(v106 + 80) = 0;
                    *(_QWORD *)(v106 + 88) = 0;
                    v193 = *(_OWORD *)(v106 + 96);
                    v194 = *(_QWORD *)(v106 + 112);
                    *(_QWORD *)(v106 + 96) = 0;
                    *(_QWORD *)(v106 + 104) = 0;
                    *(_QWORD *)(v106 + 112) = 0;
                    v195 = *(_OWORD *)(v106 + 120);
                    v196 = *(_QWORD *)(v106 + 136);
                    *(_QWORD *)(v106 + 120) = 0;
                    *(_QWORD *)(v106 + 128) = 0;
                    *(_QWORD *)(v106 + 136) = 0;
                    *(_OWORD *)v197 = *(_OWORD *)(v106 + 144);
                    v198 = *(_QWORD *)(v106 + 160);
                    *(_QWORD *)(v106 + 144) = 0;
                    *(_QWORD *)(v106 + 152) = 0;
                    *(_QWORD *)(v106 + 160) = 0;
                    v199 = *(_OWORD *)(v106 + 168);
                    v200 = *(_QWORD *)(v106 + 184);
                    *(_QWORD *)(v106 + 168) = 0;
                    *(_QWORD *)(v106 + 176) = 0;
                    *(_QWORD *)(v106 + 184) = 0;
                    *(_OWORD *)v201 = *(_OWORD *)(v106 + 192);
                    v202 = *(_QWORD *)(v106 + 208);
                    *(_QWORD *)(v106 + 192) = 0;
                    *(_QWORD *)(v106 + 200) = 0;
                    *(_QWORD *)(v106 + 208) = 0;
                    __p = *(_OWORD *)(v106 + 216);
                    v204 = *(_QWORD *)(v106 + 232);
                    *(_QWORD *)(v106 + 216) = 0;
                    *(_QWORD *)(v106 + 224) = 0;
                    *(_QWORD *)(v106 + 232) = 0;
                    v107 = v185;
                    while (1)
                    {
                      v110 = v101;
                      sub_20F00972C(v104, (__int128 *)v101);
                      if (v97 < v100)
                        break;
                      v101 = v9 + 240 * ((2 * v100) | 1);
                      if (2 * v100 + 2 < (uint64_t)v11)
                      {
                        v108 = *(_DWORD *)v101;
                        v109 = *(_DWORD *)(v101 + 240);
                        if (*(_DWORD *)v101 <= v109)
                          v108 = *(_DWORD *)(v101 + 240);
                        if (*(_DWORD *)v101 >= v109)
                        {
                          v100 = (2 * v100) | 1;
                        }
                        else
                        {
                          v101 += 240;
                          v100 = 2 * v100 + 2;
                        }
                        v104 = v110;
                        if (v108 < v107)
                          break;
                      }
                      else
                      {
                        v100 = (2 * v100) | 1;
                        v104 = v110;
                        if (*(_DWORD *)v101 < v107)
                          break;
                      }
                    }
                    sub_20F00972C(v110, &v185);
                    if ((_QWORD)__p)
                    {
                      *((_QWORD *)&__p + 1) = __p;
                      operator delete((void *)__p);
                    }
                    if (v201[0])
                    {
                      v201[1] = v201[0];
                      operator delete(v201[0]);
                    }
                    if ((_QWORD)v199)
                    {
                      *((_QWORD *)&v199 + 1) = v199;
                      operator delete((void *)v199);
                    }
                    if (v197[0])
                    {
                      v197[1] = v197[0];
                      operator delete(v197[0]);
                    }
                    if ((_QWORD)v195)
                    {
                      *((_QWORD *)&v195 + 1) = v195;
                      operator delete((void *)v195);
                    }
                    sub_20E990FD8((void **)&v187);
                  }
                }
              }
              v98 = v99 - 1;
              if (!v99)
              {
                v111 = v10 / 0xF0uLL;
                v158 = (_QWORD *)(v9 + 24);
                v155 = (_QWORD *)(v9 + 72);
                v156 = (_QWORD *)(v9 + 48);
                v153 = (_QWORD *)(v9 + 120);
                v154 = (_QWORD *)(v9 + 96);
                v151 = (_QWORD *)(v9 + 168);
                v152 = (_QWORD *)(v9 + 144);
                v149 = (_QWORD *)(v9 + 216);
                v150 = (_QWORD *)(v9 + 192);
                do
                {
                  v112 = v9;
                  v113 = 0;
                  v114 = *(_OWORD *)v112;
                  v166 = *(_QWORD *)(v112 + 16);
                  v165 = v114;
                  v167 = *(_OWORD *)(v112 + 24);
                  v168 = *(_QWORD *)(v112 + 40);
                  v158[1] = 0;
                  v158[2] = 0;
                  *v158 = 0;
                  v169 = *(_OWORD *)(v112 + 48);
                  v170 = *(_QWORD *)(v112 + 64);
                  v156[1] = 0;
                  v156[2] = 0;
                  *v156 = 0;
                  v171 = *(_OWORD *)(v112 + 72);
                  v172 = *(_QWORD *)(v112 + 88);
                  *v155 = 0;
                  v155[1] = 0;
                  v155[2] = 0;
                  v173 = *(_OWORD *)(v112 + 96);
                  v174 = *(_QWORD *)(v112 + 112);
                  *v154 = 0;
                  v154[1] = 0;
                  v154[2] = 0;
                  *(_OWORD *)v175 = *(_OWORD *)(v112 + 120);
                  v176 = *(_QWORD *)(v112 + 136);
                  *v153 = 0;
                  v153[1] = 0;
                  v153[2] = 0;
                  *(_OWORD *)v177 = *(_OWORD *)(v112 + 144);
                  v178 = *(_QWORD *)(v112 + 160);
                  *v152 = 0;
                  v152[1] = 0;
                  v152[2] = 0;
                  v179 = *(_OWORD *)(v112 + 168);
                  v180 = *(_QWORD *)(v112 + 184);
                  *v151 = 0;
                  v151[1] = 0;
                  v151[2] = 0;
                  *(_OWORD *)v181 = *(_OWORD *)(v112 + 192);
                  v182 = *(_QWORD *)(v112 + 208);
                  *v150 = 0;
                  v150[1] = 0;
                  v150[2] = 0;
                  v183 = *(_OWORD *)(v112 + 216);
                  v184 = *(_QWORD *)(v112 + 232);
                  *v149 = 0;
                  v149[1] = 0;
                  v115 = (unint64_t)(v111 - 2) >> 1;
                  v149[2] = 0;
                  v164 = v111;
                  do
                  {
                    v116 = v112 + 240 * v113 + 240;
                    v117 = 2 * v113;
                    v113 = (2 * v113) | 1;
                    if (v117 + 2 < v111 && *(_DWORD *)v116 < *(_DWORD *)(v116 + 240))
                    {
                      v116 += 240;
                      v113 = v117 + 2;
                    }
                    v118 = *(_OWORD *)v116;
                    *(_QWORD *)(v112 + 16) = *(_QWORD *)(v116 + 16);
                    *(_OWORD *)v112 = v118;
                    sub_20F009884((_QWORD *)(v112 + 24), v116 + 24);
                    v119 = *(void **)(v112 + 120);
                    if (v119)
                    {
                      *(_QWORD *)(v112 + 128) = v119;
                      operator delete(v119);
                      *(_QWORD *)(v112 + 120) = 0;
                      *(_QWORD *)(v112 + 128) = 0;
                      *(_QWORD *)(v112 + 136) = 0;
                    }
                    *(_OWORD *)(v112 + 120) = *(_OWORD *)(v116 + 120);
                    *(_QWORD *)(v112 + 136) = *(_QWORD *)(v116 + 136);
                    *(_QWORD *)(v116 + 120) = 0;
                    *(_QWORD *)(v116 + 128) = 0;
                    *(_QWORD *)(v116 + 136) = 0;
                    v120 = *(void **)(v112 + 144);
                    if (v120)
                    {
                      *(_QWORD *)(v112 + 152) = v120;
                      operator delete(v120);
                      *(_QWORD *)(v112 + 144) = 0;
                      *(_QWORD *)(v112 + 152) = 0;
                      *(_QWORD *)(v112 + 160) = 0;
                    }
                    *(_OWORD *)(v112 + 144) = *(_OWORD *)(v116 + 144);
                    *(_QWORD *)(v112 + 160) = *(_QWORD *)(v116 + 160);
                    *(_QWORD *)(v116 + 144) = 0;
                    *(_QWORD *)(v116 + 152) = 0;
                    *(_QWORD *)(v116 + 160) = 0;
                    v121 = *(void **)(v112 + 168);
                    if (v121)
                    {
                      *(_QWORD *)(v112 + 176) = v121;
                      operator delete(v121);
                      *(_QWORD *)(v112 + 168) = 0;
                      *(_QWORD *)(v112 + 176) = 0;
                      *(_QWORD *)(v112 + 184) = 0;
                    }
                    *(_OWORD *)(v112 + 168) = *(_OWORD *)(v116 + 168);
                    *(_QWORD *)(v112 + 184) = *(_QWORD *)(v116 + 184);
                    *(_QWORD *)(v116 + 168) = 0;
                    *(_QWORD *)(v116 + 176) = 0;
                    *(_QWORD *)(v116 + 184) = 0;
                    v122 = *(void **)(v112 + 192);
                    if (v122)
                    {
                      *(_QWORD *)(v112 + 200) = v122;
                      operator delete(v122);
                      *(_QWORD *)(v112 + 192) = 0;
                      *(_QWORD *)(v112 + 200) = 0;
                      *(_QWORD *)(v112 + 208) = 0;
                    }
                    *(_OWORD *)(v112 + 192) = *(_OWORD *)(v116 + 192);
                    *(_QWORD *)(v112 + 208) = *(_QWORD *)(v116 + 208);
                    *(_QWORD *)(v116 + 192) = 0;
                    *(_QWORD *)(v116 + 200) = 0;
                    *(_QWORD *)(v116 + 208) = 0;
                    v123 = *(void **)(v112 + 216);
                    if (v123)
                    {
                      *(_QWORD *)(v112 + 224) = v123;
                      operator delete(v123);
                      *(_QWORD *)(v112 + 216) = 0;
                      *(_QWORD *)(v112 + 224) = 0;
                      *(_QWORD *)(v112 + 232) = 0;
                    }
                    *(_OWORD *)(v112 + 216) = *(_OWORD *)(v116 + 216);
                    *(_QWORD *)(v112 + 232) = *(_QWORD *)(v116 + 232);
                    *(_QWORD *)(v116 + 216) = 0;
                    *(_QWORD *)(v116 + 224) = 0;
                    *(_QWORD *)(v116 + 232) = 0;
                    v112 = v116;
                    v111 = v164;
                  }
                  while (v113 <= v115);
                  v124 = a2 - 15;
                  v125 = v116 == (_QWORD)(a2 - 15);
                  a2 -= 15;
                  if (v125)
                  {
                    sub_20F00972C(v116, &v165);
                  }
                  else
                  {
                    sub_20F00972C(v116, v124);
                    sub_20F00972C((uint64_t)v124, &v165);
                    v126 = v116 - v163 + 240;
                    if (v126 >= 241)
                    {
                      v127 = (v126 / 0xF0uLL - 2) >> 1;
                      v128 = v163 + 240 * v127;
                      if (*(_DWORD *)v128 < *(_DWORD *)v116)
                      {
                        v129 = *(_OWORD *)v116;
                        v186 = *(_QWORD *)(v116 + 16);
                        v185 = v129;
                        v187 = *(_OWORD *)(v116 + 24);
                        v188 = *(_QWORD *)(v116 + 40);
                        *(_QWORD *)(v116 + 24) = 0;
                        *(_QWORD *)(v116 + 32) = 0;
                        *(_QWORD *)(v116 + 40) = 0;
                        v189 = *(_OWORD *)(v116 + 48);
                        v190 = *(_QWORD *)(v116 + 64);
                        *(_QWORD *)(v116 + 48) = 0;
                        *(_QWORD *)(v116 + 56) = 0;
                        *(_QWORD *)(v116 + 64) = 0;
                        v191 = *(_OWORD *)(v116 + 72);
                        v192 = *(_QWORD *)(v116 + 88);
                        *(_QWORD *)(v116 + 72) = 0;
                        *(_QWORD *)(v116 + 80) = 0;
                        *(_QWORD *)(v116 + 88) = 0;
                        v193 = *(_OWORD *)(v116 + 96);
                        v194 = *(_QWORD *)(v116 + 112);
                        *(_QWORD *)(v116 + 96) = 0;
                        *(_QWORD *)(v116 + 104) = 0;
                        *(_QWORD *)(v116 + 112) = 0;
                        v195 = *(_OWORD *)(v116 + 120);
                        v196 = *(_QWORD *)(v116 + 136);
                        *(_QWORD *)(v116 + 120) = 0;
                        *(_QWORD *)(v116 + 128) = 0;
                        *(_QWORD *)(v116 + 136) = 0;
                        *(_OWORD *)v197 = *(_OWORD *)(v116 + 144);
                        v198 = *(_QWORD *)(v116 + 160);
                        *(_QWORD *)(v116 + 144) = 0;
                        *(_QWORD *)(v116 + 152) = 0;
                        *(_QWORD *)(v116 + 160) = 0;
                        v199 = *(_OWORD *)(v116 + 168);
                        v200 = *(_QWORD *)(v116 + 184);
                        *(_QWORD *)(v116 + 168) = 0;
                        *(_QWORD *)(v116 + 176) = 0;
                        *(_QWORD *)(v116 + 184) = 0;
                        *(_OWORD *)v201 = *(_OWORD *)(v116 + 192);
                        v202 = *(_QWORD *)(v116 + 208);
                        *(_QWORD *)(v116 + 192) = 0;
                        *(_QWORD *)(v116 + 200) = 0;
                        *(_QWORD *)(v116 + 208) = 0;
                        __p = *(_OWORD *)(v116 + 216);
                        v204 = *(_QWORD *)(v116 + 232);
                        *(_QWORD *)(v116 + 216) = 0;
                        *(_QWORD *)(v116 + 224) = 0;
                        *(_QWORD *)(v116 + 232) = 0;
                        v130 = v185;
                        do
                        {
                          v131 = v128;
                          v132 = *(_OWORD *)v128;
                          *(_QWORD *)(v116 + 16) = *(_QWORD *)(v128 + 16);
                          *(_OWORD *)v116 = v132;
                          sub_20F009884((_QWORD *)(v116 + 24), v128 + 24);
                          v133 = *(void **)(v116 + 120);
                          if (v133)
                          {
                            *(_QWORD *)(v116 + 128) = v133;
                            operator delete(v133);
                            *(_QWORD *)(v116 + 120) = 0;
                            *(_QWORD *)(v116 + 128) = 0;
                            *(_QWORD *)(v116 + 136) = 0;
                          }
                          *(_OWORD *)(v116 + 120) = *(_OWORD *)(v131 + 120);
                          *(_QWORD *)(v116 + 136) = *(_QWORD *)(v131 + 136);
                          *(_QWORD *)(v131 + 120) = 0;
                          *(_QWORD *)(v131 + 128) = 0;
                          *(_QWORD *)(v131 + 136) = 0;
                          v134 = *(void **)(v116 + 144);
                          if (v134)
                          {
                            *(_QWORD *)(v116 + 152) = v134;
                            operator delete(v134);
                            *(_QWORD *)(v116 + 144) = 0;
                            *(_QWORD *)(v116 + 152) = 0;
                            *(_QWORD *)(v116 + 160) = 0;
                          }
                          *(_OWORD *)(v116 + 144) = *(_OWORD *)(v131 + 144);
                          *(_QWORD *)(v116 + 160) = *(_QWORD *)(v131 + 160);
                          *(_QWORD *)(v131 + 144) = 0;
                          *(_QWORD *)(v131 + 152) = 0;
                          *(_QWORD *)(v131 + 160) = 0;
                          v135 = *(void **)(v116 + 168);
                          if (v135)
                          {
                            *(_QWORD *)(v116 + 176) = v135;
                            operator delete(v135);
                            *(_QWORD *)(v116 + 168) = 0;
                            *(_QWORD *)(v116 + 176) = 0;
                            *(_QWORD *)(v116 + 184) = 0;
                          }
                          *(_OWORD *)(v116 + 168) = *(_OWORD *)(v131 + 168);
                          *(_QWORD *)(v116 + 184) = *(_QWORD *)(v131 + 184);
                          *(_QWORD *)(v131 + 168) = 0;
                          *(_QWORD *)(v131 + 176) = 0;
                          *(_QWORD *)(v131 + 184) = 0;
                          v136 = *(void **)(v116 + 192);
                          if (v136)
                          {
                            *(_QWORD *)(v116 + 200) = v136;
                            operator delete(v136);
                            *(_QWORD *)(v116 + 192) = 0;
                            *(_QWORD *)(v116 + 200) = 0;
                            *(_QWORD *)(v116 + 208) = 0;
                          }
                          *(_OWORD *)(v116 + 192) = *(_OWORD *)(v131 + 192);
                          *(_QWORD *)(v116 + 208) = *(_QWORD *)(v131 + 208);
                          *(_QWORD *)(v131 + 192) = 0;
                          *(_QWORD *)(v131 + 200) = 0;
                          *(_QWORD *)(v131 + 208) = 0;
                          v137 = *(void **)(v116 + 216);
                          if (v137)
                          {
                            *(_QWORD *)(v116 + 224) = v137;
                            operator delete(v137);
                            *(_QWORD *)(v116 + 216) = 0;
                            *(_QWORD *)(v116 + 224) = 0;
                            *(_QWORD *)(v116 + 232) = 0;
                          }
                          *(_OWORD *)(v116 + 216) = *(_OWORD *)(v131 + 216);
                          *(_QWORD *)(v116 + 232) = *(_QWORD *)(v131 + 232);
                          *(_QWORD *)(v131 + 216) = 0;
                          *(_QWORD *)(v131 + 224) = 0;
                          *(_QWORD *)(v131 + 232) = 0;
                          if (!v127)
                            break;
                          v127 = (v127 - 1) >> 1;
                          v128 = v163 + 240 * v127;
                          v116 = v131;
                        }
                        while (*(_DWORD *)v128 < v130);
                        sub_20F00972C(v131, &v185);
                        if ((_QWORD)__p)
                        {
                          *((_QWORD *)&__p + 1) = __p;
                          operator delete((void *)__p);
                        }
                        if (v201[0])
                        {
                          v201[1] = v201[0];
                          operator delete(v201[0]);
                        }
                        if ((_QWORD)v199)
                        {
                          *((_QWORD *)&v199 + 1) = v199;
                          operator delete((void *)v199);
                        }
                        if (v197[0])
                        {
                          v197[1] = v197[0];
                          operator delete(v197[0]);
                        }
                        if ((_QWORD)v195)
                        {
                          *((_QWORD *)&v195 + 1) = v195;
                          operator delete((void *)v195);
                        }
                        sub_20E990FD8((void **)&v187);
                      }
                    }
                  }
                  if ((_QWORD)v183)
                  {
                    *((_QWORD *)&v183 + 1) = v183;
                    operator delete((void *)v183);
                  }
                  v9 = v163;
                  if (v181[0])
                  {
                    v181[1] = v181[0];
                    operator delete(v181[0]);
                  }
                  if ((_QWORD)v179)
                  {
                    *((_QWORD *)&v179 + 1) = v179;
                    operator delete((void *)v179);
                  }
                  if (v177[0])
                  {
                    v177[1] = v177[0];
                    operator delete(v177[0]);
                  }
                  if (v175[0])
                  {
                    v175[1] = v175[0];
                    operator delete(v175[0]);
                  }
                  result = sub_20E990FD8((void **)&v167);
                  v111 = v164 - 1;
                }
                while (v164 > 2);
                return result;
              }
            }
          }
          v12 = v11 >> 1;
          v13 = (__int128 *)(v6 + 240 * (v11 >> 1));
          v14 = *(_DWORD *)v8;
          if ((unint64_t)v10 >= 0x7801)
          {
            v15 = *(_DWORD *)v13;
            if (*(_DWORD *)v13 >= *(_DWORD *)v9)
            {
              v7 = (unint64_t)a2;
              if (v14 < v15)
              {
                sub_20F0095B8((uint64_t)v13, v8);
                if (*(_DWORD *)v13 < *(_DWORD *)v9)
                {
                  v18 = v9;
                  v19 = v13;
LABEL_21:
                  sub_20F0095B8(v18, v19);
                }
              }
            }
            else
            {
              if (v14 < v15)
              {
                sub_20F0095B8(v9, v8);
                v7 = (unint64_t)a2;
                goto LABEL_22;
              }
              sub_20F0095B8(v9, (__int128 *)(v9 + 240 * (v11 >> 1)));
              v7 = (unint64_t)a2;
              if (*(_DWORD *)v8 < *(_DWORD *)v13)
              {
                v18 = (uint64_t)v13;
                v19 = a2 - 15;
                goto LABEL_21;
              }
            }
LABEL_22:
            v23 = (_DWORD *)(v9 + 240);
            v22 = *(_DWORD *)(v9 + 240);
            v24 = v9 + 240 * v12;
            v27 = *(_DWORD *)(v24 - 240);
            v26 = (__int128 *)(v24 - 240);
            v25 = v27;
            v28 = *(_DWORD *)v159;
            if (v27 >= v22)
            {
              if (v28 >= v25 || (sub_20F0095B8((uint64_t)v26, v159), *(_DWORD *)v26 >= *v23))
              {
LABEL_31:
                v31 = v163 + 240 * v12;
                v34 = *(_DWORD *)(v31 + 240);
                v33 = (__int128 *)(v31 + 240);
                v32 = v34;
                v35 = *(_DWORD *)v157;
                if (v34 >= *(_DWORD *)(v163 + 480))
                {
                  if (v35 >= v32 || (sub_20F0095B8((uint64_t)v33, v157), *(_DWORD *)v33 >= *(_DWORD *)(v163 + 480)))
                  {
LABEL_40:
                    v38 = *(_DWORD *)v13;
                    v39 = *(_DWORD *)v33;
                    if (*(_DWORD *)v13 >= *(_DWORD *)v26)
                    {
                      if (v39 >= v38)
                        goto LABEL_49;
                      sub_20F0095B8((uint64_t)v13, v33);
                      if (*(_DWORD *)v13 >= *(_DWORD *)v26)
                        goto LABEL_49;
                      v40 = (uint64_t)v26;
                      v41 = v13;
                    }
                    else
                    {
                      v40 = (uint64_t)v26;
                      if (v39 >= v38)
                      {
                        sub_20F0095B8((uint64_t)v26, v13);
                        if (*(_DWORD *)v33 >= *(_DWORD *)v13)
                        {
LABEL_49:
                          v9 = v163;
                          v20 = v163;
                          v21 = v13;
                          goto LABEL_50;
                        }
                        v40 = (uint64_t)v13;
                      }
                      v41 = v33;
                    }
                    sub_20F0095B8(v40, v41);
                    goto LABEL_49;
                  }
                  v36 = v163 + 480;
                  v37 = v33;
                }
                else
                {
                  v36 = v163 + 480;
                  if (v35 >= v32)
                  {
                    sub_20F0095B8(v36, v33);
                    if (*(_DWORD *)v157 >= *(_DWORD *)v33)
                      goto LABEL_40;
                    v36 = (uint64_t)v33;
                  }
                  v37 = a2 - 45;
                }
                sub_20F0095B8(v36, v37);
                goto LABEL_40;
              }
              v29 = (uint64_t)v23;
              v30 = v26;
            }
            else
            {
              v29 = (uint64_t)v23;
              if (v28 >= v25)
              {
                sub_20F0095B8((uint64_t)v23, v26);
                if (*(_DWORD *)v159 >= *(_DWORD *)v26)
                  goto LABEL_31;
                v29 = (uint64_t)v26;
              }
              v30 = a2 - 30;
            }
            sub_20F0095B8(v29, v30);
            goto LABEL_31;
          }
          v16 = *(_DWORD *)v9;
          if (*(_DWORD *)v9 >= *(_DWORD *)v13)
          {
            v7 = (unint64_t)a2;
            if (v14 < v16)
            {
              sub_20F0095B8(v9, v8);
              if (*(_DWORD *)v9 < *(_DWORD *)v13)
              {
                v20 = (uint64_t)v13;
                v21 = (__int128 *)v9;
LABEL_50:
                sub_20F0095B8(v20, v21);
              }
            }
          }
          else
          {
            v17 = v9 + 240 * (v11 >> 1);
            if (v14 >= v16)
            {
              sub_20F0095B8(v17, (__int128 *)v9);
              v7 = (unint64_t)a2;
              if (*(_DWORD *)v8 >= *(_DWORD *)v9)
                goto LABEL_51;
              v20 = v9;
              v21 = a2 - 15;
              goto LABEL_50;
            }
            sub_20F0095B8(v17, v8);
            v7 = (unint64_t)a2;
          }
LABEL_51:
          --a3;
          if ((a4 & 1) == 0 && *(_DWORD *)(v9 - 240) >= *(_DWORD *)v9)
          {
            v58 = *(_QWORD *)(v9 + 16);
            v185 = *(_OWORD *)v9;
            v187 = *(_OWORD *)(v9 + 24);
            v59 = *(_QWORD *)(v9 + 40);
            v186 = v58;
            v188 = v59;
            *(_QWORD *)(v9 + 32) = 0;
            *(_QWORD *)(v9 + 40) = 0;
            *(_QWORD *)(v9 + 24) = 0;
            v189 = *(_OWORD *)(v9 + 48);
            v190 = *(_QWORD *)(v9 + 64);
            *(_QWORD *)(v9 + 56) = 0;
            *(_QWORD *)(v9 + 64) = 0;
            *(_QWORD *)(v9 + 48) = 0;
            v191 = *(_OWORD *)(v9 + 72);
            v192 = *(_QWORD *)(v9 + 88);
            *(_QWORD *)(v9 + 72) = 0;
            *(_QWORD *)(v9 + 80) = 0;
            *(_QWORD *)(v9 + 88) = 0;
            v193 = *(_OWORD *)(v9 + 96);
            v194 = *(_QWORD *)(v9 + 112);
            *(_QWORD *)(v9 + 96) = 0;
            *(_QWORD *)(v9 + 104) = 0;
            *(_QWORD *)(v9 + 112) = 0;
            v195 = *(_OWORD *)(v9 + 120);
            v196 = *(_QWORD *)(v9 + 136);
            *(_QWORD *)(v9 + 120) = 0;
            *(_QWORD *)(v9 + 128) = 0;
            *(_QWORD *)(v9 + 136) = 0;
            *(_OWORD *)v197 = *(_OWORD *)(v9 + 144);
            v198 = *(_QWORD *)(v9 + 160);
            *(_QWORD *)(v9 + 144) = 0;
            *(_QWORD *)(v9 + 152) = 0;
            *(_QWORD *)(v9 + 160) = 0;
            v199 = *(_OWORD *)(v9 + 168);
            v200 = *(_QWORD *)(v9 + 184);
            *(_QWORD *)(v9 + 168) = 0;
            *(_QWORD *)(v9 + 176) = 0;
            *(_QWORD *)(v9 + 184) = 0;
            *(_OWORD *)v201 = *(_OWORD *)(v9 + 192);
            v202 = *(_QWORD *)(v9 + 208);
            *(_QWORD *)(v9 + 192) = 0;
            *(_QWORD *)(v9 + 200) = 0;
            *(_QWORD *)(v9 + 208) = 0;
            __p = *(_OWORD *)(v9 + 216);
            v204 = *(_QWORD *)(v9 + 232);
            *(_QWORD *)(v9 + 216) = 0;
            *(_QWORD *)(v9 + 224) = 0;
            *(_QWORD *)(v9 + 232) = 0;
            v60 = v185;
            if (v185 >= *(_DWORD *)v8)
            {
              v62 = v9 + 240;
              do
              {
                v6 = v62;
                if (v62 >= v7)
                  break;
                v62 += 240;
              }
              while (v185 >= *(_DWORD *)v6);
            }
            else
            {
              v6 = v9;
              do
              {
                v61 = *(_DWORD *)(v6 + 240);
                v6 += 240;
              }
              while (v185 >= v61);
            }
            v63 = (__int128 *)v7;
            if (v6 < v7)
            {
              v63 = (__int128 *)v7;
              do
              {
                v64 = *((_DWORD *)v63 - 60);
                v63 -= 15;
              }
              while (v185 < v64);
            }
            while (v6 < (unint64_t)v63)
            {
              sub_20F0095B8(v6, v63);
              do
              {
                v65 = *(_DWORD *)(v6 + 240);
                v6 += 240;
              }
              while (v60 >= v65);
              do
              {
                v66 = *((_DWORD *)v63 - 60);
                v63 -= 15;
              }
              while (v60 < v66);
            }
            if (v6 - 240 != v9)
              sub_20F00972C(v9, (__int128 *)(v6 - 240));
            sub_20F00972C(v6 - 240, &v185);
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            if (v201[0])
            {
              v201[1] = v201[0];
              operator delete(v201[0]);
            }
            if ((_QWORD)v199)
            {
              *((_QWORD *)&v199 + 1) = v199;
              operator delete((void *)v199);
            }
            if (v197[0])
            {
              v197[1] = v197[0];
              operator delete(v197[0]);
            }
            if ((_QWORD)v195)
            {
              *((_QWORD *)&v195 + 1) = v195;
              operator delete((void *)v195);
            }
            result = sub_20E990FD8((void **)&v187);
            a4 = 0;
            continue;
          }
          v42 = 0;
          v43 = *(_QWORD *)(v9 + 16);
          v185 = *(_OWORD *)v9;
          v187 = *(_OWORD *)(v9 + 24);
          v44 = *(_QWORD *)(v9 + 40);
          v186 = v43;
          v188 = v44;
          *(_QWORD *)(v9 + 32) = 0;
          *(_QWORD *)(v9 + 40) = 0;
          *(_QWORD *)(v9 + 24) = 0;
          v189 = *(_OWORD *)(v9 + 48);
          v190 = *(_QWORD *)(v9 + 64);
          *(_QWORD *)(v9 + 56) = 0;
          *(_QWORD *)(v9 + 64) = 0;
          *(_QWORD *)(v9 + 48) = 0;
          v191 = *(_OWORD *)(v9 + 72);
          v192 = *(_QWORD *)(v9 + 88);
          *(_QWORD *)(v9 + 72) = 0;
          *(_QWORD *)(v9 + 80) = 0;
          *(_QWORD *)(v9 + 88) = 0;
          v193 = *(_OWORD *)(v9 + 96);
          v194 = *(_QWORD *)(v9 + 112);
          *(_QWORD *)(v9 + 96) = 0;
          *(_QWORD *)(v9 + 104) = 0;
          *(_QWORD *)(v9 + 112) = 0;
          v195 = *(_OWORD *)(v9 + 120);
          v196 = *(_QWORD *)(v9 + 136);
          *(_QWORD *)(v9 + 120) = 0;
          *(_QWORD *)(v9 + 128) = 0;
          *(_QWORD *)(v9 + 136) = 0;
          *(_OWORD *)v197 = *(_OWORD *)(v9 + 144);
          v198 = *(_QWORD *)(v9 + 160);
          *(_QWORD *)(v9 + 144) = 0;
          *(_QWORD *)(v9 + 152) = 0;
          *(_QWORD *)(v9 + 160) = 0;
          v199 = *(_OWORD *)(v9 + 168);
          v200 = *(_QWORD *)(v9 + 184);
          *(_QWORD *)(v9 + 168) = 0;
          *(_QWORD *)(v9 + 176) = 0;
          *(_QWORD *)(v9 + 184) = 0;
          *(_OWORD *)v201 = *(_OWORD *)(v9 + 192);
          v202 = *(_QWORD *)(v9 + 208);
          *(_QWORD *)(v9 + 192) = 0;
          *(_QWORD *)(v9 + 200) = 0;
          *(_QWORD *)(v9 + 208) = 0;
          __p = *(_OWORD *)(v9 + 216);
          v204 = *(_QWORD *)(v9 + 232);
          *(_QWORD *)(v9 + 216) = 0;
          *(_QWORD *)(v9 + 224) = 0;
          *(_QWORD *)(v9 + 232) = 0;
          v45 = v185;
          do
          {
            v46 = *(_DWORD *)(v9 + v42 + 240);
            v42 += 240;
          }
          while (v46 < v185);
          v47 = v9 + v42;
          v48 = (__int128 *)v7;
          if (v42 == 240)
          {
            v48 = (__int128 *)v7;
            do
            {
              if (v47 >= (unint64_t)v48)
                break;
              v50 = *((_DWORD *)v48 - 60);
              v48 -= 15;
            }
            while (v50 >= v185);
          }
          else
          {
            do
            {
              v49 = *((_DWORD *)v48 - 60);
              v48 -= 15;
            }
            while (v49 >= v185);
          }
          if (v47 >= (unint64_t)v48)
          {
            v55 = (__int128 *)(v47 - 240);
            v56 = v163;
            if (v47 - 240 == v163)
              goto LABEL_71;
LABEL_70:
            sub_20F00972C(v56, v55);
            goto LABEL_71;
          }
          v51 = v9 + v42;
          v52 = v48;
          do
          {
            sub_20F0095B8(v51, v52);
            do
            {
              v53 = *(_DWORD *)(v51 + 240);
              v51 += 240;
            }
            while (v53 < v45);
            do
            {
              v54 = *((_DWORD *)v52 - 60);
              v52 -= 15;
            }
            while (v54 >= v45);
          }
          while (v51 < (unint64_t)v52);
          v55 = (__int128 *)(v51 - 240);
          v56 = v163;
          if (v51 - 240 != v163)
            goto LABEL_70;
LABEL_71:
          sub_20F00972C((uint64_t)v55, &v185);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if (v201[0])
          {
            v201[1] = v201[0];
            operator delete(v201[0]);
          }
          if ((_QWORD)v199)
          {
            *((_QWORD *)&v199 + 1) = v199;
            operator delete((void *)v199);
          }
          if (v197[0])
          {
            v197[1] = v197[0];
            operator delete(v197[0]);
          }
          if ((_QWORD)v195)
          {
            *((_QWORD *)&v195 + 1) = v195;
            operator delete((void *)v195);
          }
          sub_20E990FD8((void **)&v187);
          if (v47 < (unint64_t)v48)
          {
LABEL_84:
            result = (void **)sub_20F00791C(v163, v55, a3, a4 & 1);
            a4 = 0;
            v6 = (unint64_t)(v55 + 15);
            continue;
          }
          v57 = sub_20F00918C(v163, (uint64_t)v55);
          v6 = (unint64_t)(v55 + 15);
          result = (void **)sub_20F00918C((uint64_t)(v55 + 15), v7);
          if (!(_DWORD)result)
          {
            if (v57)
              continue;
            goto LABEL_84;
          }
          a2 = v55;
          v6 = v163;
          if (v57)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if ((__int128 *)v6 == a2)
            return result;
          v77 = v6 + 240;
          if ((__int128 *)(v6 + 240) == a2)
            return result;
          v78 = 0;
          v79 = v6;
          while (1)
          {
            v80 = v77;
            if (*(_DWORD *)(v79 + 240) < *(_DWORD *)v79)
              break;
LABEL_133:
            v77 = v80 + 240;
            v78 += 240;
            v79 = v80;
            if ((__int128 *)(v80 + 240) == a2)
              return result;
          }
          v81 = *(_OWORD *)v77;
          v186 = *(_QWORD *)(v77 + 16);
          v185 = v81;
          v187 = *(_OWORD *)(v79 + 264);
          v188 = *(_QWORD *)(v79 + 280);
          *(_QWORD *)(v79 + 264) = 0;
          *(_QWORD *)(v79 + 272) = 0;
          *(_QWORD *)(v79 + 280) = 0;
          v189 = *(_OWORD *)(v79 + 288);
          v190 = *(_QWORD *)(v79 + 304);
          *(_QWORD *)(v79 + 288) = 0;
          *(_QWORD *)(v79 + 296) = 0;
          *(_QWORD *)(v79 + 304) = 0;
          v191 = *(_OWORD *)(v79 + 312);
          v192 = *(_QWORD *)(v79 + 328);
          *(_QWORD *)(v79 + 312) = 0;
          *(_QWORD *)(v79 + 320) = 0;
          *(_QWORD *)(v79 + 328) = 0;
          v193 = *(_OWORD *)(v79 + 336);
          v194 = *(_QWORD *)(v79 + 352);
          *(_QWORD *)(v79 + 336) = 0;
          *(_QWORD *)(v79 + 344) = 0;
          *(_QWORD *)(v79 + 352) = 0;
          v195 = *(_OWORD *)(v79 + 360);
          v196 = *(_QWORD *)(v79 + 376);
          *(_QWORD *)(v79 + 360) = 0;
          *(_QWORD *)(v79 + 368) = 0;
          *(_QWORD *)(v79 + 376) = 0;
          *(_OWORD *)v197 = *(_OWORD *)(v79 + 384);
          v198 = *(_QWORD *)(v79 + 400);
          *(_QWORD *)(v79 + 384) = 0;
          *(_QWORD *)(v79 + 392) = 0;
          *(_QWORD *)(v79 + 400) = 0;
          v199 = *(_OWORD *)(v79 + 408);
          v200 = *(_QWORD *)(v79 + 424);
          *(_QWORD *)(v79 + 408) = 0;
          *(_QWORD *)(v79 + 416) = 0;
          *(_QWORD *)(v79 + 424) = 0;
          *(_OWORD *)v201 = *(_OWORD *)(v79 + 432);
          v202 = *(_QWORD *)(v79 + 448);
          *(_QWORD *)(v79 + 432) = 0;
          *(_QWORD *)(v79 + 440) = 0;
          *(_QWORD *)(v79 + 448) = 0;
          __p = *(_OWORD *)(v79 + 456);
          v204 = *(_QWORD *)(v79 + 472);
          *(_QWORD *)(v79 + 456) = 0;
          *(_QWORD *)(v79 + 464) = 0;
          v82 = v78;
          *(_QWORD *)(v79 + 472) = 0;
          while (1)
          {
            v83 = v6 + v82;
            *(_OWORD *)(v83 + 240) = *(_OWORD *)(v6 + v82);
            *(_QWORD *)(v83 + 256) = *(_QWORD *)(v6 + v82 + 16);
            sub_20F009884((_QWORD *)(v6 + v82 + 264), v6 + v82 + 24);
            v84 = *(void **)(v6 + v82 + 360);
            if (v84)
            {
              *(_QWORD *)(v83 + 368) = v84;
              operator delete(v84);
              *(_QWORD *)(v83 + 368) = 0;
              *(_QWORD *)(v83 + 376) = 0;
            }
            *(_OWORD *)(v83 + 360) = *(_OWORD *)(v83 + 120);
            *(_QWORD *)(v83 + 376) = *(_QWORD *)(v83 + 136);
            *(_QWORD *)(v83 + 120) = 0;
            *(_QWORD *)(v83 + 128) = 0;
            *(_QWORD *)(v83 + 136) = 0;
            v85 = *(void **)(v83 + 384);
            if (v85)
            {
              v86 = v6 + v82;
              *(_QWORD *)(v6 + v82 + 392) = v85;
              operator delete(v85);
              *(_QWORD *)(v86 + 392) = 0;
              *(_QWORD *)(v86 + 400) = 0;
            }
            v87 = (_QWORD *)(v83 + 144);
            *(_OWORD *)(v83 + 384) = *(_OWORD *)(v83 + 144);
            v88 = v6 + v82;
            *(_QWORD *)(v6 + v82 + 400) = *(_QWORD *)(v6 + v82 + 160);
            *v87 = 0;
            v87[1] = 0;
            v87[2] = 0;
            v89 = *(void **)(v6 + v82 + 408);
            if (v89)
            {
              *(_QWORD *)(v88 + 416) = v89;
              operator delete(v89);
              *(_QWORD *)(v88 + 416) = 0;
              *(_QWORD *)(v88 + 424) = 0;
            }
            *(_OWORD *)(v88 + 408) = *(_OWORD *)(v88 + 168);
            *(_QWORD *)(v88 + 424) = *(_QWORD *)(v88 + 184);
            *(_QWORD *)(v88 + 168) = 0;
            *(_QWORD *)(v88 + 176) = 0;
            *(_QWORD *)(v88 + 184) = 0;
            v90 = *(void **)(v88 + 432);
            if (v90)
            {
              v91 = v6 + v82;
              *(_QWORD *)(v6 + v82 + 440) = v90;
              operator delete(v90);
              *(_QWORD *)(v91 + 440) = 0;
              *(_QWORD *)(v91 + 448) = 0;
            }
            v92 = (_QWORD *)(v88 + 192);
            *(_OWORD *)(v88 + 432) = *(_OWORD *)(v88 + 192);
            v93 = v6 + v82;
            *(_QWORD *)(v6 + v82 + 448) = *(_QWORD *)(v6 + v82 + 208);
            *v92 = 0;
            v92[1] = 0;
            v92[2] = 0;
            v94 = *(void **)(v6 + v82 + 456);
            if (v94)
            {
              *(_QWORD *)(v93 + 464) = v94;
              operator delete(v94);
              *(_QWORD *)(v93 + 464) = 0;
              *(_QWORD *)(v93 + 472) = 0;
            }
            *(_OWORD *)(v93 + 456) = *(_OWORD *)(v93 + 216);
            *(_QWORD *)(v93 + 472) = *(_QWORD *)(v93 + 232);
            *(_QWORD *)(v93 + 224) = 0;
            *(_QWORD *)(v93 + 232) = 0;
            *(_QWORD *)(v93 + 216) = 0;
            if (!v82)
              break;
            v95 = *(_DWORD *)(v6 + v82 - 240);
            v82 -= 240;
            if (v185 >= v95)
            {
              sub_20F00972C(v6 + v82 + 240, &v185);
              v96 = (void *)__p;
              if (!(_QWORD)__p)
              {
LABEL_152:
                if (v201[0])
                {
                  v201[1] = v201[0];
                  operator delete(v201[0]);
                }
                if ((_QWORD)v199)
                {
                  *((_QWORD *)&v199 + 1) = v199;
                  operator delete((void *)v199);
                }
                if (v197[0])
                {
                  v197[1] = v197[0];
                  operator delete(v197[0]);
                }
                if ((_QWORD)v195)
                {
                  *((_QWORD *)&v195 + 1) = v195;
                  operator delete((void *)v195);
                }
                result = sub_20E990FD8((void **)&v187);
                goto LABEL_133;
              }
LABEL_151:
              *((_QWORD *)&__p + 1) = v96;
              operator delete(v96);
              goto LABEL_152;
            }
          }
          sub_20F00972C(v6, &v185);
          v96 = (void *)__p;
          if (!(_QWORD)__p)
            goto LABEL_152;
          goto LABEL_151;
        }
        if ((__int128 *)v6 != a2)
        {
          v138 = v6 + 240;
          if ((__int128 *)(v6 + 240) != a2)
          {
            v139 = v6 - 240;
            do
            {
              v140 = v138;
              if (*(_DWORD *)(v9 + 240) < *(_DWORD *)v9)
              {
                v141 = *(_OWORD *)v138;
                v186 = *(_QWORD *)(v138 + 16);
                v185 = v141;
                v187 = *(_OWORD *)(v9 + 264);
                v188 = *(_QWORD *)(v9 + 280);
                *(_QWORD *)(v9 + 264) = 0;
                *(_QWORD *)(v9 + 272) = 0;
                *(_QWORD *)(v9 + 280) = 0;
                v189 = *(_OWORD *)(v9 + 288);
                v190 = *(_QWORD *)(v9 + 304);
                *(_QWORD *)(v9 + 288) = 0;
                *(_QWORD *)(v9 + 296) = 0;
                *(_QWORD *)(v9 + 304) = 0;
                v191 = *(_OWORD *)(v9 + 312);
                v192 = *(_QWORD *)(v9 + 328);
                *(_QWORD *)(v9 + 312) = 0;
                *(_QWORD *)(v9 + 320) = 0;
                *(_QWORD *)(v9 + 328) = 0;
                v193 = *(_OWORD *)(v9 + 336);
                v194 = *(_QWORD *)(v9 + 352);
                *(_QWORD *)(v9 + 336) = 0;
                *(_QWORD *)(v9 + 344) = 0;
                *(_QWORD *)(v9 + 352) = 0;
                v195 = *(_OWORD *)(v9 + 360);
                v196 = *(_QWORD *)(v9 + 376);
                *(_QWORD *)(v9 + 360) = 0;
                *(_QWORD *)(v9 + 368) = 0;
                *(_QWORD *)(v9 + 376) = 0;
                *(_OWORD *)v197 = *(_OWORD *)(v9 + 384);
                v198 = *(_QWORD *)(v9 + 400);
                *(_QWORD *)(v9 + 384) = 0;
                *(_QWORD *)(v9 + 392) = 0;
                *(_QWORD *)(v9 + 400) = 0;
                v199 = *(_OWORD *)(v9 + 408);
                v200 = *(_QWORD *)(v9 + 424);
                *(_QWORD *)(v9 + 408) = 0;
                *(_QWORD *)(v9 + 416) = 0;
                *(_QWORD *)(v9 + 424) = 0;
                *(_OWORD *)v201 = *(_OWORD *)(v9 + 432);
                v202 = *(_QWORD *)(v9 + 448);
                *(_QWORD *)(v9 + 432) = 0;
                *(_QWORD *)(v9 + 440) = 0;
                *(_QWORD *)(v9 + 448) = 0;
                __p = *(_OWORD *)(v9 + 456);
                v204 = *(_QWORD *)(v9 + 472);
                *(_QWORD *)(v9 + 456) = 0;
                *(_QWORD *)(v9 + 464) = 0;
                v142 = v139;
                *(_QWORD *)(v9 + 472) = 0;
                do
                {
                  *(_OWORD *)(v142 + 480) = *(_OWORD *)(v142 + 240);
                  *(_QWORD *)(v142 + 496) = *(_QWORD *)(v142 + 256);
                  sub_20F009884((_QWORD *)(v142 + 504), v142 + 264);
                  v144 = *(void **)(v142 + 600);
                  if (v144)
                  {
                    *(_QWORD *)(v142 + 608) = v144;
                    operator delete(v144);
                    *(_OWORD *)(v142 + 608) = 0u;
                  }
                  *(_OWORD *)(v142 + 600) = *(_OWORD *)(v142 + 360);
                  *(_QWORD *)(v142 + 616) = *(_QWORD *)(v142 + 376);
                  *(_QWORD *)(v142 + 368) = 0;
                  *(_QWORD *)(v142 + 376) = 0;
                  *(_QWORD *)(v142 + 360) = 0;
                  v145 = *(void **)(v142 + 624);
                  if (v145)
                  {
                    *(_QWORD *)(v142 + 632) = v145;
                    operator delete(v145);
                    *(_OWORD *)(v142 + 632) = 0u;
                  }
                  *(_OWORD *)(v142 + 624) = *(_OWORD *)(v142 + 384);
                  *(_QWORD *)(v142 + 640) = *(_QWORD *)(v142 + 400);
                  *(_QWORD *)(v142 + 392) = 0;
                  *(_QWORD *)(v142 + 400) = 0;
                  *(_QWORD *)(v142 + 384) = 0;
                  v146 = *(void **)(v142 + 648);
                  if (v146)
                  {
                    *(_QWORD *)(v142 + 656) = v146;
                    operator delete(v146);
                    *(_OWORD *)(v142 + 656) = 0u;
                  }
                  *(_OWORD *)(v142 + 648) = *(_OWORD *)(v142 + 408);
                  *(_QWORD *)(v142 + 664) = *(_QWORD *)(v142 + 424);
                  *(_QWORD *)(v142 + 416) = 0;
                  *(_QWORD *)(v142 + 424) = 0;
                  *(_QWORD *)(v142 + 408) = 0;
                  v147 = *(void **)(v142 + 672);
                  if (v147)
                  {
                    *(_QWORD *)(v142 + 680) = v147;
                    operator delete(v147);
                    *(_OWORD *)(v142 + 680) = 0u;
                  }
                  *(_OWORD *)(v142 + 672) = *(_OWORD *)(v142 + 432);
                  *(_QWORD *)(v142 + 688) = *(_QWORD *)(v142 + 448);
                  *(_QWORD *)(v142 + 440) = 0;
                  *(_QWORD *)(v142 + 448) = 0;
                  *(_QWORD *)(v142 + 432) = 0;
                  v148 = *(void **)(v142 + 696);
                  if (v148)
                  {
                    *(_QWORD *)(v142 + 704) = v148;
                    operator delete(v148);
                    *(_OWORD *)(v142 + 704) = 0u;
                  }
                  *(_OWORD *)(v142 + 696) = *(_OWORD *)(v142 + 456);
                  *(_QWORD *)(v142 + 712) = *(_QWORD *)(v142 + 472);
                  *(_QWORD *)(v142 + 456) = 0;
                  *(_QWORD *)(v142 + 464) = 0;
                  *(_QWORD *)(v142 + 472) = 0;
                  v143 = *(_DWORD *)v142;
                  v142 -= 240;
                }
                while (v185 < v143);
                sub_20F00972C(v142 + 480, &v185);
                if ((_QWORD)__p)
                {
                  *((_QWORD *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (v201[0])
                {
                  v201[1] = v201[0];
                  operator delete(v201[0]);
                }
                if ((_QWORD)v199)
                {
                  *((_QWORD *)&v199 + 1) = v199;
                  operator delete((void *)v199);
                }
                if (v197[0])
                {
                  v197[1] = v197[0];
                  operator delete(v197[0]);
                }
                if ((_QWORD)v195)
                {
                  *((_QWORD *)&v195 + 1) = v195;
                  operator delete((void *)v195);
                }
                result = sub_20E990FD8((void **)&v187);
              }
              v138 = v140 + 240;
              v139 += 240;
              v9 = v140;
            }
            while ((__int128 *)(v140 + 240) != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_20F00918C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  unsigned int v7;
  __int128 *v8;
  unsigned int v9;
  uint64_t v10;
  __int128 *v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  __int128 *v16;
  _DWORD *v17;
  __int128 *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  void *v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *v42[2];
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  __int128 __p;
  uint64_t v49;

  v4 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 240);
      if (*(_DWORD *)(a2 - 240) < *(_DWORD *)a1)
        goto LABEL_6;
      return result;
    case 3uLL:
      v8 = (__int128 *)(a1 + 240);
      v7 = *(_DWORD *)(a1 + 240);
      v6 = (__int128 *)(a2 - 240);
      v9 = *(_DWORD *)(a2 - 240);
      if (v7 >= *(_DWORD *)a1)
      {
        if (v9 >= v7)
          return result;
        sub_20F0095B8(a1 + 240, (__int128 *)(a2 - 240));
        if (*(_DWORD *)(a1 + 240) < *(_DWORD *)a1)
        {
LABEL_22:
          v10 = a1;
          v11 = v8;
LABEL_8:
          sub_20F0095B8(v10, v11);
        }
      }
      else
      {
        if (v9 < v7)
        {
LABEL_6:
          v10 = a1;
LABEL_7:
          v11 = v6;
          goto LABEL_8;
        }
        sub_20F0095B8(a1, (__int128 *)(a1 + 240));
        if (*(_DWORD *)v6 < *(_DWORD *)(a1 + 240))
        {
          v10 = a1 + 240;
          goto LABEL_7;
        }
      }
      return 1;
    case 4uLL:
      sub_20F009B74((void **)a1, (__int128 *)(a1 + 240), (__int128 *)(a1 + 480), (__int128 *)(a2 - 240));
      return 1;
    case 5uLL:
      v8 = (__int128 *)(a1 + 240);
      v17 = (_DWORD *)(a1 + 480);
      sub_20F009B74((void **)a1, (__int128 *)(a1 + 240), (__int128 *)(a1 + 480), (__int128 *)(a1 + 720));
      v19 = *(_DWORD *)(a2 - 240);
      v18 = (__int128 *)(a2 - 240);
      if (v19 < *(_DWORD *)(a1 + 720))
      {
        sub_20F0095B8(a1 + 720, v18);
        if (*(_DWORD *)(a1 + 720) < *v17)
        {
          sub_20F0095B8(a1 + 480, (__int128 *)(a1 + 720));
          if (*v17 < *(_DWORD *)v8)
          {
            sub_20F0095B8(a1 + 240, (__int128 *)(a1 + 480));
            if (*(_DWORD *)(a1 + 240) < *(_DWORD *)a1)
              goto LABEL_22;
          }
        }
      }
      return 1;
    default:
      v12 = (_DWORD *)(a1 + 480);
      v13 = *(_DWORD *)(a1 + 240);
      v14 = *(_DWORD *)(a1 + 480);
      if (v13 < *(_DWORD *)a1)
      {
        v15 = a1;
        if (v14 >= v13)
        {
          sub_20F0095B8(a1, (__int128 *)(a1 + 240));
          if (*(_DWORD *)(a1 + 480) >= *(_DWORD *)(a1 + 240))
            goto LABEL_27;
          v15 = a1 + 240;
        }
        v16 = (__int128 *)(a1 + 480);
        goto LABEL_26;
      }
      if (v14 < v13)
      {
        sub_20F0095B8(a1 + 240, (__int128 *)(a1 + 480));
        if (*(_DWORD *)(a1 + 240) < *(_DWORD *)a1)
        {
          v15 = a1;
          v16 = (__int128 *)(a1 + 240);
LABEL_26:
          sub_20F0095B8(v15, v16);
        }
      }
LABEL_27:
      v20 = a1 + 720;
      if (a1 + 720 == a2)
        return 1;
      v21 = 0;
      v22 = 0;
      while (1)
      {
        if (*(_DWORD *)v20 < *v12)
        {
          v30 = *(_OWORD *)v20;
          v31 = *(_QWORD *)(v20 + 16);
          v32 = *(_OWORD *)(v20 + 24);
          v33 = *(_QWORD *)(v20 + 40);
          *(_QWORD *)(v20 + 24) = 0;
          *(_QWORD *)(v20 + 32) = 0;
          v34 = *(_OWORD *)(v20 + 48);
          v35 = *(_QWORD *)(v20 + 64);
          *(_QWORD *)(v20 + 40) = 0;
          *(_QWORD *)(v20 + 48) = 0;
          *(_QWORD *)(v20 + 56) = 0;
          *(_QWORD *)(v20 + 64) = 0;
          v36 = *(_OWORD *)(v20 + 72);
          v37 = *(_QWORD *)(v20 + 88);
          *(_QWORD *)(v20 + 72) = 0;
          *(_QWORD *)(v20 + 80) = 0;
          v38 = *(_OWORD *)(v20 + 96);
          v39 = *(_QWORD *)(v20 + 112);
          *(_QWORD *)(v20 + 88) = 0;
          *(_QWORD *)(v20 + 96) = 0;
          *(_QWORD *)(v20 + 104) = 0;
          *(_QWORD *)(v20 + 112) = 0;
          *(_OWORD *)v40 = *(_OWORD *)(v20 + 120);
          v41 = *(_QWORD *)(v20 + 136);
          *(_QWORD *)(v20 + 120) = 0;
          *(_QWORD *)(v20 + 128) = 0;
          *(_OWORD *)v42 = *(_OWORD *)(v20 + 144);
          v23 = *(_QWORD *)(v20 + 160);
          *(_QWORD *)(v20 + 136) = 0;
          *(_QWORD *)(v20 + 144) = 0;
          *(_QWORD *)(v20 + 152) = 0;
          *(_QWORD *)(v20 + 160) = 0;
          v44 = *(_OWORD *)(v20 + 168);
          v24 = *(_QWORD *)(v20 + 184);
          v43 = v23;
          v45 = v24;
          *(_QWORD *)(v20 + 168) = 0;
          *(_QWORD *)(v20 + 176) = 0;
          *(_OWORD *)v46 = *(_OWORD *)(v20 + 192);
          v25 = *(_QWORD *)(v20 + 208);
          *(_QWORD *)(v20 + 184) = 0;
          *(_QWORD *)(v20 + 192) = 0;
          *(_QWORD *)(v20 + 200) = 0;
          *(_QWORD *)(v20 + 208) = 0;
          __p = *(_OWORD *)(v20 + 216);
          v26 = *(_QWORD *)(v20 + 232);
          v47 = v25;
          v49 = v26;
          *(_QWORD *)(v20 + 216) = 0;
          *(_QWORD *)(v20 + 224) = 0;
          v27 = v21;
          *(_QWORD *)(v20 + 232) = 0;
          while (1)
          {
            sub_20F00972C(a1 + v27 + 720, (__int128 *)(a1 + v27 + 480));
            if (v27 == -480)
              break;
            v28 = *(_DWORD *)(a1 + v27 + 240);
            v27 -= 240;
            if (v30 >= v28)
            {
              sub_20F00972C(a1 + v27 + 720, &v30);
              v29 = (void *)__p;
              if (!(_QWORD)__p)
                goto LABEL_39;
              goto LABEL_38;
            }
          }
          sub_20F00972C(a1, &v30);
          v29 = (void *)__p;
          if (!(_QWORD)__p)
            goto LABEL_39;
LABEL_38:
          *((_QWORD *)&__p + 1) = v29;
          operator delete(v29);
LABEL_39:
          if (v46[0])
          {
            v46[1] = v46[0];
            operator delete(v46[0]);
          }
          if ((_QWORD)v44)
          {
            *((_QWORD *)&v44 + 1) = v44;
            operator delete((void *)v44);
          }
          if (v42[0])
          {
            v42[1] = v42[0];
            operator delete(v42[0]);
          }
          if (v40[0])
          {
            v40[1] = v40[0];
            operator delete(v40[0]);
          }
          ++v22;
          sub_20E990FD8((void **)&v32);
          if (v22 == 8)
            return v20 + 240 == a2;
        }
        v12 = (_DWORD *)v20;
        v21 += 240;
        v20 += 240;
        if (v20 == a2)
          return 1;
      }
  }
}

void **sub_20F0095B8(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  void *__p[2];
  uint64_t v27;

  v8 = *(_OWORD *)a1;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_OWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v12 = *(_OWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v14 = *(_OWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v16 = *(_OWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)v18 = *(_OWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)v20 = *(_OWORD *)(a1 + 144);
  v3 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)v22 = *(_OWORD *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 184);
  v21 = v3;
  v23 = v4;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)v24 = *(_OWORD *)(a1 + 192);
  v5 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a1 + 216);
  v6 = *(_QWORD *)(a1 + 232);
  v25 = v5;
  v27 = v6;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  sub_20F00972C(a1, a2);
  sub_20F00972C((uint64_t)a2, &v8);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  if (v20[0])
  {
    v20[1] = v20[0];
    operator delete(v20[0]);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  return sub_20E990FD8((void **)&v10);
}

uint64_t sub_20F00972C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  sub_20F009884((_QWORD *)(a1 + 24), (uint64_t)a2 + 24);
  v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(_QWORD *)(a1 + 128) = v5;
    operator delete(v5);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  v6 = *(void **)(a1 + 144);
  if (v6)
  {
    *(_QWORD *)(a1 + 152) = v6;
    operator delete(v6);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
  }
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 20) = 0;
  v7 = *(void **)(a1 + 168);
  if (v7)
  {
    *(_QWORD *)(a1 + 176) = v7;
    operator delete(v7);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
  }
  *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  v8 = *(void **)(a1 + 192);
  if (v8)
  {
    *(_QWORD *)(a1 + 200) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0;
  }
  *(_OWORD *)(a1 + 192) = a2[12];
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 24) = 0;
  *((_QWORD *)a2 + 25) = 0;
  *((_QWORD *)a2 + 26) = 0;
  v9 = *(void **)(a1 + 216);
  if (v9)
  {
    *(_QWORD *)(a1 + 224) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
  }
  *(_OWORD *)(a1 + 216) = *(__int128 *)((char *)a2 + 216);
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 27) = 0;
  *((_QWORD *)a2 + 28) = 0;
  *((_QWORD *)a2 + 29) = 0;
  return a1;
}

_QWORD *sub_20F009884(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;

  v4 = (char *)*a1;
  if (*a1)
  {
    v5 = (char *)a1[1];
    v6 = (char *)*a1;
    if (v5 != v4)
    {
      do
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = (char *)*a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v10 = (void **)(a1 + 3);
  v11 = a1[3];
  if (v11)
  {
    v12 = a1[4];
    v13 = (void *)a1[3];
    if (v12 != v11)
    {
      do
      {
        v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != v11);
      v13 = *v10;
    }
    a1[4] = v11;
    operator delete(v13);
    *v10 = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v17 = (void **)(a1 + 6);
  v18 = a1[6];
  if (v18)
  {
    v19 = a1[7];
    v20 = (void *)a1[6];
    if (v19 == v18)
    {
LABEL_40:
      a1[7] = v18;
      operator delete(v20);
      *v17 = 0;
      a1[7] = 0;
      a1[8] = 0;
      goto LABEL_41;
    }
    while (1)
    {
      if (*(_BYTE *)(v19 - 8))
      {
        v21 = *(std::__shared_weak_count **)(v19 - 304);
        if (!v21)
          goto LABEL_32;
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
          v24 = *(std::__shared_weak_count **)(v19 - 320);
          if (v24)
          {
LABEL_33:
            v25 = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
        }
        else
        {
LABEL_32:
          v24 = *(std::__shared_weak_count **)(v19 - 320);
          if (v24)
            goto LABEL_33;
        }
      }
      v19 -= 408;
      if (v19 == v18)
      {
        v20 = *v17;
        goto LABEL_40;
      }
    }
  }
LABEL_41:
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v27 = (void **)(a1 + 9);
  v28 = a1[9];
  if (v28)
  {
    v29 = a1[10];
    v30 = (void *)a1[9];
    if (v29 != v28)
    {
      do
      {
        if (*(_BYTE *)(v29 - 8))
        {
          v31 = *(std::__shared_weak_count **)(v29 - 16);
          if (v31)
          {
            v32 = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
        }
        v29 -= 24;
      }
      while (v29 != v28);
      v30 = *v27;
    }
    a1[10] = v28;
    operator delete(v30);
    *v27 = 0;
    a1[10] = 0;
    a1[11] = 0;
  }
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return a1;
}

void **sub_20F009B74(void **result, __int128 *a2, __int128 *a3, __int128 *a4)
{
  void **v7;
  unsigned int v8;
  unsigned int v9;
  __int128 *v10;

  v7 = result;
  v8 = *(_DWORD *)a2;
  v9 = *(_DWORD *)a3;
  if (*(_DWORD *)a2 >= *(_DWORD *)result)
  {
    if (v9 < v8)
    {
      result = sub_20F0095B8((uint64_t)a2, a3);
      if (*(_DWORD *)a2 < *(_DWORD *)v7)
      {
        result = v7;
        v10 = a2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v9 < v8)
    {
LABEL_5:
      v10 = a3;
LABEL_9:
      result = sub_20F0095B8((uint64_t)result, v10);
      goto LABEL_10;
    }
    result = sub_20F0095B8((uint64_t)result, a2);
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      result = (void **)a2;
      goto LABEL_5;
    }
  }
LABEL_10:
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    result = sub_20F0095B8((uint64_t)a3, a4);
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      result = sub_20F0095B8((uint64_t)a2, a3);
      if (*(_DWORD *)a2 < *(_DWORD *)v7)
        return sub_20F0095B8((uint64_t)v7, a2);
    }
  }
  return result;
}

uint64_t sub_20F009C78(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 240;
    sub_20E990F68(i - 240);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_20F009CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v7 = a7;
  if (a3 != a5)
  {
    v8 = (_QWORD *)(a7 - 120);
    do
    {
      v9 = *(_QWORD *)(a3 - 224);
      *(_OWORD *)(v8 - 15) = *(_OWORD *)(a3 - 240);
      *(v8 - 13) = v9;
      *(v8 - 12) = 0;
      *(v8 - 11) = 0;
      *(v8 - 10) = 0;
      *((_OWORD *)v8 - 6) = *(_OWORD *)(a3 - 216);
      *(v8 - 10) = *(_QWORD *)(a3 - 200);
      *(_QWORD *)(a3 - 216) = 0;
      *(_QWORD *)(a3 - 208) = 0;
      *(_QWORD *)(a3 - 200) = 0;
      *(v8 - 9) = 0;
      *(v8 - 8) = 0;
      *(v8 - 7) = 0;
      *(_OWORD *)(v8 - 9) = *(_OWORD *)(a3 - 192);
      *(v8 - 7) = *(_QWORD *)(a3 - 176);
      *(_QWORD *)(a3 - 192) = 0;
      *(_QWORD *)(a3 - 184) = 0;
      *(_QWORD *)(a3 - 176) = 0;
      *(v8 - 6) = 0;
      *(v8 - 5) = 0;
      *(v8 - 4) = 0;
      *((_OWORD *)v8 - 3) = *(_OWORD *)(a3 - 168);
      *(v8 - 4) = *(_QWORD *)(a3 - 152);
      *(_QWORD *)(a3 - 168) = 0;
      *(_QWORD *)(a3 - 160) = 0;
      *(_QWORD *)(a3 - 152) = 0;
      *(v8 - 3) = 0;
      *(v8 - 2) = 0;
      *(v8 - 1) = 0;
      *(_OWORD *)(v8 - 3) = *(_OWORD *)(a3 - 144);
      *(v8 - 1) = *(_QWORD *)(a3 - 128);
      *(_QWORD *)(a3 - 144) = 0;
      *(_QWORD *)(a3 - 136) = 0;
      *(_QWORD *)(a3 - 128) = 0;
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *(_OWORD *)v8 = *(_OWORD *)(a3 - 120);
      v8[2] = *(_QWORD *)(a3 - 104);
      *(_QWORD *)(a3 - 120) = 0;
      *(_QWORD *)(a3 - 112) = 0;
      *(_QWORD *)(a3 - 104) = 0;
      v8[3] = 0;
      v8[4] = 0;
      v8[5] = 0;
      *(_OWORD *)(v8 + 3) = *(_OWORD *)(a3 - 96);
      v8[5] = *(_QWORD *)(a3 - 80);
      *(_QWORD *)(a3 - 96) = 0;
      *(_QWORD *)(a3 - 88) = 0;
      *(_QWORD *)(a3 - 80) = 0;
      v8[6] = 0;
      v8[7] = 0;
      v8[8] = 0;
      *((_OWORD *)v8 + 3) = *(_OWORD *)(a3 - 72);
      v8[8] = *(_QWORD *)(a3 - 56);
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      v8[9] = 0;
      v8[10] = 0;
      v8[11] = 0;
      *(_OWORD *)(v8 + 9) = *(_OWORD *)(a3 - 48);
      v8[11] = *(_QWORD *)(a3 - 32);
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      v8[12] = 0;
      v8[13] = 0;
      v8[14] = 0;
      result = *(__n128 *)(a3 - 24);
      *((__n128 *)v8 + 6) = result;
      v8[14] = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v8 -= 30;
      v7 -= 240;
      a3 -= 240;
    }
    while (a3 != a5);
  }
  return result;
}

void sub_20F009E24(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  __int128 v21;
  char *v22;

  v5 = a1[1];
  v4 = a1[2];
  if (0x4EC4EC4EC4EC4EC5 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 104 * ((104 * a2 - 104) / 0x68) + 104;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x276276276276276)
      sub_20E867F44();
    v9 = 0x4EC4EC4EC4EC4EC5 * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x13B13B13B13B13BLL)
      v10 = 0x276276276276276;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x276276276276276)
        sub_20E877A38();
      v11 = (char *)operator new(104 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[104 * v7];
    v14 = &v11[104 * v10];
    v15 = 104 * ((104 * a2 - 104) / 0x68) + 104;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v5)
LABEL_21:
        operator delete(v5);
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v5[v17];
        v20 = *(_DWORD *)&v5[v17 - 104];
        *((_QWORD *)v18 - 11) = 0;
        *((_QWORD *)v18 - 10) = 0;
        v21 = *(_OWORD *)&v5[v17 - 96];
        *((_DWORD *)v18 - 26) = v20;
        *((_OWORD *)v18 - 6) = v21;
        *((_QWORD *)v18 - 10) = *(_QWORD *)&v5[v17 - 80];
        *((_QWORD *)v19 - 12) = 0;
        *((_QWORD *)v19 - 11) = 0;
        *((_QWORD *)v19 - 10) = 0;
        *((_QWORD *)v18 - 8) = 0;
        *((_QWORD *)v18 - 7) = 0;
        *(_OWORD *)(v18 - 72) = *(_OWORD *)&v5[v17 - 72];
        *((_QWORD *)v18 - 7) = *(_QWORD *)&v5[v17 - 56];
        *((_QWORD *)v19 - 9) = 0;
        *((_QWORD *)v19 - 8) = 0;
        *((_QWORD *)v19 - 7) = 0;
        *((_QWORD *)v18 - 5) = 0;
        *((_QWORD *)v18 - 4) = 0;
        *((_OWORD *)v18 - 3) = *(_OWORD *)&v5[v17 - 48];
        *((_QWORD *)v18 - 4) = *(_QWORD *)&v5[v17 - 32];
        *((_QWORD *)v19 - 6) = 0;
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 4) = 0;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        *(_OWORD *)(v18 - 24) = *(_OWORD *)&v5[v17 - 24];
        *((_QWORD *)v18 - 1) = *(_QWORD *)&v5[v17 - 8];
        *((_QWORD *)v19 - 3) = 0;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        v17 -= 104;
      }
      while (&v5[v17] != v6);
      v5 = *a1;
      v22 = a1[1];
      *a1 = &v13[v17];
      a1[1] = v16;
      a1[2] = v14;
      while (v22 != v5)
      {
        v22 -= 104;
        sub_20E9905B4(v22);
      }
      if (v5)
        goto LABEL_21;
    }
  }
}

void sub_20F00A090(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _BYTE *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if (0xFAFAFAFAFAFAFAFBLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (!a2)
    {
LABEL_48:
      a1[1] = v5;
      return;
    }
    v11 = &v5[408 * a2];
    v12 = 408 * a2 - 408;
    if (v12 >= 0x198)
    {
      v38 = v12 / 0x198 + 1;
      v13 = &v5[408 * (v38 & 0x1FFFFFFFFFFFFFELL)];
      v39 = v38 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        *v5 = 0;
        v5[408] = 0;
        v5[400] = 0;
        v5[808] = 0;
        v5 += 816;
        v39 -= 2;
      }
      while (v39);
      if (v38 == (v38 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_47;
    }
    else
    {
      v13 = (_BYTE *)a1[1];
    }
    do
    {
      *v13 = 0;
      v13[400] = 0;
      v13 += 408;
    }
    while (v13 != v11);
LABEL_47:
    v5 = v11;
    goto LABEL_48;
  }
  v6 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)&v5[-*a1] >> 3);
  v7 = v6 + a2;
  if (v6 + a2 > 0xA0A0A0A0A0A0A0)
    sub_20E867F44();
  v8 = 0xFAFAFAFAFAFAFAFBLL * ((v4 - *a1) >> 3);
  if (2 * v8 > v7)
    v7 = 2 * v8;
  if (v8 >= 0x50505050505050)
    v9 = 0xA0A0A0A0A0A0A0;
  else
    v9 = v7;
  if (v9)
  {
    if (v9 > 0xA0A0A0A0A0A0A0)
      sub_20E877A38();
    v10 = (char *)operator new(408 * v9);
  }
  else
  {
    v10 = 0;
  }
  v14 = &v10[408 * v6];
  v15 = 408 * a2;
  v16 = &v14[408 * a2];
  v17 = v15 - 408;
  v18 = v14;
  if (v17 < 0x198)
    goto LABEL_54;
  v19 = v17 / 0x198 + 1;
  v18 = &v14[408 * (v19 & 0x1FFFFFFFFFFFFFELL)];
  v20 = v19 & 0x1FFFFFFFFFFFFFELL;
  v21 = v14;
  do
  {
    *v21 = 0;
    v21[408] = 0;
    v21[400] = 0;
    v21[808] = 0;
    v21 += 816;
    v20 -= 2;
  }
  while (v20);
  if (v19 != (v19 & 0x1FFFFFFFFFFFFFELL))
  {
LABEL_54:
    do
    {
      *v18 = 0;
      v18[400] = 0;
      v18 += 408;
    }
    while (v18 != v16);
  }
  v22 = &v10[408 * v9];
  v23 = (_BYTE *)*a1;
  if (v5 != (_BYTE *)*a1)
  {
    v24 = 0;
    do
    {
      v25 = &v14[v24];
      v26 = &v14[v24 - 408];
      v27 = &v5[v24];
      *v26 = 0;
      v14[v24 - 8] = 0;
      if (v5[v24 - 8])
      {
        *(_OWORD *)v26 = *(_OWORD *)(v27 - 408);
        v28 = *(_OWORD *)(v27 - 392);
        v29 = *(_OWORD *)(v27 - 376);
        v30 = *(_OWORD *)(v27 - 360);
        *(_OWORD *)&v14[v24 - 351] = *(_OWORD *)(v27 - 351);
        *(_OWORD *)&v14[v24 - 376] = v29;
        *(_OWORD *)&v14[v24 - 360] = v30;
        *(_OWORD *)&v14[v24 - 392] = v28;
        *(_OWORD *)(v25 - 328) = *(_OWORD *)(v27 - 328);
        *((_QWORD *)v27 - 40) = 0;
        *((_QWORD *)v27 - 41) = 0;
        *(_OWORD *)(v25 - 312) = *(_OWORD *)(v27 - 312);
        *((_QWORD *)v27 - 38) = 0;
        *((_QWORD *)v27 - 39) = 0;
        memcpy(v25 - 296, v27 - 296, 0x120uLL);
        *(v25 - 8) = 1;
      }
      v24 -= 408;
    }
    while (&v5[v24] != v23);
    v5 = (_BYTE *)*a1;
    v31 = (_BYTE *)a1[1];
    *a1 = &v14[v24];
    a1[1] = v16;
    a1[2] = v22;
    while (1)
    {
      if (v31 == v5)
        goto LABEL_41;
      if (*(v31 - 8))
      {
        v32 = (std::__shared_weak_count *)*((_QWORD *)v31 - 38);
        if (!v32)
          goto LABEL_33;
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          v35 = (std::__shared_weak_count *)*((_QWORD *)v31 - 40);
          if (!v35)
            goto LABEL_26;
        }
        else
        {
LABEL_33:
          v35 = (std::__shared_weak_count *)*((_QWORD *)v31 - 40);
          if (!v35)
            goto LABEL_26;
        }
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
LABEL_26:
      v31 -= 408;
    }
  }
  *a1 = v14;
  a1[1] = v16;
  a1[2] = v22;
LABEL_41:
  if (v5)
    operator delete(v5);
}

void sub_20F00A450(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  _OWORD *v26;
  _BYTE *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * a2 - 24;
      if (v12 < 0x18)
        goto LABEL_47;
      v13 = v12 / 0x18 + 1;
      v6 = &v5[24 * (v13 & 0x1FFFFFFFFFFFFFFELL)];
      v14 = v5 + 24;
      v15 = v13 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v14 - 24) = 0;
        *v14 = 0;
        *(v14 - 8) = 0;
        v14[16] = 0;
        v14 += 48;
        v15 -= 2;
      }
      while (v15);
      if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_47:
        do
        {
          *v6 = 0;
          v6[16] = 0;
          v6 += 24;
        }
        while (v6 != &v5[24 * a2]);
      }
      v6 = &v5[24 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*a1] >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v16 = &v11[24 * v7];
    v17 = &v16[24 * a2];
    v18 = 24 * a2 - 24;
    v19 = v16;
    if (v18 < 0x18)
      goto LABEL_48;
    v20 = v18 / 0x18 + 1;
    v19 = &v16[24 * (v20 & 0x1FFFFFFFFFFFFFFELL)];
    v21 = &v11[24 * v7 + 24];
    v22 = v20 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v21 - 24) = 0;
      *v21 = 0;
      *(v21 - 8) = 0;
      v21[16] = 0;
      v21 += 48;
      v22 -= 2;
    }
    while (v22);
    if (v20 != (v20 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_48:
      do
      {
        *v19 = 0;
        v19[16] = 0;
        v19 += 24;
      }
      while (v19 != v17);
    }
    v23 = &v11[24 * v10];
    v24 = (_BYTE *)*a1;
    if (v5 == (_BYTE *)*a1)
    {
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v23;
    }
    else
    {
      v25 = &v11[24 * v7];
      do
      {
        *(v25 - 24) = 0;
        v25 -= 24;
        v26 = v6 - 24;
        v25[16] = 0;
        if (*(v6 - 8))
        {
          *(_OWORD *)(v16 - 24) = *v26;
          *(_QWORD *)v26 = 0;
          *((_QWORD *)v6 - 2) = 0;
          *(v16 - 8) = 1;
        }
        v16 = v25;
        v6 -= 24;
      }
      while (v26 != (_OWORD *)v24);
      v6 = (_BYTE *)*a1;
      v27 = (_BYTE *)a1[1];
      *a1 = v25;
      a1[1] = v17;
      a1[2] = v23;
      while (v27 != v6)
      {
        if (*(v27 - 8))
        {
          v28 = (std::__shared_weak_count *)*((_QWORD *)v27 - 2);
          if (v28)
          {
            p_shared_owners = (unint64_t *)&v28->__shared_owners_;
            do
              v30 = __ldaxr(p_shared_owners);
            while (__stlxr(v30 - 1, p_shared_owners));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
        v27 -= 24;
      }
    }
    if (v6)
      operator delete(v6);
  }
}

void sub_20F00A71C(void **a1, unint64_t a2)
{
  _OWORD *v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _OWORD *v11;
  char *v12;
  _OWORD *v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  char *v17;
  _OWORD *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;

  v4 = a1[1];
  v5 = a1[2];
  if (0x6FB586FB586FB587 * ((v5 - (_BYTE *)v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = (_OWORD *)((char *)v4 + 440 * a2);
      do
      {
        *((_QWORD *)v4 + 48) = 0;
        v4[22] = 0uLL;
        v4[23] = 0uLL;
        v4[20] = 0uLL;
        v4[21] = 0uLL;
        v4[18] = 0uLL;
        v4[19] = 0uLL;
        v4[16] = 0uLL;
        v4[17] = 0uLL;
        v4[14] = 0uLL;
        v4[15] = 0uLL;
        v4[12] = 0uLL;
        v4[13] = 0uLL;
        v4[10] = 0uLL;
        v4[11] = 0uLL;
        v4[8] = 0uLL;
        v4[9] = 0uLL;
        v4[7] = 0uLL;
        *v4 = 0uLL;
        v4[1] = 0uLL;
        *(_DWORD *)v4 = -1;
        *((_QWORD *)v4 + 1) = 0xBFF0000000000000;
        *((_QWORD *)v4 + 17) = 0;
        *((_QWORD *)v4 + 18) = 0;
        *((_QWORD *)v4 + 16) = 0;
        *((_BYTE *)v4 + 152) = 0;
        *((_QWORD *)v4 + 43) = 0;
        *((_QWORD *)v4 + 44) = 0;
        *((_QWORD *)v4 + 42) = 0;
        *((_BYTE *)v4 + 360) = 0;
        v12 = (char *)v4 + 392;
        *(_OWORD *)((char *)v4 + 392) = 0uLL;
        *(_OWORD *)((char *)v4 + 408) = 0uLL;
        v4[1] = 0uLL;
        v4[2] = 0uLL;
        v4[2] = 0uLL;
        v4[3] = 0uLL;
        v4[3] = 0uLL;
        v4[4] = 0uLL;
        v4[4] = 0uLL;
        v4[5] = 0uLL;
        v4[5] = 0uLL;
        v4[6] = 0uLL;
        *((_BYTE *)v4 + 96) = 0;
        *(_OWORD *)((char *)v4 + 184) = 0uLL;
        v13 = (_OWORD *)((char *)v4 + 184);
        *(_OWORD *)((char *)v13 + 105) = 0uLL;
        v13[5] = 0uLL;
        v13[6] = 0uLL;
        v13[3] = 0uLL;
        v13[4] = 0uLL;
        v13[1] = 0uLL;
        v13[2] = 0uLL;
        v4 = v13 + 16;
        *((_OWORD *)v12 + 2) = 0uLL;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0x6FB586FB586FB587 * (((char *)v4 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x94F2094F2094F2)
      sub_20E867F44();
    v8 = 0x6FB586FB586FB587 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x4A7904A7904A79)
      v9 = 0x94F2094F2094F2;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x94F2094F2094F2)
        sub_20E877A38();
      v10 = (char *)operator new(440 * v9);
    }
    else
    {
      v10 = 0;
    }
    v14 = &v10[440 * v6];
    v15 = &v14[440 * a2];
    v16 = v14;
    do
    {
      *((_QWORD *)v16 + 48) = 0;
      v16[22] = 0uLL;
      v16[23] = 0uLL;
      v16[20] = 0uLL;
      v16[21] = 0uLL;
      v16[18] = 0uLL;
      v16[19] = 0uLL;
      v16[16] = 0uLL;
      v16[17] = 0uLL;
      v16[14] = 0uLL;
      v16[15] = 0uLL;
      v16[12] = 0uLL;
      v16[13] = 0uLL;
      v16[10] = 0uLL;
      v16[11] = 0uLL;
      v16[8] = 0uLL;
      v16[9] = 0uLL;
      v16[7] = 0uLL;
      *v16 = 0uLL;
      v16[1] = 0uLL;
      *(_DWORD *)v16 = -1;
      *((_QWORD *)v16 + 1) = 0xBFF0000000000000;
      *((_QWORD *)v16 + 17) = 0;
      *((_QWORD *)v16 + 18) = 0;
      *((_QWORD *)v16 + 16) = 0;
      *((_BYTE *)v16 + 152) = 0;
      *((_QWORD *)v16 + 43) = 0;
      *((_QWORD *)v16 + 44) = 0;
      *((_QWORD *)v16 + 42) = 0;
      *((_BYTE *)v16 + 360) = 0;
      v17 = (char *)v16 + 392;
      *(_OWORD *)((char *)v16 + 392) = 0uLL;
      *(_OWORD *)((char *)v16 + 408) = 0uLL;
      v16[1] = 0uLL;
      v16[2] = 0uLL;
      v16[2] = 0uLL;
      v16[3] = 0uLL;
      v16[3] = 0uLL;
      v16[4] = 0uLL;
      v16[4] = 0uLL;
      v16[5] = 0uLL;
      v16[5] = 0uLL;
      v16[6] = 0uLL;
      *((_BYTE *)v16 + 96) = 0;
      *(_OWORD *)((char *)v16 + 184) = 0uLL;
      v18 = (_OWORD *)((char *)v16 + 184);
      *(_OWORD *)((char *)v18 + 105) = 0uLL;
      v18[5] = 0uLL;
      v18[6] = 0uLL;
      v18[3] = 0uLL;
      v18[4] = 0uLL;
      v18[1] = 0uLL;
      v18[2] = 0uLL;
      v16 = v18 + 16;
      *((_OWORD *)v17 + 2) = 0uLL;
    }
    while (v16 != (_OWORD *)v15);
    v19 = &v10[440 * v9];
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 == *a1)
    {
      *a1 = v14;
      a1[1] = v15;
      a1[2] = v19;
      if (v20)
LABEL_25:
        operator delete(v20);
    }
    else
    {
      v22 = 0;
      do
      {
        v23 = *(_OWORD *)&v20[v22 - 440];
        v24 = (uint64_t)&v14[v22 - 440];
        *(_QWORD *)(v24 + 16) = *(_QWORD *)&v20[v22 - 424];
        *(_OWORD *)v24 = v23;
        sub_20F00AA38((uint64_t)&v14[v22 - 416], (uint64_t)&v20[v22 - 416]);
        sub_20F00AA38((uint64_t)&v14[v22 - 208], (uint64_t)&v20[v22 - 208]);
        v22 -= 440;
      }
      while (&v20[v22] != v21);
      v20 = (char *)*a1;
      v25 = (char *)a1[1];
      *a1 = &v14[v22];
      a1[1] = v15;
      for (a1[2] = v19; v25 != v20; v25 -= 440)
      {
        sub_20E990658((uint64_t)(v25 - 208));
        sub_20E990658((uint64_t)(v25 - 416));
      }
      if (v20)
        goto LABEL_25;
    }
  }
}

__n128 sub_20F00AA38(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  if (*(_BYTE *)(a2 + 96))
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_BYTE *)(a1 + 96) = 1;
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  result = *(__n128 *)(a2 + 184);
  *(__n128 *)(a1 + 184) = result;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  return result;
}

void sub_20F00AB74(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int8 v15;
  char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __uint64_t v32[2];
  void *v33;
  void *v34;
  unsigned int v35;
  __int16 v36;
  unsigned int v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  void *v42;
  char v43;
  char v44;
  void *v45;
  char v46;
  void *__p;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a1 + 51))
    return;
  v2 = *((_QWORD *)a1 + 6);
  if (v2)
  {
    v3 = *((_QWORD *)a1 + 2);
    v4 = *((_QWORD *)a1 + 23);
    if (v4)
      goto LABEL_4;
LABEL_7:
    v5 = v3 + 8 * v2;
    v6 = *((_QWORD *)a1 + 40);
    v7 = *((_QWORD *)a1 + 19) + 8 * ((uint64_t)(*((_QWORD *)a1 + 20) - *((_QWORD *)a1 + 19)) >> 3);
    if (v6)
      goto LABEL_5;
LABEL_8:
    v8 = *((_QWORD *)a1 + 36);
    v6 = (*((_QWORD *)a1 + 37) - v8) >> 3;
    goto LABEL_9;
  }
  v3 = *((_QWORD *)a1 + 2);
  v2 = (*((_QWORD *)a1 + 3) - v3) >> 3;
  v4 = *((_QWORD *)a1 + 23);
  if (!v4)
    goto LABEL_7;
LABEL_4:
  v5 = v3 + 8 * v2;
  v6 = *((_QWORD *)a1 + 40);
  v7 = *((_QWORD *)a1 + 19) + 8 * v4;
  if (!v6)
    goto LABEL_8;
LABEL_5:
  v8 = *((_QWORD *)a1 + 36);
LABEL_9:
  v9 = *(double *)(v5 - 8);
  v10 = *(double *)(v7 - 8);
  v11 = *(double *)(v8 + 8 * v6 - 8);
  v12 = *((unsigned __int8 *)a1 + 440);
  *((_BYTE *)a1 + 440) = 0;
  v13 = *((_QWORD *)a1 + 52);
  if (!v12)
  {
    if (*(_BYTE *)(v13 + 4))
    {
      v23 = a1[108];
      if (v23)
      {
        if (*(_DWORD *)v13 < v23 - 1)
        {
          ++*(_DWORD *)v13;
          goto LABEL_36;
        }
      }
    }
  }
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = sub_210219C18();
  v15 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v33 = (void *)__PAIR64__(*a1, 67109888);
    LOWORD(v34) = 1024;
    *(_DWORD *)((char *)&v34 + 2) = v9;
    HIWORD(v34) = 1024;
    v35 = v10;
    v36 = 1024;
    v37 = v11;
    v17 = (char *)_os_log_send_and_compose_impl();
    v18 = strlen(v17);
    v32[0] = 0;
    pthread_threadid_np(0, v32);
    v19 = v32[0];
    timespec_get((timespec *)v32, 1);
    sub_210219E20(&v33, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v14 + 1), (__int128 *)(v14 + 5), "Feature matching: Camera ID: [%02u], Feat:%u, C2P:%u, S2P:%u", 0x3CuLL, v17, v18, v19, v32);
    std::mutex::lock(&stru_254A5A410);
    v20 = qword_254A5A458;
    for (i = unk_254A5A460; v20 != i; v20 += 40)
    {
      v22 = *(_QWORD *)(v20 + 32);
      if (!v22)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 48))(v22, &v33);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v48 < 0)
    {
      operator delete(__p);
      if ((v46 & 0x80000000) == 0)
      {
LABEL_17:
        if (!v44)
        {
LABEL_27:
          if (v41 && v40 < 0)
            operator delete(v39);
          if (v38 < 0)
            operator delete(v34);
          if (v17)
            free(v17);
          goto LABEL_34;
        }
LABEL_25:
        if (v43 < 0)
          operator delete(v42);
        goto LABEL_27;
      }
    }
    else if ((v46 & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v45);
    if (!v44)
      goto LABEL_27;
    goto LABEL_25;
  }
LABEL_34:
  if (os_signpost_enabled((os_log_t)*v14))
  {
    v33 = (void *)__PAIR64__(*a1, 67109888);
    LOWORD(v34) = 1024;
    *(_DWORD *)((char *)&v34 + 2) = v9;
    HIWORD(v34) = 1024;
    v35 = v10;
    v36 = 1024;
    v37 = v11;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_36:
  v24 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
  {
    sub_20FCFB524();
    __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6D9C8);
  }
  v25 = *((_QWORD *)a1 + 6);
  if (!v25)
  {
    v26 = *(double *)(*((_QWORD *)a1 + 2) + 8 * ((uint64_t)(*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 3) - 8);
    v27 = *((_QWORD *)a1 + 23);
    if (v27)
      goto LABEL_39;
LABEL_41:
    v28 = *((_QWORD *)a1 + 19);
    v27 = (*((_QWORD *)a1 + 20) - v28) >> 3;
    goto LABEL_42;
  }
  v26 = *(double *)(*((_QWORD *)a1 + 2) + 8 * v25 - 8);
  v27 = *((_QWORD *)a1 + 23);
  if (!v27)
    goto LABEL_41;
LABEL_39:
  v28 = *((_QWORD *)a1 + 19);
LABEL_42:
  v29 = *(double *)(v28 + 8 * v27 - 8);
  v30 = *((_QWORD *)a1 + 40);
  v31 = *((_QWORD *)a1 + 36);
  if (!v30)
    v30 = (*((_QWORD *)a1 + 37) - v31) >> 3;
  sub_210237040("Feature matching: Camera ID: [%02u], Feat:%u, C2P:%u, S2P:%u", (std::string *)&v33, *a1, v26, v29, *(double *)(v31 + 8 * v30 - 8));
  sub_20EA5C6C8((uint64_t)&v33, qword_254A6D9A8);
  if (SBYTE1(v37) < 0)
    operator delete(v33);
}

void sub_20F00B06C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D9C8);
  _Unwind_Resume(a1);
}

void sub_20F00B084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  void *v50;

  if (a50 < 0)
  {
    operator delete(__p);
    if ((a44 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a38)
        goto LABEL_9;
LABEL_7:
      if (a37 < 0)
        operator delete(a32);
LABEL_9:
      if (a31 && a30 < 0)
        operator delete(a25);
      if (a24 < 0)
        operator delete(a16);
      if (!v50)
        _Unwind_Resume(exception_object);
      free(v50);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a44 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a39);
  if (!a38)
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20F00B158(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  uint64_t i;
  _DWORD v20[2];

  v2 = *(_QWORD *)(a2 + 24);
  for (i = *(_QWORD *)(a2 + 32); v2 != i; v2 += 104)
  {
    v4 = *(_QWORD *)(v2 + 8);
    v3 = *(_QWORD *)(v2 + 16);
    if (v4 != v3)
    {
      v5 = 0;
      do
      {
        v20[0] = *(_DWORD *)v2;
        v20[1] = v5;
        if (v20[0] >= 0x10000u)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v6 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v10 = qword_254A6DE40;
            v11 = qword_254A6DE48;
            while (v10 != v11)
            {
              v13 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v10;
              v12 = *(_QWORD *)(v10 + 8);
              v10 += 16;
              v13(v12, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
          }
          v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
LABEL_37:
            abort();
          qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        if (v5 >= 0x10000)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v8 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v14 = qword_254A6DE40;
            v15 = qword_254A6DE48;
            while (v14 != v15)
            {
              v17 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v14;
              v16 = *(_QWORD *)(v14 + 8);
              v14 += 16;
              v17(v16, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
          }
          v9 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v9 & 1) == 0)
          {
            if (__cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
          }
          if (!byte_254A6DE68)
            goto LABEL_37;
          qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        sub_20F00B490(a1, v20, v4);
        v4 += 440;
        ++v5;
      }
      while (v4 != v3);
    }
  }
}

void sub_20F00B490(uint64_t *a1, _DWORD *__sz, uint64_t a3)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  std::__shared_weak_count *v20;
  uint8x8_t v21;
  void **v22;
  unint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  _QWORD *v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  size_t v37;
  size_t v38;
  size_t v39;
  _QWORD *i;
  size_t v41;
  uint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  size_t v48;
  void *v49;
  unint64_t v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  unint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  unint64_t v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  unint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  double v111;
  _QWORD *v112;
  int v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  void *v122[2];
  void *v123;
  void *v124[2];
  void *v125;
  void *v126[3];
  __int128 v127;

  v6 = __sz[1];
  if (v6 >= 0xA)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = __sz[1];
  }
  v7 = v6 + 10 * *__sz;
  v8 = a1[1];
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6 + 10 * *__sz;
      if (v8 <= v7)
        v10 = v7 % v8;
    }
    else
    {
      v10 = ((_DWORD)v8 - 1) & v7;
    }
    v11 = *(void ***)(*a1 + 8 * v10);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = *((_QWORD *)v12 + 1);
            if (v14 == v7)
            {
              if (*((_DWORD *)v12 + 4) == (_DWORD)v7)
                goto LABEL_143;
            }
            else if ((v14 & (v8 - 1)) != v10)
            {
              goto LABEL_24;
            }
            v12 = *(char **)v12;
            if (!v12)
              goto LABEL_24;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v7)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v7)
              goto LABEL_143;
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v10)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_24:
  v15 = a1[5];
  v16 = *((unsigned int *)a1 + 12);
  v121 = 0;
  v17 = 8 * v15;
  if (v15)
  {
    if (v15 >> 61)
      sub_20E867F44();
    v121 = (char *)operator new(8 * v15);
    v119 = &v121[8 * v15];
    bzero(v121, 8 * v15);
    v117 = &v121[v17];
    v118 = v121;
  }
  else
  {
    v118 = 0;
    v119 = 0;
    v117 = 0;
  }
  *(_OWORD *)v122 = 0u;
  v123 = 0;
  if (v15)
  {
    v18 = (char *)operator new(8 * v15);
    v123 = v18;
    v116 = &v18[8 * v15];
    bzero(v18, 8 * v15);
    v115 = &v18[v17];
  }
  else
  {
    v115 = 0;
    v116 = 0;
    v18 = 0;
  }
  *(_OWORD *)v124 = 0u;
  v125 = 0;
  if (v15)
  {
    v19 = (char *)operator new(8 * v15);
    v125 = v19;
    v120 = &v19[8 * v15];
    bzero(v19, 8 * v15);
    v114 = &v19[v17];
  }
  else
  {
    v120 = 0;
    v114 = 0;
    v19 = 0;
  }
  memset(v126, 0, sizeof(v126));
  *(_QWORD *)&v127 = 0xFFEFFFFFFFFFFFFFLL;
  *((_QWORD *)&v127 + 1) = 0x7FEFFFFFFFFFFFFFLL;
  v20 = (std::__shared_weak_count *)operator new(0x20uLL);
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9C36D8;
  v20[1].__vftable = 0;
  v113 = v16;
  if (!v8)
    goto LABEL_55;
  v21 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v21.i16[0] = vaddlv_u8(v21);
  if (v21.u32[0] > 1uLL)
  {
    v16 = v7;
    if (v8 <= v7)
      v16 = v7 % v8;
  }
  else
  {
    v16 = ((_DWORD)v8 - 1) & v7;
  }
  v22 = *(void ***)(*a1 + 8 * v16);
  if (!v22 || (v12 = (char *)*v22) == 0)
  {
LABEL_55:
    v12 = (char *)operator new(0x1D8uLL);
    v112 = a1 + 2;
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = v7;
    *((_DWORD *)v12 + 4) = v7;
    *((_DWORD *)v12 + 6) = v7;
    *((_QWORD *)v12 + 4) = v15;
    *((_QWORD *)v12 + 5) = v118;
    *((_QWORD *)v12 + 6) = v117;
    *((_QWORD *)v12 + 7) = v119;
    v121 = 0;
    *((_OWORD *)v12 + 4) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    v122[1] = 0;
    *((_OWORD *)v12 + 6) = 0u;
    *((_OWORD *)v12 + 7) = 0u;
    *((_OWORD *)v12 + 8) = 0u;
    *((_OWORD *)v12 + 9) = xmmword_210313B70;
    *((_QWORD *)v12 + 20) = 0;
    *((_QWORD *)v12 + 21) = v15;
    *((_QWORD *)v12 + 22) = v18;
    *((_QWORD *)v12 + 23) = v115;
    *((_QWORD *)v12 + 24) = v116;
    v123 = 0;
    *(_OWORD *)(v12 + 200) = 0u;
    *(_OWORD *)(v12 + 232) = 0u;
    *(_OWORD *)(v12 + 216) = 0u;
    v124[1] = 0;
    *(_OWORD *)(v12 + 280) = xmmword_210313B70;
    *(_OWORD *)(v12 + 264) = 0u;
    *(_OWORD *)(v12 + 248) = 0u;
    *((_QWORD *)v12 + 37) = 0;
    *((_QWORD *)v12 + 38) = v15;
    *((_QWORD *)v12 + 39) = v19;
    *((_QWORD *)v12 + 40) = v114;
    *((_QWORD *)v12 + 41) = v120;
    v125 = 0;
    *((_OWORD *)v12 + 21) = 0u;
    *((_QWORD *)v12 + 44) = 0;
    *(_OWORD *)(v12 + 360) = *(_OWORD *)&v126[1];
    *((_QWORD *)v12 + 47) = 0;
    v126[1] = 0;
    *((_OWORD *)v12 + 25) = 0u;
    *((_OWORD *)v12 + 26) = v127;
    *((_OWORD *)v12 + 24) = 0u;
    *((_QWORD *)v12 + 54) = 0;
    *((_QWORD *)v12 + 55) = v20 + 1;
    *((_QWORD *)v12 + 56) = v20;
    *((_DWORD *)v12 + 114) = v113;
    v12[464] = 0;
    v25 = (float)(unint64_t)(a1[3] + 1);
    v26 = *((float *)a1 + 8);
    if (v8 && (float)(v26 * (float)v8) >= v25)
    {
      v27 = *a1;
      v28 = *(_QWORD **)(*a1 + 8 * v16);
      if (v28)
      {
LABEL_58:
        *(_QWORD *)v12 = *v28;
        goto LABEL_125;
      }
LABEL_119:
      *(_QWORD *)v12 = *v112;
      *v112 = v12;
      *(_QWORD *)(v27 + 8 * v16) = v112;
      if (!*(_QWORD *)v12)
      {
LABEL_126:
        ++a1[3];
        goto LABEL_131;
      }
      v50 = *(_QWORD *)(*(_QWORD *)v12 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v50 >= v8)
          v50 %= v8;
      }
      else
      {
        v50 &= v8 - 1;
      }
      v28 = (_QWORD *)(*a1 + 8 * v50);
LABEL_125:
      *v28 = v12;
      goto LABEL_126;
    }
    v29 = v8 < 3 || (v8 & (v8 - 1)) != 0;
    v30 = v29 | (2 * v8);
    v31 = vcvtps_u32_f32(v25 / v26);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v8 = a1[1];
    if (prime > v8)
    {
LABEL_70:
      if (prime >> 61)
        sub_20E877A38();
      v33 = operator new(8 * prime);
      v34 = (void *)*a1;
      *a1 = (uint64_t)v33;
      if (v34)
        operator delete(v34);
      v35 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v35++) = 0;
      while (prime != v35);
      v36 = (_QWORD *)*v112;
      if (!*v112)
        goto LABEL_102;
      v37 = v36[1];
      v38 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v39 = v37 & v38;
        *(_QWORD *)(*a1 + 8 * v39) = v112;
        for (i = (_QWORD *)*v36; *v36; i = (_QWORD *)*v36)
        {
          v41 = i[1] & v38;
          if (v41 == v39)
          {
            v36 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v41))
          {
            *v36 = *i;
            v42 = 8 * v41;
            *i = **(_QWORD **)(*a1 + v42);
            **(_QWORD **)(*a1 + v42) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v41) = v36;
            v36 = i;
            v39 = v41;
          }
        }
        goto LABEL_102;
      }
      if (v37 >= prime)
        v37 %= prime;
      *(_QWORD *)(*a1 + 8 * v37) = v112;
      v46 = (_QWORD *)*v36;
      if (!*v36)
      {
LABEL_102:
        v8 = prime;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_103;
        goto LABEL_118;
      }
      while (1)
      {
        v48 = v46[1];
        if (v48 >= prime)
          v48 %= prime;
        if (v48 == v37)
          goto LABEL_96;
        if (*(_QWORD *)(*a1 + 8 * v48))
        {
          *v36 = *v46;
          v47 = 8 * v48;
          *v46 = **(_QWORD **)(*a1 + v47);
          **(_QWORD **)(*a1 + v47) = v46;
          v46 = v36;
LABEL_96:
          v36 = v46;
          v46 = (_QWORD *)*v46;
          if (!v46)
            goto LABEL_102;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v48) = v36;
          v36 = v46;
          v46 = (_QWORD *)*v46;
          v37 = v48;
          if (!v46)
            goto LABEL_102;
        }
      }
    }
    if (prime < v8)
    {
      v43 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        v43 = std::__next_prime(v43);
      }
      else
      {
        v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2)
          v43 = v45;
      }
      if (prime <= v43)
        prime = v43;
      if (prime < v8)
      {
        if (!prime)
        {
          v49 = (void *)*a1;
          *a1 = 0;
          if (v49)
            operator delete(v49);
          v8 = 0;
          a1[1] = 0;
          goto LABEL_118;
        }
        goto LABEL_70;
      }
      v8 = a1[1];
    }
    if ((v8 & (v8 - 1)) != 0)
    {
LABEL_103:
      if (v8 <= v7)
      {
        v16 = v7 % v8;
        v27 = *a1;
        v28 = *(_QWORD **)(*a1 + 8 * (v7 % v8));
        if (v28)
          goto LABEL_58;
      }
      else
      {
        v16 = v7;
        v27 = *a1;
        v28 = *(_QWORD **)(*a1 + 8 * v7);
        if (v28)
          goto LABEL_58;
      }
      goto LABEL_119;
    }
LABEL_118:
    v16 = ((_DWORD)v8 - 1) & v7;
    v27 = *a1;
    v28 = *(_QWORD **)(*a1 + 8 * v16);
    if (v28)
      goto LABEL_58;
    goto LABEL_119;
  }
  if (v21.u32[0] < 2uLL)
  {
    while (1)
    {
      v24 = *((_QWORD *)v12 + 1);
      if (v24 == v7)
      {
        if (*((_DWORD *)v12 + 4) == (_DWORD)v7)
          goto LABEL_127;
      }
      else if ((v24 & (v8 - 1)) != v16)
      {
        goto LABEL_55;
      }
      v12 = *(char **)v12;
      if (!v12)
        goto LABEL_55;
    }
  }
  while (1)
  {
    v23 = *((_QWORD *)v12 + 1);
    if (v23 == v7)
      break;
    if (v23 >= v8)
      v23 %= v8;
    if (v23 != v16)
      goto LABEL_55;
LABEL_45:
    v12 = *(char **)v12;
    if (!v12)
      goto LABEL_55;
  }
  if (*((_DWORD *)v12 + 4) != (_DWORD)v7)
    goto LABEL_45;
LABEL_127:
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v52 = __ldaxr(p_shared_owners);
  while (__stlxr(v52 - 1, p_shared_owners));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_131:
  if (v126[1])
    operator delete(v126[1]);
  if (v125)
    operator delete(v125);
  if (v124[1])
    operator delete(v124[1]);
  if (v123)
    operator delete(v123);
  if (v122[1])
    operator delete(v122[1]);
  if (v121)
    operator delete(v121);
LABEL_143:
  if (*(_BYTE *)(a3 + 120) && (v53 = *(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) != 0)
  {
    if (v53 < 0)
      sub_20E867F44();
    v54 = (unint64_t)v53 >> 3;
  }
  else
  {
    v54 = 0;
  }
  v55 = (uint64_t)(*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 3;
  v56 = (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 4;
  if (*((_QWORD *)v12 + 20))
  {
    v57 = (double)(unint64_t)v56;
    v58 = *((_QWORD *)v12 + 10);
    if (v58)
    {
      v59 = *((double *)v12 + 16);
      v60 = vabdd_f64(v57, v59 / (double)v58);
      if (v58 == 1
        || (v61 = 1.0 / (double)v58 * *((double *)v12 + 17) - 1.0 / (double)v58 * v59 * (1.0 / (double)v58 * v59),
            v61 < 0.0))
      {
        v61 = 0.0;
      }
    }
    else
    {
      v60 = v57 + 1.0;
      v61 = 0.0;
    }
    if (v60 > sqrt(v61) * 3.0)
      goto LABEL_162;
  }
  if (!*((_QWORD *)v12 + 37))
    goto LABEL_163;
  v62 = (double)(unint64_t)v55;
  v63 = *((_QWORD *)v12 + 27);
  if (v63)
  {
    v64 = *((double *)v12 + 33);
    v65 = vabdd_f64(v62, v64 / (double)v63);
    if (v63 == 1
      || (v66 = 1.0 / (double)v63 * *((double *)v12 + 34) - 1.0 / (double)v63 * v64 * (1.0 / (double)v63 * v64),
          v66 < 0.0))
    {
      v66 = 0.0;
    }
  }
  else
  {
    v65 = v62 + 1.0;
    v66 = 0.0;
  }
  if (v65 > sqrt(v66) * 3.0)
  {
LABEL_162:
    LOBYTE(v67) = 1;
  }
  else
  {
LABEL_163:
    v67 = *((_QWORD *)v12 + 54);
    if (v67)
    {
      v68 = (double)v54;
      v69 = *((_QWORD *)v12 + 44);
      if (v69)
      {
        v70 = *((double *)v12 + 50);
        v71 = vabdd_f64(v68, v70 / (double)v69);
        if (v69 == 1
          || (v72 = 1.0 / (double)v69 * *((double *)v12 + 51) - 1.0 / (double)v69 * v70 * (1.0 / (double)v69 * v70),
              v72 < 0.0))
        {
          v72 = 0.0;
        }
      }
      else
      {
        v71 = v68 + 1.0;
        v72 = 0.0;
      }
      LOBYTE(v67) = v71 > sqrt(v72) * 3.0;
    }
  }
  v12[464] = v67;
  v73 = (double)(unint64_t)v55;
  v74 = v73 * v73 + *((double *)v12 + 32);
  *((double *)v12 + 31) = *((double *)v12 + 31) + (double)(unint64_t)v55;
  *((double *)v12 + 32) = v74;
  ++*((_QWORD *)v12 + 37);
  v75 = *((double *)v12 + 33) + (double)(unint64_t)v55;
  v76 = v73 * v73 + *((double *)v12 + 34);
  *((double *)v12 + 33) = v75;
  *((double *)v12 + 34) = v76;
  v77 = *((_QWORD *)v12 + 27);
  v78 = *((_QWORD *)v12 + 22);
  v79 = (*((_QWORD *)v12 + 23) - v78) >> 3;
  if (v77 >= v79)
  {
    v80 = *(double *)(v78 + 8 * *((_QWORD *)v12 + 25));
    *((double *)v12 + 33) = v75 - v80;
    *((double *)v12 + 34) = v76 - v80 * v80;
  }
  v81 = *((_QWORD *)v12 + 26);
  *(double *)(v78 + 8 * v81) = v73;
  v82 = v81 + 1;
  if (v81 + 1 >= v79)
    v83 = v79;
  else
    v83 = 0;
  *((_QWORD *)v12 + 26) = v82 - v83;
  if (v77 == v79)
  {
    v84 = *((_QWORD *)v12 + 25) + 1;
    if (v84 < v77)
      v77 = 0;
    *((_QWORD *)v12 + 25) = v84 - v77;
  }
  else
  {
    *((_QWORD *)v12 + 27) = v77 + 1;
  }
  v85 = *((double *)v12 + 35);
  if (v85 < v73)
    v85 = (double)(unint64_t)v55;
  if (*((double *)v12 + 36) <= v73)
    v73 = *((double *)v12 + 36);
  *((double *)v12 + 35) = v85;
  *((double *)v12 + 36) = v73;
  v86 = (double)v54;
  v87 = v86 * v86 + *((double *)v12 + 49);
  *((double *)v12 + 48) = *((double *)v12 + 48) + (double)v54;
  *((double *)v12 + 49) = v87;
  ++*((_QWORD *)v12 + 54);
  v88 = *((double *)v12 + 50) + (double)v54;
  v89 = v86 * v86 + *((double *)v12 + 51);
  *((double *)v12 + 50) = v88;
  *((double *)v12 + 51) = v89;
  v90 = *((_QWORD *)v12 + 44);
  v91 = *((_QWORD *)v12 + 39);
  v92 = (*((_QWORD *)v12 + 40) - v91) >> 3;
  if (v90 >= v92)
  {
    v93 = *(double *)(v91 + 8 * *((_QWORD *)v12 + 42));
    *((double *)v12 + 50) = v88 - v93;
    *((double *)v12 + 51) = v89 - v93 * v93;
  }
  v94 = *((_QWORD *)v12 + 43);
  *(double *)(v91 + 8 * v94) = v86;
  v95 = v94 + 1;
  if (v94 + 1 >= v92)
    v96 = v92;
  else
    v96 = 0;
  *((_QWORD *)v12 + 43) = v95 - v96;
  if (v90 == v92)
  {
    v97 = *((_QWORD *)v12 + 42) + 1;
    if (v97 < v90)
      v90 = 0;
    *((_QWORD *)v12 + 42) = v97 - v90;
  }
  else
  {
    *((_QWORD *)v12 + 44) = v90 + 1;
  }
  v98 = *((double *)v12 + 52);
  if (v98 < v86)
    v98 = (double)v54;
  if (*((double *)v12 + 53) <= v86)
    v86 = *((double *)v12 + 53);
  *((double *)v12 + 52) = v98;
  *((double *)v12 + 53) = v86;
  v99 = (double)(unint64_t)v56;
  v100 = v99 * v99 + *((double *)v12 + 15);
  *((double *)v12 + 14) = *((double *)v12 + 14) + (double)(unint64_t)v56;
  *((double *)v12 + 15) = v100;
  ++*((_QWORD *)v12 + 20);
  v101 = *((double *)v12 + 16) + (double)(unint64_t)v56;
  v102 = v99 * v99 + *((double *)v12 + 17);
  *((double *)v12 + 16) = v101;
  *((double *)v12 + 17) = v102;
  v103 = *((_QWORD *)v12 + 10);
  v104 = *((_QWORD *)v12 + 5);
  v105 = (*((_QWORD *)v12 + 6) - v104) >> 3;
  if (v103 >= v105)
  {
    v106 = *(double *)(v104 + 8 * *((_QWORD *)v12 + 8));
    *((double *)v12 + 16) = v101 - v106;
    *((double *)v12 + 17) = v102 - v106 * v106;
  }
  v107 = *((_QWORD *)v12 + 9);
  *(double *)(v104 + 8 * v107) = v99;
  v108 = v107 + 1;
  if (v107 + 1 >= v105)
    v109 = v105;
  else
    v109 = 0;
  *((_QWORD *)v12 + 9) = v108 - v109;
  if (v103 == v105)
  {
    v110 = *((_QWORD *)v12 + 8) + 1;
    if (v110 < v103)
      v103 = 0;
    *((_QWORD *)v12 + 8) = v110 - v103;
  }
  else
  {
    *((_QWORD *)v12 + 10) = v103 + 1;
  }
  v111 = *((double *)v12 + 18);
  if (v111 < v99)
    v111 = (double)(unint64_t)v56;
  if (*((double *)v12 + 19) <= v99)
    v99 = *((double *)v12 + 19);
  *((double *)v12 + 18) = v111;
  *((double *)v12 + 19) = v99;
}

void sub_20F00C294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F00C344(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = (std::__shared_weak_count *)a1[53];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[42];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[42];
  if (v5)
  {
LABEL_6:
    a1[43] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (void *)a1[36];
  if (v6)
  {
    a1[37] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[25];
  if (v7)
  {
    a1[26] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[19];
  if (v8)
  {
    a1[20] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[8];
  if (v9)
  {
    a1[9] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[2];
  if (v10)
  {
    a1[3] = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_20F00C408(uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20F00C344(v2 + 3);
    operator delete(v2);
  }
  return a1;
}

void sub_20F00C44C(_QWORD *a1@<X0>, int **a2@<X1>, void **a3@<X8>)
{
  int **v3;
  int *v6;
  int *v7;
  unsigned int *v8;
  unsigned int *v9;
  _DWORD *v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int **v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  void **v29;
  void *v30;
  std::logic_error *exception;
  unsigned int *v32;
  _QWORD *v33;
  void **v34;
  void *__p;
  unsigned int *v36;
  uint64_t v37;
  int v38;
  void **p_p;

  v3 = a2;
  v6 = *a2;
  v7 = a2[1];
  if (v7 == *a2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FeatureContainerUtil.cpp", 30, (uint64_t)"parameters.num_cameras()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *v3;
    v7 = v3[1];
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __p = 0;
  v36 = 0;
  v37 = 0;
  p_p = &__p;
  if (v6 != v7)
  {
    do
    {
      v38 = *v6;
      sub_20EA9AB98((uint64_t *)&p_p, &v38);
      v6 += 272;
    }
    while (v6 != v7);
    v9 = (unsigned int *)__p;
    v8 = v36;
    if (__p != v36)
    {
      v10 = 0;
      v32 = v36;
      v33 = a1;
      v34 = a3;
      do
      {
        while (1)
        {
          v11 = *v9;
          v12 = *v3;
          v13 = v3[1];
          if (*v3 != v13)
          {
            while (*v12 != (_DWORD)v11)
            {
              v12 += 272;
              if (v12 == v13)
                goto LABEL_39;
            }
          }
          if (v12 == v13)
          {
LABEL_39:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Requested camera id not found.");
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
          }
          v14 = v12[1] == 1 ? 1 : 2;
          v15 = *(_QWORD *)(*a1 + 8 * v11);
          v16 = *(_QWORD *)(v15 + 624);
          v17 = *(_QWORD *)(v15 + 632);
          v18 = (unint64_t)a3[2];
          if ((unint64_t)v10 >= v18)
            break;
          *v10 = v11;
          v10[1] = v14;
          *((_QWORD *)v10 + 1) = v16;
          *((_QWORD *)v10 + 2) = v17;
          a3[1] = v10 + 6;
          ++v9;
          v10 += 6;
          if (v9 == v8)
            goto LABEL_35;
        }
        v19 = v3;
        v20 = *a3;
        v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (_BYTE *)*a3) >> 3);
        v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v20) >> 3);
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 >= 0x555555555555555)
          v24 = 0xAAAAAAAAAAAAAAALL;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v25 = (char *)operator new(24 * v24);
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[24 * v21];
        *(_DWORD *)v26 = v11;
        *((_DWORD *)v26 + 1) = v14;
        *((_QWORD *)v26 + 1) = v16;
        *((_QWORD *)v26 + 2) = v17;
        v27 = v26;
        if (v10 == v20)
        {
          v29 = v34;
        }
        else
        {
          do
          {
            v28 = *(_OWORD *)(v10 - 6);
            *((_QWORD *)v27 - 1) = *((_QWORD *)v10 - 1);
            *(_OWORD *)(v27 - 24) = v28;
            v27 -= 24;
            v10 -= 6;
          }
          while (v10 != v20);
          v29 = v34;
          v10 = *v34;
        }
        v30 = v26 + 24;
        *v29 = v27;
        v29[1] = v26 + 24;
        v29[2] = &v25[24 * v24];
        v3 = v19;
        a3 = v29;
        if (v10)
          operator delete(v10);
        v8 = v32;
        a1 = v33;
        a3[1] = v30;
        ++v9;
        v10 = v30;
      }
      while (v9 != v32);
LABEL_35:
      v8 = (unsigned int *)__p;
    }
    if (v8)
    {
      v36 = v8;
      operator delete(v8);
    }
  }
}

void sub_20F00C72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v14;

  if (__p)
    operator delete(__p);
  v14 = *(void **)a11;
  if (*(_QWORD *)a11)
  {
    *(_QWORD *)(a11 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F00C78C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  __int128 v36;

  __p = operator new(0x20uLL);
  v36 = xmmword_2102DB470;
  strcpy((char *)__p, "FeatureProcessing parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)(a1 + 497));
  sub_20E8B2F9C((uint64_t *)&__p, "use_rotation_prior_feature_tracking", v4, "Use rotation prior for feature tracking");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 498));
  sub_20E8B2F9C((uint64_t *)&__p, "use_stereo_rotation_prior_feature_tracking", v5, "Use stereo rotation prior for feature tracking");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 499));
  sub_20E8B2F9C((uint64_t *)&__p, "FeatureProcessingConfig.use_temporal_rotation_prior_for_desciptor", v6, "Use temporal rotation prior for feature tracking");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EAA71FC((int *)(a1 + 464));
  sub_20E8B2F9C((uint64_t *)&__p, "num_short_range_frames_to_select", v7, "Number of short range jasper frames to select (0.3-1.2m)");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EAA71FC((int *)(a1 + 468));
  sub_20E8B2F9C((uint64_t *)&__p, "num_normal_range_frames_to_select", v8, "Number of normal range jasper frames to select (0.7-5m)");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EAF6358((unsigned __int8 *)(a1 + 500));
  sub_20E8B2F9C((uint64_t *)&__p, "imu_synch_filter_mode", v9, "IMU synchronization filter mode. See IMUFilteringMode.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EA9DB90((double *)(a1 + 504));
  sub_20E8B2F9C((uint64_t *)&__p, "point_feature_cropped_fov_deg", v10, "Cropped FOV of point feature measurements in degree. The valid range is [0, 180]. Any value beyond that is effectively no cropping.");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EAA14D8((_BYTE *)(a1 + 512));
  sub_20E8B2F9C((uint64_t *)&__p, "run_camera_allocation_strategy", v11, "Boolean indicating whether to run camera allocation strategy. Requires multi-camera system.");
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EA9DCF0((unsigned int *)(a1 + 516));
  sub_20E8B2F9C((uint64_t *)&__p, "minimum_stereo_features_for_stable_camera_tracking", v12, "Lower bound threshold for the number of stereo features required before the secondary camera features get used.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EF4E784((float *)(a1 + 520));
  sub_20E8B2F9C((uint64_t *)&__p, "point_feature_pruning_scale_threshold", v13, "The feature scale threshold below which features will be removed. The default negative value means that this option is disabled..");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EA9DCF0((unsigned int *)(a1 + 524));
  sub_20E8B2F9C((uint64_t *)&__p, "max_num_point_feature_large_scale", v14, "max_num_point_feature_large_scale.");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EA9DCF0((unsigned int *)(a1 + 528));
  sub_20E8B2F9C((uint64_t *)&__p, "max_num_point_feature_large_laplacian_after_scale", v15, "max_num_point_feature_large_laplacian_after_scale.");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20EAA14D8((_BYTE *)(a1 + 540));
  sub_20E8B2F9C((uint64_t *)&__p, "convert_coordinate_convention_from_pixel_center_to_top_left", v16, "Convert image coordinate convention from pixel-centered to top-left based.");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20EAA1638((_OWORD *)(a1 + 544));
  sub_20F14F224(a1, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20EFF5790((unsigned int *)(a1 + 532), &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20EFF502C(a1 + 560, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EA9DCF0((unsigned int *)(a1 + 688));
  sub_20E8B2F9C((uint64_t *)&__p, "max_features_kept_after_pruning", v18, "Maximum number of features to keep after pruning.");
  __p = (void *)nullsub_1(a2);
  v19 = sub_20EA9DB90((double *)(a1 + 696));
  sub_20E8B2F9C((uint64_t *)&__p, "point_feature_ratio_in_low_light", v19, "Ratio of the number of point features in low light.");
  __p = (void *)nullsub_1(a2);
  v20 = sub_20EA9DB90((double *)(a1 + 704));
  sub_20E8B2F9C((uint64_t *)&__p, "point_feature_ratio_in_low_stereo_coverage", v20, "Ratio by which the number of point features is adjusted in low stereo coverage.");
  __p = (void *)nullsub_1(a2);
  v21 = sub_20EAA14D8((_BYTE *)(a1 + 712));
  sub_20E8B2F9C((uint64_t *)&__p, "use_area_binning_feature_filter", v21, "Whether to use area binning based feature selection.");
  __p = (void *)nullsub_1(a2);
  v22 = sub_20EA9DCF0((unsigned int *)(a1 + 716));
  sub_20E8B2F9C((uint64_t *)&__p, "area_binning_num_bins_1d", v22, "The number of bins to divide each row/column of the image into.");
  __p = (void *)nullsub_1(a2);
  v23 = sub_20EF4E784((float *)(a1 + 720));
  sub_20E8B2F9C((uint64_t *)&__p, "area_binning_gaussian_kernel_sigma", v23, "Sigma of the gaussian kernal used to assign the number of features selected from each region of the image.");
  __p = (void *)nullsub_1(a2);
  v24 = sub_20EAA14D8((_BYTE *)(a1 + 724));
  sub_20E8B2F9C((uint64_t *)&__p, "FeatureProcessingConfig.keep_reloc_features_for_mono_stream", v24, "keep_reloc_features_for_mono_stream.");
  __p = (void *)nullsub_1(a2);
  v25 = sub_20EAA14D8((_BYTE *)(a1 + 725));
  sub_20E8B2F9C((uint64_t *)&__p, "use_f_theta_lens_in_homography_when_available", v25, "Whether or not to use f-theta lens in computing homography, when input cameras are fisheye lens.");
  __p = (void *)nullsub_1(a2);
  v26 = sub_20EAA14D8((_BYTE *)(a1 + 726));
  sub_20E8B2F9C((uint64_t *)&__p, "FeatureProcessingConfig.update_imu_mode_and_biasl_for_gyro_assisted_feature_tracking_and_outlier_rejection", v26, "Update gyro bias used in gyro assisted feature tracking and outlier rejection. ");
  __p = (void *)nullsub_1(a2);
  v27 = sub_20F00CF9C((int *)(a1 + 728));
  sub_20E8B2F9C((uint64_t *)&__p, "FeatureProcessingConfig.camera_lux_type", v27, "Camera lux type, used to increase the number of point features in low light. ");
  __p = (void *)nullsub_1(a2);
  v28 = sub_20EA9DB90((double *)(a1 + 736));
  sub_20E8B2F9C((uint64_t *)&__p, "FeatureProcessingConfig.max_low_light_lux_level", v28, "Upper bound of lux level in low light condition. ");
  __p = (void *)nullsub_1(a2);
  v29 = sub_20EA9DB90((double *)(a1 + 744));
  sub_20E8B2F9C((uint64_t *)&__p, "FeatureProcessingConfig.initialization_timestamp_for_debug_purpose", v29, "Initialization timestamp for debug purpose, only initialize after this timestamp.");
  __p = (void *)nullsub_1(a2);
  v30 = sub_20EAA14D8((_BYTE *)(a1 + 752));
  sub_20E8B2F9C((uint64_t *)&__p, "FeatureProcessingConfig.enable_debug_mode", v30, "Enable debug mode to allow controlling initialization timestamp.");
  __p = (void *)nullsub_1(a2);
  v31 = sub_20EAA71FC((int *)(a1 + 756));
  sub_20E8B2F9C((uint64_t *)&__p, "FeatureProcessingConfig.initial_starting_state_id", v31, "Initial starting state ID.");
  __p = (void *)nullsub_1(a2);
  v32 = sub_20EAA14D8((_BYTE *)(a1 + 727));
  sub_20E8B2F9C((uint64_t *)&__p, "FeatureProcessingConfig.enable_imu_sampler", v32, " Enable IMU sampler for the IMU measurements received from the IMU/camera synchronization.");
  __p = (void *)nullsub_1(a2);
  v33 = sub_20EA9DCF0((unsigned int *)(a1 + 944));
  sub_20E8B2F9C((uint64_t *)&__p, "FeatureProcessingConfig.min_num_target_fp_to_enable_feature_selection", v33, "Skip raw feature ranking and selection with low number of targeted features.");
  sub_20EFDF760(a1 + 760, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20FD8ACF4(a1 + 816, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  return sub_20E869298((uint64_t)&__p);
}

void sub_20F00CE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F00CF9C(int *a1)
{
  uint64_t v2;
  uint64_t *v3;
  void (*v4)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;
  uint64_t v12;

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9F7870;
  *(_QWORD *)(v2 + 8) = &unk_24C9F78E8;
  *(_QWORD *)(v2 + 152) = &unk_24C9F7910;
  *(_OWORD *)(v2 + 160) = 0u;
  v3 = (uint64_t *)(v2 + 160);
  *(_OWORD *)(v2 + 176) = 0u;
  v9 = (uint64_t)off_24C9F7A88 + 1;
  v10[0] = a1;
  sub_20F00E140((uint64_t *)(v2 + 120), &v9);
  if (v9)
  {
    if ((v9 & 1) == 0)
    {
      v4 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 & 0xFFFFFFFFFFFFFFFELL);
      if (v4)
        v4(v10, v10, 2);
    }
    v9 = 0;
  }
  v5 = operator new();
  *(_QWORD *)v5 = &off_24C9F7A50;
  *(_DWORD *)(v5 + 8) = *a1;
  v6 = *v3;
  *v3 = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_20F00E2C0(a1);
  v7 = (void **)(v2 + 168);
  if (*(char *)(v2 + 191) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v11;
  *(_QWORD *)(v2 + 184) = v12;
  return v2;
}

void sub_20F00D0E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F00D0FC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F00D0FC(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void sub_20F00D14C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F00D65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F00D760(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F00D780(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F00D7A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F00D7A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F00D7B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20F00D808(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3vio3lux13CameraLuxTypeE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3vio3lux13CameraLuxTypeE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_DWORD *)(*a2 + 8);
    v7 = *(_DWORD **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_DWORD **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_628;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _DWORD *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F00D900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F00D914(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F7870;
  *(_QWORD *)(a1 + 8) = &unk_24C9F78E8;
  *(_QWORD *)(a1 + 152) = &unk_24C9F7910;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F00DCDC(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F00DCDC(a1);
}

void sub_20F00D97C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9F7870;
  *(_QWORD *)(a1 + 8) = &unk_24C9F78E8;
  *(_QWORD *)(a1 + 152) = &unk_24C9F7910;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F00DCDC(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20F00D9F8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a3 == a3[1] && (v4 = *(_QWORD *)(a1 + 80)) != 0)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v6 = *a2;
    *a2 = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    sub_20F00DDA8(a2, a3);
  }
}

void *sub_20F00DA74()
{
  return &unk_24C9F7A30;
}

uint64_t sub_20F00DA80(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F00DA88()
{
  return &unk_24C9F7A30;
}

uint64_t sub_20F00DA94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F7870;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F78E8;
  *(_QWORD *)(a1 + 144) = &unk_24C9F7910;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F00DCDC(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F00DCDC(v2);
}

void sub_20F00DB04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9F7870;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9F78E8;
  *(_QWORD *)(a1 + 144) = &unk_24C9F7910;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F00DCDC(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F00DB88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F7870;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F78E8;
  *(_QWORD *)a1 = &unk_24C9F7910;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F00DCDC(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F00DCDC(v2);
}

void sub_20F00DBF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9F7870;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9F78E8;
  *(_QWORD *)a1 = &unk_24C9F7910;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F00DCDC(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F00DC7C(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F00DC88(uint64_t a1)
{
  sub_20F00DCDC(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F00DCAC(uint64_t a1)
{
  return sub_20F00DCDC(a1 - 8);
}

void sub_20F00DCB4(uint64_t a1)
{
  sub_20F00DCDC(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F00DCDC(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9F79A8;
  *(_QWORD *)(a1 + 8) = &unk_24C9F7A18;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20F00DDA8(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  __int128 v5;
  uint64_t v6;
  __int128 *p_dst;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::bad_cast v11[16];
  __int128 __dst;
  uint64_t v13;
  int v14;
  uint64_t v15[2];

  sub_20E8B84BC(a1);
  v4 = (char *)sub_20E8B850C(a2, 0);
  if (v4[23] < 0)
  {
    sub_20E860C04(&__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v13 = *((_QWORD *)v4 + 2);
    __dst = v5;
  }
  v14 = 0;
  v6 = HIBYTE(v13);
  p_dst = &__dst;
  if (v13 < 0)
  {
    v6 = *((_QWORD *)&__dst + 1);
    p_dst = (__int128 *)__dst;
  }
  v15[0] = (uint64_t)p_dst;
  v15[1] = (uint64_t)p_dst + v6;
  if (!sub_20F00DF58(v15, &v14))
  {
    std::bad_cast::bad_cast(v11);
    v11[0].__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v11[1].__vftable = (std::bad_cast_vtbl *)&unk_24C9AB9F0;
    v11[2].__vftable = (std::bad_cast_vtbl *)&unk_24C9F7A30;
    sub_20EA9F254((uint64_t)v11);
  }
  v8 = v14;
  v9 = operator new();
  *(_QWORD *)v9 = &off_24C9F7A50;
  *(_DWORD *)(v9 + 8) = v8;
  v10 = *a1;
  *a1 = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (SHIBYTE(v13) < 0)
    operator delete((void *)__dst);
}

void sub_20F00DEDC()
{
  __break(1u);
}

void sub_20F00DF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8B9BA0((uint64_t)&a9);
  __cxa_end_catch();
  JUMPOUT(0x20F00DF3CLL);
}

BOOL sub_20F00DF58(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  uint64_t *v8;
  _BOOL8 v9;
  uint64_t v11[2];
  std::ios_base v12;
  uint64_t v13;
  int v14;
  _QWORD __sb[8];

  std::streambuf::basic_streambuf();
  v4 = *a1;
  v5 = a1[1];
  __sb[0] = &off_24C9C2750;
  __sb[2] = v4;
  __sb[3] = v4;
  __sb[4] = v5;
  v11[1] = 0;
  v12.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v11[0] = MEMORY[0x24BEDB820] + 24;
  std::ios_base::init(&v12, __sb);
  v13 = 0;
  v14 = -1;
  v6 = (std::ios_base *)((char *)v11 + *(_QWORD *)(v11[0] - 24));
  v6->__exceptions_ = 1;
  std::ios_base::clear(v6, v6->__rdstate_);
  v7 = v11[0];
  *(_DWORD *)((char *)&v11[1] + *(_QWORD *)(v11[0] - 24)) &= ~0x1000u;
  *(uint64_t *)((char *)&v11[2] + *(_QWORD *)(v7 - 24)) = 6;
  v8 = sub_20EB8E4FC(v11, a2);
  v9 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0 && std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  return v9;
}

void sub_20F00E07C(_Unwind_Exception *a1)
{
  std::istream::~istream();
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_20F00E0D8()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20F00E0EC()
{
  return &unk_24C9F7A30;
}

uint64_t sub_20F00E0F8(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9F7A50;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t *sub_20F00E140(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  __int128 v8;

  if (a2 == a1)
    return a1;
  v4 = *a1;
  if (*a1)
  {
    if ((v4 & 1) == 0)
    {
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
      if (v5)
        v5((uint64_t)(a1 + 1), (uint64_t)(a1 + 1), 2);
    }
    *a1 = 0;
  }
  v6 = *a2;
  if (!*a2)
    return a1;
  *a1 = v6;
  if ((v6 & 1) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 1, 0);
    return a1;
  }
  v8 = *(_OWORD *)(a2 + 1);
  a1[3] = a2[3];
  *(_OWORD *)(a1 + 1) = v8;
  return a1;
}

void sub_20F00E1E0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_20F00E1F0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20F00E204(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F7A98;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio3lux13CameraLuxTypeEEPN5boos"
                                      "t15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio3lux13CameraLuxTypeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_DWORD **sub_20F00E2B0(_DWORD **result, _DWORD *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20F00E2C0(int *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20F00E390((uint64_t)v5, (uint64_t)v2, a1);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9F7830[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9F7818[v3])(v5, v2);
  return result;
}

void sub_20F00E358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C9F7818[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20F00E390(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)(&off_24C9C5308)[2 * *a3], (uint64_t)(&off_24C9C5308)[2 * *a3 + 1]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C9F7848[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20F00E5F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20F00E614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F00E630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F00E644(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          sub_20F018FC0(v5);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_20F00E6B0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F018B88(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C40B42A76A6);
  }
  return a1;
}

uint64_t sub_20F00E6F4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 5528) + 8;
}

uint64_t sub_20F00E700(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t *v23;
  void ***v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v32;
  uint64_t v33;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v35;
  __int128 v36;
  uint64_t *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *__p;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  _OWORD v65[2];
  _BYTE v66[32];
  _BYTE v67[40];
  _BYTE v68[32];
  uint64_t v69;
  void *v70[3];
  double v71;
  _BYTE v72[17];

  *(_QWORD *)a1 = off_24C9F7BA0;
  sub_20E86C0E4(a1 + 8, (uint64_t)a2);
  sub_20E8A1408(a1 + 960, a3);
  *(_QWORD *)(a1 + 3416) = 0;
  *(_QWORD *)(a1 + 3448) = 0;
  *(_QWORD *)(a1 + 3480) = 0;
  *(_QWORD *)(a1 + 3512) = 0;
  *(_BYTE *)(a1 + 3520) = 0;
  *(_BYTE *)(a1 + 5520) = 0;
  *(_QWORD *)a1 = &off_24C9F7AB8;
  v8 = operator new();
  *(_QWORD *)(v8 + 48) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  *(_BYTE *)(v8 + 56) = 1;
  *(_QWORD *)(v8 + 64) = 0x4004000000000000;
  *(_OWORD *)(v8 + 72) = xmmword_2102E6700;
  *(_OWORD *)(v8 + 88) = xmmword_2102E6710;
  *(_QWORD *)(v8 + 104) = 0x500000014;
  *(_OWORD *)(v8 + 112) = xmmword_2102E6720;
  v9 = operator new();
  *(_QWORD *)v9 = 0x4004000000000000;
  *(_OWORD *)(v9 + 8) = xmmword_2102E6700;
  *(_OWORD *)(v9 + 24) = xmmword_2102E6710;
  *(_QWORD *)(v9 + 40) = 0x500000014;
  *(_OWORD *)(v9 + 48) = xmmword_2102E6720;
  *(_WORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_BYTE *)(v9 + 80) = 0;
  *(_BYTE *)(v9 + 88) = 0;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_QWORD *)(v8 + 128) = v9;
  *(_BYTE *)(v8 + 136) = *(_BYTE *)(v8 + 56) == 2;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_QWORD *)(v8 + 288) = a1;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_DWORD *)(v8 + 328) = 1065353216;
  *(_BYTE *)(v8 + 336) = 0;
  *(_BYTE *)(v8 + 344) = 0;
  *(_BYTE *)(v8 + 352) = 0;
  v10 = operator new(0x30uLL);
  v10[2] = 0;
  v11 = a1 + 5528;
  *v10 = &unk_24C9EE8E0;
  v10[1] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  *(_QWORD *)(v8 + 360) = v10 + 3;
  *(_QWORD *)(v8 + 368) = v10;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_DWORD *)(v8 + 408) = 1065353216;
  *(_QWORD *)(v8 + 416) = 20;
  *(_DWORD *)(v8 + 424) = 40;
  *(_DWORD *)(v8 + 432) = 0;
  *(_BYTE *)(v8 + 472) = 0;
  *(_QWORD *)(v8 + 440) = 0;
  *(_QWORD *)(v8 + 448) = 0;
  *(_BYTE *)(v8 + 456) = 0;
  *(_QWORD *)(a1 + 5528) = v8;
  sub_20FD33090((void **)(v8 + 160), a4);
  sub_20F00EFF4(a1);
  v12 = a2[117] + a2[116];
  v13 = *(_QWORD **)(a1 + 5528);
  v52 = xmmword_21039A070;
  *(_QWORD *)&v53 = 0x3FE0000000000000;
  BYTE8(v53) = 2;
  HIDWORD(v53) = 0;
  LODWORD(v54) = v12;
  *(_QWORD *)((char *)&v54 + 4) = 0xA00000005;
  HIDWORD(v54) = 5;
  v56 = 0;
  *(_QWORD *)&v57 = 0;
  __p = 0;
  v14 = (void *)operator new();
  sub_20F0E8584((uint64_t)v14, &v52);
  v70[0] = v14;
  v15 = (_QWORD *)v13[5];
  if ((unint64_t)v15 >= v13[6])
  {
    v16 = sub_20F018E30(v13 + 4, (uint64_t *)v70);
    v17 = v70[0];
    v13[5] = v16;
    if (v17)
      sub_20F018FC0((uint64_t)v17);
  }
  else
  {
    *v15 = v14;
    v13[5] = v15 + 1;
  }
  v18 = *(_QWORD **)v11;
  v52 = xmmword_21039A070;
  *(_QWORD *)&v53 = 0x3FE0000000000000;
  BYTE8(v53) = 1;
  HIDWORD(v53) = 1;
  LODWORD(v54) = v12;
  *(_QWORD *)((char *)&v54 + 4) = 0xA00000005;
  HIDWORD(v54) = 5;
  v56 = 0;
  *(_QWORD *)&v57 = 0;
  __p = 0;
  v19 = (void *)operator new();
  sub_20F0E8584((uint64_t)v19, &v52);
  v70[0] = v19;
  v20 = (_QWORD *)v18[5];
  if ((unint64_t)v20 >= v18[6])
  {
    v21 = sub_20F018E30(v18 + 4, (uint64_t *)v70);
    v22 = v70[0];
    v18[5] = v21;
    if (v22)
      sub_20F018FC0((uint64_t)v22);
  }
  else
  {
    *v20 = v19;
    v18[5] = v20 + 1;
  }
  if (SBYTE7(v57) < 0)
    operator delete(__p);
  sub_20F00C44C((_QWORD *)(*(_QWORD *)v11 + 8), (int **)(a1 + 960), v70);
  v23 = (uint64_t *)operator new();
  sub_20F007054(v23, (uint64_t *)v70);
  v24 = (void ***)(*(_QWORD *)v11 + 144);
  *(_QWORD *)&v52 = 0;
  sub_20ED29074(v24, (void **)v23);
  sub_20ED29074((void ***)&v52, 0);
  v25 = operator new();
  v26 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)v25 = v26;
  *(int64x2_t *)(v25 + 16) = v26;
  *(int64x2_t *)(v25 + 32) = v26;
  *(_OWORD *)(v25 + 48) = xmmword_2102DB700;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v25 + 64) = _Q0;
  *(_QWORD *)(v25 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(v25 + 88) = 0;
  *(_QWORD *)(v25 + 96) = 0;
  *(_QWORD *)(v25 + 104) = 0;
  *(_OWORD *)(v25 + 112) = _Q0;
  *(_QWORD *)(v25 + 128) = 0x3FF0000000000000;
  *(_OWORD *)(v25 + 152) = 0u;
  *(_OWORD *)(v25 + 184) = 0u;
  *(_OWORD *)(v25 + 136) = 0u;
  *(_OWORD *)(v25 + 168) = 0u;
  *(_OWORD *)(v25 + 200) = 0u;
  *(_QWORD *)(v25 + 216) = 0;
  *(_QWORD *)(v25 + 160) = 0x3FF0000000000000;
  *(_QWORD *)(v25 + 192) = 0x3FF0000000000000;
  *(_OWORD *)(v25 + 256) = 0u;
  *(_OWORD *)(v25 + 272) = 0u;
  *(_OWORD *)(v25 + 224) = _Q0;
  *(_OWORD *)(v25 + 240) = 0u;
  v51 = _Q0;
  *(_QWORD *)(v25 + 264) = 0x3FF0000000000000;
  *(_QWORD *)(v25 + 288) = 0;
  *(_QWORD *)(v25 + 296) = 0x3FF0000000000000;
  v32 = *(_QWORD *)(*(_QWORD *)v11 + 152);
  *(_QWORD *)(*(_QWORD *)v11 + 152) = v25;
  if (v32)
    MEMORY[0x212BC6398](v32, 0x1000C40FDACBBE0);
  v33 = *(_QWORD *)(*(_QWORD *)v11 + 152);
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v35 = *(_QWORD *)(a3 + 80);
  v57 = v51;
  v58 = 0x3FF0000000000000;
  v59 = 0uLL;
  v60 = 0;
  v61 = v51;
  v64 = 0;
  *((_QWORD *)&v65[1] + 1) = 0;
  v63 = 0u;
  *(_OWORD *)((char *)v65 + 8) = 0u;
  memset(&v66[8], 0, 24);
  v62 = 0x3FF0000000000000;
  *(_QWORD *)&v65[0] = 0x3FF0000000000000;
  *(_QWORD *)v66 = 0x3FF0000000000000;
  memset(&v68[8], 0, 24);
  *(_OWORD *)v67 = v51;
  memset(&v67[16], 0, 24);
  v69 = 0x3FF0000000000000;
  *(_QWORD *)v68 = 0x3FF0000000000000;
  v36 = *(_OWORD *)(a3 + 40);
  v52 = *(_OWORD *)(a3 + 24);
  v53 = v36;
  __p = *(void **)(a3 + 72);
  v54 = *(_OWORD *)(a3 + 56);
  v56 = v35;
  sub_20EB842DC((uint64_t)&v52, (float64x2_t *)(a3 + 552));
  v61 = *(_OWORD *)(a3 + 624);
  v62 = *(_QWORD *)(a3 + 640);
  v58 = *(_QWORD *)(a3 + 664);
  v57 = *(_OWORD *)(a3 + 648);
  v63 = *(_OWORD *)(a3 + 672);
  v64 = *(_QWORD *)(a3 + 688);
  v60 = *(_QWORD *)(a3 + 712);
  v59 = *(_OWORD *)(a3 + 696);
  v37 = sub_210219C18();
  v71 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000.0;
  sub_20E9BA7EC((uint64_t)v72, (uint64_t)v37, 0xEEEEB0B5B2B2EEEELL, (uint64_t *)&v71);
  v38 = v53;
  *(_OWORD *)v33 = v52;
  *(_OWORD *)(v33 + 16) = v38;
  v39 = v54;
  *(_QWORD *)(v33 + 48) = __p;
  *(_OWORD *)(v33 + 32) = v39;
  *(_QWORD *)(v33 + 56) = v56;
  v40 = v57;
  *(_QWORD *)(v33 + 80) = v58;
  *(_OWORD *)(v33 + 64) = v40;
  v41 = v59;
  *(_QWORD *)(v33 + 104) = v60;
  *(_OWORD *)(v33 + 88) = v41;
  v42 = v61;
  *(_QWORD *)(v33 + 128) = v62;
  *(_OWORD *)(v33 + 112) = v42;
  v43 = v63;
  *(_QWORD *)(v33 + 152) = v64;
  *(_OWORD *)(v33 + 136) = v43;
  *(_OWORD *)(v33 + 160) = v65[0];
  v44 = v65[1];
  v45 = *(_OWORD *)v66;
  v46 = *(_OWORD *)&v66[16];
  *(_QWORD *)(v33 + 224) = *(_QWORD *)v67;
  *(_OWORD *)(v33 + 192) = v45;
  *(_OWORD *)(v33 + 208) = v46;
  *(_OWORD *)(v33 + 176) = v44;
  *(_OWORD *)(v33 + 232) = *(_OWORD *)&v67[8];
  v47 = *(_OWORD *)&v67[24];
  v48 = *(_OWORD *)v68;
  v49 = *(_OWORD *)&v68[16];
  *(_QWORD *)(v33 + 296) = v69;
  *(_OWORD *)(v33 + 264) = v48;
  *(_OWORD *)(v33 + 280) = v49;
  *(_OWORD *)(v33 + 248) = v47;
  *(_DWORD *)(*(_QWORD *)(a1 + 5528) + 432) = a2[189];
  sub_20F01F8D8((_QWORD *)a1);
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
  return a1;
}

void sub_20F00EDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v30;

  v30 = *(_QWORD *)(v28 - 152);
  if (v30)
    sub_20F018FC0(v30);
  if (a26 < 0)
    operator delete(__p);
  sub_20F00F2AC(v27);
  sub_20F01F6CC(v26);
  _Unwind_Resume(a1);
}

void sub_20F00EFF4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  char *v32;
  std::__shared_weak_count *v33;
  char *v34;
  std::__shared_weak_count *v35;
  void *__p;
  char *v37;

  v2 = *(_QWORD *)(a1 + 5528);
  v3 = *(_QWORD **)(v2 + 8);
  v4 = *(_QWORD **)(v2 + 16);
  while (v4 != v3)
  {
    v6 = *--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
    {
      v7 = sub_20ED293AC(v5);
      MEMORY[0x212BC6398](v7, 0x10B2C4036EE574ELL);
    }
  }
  *(_QWORD *)(v2 + 16) = v3;
  sub_20F151C70(a1 + 960, (__int128 *)(a1 + 8), (char **)&__p);
  v32 = 0;
  v33 = 0;
  v8 = (char *)operator new(0x28uLL);
  v9 = (std::__shared_weak_count *)v8;
  *((_QWORD *)v8 + 1) = 0;
  v10 = (unint64_t *)(v8 + 8);
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C9F77D8;
  *(_OWORD *)(v8 + 24) = xmmword_210399E20;
  v34 = v8 + 24;
  v35 = (std::__shared_weak_count *)v8;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  v32 = v8 + 24;
  v33 = (std::__shared_weak_count *)v8;
  v12 = (char *)__p;
  v13 = v37;
  if (__p == v37)
    goto LABEL_16;
  do
  {
    v14 = *(_QWORD **)(a1 + 5528);
    v15 = operator new();
    sub_20F143EB8(v15, (uint64_t)v12, &v34, &v32);
    v31 = v15;
    v16 = (uint64_t *)v14[2];
    if ((unint64_t)v16 >= v14[3])
    {
      v17 = sub_20F006E1C(v14 + 1, &v31);
    }
    else
    {
      v31 = 0;
      *v16 = v15;
      v17 = v16 + 1;
    }
    v14[2] = v17;
    v18 = v31;
    v31 = 0;
    if (v18)
    {
      v19 = sub_20ED293AC(v18);
      MEMORY[0x212BC6398](v19, 0x10B2C4036EE574ELL);
    }
    v12 += 416;
  }
  while (v12 != v13);
  v9 = v33;
  if (v33)
  {
LABEL_16:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v22 = v35;
  if (v35)
  {
    v23 = (unint64_t *)&v35->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (char *)__p;
  if (!__p)
    return;
  v26 = __p;
  if (v37 == __p)
    goto LABEL_37;
  v27 = v37 - 280;
  do
  {
    if ((v27[119] & 0x80000000) == 0)
    {
      v29 = (void *)*((_QWORD *)v27 + 4);
      if (!v29)
        goto LABEL_32;
LABEL_31:
      *((_QWORD *)v27 + 5) = v29;
      operator delete(v29);
      goto LABEL_32;
    }
    operator delete(*((void **)v27 + 12));
    v29 = (void *)*((_QWORD *)v27 + 4);
    if (v29)
      goto LABEL_31;
LABEL_32:
    v30 = *(void **)v27;
    if (*(_QWORD *)v27)
    {
      *((_QWORD *)v27 + 1) = v30;
      operator delete(v30);
    }
    v28 = v27 - 136;
    v27 -= 416;
  }
  while (v28 != v25);
  v26 = __p;
LABEL_37:
  v37 = v25;
  operator delete(v26);
}

void sub_20F00F254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  sub_20F006D78((void **)va2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F00F2AC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F019070(v2);
    MEMORY[0x212BC6398](v3, 0x10A0C405AD86304);
  }
  return a1;
}

uint64_t sub_20F00F2F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 5528);
  *(_QWORD *)(a1 + 5528) = 0;
  if (v2)
  {
    v3 = sub_20F019070(v2);
    MEMORY[0x212BC6398](v3, 0x10A0C405AD86304);
  }
  return sub_20F01F6CC(a1);
}

void sub_20F00F334(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 5528);
  *(_QWORD *)(a1 + 5528) = 0;
  if (v2)
  {
    v3 = sub_20F019070(v2);
    MEMORY[0x212BC6398](v3, 0x10A0C405AD86304);
  }
  sub_20F01F6CC(a1);
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F00F38C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD *v7;
  _QWORD *v8;
  __n128 result;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v7 = *(_QWORD **)(a1 + 5528);
  *(double *)(*v7 + 1280) = a4;
  if (*(_BYTE *)(v7[36] + 671))
  {
    v8 = v7 + 55;
    if (!v7[55]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FeatureProcessingInterface.cpp", 252, (uint64_t)"visual_slam_camera_allocator_", 29, (uint64_t)"Visual SLAM camera allocator does not exist", 43, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_24;
    }
  }
  else
  {
    v8 = v7 + 56;
    if (!v7[56]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FeatureProcessingInterface.cpp", 256, (uint64_t)"regular_slam_camera_allocator_", 30, (uint64_t)"Regular SLAM camera allocator does not exist", 44, (void (*)(void **))sub_21023DDB0))
    {
LABEL_24:
      abort();
    }
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 16))(*v8, *(_QWORD *)(*(_QWORD *)(a1 + 5528) + 144) + 24);
  v10 = *(_QWORD **)(a1 + 5528);
  v11 = (_QWORD *)v10[1];
  v12 = (_QWORD *)v10[2];
  if (v11 != v12)
  {
    v13 = *(unsigned __int8 *)(a3 + 741);
    do
    {
      v14 = (_QWORD *)*v11;
      if (*v11)
      {
        result.n128_u64[0] = v14[v13 + 9];
        v14[80] = result.n128_u64[0];
        *(_QWORD *)(v14[68] + 104) = result.n128_u64[0];
        *(_QWORD *)(v14[77] + 104) = result.n128_u64[0];
      }
      ++v11;
    }
    while (v11 != v12);
  }
  if (*(_BYTE *)(a1 + 734))
    v15 = *(_BYTE *)(a2 + 88) == 0;
  else
    v15 = 1;
  if (!v15 && *(_BYTE *)(a2 + 89) != 0)
  {
    v17 = v10[19];
    if (!*(_BYTE *)(a1 + 5520))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/FeatureProcessingInterfaceBase.h", 247, (uint64_t)"opt_sensor_model_", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_24;
      }
      if (!*(_BYTE *)(a1 + 5520))
        sub_20E866B34();
    }
    v18 = *(_OWORD *)(a1 + 5232);
    *(_OWORD *)v17 = *(_OWORD *)(a1 + 5216);
    *(_OWORD *)(v17 + 16) = v18;
    v19 = *(_OWORD *)(a1 + 5248);
    *(_QWORD *)(v17 + 48) = *(_QWORD *)(a1 + 5264);
    *(_OWORD *)(v17 + 32) = v19;
    *(_QWORD *)(v17 + 56) = *(_QWORD *)(a1 + 5272);
    v20 = *(_OWORD *)(a1 + 5280);
    *(_QWORD *)(v17 + 80) = *(_QWORD *)(a1 + 5296);
    *(_OWORD *)(v17 + 64) = v20;
    v21 = *(_OWORD *)(a1 + 5304);
    *(_QWORD *)(v17 + 104) = *(_QWORD *)(a1 + 5320);
    *(_OWORD *)(v17 + 88) = v21;
    v22 = *(_OWORD *)(a1 + 5328);
    *(_QWORD *)(v17 + 128) = *(_QWORD *)(a1 + 5344);
    *(_OWORD *)(v17 + 112) = v22;
    v23 = *(_OWORD *)(a1 + 5352);
    *(_QWORD *)(v17 + 152) = *(_QWORD *)(a1 + 5368);
    *(_OWORD *)(v17 + 136) = v23;
    v24 = *(_OWORD *)(a1 + 5408);
    v25 = *(_OWORD *)(a1 + 5424);
    v26 = *(_OWORD *)(a1 + 5392);
    *(_QWORD *)(v17 + 224) = *(_QWORD *)(a1 + 5440);
    *(_OWORD *)(v17 + 192) = v24;
    *(_OWORD *)(v17 + 208) = v25;
    *(_OWORD *)(v17 + 176) = v26;
    *(_OWORD *)(v17 + 160) = *(_OWORD *)(a1 + 5376);
    v27 = *(_OWORD *)(a1 + 5480);
    v28 = *(_OWORD *)(a1 + 5496);
    v29 = *(_QWORD *)(a1 + 5512);
    *(_OWORD *)(v17 + 248) = *(_OWORD *)(a1 + 5464);
    *(_QWORD *)(v17 + 296) = v29;
    *(_OWORD *)(v17 + 264) = v27;
    *(_OWORD *)(v17 + 280) = v28;
    *(_OWORD *)(v17 + 232) = *(_OWORD *)(a1 + 5448);
    result = *(__n128 *)(a3 + 88);
    v30 = *(_QWORD *)(a1 + 5528);
    *(_QWORD *)(v30 + 280) = *(_QWORD *)(a3 + 104);
    *(__n128 *)(v30 + 264) = result;
  }
  return result;
}

void sub_20F00F63C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::logic_error *exception;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  _BYTE v43[71];
  __int128 v44;

  v2 = *(_QWORD *)(a1 + 960);
  v3 = *(_QWORD *)(a1 + 968);
  if (v2 != v3)
  {
    while (*(_DWORD *)v2)
    {
      v2 += 1088;
      if (v2 == v3)
        goto LABEL_4;
    }
  }
  if (v2 == v3)
  {
LABEL_4:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E92751C(exception, "Requested camera id not found.");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v5 = operator new();
  v6 = *(_QWORD *)(v2 + 392);
  v7 = *(unsigned __int8 *)(a1 + 508);
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)v5 = _Q1;
  *(_OWORD *)(v5 + 16) = _Q1;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = _Q1;
  *(_QWORD *)(v5 + 64) = v5 + 64;
  *(_QWORD *)(v5 + 72) = v5 + 64;
  *(_QWORD *)(v5 + 80) = 0;
  *(_BYTE *)(v5 + 88) = 0;
  *(_BYTE *)(v5 + 120) = 0;
  *(_BYTE *)(v5 + 128) = 0;
  *(_BYTE *)(v5 + 160) = 0;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_QWORD *)(v5 + 408) = 0xBFF0000000000000;
  *(_WORD *)(v5 + 416) = 0;
  *(_QWORD *)(v5 + 424) = 0x4059000000000000;
  *(_OWORD *)(v5 + 432) = xmmword_210314990;
  *(_OWORD *)(v5 + 448) = xmmword_2102DD520;
  *(_BYTE *)(v5 + 464) = 0;
  *(_BYTE *)(v5 + 824) = 0;
  *(_BYTE *)(v5 + 832) = 0;
  *(_BYTE *)(v5 + 1192) = 0;
  *(_BYTE *)(v5 + 1200) = 0;
  *(_QWORD *)(v5 + 1224) = 0;
  *(_DWORD *)(v5 + 1232) = 0;
  *(_OWORD *)(v5 + 1208) = 0u;
  *(_QWORD *)(v5 + 1240) = 1;
  *(_OWORD *)(v5 + 1248) = xmmword_2103149A0;
  *(_QWORD *)(v5 + 1264) = 0x3F847AE147AE147BLL;
  *(_BYTE *)(v5 + 1272) = 1;
  *(_QWORD *)(v5 + 1280) = 0;
  *(_QWORD *)(v5 + 1288) = 20;
  *(_QWORD *)(v5 + 1296) = 0x4008000000000000;
  *(_QWORD *)(v5 + 1416) = 0;
  *(_OWORD *)(v5 + 1384) = 0u;
  *(_OWORD *)(v5 + 1400) = 0u;
  *(_OWORD *)(v5 + 1352) = 0u;
  *(_OWORD *)(v5 + 1368) = 0u;
  *(_OWORD *)(v5 + 1320) = 0u;
  *(_OWORD *)(v5 + 1336) = 0u;
  *(_OWORD *)(v5 + 1304) = 0u;
  sub_20EAE8D8C((char **)(v5 + 168), 0x3E9uLL);
  sub_20EAE8F2C((char **)(v5 + 216), 0x3E9uLL);
  *(_QWORD *)(v5 + 1280) = v6;
  sub_20F3F9E98(v7, 1, 1, v5 + 416);
  v13 = *(uint64_t **)(a1 + 5528);
  v14 = *v13;
  *v13 = v5;
  if (v14)
  {
    v15 = sub_20F018B88(v14);
    MEMORY[0x212BC6398](v15, 0x10B2C40B42A76A6);
  }
  v16 = *(unsigned __int8 *)(a1 + 400);
  *(_OWORD *)&v43[32] = *(_OWORD *)(a1 + 433);
  *(_OWORD *)&v43[48] = *(_OWORD *)(a1 + 449);
  *(_QWORD *)&v43[63] = *(_QWORD *)(a1 + 464);
  *(_OWORD *)v43 = *(_OWORD *)(a1 + 401);
  *(_OWORD *)&v43[16] = *(_OWORD *)(a1 + 417);
  v44 = *(_OWORD *)(a1 + 449);
  HIBYTE(v44) = v43[63];
  v17 = operator new();
  *(_OWORD *)(v17 + 32) = *(_OWORD *)&v43[39];
  *(_OWORD *)(v17 + 48) = *(_OWORD *)&v43[55];
  *(_OWORD *)v17 = *(_OWORD *)&v43[7];
  *(_OWORD *)(v17 + 16) = *(_OWORD *)&v43[23];
  *(_WORD *)(v17 + 64) = 0;
  *(_QWORD *)(v17 + 72) = 0;
  *(_BYTE *)(v17 + 80) = 0;
  *(_BYTE *)(v17 + 88) = 0;
  v18 = *(_QWORD *)(a1 + 5528);
  *(_OWORD *)(v18 + 57) = *(_OWORD *)v43;
  v19 = *(_QWORD *)(v18 + 128);
  *(_QWORD *)(v18 + 120) = *(_QWORD *)&v43[63];
  *(_QWORD *)(v18 + 128) = v17;
  *(_OWORD *)(v18 + 105) = v44;
  *(_OWORD *)(v18 + 89) = *(_OWORD *)&v43[32];
  *(_BYTE *)(v18 + 56) = v16;
  *(_OWORD *)(v18 + 73) = *(_OWORD *)&v43[16];
  if (v19)
    MEMORY[0x212BC6398](v19, 0x1000C4086F741D2);
  *(_BYTE *)(v18 + 136) = v16 == 2;
  v20 = *(_QWORD *)(a1 + 5528);
  v22 = *(char **)(v20 + 8);
  v21 = *(char **)(v20 + 16);
  if (v22 != v21)
  {
    v23 = *(_BYTE *)(v20 + 136);
    if (v23)
    {
      v24 = v21 - v22 - 8;
      if (v24 < 8)
        goto LABEL_30;
      v25 = (v24 >> 3) + 1;
      v26 = (uint64_t *)(v22 + 8);
      v27 = v25 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v28 = *v26;
        *(_BYTE *)(*(v26 - 1) + 448) = v23;
        *(_BYTE *)(v28 + 448) = v23;
        v26 += 2;
        v27 -= 2;
      }
      while (v27);
      v22 += 8 * (v25 & 0x3FFFFFFFFFFFFFFELL);
      if (v25 != (v25 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_30:
        do
        {
          v29 = *(_QWORD *)v22;
          v22 += 8;
          *(_BYTE *)(v29 + 448) = v23;
        }
        while (v22 != v21);
      }
    }
    else
    {
      do
      {
        v30 = *(_QWORD *)v22;
        v22 += 8;
        *(_BYTE *)(v30 + 448) = 0;
        (*(void (**)(_QWORD))(**(_QWORD **)(v30 + 616) + 48))(*(_QWORD *)(v30 + 616));
      }
      while (v22 != v21);
      v20 = *(_QWORD *)(a1 + 5528);
    }
  }
  *(_BYTE *)(v20 + 336) = 0;
  *(_BYTE *)(v20 + 344) = 0;
  v31 = (_OWORD *)operator new();
  *v31 = 0u;
  v31[1] = 0u;
  *(_QWORD *)v31 = 0xBFF0000000000000;
  *((_QWORD *)v31 + 2) = 0xBFF0000000000000;
  v32 = *(_QWORD *)(a1 + 5528);
  v33 = *(_QWORD *)(v32 + 256);
  *(_QWORD *)(v32 + 256) = v31;
  if (v33)
    MEMORY[0x212BC6398](v33, 0x1000C40244176AFLL);
  v34 = *(_QWORD *)(a1 + 5528);
  v35 = *(unsigned __int8 *)(a1 + 671);
  v36 = operator new();
  v37 = *(_OWORD *)(a1 + 648);
  *(_OWORD *)(v36 + 72) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(v36 + 88) = v37;
  v38 = *(_OWORD *)(a1 + 680);
  *(_OWORD *)(v36 + 104) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(v36 + 120) = v38;
  v39 = *(_OWORD *)(a1 + 584);
  *(_OWORD *)(v36 + 8) = *(_OWORD *)(a1 + 568);
  *(_OWORD *)(v36 + 24) = v39;
  v40 = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(v36 + 40) = *(_OWORD *)(a1 + 600);
  *(_OWORD *)(v36 + 56) = v40;
  *(_WORD *)(v36 + 336) = 0;
  *(_DWORD *)(v36 + 144) = -1;
  *(_QWORD *)(v36 + 152) = 0;
  *(_BYTE *)(v36 + 160) = 0;
  *(_DWORD *)(v36 + 168) = -1;
  *(_QWORD *)(v36 + 176) = 0;
  *(_BYTE *)(v36 + 184) = 0;
  *(_DWORD *)(v36 + 192) = -1;
  *(_QWORD *)(v36 + 200) = 0;
  *(_BYTE *)(v36 + 208) = 0;
  *(_DWORD *)(v36 + 216) = -1;
  *(_QWORD *)(v36 + 224) = 0;
  *(_BYTE *)(v36 + 232) = 0;
  *(_DWORD *)(v36 + 240) = -1;
  *(_QWORD *)(v36 + 248) = 0;
  *(_BYTE *)(v36 + 256) = 0;
  *(_DWORD *)(v36 + 264) = -1;
  *(_QWORD *)(v36 + 272) = 0;
  *(_BYTE *)(v36 + 280) = 0;
  *(_DWORD *)(v36 + 288) = -1;
  *(_QWORD *)(v36 + 296) = 0;
  *(_BYTE *)(v36 + 304) = 0;
  *(_DWORD *)(v36 + 312) = -1;
  *(_QWORD *)(v36 + 320) = 0;
  *(_BYTE *)(v36 + 328) = 0;
  v41 = *(_DWORD *)(v36 + 100);
  *(_DWORD *)(v36 + 136) = 0;
  *(_DWORD *)(v36 + 140) = v41;
  if (!v35)
  {
    *(_QWORD *)v36 = &off_24C9F6858;
    v42 = *(_QWORD *)(v34 + 448);
    *(_QWORD *)(v34 + 448) = v36;
    if (!v42)
      goto LABEL_25;
    goto LABEL_24;
  }
  *(_QWORD *)v36 = &off_24C9F9818;
  v42 = *(_QWORD *)(v34 + 440);
  *(_QWORD *)(v34 + 440) = v36;
  if (v42)
LABEL_24:
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
LABEL_25:
  sub_20F00EFF4(a1);
}

void sub_20F00FB68(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F00FC8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F00FCA0(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 5528) + 352);
}

uint64_t sub_20F00FCAC(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 5528) + 136);
}

uint64_t sub_20F00FCB8(uint64_t result, unint64_t a2, unint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(result + 5528);
  if (*(_BYTE *)(v4 + 56) != 1)
  {
    v6 = *(unsigned __int8 *)(v4 + 136);
    v8 = *(char **)(v4 + 8);
    v7 = *(char **)(v4 + 16);
    if (v8 == v7)
      return result;
    goto LABEL_30;
  }
  v5 = *(_QWORD *)(v4 + 128);
  if (*(double *)v5 <= a4)
  {
    v9 = *(_QWORD *)(v5 + 8);
    v10 = *(_QWORD *)(v5 + 16);
    v6 = *(unsigned __int8 *)(v5 + 64);
    v12 = v10 > a3 && v9 > a2;
    if (*(_BYTE *)(v5 + 64))
      v13 = !v12;
    else
      v13 = 0;
    if (v13 || (!*(_BYTE *)(v5 + 64) ? (v14 = v10 > a3) : (v14 = 0), v14 ? (v15 = v9 > a2) : (v15 = 0), v15))
    {
      v16 = *(_QWORD *)(v5 + 72) + 1;
      *(_QWORD *)(v5 + 72) = v16;
    }
    else
    {
      v16 = 0;
      *(_QWORD *)(v5 + 72) = 0;
    }
    v17 = 24;
    if (v6)
      v17 = 32;
    if (v16 >= *(unsigned int *)(v5 + v17))
    {
      *(_QWORD *)(v5 + 72) = 0;
      v6 ^= 1u;
      *(_BYTE *)(v5 + 64) = v6;
    }
  }
  else
  {
    v6 = *(unsigned __int8 *)(v5 + 64);
  }
  *(_BYTE *)(v4 + 136) = v6;
  v8 = *(char **)(v4 + 8);
  v7 = *(char **)(v4 + 16);
  if (v8 != v7)
  {
LABEL_30:
    if (v6)
    {
      v18 = v7 - v8 - 8;
      if (v18 < 8)
        goto LABEL_40;
      v19 = (v18 >> 3) + 1;
      v20 = (uint64_t *)(v8 + 8);
      v21 = v19 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v22 = *v20;
        *(_BYTE *)(*(v20 - 1) + 448) = v6;
        *(_BYTE *)(v22 + 448) = v6;
        v20 += 2;
        v21 -= 2;
      }
      while (v21);
      v8 += 8 * (v19 & 0x3FFFFFFFFFFFFFFELL);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_40:
        do
        {
          v23 = *(_QWORD *)v8;
          v8 += 8;
          *(_BYTE *)(v23 + 448) = v6;
        }
        while (v8 != v7);
      }
    }
    else
    {
      do
      {
        v24 = *(_QWORD *)v8;
        v8 += 8;
        *(_BYTE *)(v24 + 448) = 0;
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 + 616) + 48))(*(_QWORD *)(v24 + 616));
      }
      while (v8 != v7);
    }
  }
  return result;
}

uint64_t sub_20F00FE10(uint64_t a1, double a2)
{
  double v3;
  uint64_t v4;
  int v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  const char *v14;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[3];
  int v71;
  const char *v72;
  int v73;
  const char *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE object[24];
  __int128 v81;
  void *__p[2];
  unint64_t v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 760))
  {
    v3 = *(double *)(a1 + 752);
    v4 = *(_QWORD *)(a1 + 5528);
    if (v3 > 0.0 && v3 > a2 && v3 + -10.0 < a2 && *(_BYTE *)(v4 + 344) == 0)
      return 1;
    if (!*(_BYTE *)(v4 + 344))
    {
      *(double *)(v4 + 336) = a2;
      *(_BYTE *)(v4 + 344) = 1;
      sub_20F0106A4(&v77);
      if (**(int **)(v77 + 56) <= 3)
      {
        v8 = *(unsigned __int8 *)(v77 + 72);
        v9 = sub_20E8C31DC(v77, "OSLogSurrogateAppender", 1, 0);
        if (v8 || v9 != 0)
        {
          v11 = v9;
          v70[0] = &v77;
          v70[1] = std::chrono::steady_clock::now().__d_.__rep_;
          v70[2] = std::chrono::system_clock::now().__d_.__rep_;
          v71 = 3;
          v72 = "unknown file";
          v73 = 529;
          v75 = 0;
          v76 = 0;
          v74 = "unknown function";
          v12 = v77;
          if (*(char *)(v77 + 39) < 0)
          {
            v14 = *(const char **)(v77 + 16);
            v13 = *(_QWORD *)(v77 + 24);
          }
          else
          {
            v13 = *(unsigned __int8 *)(v77 + 39);
            v14 = (const char *)(*(_QWORD *)v70[0] + 16);
          }
          v68 = *(_QWORD *)v70[0] + 16;
          v69 = *(_QWORD *)(a1 + 5528);
          v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
            if ((_BYTE)v81 && (object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v17 = byte_254A4A4F8;
          else
            v17 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v18 = byte_254A4A4F8[23];
          else
            v18 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)object = os_log_create(v17, v14);
          v19 = &object[8];
          if (v18 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v18 >= 0x17)
          {
            v20 = v11;
            v21 = v14;
            v22 = v12;
            v23 = v8;
            v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v18 | 7) != 0x17)
              v24 = v18 | 7;
            v25 = v24 + 1;
            v19 = operator new(v24 + 1);
            *(_QWORD *)&object[16] = v18;
            *(_QWORD *)&v81 = v25 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v19;
            v8 = v23;
            v12 = v22;
            v14 = v21;
            v11 = v20;
          }
          else
          {
            BYTE7(v81) = v18;
            if (!v18)
            {
LABEL_37:
              v19[v18] = 0;
              BYTE8(v81) = 1;
              v26 = __p;
              if (v13 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v13 >= 0x17)
              {
                v27 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v13 | 7) != 0x17)
                  v27 = v13 | 7;
                v28 = v27 + 1;
                v26 = operator new(v27 + 1);
                __p[1] = (void *)v13;
                v83 = v28 | 0x8000000000000000;
                __p[0] = v26;
              }
              else
              {
                HIBYTE(v83) = v13;
                if (!v13)
                  goto LABEL_45;
              }
              memmove(v26, v14, v13);
LABEL_45:
              *((_BYTE *)v26 + v13) = 0;
              v84 = 1;
              v29 = *(NSObject **)object;
              if (SHIBYTE(v83) < 0)
                operator delete(__p[0]);
              if (BYTE8(v81) && SBYTE7(v81) < 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v11 && *(_QWORD *)(v11 + 24))
              {
                v30 = _os_log_pack_size();
                v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
                v32 = (std::__shared_weak_count *)operator new();
                v33 = v32;
                v32->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v32->__shared_owners_;
                v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v32->__shared_weak_owners_ = 0;
                v32[1].__vftable = v31;
                *(_QWORD *)object = v31;
                *(_QWORD *)&object[8] = v31;
                *(_QWORD *)&object[16] = v32;
                do
                  v35 = __ldxr(p_shared_owners);
                while (__stxr(v35 + 1, p_shared_owners));
                v81 = 0uLL;
                __p[0] = 0;
                do
                  v36 = __ldaxr(p_shared_owners);
                while (__stlxr(v36 - 1, p_shared_owners));
                if (!v36)
                {
                  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                  std::__shared_weak_count::__release_weak(v33);
                }
                v37 = *(_QWORD *)object;
                v38 = _os_log_pack_fill();
                v39 = *(_QWORD *)(v69 + 336);
                *(_DWORD *)v38 = 134217984;
                *(_QWORD *)(v38 + 4) = v39;
                v40 = operator new();
                v41 = *(unsigned __int8 *)(v12 + 39);
                v42 = v68;
                if ((v41 & 0x80u) != 0)
                {
                  v42 = *(_QWORD *)(v12 + 16);
                  v41 = *(_QWORD *)(v12 + 24);
                }
                *(_QWORD *)v40 = v37;
                *(_OWORD *)(v40 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v40 + 24) = v81;
                v81 = 0uLL;
                *(_QWORD *)(v40 + 40) = v42;
                *(_QWORD *)(v40 + 48) = v41;
                *(_BYTE *)(v40 + 56) = 1;
                v78 = 0;
                v79 = v40;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), &v79);
                v43 = v79;
                v79 = 0;
                if (v43)
                {
                  v44 = *(std::__shared_weak_count **)(v43 + 32);
                  if (v44)
                  {
                    v45 = (unint64_t *)&v44->__shared_owners_;
                    do
                      v46 = __ldaxr(v45);
                    while (__stlxr(v46 - 1, v45));
                    if (!v46)
                    {
                      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                      std::__shared_weak_count::__release_weak(v44);
                    }
                  }
                  v47 = *(std::__shared_weak_count **)(v43 + 16);
                  if (v47)
                  {
                    v48 = (unint64_t *)&v47->__shared_owners_;
                    do
                      v49 = __ldaxr(v48);
                    while (__stlxr(v49 - 1, v48));
                    if (!v49)
                    {
                      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                      std::__shared_weak_count::__release_weak(v47);
                    }
                  }
                  MEMORY[0x212BC6398](v43, 0x10F0C40B62ED6C6);
                  v50 = v78;
                  v78 = 0;
                  if (v50)
                  {
                    v51 = *(std::__shared_weak_count **)(v50 + 32);
                    if (v51)
                    {
                      v52 = (unint64_t *)&v51->__shared_owners_;
                      do
                        v53 = __ldaxr(v52);
                      while (__stlxr(v53 - 1, v52));
                      if (!v53)
                      {
                        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                        std::__shared_weak_count::__release_weak(v51);
                      }
                    }
                    v54 = *(std::__shared_weak_count **)(v50 + 16);
                    if (v54)
                    {
                      v55 = (unint64_t *)&v54->__shared_owners_;
                      do
                        v56 = __ldaxr(v55);
                      while (__stlxr(v56 - 1, v55));
                      if (!v56)
                      {
                        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                        std::__shared_weak_count::__release_weak(v54);
                      }
                    }
                    MEMORY[0x212BC6398](v50, 0x10F0C40B62ED6C6);
                  }
                }
                v57 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
                if (*((_QWORD *)&v81 + 1))
                {
                  v58 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
                  do
                    v59 = __ldaxr(v58);
                  while (__stlxr(v59 - 1, v58));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                    std::__shared_weak_count::__release_weak(v57);
                  }
                }
                v60 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v61 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v62 = __ldaxr(v61);
                  while (__stlxr(v62 - 1, v61));
                  if (!v62)
                  {
                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                    std::__shared_weak_count::__release_weak(v60);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
                v63 = *(_QWORD *)(v69 + 336);
                *(_DWORD *)object = 134217984;
                *(_QWORD *)&object[4] = v63;
                v64 = (void *)_os_log_send_and_compose_impl();
                if (v64)
                  free(v64);
              }
              if (v8)
              {
                sub_20E8C003C((uint64_t)v70, "First sensor timestamp: %.20f.", *(double *)(*(_QWORD *)(a1 + 5528) + 336));
                sub_20E863570((uint64_t)v70);
              }
              sub_20E863570((uint64_t)v70);
              v65 = v76;
              if (v76)
              {
                v66 = (unint64_t *)&v76->__shared_owners_;
                do
                  v67 = __ldaxr(v66);
                while (__stlxr(v67 - 1, v66));
                if (!v67)
                {
                  ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                  std::__shared_weak_count::__release_weak(v65);
                }
              }
              return 0;
            }
          }
          memmove(v19, v17, v18);
          goto LABEL_37;
        }
      }
    }
  }
  return 0;
}

void sub_20F010578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31)
  {
    if (a30 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F0105B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v19 = va_arg(va3, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0105EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v5, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F010618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01062C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F0106A4(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A61938);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A61938))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A61930);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A61938);
  }
  *a1 = qword_254A61930;
}

void sub_20F010740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A61938);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A61938);
  _Unwind_Resume(a1);
}

uint64_t sub_20F010798(uint64_t a1, double *a2)
{
  uint64_t result;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  const char *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  const char *v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  _BYTE *v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *p_p;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  size_t v45;
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unsigned __int8 v69;
  const char *v70;
  size_t v71;
  _BYTE *v72;
  unint64_t v73;
  const char *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  size_t v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  unint64_t *v104;
  unsigned __int8 v105;
  const char *v106;
  size_t v107;
  _BYTE *v108;
  unint64_t v109;
  const char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  size_t v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v153;
  int v154;
  const char *v155;
  int v156;
  const char *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t v160[5];
  _BYTE object[24];
  unint64_t v162;
  char v163;
  void *__p;
  size_t v165;
  unint64_t v166;
  char v167;
  uint64_t v168;

  v168 = *MEMORY[0x24BDAC8D0];
  result = sub_20F00FE10(a1, *a2);
  if ((result & 1) != 0)
    return result;
  v5 = **(_QWORD **)(a1 + 5528);
  v7 = *a2;
  v6 = a2 + 1;
  v8 = v7;
  if (!*(_BYTE *)(v5 + 416))
  {
    kdebug_trace();
    if (v8 < 0.0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.hpp", 195, (uint64_t)"timestamp >= 0", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_232;
    }
    v10 = *(double *)(v5 + 48);
    if (v10 >= 0.0 && v10 >= v8)
    {
      sub_20F0192DC(v160);
      if (**(int **)(v160[0] + 56) <= 5)
      {
        v19 = *(unsigned __int8 *)(v160[0] + 72);
        v20 = sub_20E8C31DC(v160[0], "OSLogSurrogateAppender", 1, 0);
        v21 = v20;
        if (v19 || v20)
        {
          v151 = v160;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v153 = std::chrono::system_clock::now().__d_.__rep_;
          v154 = 5;
          v155 = "unknown file";
          v156 = 200;
          v158 = 0;
          v159 = 0;
          v157 = "unknown function";
          v22 = v160[0];
          v23 = (const char *)(v160[0] + 16);
          v149 = v160[0] + 16;
          if (*(char *)(v160[0] + 39) < 0)
          {
            v23 = *(const char **)(v160[0] + 16);
            v24 = *(_QWORD *)(v160[0] + 24);
          }
          else
          {
            v24 = *(unsigned __int8 *)(v160[0] + 39);
          }
          v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            if ((_BYTE)v162)
            {
              *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
              *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
            }
            else
            {
              byte_254A4A4F8[23] = 14;
              strcpy(byte_254A4A4F8, "com.apple.cv3d");
            }
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v32 = byte_254A4A4F8;
          else
            v32 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v33 = byte_254A4A4F8[23];
          else
            v33 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)object = os_log_create(v32, v23);
          v34 = &object[8];
          if (v33 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v33 >= 0x17)
          {
            v35 = v21;
            v36 = v23;
            v37 = v22;
            v38 = v19;
            v39 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v33 | 7) != 0x17)
              v39 = v33 | 7;
            v40 = v39 + 1;
            v34 = operator new(v39 + 1);
            *(_QWORD *)&object[16] = v33;
            v162 = v40 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v34;
            v19 = v38;
            v22 = v37;
            v23 = v36;
            v21 = v35;
          }
          else
          {
            HIBYTE(v162) = v33;
            if (!v33)
            {
LABEL_53:
              v34[v33] = 0;
              v163 = 1;
              p_p = &__p;
              if (v24 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v24 >= 0x17)
              {
                v42 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v24 | 7) != 0x17)
                  v42 = v24 | 7;
                v43 = v42 + 1;
                p_p = operator new(v42 + 1);
                v165 = v24;
                v166 = v43 | 0x8000000000000000;
                __p = p_p;
              }
              else
              {
                HIBYTE(v166) = v24;
                if (!v24)
                  goto LABEL_61;
              }
              memmove(p_p, v23, v24);
LABEL_61:
              *((_BYTE *)p_p + v24) = 0;
              v167 = 1;
              v44 = *(NSObject **)object;
              if (SHIBYTE(v166) < 0)
                operator delete(__p);
              if (v163 && SHIBYTE(v162) < 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v21 && *(_QWORD *)(v21 + 24))
              {
                v45 = _os_log_pack_size();
                v46 = (std::__shared_weak_count_vtbl *)operator new(v45, (std::align_val_t)8uLL);
                v47 = (std::__shared_weak_count *)operator new();
                v48 = v47;
                v47->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v47->__shared_owners_;
                v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v47->__shared_weak_owners_ = 0;
                v47[1].__vftable = v46;
                do
                  v50 = __ldxr(p_shared_owners);
                while (__stxr(v50 + 1, p_shared_owners));
                do
                  v51 = __ldaxr(p_shared_owners);
                while (__stlxr(v51 - 1, p_shared_owners));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v48);
                }
                v52 = _os_log_pack_fill();
                v53 = *(_QWORD *)(v5 + 48);
                *(_DWORD *)v52 = 134218240;
                *(_QWORD *)(v52 + 4) = v53;
                *(_WORD *)(v52 + 12) = 2048;
                *(double *)(v52 + 14) = v8;
                v54 = operator new();
                v55 = *(unsigned __int8 *)(v22 + 39);
                v56 = v149;
                if ((v55 & 0x80u) != 0)
                {
                  v56 = *(_QWORD *)(v22 + 16);
                  v55 = *(_QWORD *)(v22 + 24);
                }
                *(_QWORD *)v54 = v46;
                *(_QWORD *)(v54 + 8) = v46;
                *(_QWORD *)(v54 + 16) = v48;
                *(_QWORD *)(v54 + 24) = 0;
                *(_QWORD *)(v54 + 32) = 0;
                *(_QWORD *)(v54 + 40) = v56;
                *(_QWORD *)(v54 + 48) = v55;
                *(_BYTE *)(v54 + 56) = 16;
                *(_QWORD *)object = v54;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v21 + 24) + 40))(*(_QWORD *)(v21 + 24), object);
                v57 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                if (v57)
                {
                  v58 = *(std::__shared_weak_count **)(v57 + 32);
                  if (v58)
                  {
                    v59 = (unint64_t *)&v58->__shared_owners_;
                    do
                      v60 = __ldaxr(v59);
                    while (__stlxr(v60 - 1, v59));
                    if (!v60)
                    {
                      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                      std::__shared_weak_count::__release_weak(v58);
                    }
                  }
                  v61 = *(std::__shared_weak_count **)(v57 + 16);
                  if (v61)
                  {
                    v62 = (unint64_t *)&v61->__shared_owners_;
                    do
                      v63 = __ldaxr(v62);
                    while (__stlxr(v63 - 1, v62));
                    if (!v63)
                    {
                      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                      std::__shared_weak_count::__release_weak(v61);
                    }
                  }
                  MEMORY[0x212BC6398](v57, 0x10F0C40B62ED6C6);
                }
              }
              else
              {
                os_log_type_enabled(v44, OS_LOG_TYPE_ERROR);
                v64 = *(_QWORD *)(v5 + 48);
                *(_DWORD *)object = 134218240;
                *(_QWORD *)&object[4] = v64;
                *(_WORD *)&object[12] = 2048;
                *(double *)&object[14] = v8;
                v65 = (void *)_os_log_send_and_compose_impl();
                if (v65)
                  free(v65);
              }
              if (v19)
              {
                sub_20E8C003C((uint64_t)&v151, "Non-monotonic gyro timestamps: prev=%lf, cur=%lf. Dropping this sample.", *(double *)(v5 + 48), v8);
                sub_20E863570((uint64_t)&v151);
              }
              sub_20E863570((uint64_t)&v151);
              v66 = v159;
              if (!v159)
                return kdebug_trace();
              v67 = (unint64_t *)&v159->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              goto LABEL_156;
            }
          }
          memmove(v34, v32, v33);
          goto LABEL_53;
        }
      }
      return kdebug_trace();
    }
    if (v10 >= 0.0 && v8 - v10 > 1.0)
    {
      if (!*(_BYTE *)(v5 + 1272))
      {
        sub_20F0192DC(v160);
        if (**(int **)(v160[0] + 56) > 5)
          return kdebug_trace();
        v25 = *(unsigned __int8 *)(v160[0] + 72);
        v26 = sub_20E8C31DC(v160[0], "OSLogSurrogateAppender", 1, 0);
        v27 = v26;
        if (!v25 && !v26)
          return kdebug_trace();
        v151 = v160;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v153 = std::chrono::system_clock::now().__d_.__rep_;
        v154 = 5;
        v155 = "unknown file";
        v156 = 211;
        v158 = 0;
        v159 = 0;
        v157 = "unknown function";
        v28 = v160[0];
        if (*(char *)(v160[0] + 39) < 0)
        {
          v30 = *(const char **)(v160[0] + 16);
          v29 = *(_QWORD *)(v160[0] + 24);
        }
        else
        {
          v29 = *(unsigned __int8 *)(v160[0] + 39);
          v30 = (const char *)(*v151 + 16);
        }
        v150 = *v151 + 16;
        v69 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          if ((_BYTE)v162)
          {
            *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
            *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
          }
          else
          {
            byte_254A4A4F8[23] = 14;
            strcpy(byte_254A4A4F8, "com.apple.cv3d");
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v70 = byte_254A4A4F8;
        else
          v70 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v71 = byte_254A4A4F8[23];
        else
          v71 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v70, v30);
        v72 = &object[8];
        if (v71 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v71 >= 0x17)
        {
          v73 = v27;
          v74 = v30;
          v75 = v28;
          v76 = v25;
          v77 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v71 | 7) != 0x17)
            v77 = v71 | 7;
          v78 = v77 + 1;
          v72 = operator new(v77 + 1);
          *(_QWORD *)&object[16] = v71;
          v162 = v78 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v72;
          v25 = v76;
          v28 = v75;
          v30 = v74;
          v27 = v73;
        }
        else
        {
          HIBYTE(v162) = v71;
          if (!v71)
          {
LABEL_113:
            v72[v71] = 0;
            v163 = 1;
            v79 = &__p;
            if (v29 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v29 >= 0x17)
            {
              v80 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v29 | 7) != 0x17)
                v80 = v29 | 7;
              v81 = v80 + 1;
              v79 = operator new(v80 + 1);
              v165 = v29;
              v166 = v81 | 0x8000000000000000;
              __p = v79;
            }
            else
            {
              HIBYTE(v166) = v29;
              if (!v29)
                goto LABEL_121;
            }
            memmove(v79, v30, v29);
LABEL_121:
            *((_BYTE *)v79 + v29) = 0;
            v167 = 1;
            v82 = *(NSObject **)object;
            if (SHIBYTE(v166) < 0)
              operator delete(__p);
            if (v163 && SHIBYTE(v162) < 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v27 && *(_QWORD *)(v27 + 24))
            {
              v83 = _os_log_pack_size();
              v84 = (std::__shared_weak_count_vtbl *)operator new(v83, (std::align_val_t)8uLL);
              v85 = (std::__shared_weak_count *)operator new();
              v86 = v85;
              v85->__shared_owners_ = 0;
              v87 = (unint64_t *)&v85->__shared_owners_;
              v85->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v85->__shared_weak_owners_ = 0;
              v85[1].__vftable = v84;
              do
                v88 = __ldxr(v87);
              while (__stxr(v88 + 1, v87));
              do
                v89 = __ldaxr(v87);
              while (__stlxr(v89 - 1, v87));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v86);
              }
              v90 = _os_log_pack_fill();
              v91 = *(_QWORD *)(v5 + 48);
              *(_DWORD *)v90 = 134218240;
              *(_QWORD *)(v90 + 4) = v91;
              *(_WORD *)(v90 + 12) = 2048;
              *(double *)(v90 + 14) = v8;
              v92 = operator new();
              v93 = *(unsigned __int8 *)(v28 + 39);
              v94 = v150;
              if ((v93 & 0x80u) != 0)
              {
                v94 = *(_QWORD *)(v28 + 16);
                v93 = *(_QWORD *)(v28 + 24);
              }
              *(_QWORD *)v92 = v84;
              *(_QWORD *)(v92 + 8) = v84;
              *(_QWORD *)(v92 + 16) = v86;
              *(_QWORD *)(v92 + 24) = 0;
              *(_QWORD *)(v92 + 32) = 0;
              *(_QWORD *)(v92 + 40) = v94;
              *(_QWORD *)(v92 + 48) = v93;
              *(_BYTE *)(v92 + 56) = 16;
              *(_QWORD *)object = v92;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v27 + 24) + 40))(*(_QWORD *)(v27 + 24), object);
              v95 = *(_QWORD *)object;
              *(_QWORD *)object = 0;
              if (v95)
              {
                v96 = *(std::__shared_weak_count **)(v95 + 32);
                if (v96)
                {
                  v97 = (unint64_t *)&v96->__shared_owners_;
                  do
                    v98 = __ldaxr(v97);
                  while (__stlxr(v98 - 1, v97));
                  if (!v98)
                  {
                    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                    std::__shared_weak_count::__release_weak(v96);
                  }
                }
                v99 = *(std::__shared_weak_count **)(v95 + 16);
                if (v99)
                {
                  v100 = (unint64_t *)&v99->__shared_owners_;
                  do
                    v101 = __ldaxr(v100);
                  while (__stlxr(v101 - 1, v100));
                  if (!v101)
                  {
                    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                    std::__shared_weak_count::__release_weak(v99);
                  }
                }
                MEMORY[0x212BC6398](v95, 0x10F0C40B62ED6C6);
              }
            }
            else
            {
              os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
              v102 = *(_QWORD *)(v5 + 48);
              *(_DWORD *)object = 134218240;
              *(_QWORD *)&object[4] = v102;
              *(_WORD *)&object[12] = 2048;
              *(double *)&object[14] = v8;
              v103 = (void *)_os_log_send_and_compose_impl();
              if (v103)
                free(v103);
            }
            if (v25)
            {
              sub_20E8C003C((uint64_t)&v151, "Exceeding max gap for gyro timestamps: prev=%lf, cur=%lf. Dropping this sample.", *(double *)(v5 + 48), v8);
              sub_20E863570((uint64_t)&v151);
            }
            sub_20E863570((uint64_t)&v151);
            v66 = v159;
            if (!v159)
              return kdebug_trace();
            v104 = (unint64_t *)&v159->__shared_owners_;
            do
              v68 = __ldaxr(v104);
            while (__stlxr(v68 - 1, v104));
LABEL_156:
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
            return kdebug_trace();
          }
        }
        memmove(v72, v70, v71);
        goto LABEL_113;
      }
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.hpp", 207, (uint64_t)"", 0, (uint64_t)"Received Gyro measurement exceeds maximum gap.", 46, (void (*)(void **))sub_21023DDB0);
LABEL_232:
      abort();
    }
    v13 = *(_QWORD *)(v5 + 168);
    if (*(_QWORD *)(v5 + 208) != (*(_QWORD *)(v5 + 176) - v13) >> 5)
    {
LABEL_220:
      v139 = *(_OWORD *)v6;
      v140 = *((_QWORD *)v6 + 2);
      v141 = v13 + 32 * *(_QWORD *)(v5 + 200);
      *(double *)v141 = v8;
      *(_QWORD *)(v141 + 24) = v140;
      *(_OWORD *)(v141 + 8) = v139;
      v142 = (uint64_t)(*(_QWORD *)(v5 + 176) - *(_QWORD *)(v5 + 168)) >> 5;
      v143 = *(_QWORD *)(v5 + 208);
      v144 = *(_QWORD *)(v5 + 200) + 1;
      if (v144 >= v142)
        v145 = (uint64_t)(*(_QWORD *)(v5 + 176) - *(_QWORD *)(v5 + 168)) >> 5;
      else
        v145 = 0;
      *(_QWORD *)(v5 + 200) = v144 - v145;
      if (v143 == v142)
      {
        v146 = *(_QWORD *)(v5 + 192) + 1;
        if (v146 < v142)
          v142 = 0;
        *(_QWORD *)(v5 + 192) = v146 - v142;
      }
      else
      {
        *(_QWORD *)(v5 + 208) = v143 + 1;
      }
      *(double *)(v5 + 48) = v8;
      return kdebug_trace();
    }
    sub_20F0192DC(v160);
    if (**(int **)(v160[0] + 56) > 4
      || (v14 = *(unsigned __int8 *)(v160[0] + 72),
          v15 = sub_20E8C31DC(v160[0], "OSLogSurrogateAppender", 1, 0),
          v16 = v15,
          !v14)
      && !v15)
    {
LABEL_219:
      v13 = *(_QWORD *)(v5 + 168);
      goto LABEL_220;
    }
    v151 = v160;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v153 = std::chrono::system_clock::now().__d_.__rep_;
    v154 = 4;
    v155 = "unknown file";
    v156 = 220;
    v158 = 0;
    v159 = 0;
    v157 = "unknown function";
    v148 = v160[0];
    if (*(char *)(v160[0] + 39) < 0)
    {
      v18 = *(const char **)(v160[0] + 16);
      v17 = *(_QWORD *)(v160[0] + 24);
    }
    else
    {
      v17 = *(unsigned __int8 *)(v160[0] + 39);
      v18 = (const char *)(v160[0] + 16);
    }
    v147 = v160[0] + 16;
    v105 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v105 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      if ((_BYTE)v162)
      {
        *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
        *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v106 = byte_254A4A4F8;
    else
      v106 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v107 = byte_254A4A4F8[23];
    else
      v107 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v106, v18);
    v108 = &object[8];
    if (v107 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v107 >= 0x17)
    {
      v109 = v16;
      v110 = v18;
      v111 = v14;
      v112 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v107 | 7) != 0x17)
        v112 = v107 | 7;
      v113 = v112 + 1;
      v108 = operator new(v112 + 1);
      *(_QWORD *)&object[16] = v107;
      v162 = v113 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v108;
      v14 = v111;
      v18 = v110;
      v16 = v109;
    }
    else
    {
      HIBYTE(v162) = v107;
      if (!v107)
      {
LABEL_174:
        v108[v107] = 0;
        v163 = 1;
        v114 = &__p;
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v17 >= 0x17)
        {
          v115 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v115 = v17 | 7;
          v116 = v115 + 1;
          v114 = operator new(v115 + 1);
          v165 = v17;
          v166 = v116 | 0x8000000000000000;
          __p = v114;
        }
        else
        {
          HIBYTE(v166) = v17;
          if (!v17)
            goto LABEL_182;
        }
        memmove(v114, v18, v17);
LABEL_182:
        *((_BYTE *)v114 + v17) = 0;
        v167 = 1;
        v117 = *(NSObject **)object;
        if (SHIBYTE(v166) < 0)
          operator delete(__p);
        if (v163 && SHIBYTE(v162) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v16 && *(_QWORD *)(v16 + 24))
        {
          v118 = _os_log_pack_size();
          v119 = (std::__shared_weak_count_vtbl *)operator new(v118, (std::align_val_t)8uLL);
          v120 = (std::__shared_weak_count *)operator new();
          v121 = v120;
          v120->__shared_owners_ = 0;
          v122 = (unint64_t *)&v120->__shared_owners_;
          v120->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v120->__shared_weak_owners_ = 0;
          v120[1].__vftable = v119;
          do
            v123 = __ldxr(v122);
          while (__stxr(v123 + 1, v122));
          do
            v124 = __ldaxr(v122);
          while (__stlxr(v124 - 1, v122));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v121);
          }
          *(_WORD *)_os_log_pack_fill() = 0;
          v125 = operator new();
          v126 = *(unsigned __int8 *)(v148 + 39);
          v127 = v147;
          if ((v126 & 0x80u) != 0)
          {
            v127 = *(_QWORD *)(v148 + 16);
            v126 = *(_QWORD *)(v148 + 24);
          }
          *(_QWORD *)v125 = v119;
          *(_QWORD *)(v125 + 8) = v119;
          *(_QWORD *)(v125 + 16) = v121;
          *(_QWORD *)(v125 + 24) = 0;
          *(_QWORD *)(v125 + 32) = 0;
          *(_QWORD *)(v125 + 40) = v127;
          *(_QWORD *)(v125 + 48) = v126;
          *(_BYTE *)(v125 + 56) = 16;
          *(_QWORD *)object = v125;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v16 + 24) + 40))(*(_QWORD *)(v16 + 24), object);
          v128 = *(_QWORD *)object;
          *(_QWORD *)object = 0;
          if (v128)
          {
            v129 = *(std::__shared_weak_count **)(v128 + 32);
            if (v129)
            {
              v130 = (unint64_t *)&v129->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            v132 = *(std::__shared_weak_count **)(v128 + 16);
            if (v132)
            {
              v133 = (unint64_t *)&v132->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
            MEMORY[0x212BC6398](v128, 0x10F0C40B62ED6C6);
          }
        }
        else
        {
          os_log_type_enabled(v117, OS_LOG_TYPE_ERROR);
          *(_WORD *)object = 0;
          v135 = (void *)_os_log_send_and_compose_impl();
          if (v135)
            free(v135);
        }
        if (v14)
        {
          sub_20E8C003C((uint64_t)&v151, "Gyroscope buffer is too full - popping oldest.");
          sub_20E863570((uint64_t)&v151);
        }
        sub_20E863570((uint64_t)&v151);
        v136 = v159;
        if (v159)
        {
          v137 = (unint64_t *)&v159->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
        goto LABEL_219;
      }
    }
    memmove(v108, v106, v107);
    goto LABEL_174;
  }
  kdebug_trace();
  *(_DWORD *)object = 0;
  if (sub_20F3EB2B4((uint64_t *)(v5 + 464), (__int128 *)v6, (_BOOL4 *)object, v8, 1.0))
  {
    v9 = (double *)(v5 + 48);
    if (*(_DWORD *)object)
      sub_20F3EC5F4((uint64_t *)(v5 + 464), v5 + 336, v9, (uint64_t *)(v5 + 168));
    else
      sub_20F3EF948((uint64_t *)(v5 + 464), (_QWORD *)(v5 + 168), v9);
  }
  return kdebug_trace();
}

void sub_20F011A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a13);
  v35 = a21;
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t sub_20F011F8C(uint64_t a1, double *a2)
{
  uint64_t result;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  const char *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const char *v23;
  size_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  const char *v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  _BYTE *v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *p_p;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  size_t v45;
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unsigned __int8 v69;
  const char *v70;
  size_t v71;
  _BYTE *v72;
  unint64_t v73;
  const char *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  size_t v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  unint64_t *v104;
  unsigned __int8 v105;
  const char *v106;
  size_t v107;
  _BYTE *v108;
  unint64_t v109;
  const char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  size_t v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v153;
  int v154;
  const char *v155;
  int v156;
  const char *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t v160[5];
  _BYTE object[24];
  unint64_t v162;
  char v163;
  void *__p;
  size_t v165;
  unint64_t v166;
  char v167;
  uint64_t v168;

  v168 = *MEMORY[0x24BDAC8D0];
  result = sub_20F00FE10(a1, *a2);
  if ((result & 1) != 0)
    return result;
  v5 = **(_QWORD **)(a1 + 5528);
  v7 = *a2;
  v6 = a2 + 1;
  v8 = v7;
  if (!*(_BYTE *)(v5 + 416))
  {
    kdebug_trace();
    if (v8 < 0.0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.hpp", 288, (uint64_t)"timestamp >= 0", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_232;
    }
    v10 = *(double *)(v5 + 56);
    if (v10 >= 0.0 && v10 >= v8)
    {
      sub_20F0192DC(v160);
      if (**(int **)(v160[0] + 56) <= 5)
      {
        v19 = *(unsigned __int8 *)(v160[0] + 72);
        v20 = sub_20E8C31DC(v160[0], "OSLogSurrogateAppender", 1, 0);
        v21 = v20;
        if (v19 || v20)
        {
          v151 = v160;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v153 = std::chrono::system_clock::now().__d_.__rep_;
          v154 = 5;
          v155 = "unknown file";
          v156 = 293;
          v158 = 0;
          v159 = 0;
          v157 = "unknown function";
          v22 = v160[0];
          v23 = (const char *)(v160[0] + 16);
          v149 = v160[0] + 16;
          if (*(char *)(v160[0] + 39) < 0)
          {
            v23 = *(const char **)(v160[0] + 16);
            v24 = *(_QWORD *)(v160[0] + 24);
          }
          else
          {
            v24 = *(unsigned __int8 *)(v160[0] + 39);
          }
          v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            if ((_BYTE)v162)
            {
              *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
              *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
            }
            else
            {
              byte_254A4A4F8[23] = 14;
              strcpy(byte_254A4A4F8, "com.apple.cv3d");
            }
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v32 = byte_254A4A4F8;
          else
            v32 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v33 = byte_254A4A4F8[23];
          else
            v33 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)object = os_log_create(v32, v23);
          v34 = &object[8];
          if (v33 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v33 >= 0x17)
          {
            v35 = v21;
            v36 = v23;
            v37 = v22;
            v38 = v19;
            v39 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v33 | 7) != 0x17)
              v39 = v33 | 7;
            v40 = v39 + 1;
            v34 = operator new(v39 + 1);
            *(_QWORD *)&object[16] = v33;
            v162 = v40 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v34;
            v19 = v38;
            v22 = v37;
            v23 = v36;
            v21 = v35;
          }
          else
          {
            HIBYTE(v162) = v33;
            if (!v33)
            {
LABEL_53:
              v34[v33] = 0;
              v163 = 1;
              p_p = &__p;
              if (v24 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v24 >= 0x17)
              {
                v42 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v24 | 7) != 0x17)
                  v42 = v24 | 7;
                v43 = v42 + 1;
                p_p = operator new(v42 + 1);
                v165 = v24;
                v166 = v43 | 0x8000000000000000;
                __p = p_p;
              }
              else
              {
                HIBYTE(v166) = v24;
                if (!v24)
                  goto LABEL_61;
              }
              memmove(p_p, v23, v24);
LABEL_61:
              *((_BYTE *)p_p + v24) = 0;
              v167 = 1;
              v44 = *(NSObject **)object;
              if (SHIBYTE(v166) < 0)
                operator delete(__p);
              if (v163 && SHIBYTE(v162) < 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v21 && *(_QWORD *)(v21 + 24))
              {
                v45 = _os_log_pack_size();
                v46 = (std::__shared_weak_count_vtbl *)operator new(v45, (std::align_val_t)8uLL);
                v47 = (std::__shared_weak_count *)operator new();
                v48 = v47;
                v47->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v47->__shared_owners_;
                v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v47->__shared_weak_owners_ = 0;
                v47[1].__vftable = v46;
                do
                  v50 = __ldxr(p_shared_owners);
                while (__stxr(v50 + 1, p_shared_owners));
                do
                  v51 = __ldaxr(p_shared_owners);
                while (__stlxr(v51 - 1, p_shared_owners));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v48);
                }
                v52 = _os_log_pack_fill();
                v53 = *(_QWORD *)(v5 + 56);
                *(_DWORD *)v52 = 134218240;
                *(_QWORD *)(v52 + 4) = v53;
                *(_WORD *)(v52 + 12) = 2048;
                *(double *)(v52 + 14) = v8;
                v54 = operator new();
                v55 = *(unsigned __int8 *)(v22 + 39);
                v56 = v149;
                if ((v55 & 0x80u) != 0)
                {
                  v56 = *(_QWORD *)(v22 + 16);
                  v55 = *(_QWORD *)(v22 + 24);
                }
                *(_QWORD *)v54 = v46;
                *(_QWORD *)(v54 + 8) = v46;
                *(_QWORD *)(v54 + 16) = v48;
                *(_QWORD *)(v54 + 24) = 0;
                *(_QWORD *)(v54 + 32) = 0;
                *(_QWORD *)(v54 + 40) = v56;
                *(_QWORD *)(v54 + 48) = v55;
                *(_BYTE *)(v54 + 56) = 16;
                *(_QWORD *)object = v54;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v21 + 24) + 40))(*(_QWORD *)(v21 + 24), object);
                v57 = *(_QWORD *)object;
                *(_QWORD *)object = 0;
                if (v57)
                {
                  v58 = *(std::__shared_weak_count **)(v57 + 32);
                  if (v58)
                  {
                    v59 = (unint64_t *)&v58->__shared_owners_;
                    do
                      v60 = __ldaxr(v59);
                    while (__stlxr(v60 - 1, v59));
                    if (!v60)
                    {
                      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                      std::__shared_weak_count::__release_weak(v58);
                    }
                  }
                  v61 = *(std::__shared_weak_count **)(v57 + 16);
                  if (v61)
                  {
                    v62 = (unint64_t *)&v61->__shared_owners_;
                    do
                      v63 = __ldaxr(v62);
                    while (__stlxr(v63 - 1, v62));
                    if (!v63)
                    {
                      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                      std::__shared_weak_count::__release_weak(v61);
                    }
                  }
                  MEMORY[0x212BC6398](v57, 0x10F0C40B62ED6C6);
                }
              }
              else
              {
                os_log_type_enabled(v44, OS_LOG_TYPE_ERROR);
                v64 = *(_QWORD *)(v5 + 56);
                *(_DWORD *)object = 134218240;
                *(_QWORD *)&object[4] = v64;
                *(_WORD *)&object[12] = 2048;
                *(double *)&object[14] = v8;
                v65 = (void *)_os_log_send_and_compose_impl();
                if (v65)
                  free(v65);
              }
              if (v19)
              {
                sub_20E8C003C((uint64_t)&v151, "Non-monotonic accel timestamps: prev=%lf, cur=%lf. Dropping this sample.", *(double *)(v5 + 56), v8);
                sub_20E863570((uint64_t)&v151);
              }
              sub_20E863570((uint64_t)&v151);
              v66 = v159;
              if (!v159)
                return kdebug_trace();
              v67 = (unint64_t *)&v159->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              goto LABEL_156;
            }
          }
          memmove(v34, v32, v33);
          goto LABEL_53;
        }
      }
      return kdebug_trace();
    }
    if (v10 >= 0.0 && v8 - v10 > 1.0)
    {
      if (!*(_BYTE *)(v5 + 1272))
      {
        sub_20F0192DC(v160);
        if (**(int **)(v160[0] + 56) > 5)
          return kdebug_trace();
        v25 = *(unsigned __int8 *)(v160[0] + 72);
        v26 = sub_20E8C31DC(v160[0], "OSLogSurrogateAppender", 1, 0);
        v27 = v26;
        if (!v25 && !v26)
          return kdebug_trace();
        v151 = v160;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v153 = std::chrono::system_clock::now().__d_.__rep_;
        v154 = 5;
        v155 = "unknown file";
        v156 = 305;
        v158 = 0;
        v159 = 0;
        v157 = "unknown function";
        v28 = v160[0];
        if (*(char *)(v160[0] + 39) < 0)
        {
          v30 = *(const char **)(v160[0] + 16);
          v29 = *(_QWORD *)(v160[0] + 24);
        }
        else
        {
          v29 = *(unsigned __int8 *)(v160[0] + 39);
          v30 = (const char *)(*v151 + 16);
        }
        v150 = *v151 + 16;
        v69 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          if ((_BYTE)v162)
          {
            *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
            *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
          }
          else
          {
            byte_254A4A4F8[23] = 14;
            strcpy(byte_254A4A4F8, "com.apple.cv3d");
          }
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v70 = byte_254A4A4F8;
        else
          v70 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v71 = byte_254A4A4F8[23];
        else
          v71 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v70, v30);
        v72 = &object[8];
        if (v71 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v71 >= 0x17)
        {
          v73 = v27;
          v74 = v30;
          v75 = v28;
          v76 = v25;
          v77 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v71 | 7) != 0x17)
            v77 = v71 | 7;
          v78 = v77 + 1;
          v72 = operator new(v77 + 1);
          *(_QWORD *)&object[16] = v71;
          v162 = v78 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v72;
          v25 = v76;
          v28 = v75;
          v30 = v74;
          v27 = v73;
        }
        else
        {
          HIBYTE(v162) = v71;
          if (!v71)
          {
LABEL_113:
            v72[v71] = 0;
            v163 = 1;
            v79 = &__p;
            if (v29 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v29 >= 0x17)
            {
              v80 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v29 | 7) != 0x17)
                v80 = v29 | 7;
              v81 = v80 + 1;
              v79 = operator new(v80 + 1);
              v165 = v29;
              v166 = v81 | 0x8000000000000000;
              __p = v79;
            }
            else
            {
              HIBYTE(v166) = v29;
              if (!v29)
                goto LABEL_121;
            }
            memmove(v79, v30, v29);
LABEL_121:
            *((_BYTE *)v79 + v29) = 0;
            v167 = 1;
            v82 = *(NSObject **)object;
            if (SHIBYTE(v166) < 0)
              operator delete(__p);
            if (v163 && SHIBYTE(v162) < 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v27 && *(_QWORD *)(v27 + 24))
            {
              v83 = _os_log_pack_size();
              v84 = (std::__shared_weak_count_vtbl *)operator new(v83, (std::align_val_t)8uLL);
              v85 = (std::__shared_weak_count *)operator new();
              v86 = v85;
              v85->__shared_owners_ = 0;
              v87 = (unint64_t *)&v85->__shared_owners_;
              v85->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v85->__shared_weak_owners_ = 0;
              v85[1].__vftable = v84;
              do
                v88 = __ldxr(v87);
              while (__stxr(v88 + 1, v87));
              do
                v89 = __ldaxr(v87);
              while (__stlxr(v89 - 1, v87));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v86);
              }
              v90 = _os_log_pack_fill();
              v91 = *(_QWORD *)(v5 + 56);
              *(_DWORD *)v90 = 134218240;
              *(_QWORD *)(v90 + 4) = v91;
              *(_WORD *)(v90 + 12) = 2048;
              *(double *)(v90 + 14) = v8;
              v92 = operator new();
              v93 = *(unsigned __int8 *)(v28 + 39);
              v94 = v150;
              if ((v93 & 0x80u) != 0)
              {
                v94 = *(_QWORD *)(v28 + 16);
                v93 = *(_QWORD *)(v28 + 24);
              }
              *(_QWORD *)v92 = v84;
              *(_QWORD *)(v92 + 8) = v84;
              *(_QWORD *)(v92 + 16) = v86;
              *(_QWORD *)(v92 + 24) = 0;
              *(_QWORD *)(v92 + 32) = 0;
              *(_QWORD *)(v92 + 40) = v94;
              *(_QWORD *)(v92 + 48) = v93;
              *(_BYTE *)(v92 + 56) = 16;
              *(_QWORD *)object = v92;
              (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v27 + 24) + 40))(*(_QWORD *)(v27 + 24), object);
              v95 = *(_QWORD *)object;
              *(_QWORD *)object = 0;
              if (v95)
              {
                v96 = *(std::__shared_weak_count **)(v95 + 32);
                if (v96)
                {
                  v97 = (unint64_t *)&v96->__shared_owners_;
                  do
                    v98 = __ldaxr(v97);
                  while (__stlxr(v98 - 1, v97));
                  if (!v98)
                  {
                    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                    std::__shared_weak_count::__release_weak(v96);
                  }
                }
                v99 = *(std::__shared_weak_count **)(v95 + 16);
                if (v99)
                {
                  v100 = (unint64_t *)&v99->__shared_owners_;
                  do
                    v101 = __ldaxr(v100);
                  while (__stlxr(v101 - 1, v100));
                  if (!v101)
                  {
                    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                    std::__shared_weak_count::__release_weak(v99);
                  }
                }
                MEMORY[0x212BC6398](v95, 0x10F0C40B62ED6C6);
              }
            }
            else
            {
              os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
              v102 = *(_QWORD *)(v5 + 56);
              *(_DWORD *)object = 134218240;
              *(_QWORD *)&object[4] = v102;
              *(_WORD *)&object[12] = 2048;
              *(double *)&object[14] = v8;
              v103 = (void *)_os_log_send_and_compose_impl();
              if (v103)
                free(v103);
            }
            if (v25)
            {
              sub_20E8C003C((uint64_t)&v151, "Exceeding max gap for accel timestamps: prev=%lf, cur=%lf. Dropping this sample.", *(double *)(v5 + 56), v8);
              sub_20E863570((uint64_t)&v151);
            }
            sub_20E863570((uint64_t)&v151);
            v66 = v159;
            if (!v159)
              return kdebug_trace();
            v104 = (unint64_t *)&v159->__shared_owners_;
            do
              v68 = __ldaxr(v104);
            while (__stlxr(v68 - 1, v104));
LABEL_156:
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
            return kdebug_trace();
          }
        }
        memmove(v72, v70, v71);
        goto LABEL_113;
      }
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.hpp", 301, (uint64_t)"", 0, (uint64_t)"Received Accel measurement exceeds maximum gap.", 47, (void (*)(void **))sub_21023DDB0);
LABEL_232:
      abort();
    }
    v13 = *(_QWORD *)(v5 + 216);
    if (*(_QWORD *)(v5 + 256) != (*(_QWORD *)(v5 + 224) - v13) >> 5)
    {
LABEL_220:
      v139 = *(_OWORD *)v6;
      v140 = *((_QWORD *)v6 + 2);
      v141 = v13 + 32 * *(_QWORD *)(v5 + 248);
      *(double *)v141 = v8;
      *(_QWORD *)(v141 + 24) = v140;
      *(_OWORD *)(v141 + 8) = v139;
      v142 = (uint64_t)(*(_QWORD *)(v5 + 224) - *(_QWORD *)(v5 + 216)) >> 5;
      v143 = *(_QWORD *)(v5 + 256);
      v144 = *(_QWORD *)(v5 + 248) + 1;
      if (v144 >= v142)
        v145 = (uint64_t)(*(_QWORD *)(v5 + 224) - *(_QWORD *)(v5 + 216)) >> 5;
      else
        v145 = 0;
      *(_QWORD *)(v5 + 248) = v144 - v145;
      if (v143 == v142)
      {
        v146 = *(_QWORD *)(v5 + 240) + 1;
        if (v146 < v142)
          v142 = 0;
        *(_QWORD *)(v5 + 240) = v146 - v142;
      }
      else
      {
        *(_QWORD *)(v5 + 256) = v143 + 1;
      }
      *(double *)(v5 + 56) = v8;
      return kdebug_trace();
    }
    sub_20F0192DC(v160);
    if (**(int **)(v160[0] + 56) > 4
      || (v14 = *(unsigned __int8 *)(v160[0] + 72),
          v15 = sub_20E8C31DC(v160[0], "OSLogSurrogateAppender", 1, 0),
          v16 = v15,
          !v14)
      && !v15)
    {
LABEL_219:
      v13 = *(_QWORD *)(v5 + 216);
      goto LABEL_220;
    }
    v151 = v160;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v153 = std::chrono::system_clock::now().__d_.__rep_;
    v154 = 4;
    v155 = "unknown file";
    v156 = 314;
    v158 = 0;
    v159 = 0;
    v157 = "unknown function";
    v148 = v160[0];
    if (*(char *)(v160[0] + 39) < 0)
    {
      v18 = *(const char **)(v160[0] + 16);
      v17 = *(_QWORD *)(v160[0] + 24);
    }
    else
    {
      v17 = *(unsigned __int8 *)(v160[0] + 39);
      v18 = (const char *)(v160[0] + 16);
    }
    v147 = v160[0] + 16;
    v105 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v105 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      if ((_BYTE)v162)
      {
        *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)object;
        *(_QWORD *)&byte_254A4A4F8[16] = *(_QWORD *)&object[16];
      }
      else
      {
        byte_254A4A4F8[23] = 14;
        strcpy(byte_254A4A4F8, "com.apple.cv3d");
      }
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v106 = byte_254A4A4F8;
    else
      v106 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v107 = byte_254A4A4F8[23];
    else
      v107 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v106, v18);
    v108 = &object[8];
    if (v107 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v107 >= 0x17)
    {
      v109 = v16;
      v110 = v18;
      v111 = v14;
      v112 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v107 | 7) != 0x17)
        v112 = v107 | 7;
      v113 = v112 + 1;
      v108 = operator new(v112 + 1);
      *(_QWORD *)&object[16] = v107;
      v162 = v113 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v108;
      v14 = v111;
      v18 = v110;
      v16 = v109;
    }
    else
    {
      HIBYTE(v162) = v107;
      if (!v107)
      {
LABEL_174:
        v108[v107] = 0;
        v163 = 1;
        v114 = &__p;
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v17 >= 0x17)
        {
          v115 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v115 = v17 | 7;
          v116 = v115 + 1;
          v114 = operator new(v115 + 1);
          v165 = v17;
          v166 = v116 | 0x8000000000000000;
          __p = v114;
        }
        else
        {
          HIBYTE(v166) = v17;
          if (!v17)
            goto LABEL_182;
        }
        memmove(v114, v18, v17);
LABEL_182:
        *((_BYTE *)v114 + v17) = 0;
        v167 = 1;
        v117 = *(NSObject **)object;
        if (SHIBYTE(v166) < 0)
          operator delete(__p);
        if (v163 && SHIBYTE(v162) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v16 && *(_QWORD *)(v16 + 24))
        {
          v118 = _os_log_pack_size();
          v119 = (std::__shared_weak_count_vtbl *)operator new(v118, (std::align_val_t)8uLL);
          v120 = (std::__shared_weak_count *)operator new();
          v121 = v120;
          v120->__shared_owners_ = 0;
          v122 = (unint64_t *)&v120->__shared_owners_;
          v120->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v120->__shared_weak_owners_ = 0;
          v120[1].__vftable = v119;
          do
            v123 = __ldxr(v122);
          while (__stxr(v123 + 1, v122));
          do
            v124 = __ldaxr(v122);
          while (__stlxr(v124 - 1, v122));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v121);
          }
          *(_WORD *)_os_log_pack_fill() = 0;
          v125 = operator new();
          v126 = *(unsigned __int8 *)(v148 + 39);
          v127 = v147;
          if ((v126 & 0x80u) != 0)
          {
            v127 = *(_QWORD *)(v148 + 16);
            v126 = *(_QWORD *)(v148 + 24);
          }
          *(_QWORD *)v125 = v119;
          *(_QWORD *)(v125 + 8) = v119;
          *(_QWORD *)(v125 + 16) = v121;
          *(_QWORD *)(v125 + 24) = 0;
          *(_QWORD *)(v125 + 32) = 0;
          *(_QWORD *)(v125 + 40) = v127;
          *(_QWORD *)(v125 + 48) = v126;
          *(_BYTE *)(v125 + 56) = 16;
          *(_QWORD *)object = v125;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v16 + 24) + 40))(*(_QWORD *)(v16 + 24), object);
          v128 = *(_QWORD *)object;
          *(_QWORD *)object = 0;
          if (v128)
          {
            v129 = *(std::__shared_weak_count **)(v128 + 32);
            if (v129)
            {
              v130 = (unint64_t *)&v129->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            v132 = *(std::__shared_weak_count **)(v128 + 16);
            if (v132)
            {
              v133 = (unint64_t *)&v132->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
            MEMORY[0x212BC6398](v128, 0x10F0C40B62ED6C6);
          }
        }
        else
        {
          os_log_type_enabled(v117, OS_LOG_TYPE_ERROR);
          *(_WORD *)object = 0;
          v135 = (void *)_os_log_send_and_compose_impl();
          if (v135)
            free(v135);
        }
        if (v14)
        {
          sub_20E8C003C((uint64_t)&v151, "Accelerometer buffer is too full - popping oldest.");
          sub_20E863570((uint64_t)&v151);
        }
        sub_20E863570((uint64_t)&v151);
        v136 = v159;
        if (v159)
        {
          v137 = (unint64_t *)&v159->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
        goto LABEL_219;
      }
    }
    memmove(v108, v106, v107);
    goto LABEL_174;
  }
  kdebug_trace();
  *(_DWORD *)object = 0;
  if (sub_20F3F11C4((uint64_t *)(v5 + 832), (__int128 *)v6, (_BOOL4 *)object, v8, 1.0))
  {
    v9 = (double *)(v5 + 56);
    if (*(_DWORD *)object)
      sub_20F3F2504((uint64_t *)(v5 + 832), v5 + 336, v9, (uint64_t *)(v5 + 216));
    else
      sub_20F3F5858((uint64_t *)(v5 + 832), (_QWORD *)(v5 + 216), v9);
  }
  return kdebug_trace();
}

void sub_20F013270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&a13);
  v35 = a21;
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  kdebug_trace();
  _Unwind_Resume(a1);
}

void sub_20F013780(uint64_t a1, double ***a2)
{
  double **v2;
  double *v3;
  unint64_t v4;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v14;
  unsigned int v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  _QWORD **v26;
  _QWORD *v27;
  unint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  float v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  void *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  size_t v44;
  size_t v45;
  size_t v46;
  _QWORD *i;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char **v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  __int128 *v78;
  __int128 v79;
  char *v80;
  char *v81;
  char *v82;
  __int128 v83;
  char *v84;
  __int128 v85;
  void *v86;
  void *v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  size_t v101;
  char *v102;
  char *v103;
  __int128 v104;
  _QWORD *v105;
  _QWORD *v106;
  void *v107;
  void *v108;
  _QWORD *v109;
  _QWORD *v110;
  void *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  size_t v116;
  uint64_t v117;
  _QWORD *v118;
  _BYTE *v119;
  _BYTE *v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  _QWORD *v129;
  _BYTE *v130;
  _BYTE *v131;
  size_t v132;
  unint64_t v133;
  void *v134;
  _BYTE *v135;
  size_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int *v142;
  int v143;
  unint64_t v144;
  int *v145;
  int v146;
  int32x2_t v150;
  int64x2_t v151;
  float64x2_t v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t j;
  float32x2_t *v160;
  float32x2_t *v161;
  double v162;
  char *v163;
  double *v164;
  double *v165;
  uint64_t v166;
  double *v167;
  double v168;
  double v169;
  uint64_t v170;
  double v171;
  int v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  size_t v177;
  const char *v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  size_t v184;
  const char *v185;
  unsigned __int8 v186;
  uint64_t v187;
  unsigned __int8 v188;
  const char *v189;
  size_t v190;
  void *v191;
  unint64_t v192;
  const char *v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  NSObject *v202;
  size_t v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  void *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  void *v238;
  uint64_t v239;
  void *v240;
  unsigned __int8 v241;
  const char *v242;
  size_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  void *p_p;
  uint64_t v248;
  uint64_t v249;
  NSObject *v250;
  unint64_t *p_shared_owners;
  double **v253;
  double **v254;
  _BYTE *v255;
  double *v257;
  size_t v258;
  void *v259;
  __int128 v260;
  uint64_t *v261;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v263;
  int v264;
  const char *v265;
  int v266;
  const char *v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  uint64_t v270;
  void *object;
  void *v272[2];
  __int128 v273;
  void *__p;
  size_t v275;
  unint64_t v276;
  char v277;
  uint64_t v278;
  uint64_t v279[2];

  v2 = *a2;
  v253 = a2[1];
  if (*a2 != v253)
  {
    while (1)
    {
      v3 = *v2;
      v254 = v2;
      v257 = v2[1];
      _ZF = v257 == *v2;
      v4 = 0xF47E8FD1FA3F47E9 * (v257 - *v2);
      _CF = !_ZF && v4 >= 2;
      if (_CF)
        break;
LABEL_3:
      v2 = v254 + 3;
      if (v254 + 3 == v253)
        goto LABEL_161;
    }
    while (1)
    {
      if (!*((_BYTE *)v3 + 688))
        goto LABEL_11;
      v7 = *(_QWORD *)(a1 + 5528);
      v8 = (unint64_t)"stream_id <= 0xffff";
      if (*(_DWORD *)v3 >= 0x10000u)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v9 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v10 = qword_254A6DE40;
          v11 = qword_254A6DE48;
          while (v10 != v11)
          {
            v13 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v10;
            v12 = *(_QWORD *)(v10 + 8);
            v10 += 16;
            v13(v12, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
        }
        v14 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
LABEL_409:
          abort();
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      v15 = *((_DWORD *)v3 + 1);
      if (v15 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v16 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v17 = qword_254A6DE40;
          v18 = qword_254A6DE48;
          while (v17 != v18)
          {
            v20 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v17;
            v19 = *(_QWORD *)(v17 + 8);
            v17 += 16;
            v20(v19, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
        }
        v21 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_409;
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        v15 = *((_DWORD *)v3 + 1);
      }
      v22 = *(_DWORD *)v3;
      v23 = (unsigned __int16)v15 | ((unsigned __int16)*(_DWORD *)v3 << 16);
      v24 = *(_QWORD *)(v7 + 304);
      if (v24)
      {
        v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          v8 = (unsigned __int16)v15 | ((unsigned __int16)v22 << 16);
          if (v24 <= v23)
            v8 = v23 % v24;
        }
        else
        {
          v8 = ((_DWORD)v24 - 1) & v23;
        }
        v26 = *(_QWORD ***)(*(_QWORD *)(v7 + 296) + 8 * v8);
        if (v26)
        {
          v27 = *v26;
          if (*v26)
          {
            if (v25.u32[0] < 2uLL)
            {
              while (1)
              {
                v31 = v27[1];
                if (v31 == v23)
                {
                  if (*((_DWORD *)v27 + 4) == v22 && *((_DWORD *)v27 + 5) == v15)
                    goto LABEL_128;
                }
                else if ((v31 & (v24 - 1)) != v8)
                {
                  goto LABEL_57;
                }
                v27 = (_QWORD *)*v27;
                if (!v27)
                  goto LABEL_57;
              }
            }
            do
            {
              v29 = v27[1];
              if (v29 == v23)
              {
                _ZF = *((_DWORD *)v27 + 4) == v22 && *((_DWORD *)v27 + 5) == v15;
                if (_ZF)
                  goto LABEL_128;
              }
              else
              {
                if (v29 >= v24)
                  v29 %= v24;
                if (v29 != v8)
                  break;
              }
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
        }
      }
LABEL_57:
      v32 = (_QWORD *)(v7 + 312);
      v27 = operator new(0x30uLL);
      object = v27;
      v272[0] = (void *)(v7 + 312);
      *v27 = 0;
      v27[1] = v23;
      v33 = *(_QWORD *)v3;
      v27[4] = 0;
      v27[5] = 0;
      v27[2] = v33;
      v27[3] = 0;
      LOBYTE(v272[1]) = 1;
      v34 = (float)(unint64_t)(*(_QWORD *)(v7 + 320) + 1);
      v35 = *(float *)(v7 + 328);
      if (v24 && (float)(v35 * (float)v24) >= v34)
      {
        v23 = v8;
        goto LABEL_118;
      }
      v36 = (v24 & (v24 - 1)) != 0;
      if (v24 < 3)
        v36 = 1;
      v37 = v36 | (2 * v24);
      v38 = vcvtps_u32_f32(v34 / v35);
      if (v37 <= v38)
        prime = v38;
      else
        prime = v37;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v24 = *(_QWORD *)(v7 + 304);
      }
      if (prime <= v24)
      {
        if (prime >= v24)
          goto LABEL_106;
        v51 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 320) / *(float *)(v7 + 328));
        if (v24 < 3 || (v52 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v52.i16[0] = vaddlv_u8(v52), v52.u32[0] > 1uLL))
        {
          v51 = std::__next_prime(v51);
        }
        else
        {
          v53 = 1 << -(char)__clz(v51 - 1);
          if (v51 >= 2)
            v51 = v53;
        }
        if (prime <= v51)
          prime = v51;
        if (prime >= v24)
        {
          v24 = *(_QWORD *)(v7 + 304);
          if ((v24 & (v24 - 1)) == 0)
            goto LABEL_107;
          goto LABEL_116;
        }
        if (!prime)
        {
          v55 = *(void **)(v7 + 296);
          *(_QWORD *)(v7 + 296) = 0;
          if (v55)
            operator delete(v55);
          v24 = 0;
          *(_QWORD *)(v7 + 304) = 0;
          goto LABEL_107;
        }
      }
      if (prime >> 61)
        sub_20E877A38();
      v40 = operator new(8 * prime);
      v41 = *(void **)(v7 + 296);
      *(_QWORD *)(v7 + 296) = v40;
      if (v41)
        operator delete(v41);
      v42 = 0;
      *(_QWORD *)(v7 + 304) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(v7 + 296) + 8 * v42++) = 0;
      while (prime != v42);
      v43 = (_QWORD *)*v32;
      if (*v32)
      {
        v44 = v43[1];
        v45 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v44 < prime)
          {
            *(_QWORD *)(*(_QWORD *)(v7 + 296) + 8 * v44) = v32;
            v54 = (_QWORD *)*v43;
            if (*v43)
              goto LABEL_110;
LABEL_105:
            v24 = prime;
LABEL_106:
            if ((v24 & (v24 - 1)) != 0)
              goto LABEL_116;
LABEL_107:
            v23 = ((_DWORD)v24 - 1) & v23;
            goto LABEL_118;
          }
          v44 %= prime;
          *(_QWORD *)(*(_QWORD *)(v7 + 296) + 8 * v44) = v32;
          v54 = (_QWORD *)*v43;
          if (!*v43)
            goto LABEL_105;
          while (1)
          {
LABEL_110:
            v57 = v54[1];
            if (v57 >= prime)
              v57 %= prime;
            if (v57 == v44)
              goto LABEL_109;
            v58 = *(_QWORD *)(v7 + 296);
            if (*(_QWORD *)(v58 + 8 * v57))
              break;
            *(_QWORD *)(v58 + 8 * v57) = v43;
            v43 = v54;
            v54 = (_QWORD *)*v54;
            v44 = v57;
            if (!v54)
              goto LABEL_115;
          }
          *v43 = *v54;
          v56 = 8 * v57;
          *v54 = **(_QWORD **)(*(_QWORD *)(v7 + 296) + v56);
          **(_QWORD **)(*(_QWORD *)(v7 + 296) + v56) = v54;
          v54 = v43;
LABEL_109:
          v43 = v54;
          v54 = (_QWORD *)*v54;
          if (!v54)
            goto LABEL_115;
          goto LABEL_110;
        }
        v46 = v44 & v45;
        *(_QWORD *)(*(_QWORD *)(v7 + 296) + 8 * v46) = v32;
        for (i = (_QWORD *)*v43; *v43; i = (_QWORD *)*v43)
        {
          v48 = i[1] & v45;
          if (v48 == v46)
          {
            v43 = i;
          }
          else
          {
            v49 = *(_QWORD *)(v7 + 296);
            if (*(_QWORD *)(v49 + 8 * v48))
            {
              *v43 = *i;
              v50 = 8 * v48;
              *i = **(_QWORD **)(*(_QWORD *)(v7 + 296) + v50);
              **(_QWORD **)(*(_QWORD *)(v7 + 296) + v50) = i;
            }
            else
            {
              *(_QWORD *)(v49 + 8 * v48) = v43;
              v43 = i;
              v46 = v48;
            }
          }
        }
      }
LABEL_115:
      v24 = prime;
      if ((prime & (prime - 1)) == 0)
        goto LABEL_107;
LABEL_116:
      if (v24 <= v23)
        v23 %= v24;
LABEL_118:
      v59 = *(_QWORD *)(v7 + 296);
      v60 = *(_QWORD **)(v59 + 8 * v23);
      if (v60)
      {
        *v27 = *v60;
LABEL_126:
        *v60 = v27;
        goto LABEL_127;
      }
      *v27 = *v32;
      *v32 = v27;
      *(_QWORD *)(v59 + 8 * v23) = v32;
      if (*v27)
      {
        v61 = *(_QWORD *)(*v27 + 8);
        if ((v24 & (v24 - 1)) != 0)
        {
          if (v61 >= v24)
            v61 %= v24;
        }
        else
        {
          v61 &= v24 - 1;
        }
        v60 = (_QWORD *)(*(_QWORD *)(v7 + 296) + 8 * v61);
        goto LABEL_126;
      }
LABEL_127:
      ++*(_QWORD *)(v7 + 320);
LABEL_128:
      if (v27 + 3 == (_QWORD *)(v3 + 83))
        goto LABEL_11;
      v62 = (char *)*((_QWORD *)v3 + 83);
      v63 = (char *)*((_QWORD *)v3 + 84);
      v64 = v63 - v62;
      v65 = (v63 - v62) >> 4;
      v66 = v27[5];
      v67 = (char *)v27[3];
      if (v65 <= (v66 - (uint64_t)v67) >> 4)
      {
        v75 = (char *)v27[4];
        v72 = (char **)(v27 + 4);
        v74 = v75;
        v76 = (v75 - v67) >> 4;
        if (v76 < v65)
        {
          if (v74 != v67)
          {
            v77 = 16 * v76;
            v78 = (__int128 *)*((_QWORD *)v3 + 83);
            do
            {
              v79 = *v78++;
              *(_OWORD *)v67 = v79;
              v67 += 16;
              v77 -= 16;
            }
            while (v77);
            v67 = *v72;
          }
          v80 = &v62[16 * v76];
          v81 = v67;
          if (v80 != v63)
          {
            v81 = v67;
            v82 = v67;
            do
            {
              v83 = *(_OWORD *)v80;
              v80 += 16;
              *(_OWORD *)v82 = v83;
              v82 += 16;
              v81 += 16;
            }
            while (v80 != v63);
          }
          v6 = v81 - v67;
          goto LABEL_10;
        }
        v73 = v67;
        if (v62 != v63)
        {
          v84 = v67;
          do
          {
            v85 = *(_OWORD *)v62;
            v62 += 16;
            *(_OWORD *)v84 = v85;
            v84 += 16;
            v73 += 16;
          }
          while (v62 != v63);
        }
      }
      else
      {
        if (v67)
        {
          v27[4] = v67;
          operator delete(v67);
          v66 = 0;
          v27[3] = 0;
          v27[4] = 0;
          v27[5] = 0;
        }
        if (v64 < 0)
          goto LABEL_410;
        v68 = v66 >> 3;
        if (v66 >> 3 <= v65)
          v68 = (v63 - v62) >> 4;
        _CF = (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0;
        v69 = 0xFFFFFFFFFFFFFFFLL;
        if (!_CF)
          v69 = v68;
        if (v69 >> 60)
LABEL_410:
          sub_20E867F44();
        v70 = 16 * v69;
        v71 = (char *)operator new(16 * v69);
        v67 = v71;
        v27[4] = v71;
        v72 = (char **)(v27 + 4);
        *(v72 - 1) = v71;
        v72[1] = &v71[v70];
        v73 = v71;
        if (v62 != v63)
        {
          memcpy(v71, v62, v64 & 0xFFFFFFFFFFFFFFF0);
          v73 = &v67[v64 & 0xFFFFFFFFFFFFFFF0];
        }
      }
      v6 = v73 - v67;
LABEL_10:
      *v72 = &v67[v6];
LABEL_11:
      v3 += 89;
      if (v3 == v257)
        goto LABEL_3;
    }
  }
LABEL_161:
  sub_20F024EE4(a2, (uint64_t *)&v259);
  v87 = v259;
  v86 = (void *)v260;
  v88 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v260 - (_QWORD)v259) >> 4);
  v89 = *(_QWORD *)(*(_QWORD *)(a1 + 5528) + 360);
  v91 = *(_QWORD **)v89;
  v90 = *(_QWORD **)(v89 + 8);
  v92 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v90 - *(_QWORD *)v89) >> 3);
  v93 = v88 - v92;
  if (v88 <= v92)
  {
    if (v88 < v92)
    {
      v109 = &v91[0xCCCCCCCCCCCCCCDLL * ((uint64_t)(v260 - (_QWORD)v259) >> 4)];
      if (v90 != v109)
      {
        v110 = *(_QWORD **)(v89 + 8);
        do
        {
          v112 = (void *)*(v110 - 3);
          v110 -= 3;
          v111 = v112;
          if (v112)
          {
            *(v90 - 2) = v111;
            operator delete(v111);
          }
          v90 = v110;
        }
        while (v110 != v109);
      }
      *(_QWORD *)(v89 + 8) = v109;
    }
  }
  else
  {
    v94 = *(_QWORD *)(v89 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v94 - (uint64_t)v90) >> 3) >= v93)
    {
      bzero(*(void **)(v89 + 8), 24 * ((24 * v93 - 24) / 0x18) + 24);
      *(_QWORD *)(v89 + 8) = &v90[3 * ((24 * v93 - 24) / 0x18) + 3];
    }
    else
    {
      if (v88 > 0xAAAAAAAAAAAAAAALL)
        sub_20E867F44();
      v95 = 0xAAAAAAAAAAAAAAABLL * ((v94 - (uint64_t)v91) >> 3);
      v96 = 2 * v95;
      if (2 * v95 <= v88)
        v96 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v260 - (_QWORD)v259) >> 4);
      if (v95 >= 0x555555555555555)
        v97 = 0xAAAAAAAAAAAAAAALL;
      else
        v97 = v96;
      if (v97 > 0xAAAAAAAAAAAAAAALL)
        sub_20E877A38();
      v98 = (char *)operator new(24 * v97);
      v99 = &v98[24 * v92];
      v100 = &v98[24 * v97];
      v101 = 24 * ((24 * v93 - 24) / 0x18) + 24;
      bzero(v99, v101);
      v102 = &v99[v101];
      if (v90 == v91)
      {
        *(_QWORD *)v89 = v99;
        *(_QWORD *)(v89 + 8) = v102;
        *(_QWORD *)(v89 + 16) = v100;
      }
      else
      {
        do
        {
          v103 = v99;
          *((_QWORD *)v99 - 2) = 0;
          *((_QWORD *)v99 - 1) = 0;
          v104 = *(_OWORD *)(v90 - 3);
          v90 -= 3;
          *(_OWORD *)(v99 - 24) = v104;
          v99 -= 24;
          *((_QWORD *)v103 - 1) = v90[2];
          *v90 = 0;
          v90[1] = 0;
          v90[2] = 0;
        }
        while (v90 != v91);
        v90 = *(_QWORD **)v89;
        v105 = *(_QWORD **)(v89 + 8);
        *(_QWORD *)v89 = v99;
        *(_QWORD *)(v89 + 8) = v102;
        *(_QWORD *)(v89 + 16) = v100;
        if (v105 != v90)
        {
          v106 = v105;
          do
          {
            v108 = (void *)*(v106 - 3);
            v106 -= 3;
            v107 = v108;
            if (v108)
            {
              *(v105 - 2) = v107;
              operator delete(v107);
            }
            v105 = v106;
          }
          while (v106 != v90);
        }
      }
      if (v90)
        operator delete(v90);
    }
  }
  if (v86 != v87)
  {
    v113 = 0;
    v114 = 0;
    v115 = 0;
    if (v88 <= 1)
      v88 = 1;
    do
    {
      v117 = **(_QWORD **)(*(_QWORD *)(a1 + 5528) + 360);
      v118 = (_QWORD *)(v117 + v114);
      v120 = *(_BYTE **)((char *)v259 + v113 + 120);
      v119 = *(_BYTE **)((char *)v259 + v113 + 128);
      v121 = 0x8E38E38E38E38E39 * ((v119 - v120) >> 3);
      v122 = *(_QWORD *)(v117 + v114 + 16);
      v123 = *(char **)(v117 + v114);
      if (0x8E38E38E38E38E39 * ((v122 - (uint64_t)v123) >> 3) >= v121)
      {
        v129 = (_QWORD *)(v117 + 24 * v115 + 8);
        v131 = (_BYTE *)v118[1];
        v132 = v131 - v123;
        v133 = 0x8E38E38E38E38E39 * ((v131 - v123) >> 3);
        if (v133 < v121)
        {
          if (v131 != v123)
          {
            v134 = v123;
            v135 = *(_BYTE **)((char *)v259 + v113 + 128);
            memmove(v134, *(const void **)((char *)v259 + v113 + 120), v132);
            v119 = v135;
            v123 = (char *)v118[1];
          }
          v130 = &v120[72 * v133];
          v116 = v119 - v130;
          if (v119 == v130)
            goto LABEL_193;
          v127 = v123;
LABEL_211:
          v136 = v116;
LABEL_214:
          memmove(v127, v130, v136);
          goto LABEL_193;
        }
        if (v119 != v120)
        {
          v127 = v123;
          v130 = *(_BYTE **)((char *)v259 + v113 + 120);
          v116 = v119 - v120;
          v136 = v119 - v120;
          goto LABEL_214;
        }
        v116 = v119 - v120;
      }
      else
      {
        v255 = *(_BYTE **)((char *)v259 + v113 + 128);
        v258 = v119 - v120;
        if (v123)
        {
          *(_QWORD *)(v117 + v114 + 8) = v123;
          operator delete(v123);
          v122 = 0;
          *v118 = 0;
          v118[1] = 0;
          v118[2] = 0;
        }
        if (v121 > 0x38E38E38E38E38ELL)
          goto LABEL_412;
        v124 = 0x8E38E38E38E38E39 * (v122 >> 3);
        v125 = 2 * v124;
        if (2 * v124 <= v121)
          v125 = v121;
        v126 = v124 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v125;
        if (v126 > 0x38E38E38E38E38ELL)
LABEL_412:
          sub_20EB849AC();
        v127 = (char *)operator new(72 * v126);
        v123 = v127;
        *(_QWORD *)(v117 + v114) = v127;
        v128 = v117 + v114;
        *(_QWORD *)(v128 + 8) = v127;
        v129 = (_QWORD *)(v128 + 8);
        v118[2] = &v127[72 * v126];
        if (v255 != v120)
        {
          v130 = v120;
          v116 = v258;
          goto LABEL_211;
        }
        v116 = v258;
      }
LABEL_193:
      *v129 = &v123[v116];
      ++v115;
      v114 += 24;
      v113 += 240;
      --v88;
    }
    while (v88);
  }
  v137 = -286331153 * ((uint64_t)(v260 - (_QWORD)v259) >> 4);
  if (-286331153 * ((uint64_t)(v260 - (_QWORD)v259) >> 4))
  {
    if (*(_DWORD *)v259)
    {
LABEL_219:
      v138 = 126 - 2 * __clz(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v260 - (_QWORD)v259) >> 4));
      if ((void *)v260 == v259)
        v139 = 0;
      else
        v139 = v138;
      sub_20F00791C((void **)v259, (__int128 *)v260, v139, 1);
      v140 = -286331153 * (((_QWORD)v260 - (_QWORD)v259) >> 4);
      if ((_DWORD)v140)
      {
        if (*(_DWORD *)v259)
        {
LABEL_224:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FeatureContainer.cpp", 48, (uint64_t)"this->IsCameraIDAlignedAsIndex()", 32, (uint64_t)"camera_descriptor_stores's camera id is not aligned as index", 60, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        else
        {
          v144 = 0;
          v145 = (int *)((char *)v259 + 240);
          while (v140 - 1 != v144)
          {
            ++v144;
            v146 = *v145;
            v145 += 60;
            if (v144 != v146)
            {
              if (v144 < v140)
                goto LABEL_224;
              break;
            }
          }
        }
      }
    }
    else
    {
      v141 = 0;
      v142 = (int *)((char *)v259 + 240);
      while (v137 - 1 != v141)
      {
        ++v141;
        v143 = *v142;
        v142 += 60;
        if (v141 != v143)
        {
          if (v141 < v137)
            goto LABEL_219;
          break;
        }
      }
    }
  }
  __asm { FMOV            V1.2D, #0.5 }
  v150 = vdup_n_s32(*(_BYTE *)(a1 + 548) == 0);
  v151.i64[0] = v150.u32[0];
  v151.i64[1] = v150.u32[1];
  v152 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v151, 0x3FuLL)), *(int8x16_t *)(a1 + 552), (int8x16_t)vaddq_f64(*(float64x2_t *)(a1 + 552), _Q1));
  if (v152.f64[0] != 0.0 || v152.f64[1] != 0.0)
  {
    v156 = v259;
    v157 = (_QWORD *)v260;
    if (v259 != (void *)v260)
    {
      do
      {
        v158 = v156[3];
        for (j = v156[4]; v158 != j; v158 += 16)
        {
          v160 = *(float32x2_t **)(*(_QWORD *)v158 + 56);
          v161 = *(float32x2_t **)(*(_QWORD *)v158 + 64);
          while (v160 != v161)
          {
            *v160 = vcvt_f32_f64(vaddq_f64(v152, vcvtq_f64_f32(*v160)));
            v160 += 4;
          }
        }
        v156 += 30;
      }
      while (v156 != v157);
    }
  }
  v153 = *(_QWORD *)(a1 + 3416);
  if (!v153)
    sub_20E86D37C();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v153 + 48))(v153, &v259);
  v154 = **(_QWORD **)(a1 + 5528);
  if (v259 == (void *)v260)
  {
    v155 = *(double *)(v154 + 1280) + -1.0;
    if (v155 >= 0.0)
      goto LABEL_251;
  }
  else
  {
    v155 = *((double *)v259 + 1) + *(double *)(v154 + 1280);
    if (v155 >= 0.0)
      goto LABEL_251;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.hpp", 111, (uint64_t)"timestamp.timestamp() >= 0", 26, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_257;
  }
LABEL_251:
  v162 = *(double *)v154;
  if (*(double *)v154 >= 0.0)
  {
    if (v155 != v162)
    {
      v171 = v155 - v162;
      if (v155 < v162)
        v171 = v162 - v155;
      if (v171 > 0.00000001)
      {
        if (v155 >= v162)
          goto LABEL_252;
        sub_20F0192DC(v279);
        if (**(int **)(v279[0] + 56) > 5)
          goto LABEL_365;
        v172 = *(unsigned __int8 *)(v279[0] + 72);
        v173 = sub_20E8C31DC(v279[0], "OSLogSurrogateAppender", 1, 0);
        v174 = v173 ? v173 + 16 : 0;
        if (!v172 && !v173)
          goto LABEL_365;
        v261 = v279;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v263 = std::chrono::system_clock::now().__d_.__rep_;
        v264 = 5;
        v265 = "unknown file";
        v266 = 121;
        v268 = 0;
        v269 = 0;
        v267 = "unknown function";
        v175 = *v261;
        v176 = (uint64_t *)(*v261 + 16);
        if (*(char *)(*v261 + 39) < 0)
        {
          v178 = *(const char **)(v175 + 16);
          v177 = *(_QWORD *)(v175 + 24);
        }
        else
        {
          v177 = *(unsigned __int8 *)(*v261 + 39);
          v178 = (const char *)(*v261 + 16);
        }
        v241 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v241 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
          if ((_BYTE)v273 && SHIBYTE(v272[1]) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v242 = byte_254A4A4F8;
        else
          v242 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v243 = byte_254A4A4F8[23];
        else
          v243 = *(_QWORD *)&byte_254A4A4F8[8];
        object = os_log_create(v242, v178);
        v244 = v272;
        if (v243 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v243 >= 0x17)
        {
          v245 = (v243 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v243 | 7) != 0x17)
            v245 = v243 | 7;
          v246 = v245 + 1;
          v244 = operator new(v245 + 1);
          v272[1] = (void *)v243;
          *(_QWORD *)&v273 = v246 | 0x8000000000000000;
          v272[0] = v244;
        }
        else
        {
          BYTE7(v273) = v243;
          if (!v243)
          {
LABEL_388:
            *((_BYTE *)v244 + v243) = 0;
            BYTE8(v273) = 1;
            p_p = &__p;
            if (v177 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v177 >= 0x17)
            {
              v248 = (v177 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v177 | 7) != 0x17)
                v248 = v177 | 7;
              v249 = v248 + 1;
              p_p = operator new(v248 + 1);
              v275 = v177;
              v276 = v249 | 0x8000000000000000;
              __p = p_p;
            }
            else
            {
              HIBYTE(v276) = v177;
              if (!v177)
              {
LABEL_396:
                *((_BYTE *)p_p + v177) = 0;
                v277 = 1;
                v250 = object;
                if (SHIBYTE(v276) < 0)
                  operator delete(__p);
                if (BYTE8(v273) && SBYTE7(v273) < 0)
                  operator delete(v272[0]);
                if (object)
                  os_release(object);
                sub_20F01BA58(v174, v176, v250, OS_LOG_TYPE_ERROR);
                if (v172)
                {
                  sub_20E8C003C((uint64_t)&v261, "Frames are out of order");
                  sub_20E863570((uint64_t)&v261);
                }
                sub_20E863570((uint64_t)&v261);
                v235 = v269;
                if (v269)
                {
                  p_shared_owners = (unint64_t *)&v269->__shared_owners_;
                  do
                    v237 = __ldaxr(p_shared_owners);
                  while (__stlxr(v237 - 1, p_shared_owners));
                  goto LABEL_363;
                }
                goto LABEL_365;
              }
            }
            memmove(p_p, v178, v177);
            goto LABEL_396;
          }
        }
        memmove(v244, v242, v243);
        goto LABEL_388;
      }
    }
    sub_20F0192DC(&v270);
    if (**(int **)(v270 + 56) > 5)
      goto LABEL_365;
    v179 = *(unsigned __int8 *)(v270 + 72);
    v180 = sub_20E8C31DC(v270, "OSLogSurrogateAppender", 1, 0);
    v181 = v180;
    if (!v179 && !v180)
      goto LABEL_365;
    v261 = &v270;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v263 = std::chrono::system_clock::now().__d_.__rep_;
    v264 = 5;
    v265 = "unknown file";
    v266 = 116;
    v268 = 0;
    v269 = 0;
    v267 = "unknown function";
    v182 = *v261;
    v183 = *v261 + 16;
    if (*(char *)(*v261 + 39) < 0)
    {
      v185 = *(const char **)(v182 + 16);
      v184 = *(_QWORD *)(v182 + 24);
      v188 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v188 & 1) != 0)
        goto LABEL_281;
    }
    else
    {
      v184 = *(unsigned __int8 *)(*v261 + 39);
      v185 = (const char *)(*v261 + 16);
      v186 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v186 & 1) != 0)
        goto LABEL_281;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v273 && SHIBYTE(v272[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_281:
    if (byte_254A4A4F8[23] >= 0)
      v189 = byte_254A4A4F8;
    else
      v189 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v190 = byte_254A4A4F8[23];
    else
      v190 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v189, v185);
    v191 = v272;
    if (v190 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v190 >= 0x17)
    {
      v192 = v181;
      v193 = v185;
      v194 = v182;
      v195 = v179;
      v196 = v183;
      v197 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v190 | 7) != 0x17)
        v197 = v190 | 7;
      v198 = v197 + 1;
      v191 = operator new(v197 + 1);
      v272[1] = (void *)v190;
      *(_QWORD *)&v273 = v198 | 0x8000000000000000;
      v272[0] = v191;
      v183 = v196;
      v179 = v195;
      v182 = v194;
      v185 = v193;
      v181 = v192;
    }
    else
    {
      BYTE7(v273) = v190;
      if (!v190)
      {
LABEL_295:
        *((_BYTE *)v191 + v190) = 0;
        BYTE8(v273) = 1;
        v199 = &__p;
        if (v184 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v184 >= 0x17)
        {
          v200 = (v184 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v184 | 7) != 0x17)
            v200 = v184 | 7;
          v201 = v200 + 1;
          v199 = operator new(v200 + 1);
          v275 = v184;
          v276 = v201 | 0x8000000000000000;
          __p = v199;
        }
        else
        {
          HIBYTE(v276) = v184;
          if (!v184)
          {
LABEL_303:
            *((_BYTE *)v199 + v184) = 0;
            v277 = 1;
            v202 = object;
            if (SHIBYTE(v276) < 0)
              operator delete(__p);
            if (BYTE8(v273) && SBYTE7(v273) < 0)
              operator delete(v272[0]);
            if (object)
              os_release(object);
            if (v181 && *(_QWORD *)(v181 + 24))
            {
              v203 = _os_log_pack_size();
              v204 = (std::__shared_weak_count_vtbl *)operator new(v203, (std::align_val_t)8uLL);
              v205 = (std::__shared_weak_count *)operator new();
              v206 = v205;
              v205->__shared_owners_ = 0;
              v207 = (unint64_t *)&v205->__shared_owners_;
              v205->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v205->__shared_weak_owners_ = 0;
              v205[1].__vftable = v204;
              object = v204;
              v272[0] = v204;
              v272[1] = v205;
              do
                v208 = __ldxr(v207);
              while (__stxr(v208 + 1, v207));
              v273 = 0uLL;
              __p = 0;
              do
                v209 = __ldaxr(v207);
              while (__stlxr(v209 - 1, v207));
              if (!v209)
              {
                ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                std::__shared_weak_count::__release_weak(v206);
              }
              v210 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v211 = operator new();
              v212 = *(unsigned __int8 *)(v182 + 39);
              if ((v212 & 0x80u) == 0)
                v213 = v183;
              else
                v213 = *(_QWORD *)(v182 + 16);
              if ((v212 & 0x80u) != 0)
                v212 = *(_QWORD *)(v182 + 24);
              *(_QWORD *)v211 = v210;
              *(_OWORD *)(v211 + 8) = *(_OWORD *)v272;
              v272[0] = 0;
              v272[1] = 0;
              *(_OWORD *)(v211 + 24) = v273;
              v273 = 0uLL;
              *(_QWORD *)(v211 + 40) = v213;
              *(_QWORD *)(v211 + 48) = v212;
              *(_BYTE *)(v211 + 56) = 16;
              v278 = 0;
              v279[0] = v211;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v181 + 24) + 40))(*(_QWORD *)(v181 + 24), v279);
              v214 = v279[0];
              v279[0] = 0;
              if (v214)
              {
                v215 = *(std::__shared_weak_count **)(v214 + 32);
                if (v215)
                {
                  v216 = (unint64_t *)&v215->__shared_owners_;
                  do
                    v217 = __ldaxr(v216);
                  while (__stlxr(v217 - 1, v216));
                  if (!v217)
                  {
                    ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                    std::__shared_weak_count::__release_weak(v215);
                  }
                }
                v218 = *(std::__shared_weak_count **)(v214 + 16);
                if (v218)
                {
                  v219 = (unint64_t *)&v218->__shared_owners_;
                  do
                    v220 = __ldaxr(v219);
                  while (__stlxr(v220 - 1, v219));
                  if (!v220)
                  {
                    ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                    std::__shared_weak_count::__release_weak(v218);
                  }
                }
                MEMORY[0x212BC6398](v214, 0x10F0C40B62ED6C6);
                v221 = v278;
                v278 = 0;
                if (v221)
                {
                  v222 = *(std::__shared_weak_count **)(v221 + 32);
                  if (v222)
                  {
                    v223 = (unint64_t *)&v222->__shared_owners_;
                    do
                      v224 = __ldaxr(v223);
                    while (__stlxr(v224 - 1, v223));
                    if (!v224)
                    {
                      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                      std::__shared_weak_count::__release_weak(v222);
                    }
                  }
                  v225 = *(std::__shared_weak_count **)(v221 + 16);
                  if (v225)
                  {
                    v226 = (unint64_t *)&v225->__shared_owners_;
                    do
                      v227 = __ldaxr(v226);
                    while (__stlxr(v227 - 1, v226));
                    if (!v227)
                    {
                      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                      std::__shared_weak_count::__release_weak(v225);
                    }
                  }
                  MEMORY[0x212BC6398](v221, 0x10F0C40B62ED6C6);
                }
              }
              v228 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
              if (*((_QWORD *)&v273 + 1))
              {
                v229 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
                do
                  v230 = __ldaxr(v229);
                while (__stlxr(v230 - 1, v229));
                if (!v230)
                {
                  ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                  std::__shared_weak_count::__release_weak(v228);
                }
              }
              v231 = (std::__shared_weak_count *)v272[1];
              if (v272[1])
              {
                v232 = (unint64_t *)((char *)v272[1] + 8);
                do
                  v233 = __ldaxr(v232);
                while (__stlxr(v233 - 1, v232));
                if (!v233)
                {
                  ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                  std::__shared_weak_count::__release_weak(v231);
                }
              }
            }
            else
            {
              os_log_type_enabled(v202, OS_LOG_TYPE_ERROR);
              LOWORD(object) = 0;
              v234 = (void *)_os_log_send_and_compose_impl();
              if (v234)
                free(v234);
            }
            if (v179)
            {
              sub_20E8C003C((uint64_t)&v261, "Frames are duplicated");
              sub_20E863570((uint64_t)&v261);
            }
            sub_20E863570((uint64_t)&v261);
            v235 = v269;
            if (v269)
            {
              v236 = (unint64_t *)&v269->__shared_owners_;
              do
                v237 = __ldaxr(v236);
              while (__stlxr(v237 - 1, v236));
LABEL_363:
              if (!v237)
              {
                ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                std::__shared_weak_count::__release_weak(v235);
              }
            }
LABEL_365:
            if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FeatureProcessingInterface.cpp", 601, (uint64_t)"ret", 3, (uint64_t)"imu_features_syncer_ failed to process camera measurement", 57, (void (*)(void **))sub_21023DDB0))goto LABEL_366;
LABEL_257:
            abort();
          }
        }
        memmove(v199, v185, v184);
        goto LABEL_303;
      }
    }
    memmove(v191, v189, v190);
    goto LABEL_295;
  }
LABEL_252:
  sub_20F0193D0((_QWORD *)v154);
  v163 = (char *)operator new(0x28uLL);
  v164 = (double *)v259;
  *((_QWORD *)v163 + 2) = v259;
  v165 = (double *)v260;
  *(_OWORD *)(v163 + 24) = v260;
  v260 = 0uLL;
  v166 = *(_QWORD *)(v154 + 64);
  v259 = 0;
  *(_QWORD *)v163 = v166;
  *((_QWORD *)v163 + 1) = v154 + 64;
  *(_QWORD *)(v166 + 8) = v163;
  *(_QWORD *)(v154 + 64) = v163;
  ++*(_QWORD *)(v154 + 80);
  v167 = v165;
  v168 = 0.0;
  v169 = -1.0;
  if (v164 != v165)
  {
    v170 = *(_QWORD *)(v154 + 1280);
    do
    {
      if (v164[1] < 0.0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/FeatureContainer.h", 200, (uint64_t)"c_store.timestamp_info.original_timestamp() >= 0", 48, (uint64_t)"Error the original timestamp is not set", 39, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_257;
      }
      *((_QWORD *)v164 + 2) = v170;
      v164 += 30;
    }
    while (v164 != v167);
    v187 = *((_QWORD *)v163 + 2);
    if (v187 != *((_QWORD *)v163 + 3))
    {
      v169 = *(double *)(v187 + 8);
      v168 = *(double *)(v187 + 16);
    }
  }
  *(double *)v154 = v169 + v168;
LABEL_366:
  v238 = v259;
  if (v259)
  {
    v239 = v260;
    v240 = v259;
    if ((void *)v260 != v259)
    {
      do
      {
        v239 -= 240;
        sub_20E990F68(v239);
      }
      while ((void *)v239 != v238);
      v240 = v259;
    }
    *(_QWORD *)&v260 = v238;
    operator delete(v240);
  }
}

void sub_20F015218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a19);
  sub_20ED2894C(&a16);
  _Unwind_Resume(a1);
}

void sub_20F015270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, void *);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20E863714((uint64_t)va1);
  sub_20ED2894C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F01528C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, void *);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20E863714((uint64_t)va1);
  sub_20ED2894C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F0152A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a36 && a35 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a19);
  sub_20ED2894C(&a16);
  _Unwind_Resume(a1);
}

void sub_20F0153F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20ED2894C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F015404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20ED2894C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F015418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20ED2894C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F01542C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20ED2894C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F015440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20ED2894C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F015454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20ED2894C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F015468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20ED2894C((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F01547C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20EAFA1EC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F015490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20EAFA1EC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_20F0154A4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 5528) + 296;
}

_QWORD *sub_20F0154B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64_t a3@<D0>, double a4@<D1>)
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *result;
  int32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v23;
  __int128 v25;
  int64x2_t v26;
  __int128 v27;
  float64x2_t v28;
  __int128 v29;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  __int128 v44;
  char v45;
  int64x2_t v46;
  __int128 v47;
  float64x2_t v48;
  __int128 v49;
  float64x2_t v50;
  __int128 v51;
  float64x2_t v52;
  __int128 v53;
  char v54;
  int8x16_t v55[17];
  unsigned __int8 v56;
  double v57;

  *(float64_t *)v46.i64 = a3;
  v5 = *(_QWORD *)(a1 + 3448);
  if (!v5
    || ((*(void (**)(int8x16_t *__return_ptr, uint64_t, int64x2_t *))(*(_QWORD *)v5 + 48))(v55, v5, &v46),
        v57 = a4,
        (v8 = *(_QWORD *)(a1 + 3448)) == 0))
  {
    sub_20E86D37C();
  }
  result = (*(_QWORD *(**)(int64x2_t *__return_ptr, uint64_t, double *))(*(_QWORD *)v8 + 48))(&v46, v8, &v57);
  if (v54 && v56)
  {
    v10.i32[0] = 0;
    v11.i32[0] = v56;
    v12 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v11, v10), 0);
    v13 = (float64x2_t)vbicq_s8(v55[7], v12);
    v14 = (float64x2_t)vbicq_s8(v55[6], v12);
    v15 = (float64x2_t)vbicq_s8(v55[5], v12);
    v16 = (float64x2_t)vbicq_s8(v55[4], v12);
    v17 = (float64x2_t)vbicq_s8(v55[3], v12);
    v18 = (float64x2_t)vbicq_s8(v55[2], v12);
    v19 = (float64x2_t)vbicq_s8(v55[1], v12);
    v20 = (float64x2_t)vbicq_s8(v55[0], v12);
    _D18 = v53;
    _D16 = v51;
    *(_QWORD *)&v23.f64[0] = v47;
    _V19.D[1] = v52.f64[1];
    v25 = v51;
    v26 = v46;
    v27 = v47;
    *(_QWORD *)&v23.f64[1] = v49;
    v28 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v46, (int64x2_t)v48), vnegq_f64(v52).f64[0]), (float64x2_t)vzip2q_s64(v46, (int64x2_t)v48), v52, 1), v23, *(double *)&v53, 0);
    v29 = v49;
    _D31 = v50.f64[1];
    __asm
    {
      FMLS            D22, D31, V19.D[1]
      FMLS            D22, D16, V18.D[0]
    }
    v37 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v20, *(double *)v46.i64), v18, v48.f64[0]), v16, v50.f64[0]), (float64x2_t)0, v14);
    v38 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v19, *(double *)v46.i64), v17, v48.f64[0]), v15, v50.f64[0]), (float64x2_t)0, v13);
    v39 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v20, (float64x2_t)v46, 1), v18, v48, 1), v16, v50, 1), (float64x2_t)0, v14);
    v40 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v19, (float64x2_t)v46, 1), v17, v48, 1), v15, v50, 1), (float64x2_t)0, v13);
    v41 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v20, *(double *)&v47), v18, *(double *)&v49), v16, *(double *)&v51), (float64x2_t)0, v14);
    v42 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v19, *(double *)&v47), v17, *(double *)&v49), v15, *(double *)&v51), (float64x2_t)0, v13);
    v43 = vaddq_f64(v14, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v28.f64[0]), v18, v28, 1), v16, _D22));
    *(float64x2_t *)(a2 + 192) = v50;
    *(_OWORD *)(a2 + 208) = v25;
    v44 = v53;
    *(float64x2_t *)(a2 + 224) = v52;
    *(_OWORD *)(a2 + 240) = v44;
    *(int64x2_t *)(a2 + 128) = v26;
    *(_OWORD *)(a2 + 144) = v27;
    *(float64x2_t *)(a2 + 160) = v48;
    *(_OWORD *)(a2 + 176) = v29;
    *(float64x2_t *)a2 = v37;
    *(float64x2_t *)(a2 + 16) = v38;
    *(float64x2_t *)(a2 + 32) = v39;
    *(float64x2_t *)(a2 + 48) = v40;
    *(float64x2_t *)(a2 + 64) = v41;
    *(float64x2_t *)(a2 + 80) = v42;
    *(float64x2_t *)(a2 + 96) = v43;
    *(float64x2_t *)(a2 + 112) = vaddq_f64(v13, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v28.f64[0]), v17, v28, 1), v15, _D22));
    v45 = 1;
  }
  else
  {
    v45 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 256) = v45;
  return result;
}

uint64_t sub_20F0156D4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13[9];

  v2 = *(_QWORD *)(result + 5528);
  v3 = *(_QWORD *)(v2 + 32);
  for (i = *(_QWORD *)(v2 + 40); v3 != i; v3 += 8)
  {
    v6 = *(_QWORD **)v3;
    if (*(unsigned __int8 *)(*(_QWORD *)v3 + 172) == *(unsigned __int8 *)(a2 + 8))
    {
      v7 = v6[15] + 144 * v6[19];
      sub_20EE67EC0((uint64_t)v13, (__int128 *)a2);
      sub_20F0EB0B8(v7, v13);
      result = sub_20E991850((uint64_t)v13);
      v8 = 0x8E38E38E38E38E39 * ((uint64_t)(v6[16] - v6[15]) >> 4);
      v9 = v6[20];
      v10 = v6[19] + 1;
      if (v10 >= v8)
        v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v6[16] - v6[15]) >> 4);
      else
        v11 = 0;
      v6[19] = v10 - v11;
      if (v9 == v8)
      {
        v12 = v6[18] + 1;
        if (v12 < v8)
          v8 = 0;
        v6[18] = v12 - v8;
      }
      else
      {
        v6[20] = v9 + 1;
      }
    }
  }
  return result;
}

uint64_t sub_20F0157D8(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(result + 5528);
  if (*((_BYTE *)a2 + 16))
  {
    if (*(_DWORD *)(*(_QWORD *)(v2 + 288) + 736) == *((_DWORD *)a2 + 3))
    {
      v3 = *a2;
      *(_BYTE *)(v2 + 472) = *((_BYTE *)a2 + 16);
      *(_OWORD *)(v2 + 456) = v3;
    }
  }
  else if (*(_BYTE *)(v2 + 472))
  {
    *(_BYTE *)(v2 + 472) = 0;
  }
  return result;
}

BOOL sub_20F015820(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 5528);
  return *(_BYTE *)(v1 + 472) && *(double *)(v1 + 456) < *(double *)(*(_QWORD *)(v1 + 288) + 744);
}

uint64_t sub_20F01584C(uint64_t result, double a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(result + 5528);
  v4 = *v3;
  if (*(double *)(*v3 + 32) != a2)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.h", 165, (uint64_t)"ExactlyEqual(skipped_frame_org_timestamp, last_processed_org_timestamp_)", 72, (uint64_t)"The skipping frame timestamp should be the same as the latest processed timestamp.", 82, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      abort();
  }
  *(double *)(v4 + 8) = a2;
  return result;
}

uint64_t sub_20F0158C0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = *(_QWORD **)(a1 + 5528);
  if (*(_BYTE *)(v1[36] + 671))
  {
    v2 = v1 + 55;
    if (!v1[55]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FeatureProcessingInterface.cpp", 252, (uint64_t)"visual_slam_camera_allocator_", 29, (uint64_t)"Visual SLAM camera allocator does not exist", 43, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_8;
    }
  }
  else
  {
    v2 = v1 + 56;
    if (!v1[56]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FeatureProcessingInterface.cpp", 256, (uint64_t)"regular_slam_camera_allocator_", 30, (uint64_t)"Regular SLAM camera allocator does not exist", 44, (void (*)(void **))sub_21023DDB0))
    {
LABEL_8:
      abort();
    }
  }
  return *v2 + 144;
}

uint64_t sub_20F015978(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v11;
  double *v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float64x2_t v23;
  float64x2_t v24;
  int8x16_t v25;
  float64x2_t v28;
  unint64_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  int8x16_t v45;
  float64_t v46;
  unint64_t v47;
  float64x2_t v48;
  double *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  int v63;
  __int128 v64;
  _OWORD *v65;
  _OWORD *v66;
  void **v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  void **v73;
  void **v74;
  void *v75;
  uint64_t v76;
  uint64_t result;
  _BYTE *v78;
  uint64_t *v79;
  double v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  _QWORD *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  unsigned int *i;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  void *__p;
  void **v106;
  _OWORD *v107;
  __int128 v108[7];
  double v109;
  uint64_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  int v119;
  char v120;
  double v121;
  char v122;
  int v123;
  __int128 v124;
  __int128 v125;
  _OWORD v126[6];
  _BYTE v127[25];
  __int128 __src;
  uint64_t v129;
  char v130;
  uint64_t v131;

  v1 = a1;
  v131 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 5528);
  v104 = *(_QWORD *)(v2 + 32);
  v100 = *(_QWORD *)(v2 + 40);
  if (v104 != v100)
  {
    while (1)
    {
      v3 = *(_QWORD **)v104;
      if (!*(_QWORD *)(*(_QWORD *)v104 + 160))
        goto LABEL_3;
      v4 = *(_QWORD *)(a1 + 5528);
      v5 = *(_QWORD *)(v4 + 288);
      if (!*(_BYTE *)(v5 + 5520))
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/FeatureProcessingInterfaceBase.h", 247, (uint64_t)"opt_sensor_model_", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
        v6 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v7 = qword_254A6DE40;
          v8 = qword_254A6DE48;
          while (v7 != v8)
          {
            v10 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v7;
            v9 = *(_QWORD *)(v7 + 8);
            v7 += 16;
            v10(v9, "opt_sensor_model_", 17, "", 0);
          }
        }
        v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_125;
        qword_254A6DE58(unk_254A6DE60, "opt_sensor_model_", 17, "", 0);
        if (!*(_BYTE *)(v5 + 5520))
          sub_20E866B34();
      }
      if (!*(_BYTE *)(v5 + 5208) || !*(_QWORD *)(v5 + 3448) || !*(_QWORD *)(v5 + 3512))
        goto LABEL_3;
      kdebug_trace();
      if (v3[20])
        v12 = (double *)(v3[15] + 144 * v3[18]);
      else
        v12 = 0;
      v13 = *v12;
      v14 = *(_QWORD *)(v4 + 288);
      if (!*(_BYTE *)(v14 + 5520))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/FeatureProcessingInterfaceBase.h", 247, (uint64_t)"opt_sensor_model_", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (!*(_BYTE *)(v14 + 5520))
          sub_20E866B34();
      }
      v15 = v13 + *(double *)(v14 + 5104);
      *(double *)&v124 = v15;
      v16 = *(_QWORD *)(v5 + 3448);
      if (!v16)
        sub_20E86D37C();
      (*(void (**)(float64x2_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v16 + 48))(&v111, v16, &v124);
      if (v122)
      {
        if (v15 < v121)
          break;
      }
      if (v120)
      {
        v19 = *(_QWORD *)(v4 + 288) + 3544;
        if (!*(_BYTE *)(v19 + 1976))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/FeatureProcessingInterfaceBase.h", 247, (uint64_t)"opt_sensor_model_", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          if (!*(_BYTE *)(v19 + 1976))
            sub_20E866B34();
        }
        _Q0.f64[0] = *(float64_t *)(v19 + 16);
        _Q3 = *(float64x2_t *)(v19 + 24);
        _D16 = *(_QWORD *)(v19 + 64);
        v23 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v19, (int64x2_t)_Q3);
        v24 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v19, (int64x2_t)_Q3);
        _Q0.f64[1] = *(float64_t *)(v19 + 40);
        v25 = vextq_s8((int8x16_t)v24, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)(v19 + 48), 1), 8uLL);
        _D5 = *(double *)(v19 + 88);
        _Q17 = *(float64x2_t *)(v19 + 72);
        v28 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v23, vnegq_f64(_Q17).f64[0]), v24, _Q17, 1), _Q0, _D5, 0);
        _D18 = *(_QWORD *)(v19 + 56);
        __asm
        {
          FMLS            D3, D18, V17.D[1]
          FMLS            D3, D16, V5.D[0]
        }
        v34 = *(_QWORD *)(v19 + 48);
        *(_QWORD *)&v24.f64[1] = v25.i64[0];
        v25.i64[0] = _D16;
        _Q3.f64[1] = 1.0;
        v35 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v111.f64[0]), v24, v111, 1), _Q0, v112.f64[0]), v28, v112, 1);
        v36 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v34, v111.f64[0]), (float64x2_t)v25.u64[1], v111, 1), (float64x2_t)(unint64_t)_D16, v112.f64[0]), _Q3, v112, 1);
        v37 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v113.f64[0]), v24, v113, 1), _Q0, v114.f64[0]), v28, v114, 1);
        v38 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v34, v113.f64[0]), (float64x2_t)v25.u64[1], v113, 1), (float64x2_t)v25.u64[0], v114.f64[0]), _Q3, v114, 1);
        _Q18 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v115.f64[0]), v24, v115, 1), _Q0, v116.f64[0]), v28, v116, 1);
        *(_QWORD *)&v40 = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v34, v115.f64[0]), (float64x2_t)v25.u64[1], v115, 1), (float64x2_t)v25.u64[0], v116.f64[0]), _Q3, v116, 1);
        v41 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v117.f64[0]), v24, v117, 1), _Q0, v118.f64[0]), v28, v118, 1);
        *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v34, v117.f64[0]), (float64x2_t)v25.u64[1], v117, 1), (float64x2_t)v25.u64[0], v118.f64[0]), _Q3, v118, 1);
        v42 = (float64x2_t)vzip1q_s64(v35, v37);
        v43 = (float64x2_t)vzip2q_s64(v35, v37);
        v44 = (float64x2_t)vzip1q_s64(v36, v38);
        v45 = vextq_s8((int8x16_t)v43, (int8x16_t)vdupq_laneq_s64(_Q18, 1), 8uLL);
        v46 = _Q0.f64[0];
        v47 = *(_QWORD *)&v41.f64[1] ^ 0x8000000000000000;
        v48 = vmlaq_f64(vmlaq_f64(vmulq_f64(v42, (float64x2_t)vdupq_n_s64(*(_QWORD *)&v41.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&v41.f64[1] ^ 0x8000000000000000), v43), (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q0.f64[0] ^ 0x8000000000000000), v44);
        _D6 = v47;
        __asm { FMLA            D0, D6, V18.D[1] }
        *(_QWORD *)&v43.f64[1] = v45.i64[0];
        v108[1] = _Q18.u64[0];
        v108[0] = (__int128)v42;
        v108[5] = *(unint64_t *)&v40;
        v108[4] = (__int128)v44;
        v108[3] = v45.u64[1];
        v108[2] = (__int128)v43;
        v108[6] = (__int128)v48;
        v109 = vmlad_n_f64(_Q0.f64[0], COERCE_DOUBLE(*(_QWORD *)&v46 ^ 0x8000000000000000), v40);
        v110 = 0x3FF0000000000000;
        if (v3[20])
          v50 = (double *)(v3[15] + 144 * v3[18]);
        else
          v50 = 0;
        if (sub_20F0E8C5C((uint64_t)v3, &v119, v108, *v50) && v3[14])
        {
          kdebug_trace();
          v52 = v3[13];
          if (v52)
          {
            v53 = v3[9] + 272 * v52;
            v101 = v53 - 272;
            if (!*(_BYTE *)(v53 - 136))
              goto LABEL_72;
          }
          else
          {
            v54 = v3[9] + 16 * ((uint64_t)(v3[10] - v3[9]) >> 4);
            v101 = v54 - 272;
            if (!*(_BYTE *)(v54 - 136))
              goto LABEL_72;
          }
          v56 = *(_QWORD *)(v101 + 112);
          v55 = *(_QWORD *)(v101 + 120);
          v103 = v55;
          while (v56 != v55)
          {
            if (!*(_BYTE *)(v56 + 152)
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FeatureProcessingInterface.cpp", 320, (uint64_t)"prev_attached_plane.attached_state_id", 37, (uint64_t)"State ID not set", 16, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v57 = *(_OWORD *)(v56 + 16);
            v124 = *(_OWORD *)v56;
            v125 = v57;
            v58 = *(_OWORD *)(v56 + 32);
            *(_QWORD *)&v126[1] = *(_QWORD *)(v56 + 48);
            v126[0] = v58;
            *((_QWORD *)&v126[1] + 1) = *(_QWORD *)(v56 + 56);
            v59 = *(_QWORD *)(v56 + 80);
            v126[2] = *(_OWORD *)(v56 + 64);
            *(_QWORD *)&v126[3] = v59;
            v60 = *(_QWORD *)(v56 + 104);
            *(_OWORD *)((char *)&v126[3] + 8) = *(_OWORD *)(v56 + 88);
            *((_QWORD *)&v126[4] + 1) = v60;
            v61 = *(_OWORD *)(v56 + 112);
            v62 = *(_OWORD *)(v56 + 128);
            *(_OWORD *)&v127[9] = *(_OWORD *)(v56 + 137);
            v126[5] = v61;
            *(_OWORD *)v127 = v62;
            LOBYTE(__src) = 0;
            v130 = 0;
            v63 = *(unsigned __int8 *)(v56 + 184);
            if (*(_BYTE *)(v56 + 184))
            {
              if (*(char *)(v56 + 183) < 0)
              {
                sub_20E860C04(&__src, *(void **)(v56 + 160), *(_QWORD *)(v56 + 168));
              }
              else
              {
                v64 = *(_OWORD *)(v56 + 160);
                v129 = *(_QWORD *)(v56 + 176);
                __src = v64;
              }
              v130 = 1;
            }
            __p = 0;
            v106 = 0;
            v107 = 0;
            v65 = operator new(0xC0uLL);
            v66 = v65;
            __p = v65;
            v106 = (void **)v65;
            v67 = (void **)(v65 + 12);
            v107 = v65 + 12;
            v68 = v125;
            *v65 = v124;
            v65[1] = v68;
            v65[2] = v126[0];
            v65[3] = v126[1];
            *((_QWORD *)v65 + 10) = *(_QWORD *)&v126[3];
            v65[4] = v126[2];
            v69 = *(_OWORD *)((char *)&v126[3] + 8);
            v70 = *((_QWORD *)&v126[4] + 1);
            *((_BYTE *)v65 + 160) = 0;
            *((_QWORD *)v65 + 13) = v70;
            *(_OWORD *)((char *)v65 + 88) = v69;
            v71 = *(_OWORD *)v127;
            v65[7] = v126[5];
            v65[8] = v71;
            *(_OWORD *)((char *)v65 + 137) = *(_OWORD *)&v127[9];
            *((_BYTE *)v65 + 184) = 0;
            if (v63)
            {
              if (SHIBYTE(v129) < 0)
              {
                sub_20E860C04((_BYTE *)v65 + 160, (void *)__src, *((unint64_t *)&__src + 1));
              }
              else
              {
                v65[10] = __src;
                *((_QWORD *)v65 + 22) = v129;
              }
              *((_BYTE *)v66 + 184) = 1;
            }
            v106 = v67;
            v123 = *(_DWORD *)(v56 + 144);
            v72 = *(_QWORD *)(v5 + 3512);
            if (!v72)
              sub_20E86D37C();
            (*(void (**)(uint64_t, void **, int *))(*(_QWORD *)v72 + 48))(v72, &__p, &v123);
            v73 = (void **)__p;
            if (__p)
            {
              v74 = v106;
              v75 = __p;
              if (v106 != __p)
              {
                do
                {
                  if (*((_BYTE *)v74 - 8) && *((char *)v74 - 9) < 0)
                    operator delete(*(v74 - 4));
                  v74 -= 24;
                }
                while (v74 != v73);
                v75 = __p;
              }
              v106 = v73;
              operator delete(v75);
            }
            if (v130 && SHIBYTE(v129) < 0)
              operator delete((void *)__src);
            v56 += 192;
            v55 = v103;
          }
LABEL_72:
          LODWORD(v124) = *(_DWORD *)(v101 + 24);
          v76 = *(_QWORD *)(v5 + 3512);
          if (!v76)
            sub_20E86D37C();
          (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v76 + 48))(v76, v101 + 88, &v124);
        }
LABEL_74:
        v51 = 1;
        goto LABEL_75;
      }
      v51 = 0;
LABEL_75:
      kdebug_trace();
      if ((v51 & 1) == 0)
      {
LABEL_3:
        v104 += 8;
        if (v104 == v100)
        {
          v1 = a1;
          v2 = *(_QWORD *)(a1 + 5528);
          goto LABEL_82;
        }
      }
    }
    *(_QWORD *)&v124 = 0x7FF8000000000000;
    BYTE8(v124) = -1;
    LOBYTE(v125) = 0;
    LOBYTE(v126[0]) = 0;
    v127[8] = 0;
    *(_OWORD *)((char *)v126 + 8) = 0u;
    memset((char *)&v126[1] + 8, 0, 32);
    memset((char *)&v126[3] + 8, 0, 25);
    sub_20F0EB0B8(v3[15] + 144 * v3[18], &v124);
    sub_20E991850((uint64_t)&v124);
    v17 = 0x8E38E38E38E38E39 * ((uint64_t)(v3[16] - v3[15]) >> 4);
    v18 = v3[18] + 1;
    if (v18 < v17)
      v17 = 0;
    v3[18] = v18 - v17;
    --v3[20];
    goto LABEL_74;
  }
LABEL_82:
  *(_BYTE *)(v2 + 352) = 0;
  result = sub_20F0168E4(*(_QWORD *)v2);
  if ((result & 1) == 0)
    return result;
  v78 = *(_BYTE **)(v1 + 5528);
  v78[352] = 1;
  v79 = *(uint64_t **)v78;
  v80 = *(double *)(*(_QWORD *)v78 + 40);
  sub_20F0106A4(&v111);
  v81 = (uint64_t *)(v1 + 5528);
  v82 = v79 + 36;
  v83 = *v81;
  if (v79[36] == v79[37]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FeatureProcessingInterface.cpp", 166, (uint64_t)"!imu_measurements.empty()", 25, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_125;
  }
  v84 = v79 + 39;
  v85 = v79[39];
  if (v85 != v79[40])
    goto LABEL_88;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FeatureProcessingInterface.cpp", 167, (uint64_t)"!cameras_features.camera_descriptor_stores.empty()", 50, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_125:
    abort();
  }
  v85 = *v84;
LABEL_88:
  v86 = *(double *)(v85 + 8);
  v87 = *(_QWORD *)(v83 + 256);
  v111.f64[0] = v80;
  LOBYTE(v111.f64[1]) = 1;
  v89 = sub_20F1082E4(v87, v111.f64, *(_DWORD *)(v83 + 432), v86);
  *(_QWORD *)&v124 = v89;
  if (!*(_BYTE *)(*(_QWORD *)(v83 + 288) + 735))
  {
    if ((uint64_t *)(v83 + 232) != v82)
      sub_20EE62A1C((char **)(v83 + 232), v79[36], v79[37], 0x6DB6DB6DB6DB6DB7 * ((v79[37] - v79[36]) >> 3));
    goto LABEL_106;
  }
  v90 = *(_DWORD *)(v83 + 432);
  v91 = (_QWORD *)(v83 + 160);
  if (!*(_QWORD *)(v83 + 200))
    goto LABEL_97;
  v92 = *(_QWORD *)(v83 + 192);
  if (v92)
  {
    if (*(_DWORD *)(*v91 + 32 * v92 - 32) < v90)
      goto LABEL_97;
  }
  else if (*(_DWORD *)(*(_QWORD *)(v83 + 160)
                      + 32 * ((uint64_t)(*(_QWORD *)(v83 + 168) - *(_QWORD *)(v83 + 160)) >> 5)
                      - 32) < v90)
  {
    goto LABEL_97;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FeatureProcessingInterface.cpp", 221, (uint64_t)"imu_sample_buffer_.NumBufferedIMUStates() == 0u || incoming_state_id > imu_sample_buffer_.imu_samples_info_vec().back().state_id", 128, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_97:
  if ((v89 & 0xFF00000000) == 0)
    goto LABEL_105;
  while (1)
  {
    v94 = *(_QWORD *)(v83 + 192);
    if (v94)
      break;
    v93 = *(_DWORD *)(*(_QWORD *)(v83 + 168) - 32);
    if (v93 <= v89)
      goto LABEL_103;
LABEL_100:
    sub_20FD33228((uint64_t *)(v83 + 160));
  }
  v93 = *(_DWORD *)(*v91 + 32 * v94 - 32);
  if (v93 > v89)
    goto LABEL_100;
LABEL_103:
  if (v93 != (_DWORD)v89
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FeatureProcessingInterface.cpp", 230, (uint64_t)"static_cast<uint32_t>(*ref_state_id_opt) == imu_sample_buffer_.imu_samples_info_vec().back().state_id", 101, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_105:
  sub_20FD32E5C(v83 + 160, v82, v90);
  sub_20FD33470((_QWORD *)(v83 + 160), v83 + 232, v80, v86);
LABEL_106:
  v95 = *(_QWORD *)(v83 + 288);
  if (!*(_BYTE *)(v95 + 735))
    goto LABEL_111;
  if (**(double **)(v83 + 232) != v80)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FeatureProcessingInterface.cpp", 183, (uint64_t)"!this_->config().enable_imu_sampler || ExactlyEqual(latest_resampled_imu_measurements_.front().timestamp, ref_frame_org_timestamp)", 130, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v95 = *(_QWORD *)(v83 + 288);
    if (!*(_BYTE *)(v95 + 735))
      goto LABEL_111;
  }
  if (*(double *)(*(_QWORD *)(v83 + 240) - 56) != v86)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FeatureProcessingInterface.cpp", 186, (uint64_t)"!this_->config().enable_imu_sampler || ExactlyEqual(latest_resampled_imu_measurements_.back().timestamp, cur_frame_orig_timestamp)", 130, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v95 = *(_QWORD *)(v83 + 288);
    v96 = (_BYTE *)(v95 + 5520);
    v97 = v95;
    if (!*(_BYTE *)(v95 + 5520))
    {
LABEL_112:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/include/VIO/Odometry/FeatureProcessingInterfaceBase.h", 247, (uint64_t)"opt_sensor_model_", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (!*v96)
        sub_20E866B34();
      v97 = *(_QWORD *)(v83 + 288);
    }
  }
  else
  {
LABEL_111:
    v96 = (_BYTE *)(v95 + 5520);
    v97 = v95;
    if (!*(_BYTE *)(v95 + 5520))
      goto LABEL_112;
  }
  sub_20F021EF0((int64x2_t *)(v95 + 8), (uint64_t)&v124, (int8x16_t *)(v83 + 232), v84, (_QWORD *)(v95 + 3520), *(_DWORD *)(v83 + 432), v83 + 264, v88, *(_QWORD *)(v83 + 152), 1, (_QWORD *)(*(_QWORD *)(v97 + 5528) + 8), *(uint64_t **)(v83 + 144));
  sub_20F00B158((uint64_t *)(v83 + 376), *(_QWORD *)(v83 + 144));
  for (i = *(unsigned int **)(v83 + 392); i; i = *(unsigned int **)i)
    sub_20F00AB74(i + 6);
  ++*(_DWORD *)(v83 + 432);
  v99 = *(_QWORD *)(*(_QWORD *)(v83 + 288) + 3480);
  if (!v99)
    sub_20E86D37C();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v99 + 48))(v99, *(_QWORD *)(v83 + 144) + 24, *(_QWORD *)(v83 + 144), v82);
}

void sub_20F016784(_Unwind_Exception *a1)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

uint64_t sub_20F0168E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double *v47;
  double v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  std::string::size_type v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __int128 v58;
  float64x2_t v59;
  double v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  std::string *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  const char *v72;
  unint64_t v73;
  _QWORD *v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  std::string *p_p;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  const char *v82;
  double v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  std::string::size_type v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  std::string::size_type v95;
  std::string::size_type v96;
  unsigned __int8 v97;
  uint64_t v98;
  const char *v99;
  NSObject *v100;
  std::string *v101;
  unsigned __int8 v102;
  uint64_t v103;
  const char *v104;
  NSObject *v105;
  std::string *v106;
  uint64_t v107;
  double v108;
  double **v109;
  uint64_t v110;
  uint64_t v111;
  float64_t v112;
  uint64_t v113;
  float64_t v114;
  uint64_t v115;
  uint64_t *v116;
  double v117;
  float64x2_t v118;
  double v119;
  double v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  double v125;
  float64x2_t v126;
  float64x2_t v127;
  __n128 v128;
  float64x2_t v129;
  double v130;
  float64x2_t v131;
  double v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  double v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  std::string::size_type v142;
  uint64_t v143;
  int v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  std::string::size_type v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  std::string::size_type v156;
  uint64_t v157;
  unsigned __int8 v158;
  std::string::size_type v159;
  const char *v160;
  NSObject *v161;
  unsigned __int8 v162;
  std::string::size_type v163;
  const char *v164;
  NSObject *v165;
  unsigned __int8 v166;
  std::string::size_type v167;
  const char *v168;
  NSObject *v169;
  unsigned __int8 v170;
  std::string::size_type v171;
  const char *v172;
  NSObject *v173;
  double *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  unsigned __int8 v181;
  std::string::size_type v182;
  const char *v183;
  NSObject *v184;
  unsigned __int8 v185;
  std::string::size_type v186;
  const char *v187;
  NSObject *v188;
  double i;
  uint64_t v190;
  unint64_t v191;
  double *v192;
  double *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  _BYTE *v199;
  double *v200;
  int64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  double *v205;
  _OWORD *v206;
  double *v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  double v211;
  std::runtime_error *exception;
  std::string *v213;
  std::string::size_type size;
  std::string *v215;
  __int128 v216;
  double v217;
  std::runtime_error *v218;
  std::string *v219;
  std::string::size_type v220;
  std::string *v221;
  __int128 v222;
  double **v223;
  float64x2_t v224;
  uint64_t v225;
  uint64_t *v226;
  BOOL v227;
  uint64_t v228;
  float64x2_t v229;
  uint64_t v230;
  uint64_t *v231;
  BOOL v232;
  uint64_t v233;
  float64x2_t v234;
  uint64_t v235;
  uint64_t *v236;
  BOOL v237;
  uint64_t v238;
  float64x2_t v239;
  uint64_t v240;
  uint64_t *v241;
  BOOL v242;
  uint64_t v243;
  float64x2_t v244;
  uint64_t v245;
  uint64_t v246;
  BOOL v247;
  uint64_t v248;
  float64x2_t v249;
  uint64_t v250;
  std::string *v251;
  std::string v252;
  int v253;
  const char *v254;
  int v255;
  const char *v256;
  uint64_t v257;
  uint64_t v258;
  std::string __p;
  std::string v260;
  char v261;
  _QWORD v262[30];
  uint64_t v263;
  float64x2_t v264;
  uint64_t v265;
  uint64_t v266;
  BOOL v267;
  uint64_t v268;
  float64x2_t v269;
  uint64_t v270;
  double v271;
  float64x2_t v272;
  uint64_t v273;
  float64x2_t v274;
  uint64_t v275;
  double v276;
  void *v277;
  double *v278;
  uint64_t v279;
  const char *v280;
  uint64_t v281;
  std::string v282;
  int v283;
  const char *v284;
  uint64_t v285;
  const char *v286;
  uint64_t v287;
  uint64_t v288;
  const char *v289;
  uint64_t v290;

  *(_QWORD *)(a1 + 1384) = *(_QWORD *)(a1 + 1376);
  *(_QWORD *)(a1 + 1408) = *(_QWORD *)(a1 + 1400);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
  if (!*(_QWORD *)(a1 + 208) || !*(_QWORD *)(a1 + 256) || !*(_QWORD *)(a1 + 80))
    return 0;
  v2 = *(_QWORD *)(a1 + 200);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 168) + 32 * v2;
    v4 = *(_QWORD *)(a1 + 248);
    if (v4)
    {
LABEL_6:
      v5 = *(_QWORD *)(a1 + 216);
      goto LABEL_11;
    }
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 168) + 32 * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 5);
    v4 = *(_QWORD *)(a1 + 248);
    if (v4)
      goto LABEL_6;
  }
  v5 = *(_QWORD *)(a1 + 216);
  v4 = (*(_QWORD *)(a1 + 224) - v5) >> 5;
LABEL_11:
  v8 = *(double *)(v3 - 32);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(double **)(v9 + 16);
  v11 = *(double **)(v9 + 24);
  if (v10 == v11)
  {
    v12 = -1.0;
    v6 = 0;
    if (v8 - -1.0 < 0.0)
      return v6;
  }
  else
  {
    v12 = v10[1] + v10[2];
    v6 = 0;
    if (v8 - v12 < 0.0)
      return v6;
  }
  if (*(double *)(v5 + 32 * v4 - 32) - v12 < 0.0)
    return v6;
  v13 = *(_QWORD *)(v9 + 32);
  v277 = *(void **)(v9 + 16);
  v278 = v11;
  v279 = v13;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  v14 = *(uint64_t **)(a1 + 72);
  v15 = *v14;
  *(_QWORD *)(v15 + 8) = v14[1];
  *(_QWORD *)v14[1] = v15;
  --*(_QWORD *)(a1 + 80);
  v16 = v14[2];
  if (v16)
  {
    v17 = v14[3];
    v18 = (void *)v14[2];
    if (v17 != v16)
    {
      do
      {
        v17 -= 240;
        sub_20E990F68(v17);
      }
      while (v17 != v16);
      v18 = (void *)v14[2];
    }
    v14[3] = v16;
    operator delete(v18);
  }
  operator delete(v14);
  v19 = *(double *)(a1 + 32);
  if (*(double *)(a1 + 8) + 0.00001 < v19)
  {
    v20 = *(double *)(a1 + 16);
    *(double *)(a1 + 24) = v20;
    *(double *)(a1 + 40) = v19;
    sub_20F01BEC8(a1 + 168, a1 + 88, v20);
    sub_20F01BEC8(a1 + 216, a1 + 128, *(double *)(a1 + 24));
    if (*(_QWORD *)(a1 + 208) < 2uLL || *(_QWORD *)(a1 + 256) < 2uLL)
    {
      v6 = 0;
      goto LABEL_229;
    }
  }
  if (v10 != v11)
  {
    v21 = v10[1] + v10[2];
    v276 = v21;
    v22 = *(_QWORD *)(a1 + 208);
    v23 = v22 == 0;
    if (v22)
      goto LABEL_27;
LABEL_32:
    v25 = 0;
    v24 = 1;
    goto LABEL_33;
  }
  v21 = -1.0;
  v276 = -1.0;
  v22 = *(_QWORD *)(a1 + 208);
  v23 = v22 == 0;
  if (!v22)
    goto LABEL_32;
LABEL_27:
  v24 = 0;
  v25 = 0;
  v26 = v22;
  do
  {
    v27 = v26 >> 1;
    v28 = (v26 >> 1) + v25;
    if (*(double *)(*(_QWORD *)(a1 + 168)
                   + 32
                   * ((v28 + *(_QWORD *)(a1 + 192))
                    % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 5))) <= v21)
    {
      v25 = v28 + 1;
      v24 = v28 + 1 == v22;
      v27 = v26 + ~v27;
    }
    v26 = v27;
  }
  while (v27);
LABEL_33:
  *(_QWORD *)&v274.f64[0] = a1 + 168;
  LOBYTE(v274.f64[1]) = v24;
  v275 = v25;
  v29 = *(_QWORD *)(a1 + 256);
  v30 = v29 == 0;
  if (v29)
  {
    v31 = 0;
    v32 = 0;
    v33 = *(_QWORD *)(a1 + 256);
    do
    {
      v34 = v33 >> 1;
      v35 = (v33 >> 1) + v32;
      if (*(double *)(*(_QWORD *)(a1 + 216)
                     + 32
                     * ((v35 + *(_QWORD *)(a1 + 240))
                      % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 5))) <= v21)
      {
        v32 = v35 + 1;
        v31 = v35 + 1 == v29;
        v34 = v33 + ~v34;
      }
      v33 = v34;
    }
    while (v34);
  }
  else
  {
    v32 = 0;
    v31 = 1;
  }
  *(_QWORD *)&v272.f64[0] = a1 + 216;
  LOBYTE(v272.f64[1]) = v31;
  v273 = v32;
  if (v22)
  {
    if (!v24 && !v25)
      goto LABEL_227;
  }
  else if (v24)
  {
    goto LABEL_227;
  }
  if (v29)
  {
    if (!v31 && !v32)
      goto LABEL_227;
  }
  else if (v31)
  {
    goto LABEL_227;
  }
  if (!*(_BYTE *)(a1 + 120) && !*(_BYTE *)(a1 + 160))
  {
    sub_20F01BEC8(a1 + 168, a1 + 88, v21);
    sub_20F01BEC8(a1 + 216, a1 + 128, v21);
    if (v10 == v11)
      v83 = -1.0;
    else
      v83 = v10[1];
    *(double *)(a1 + 32) = v83;
    *(double *)(a1 + 16) = v21;
    sub_20F0192DC(&v289);
    if (**((int **)v289 + 7) > 2)
      goto LABEL_227;
    v91 = *((unsigned __int8 *)v289 + 72);
    v92 = sub_20E8C31DC((uint64_t)v289, "OSLogSurrogateAppender", 1, 0);
    v93 = v92 ? v92 + 16 : 0;
    if (!v91 && !v92)
      goto LABEL_227;
    v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
    v282.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v282.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v283 = 2;
    v284 = "unknown file";
    LODWORD(v285) = 501;
    v287 = 0;
    v288 = 0;
    v286 = "unknown function";
    v94 = (uint64_t *)(v289 + 16);
    if (v289[39] < 0)
    {
      v96 = *((_QWORD *)v289 + 2);
      v95 = *((_QWORD *)v289 + 3);
    }
    else
    {
      v95 = *((unsigned __int8 *)v289 + 39);
      v96 = (std::string::size_type)(v289 + 16);
    }
    __p.__r_.__value_.__r.__words[0] = v96;
    __p.__r_.__value_.__l.__size_ = v95;
    v166 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v166 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v260);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v260);
      if (v261 && SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v260.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v167 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v168 = byte_254A4A4F8;
    }
    else
    {
      v167 = *(_QWORD *)&byte_254A4A4F8[8];
      v168 = *(const char **)byte_254A4A4F8;
    }
    v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v168;
    v252.__r_.__value_.__l.__size_ = v167;
    v260.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v168, __p.__r_.__value_.__l.__data_);
    sub_20E86E5A8(&v260.__r_.__value_.__l.__size_, (uint64_t)&v252);
    sub_20E86E5A8(v262, (uint64_t)&__p);
    v169 = v260.__r_.__value_.__r.__words[0];
    sub_20E86E44C((uint64_t)&v260);
    sub_20F01D030(v93, v94, v169, OS_LOG_TYPE_DEBUG);
    if (v91)
    {
      sub_20E8C003C((uint64_t)&v282, "Frame doesn't have an initial IMU constraint so dropping it - should only happen from a cold start");
      sub_20E863570((uint64_t)&v282);
    }
    goto LABEL_226;
  }
  v36 = a1 + 264;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 264);
  v37 = *(double *)(*(_QWORD *)(a1 + 168)
                  + 32
                  * ((v25 + *(_QWORD *)(a1 + 192) - 1)
                   % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 5)))
      - *(double *)(a1 + 88);
  v38 = *(double *)(*(_QWORD *)(a1 + 216)
                  + 32
                  * ((v32 + *(_QWORD *)(a1 + 240) - 1)
                   % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 5)))
      - *(double *)(a1 + 128);
  v39 = (double)(sub_20F01C144((uint64_t)&v274, v23, 0) - 1);
  if (v37 == 0.0)
    v40 = 1.0;
  else
    v40 = v37;
  v41 = v39 / v40;
  v42 = sub_20F01C144((uint64_t)&v272, v30, 0);
  if (v38 == 0.0)
    v43 = 1.0;
  else
    v43 = v38;
  v44 = (double)(v42 - 1) / v43;
  if (v41 >= v44)
    v45 = v41;
  else
    v45 = (double)(v42 - 1) / v43;
  v271 = v45;
  v223 = (double **)(a1 + 264);
  if (*(_BYTE *)(a1 + 417))
  {
    v46 = *(double *)(a1 + 424);
    if (vabdd_f64(v45, v46) > v46 * *(double *)(a1 + 440))
    {
      if ((v46 <= 0.0 || v46 > 2000.0)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.hpp", 531, (uint64_t)"fixed_imu_freq > 0.0 && fixed_imu_freq <= 2000.0", 48, (uint64_t)"Out of bounds IMUFilter sample frequency.", 41, (void (*)(void **))sub_21023DDB0)|| v37 < 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.hpp", 532, (uint64_t)"gyro_dt >= 0.0", 14, (uint64_t)"Gyro samples are non-increasing.", 32, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (v21 - *(double *)(a1 + 448) <= *(double *)(a1 + 456))
        goto LABEL_261;
      v47 = (double *)(a1 + 424);
      v48 = *(double *)(a1 + 432);
      if (vabdd_f64(v45, v48) <= v48 * *(double *)(a1 + 440))
      {
        if (v48 == 0.0)
          goto LABEL_260;
        sub_20F0192DC(&v289);
        if (**((int **)v289 + 7) > 3)
          goto LABEL_260;
        v84 = *((unsigned __int8 *)v289 + 72);
        v85 = sub_20E8C31DC((uint64_t)v289, "OSLogSurrogateAppender", 1, 0);
        v86 = v85 ? v85 + 16 : 0;
        if (!v84 && !v85)
          goto LABEL_260;
        v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
        v282.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v282.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v283 = 3;
        v284 = "unknown file";
        LODWORD(v285) = 558;
        v287 = 0;
        v288 = 0;
        v286 = "unknown function";
        v87 = *(_QWORD *)v282.__r_.__value_.__l.__data_;
        v88 = (uint64_t *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 16);
        if (*(char *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v90 = *(_QWORD *)(v87 + 16);
          v89 = *(_QWORD *)(v87 + 24);
        }
        else
        {
          v89 = *(unsigned __int8 *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 39);
          v90 = *(_QWORD *)v282.__r_.__value_.__l.__data_ + 16;
        }
        __p.__r_.__value_.__r.__words[0] = v90;
        __p.__r_.__value_.__l.__size_ = v89;
        v185 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v185 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v260);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v260);
          if (v261 && SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v260.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v186 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v187 = byte_254A4A4F8;
        }
        else
        {
          v186 = *(_QWORD *)&byte_254A4A4F8[8];
          v187 = *(const char **)byte_254A4A4F8;
        }
        v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v187;
        v252.__r_.__value_.__l.__size_ = v186;
        v260.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v187, __p.__r_.__value_.__l.__data_);
        sub_20E86E5A8(&v260.__r_.__value_.__l.__size_, (uint64_t)&v252);
        sub_20E86E5A8(v262, (uint64_t)&__p);
        v188 = v260.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&v260);
        sub_20F01D8A4(v86, v88, v188, OS_LOG_TYPE_INFO, (uint64_t *)&v276, (uint64_t *)(a1 + 432), (uint64_t *)&v271, (uint64_t *)(a1 + 424));
        v36 = a1 + 264;
        if (v84)
        {
          sub_20E8C003C((uint64_t)&v282, "IMUSynchronizer IMU Frequency for timestamp=%lf into IMUSynchronizer/BA is close to expected frequency: Expected Frame IMU Input Frequency=%lf, Actual Frame Frequency=%lf, Output IMU Frame Frequency=%lf.", v276, *(double *)(a1 + 432), v271, *v47);
          sub_20E863570((uint64_t)&v282);
        }
      }
      else
      {
        sub_20F0192DC(&v289);
        if (**((int **)v289 + 7) > 4)
          goto LABEL_260;
        v49 = *((unsigned __int8 *)v289 + 72);
        v50 = sub_20E8C31DC((uint64_t)v289, "OSLogSurrogateAppender", 1, 0);
        v51 = v50 ? v50 + 16 : 0;
        if (!v49 && !v50)
          goto LABEL_260;
        v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
        v282.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v282.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v283 = 4;
        v284 = "unknown file";
        LODWORD(v285) = 546;
        v287 = 0;
        v288 = 0;
        v286 = "unknown function";
        v52 = *(_QWORD *)v282.__r_.__value_.__l.__data_;
        v53 = (uint64_t *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 16);
        if (*(char *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v55 = *(_QWORD *)(v52 + 16);
          v54 = *(_QWORD *)(v52 + 24);
        }
        else
        {
          v54 = *(unsigned __int8 *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 39);
          v55 = *(_QWORD *)v282.__r_.__value_.__l.__data_ + 16;
        }
        __p.__r_.__value_.__r.__words[0] = v55;
        __p.__r_.__value_.__l.__size_ = v54;
        v181 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v181 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v260);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v260);
          if (v261 && SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v260.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v182 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v183 = byte_254A4A4F8;
        }
        else
        {
          v182 = *(_QWORD *)&byte_254A4A4F8[8];
          v183 = *(const char **)byte_254A4A4F8;
        }
        v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v183;
        v252.__r_.__value_.__l.__size_ = v182;
        v260.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v183, __p.__r_.__value_.__l.__data_);
        sub_20E86E5A8(&v260.__r_.__value_.__l.__size_, (uint64_t)&v252);
        sub_20E86E5A8(v262, (uint64_t)&__p);
        v184 = v260.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&v260);
        sub_20F01D41C(v51, v53, v184, OS_LOG_TYPE_ERROR, (uint64_t *)&v276, (uint64_t *)(a1 + 424), (uint64_t *)&v271);
        v36 = a1 + 264;
        if (v49)
        {
          sub_20E8C003C((uint64_t)&v282, "IMUSynchronizer IMU Frequency for timestamp=%lf into IMUSynchronizer/BA is different than expected: Expected IMU Frame Frequency=%lf, Current IMU Frame Frequency=%lf.", v276, *v47, v271);
          sub_20E863570((uint64_t)&v282);
        }
      }
      sub_20E863714((uint64_t)&v282);
LABEL_260:
      *(double *)(a1 + 448) = v276;
LABEL_261:
      sub_20F01C1C4(v36, vcvtpd_u64_f64(v37 * v46) + 1);
      for (i = *(double *)(*(_QWORD *)(a1 + 168)
                          + 32
                          * ((*(_QWORD *)(a1 + 192) + 1)
                           % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 5)));
            ;
            i = 1.0 / v46 + i)
      {
        if (i > *(double *)(**(_QWORD **)&v274.f64[0]
                           + 32
                           * ((v275 + *(_QWORD *)(*(_QWORD *)&v274.f64[0] + 24) - 1)
                            % (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)&v274.f64[0] + 8)
                                                         - **(_QWORD **)&v274.f64[0]) >> 5))))
          goto LABEL_141;
        v192 = *(double **)(a1 + 272);
        v191 = *(_QWORD *)(a1 + 280);
        if ((unint64_t)v192 < v191)
        {
          *v192 = i;
          v190 = (uint64_t)(v192 + 1);
          goto LABEL_263;
        }
        v193 = *v223;
        v194 = (char *)v192 - (char *)*v223;
        v195 = v194 >> 3;
        v196 = (v194 >> 3) + 1;
        if (v196 >> 61)
          sub_20E867F44();
        v197 = v191 - (_QWORD)v193;
        if (v197 >> 2 > v196)
          v196 = v197 >> 2;
        v198 = (unint64_t)v197 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v196;
        if (v198)
          break;
        v199 = 0;
        v200 = (double *)(8 * v195);
        *(double *)(8 * v195) = i;
        v190 = 8 * v195 + 8;
        v201 = (char *)v192 - (char *)v193;
        if (v192 != v193)
          goto LABEL_277;
LABEL_283:
        *(_QWORD *)(a1 + 264) = v200;
        *(_QWORD *)(a1 + 272) = v190;
        *(_QWORD *)(a1 + 280) = &v199[8 * v198];
        if (v193)
          operator delete(v193);
LABEL_263:
        *(_QWORD *)(a1 + 272) = v190;
      }
      if (v198 >> 61)
        sub_20E877A38();
      v199 = operator new(8 * v198);
      v200 = (double *)&v199[8 * v195];
      *v200 = i;
      v190 = (uint64_t)(v200 + 1);
      v201 = (char *)v192 - (char *)v193;
      if (v192 == v193)
        goto LABEL_283;
LABEL_277:
      v202 = v201 - 8;
      if (v202 < 0x58)
        goto LABEL_345;
      if ((unint64_t)((char *)v192 - v199 - v194) < 0x20)
        goto LABEL_345;
      v203 = (v202 >> 3) + 1;
      v204 = 8 * (v203 & 0x3FFFFFFFFFFFFFFCLL);
      v205 = &v192[v204 / 0xFFFFFFFFFFFFFFF8];
      v200 = (double *)((char *)v200 - v204);
      v206 = &v199[8 * v195 - 16];
      v207 = v192 - 2;
      v208 = v203 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v58 = *((_OWORD *)v207 - 1);
        v209 = *(_OWORD *)v207;
        *(v206 - 1) = v58;
        *v206 = v209;
        v206 -= 2;
        v207 -= 4;
        v208 -= 4;
      }
      while (v208);
      v192 = v205;
      if (v203 != (v203 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_345:
        do
        {
          v210 = *((_QWORD *)v192-- - 1);
          *((_QWORD *)v200-- - 1) = v210;
        }
        while (v192 != v193);
      }
      goto LABEL_283;
    }
  }
  if (v41 <= v44)
  {
    v249 = v272;
    v250 = v273;
    v73 = sub_20F01C458(v30, 0, (uint64_t *)&v249);
    sub_20F01C1C4(a1 + 264, v73);
    sub_20F01C4C4((_QWORD *)(a1 + 264), v73 - 1);
    v248 = 1;
    v74 = *(_QWORD **)(a1 + 264);
    v247 = *(_QWORD *)(a1 + 256) == 1;
    v244 = v272;
    v245 = v273;
    v246 = a1 + 216;
    sub_20F01C4F0(&v246, (uint64_t)&v244, v74);
    sub_20F0192DC(&v263);
    if (**(int **)(v263 + 56) > 2)
      goto LABEL_141;
    v75 = *(unsigned __int8 *)(v263 + 72);
    v76 = sub_20E8C31DC(v263, "OSLogSurrogateAppender", 1, 0);
    v77 = v76 ? v76 + 16 : 0;
    if (!v75 && !v76)
      goto LABEL_141;
    sub_20E863438((uint64_t)&v260);
    sub_20E86A980(&v260.__r_.__value_.__r.__words[2], (uint64_t)"Using accel for interpolation at ", 33);
    std::ostream::operator<<();
    sub_20E923E88(&v260, &__p);
    v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263;
    v252.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v252.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v253 = 2;
    v254 = "unknown file";
    v255 = 608;
    v257 = 0;
    v258 = 0;
    v256 = "unknown function";
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v251 = p_p;
    v79 = *(_QWORD *)v252.__r_.__value_.__l.__data_;
    v80 = (uint64_t *)(*(_QWORD *)v252.__r_.__value_.__l.__data_ + 16);
    if (*(char *)(*(_QWORD *)v252.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v82 = *(const char **)(v79 + 16);
      v81 = *(_QWORD *)(v79 + 24);
    }
    else
    {
      v81 = *(unsigned __int8 *)(*(_QWORD *)v252.__r_.__value_.__l.__data_ + 39);
      v82 = (const char *)(*(_QWORD *)v252.__r_.__value_.__l.__data_ + 16);
    }
    v280 = v82;
    v281 = v81;
    v102 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v102 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v282);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v282);
      if ((_BYTE)v283 && SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v282.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v103 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v104 = byte_254A4A4F8;
    }
    else
    {
      v103 = *(_QWORD *)&byte_254A4A4F8[8];
      v104 = *(const char **)byte_254A4A4F8;
    }
    v289 = v104;
    v290 = v103;
    v282.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v104, v280);
    sub_20E86E5A8(&v282.__r_.__value_.__l.__size_, (uint64_t)&v289);
    sub_20E86E5A8(&v285, (uint64_t)&v280);
    v105 = v282.__r_.__value_.__r.__words[0];
    sub_20E86E44C((uint64_t)&v282);
    sub_20F01E354(v77, v80, v105, OS_LOG_TYPE_DEBUG, (const char **)&v251);
    if (v75)
    {
      v106 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v106 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_20E8C003C((uint64_t)&v252, "%s", (const char *)v106);
      sub_20E863570((uint64_t)&v252);
    }
  }
  else
  {
    v269 = v274;
    v270 = v275;
    v56 = sub_20F01C458(v23, 0, (uint64_t *)&v269);
    sub_20F01C1C4(a1 + 264, v56);
    sub_20F01C4C4((_QWORD *)(a1 + 264), v56 - 1);
    v57 = *(_QWORD *)(a1 + 208);
    v266 = a1 + 168;
    v268 = 1;
    v267 = v57 == 1;
    v264 = v274;
    v265 = v275;
    sub_20F01C4F0(&v266, (uint64_t)&v264, *(_QWORD **)(a1 + 264));
    sub_20F0192DC(&v263);
    if (**(int **)(v263 + 56) > 2)
      goto LABEL_141;
    v65 = *(unsigned __int8 *)(v263 + 72);
    v66 = sub_20E8C31DC(v263, "OSLogSurrogateAppender", 1, 0);
    v67 = v66 ? v66 + 16 : 0;
    if (!v65 && !v66)
      goto LABEL_141;
    sub_20E863438((uint64_t)&v260);
    sub_20E86A980(&v260.__r_.__value_.__r.__words[2], (uint64_t)"Using gyro for interpolation at ", 32);
    std::ostream::operator<<();
    sub_20E923E88(&v260, &__p);
    v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v263;
    v252.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v252.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v253 = 2;
    v254 = "unknown file";
    v255 = 591;
    v257 = 0;
    v258 = 0;
    v256 = "unknown function";
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = &__p;
    else
      v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v251 = v68;
    v69 = *(_QWORD *)v252.__r_.__value_.__l.__data_;
    v70 = (uint64_t *)(*(_QWORD *)v252.__r_.__value_.__l.__data_ + 16);
    if (*(char *)(*(_QWORD *)v252.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v72 = *(const char **)(v69 + 16);
      v71 = *(_QWORD *)(v69 + 24);
    }
    else
    {
      v71 = *(unsigned __int8 *)(*(_QWORD *)v252.__r_.__value_.__l.__data_ + 39);
      v72 = (const char *)(*(_QWORD *)v252.__r_.__value_.__l.__data_ + 16);
    }
    v280 = v72;
    v281 = v71;
    v97 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v97 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v282);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v282);
      if ((_BYTE)v283 && SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v282.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    v98 = byte_254A4A4F8[23];
    if (byte_254A4A4F8[23] >= 0)
    {
      v99 = byte_254A4A4F8;
    }
    else
    {
      v98 = *(_QWORD *)&byte_254A4A4F8[8];
      v99 = *(const char **)byte_254A4A4F8;
    }
    v289 = v99;
    v290 = v98;
    v282.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v99, v280);
    sub_20E86E5A8(&v282.__r_.__value_.__l.__size_, (uint64_t)&v289);
    sub_20E86E5A8(&v285, (uint64_t)&v280);
    v100 = v282.__r_.__value_.__r.__words[0];
    sub_20E86E44C((uint64_t)&v282);
    sub_20F01DD50(v67, v70, v100, OS_LOG_TYPE_DEBUG, (const char **)&v251);
    if (v65)
    {
      v101 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v101 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_20E8C003C((uint64_t)&v252, "%s", (const char *)v101);
      sub_20E863570((uint64_t)&v252);
    }
  }
  sub_20E863714((uint64_t)&v252);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20E863784((uint64_t)&v260);
LABEL_141:
  v107 = *(_QWORD *)(a1 + 272);
  v108 = v276;
  if (vabdd_f64(*(double *)(v107 - 8), v276) <= 0.0001)
  {
    *(double *)(v107 - 8) = v276;
    v109 = (double **)(a1 + 264);
  }
  else
  {
    v109 = (double **)(a1 + 264);
    sub_20F01C2E0((uint64_t)v223, v276);
  }
  if (*(_BYTE *)(a1 + 120))
  {
    v110 = 32 * *(_QWORD *)(a1 + 192);
    *(_QWORD *)&v58 = *(_QWORD *)(a1 + 1296);
    if (*(double *)(*(_QWORD *)(a1 + 168) + v110) - *(double *)(a1 + 88) > *(double *)&v58)
    {
      v211 = *(double *)(*(_QWORD *)(a1 + 168) + v110) - *(double *)(a1 + 88);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E8610C0(&v252, "[IMUSynchronization] Large gyro gap: ");
      std::to_string(&__p, v211);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v213 = &__p;
      else
        v213 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v215 = std::string::append(&v252, (const std::string::value_type *)v213, size);
      v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
      v282.__r_.__value_.__r.__words[2] = v215->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v216;
      v215->__r_.__value_.__l.__size_ = 0;
      v215->__r_.__value_.__r.__words[2] = 0;
      v215->__r_.__value_.__r.__words[0] = 0;
      sub_20E8B07EC(" likely due to frame is behind IMU data", &v282, &v260);
      std::runtime_error::runtime_error(exception, &v260);
      exception->__vftable = (std::runtime_error_vtbl *)&off_24C9FFD28;
      __cxa_throw(exception, (struct type_info *)&unk_24C9FFD40, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v111 = 32 * *(_QWORD *)(a1 + 240);
    *(_QWORD *)&v58 = *(_QWORD *)(a1 + 1296);
    if (*(double *)(*(_QWORD *)(a1 + 216) + v111) - *(double *)(a1 + 128) > *(double *)&v58)
    {
      v217 = *(double *)(*(_QWORD *)(a1 + 216) + v111) - *(double *)(a1 + 128);
      v218 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E8610C0(&v252, "[IMUSynchronization] Large accel gap: ");
      std::to_string(&__p, v217);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v219 = &__p;
      else
        v219 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v220 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v220 = __p.__r_.__value_.__l.__size_;
      v221 = std::string::append(&v252, (const std::string::value_type *)v219, v220);
      v222 = *(_OWORD *)&v221->__r_.__value_.__l.__data_;
      v282.__r_.__value_.__r.__words[2] = v221->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v222;
      v221->__r_.__value_.__l.__size_ = 0;
      v221->__r_.__value_.__r.__words[2] = 0;
      v221->__r_.__value_.__r.__words[0] = 0;
      sub_20E8B07EC(" likely due to frame is behind IMU data", &v282, &v260);
      std::runtime_error::runtime_error(v218, &v260);
      v218->__vftable = (std::runtime_error_vtbl *)&off_24C9FFD28;
      __cxa_throw(v218, (struct type_info *)&unk_24C9FFD40, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  v112 = v274.f64[0];
  v113 = v275;
  if (*(double *)(**(_QWORD **)&v274.f64[0]
                 + 32
                 * ((v275 + *(_QWORD *)(*(_QWORD *)&v274.f64[0] + 24) - 1)
                  % (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)&v274.f64[0] + 8) - **(_QWORD **)&v274.f64[0]) >> 5))) != v108)
  {
    if (LOBYTE(v274.f64[1])
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.hpp", 652, (uint64_t)"gyro_it != gyro_geasurements_.cend()", 36, (uint64_t)"Not enough gyro Measurements to constrain the splines", 53, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_301;
    }
    v275 = v113 + 1;
    LOBYTE(v274.f64[1]) = v113 + 1 == *(_QWORD *)(*(_QWORD *)&v112 + 40);
  }
  v114 = v272.f64[0];
  v115 = v273;
  if (*(double *)(**(_QWORD **)&v272.f64[0]
                 + 32
                 * ((v273 + *(_QWORD *)(*(_QWORD *)&v272.f64[0] + 24) - 1)
                  % (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)&v272.f64[0] + 8) - **(_QWORD **)&v272.f64[0]) >> 5))) == v108)
    goto LABEL_156;
  if (LOBYTE(v272.f64[1])
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.hpp", 657, (uint64_t)"accel_it != accelerometer_geasurements_.cend()", 46, (uint64_t)"Not enough accelerometer Measurements to constrain the splines", 62, (void (*)(void **))sub_21023DDB0))
  {
LABEL_301:
    abort();
  }
  v273 = v115 + 1;
  LOBYTE(v272.f64[1]) = v115 + 1 == *(_QWORD *)(*(_QWORD *)&v114 + 40);
LABEL_156:
  v116 = (uint64_t *)(a1 + 288);
  if (*(_BYTE *)(a1 + 1200))
  {
    v232 = *(_QWORD *)(a1 + 208) == 0;
    v233 = 0;
    v229 = v274;
    v230 = v275;
    v231 = (uint64_t *)(a1 + 168);
    if ((sub_20FDB4284(a1 + 336, a1 + 1376, &v231, &v229, (uint64_t)v109, v274, *(double *)&v58, v59, v60, v61.f64[0], v62, v63, v64) & 1) == 0)
    {
      sub_20F0192DC(&v289);
      if (**((int **)v289 + 7) > 5)
        goto LABEL_227;
      v137 = *((unsigned __int8 *)v289 + 72);
      v138 = sub_20E8C31DC((uint64_t)v289, "OSLogSurrogateAppender", 1, 0);
      v139 = v138 ? v138 + 16 : 0;
      if (!v137 && !v138)
        goto LABEL_227;
      v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
      v282.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v282.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      v283 = 5;
      v284 = "unknown file";
      LODWORD(v285) = 688;
      v287 = 0;
      v288 = 0;
      v286 = "unknown function";
      v140 = *(_QWORD *)v282.__r_.__value_.__l.__data_;
      v141 = (uint64_t *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 16);
      if (*(char *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 39) < 0)
      {
        v143 = *(_QWORD *)(v140 + 16);
        v142 = *(_QWORD *)(v140 + 24);
      }
      else
      {
        v142 = *(unsigned __int8 *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 39);
        v143 = *(_QWORD *)v282.__r_.__value_.__l.__data_ + 16;
      }
      __p.__r_.__value_.__r.__words[0] = v143;
      __p.__r_.__value_.__l.__size_ = v142;
      v158 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v158 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v260);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v260);
        if (v261 && SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v260.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      v159 = byte_254A4A4F8[23];
      if (byte_254A4A4F8[23] >= 0)
      {
        v160 = byte_254A4A4F8;
      }
      else
      {
        v159 = *(_QWORD *)&byte_254A4A4F8[8];
        v160 = *(const char **)byte_254A4A4F8;
      }
      v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v160;
      v252.__r_.__value_.__l.__size_ = v159;
      v260.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v160, __p.__r_.__value_.__l.__data_);
      sub_20E86E5A8(&v260.__r_.__value_.__l.__size_, (uint64_t)&v252);
      sub_20E86E5A8(v262, (uint64_t)&__p);
      v161 = v260.__r_.__value_.__r.__words[0];
      sub_20E86E44C((uint64_t)&v260);
      sub_20F01ED44(v139, v141, v161, OS_LOG_TYPE_ERROR);
      if (v137)
      {
        sub_20E8C003C((uint64_t)&v282, "IMU sampler failed - unable to interpolate gyroscope. Dropping frame.");
        sub_20E863570((uint64_t)&v282);
      }
      goto LABEL_226;
    }
    v227 = *(_QWORD *)(a1 + 256) == 0;
    v228 = 0;
    v224 = v272;
    v225 = v273;
    v226 = (uint64_t *)(a1 + 216);
    if ((sub_20FDB4284(a1 + 336, a1 + 1400, &v226, &v224, (uint64_t)v109, v272, v117, v118, v119, v120, v121, v122, v123) & 1) != 0)
    {
      v124.f64[0] = v108;
      sub_20F01C5BC(a1, v124, v125, v126, v127, v128, v129, v130, v131);
LABEL_164:
      v133 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3);
      if (v133 >= 2)
      {
        v134 = 0;
        v135 = v133 - 1;
        do
        {
          if (*(double *)(*v116 + v134 + 56) - *(double *)(*v116 + v134) > 1.0
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.hpp", 710, (uint64_t)"(imu_measurements_for_frame_[i].timestamp - imu_measurements_for_frame_[i - 1].timestamp) <= kMaxIMUDataGap_s", 109, (uint64_t)"Interpolated IMU measurement exceeds maximum gap.", 49, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v134 += 56;
          --v135;
        }
        while (v135);
      }
      if (v277 == v278)
        v136 = -1.0;
      else
        v136 = *((double *)v277 + 1);
      *(double *)(a1 + 32) = v136;
      *(double *)(a1 + 16) = v108;
      sub_20F01BE44((void **)(a1 + 312), (uint64_t)&v277);
      v6 = 1;
      goto LABEL_228;
    }
    sub_20F0192DC(&v289);
    if (**((int **)v289 + 7) <= 5)
    {
      v151 = *((unsigned __int8 *)v289 + 72);
      v152 = sub_20E8C31DC((uint64_t)v289, "OSLogSurrogateAppender", 1, 0);
      v153 = v152 ? v152 + 16 : 0;
      if (v151 || v152)
      {
        v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
        v282.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v282.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v283 = 5;
        v284 = "unknown file";
        LODWORD(v285) = 696;
        v287 = 0;
        v288 = 0;
        v286 = "unknown function";
        v154 = *(_QWORD *)v282.__r_.__value_.__l.__data_;
        v155 = (uint64_t *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 16);
        if (*(char *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v157 = *(_QWORD *)(v154 + 16);
          v156 = *(_QWORD *)(v154 + 24);
        }
        else
        {
          v156 = *(unsigned __int8 *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 39);
          v157 = *(_QWORD *)v282.__r_.__value_.__l.__data_ + 16;
        }
        __p.__r_.__value_.__r.__words[0] = v157;
        __p.__r_.__value_.__l.__size_ = v156;
        v170 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v170 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v260);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v260);
          if (v261 && SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v260.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v171 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v172 = byte_254A4A4F8;
        }
        else
        {
          v171 = *(_QWORD *)&byte_254A4A4F8[8];
          v172 = *(const char **)byte_254A4A4F8;
        }
        v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v172;
        v252.__r_.__value_.__l.__size_ = v171;
        v260.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v172, __p.__r_.__value_.__l.__data_);
        sub_20E86E5A8(&v260.__r_.__value_.__l.__size_, (uint64_t)&v252);
        sub_20E86E5A8(v262, (uint64_t)&__p);
        v173 = v260.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&v260);
        sub_20F01F130(v153, v155, v173, OS_LOG_TYPE_ERROR);
        if (v151)
        {
          sub_20E8C003C((uint64_t)&v282, "IMU sampler failed - unable to interpolate accelerometer. Dropping the frame.");
          sub_20E863570((uint64_t)&v282);
        }
LABEL_226:
        sub_20E863714((uint64_t)&v282);
      }
    }
  }
  else
  {
    v242 = *(_QWORD *)(a1 + 208) == 0;
    v243 = 0;
    v239 = v274;
    v240 = v275;
    v241 = (uint64_t *)(a1 + 168);
    v237 = *(_QWORD *)(a1 + 256) == 0;
    v238 = 0;
    v234 = v272;
    v235 = v273;
    v236 = (uint64_t *)(a1 + 216);
    if ((sub_20FDB4D88(a1 + 336, a1 + 288, &v241, &v239, &v236, &v234, v109, v272, *(double *)&v58, v59, v60, v61, v62, v63, v64) & 1) != 0)
    {
      v132 = *(double *)(a1 + 24);
      if (v132 >= 0.0 && *(double *)*v116 - v132 <= 0.0001)
        sub_20F01C56C(a1 + 288, *v116);
      goto LABEL_164;
    }
    sub_20F0192DC(&v289);
    if (**((int **)v289 + 7) <= 5)
    {
      v144 = *((unsigned __int8 *)v289 + 72);
      v145 = sub_20E8C31DC((uint64_t)v289, "OSLogSurrogateAppender", 1, 0);
      v146 = v145 ? v145 + 16 : 0;
      if (v144 || v145)
      {
        v282.__r_.__value_.__r.__words[0] = (std::string::size_type)&v289;
        v282.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v282.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
        v283 = 5;
        v284 = "unknown file";
        LODWORD(v285) = 668;
        v287 = 0;
        v288 = 0;
        v286 = "unknown function";
        v147 = *(_QWORD *)v282.__r_.__value_.__l.__data_;
        v148 = (uint64_t *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 16);
        if (*(char *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 39) < 0)
        {
          v150 = *(_QWORD *)(v147 + 16);
          v149 = *(_QWORD *)(v147 + 24);
        }
        else
        {
          v149 = *(unsigned __int8 *)(*(_QWORD *)v282.__r_.__value_.__l.__data_ + 39);
          v150 = *(_QWORD *)v282.__r_.__value_.__l.__data_ + 16;
        }
        __p.__r_.__value_.__r.__words[0] = v150;
        __p.__r_.__value_.__l.__size_ = v149;
        v162 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v162 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v260);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v260);
          if (v261 && SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v260.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v163 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v164 = byte_254A4A4F8;
        }
        else
        {
          v163 = *(_QWORD *)&byte_254A4A4F8[8];
          v164 = *(const char **)byte_254A4A4F8;
        }
        v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v164;
        v252.__r_.__value_.__l.__size_ = v163;
        v260.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v164, __p.__r_.__value_.__l.__data_);
        sub_20E86E5A8(&v260.__r_.__value_.__l.__size_, (uint64_t)&v252);
        sub_20E86E5A8(v262, (uint64_t)&__p);
        v165 = v260.__r_.__value_.__r.__words[0];
        sub_20E86E44C((uint64_t)&v260);
        sub_20F01E958(v146, v148, v165, OS_LOG_TYPE_ERROR);
        if (v144)
        {
          sub_20E8C003C((uint64_t)&v282, "IMU sampler failed - unable to interpolate gyroscope/accelerometer. Dropping the frame.");
          sub_20E863570((uint64_t)&v282);
        }
        goto LABEL_226;
      }
    }
  }
LABEL_227:
  v6 = 0;
LABEL_228:
  v10 = (double *)v277;
LABEL_229:
  if (v10)
  {
    v174 = v278;
    v175 = v10;
    if (v278 != v10)
    {
      do
      {
        v176 = (void *)*((_QWORD *)v174 - 3);
        if (v176)
        {
          *((_QWORD *)v174 - 2) = v176;
          operator delete(v176);
        }
        v177 = (void *)*((_QWORD *)v174 - 6);
        if (v177)
        {
          *((_QWORD *)v174 - 5) = v177;
          operator delete(v177);
        }
        v178 = (void *)*((_QWORD *)v174 - 9);
        if (v178)
        {
          *((_QWORD *)v174 - 8) = v178;
          operator delete(v178);
        }
        v179 = (void *)*((_QWORD *)v174 - 12);
        if (v179)
        {
          *((_QWORD *)v174 - 11) = v179;
          operator delete(v179);
        }
        v180 = (void *)*((_QWORD *)v174 - 15);
        if (v180)
        {
          *((_QWORD *)v174 - 14) = v180;
          operator delete(v180);
        }
        sub_20E990FD8((void **)v174 - 27);
        v174 -= 30;
      }
      while (v174 != v10);
      v175 = v277;
    }
    v278 = v10;
    operator delete(v175);
  }
  return v6;
}

void sub_20F018678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  char a67;
  uint64_t v67;

  if (a67)
  {
    if (a66 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v67 - 240);
  sub_20ED2894C((void **)&STACK[0x348]);
  _Unwind_Resume(a1);
}

void sub_20F0186E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *object;
  uint64_t v64;

  if (*(_BYTE *)(v64 - 216) && *(char *)(v64 - 217) < 0)
    operator delete(*(void **)(v64 - 240));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a49);
  if (a63 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&object);
    sub_20ED2894C((void **)&STACK[0x348]);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&object);
  sub_20ED2894C((void **)&STACK[0x348]);
  _Unwind_Resume(a1);
}

void sub_20F018ACC()
{
  JUMPOUT(0x20F018AD4);
}

void sub_20F018B1C(_Unwind_Exception *a1)
{
  sub_20ED2894C((void **)&STACK[0x348]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F018B30(uint64_t a1)
{
  return *(_QWORD *)(a1 + 5528) + 8;
}

uint64_t sub_20F018B3C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 5528) + 32;
}

uint64_t sub_20F018B48(uint64_t a1)
{
  return *(_QWORD *)(a1 + 5528) + 144;
}

uint64_t sub_20F018B54(uint64_t a1)
{
  return *(_QWORD *)(a1 + 5528) + 296;
}

uint64_t sub_20F018B60@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(result + 5528);
  v4 = *(_QWORD *)(v2 + 360);
  v3 = *(_QWORD *)(v2 + 368);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20F018B88(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v2 = *(void **)(a1 + 1400);
  if (v2)
  {
    *(_QWORD *)(a1 + 1408) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 1376);
  if (v3)
  {
    *(_QWORD *)(a1 + 1384) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 1352);
  if (v4)
  {
    *(_QWORD *)(a1 + 1360) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 1328);
  if (v5)
  {
    *(_QWORD *)(a1 + 1336) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 1304);
  if (v6)
  {
    *(_QWORD *)(a1 + 1312) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 1208);
  if (v7)
  {
    *(_QWORD *)(a1 + 1216) = v7;
    operator delete(v7);
  }
  if (*(_BYTE *)(a1 + 1192))
    sub_20EAF58EC(a1 + 832);
  if (*(_BYTE *)(a1 + 824))
    sub_20EAF58EC(a1 + 464);
  v8 = *(void **)(a1 + 384);
  if (v8)
  {
    *(_QWORD *)(a1 + 392) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 360);
  if (v9)
  {
    *(_QWORD *)(a1 + 368) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 336);
  if (v10)
  {
    *(_QWORD *)(a1 + 344) = v10;
    operator delete(v10);
  }
  v11 = *(_QWORD *)(a1 + 312);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 320);
    v13 = *(void **)(a1 + 312);
    if (v12 != v11)
    {
      do
      {
        v12 -= 240;
        sub_20E990F68(v12);
      }
      while (v12 != v11);
      v13 = *(void **)(a1 + 312);
    }
    *(_QWORD *)(a1 + 320) = v11;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 288);
  if (v14)
  {
    *(_QWORD *)(a1 + 296) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 264);
  if (v15)
  {
    *(_QWORD *)(a1 + 272) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 216);
  if (v16)
  {
    *(_QWORD *)(a1 + 224) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 168);
  if (v17)
  {
    *(_QWORD *)(a1 + 176) = v17;
    operator delete(v17);
  }
  sub_20F018D30((uint64_t *)(a1 + 64));
  return a1;
}

uint64_t sub_20F018CE0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 792);
  if (v2)
  {
    *(_QWORD *)(a1 + 800) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 776))
    sub_20EAF58EC(a1 + 416);
  if (*(_BYTE *)(a1 + 408))
    sub_20EAF58EC(a1 + 48);
  return a1;
}

void sub_20F018D30(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = v3[2];
        if (v7)
        {
          v8 = v3[3];
          v5 = (void *)v3[2];
          if (v8 != v7)
          {
            do
            {
              v9 = *(void **)(v8 - 24);
              if (v9)
              {
                *(_QWORD *)(v8 - 16) = v9;
                operator delete(v9);
              }
              v10 = *(void **)(v8 - 48);
              if (v10)
              {
                *(_QWORD *)(v8 - 40) = v10;
                operator delete(v10);
              }
              v11 = *(void **)(v8 - 72);
              if (v11)
              {
                *(_QWORD *)(v8 - 64) = v11;
                operator delete(v11);
              }
              v12 = *(void **)(v8 - 96);
              if (v12)
              {
                *(_QWORD *)(v8 - 88) = v12;
                operator delete(v12);
              }
              v13 = *(void **)(v8 - 120);
              if (v13)
              {
                *(_QWORD *)(v8 - 112) = v13;
                operator delete(v13);
              }
              sub_20E990FD8((void **)(v8 - 216));
              v8 -= 240;
            }
            while (v8 != v7);
            v5 = (void *)v3[2];
          }
          v3[3] = v7;
          operator delete(v5);
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
}

_QWORD *sub_20F018E30(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    sub_20E867F44();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      sub_20E877A38();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v18;
    v19 = &v15[-v18];
    v20 = v15 - 16;
    v21 = &v9[8 * v3 - 16];
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v20 - 1);
      v23 = *(_OWORD *)v20;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)v20 = 0uLL;
      *((_OWORD *)v21 - 1) = v24;
      *(_OWORD *)v21 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
        sub_20F018FC0(v27);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_20F018FC0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 128);
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_20E991850(v3 - 144);
      while ((void *)v3 != v2);
      v4 = *(void **)(a1 + 120);
    }
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 80);
    v7 = *(void **)(a1 + 72);
    if (v6 != v5)
    {
      do
        v6 = sub_20E991850(v6 - 272);
      while (v6 != v5);
      v7 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v7);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F019070(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD **)(a1 + 392);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      sub_20F00C344(v4 + 3);
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *(void **)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(std::__shared_weak_count **)(a1 + 368);
  if (!v7)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = *(_QWORD **)(a1 + 312);
    if (!v10)
      goto LABEL_16;
  }
  else
  {
LABEL_13:
    v10 = *(_QWORD **)(a1 + 312);
    if (!v10)
      goto LABEL_16;
  }
  do
  {
    v21 = (_QWORD *)*v10;
    v22 = (void *)v10[3];
    if (v22)
    {
      v10[4] = v22;
      operator delete(v22);
    }
    operator delete(v10);
    v10 = v21;
  }
  while (v21);
LABEL_16:
  v11 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v11)
    operator delete(v11);
  v12 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v12)
    MEMORY[0x212BC6398](v12, 0x1000C40244176AFLL);
  v13 = *(void **)(a1 + 232);
  if (v13)
  {
    *(_QWORD *)(a1 + 240) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 208);
  if (v14)
  {
    *(_QWORD *)(a1 + 216) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 160);
  if (v15)
  {
    *(_QWORD *)(a1 + 168) = v15;
    operator delete(v15);
  }
  v16 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v16)
    MEMORY[0x212BC6398](v16, 0x1000C40FDACBBE0);
  sub_20ED29074((void ***)(a1 + 144), 0);
  v17 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v17)
    MEMORY[0x212BC6398](v17, 0x1000C4086F741D2);
  v18 = *(_QWORD **)(a1 + 32);
  if (v18)
  {
    v19 = *(_QWORD **)(a1 + 40);
    v20 = *(void **)(a1 + 32);
    if (v19 != v18)
    {
      do
      {
        v24 = *--v19;
        v23 = v24;
        *v19 = 0;
        if (v24)
          sub_20F018FC0(v23);
      }
      while (v19 != v18);
      v20 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v18;
    operator delete(v20);
  }
  v25 = *(_QWORD **)(a1 + 8);
  if (v25)
  {
    v26 = *(_QWORD **)(a1 + 16);
    v27 = *(void **)(a1 + 8);
    if (v26 != v25)
    {
      do
      {
        v29 = *--v26;
        v28 = v29;
        *v26 = 0;
        if (v29)
        {
          v30 = sub_20ED293AC(v28);
          MEMORY[0x212BC6398](v30, 0x10B2C4036EE574ELL);
        }
      }
      while (v26 != v25);
      v27 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v25;
    operator delete(v27);
  }
  v31 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v31)
  {
    v32 = sub_20F018B88(v31);
    MEMORY[0x212BC6398](v32, 0x10B2C40B42A76A6);
  }
  return a1;
}

void sub_20F0192DC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A61948);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A61948))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry_unsanitized");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A61940);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A61948);
  }
  *a1 = qword_254A61940;
}

void sub_20F019378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A61948);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A61948);
  _Unwind_Resume(a1);
}

void sub_20F0193D0(_QWORD *a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  const char *v7;
  size_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  const char *v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  void *p_p;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  size_t v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  size_t v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  const char *v70;
  size_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  size_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  int v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  double v115;
  double v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  size_t v128;
  unsigned __int8 v129;
  const char *v130;
  size_t v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  NSObject *v138;
  uint64_t *v139;
  uint64_t *v140;
  size_t v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  int v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  int v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  size_t v191;
  unsigned __int8 v192;
  const char *v193;
  size_t v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  NSObject *v201;
  uint64_t *v202;
  uint64_t *v203;
  size_t v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  const char *v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  int v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  int v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v251;
  const char *v252;
  size_t v253;
  unsigned __int8 v254;
  unsigned __int8 v255;
  const char *v256;
  size_t v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  NSObject *v264;
  size_t v265;
  std::__shared_weak_count_vtbl *v266;
  std::__shared_weak_count *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  const char *v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  void *v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  const char *v305;
  const char *v306;
  const char *v307;
  int v308;
  int v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  const char *v320;
  uint64_t *v321;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v323;
  int v324;
  const char *v325;
  int v326;
  const char *v327;
  uint64_t v328;
  std::__shared_weak_count *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _BYTE object[24];
  __int128 v334;
  void *__p;
  size_t v336;
  unint64_t v337;
  char v338;
  uint64_t v339;

  v339 = *MEMORY[0x24BDAC8D0];
  if (a1[10] < a1[161])
    return;
  sub_20F0192DC(&v330);
  if (**(int **)(v330 + 56) <= 4)
  {
    v2 = *(unsigned __int8 *)(v330 + 72);
    v3 = sub_20E8C31DC(v330, "OSLogSurrogateAppender", 1, 0);
    v4 = v3;
    if (v2 || v3 != 0)
    {
      v321 = &v330;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v323 = std::chrono::system_clock::now().__d_.__rep_;
      v324 = 4;
      v325 = "unknown file";
      v326 = 799;
      v328 = 0;
      v329 = 0;
      v327 = "unknown function";
      v6 = v330;
      v7 = (const char *)(v330 + 16);
      v316 = v330 + 16;
      if (*(char *)(v330 + 39) < 0)
      {
        v7 = *(const char **)(v330 + 16);
        v8 = *(_QWORD *)(v330 + 24);
        v10 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v10 & 1) != 0)
          goto LABEL_11;
      }
      else
      {
        v8 = *(unsigned __int8 *)(v330 + 39);
        v9 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v9 & 1) != 0)
          goto LABEL_11;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v334 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_11:
      if (byte_254A4A4F8[23] >= 0)
        v11 = byte_254A4A4F8;
      else
        v11 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v12 = byte_254A4A4F8[23];
      else
        v12 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v11, v7);
      v13 = &object[8];
      if (v12 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = operator new(v14 + 1);
        *(_QWORD *)&object[16] = v12;
        *(_QWORD *)&v334 = v15 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v13;
      }
      else
      {
        BYTE7(v334) = v12;
        if (!v12)
        {
LABEL_25:
          v13[v12] = 0;
          BYTE8(v334) = 1;
          p_p = &__p;
          if (v8 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v8 >= 0x17)
          {
            v17 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v8 | 7) != 0x17)
              v17 = v8 | 7;
            v18 = v17 + 1;
            p_p = operator new(v17 + 1);
            v336 = v8;
            v337 = v18 | 0x8000000000000000;
            __p = p_p;
          }
          else
          {
            HIBYTE(v337) = v8;
            if (!v8)
              goto LABEL_33;
          }
          memmove(p_p, v7, v8);
LABEL_33:
          *((_BYTE *)p_p + v8) = 0;
          v338 = 1;
          v19 = *(NSObject **)object;
          if (SHIBYTE(v337) < 0)
            operator delete(__p);
          if (BYTE8(v334) && SBYTE7(v334) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v4 && *(_QWORD *)(v4 + 24))
          {
            v20 = _os_log_pack_size();
            v21 = (std::__shared_weak_count_vtbl *)operator new(v20, (std::align_val_t)8uLL);
            v22 = (std::__shared_weak_count *)operator new();
            v23 = v22;
            v22->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v22->__shared_owners_;
            v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v22->__shared_weak_owners_ = 0;
            v22[1].__vftable = v21;
            *(_QWORD *)object = v21;
            *(_QWORD *)&object[8] = v21;
            *(_QWORD *)&object[16] = v22;
            do
              v25 = __ldxr(p_shared_owners);
            while (__stxr(v25 + 1, p_shared_owners));
            v334 = 0uLL;
            __p = 0;
            do
              v26 = __ldaxr(p_shared_owners);
            while (__stlxr(v26 - 1, p_shared_owners));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v23);
            }
            v27 = *(_QWORD *)object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v28 = operator new();
            v29 = *(unsigned __int8 *)(v6 + 39);
            v30 = v316;
            if ((v29 & 0x80u) != 0)
            {
              v30 = *(_QWORD *)(v6 + 16);
              v29 = *(_QWORD *)(v6 + 24);
            }
            *(_QWORD *)v28 = v27;
            *(_OWORD *)(v28 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v28 + 24) = v334;
            v334 = 0uLL;
            *(_QWORD *)(v28 + 40) = v30;
            *(_QWORD *)(v28 + 48) = v29;
            *(_BYTE *)(v28 + 56) = 16;
            v331 = 0;
            v332 = v28;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24), &v332);
            v31 = v332;
            v332 = 0;
            if (v31)
            {
              v32 = *(std::__shared_weak_count **)(v31 + 32);
              if (v32)
              {
                v33 = (unint64_t *)&v32->__shared_owners_;
                do
                  v34 = __ldaxr(v33);
                while (__stlxr(v34 - 1, v33));
                if (!v34)
                {
                  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                  std::__shared_weak_count::__release_weak(v32);
                }
              }
              v35 = *(std::__shared_weak_count **)(v31 + 16);
              if (v35)
              {
                v36 = (unint64_t *)&v35->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
              }
              MEMORY[0x212BC6398](v31, 0x10F0C40B62ED6C6);
              v38 = v331;
              v331 = 0;
              if (v38)
              {
                v39 = *(std::__shared_weak_count **)(v38 + 32);
                if (v39)
                {
                  v40 = (unint64_t *)&v39->__shared_owners_;
                  do
                    v41 = __ldaxr(v40);
                  while (__stlxr(v41 - 1, v40));
                  if (!v41)
                  {
                    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                    std::__shared_weak_count::__release_weak(v39);
                  }
                }
                v42 = *(std::__shared_weak_count **)(v38 + 16);
                if (v42)
                {
                  v43 = (unint64_t *)&v42->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                    std::__shared_weak_count::__release_weak(v42);
                  }
                }
                MEMORY[0x212BC6398](v38, 0x10F0C40B62ED6C6);
              }
            }
            v45 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
            if (*((_QWORD *)&v334 + 1))
            {
              v46 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            v48 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v49 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
          }
          else
          {
            os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
            *(_WORD *)object = 0;
            v51 = (void *)_os_log_send_and_compose_impl();
            if (v51)
              free(v51);
          }
          if (v2)
          {
            sub_20E8C003C((uint64_t)&v321, "Frame buffer is overflowing:");
            sub_20E863570((uint64_t)&v321);
          }
          sub_20E863570((uint64_t)&v321);
          v52 = v329;
          if (v329)
          {
            v53 = (unint64_t *)&v329->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          goto LABEL_92;
        }
      }
      memmove(v13, v11, v12);
      goto LABEL_25;
    }
  }
LABEL_92:
  v55 = a1[8];
  v56 = a1[9];
  sub_20F0192DC(&v330);
  if (**(int **)(v330 + 56) > 3)
    goto LABEL_190;
  v57 = *(unsigned __int8 *)(v330 + 72);
  v58 = sub_20E8C31DC(v330, "OSLogSurrogateAppender", 1, 0);
  v59 = v58;
  if (!v57 && v58 == 0)
    goto LABEL_190;
  v321 = &v330;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v323 = std::chrono::system_clock::now().__d_.__rep_;
  v324 = 3;
  v325 = "unknown file";
  v326 = 804;
  v328 = 0;
  v329 = 0;
  v327 = "unknown function";
  v61 = *(_QWORD *)(v56 + 16);
  v62 = -1.0;
  v63 = -1.0;
  if (v61 != *(_QWORD *)(v56 + 24))
    v63 = *(double *)(v61 + 8) + *(double *)(v61 + 16);
  v310 = v57;
  v64 = *(_QWORD *)(v55 + 16);
  if (v64 != *(_QWORD *)(v55 + 24))
    v62 = *(double *)(v64 + 8) + *(double *)(v64 + 16);
  v313 = v55;
  v65 = *v321;
  v66 = (const char *)(*v321 + 16);
  v307 = v66;
  if (*(char *)(*v321 + 39) < 0)
  {
    v66 = *(const char **)(v65 + 16);
    v67 = *(_QWORD *)(v65 + 24);
    v317 = a1[10];
    v69 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v69 & 1) != 0)
      goto LABEL_105;
  }
  else
  {
    v67 = *(unsigned __int8 *)(*v321 + 39);
    v317 = a1[10];
    v68 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v68 & 1) != 0)
      goto LABEL_105;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if ((_BYTE)v334 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_105:
  if (byte_254A4A4F8[23] >= 0)
    v70 = byte_254A4A4F8;
  else
    v70 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v71 = byte_254A4A4F8[23];
  else
    v71 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v70, v66);
  v72 = &object[8];
  if (v71 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v71 >= 0x17)
  {
    v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v73 = v71 | 7;
    v74 = v73 + 1;
    v72 = operator new(v73 + 1);
    *(_QWORD *)&object[16] = v71;
    *(_QWORD *)&v334 = v74 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v72;
    goto LABEL_118;
  }
  BYTE7(v334) = v71;
  if (v71)
LABEL_118:
    memmove(v72, v70, v71);
  v72[v71] = 0;
  BYTE8(v334) = 1;
  v75 = &__p;
  if (v67 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v67 >= 0x17)
  {
    v76 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v76 = v67 | 7;
    v77 = v76 + 1;
    v75 = operator new(v76 + 1);
    v336 = v67;
    v337 = v77 | 0x8000000000000000;
    __p = v75;
  }
  else
  {
    HIBYTE(v337) = v67;
    if (!v67)
      goto LABEL_127;
  }
  memmove(v75, v66, v67);
LABEL_127:
  *((_BYTE *)v75 + v67) = 0;
  v338 = 1;
  v78 = *(NSObject **)object;
  if (SHIBYTE(v337) < 0)
    operator delete(__p);
  if (BYTE8(v334) && SBYTE7(v334) < 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v59 && *(_QWORD *)(v59 + 24))
  {
    v79 = _os_log_pack_size();
    v80 = (std::__shared_weak_count_vtbl *)operator new(v79, (std::align_val_t)8uLL);
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v81;
    v81->__shared_owners_ = 0;
    v83 = (unint64_t *)&v81->__shared_owners_;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
    *(_QWORD *)object = v80;
    *(_QWORD *)&object[8] = v80;
    *(_QWORD *)&object[16] = v81;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
    v334 = 0uLL;
    __p = 0;
    do
      v85 = __ldaxr(v83);
    while (__stlxr(v85 - 1, v83));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v82);
    }
    v86 = *(_QWORD *)object;
    v87 = _os_log_pack_fill();
    *(_DWORD *)v87 = 134218496;
    *(double *)(v87 + 4) = v63;
    *(_WORD *)(v87 + 12) = 2048;
    *(double *)(v87 + 14) = v62;
    *(_WORD *)(v87 + 22) = 2048;
    *(_QWORD *)(v87 + 24) = v317;
    v88 = operator new();
    v89 = *(unsigned __int8 *)(v65 + 39);
    v90 = v307;
    if ((v89 & 0x80u) != 0)
    {
      v90 = *(const char **)(v65 + 16);
      v89 = *(_QWORD *)(v65 + 24);
    }
    *(_QWORD *)v88 = v86;
    *(_OWORD *)(v88 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v88 + 24) = v334;
    v334 = 0uLL;
    *(_QWORD *)(v88 + 40) = v90;
    *(_QWORD *)(v88 + 48) = v89;
    *(_BYTE *)(v88 + 56) = 1;
    v331 = 0;
    v332 = v88;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v59 + 24) + 40))(*(_QWORD *)(v59 + 24), &v332);
    v91 = v332;
    v332 = 0;
    v92 = v310;
    if (v91)
    {
      v93 = *(std::__shared_weak_count **)(v91 + 32);
      if (v93)
      {
        v94 = (unint64_t *)&v93->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v96 = *(std::__shared_weak_count **)(v91 + 16);
      if (v96)
      {
        v97 = (unint64_t *)&v96->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      MEMORY[0x212BC6398](v91, 0x10F0C40B62ED6C6);
      v99 = v331;
      v331 = 0;
      if (v99)
      {
        v100 = *(std::__shared_weak_count **)(v99 + 32);
        if (v100)
        {
          v101 = (unint64_t *)&v100->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        v103 = *(std::__shared_weak_count **)(v99 + 16);
        if (v103)
        {
          v104 = (unint64_t *)&v103->__shared_owners_;
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
        MEMORY[0x212BC6398](v99, 0x10F0C40B62ED6C6);
      }
    }
    v106 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
    v107 = v313;
    if (*((_QWORD *)&v334 + 1))
    {
      v108 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    v110 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v111 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
  }
  else
  {
    os_log_type_enabled(v78, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134218496;
    *(double *)&object[4] = v63;
    *(_WORD *)&object[12] = 2048;
    *(double *)&object[14] = v62;
    *(_WORD *)&object[22] = 2048;
    *(_QWORD *)&v334 = v317;
    v113 = (void *)_os_log_send_and_compose_impl();
    v107 = v313;
    v92 = v310;
    if (v113)
      free(v113);
  }
  if (v92)
  {
    v114 = *(_QWORD *)(v56 + 16);
    v115 = -1.0;
    v116 = -1.0;
    if (v114 != *(_QWORD *)(v56 + 24))
      v116 = *(double *)(v114 + 8) + *(double *)(v114 + 16);
    v117 = *(_QWORD *)(v107 + 16);
    if (v117 != *(_QWORD *)(v107 + 24))
      v115 = *(double *)(v117 + 8) + *(double *)(v117 + 16);
    sub_20E8C003C((uint64_t)&v321, "  Frame timestamps: %f ... %f   { %zu }", v116, v115, a1[10]);
    sub_20E863570((uint64_t)&v321);
  }
  sub_20E863570((uint64_t)&v321);
  v118 = v329;
  if (v329)
  {
    v119 = (unint64_t *)&v329->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
LABEL_190:
  sub_20F0192DC(&v330);
  if (**(int **)(v330 + 56) > 3)
    goto LABEL_284;
  v121 = *(unsigned __int8 *)(v330 + 72);
  v122 = sub_20E8C31DC(v330, "OSLogSurrogateAppender", 1, 0);
  v123 = v122;
  if (!v121 && v122 == 0)
    goto LABEL_284;
  v321 = &v330;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v323 = std::chrono::system_clock::now().__d_.__rep_;
  v324 = 3;
  v325 = "unknown file";
  v326 = 809;
  v328 = 0;
  v329 = 0;
  v327 = "unknown function";
  v125 = a1[31];
  if (!v125)
    v125 = (uint64_t)(a1[28] - a1[27]) >> 5;
  v318 = a1[27];
  v308 = v121;
  v126 = *v321;
  v127 = (const char *)(*v321 + 16);
  v305 = v127;
  if (*(char *)(*v321 + 39) < 0)
  {
    v127 = *(const char **)(v126 + 16);
    v128 = *(_QWORD *)(v126 + 24);
  }
  else
  {
    v128 = *(unsigned __int8 *)(*v321 + 39);
  }
  v311 = a1[32];
  v314 = a1[30];
  v129 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v129 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if ((_BYTE)v334 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v130 = byte_254A4A4F8;
  else
    v130 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v131 = byte_254A4A4F8[23];
  else
    v131 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v130, v127);
  v132 = &object[8];
  if (v131 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v131 >= 0x17)
  {
    v133 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v131 | 7) != 0x17)
      v133 = v131 | 7;
    v134 = v133 + 1;
    v132 = operator new(v133 + 1);
    *(_QWORD *)&object[16] = v131;
    *(_QWORD *)&v334 = v134 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v132;
    goto LABEL_214;
  }
  BYTE7(v334) = v131;
  if (v131)
LABEL_214:
    memmove(v132, v130, v131);
  v132[v131] = 0;
  BYTE8(v334) = 1;
  v135 = &__p;
  if (v128 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v128 >= 0x17)
  {
    v136 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v128 | 7) != 0x17)
      v136 = v128 | 7;
    v137 = v136 + 1;
    v135 = operator new(v136 + 1);
    v336 = v128;
    v337 = v137 | 0x8000000000000000;
    __p = v135;
  }
  else
  {
    HIBYTE(v337) = v128;
    if (!v128)
      goto LABEL_223;
  }
  memmove(v135, v127, v128);
LABEL_223:
  *((_BYTE *)v135 + v128) = 0;
  v338 = 1;
  v138 = *(NSObject **)object;
  if (SHIBYTE(v337) < 0)
    operator delete(__p);
  if (BYTE8(v334) && SBYTE7(v334) < 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v139 = (uint64_t *)(v318 + 32 * v314);
  v140 = (uint64_t *)(v318 + 32 * v125 - 32);
  if (v123 && *(_QWORD *)(v123 + 24))
  {
    v141 = _os_log_pack_size();
    v142 = (std::__shared_weak_count_vtbl *)operator new(v141, (std::align_val_t)8uLL);
    v143 = (std::__shared_weak_count *)operator new();
    v144 = v143;
    v143->__shared_owners_ = 0;
    v145 = (unint64_t *)&v143->__shared_owners_;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v142;
    *(_QWORD *)object = v142;
    *(_QWORD *)&object[8] = v142;
    *(_QWORD *)&object[16] = v143;
    do
      v146 = __ldxr(v145);
    while (__stxr(v146 + 1, v145));
    v334 = 0uLL;
    __p = 0;
    do
      v147 = __ldaxr(v145);
    while (__stlxr(v147 - 1, v145));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v144);
    }
    v148 = *(_QWORD *)object;
    v149 = _os_log_pack_fill();
    v150 = *v139;
    v151 = *v140;
    *(_DWORD *)v149 = 134218496;
    *(_QWORD *)(v149 + 4) = v150;
    *(_WORD *)(v149 + 12) = 2048;
    *(_QWORD *)(v149 + 14) = v151;
    *(_WORD *)(v149 + 22) = 2048;
    *(_QWORD *)(v149 + 24) = v311;
    v152 = operator new();
    v153 = *(unsigned __int8 *)(v126 + 39);
    v154 = v305;
    if ((v153 & 0x80u) != 0)
    {
      v154 = *(const char **)(v126 + 16);
      v153 = *(_QWORD *)(v126 + 24);
    }
    *(_QWORD *)v152 = v148;
    *(_OWORD *)(v152 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v152 + 24) = v334;
    v334 = 0uLL;
    *(_QWORD *)(v152 + 40) = v154;
    *(_QWORD *)(v152 + 48) = v153;
    *(_BYTE *)(v152 + 56) = 1;
    v331 = 0;
    v332 = v152;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v123 + 24) + 40))(*(_QWORD *)(v123 + 24), &v332);
    v155 = v332;
    v332 = 0;
    if (v155)
    {
      v156 = *(std::__shared_weak_count **)(v155 + 32);
      if (v156)
      {
        v157 = (unint64_t *)&v156->__shared_owners_;
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 - 1, v157));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
      v159 = *(std::__shared_weak_count **)(v155 + 16);
      if (v159)
      {
        v160 = (unint64_t *)&v159->__shared_owners_;
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
        }
      }
      MEMORY[0x212BC6398](v155, 0x10F0C40B62ED6C6);
      v162 = v331;
      v331 = 0;
      if (v162)
      {
        v163 = *(std::__shared_weak_count **)(v162 + 32);
        if (v163)
        {
          v164 = (unint64_t *)&v163->__shared_owners_;
          do
            v165 = __ldaxr(v164);
          while (__stlxr(v165 - 1, v164));
          if (!v165)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        v166 = *(std::__shared_weak_count **)(v162 + 16);
        if (v166)
        {
          v167 = (unint64_t *)&v166->__shared_owners_;
          do
            v168 = __ldaxr(v167);
          while (__stlxr(v168 - 1, v167));
          if (!v168)
          {
            ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
            std::__shared_weak_count::__release_weak(v166);
          }
        }
        MEMORY[0x212BC6398](v162, 0x10F0C40B62ED6C6);
      }
    }
    v169 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
    v170 = v308;
    if (*((_QWORD *)&v334 + 1))
    {
      v171 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
    v173 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v174 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v175 = __ldaxr(v174);
      while (__stlxr(v175 - 1, v174));
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
  }
  else
  {
    os_log_type_enabled(v138, OS_LOG_TYPE_INFO);
    v176 = *v139;
    v177 = *v140;
    *(_DWORD *)object = 134218496;
    *(_QWORD *)&object[4] = v176;
    *(_WORD *)&object[12] = 2048;
    *(_QWORD *)&object[14] = v177;
    *(_WORD *)&object[22] = 2048;
    *(_QWORD *)&v334 = v311;
    v178 = (void *)_os_log_send_and_compose_impl();
    v170 = v308;
    if (v178)
      free(v178);
  }
  if (v170)
  {
    v179 = a1[27];
    v180 = a1[31];
    if (!v180)
      v180 = (a1[28] - v179) >> 5;
    sub_20E8C003C((uint64_t)&v321, "  Accel timestamps: %f ... %f   { %zu }", *(double *)(v179 + 32 * a1[30]), *(double *)(v179 + 32 * v180 - 32), a1[32]);
    sub_20E863570((uint64_t)&v321);
  }
  sub_20E863570((uint64_t)&v321);
  v181 = v329;
  if (v329)
  {
    v182 = (unint64_t *)&v329->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
LABEL_284:
  sub_20F0192DC(&v330);
  if (**(int **)(v330 + 56) > 3)
    goto LABEL_378;
  v184 = *(unsigned __int8 *)(v330 + 72);
  v185 = sub_20E8C31DC(v330, "OSLogSurrogateAppender", 1, 0);
  v186 = v185;
  if (!v184 && v185 == 0)
    goto LABEL_378;
  v321 = &v330;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v323 = std::chrono::system_clock::now().__d_.__rep_;
  v324 = 3;
  v325 = "unknown file";
  v326 = 812;
  v328 = 0;
  v329 = 0;
  v327 = "unknown function";
  v188 = a1[25];
  if (!v188)
    v188 = (uint64_t)(a1[22] - a1[21]) >> 5;
  v319 = a1[21];
  v309 = v184;
  v189 = *v321;
  v190 = (const char *)(*v321 + 16);
  v306 = v190;
  if (*(char *)(*v321 + 39) < 0)
  {
    v190 = *(const char **)(v189 + 16);
    v191 = *(_QWORD *)(v189 + 24);
  }
  else
  {
    v191 = *(unsigned __int8 *)(*v321 + 39);
  }
  v312 = a1[26];
  v315 = a1[24];
  v192 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v192 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if ((_BYTE)v334 && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v193 = byte_254A4A4F8;
  else
    v193 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v194 = byte_254A4A4F8[23];
  else
    v194 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v193, v190);
  v195 = &object[8];
  if (v194 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v194 >= 0x17)
  {
    v196 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v194 | 7) != 0x17)
      v196 = v194 | 7;
    v197 = v196 + 1;
    v195 = operator new(v196 + 1);
    *(_QWORD *)&object[16] = v194;
    *(_QWORD *)&v334 = v197 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v195;
    goto LABEL_308;
  }
  BYTE7(v334) = v194;
  if (v194)
LABEL_308:
    memmove(v195, v193, v194);
  v195[v194] = 0;
  BYTE8(v334) = 1;
  v198 = &__p;
  if (v191 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v191 >= 0x17)
  {
    v199 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17)
      v199 = v191 | 7;
    v200 = v199 + 1;
    v198 = operator new(v199 + 1);
    v336 = v191;
    v337 = v200 | 0x8000000000000000;
    __p = v198;
  }
  else
  {
    HIBYTE(v337) = v191;
    if (!v191)
      goto LABEL_317;
  }
  memmove(v198, v190, v191);
LABEL_317:
  *((_BYTE *)v198 + v191) = 0;
  v338 = 1;
  v201 = *(NSObject **)object;
  if (SHIBYTE(v337) < 0)
    operator delete(__p);
  if (BYTE8(v334) && SBYTE7(v334) < 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v202 = (uint64_t *)(v319 + 32 * v315);
  v203 = (uint64_t *)(v319 + 32 * v188 - 32);
  if (v186 && *(_QWORD *)(v186 + 24))
  {
    v204 = _os_log_pack_size();
    v205 = (std::__shared_weak_count_vtbl *)operator new(v204, (std::align_val_t)8uLL);
    v206 = (std::__shared_weak_count *)operator new();
    v207 = v206;
    v206->__shared_owners_ = 0;
    v208 = (unint64_t *)&v206->__shared_owners_;
    v206->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v206->__shared_weak_owners_ = 0;
    v206[1].__vftable = v205;
    *(_QWORD *)object = v205;
    *(_QWORD *)&object[8] = v205;
    *(_QWORD *)&object[16] = v206;
    do
      v209 = __ldxr(v208);
    while (__stxr(v209 + 1, v208));
    v334 = 0uLL;
    __p = 0;
    do
      v210 = __ldaxr(v208);
    while (__stlxr(v210 - 1, v208));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v207);
    }
    v211 = *(_QWORD *)object;
    v212 = _os_log_pack_fill();
    v213 = *v202;
    v214 = *v203;
    *(_DWORD *)v212 = 134218496;
    *(_QWORD *)(v212 + 4) = v213;
    *(_WORD *)(v212 + 12) = 2048;
    *(_QWORD *)(v212 + 14) = v214;
    *(_WORD *)(v212 + 22) = 2048;
    *(_QWORD *)(v212 + 24) = v312;
    v215 = operator new();
    v216 = *(unsigned __int8 *)(v189 + 39);
    v217 = v306;
    if ((v216 & 0x80u) != 0)
    {
      v217 = *(const char **)(v189 + 16);
      v216 = *(_QWORD *)(v189 + 24);
    }
    *(_QWORD *)v215 = v211;
    *(_OWORD *)(v215 + 8) = *(_OWORD *)&object[8];
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v215 + 24) = v334;
    v334 = 0uLL;
    *(_QWORD *)(v215 + 40) = v217;
    *(_QWORD *)(v215 + 48) = v216;
    *(_BYTE *)(v215 + 56) = 1;
    v331 = 0;
    v332 = v215;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v186 + 24) + 40))(*(_QWORD *)(v186 + 24), &v332);
    v218 = v332;
    v332 = 0;
    if (v218)
    {
      v219 = *(std::__shared_weak_count **)(v218 + 32);
      if (v219)
      {
        v220 = (unint64_t *)&v219->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
      v222 = *(std::__shared_weak_count **)(v218 + 16);
      if (v222)
      {
        v223 = (unint64_t *)&v222->__shared_owners_;
        do
          v224 = __ldaxr(v223);
        while (__stlxr(v224 - 1, v223));
        if (!v224)
        {
          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
          std::__shared_weak_count::__release_weak(v222);
        }
      }
      MEMORY[0x212BC6398](v218, 0x10F0C40B62ED6C6);
      v225 = v331;
      v331 = 0;
      if (v225)
      {
        v226 = *(std::__shared_weak_count **)(v225 + 32);
        if (v226)
        {
          v227 = (unint64_t *)&v226->__shared_owners_;
          do
            v228 = __ldaxr(v227);
          while (__stlxr(v228 - 1, v227));
          if (!v228)
          {
            ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
            std::__shared_weak_count::__release_weak(v226);
          }
        }
        v229 = *(std::__shared_weak_count **)(v225 + 16);
        if (v229)
        {
          v230 = (unint64_t *)&v229->__shared_owners_;
          do
            v231 = __ldaxr(v230);
          while (__stlxr(v231 - 1, v230));
          if (!v231)
          {
            ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
            std::__shared_weak_count::__release_weak(v229);
          }
        }
        MEMORY[0x212BC6398](v225, 0x10F0C40B62ED6C6);
      }
    }
    v232 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
    v233 = v309;
    if (*((_QWORD *)&v334 + 1))
    {
      v234 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
      do
        v235 = __ldaxr(v234);
      while (__stlxr(v235 - 1, v234));
      if (!v235)
      {
        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
        std::__shared_weak_count::__release_weak(v232);
      }
    }
    v236 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v237 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v238 = __ldaxr(v237);
      while (__stlxr(v238 - 1, v237));
      if (!v238)
      {
        ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
        std::__shared_weak_count::__release_weak(v236);
      }
    }
  }
  else
  {
    os_log_type_enabled(v201, OS_LOG_TYPE_INFO);
    v239 = *v202;
    v240 = *v203;
    *(_DWORD *)object = 134218496;
    *(_QWORD *)&object[4] = v239;
    *(_WORD *)&object[12] = 2048;
    *(_QWORD *)&object[14] = v240;
    *(_WORD *)&object[22] = 2048;
    *(_QWORD *)&v334 = v312;
    v241 = (void *)_os_log_send_and_compose_impl();
    v233 = v309;
    if (v241)
      free(v241);
  }
  if (v233)
  {
    v242 = a1[21];
    v243 = a1[25];
    if (!v243)
      v243 = (a1[22] - v242) >> 5;
    sub_20E8C003C((uint64_t)&v321, "  Gyro  timestamps: %f ... %f   { %zu }", *(double *)(v242 + 32 * a1[24]), *(double *)(v242 + 32 * v243 - 32), a1[26]);
    sub_20E863570((uint64_t)&v321);
  }
  sub_20E863570((uint64_t)&v321);
  v244 = v329;
  if (v329)
  {
    v245 = (unint64_t *)&v329->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
LABEL_378:
  sub_20F0192DC(&v330);
  if (**(int **)(v330 + 56) <= 3)
  {
    v247 = *(unsigned __int8 *)(v330 + 72);
    v248 = sub_20E8C31DC(v330, "OSLogSurrogateAppender", 1, 0);
    v249 = v248;
    if (v247 || v248 != 0)
    {
      v321 = &v330;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v323 = std::chrono::system_clock::now().__d_.__rep_;
      v324 = 3;
      v325 = "unknown file";
      v326 = 814;
      v328 = 0;
      v329 = 0;
      v327 = "unknown function";
      v251 = *v321;
      v252 = (const char *)(*v321 + 16);
      v320 = v252;
      if (*(char *)(*v321 + 39) < 0)
      {
        v252 = *(const char **)(v251 + 16);
        v253 = *(_QWORD *)(v251 + 24);
        v255 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v255 & 1) != 0)
          goto LABEL_387;
      }
      else
      {
        v253 = *(unsigned __int8 *)(*v321 + 39);
        v254 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v254 & 1) != 0)
          goto LABEL_387;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v334 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_387:
      if (byte_254A4A4F8[23] >= 0)
        v256 = byte_254A4A4F8;
      else
        v256 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v257 = byte_254A4A4F8[23];
      else
        v257 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v256, v252);
      v258 = &object[8];
      if (v257 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v257 >= 0x17)
      {
        v259 = (v257 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v257 | 7) != 0x17)
          v259 = v257 | 7;
        v260 = v259 + 1;
        v258 = operator new(v259 + 1);
        *(_QWORD *)&object[16] = v257;
        *(_QWORD *)&v334 = v260 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v258;
      }
      else
      {
        BYTE7(v334) = v257;
        if (!v257)
        {
LABEL_401:
          v258[v257] = 0;
          BYTE8(v334) = 1;
          v261 = &__p;
          if (v253 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v253 >= 0x17)
          {
            v262 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v253 | 7) != 0x17)
              v262 = v253 | 7;
            v263 = v262 + 1;
            v261 = operator new(v262 + 1);
            v336 = v253;
            v337 = v263 | 0x8000000000000000;
            __p = v261;
          }
          else
          {
            HIBYTE(v337) = v253;
            if (!v253)
              goto LABEL_409;
          }
          memmove(v261, v252, v253);
LABEL_409:
          *((_BYTE *)v261 + v253) = 0;
          v338 = 1;
          v264 = *(NSObject **)object;
          if (SHIBYTE(v337) < 0)
            operator delete(__p);
          if (BYTE8(v334) && SBYTE7(v334) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v249 && *(_QWORD *)(v249 + 24))
          {
            v265 = _os_log_pack_size();
            v266 = (std::__shared_weak_count_vtbl *)operator new(v265, (std::align_val_t)8uLL);
            v267 = (std::__shared_weak_count *)operator new();
            v268 = v267;
            v267->__shared_owners_ = 0;
            v269 = (unint64_t *)&v267->__shared_owners_;
            v267->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v267->__shared_weak_owners_ = 0;
            v267[1].__vftable = v266;
            *(_QWORD *)object = v266;
            *(_QWORD *)&object[8] = v266;
            *(_QWORD *)&object[16] = v267;
            do
              v270 = __ldxr(v269);
            while (__stxr(v270 + 1, v269));
            v334 = 0uLL;
            __p = 0;
            do
              v271 = __ldaxr(v269);
            while (__stlxr(v271 - 1, v269));
            if (!v271)
            {
              ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
              std::__shared_weak_count::__release_weak(v268);
            }
            v272 = *(_QWORD *)object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v273 = operator new();
            v274 = *(unsigned __int8 *)(v251 + 39);
            v275 = v320;
            if ((v274 & 0x80u) != 0)
            {
              v275 = *(const char **)(v251 + 16);
              v274 = *(_QWORD *)(v251 + 24);
            }
            *(_QWORD *)v273 = v272;
            *(_OWORD *)(v273 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v273 + 24) = v334;
            v334 = 0uLL;
            *(_QWORD *)(v273 + 40) = v275;
            *(_QWORD *)(v273 + 48) = v274;
            *(_BYTE *)(v273 + 56) = 1;
            v331 = 0;
            v332 = v273;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v249 + 24) + 40))(*(_QWORD *)(v249 + 24), &v332);
            v276 = v332;
            v332 = 0;
            if (v276)
            {
              v277 = *(std::__shared_weak_count **)(v276 + 32);
              if (v277)
              {
                v278 = (unint64_t *)&v277->__shared_owners_;
                do
                  v279 = __ldaxr(v278);
                while (__stlxr(v279 - 1, v278));
                if (!v279)
                {
                  ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                  std::__shared_weak_count::__release_weak(v277);
                }
              }
              v280 = *(std::__shared_weak_count **)(v276 + 16);
              if (v280)
              {
                v281 = (unint64_t *)&v280->__shared_owners_;
                do
                  v282 = __ldaxr(v281);
                while (__stlxr(v282 - 1, v281));
                if (!v282)
                {
                  ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                  std::__shared_weak_count::__release_weak(v280);
                }
              }
              MEMORY[0x212BC6398](v276, 0x10F0C40B62ED6C6);
              v283 = v331;
              v331 = 0;
              if (v283)
              {
                v284 = *(std::__shared_weak_count **)(v283 + 32);
                if (v284)
                {
                  v285 = (unint64_t *)&v284->__shared_owners_;
                  do
                    v286 = __ldaxr(v285);
                  while (__stlxr(v286 - 1, v285));
                  if (!v286)
                  {
                    ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                    std::__shared_weak_count::__release_weak(v284);
                  }
                }
                v287 = *(std::__shared_weak_count **)(v283 + 16);
                if (v287)
                {
                  v288 = (unint64_t *)&v287->__shared_owners_;
                  do
                    v289 = __ldaxr(v288);
                  while (__stlxr(v289 - 1, v288));
                  if (!v289)
                  {
                    ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                    std::__shared_weak_count::__release_weak(v287);
                  }
                }
                MEMORY[0x212BC6398](v283, 0x10F0C40B62ED6C6);
              }
            }
            v290 = (std::__shared_weak_count *)*((_QWORD *)&v334 + 1);
            if (*((_QWORD *)&v334 + 1))
            {
              v291 = (unint64_t *)(*((_QWORD *)&v334 + 1) + 8);
              do
                v292 = __ldaxr(v291);
              while (__stlxr(v292 - 1, v291));
              if (!v292)
              {
                ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
                std::__shared_weak_count::__release_weak(v290);
              }
            }
            v293 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v294 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v295 = __ldaxr(v294);
              while (__stlxr(v295 - 1, v294));
              if (!v295)
              {
                ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                std::__shared_weak_count::__release_weak(v293);
              }
            }
          }
          else
          {
            os_log_type_enabled(v264, OS_LOG_TYPE_INFO);
            *(_WORD *)object = 0;
            v296 = (void *)_os_log_send_and_compose_impl();
            if (v296)
              free(v296);
          }
          if (v247)
          {
            sub_20E8C003C((uint64_t)&v321, "  Dropping oldest frame!");
            sub_20E863570((uint64_t)&v321);
          }
          sub_20E863570((uint64_t)&v321);
          v297 = v329;
          if (v329)
          {
            v298 = (unint64_t *)&v329->__shared_owners_;
            do
              v299 = __ldaxr(v298);
            while (__stlxr(v299 - 1, v298));
            if (!v299)
            {
              ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
              std::__shared_weak_count::__release_weak(v297);
            }
          }
          goto LABEL_468;
        }
      }
      memmove(v258, v256, v257);
      goto LABEL_401;
    }
  }
LABEL_468:
  v300 = (uint64_t *)a1[9];
  v301 = *v300;
  *(_QWORD *)(v301 + 8) = v300[1];
  *(_QWORD *)v300[1] = v301;
  --a1[10];
  v302 = v300[2];
  if (v302)
  {
    v303 = v300[3];
    v304 = (void *)v300[2];
    if (v303 != v302)
    {
      do
      {
        v303 -= 240;
        sub_20E990F68(v303);
      }
      while (v303 != v302);
      v304 = (void *)v300[2];
    }
    v300[3] = v302;
    operator delete(v304);
  }
  operator delete(v300);
}

void sub_20F01B700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F01B760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20E86E8C4(&a28);
  sub_20E86E8C4(&a27);
  sub_20E86E658((uint64_t)&a29);
  sub_20E863714((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_20F01B854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01B868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F01BA58(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F01BDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01BE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01BE20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void **sub_20F01BE44(void **a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;

  v4 = *a1;
  if (*a1)
  {
    v5 = (uint64_t)a1[1];
    v6 = *a1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 240;
        sub_20E990F68(v5);
      }
      while ((void *)v5 != v4);
      v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void **)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return a1;
}

unint64_t sub_20F01BEC8(unint64_t result, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *(_QWORD *)(result + 24);
  v4 = *(_QWORD *)result;
  if (*(double *)(*(_QWORD *)result + 32 * v3) > a3)
    return result;
  v6 = (uint64_t *)result;
  v7 = *(_QWORD *)(result + 40);
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = (*(_QWORD *)(result + 8) - v4) >> 5;
    v11 = *(_QWORD *)(result + 40);
    do
    {
      v12 = v11 >> 1;
      v13 = (v11 >> 1) + v9;
      result = (v13 + v3) / v10;
      if (*(double *)(v4 + 32 * ((v13 + v3) % v10)) <= a3)
      {
        v9 = v13 + 1;
        v8 = v13 + 1 == v7;
        v12 = v11 + ~v12;
      }
      v11 = v12;
    }
    while (v12);
    v14 = v9 - 1;
    v15 = v9 - 1 == v7;
    if (!v8 && (*(double *)(v4 + 32 * ((v14 + v3) % v10)) > a3 || *(double *)(v4 + 32 * ((v9 + v3) % v10)) <= a3))
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.hpp", 364, (uint64_t)"gyro_it == measurements.end() || (*gyro_not_greater_iter).timestamp <= last_ref_frame_time && ((*gyro_it).timestamp > last_ref_frame_time)", 138, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((result & 1) != 0)
        abort();
      v3 = v6[3];
      v4 = *v6;
    }
  }
  else
  {
    v15 = 0;
    v14 = -1;
  }
  v16 = (uint64_t *)(v4 + 32 * ((v3 + v14) % (unint64_t)((v6[1] - v4) >> 5)));
  v17 = *v16;
  v18 = *(unsigned __int8 *)(a2 + 32);
  v19 = v16[3];
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v16 + 1);
  *(_QWORD *)(a2 + 24) = v19;
  if (v18)
  {
    *(_QWORD *)a2 = v17;
    v20 = v6[5];
    if (v20)
      goto LABEL_16;
LABEL_19:
    if (v15)
      return result;
    if (!v14)
    {
      v21 = 0;
LABEL_24:
      v22 = 0;
      do
      {
        v23 = v22 + v6[3];
        v24 = (v6[1] - *v6) >> 5;
        v25 = *v6 + 32 * ((v23 + v14) % v24);
        v26 = *v6 + 32 * (v23 % v24);
        v27 = *(_QWORD *)(v25 + 24);
        v28 = *(_OWORD *)(v25 + 8);
        *(_QWORD *)v26 = *(_QWORD *)v25;
        *(_OWORD *)(v26 + 8) = v28;
        *(_QWORD *)(v26 + 24) = v27;
        ++v22;
      }
      while (v14 + v22 != v6[5]);
      if (!v21)
        return result;
      goto LABEL_27;
    }
LABEL_23:
    v21 = -v14;
    goto LABEL_24;
  }
  *(_BYTE *)(a2 + 32) = 1;
  *(_QWORD *)a2 = v17;
  v20 = v6[5];
  if (!v20)
    goto LABEL_19;
LABEL_16:
  if (!v15)
  {
    if (!v14)
      return result;
    goto LABEL_23;
  }
  v21 = -v20;
LABEL_27:
  v29 = v6[4];
  do
  {
    if (!v29)
      v29 = (v6[1] - *v6) >> 5;
    v30 = *v6 + 32 * v29;
    *(_QWORD *)(v30 - 32) = 0xBFF0000000000000;
    *(_QWORD *)(v30 - 24) = 0;
    *(_QWORD *)(v30 - 16) = 0;
    *(_QWORD *)(v30 - 8) = 0;
    v31 = (v6[1] - *v6) >> 5;
    v32 = v6[5];
    if (v6[4])
      v31 = v6[4];
    v29 = v31 - 1;
    v6[4] = v29;
    v6[5] = v32 - 1;
  }
  while (!__CFADD__(v21++, 1));
  return result;
}

uint64_t sub_20F01C144(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;
  BOOL v5;
  BOOL v7;

  if (*(_BYTE *)(a1 + 8))
  {
    if (!a2)
    {
      if (a3)
        return *(_QWORD *)(a1 + 16) - a3;
      else
        return *(_QWORD *)(*(_QWORD *)a1 + 40);
    }
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v5 = 0;
  else
    v5 = a2 == 0;
  if (v5 && a3 == 0)
    return 0;
  if (v4)
    v7 = 1;
  else
    v7 = a2 == 0;
  if (v7)
    return v4 - a3;
  else
    return -*(_QWORD *)(*(_QWORD *)a1 + 40);
}

void sub_20F01C1C4(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v2 = *(_BYTE **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    if (a2 >> 61)
      sub_20E867F44();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 8 * a2;
    v6 = (char *)operator new(8 * a2);
    v7 = v4 - v2;
    v8 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    v9 = v8;
    if (v4 == v2)
      goto LABEL_11;
    if ((unint64_t)(v7 - 8) >= 0x58)
    {
      v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      if (v4 - v6 - (v7 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
      {
        v10 = v7 >> 3;
        v11 = ((unint64_t)(v7 - 8) >> 3) + 1;
        v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
        v13 = &v4[-v12];
        v9 = &v8[-v12];
        v14 = &v6[8 * v10 - 16];
        v15 = (__int128 *)(v4 - 16);
        v16 = v11 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v17 = *v15;
          *((_OWORD *)v14 - 1) = *(v15 - 1);
          *(_OWORD *)v14 = v17;
          v14 -= 32;
          v15 -= 2;
          v16 -= 4;
        }
        while (v16);
        v4 = v13;
        if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_11;
      }
    }
    else
    {
      v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v18 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *((_QWORD *)v9 - 1) = v18;
      v9 -= 8;
    }
    while (v4 != v2);
LABEL_11:
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v6[v5];
    if (v2)
      operator delete(v2);
  }
}

void sub_20F01C2E0(uint64_t a1, double a2)
{
  unint64_t v4;
  double *v5;
  double *v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  double *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  double *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(double **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *v5 = a2;
    v7 = (uint64_t)(v5 + 1);
    goto LABEL_22;
  }
  v8 = *(double **)a1;
  v9 = (uint64_t)v5 - *(_QWORD *)a1;
  v10 = v9 >> 3;
  v11 = (v9 >> 3) + 1;
  if (v11 >> 61)
    sub_20E867F44();
  v12 = v4 - (_QWORD)v8;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      sub_20E877A38();
    v14 = operator new(8 * v13);
    v15 = (double *)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = a2;
    v7 = (uint64_t)(v15 + 1);
    v17 = (char *)v5 - (char *)v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (double *)(8 * v10);
  v16 = 0;
  *(double *)(8 * v10) = a2;
  v7 = 8 * v10 + 8;
  v17 = (char *)v5 - (char *)v8;
  if (v5 != v8)
  {
LABEL_14:
    v18 = v17 - 8;
    if (v18 < 0x58)
      goto LABEL_27;
    if ((unint64_t)((char *)v5 - v14 - v9) < 0x20)
      goto LABEL_27;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[v20 / 0xFFFFFFFFFFFFFFF8];
    v15 = (double *)((char *)v15 - v20);
    v21 = &v14[8 * v10 - 16];
    v22 = v5 - 2;
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 4;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v25 = *((_QWORD *)v6-- - 1);
        *((_QWORD *)v15-- - 1) = v25;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v16;
  if (v8)
    operator delete(v8);
LABEL_22:
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t sub_20F01C458(char a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v6;
  BOOL v8;

  v3 = *a3;
  v4 = a3[2];
  if (*((_BYTE *)a3 + 8))
  {
    if (!a1)
    {
      if (!a2)
        return *(_QWORD *)(v3 + 40);
      return v4 - a2;
    }
  }
  else
  {
    if (v4)
      v6 = 0;
    else
      v6 = a1 == 0;
    if (!v6 || a2 != 0)
    {
      if (v4)
        v8 = 1;
      else
        v8 = a1 == 0;
      if (!v8)
        return -*(_QWORD *)(v3 + 40);
      return v4 - a2;
    }
  }
  return 0;
}

void sub_20F01C4C4(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(a1[1] - *a1) >> 3;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_20E93D8FC((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 8 * a2;
  }
}

_QWORD *sub_20F01C4F0(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  char i;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  for (i = *((_BYTE *)result + 8); i; *((_BYTE *)result + 8) = i)
  {
    if (*(_BYTE *)(a2 + 8))
      return result;
    v4 = result[2];
LABEL_3:
    v5 = (_QWORD *)*result;
    *a3++ = *(_QWORD *)(*(_QWORD *)*result
                      + 32
                      * ((*(_QWORD *)(*result + 24) + v4)
                       % (unint64_t)((uint64_t)(*(_QWORD *)(*result + 8) - *(_QWORD *)*result) >> 5)));
    v6 = v4 + 1;
    result[2] = v6;
    i = v6 == v5[5];
  }
  v4 = result[2];
  if (*(_BYTE *)(a2 + 8) || v4 != *(_QWORD *)(a2 + 16))
    goto LABEL_3;
  return result;
}

uint64_t sub_20F01C56C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2 + 56;
  v3 = *(_QWORD *)(result + 8);
  if (a2 + 56 != v3)
  {
    do
    {
      *(_QWORD *)(v2 - 56) = *(_QWORD *)v2;
      *(_OWORD *)(v2 - 48) = *(_OWORD *)(v2 + 8);
      *(_QWORD *)(v2 - 32) = *(_QWORD *)(v2 + 24);
      *(_OWORD *)(v2 - 24) = *(_OWORD *)(v2 + 32);
      *(_QWORD *)(v2 - 8) = *(_QWORD *)(v2 + 48);
      v2 += 56;
    }
    while (v2 != v3);
    a2 = v2 - 56;
  }
  *(_QWORD *)(result + 8) = a2;
  return result;
}

void sub_20F01C5BC(uint64_t a1, float64x2_t a2, double a3, float64x2_t a4, float64x2_t a5, __n128 a6, float64x2_t a7, double a8, float64x2_t a9)
{
  double v9;
  uint64_t v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  uint64_t v16;
  void **v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  double *v23;
  unint64_t v24;
  __int128 v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  double v50;
  double v51;
  BOOL v52;
  double v53;
  double v54;
  unint64_t v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;
  char *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  double **v81;
  uint64_t *v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  double v95;
  double *v96;
  double v97;
  double *v98;
  double *v99;
  double *v100;
  double *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  double *v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  double *v123;
  double *v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  double *i;
  __int128 v129;
  __int128 v130;
  void *v131;
  unint64_t *v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;

  v9 = a2.f64[0];
  v11 = *(_QWORD *)(a1 + 1384);
  if (v11 - *(_QWORD *)(a1 + 1376) != *(_QWORD *)(a1 + 1408) - *(_QWORD *)(a1 + 1400))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.hpp", 726, (uint64_t)"gyro_measurements_for_frame_.size() == accelerometer_measurements_for_frame_.size()", 83, (uint64_t)"The number of gyro measurements must match the number of accel measurements.", 76, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_136;
    }
    v11 = *(_QWORD *)(a1 + 1384);
  }
  v12 = *(double *)(v11 - 32);
  v13 = v12 < v9;
  if (v12 != v9)
  {
    v14 = v12 - v9;
    v15 = v9 - v12;
    if (!v13)
      v15 = v14;
    if (v15 > 0.00000001)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.hpp", 728, (uint64_t)"Near(gyro_measurements_for_frame_.back().timestamp, timestamp)", 62, (uint64_t)"Timestamp must be included in the IMU buffer.", 45, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_136;
      }
      v11 = *(_QWORD *)(a1 + 1384);
    }
  }
  v16 = *(_QWORD *)(a1 + 1376);
  if ((unint64_t)(v11 - v16) > 0x20)
    goto LABEL_13;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/include/VIO/OdometryUnsanitized/IMUSynchronizer.hpp", 729, (uint64_t)"gyro_measurements_for_frame_.size() > 1", 39, (uint64_t)"Must have more than one measurement.", 36, (void (*)(void **))sub_21023DDB0))
  {
LABEL_136:
    abort();
  }
  v11 = *(_QWORD *)(a1 + 1384);
  v16 = *(_QWORD *)(a1 + 1376);
LABEL_13:
  v132 = (unint64_t *)(a1 + 1304);
  v17 = (void **)(a1 + 1328);
  v18 = *(char **)(a1 + 1304);
  *(_QWORD *)(a1 + 1312) = v18;
  *(_QWORD *)(a1 + 1336) = *(_QWORD *)(a1 + 1328);
  if (v11 != v16)
  {
    v19 = 0;
    do
    {
      v21 = v16 + 32 * v19;
      v22 = *(double *)v21;
      a4.f64[0] = *(float64_t *)(a1 + 1264);
      if (vabdd_f64(*(double *)v21, v9) > a4.f64[0])
      {
        v23 = *(double **)(a1 + 1312);
        v24 = *(_QWORD *)(a1 + 1320);
        if ((unint64_t)v23 >= v24)
        {
          v27 = *v132;
          v28 = (uint64_t)((uint64_t)v23 - *v132) >> 5;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 59)
            goto LABEL_134;
          v30 = v24 - v27;
          if (v30 >> 4 > v29)
            v29 = v30 >> 4;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
            v31 = 0x7FFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            if (v31 >> 59)
              goto LABEL_133;
            v32 = (char *)operator new(32 * v31);
            v22 = *(double *)v21;
          }
          else
          {
            v32 = 0;
          }
          v33 = &v32[32 * v28];
          *(double *)v33 = v22;
          v34 = *(_OWORD *)(v21 + 8);
          *((_QWORD *)v33 + 3) = *(_QWORD *)(v21 + 24);
          *(_OWORD *)(v33 + 8) = v34;
          v35 = v33;
          if (v23 != (double *)v27)
          {
            do
            {
              v36 = *((_QWORD *)v23 - 4);
              v23 -= 4;
              *((_QWORD *)v35 - 4) = v36;
              v35 -= 32;
              v37 = *(_OWORD *)(v23 + 1);
              *((double *)v35 + 3) = v23[3];
              *(_OWORD *)(v35 + 8) = v37;
            }
            while (v23 != (double *)v27);
            v23 = (double *)*v132;
          }
          *(_QWORD *)(a1 + 1304) = v35;
          v26 = v33 + 32;
          *(_QWORD *)(a1 + 1312) = v33 + 32;
          *(_QWORD *)(a1 + 1320) = &v32[32 * v31];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *v23 = v22;
          v25 = *(_OWORD *)(v21 + 8);
          v23[3] = *(double *)(v21 + 24);
          *(_OWORD *)(v23 + 1) = v25;
          v26 = v23 + 4;
        }
        *(_QWORD *)(a1 + 1312) = v26;
        v38 = *(_QWORD *)(a1 + 1400) + 32 * v19;
        v39 = *(char **)(a1 + 1336);
        v40 = *(_QWORD *)(a1 + 1344);
        if ((unint64_t)v39 < v40)
        {
          *(_QWORD *)v39 = *(_QWORD *)v38;
          a2 = *(float64x2_t *)(v38 + 8);
          *((_QWORD *)v39 + 3) = *(_QWORD *)(v38 + 24);
          *(float64x2_t *)(v39 + 8) = a2;
          v20 = v39 + 32;
        }
        else
        {
          v41 = (char *)*v17;
          v42 = (v39 - (_BYTE *)*v17) >> 5;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 59)
            goto LABEL_135;
          v44 = v40 - (_QWORD)v41;
          if (v44 >> 4 > v43)
            v43 = v44 >> 4;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0)
            v45 = 0x7FFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            if (v45 >> 59)
              goto LABEL_133;
            v46 = (char *)operator new(32 * v45);
          }
          else
          {
            v46 = 0;
          }
          v47 = &v46[32 * v42];
          *(_QWORD *)v47 = *(_QWORD *)v38;
          a2 = *(float64x2_t *)(v38 + 8);
          *((_QWORD *)v47 + 3) = *(_QWORD *)(v38 + 24);
          *(float64x2_t *)(v47 + 8) = a2;
          v48 = v47;
          if (v39 != v41)
          {
            do
            {
              v49 = *((_QWORD *)v39 - 4);
              v39 -= 32;
              *((_QWORD *)v48 - 4) = v49;
              v48 -= 32;
              a2 = *(float64x2_t *)(v39 + 8);
              *((_QWORD *)v48 + 3) = *((_QWORD *)v39 + 3);
              *(float64x2_t *)(v48 + 8) = a2;
            }
            while (v39 != v41);
            v39 = (char *)*v17;
          }
          *(_QWORD *)(a1 + 1328) = v48;
          v20 = v47 + 32;
          *(_QWORD *)(a1 + 1336) = v47 + 32;
          *(_QWORD *)(a1 + 1344) = &v46[32 * v45];
          if (v39)
            operator delete(v39);
        }
        *(_QWORD *)(a1 + 1336) = v20;
        v11 = *(_QWORD *)(a1 + 1384);
        v16 = *(_QWORD *)(a1 + 1376);
      }
      v19 += *(_QWORD *)(a1 + 1240);
    }
    while (v19 < (v11 - v16) >> 5);
    v18 = *(char **)(a1 + 1312);
    v16 = v11;
  }
  v50 = *((double *)v18 - 4);
  v51 = *(double *)(v16 - 32);
  v52 = v50 < v51;
  if (v50 != v51)
  {
    v53 = v50 - v51;
    v54 = v51 - v50;
    if (!v52)
      v54 = v53;
    a4.f64[0] = 0.00000001;
    if (v54 > 0.00000001)
    {
      v55 = *(_QWORD *)(a1 + 1320);
      if ((unint64_t)v18 < v55)
      {
        *(double *)v18 = v51;
        v56 = *(_OWORD *)(v16 - 24);
        *((_QWORD *)v18 + 3) = *(_QWORD *)(v16 - 8);
        *(_OWORD *)(v18 + 8) = v56;
        *(_QWORD *)(a1 + 1312) = v18 + 32;
        v57 = *(_QWORD *)(a1 + 1408);
        v58 = *(char **)(a1 + 1336);
        v59 = *(_QWORD *)(a1 + 1344);
        if ((unint64_t)v58 >= v59)
          goto LABEL_77;
LABEL_74:
        *(_QWORD *)v58 = *(_QWORD *)(v57 - 32);
        a2 = *(float64x2_t *)(v57 - 24);
        *((_QWORD *)v58 + 3) = *(_QWORD *)(v57 - 8);
        *(float64x2_t *)(v58 + 8) = a2;
        v72 = v58 + 32;
LABEL_92:
        *(_QWORD *)(a1 + 1336) = v72;
        goto LABEL_93;
      }
      v60 = (char *)*v132;
      v61 = (uint64_t)&v18[-*v132] >> 5;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 59)
LABEL_134:
        sub_20E867F44();
      v63 = v55 - (_QWORD)v60;
      if (v63 >> 4 > v62)
        v62 = v63 >> 4;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFE0)
        v64 = 0x7FFFFFFFFFFFFFFLL;
      else
        v64 = v62;
      if (v64)
      {
        if (v64 >> 59)
          goto LABEL_133;
        v65 = (char *)operator new(32 * v64);
        v51 = *(double *)(v16 - 32);
      }
      else
      {
        v65 = 0;
      }
      v66 = &v65[32 * v61];
      *(double *)v66 = v51;
      v67 = *(_OWORD *)(v16 - 24);
      v68 = &v65[32 * v64];
      *((_QWORD *)v66 + 3) = *(_QWORD *)(v16 - 8);
      *(_OWORD *)(v66 + 8) = v67;
      v69 = v66 + 32;
      if (v18 == v60)
      {
        *(_QWORD *)(a1 + 1304) = v66;
        *(_QWORD *)(a1 + 1312) = v69;
        *(_QWORD *)(a1 + 1320) = v68;
      }
      else
      {
        do
        {
          v70 = *((_QWORD *)v18 - 4);
          v18 -= 32;
          *((_QWORD *)v66 - 4) = v70;
          v66 -= 32;
          v71 = *(_OWORD *)(v18 + 8);
          *((_QWORD *)v66 + 3) = *((_QWORD *)v18 + 3);
          *(_OWORD *)(v66 + 8) = v71;
        }
        while (v18 != v60);
        v18 = *(char **)(a1 + 1304);
        *(_QWORD *)(a1 + 1304) = v66;
        *(_QWORD *)(a1 + 1312) = v69;
        *(_QWORD *)(a1 + 1320) = v68;
        if (!v18)
        {
          *(_QWORD *)(a1 + 1312) = v69;
          v57 = *(_QWORD *)(a1 + 1408);
          v58 = *(char **)(a1 + 1336);
          v59 = *(_QWORD *)(a1 + 1344);
          if ((unint64_t)v58 < v59)
            goto LABEL_74;
LABEL_77:
          v73 = (char *)*v17;
          v74 = (v58 - (_BYTE *)*v17) >> 5;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 59)
LABEL_135:
            sub_20E867F44();
          v76 = v59 - (_QWORD)v73;
          if (v76 >> 4 > v75)
            v75 = v76 >> 4;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFE0)
            v77 = 0x7FFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (v77)
          {
            if (v77 >> 59)
              goto LABEL_133;
            v78 = (char *)operator new(32 * v77);
          }
          else
          {
            v78 = 0;
          }
          v79 = &v78[32 * v74];
          *(_QWORD *)v79 = *(_QWORD *)(v57 - 32);
          a2 = *(float64x2_t *)(v57 - 24);
          *((_QWORD *)v79 + 3) = *(_QWORD *)(v57 - 8);
          *(float64x2_t *)(v79 + 8) = a2;
          v72 = v79 + 32;
          if (v58 != v73)
          {
            do
            {
              v80 = *((_QWORD *)v58 - 4);
              v58 -= 32;
              *((_QWORD *)v79 - 4) = v80;
              v79 -= 32;
              a2 = *(float64x2_t *)(v58 + 8);
              *((_QWORD *)v79 + 3) = *((_QWORD *)v58 + 3);
              *(float64x2_t *)(v79 + 8) = a2;
            }
            while (v58 != v73);
            v58 = (char *)*v17;
          }
          *(_QWORD *)(a1 + 1328) = v79;
          *(_QWORD *)(a1 + 1336) = v72;
          *(_QWORD *)(a1 + 1344) = &v78[32 * v77];
          if (v58)
            operator delete(v58);
          goto LABEL_92;
        }
      }
      operator delete(v18);
      *(_QWORD *)(a1 + 1312) = v69;
      v57 = *(_QWORD *)(a1 + 1408);
      v58 = *(char **)(a1 + 1336);
      v59 = *(_QWORD *)(a1 + 1344);
      if ((unint64_t)v58 < v59)
        goto LABEL_74;
      goto LABEL_77;
    }
  }
LABEL_93:
  *(_QWORD *)(a1 + 1360) = *(_QWORD *)(a1 + 1352);
  a2.f64[0] = *(float64_t *)(a1 + 1248);
  sub_20F3F71B0(v132, (unint64_t *)(a1 + 1328), (double **)(a1 + 1208), (_DWORD *)(a1 + 1232), a1 + 336, (_QWORD *)(a1 + 1352), a2, *(double *)(a1 + 1256), a4, a5, a6, a7, a8, a9);
  v81 = (double **)(a1 + 288);
  v82 = *(uint64_t **)(a1 + 1360);
  v83 = *(uint64_t **)(a1 + 1352);
  v84 = v82 - v83;
  v85 = *(_QWORD *)(a1 + 288);
  v86 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 296) - v85) >> 3);
  if (v84 <= v86)
  {
    if (v84 < v86)
      *(_QWORD *)(a1 + 296) = v85 + 56 * v84;
  }
  else
  {
    sub_20F01F51C((char **)(a1 + 288), v84 - v86);
    v83 = *(uint64_t **)(a1 + 1352);
    v82 = *(uint64_t **)(a1 + 1360);
  }
  if (v83 != v82)
  {
    v87 = 0;
    do
    {
      v88 = *(_QWORD *)(a1 + 1304) + 32 * *v83;
      v89 = *(_QWORD *)(a1 + 288) + v87;
      *(_QWORD *)v89 = *(_QWORD *)v88;
      v90 = *(_OWORD *)(v88 + 8);
      *(_QWORD *)(v89 + 24) = *(_QWORD *)(v88 + 24);
      *(_OWORD *)(v89 + 8) = v90;
      v91 = *v83++;
      v92 = *(_QWORD *)(a1 + 1328) + 32 * v91;
      v93 = *(_QWORD *)(a1 + 288) + v87;
      v94 = *(_OWORD *)(v92 + 8);
      *(_QWORD *)(v93 + 48) = *(_QWORD *)(v92 + 24);
      *(_OWORD *)(v93 + 32) = v94;
      v87 += 56;
    }
    while (v83 != *(uint64_t **)(a1 + 1360));
  }
  v95 = *(double *)(a1 + 24);
  if (v95 >= 0.0)
  {
    v96 = *v81;
    v97 = **v81;
    if (v97 - v95 <= 0.0001)
    {
      v98 = v96 + 7;
      v99 = *(double **)(a1 + 296);
      v100 = *v81;
      if (v96 + 7 == v99)
      {
        v101 = *v81;
      }
      else
      {
        do
        {
          *(v98 - 7) = *v98;
          *((_OWORD *)v98 - 3) = *(_OWORD *)(v98 + 1);
          *(v98 - 4) = v98[3];
          *(_OWORD *)(v98 - 3) = *((_OWORD *)v98 + 2);
          *(v98 - 1) = v98[6];
          v98 += 7;
          v100 += 7;
        }
        while (v98 != v99);
        v101 = *v81;
        v97 = **v81;
      }
      v102 = (unsigned __int128)(((char *)v100 - (char *)v96) * (__int128)0x4924924924924925) >> 64;
      v103 = (v102 >> 4) + ((unint64_t)v102 >> 63);
      v104 = (unint64_t)&v96[7 * v103];
      *(_QWORD *)(a1 + 296) = v104;
      v105 = *(_QWORD *)(a1 + 1304);
      v106 = *(double *)(v105 + 32);
      if (vabdd_f64(v97, v106) > 0.0001)
      {
        v107 = *(_QWORD *)(a1 + 1328);
        v135 = *(_OWORD *)(v105 + 40);
        v136 = *(_QWORD *)(v105 + 56);
        v133 = *(_OWORD *)(v107 + 40);
        v134 = *(_QWORD *)(v107 + 56);
        v108 = *(_QWORD *)(a1 + 304);
        if (v104 < v108)
        {
          if (v101 == (double *)v104)
          {
            *v101 = v106;
            *(_OWORD *)(v101 + 1) = v135;
            *((_QWORD *)v101 + 3) = v136;
            *((_OWORD *)v101 + 2) = v133;
            *((_QWORD *)v101 + 6) = v134;
            *(_QWORD *)(a1 + 296) = v101 + 7;
          }
          else
          {
            v109 = v101 + 7;
            v110 = v104 - 56;
            v111 = &v96[7 * v103];
            if (v104 >= 0x38)
            {
              do
              {
                *v111 = *(double *)v110;
                v112 = *(_OWORD *)(v110 + 8);
                v111[3] = *(double *)(v110 + 24);
                *(_OWORD *)(v111 + 1) = v112;
                v113 = *(_OWORD *)(v110 + 32);
                v111[6] = *(double *)(v110 + 48);
                *((_OWORD *)v111 + 2) = v113;
                v111 += 7;
                v110 += 56;
              }
              while (v110 < v104);
            }
            *(_QWORD *)(a1 + 296) = v111;
            if ((_QWORD *)v104 != v109)
            {
              v114 = (uint64_t)&v96[7 * v103 - 3];
              v115 = (uint64_t)(v104 - (_QWORD)v109) >> 3;
              do
              {
                *(double *)(v114 - 32) = v101[v115 - 7];
                v116 = *(_OWORD *)&v101[v115 - 6];
                *(double *)(v114 - 8) = v101[v115 - 4];
                *(_OWORD *)(v114 - 24) = v116;
                v117 = *(_OWORD *)&v101[v115 - 3];
                *(double *)(v114 + 16) = v101[v115 - 1];
                *(_OWORD *)v114 = v117;
                v114 -= 56;
                v115 -= 7;
              }
              while (v115 * 8);
            }
            *v101 = v106;
            *(_OWORD *)(v101 + 1) = v135;
            *((_QWORD *)v101 + 3) = v136;
            *((_OWORD *)v101 + 2) = v133;
            *((_QWORD *)v101 + 6) = v134;
          }
          return;
        }
        v118 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v104 - (_QWORD)v101) >> 3) + 1;
        if (v118 > 0x492492492492492)
          sub_20EABADD4();
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v108 - (_QWORD)v101) >> 3) > v118)
          v118 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v108 - (_QWORD)v101) >> 3);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v108 - (_QWORD)v101) >> 3)) >= 0x249249249249249)
          v118 = 0x492492492492492;
        if (!v118)
        {
          v120 = (char *)operator new(0x38uLL);
          v121 = v120 + 56;
          goto LABEL_125;
        }
        if (v118 <= 0x492492492492492)
        {
          v119 = 56 * v118;
          v120 = (char *)operator new(56 * v118);
          v121 = &v120[v119];
LABEL_125:
          *(double *)v120 = v106;
          *((_QWORD *)v120 + 3) = v136;
          *(_OWORD *)(v120 + 8) = v135;
          *((_OWORD *)v120 + 2) = v133;
          *((_QWORD *)v120 + 6) = v134;
          v122 = v120 + 56;
          v123 = *v81;
          if (*v81 != v101)
          {
            v124 = v101;
            do
            {
              v125 = *((_QWORD *)v124 - 7);
              v124 -= 7;
              *((_QWORD *)v120 - 7) = v125;
              v120 -= 56;
              v126 = *(_OWORD *)(v124 + 1);
              *((double *)v120 + 3) = v124[3];
              *(_OWORD *)(v120 + 8) = v126;
              v127 = *((_OWORD *)v124 + 2);
              *((double *)v120 + 6) = v124[6];
              *((_OWORD *)v120 + 2) = v127;
            }
            while (v124 != v123);
          }
          for (i = *(double **)(a1 + 296); v101 != i; v101 += 7)
          {
            *(double *)v122 = *v101;
            v129 = *(_OWORD *)(v101 + 1);
            *((double *)v122 + 3) = v101[3];
            *(_OWORD *)(v122 + 8) = v129;
            v130 = *((_OWORD *)v101 + 2);
            *((double *)v122 + 6) = v101[6];
            *((_OWORD *)v122 + 2) = v130;
            v122 += 56;
          }
          v131 = *(void **)(a1 + 288);
          *(_QWORD *)(a1 + 288) = v120;
          *(_QWORD *)(a1 + 296) = v122;
          *(_QWORD *)(a1 + 304) = v121;
          if (v131)
            operator delete(v131);
          return;
        }
LABEL_133:
        sub_20E877A38();
      }
    }
  }
}

void sub_20F01D030(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F01D3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01D3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01D3F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F01D41C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  size_t v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[24];
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v13 = _os_log_pack_size();
    v14 = (std::__shared_weak_count_vtbl *)operator new(v13, (std::align_val_t)8uLL);
    v15 = (std::__shared_weak_count *)operator new();
    v16 = v15;
    v15->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v15->__shared_weak_owners_ = 0;
    v15[1].__vftable = v14;
    *(_QWORD *)v46 = v14;
    *(_QWORD *)&v46[8] = v14;
    *(_QWORD *)&v46[16] = v15;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v47 = 0uLL;
    v48 = 0;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v16);
    }
    v20 = *(_QWORD *)v46;
    v21 = _os_log_pack_fill();
    v22 = *a5;
    v23 = *a6;
    v24 = *a7;
    *(_DWORD *)v21 = 134218496;
    *(_QWORD *)(v21 + 4) = v22;
    *(_WORD *)(v21 + 12) = 2048;
    *(_QWORD *)(v21 + 14) = v23;
    *(_WORD *)(v21 + 22) = 2048;
    *(_QWORD *)(v21 + 24) = v24;
    v25 = operator new();
    v26 = *((unsigned __int8 *)a2 + 23);
    if ((v26 & 0x80u) == 0)
      v27 = a2;
    else
      v27 = (uint64_t *)*a2;
    if ((v26 & 0x80u) != 0)
      v26 = a2[1];
    *(_QWORD *)v25 = v20;
    *(_OWORD *)(v25 + 8) = *(_OWORD *)&v46[8];
    *(_OWORD *)&v46[8] = 0uLL;
    *(_OWORD *)(v25 + 24) = v47;
    v47 = 0uLL;
    *(_QWORD *)(v25 + 40) = v27;
    *(_QWORD *)(v25 + 48) = v26;
    *(_BYTE *)(v25 + 56) = type;
    v45 = v25;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v45);
    v28 = v45;
    v45 = 0;
    if (v28)
    {
      v29 = *(std::__shared_weak_count **)(v28 + 32);
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = *(std::__shared_weak_count **)(v28 + 16);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      MEMORY[0x212BC6398](v28, 0x10F0C40B62ED6C6);
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = *(std::__shared_weak_count **)&v46[16];
    if (*(_QWORD *)&v46[16])
    {
      v39 = (unint64_t *)(*(_QWORD *)&v46[16] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v41 = *a5;
    v42 = *a6;
    v43 = *a7;
    *(_DWORD *)v46 = 134218496;
    *(_QWORD *)&v46[4] = v41;
    *(_WORD *)&v46[12] = 2048;
    *(_QWORD *)&v46[14] = v42;
    *(_WORD *)&v46[22] = 2048;
    *(_QWORD *)&v47 = v43;
    v44 = (void *)_os_log_send_and_compose_impl();
    if (v44)
      free(v44);
  }
}

void sub_20F01D848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F01D86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01D880(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F01D8A4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  size_t v15;
  std::__shared_weak_count_vtbl *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[24];
  _OWORD v51[2];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v15 = _os_log_pack_size();
    v16 = (std::__shared_weak_count_vtbl *)operator new(v15, (std::align_val_t)8uLL);
    v17 = (std::__shared_weak_count *)operator new();
    v18 = v17;
    v17->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = v16;
    *(_QWORD *)v50 = v16;
    *(_QWORD *)&v50[8] = v16;
    *(_QWORD *)&v50[16] = v17;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    memset(v51, 0, 24);
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v18);
    }
    v22 = *(_QWORD *)v50;
    v23 = _os_log_pack_fill();
    v24 = *a5;
    v25 = *a6;
    v26 = *a7;
    v27 = *a8;
    *(_DWORD *)v23 = 134218752;
    *(_QWORD *)(v23 + 4) = v24;
    *(_WORD *)(v23 + 12) = 2048;
    *(_QWORD *)(v23 + 14) = v25;
    *(_WORD *)(v23 + 22) = 2048;
    *(_QWORD *)(v23 + 24) = v26;
    *(_WORD *)(v23 + 32) = 2048;
    *(_QWORD *)(v23 + 34) = v27;
    v28 = operator new();
    v29 = *((unsigned __int8 *)a2 + 23);
    if ((v29 & 0x80u) == 0)
      v30 = a2;
    else
      v30 = (uint64_t *)*a2;
    if ((v29 & 0x80u) != 0)
      v29 = a2[1];
    *(_QWORD *)v28 = v22;
    *(_OWORD *)(v28 + 8) = *(_OWORD *)&v50[8];
    *(_OWORD *)&v50[8] = 0uLL;
    *(_OWORD *)(v28 + 24) = v51[0];
    v51[0] = 0uLL;
    *(_QWORD *)(v28 + 40) = v30;
    *(_QWORD *)(v28 + 48) = v29;
    *(_BYTE *)(v28 + 56) = type;
    v49 = v28;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v49);
    v31 = v49;
    v49 = 0;
    if (v31)
    {
      v32 = *(std::__shared_weak_count **)(v31 + 32);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = *(std::__shared_weak_count **)(v31 + 16);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      MEMORY[0x212BC6398](v31, 0x10F0C40B62ED6C6);
    }
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v51[0] + 1);
    if (*((_QWORD *)&v51[0] + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v51[0] + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = *(std::__shared_weak_count **)&v50[16];
    if (*(_QWORD *)&v50[16])
    {
      v42 = (unint64_t *)(*(_QWORD *)&v50[16] + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v44 = *a5;
    v45 = *a6;
    v46 = *a7;
    v47 = *a8;
    *(_DWORD *)v50 = 134218752;
    *(_QWORD *)&v50[4] = v44;
    *(_WORD *)&v50[12] = 2048;
    *(_QWORD *)&v50[14] = v45;
    *(_WORD *)&v50[22] = 2048;
    *(_QWORD *)&v51[0] = v46;
    WORD4(v51[0]) = 2048;
    *(_QWORD *)((char *)v51 + 10) = v47;
    v48 = (void *)_os_log_send_and_compose_impl();
    if (v48)
      free(v48);
  }
}

void sub_20F01DCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F01DD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01DD2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F01DD50(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20F01E2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F01E2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01E2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F01E354(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20F01E8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F01E8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01E900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F01E958(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F01ECE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01ED0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01ED20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F01ED44(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F01F0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01F0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01F10C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F01F130(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F01F4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01F4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F01F4F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F01F51C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v4 = a1[1];
  v5 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[56 * a2];
      do
      {
        *(_QWORD *)v4 = 0xBFF0000000000000;
        *(_OWORD *)(v4 + 8) = 0uLL;
        *(_OWORD *)(v4 + 24) = 0uLL;
        *(_OWORD *)(v4 + 40) = 0uLL;
        v4 += 56;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x492492492492492)
      sub_20EABADD4();
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x249249249249249)
      v9 = 0x492492492492492;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x492492492492492)
        sub_20E877A38();
      v10 = (char *)operator new(56 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[56 * v6];
    v13 = &v12[56 * a2];
    v14 = v12;
    do
    {
      *(_QWORD *)v14 = 0xBFF0000000000000;
      *(_OWORD *)(v14 + 8) = 0uLL;
      *(_OWORD *)(v14 + 24) = 0uLL;
      *(_OWORD *)(v14 + 40) = 0uLL;
      v14 += 56;
    }
    while (v14 != v13);
    v15 = &v10[56 * v9];
    v17 = *a1;
    v16 = a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 7);
        v16 -= 56;
        *((_QWORD *)v12 - 7) = v18;
        v12 -= 56;
        v19 = *(_OWORD *)(v16 + 8);
        *((_QWORD *)v12 + 3) = *((_QWORD *)v16 + 3);
        *(_OWORD *)(v12 + 8) = v19;
        v20 = *((_OWORD *)v16 + 2);
        *((_QWORD *)v12 + 6) = *((_QWORD *)v16 + 6);
        *((_OWORD *)v12 + 2) = v20;
      }
      while (v16 != v17);
      v16 = *a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_20F01F6CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  *(_QWORD *)a1 = off_24C9F7BA0;
  if (*(_BYTE *)(a1 + 5520))
  {
    if (*(_BYTE *)(a1 + 5208))
      sub_20EB8188C(a1 + 3544);
    v2 = *(_QWORD *)(a1 + 3520);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 3528);
      v4 = *(void **)(a1 + 3520);
      if (v3 != v2)
      {
        do
        {
          v5 = *(_QWORD *)(v3 - 24);
          if (v5)
          {
            v6 = *(_QWORD *)(v3 - 16);
            v7 = *(void **)(v3 - 24);
            if (v6 != v5)
            {
              do
                v6 = sub_20EB8188C(v6 - 1664);
              while (v6 != v5);
              v7 = *(void **)(v3 - 24);
            }
            *(_QWORD *)(v3 - 16) = v5;
            operator delete(v7);
          }
          v3 -= 32;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 3520);
      }
      *(_QWORD *)(a1 + 3528) = v2;
      operator delete(v4);
    }
  }
  v8 = *(_QWORD **)(a1 + 3512);
  if (v8 == (_QWORD *)(a1 + 3488))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 3488);
  }
  else
  {
    if (!v8)
      goto LABEL_20;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_20:
  v10 = *(_QWORD **)(a1 + 3480);
  if (v10 == (_QWORD *)(a1 + 3456))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 3456);
  }
  else
  {
    if (!v10)
      goto LABEL_25;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_25:
  v12 = *(_QWORD **)(a1 + 3448);
  if (v12 == (_QWORD *)(a1 + 3424))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 3424);
  }
  else
  {
    if (!v12)
      goto LABEL_30;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_30:
  v14 = *(_QWORD **)(a1 + 3416);
  if (v14 == (_QWORD *)(a1 + 3392))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 3392);
  }
  else
  {
    if (!v14)
      goto LABEL_35;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_35:
  sub_20E86A810(a1 + 960);
  if ((*(char *)(a1 + 943) & 0x80000000) == 0)
  {
    v16 = *(void **)(a1 + 872);
    if (!v16)
      goto LABEL_38;
    goto LABEL_37;
  }
  operator delete(*(void **)(a1 + 920));
  v16 = *(void **)(a1 + 872);
  if (v16)
  {
LABEL_37:
    *(_QWORD *)(a1 + 880) = v16;
    operator delete(v16);
  }
LABEL_38:
  v17 = *(void **)(a1 + 480);
  if (v17)
  {
    *(_QWORD *)(a1 + 488) = v17;
    operator delete(v17);
  }
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
    v18 = *(void **)(a1 + 168);
    if (!v18)
      goto LABEL_43;
    goto LABEL_42;
  }
  operator delete(*(void **)(a1 + 232));
  v18 = *(void **)(a1 + 168);
  if (v18)
  {
LABEL_42:
    *(_QWORD *)(a1 + 176) = v18;
    operator delete(v18);
  }
LABEL_43:
  v19 = *(void **)(a1 + 136);
  if (v19)
  {
    *(_QWORD *)(a1 + 144) = v19;
    operator delete(v19);
  }
  return a1;
}

void sub_20F01F8D8(_QWORD *a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = a1 + 651;
  (*(void (**)(_QWORD *))(*a1 + 184))(a1);
  if (v2[312])
  {
    if (*v2)
      sub_20EB8188C((uint64_t)(a1 + 443));
    v3 = a1[440];
    if (v3)
    {
      v4 = a1[441];
      v5 = (void *)a1[440];
      if (v4 != v3)
      {
        do
        {
          v6 = *(_QWORD *)(v4 - 24);
          if (v6)
          {
            v7 = *(_QWORD *)(v4 - 16);
            v8 = *(void **)(v4 - 24);
            if (v7 != v6)
            {
              do
                v7 = sub_20EB8188C(v7 - 1664);
              while (v7 != v6);
              v8 = *(void **)(v4 - 24);
            }
            *(_QWORD *)(v4 - 16) = v6;
            operator delete(v8);
          }
          v4 -= 32;
        }
        while (v4 != v3);
        v5 = (void *)a1[440];
      }
      a1[441] = v3;
      operator delete(v5);
    }
    v2[312] = 0;
  }
}

void sub_20F01F9A4(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  void **v14;
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  char *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  size_t v56;
  const char *v57;
  void *v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  const char *v61;
  size_t v62;
  void **v63;
  unint64_t v64;
  const char *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  size_t v74;
  std::__shared_weak_count_vtbl *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v114;
  size_t v115;
  const char *v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  const char *v119;
  size_t v120;
  void **v121;
  unint64_t v122;
  const char *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  size_t v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void *v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v196;
  int v197;
  const char *v198;
  int v199;
  const char *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *__p[3];
  _BYTE v207[48];
  _BYTE v208[40];
  _BYTE v209[1450];
  __int128 v210;
  _BYTE v211[24];
  __int128 v212;
  __int128 v213;
  __int128 v214;
  _OWORD v215[2];
  unsigned __int8 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  __int128 v226;
  uint64_t v227;
  __int128 v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;

  v240 = *MEMORY[0x24BDAC8D0];
  memset(__p, 0, sizeof(__p));
  sub_20EE88C3C((uint64_t)__p, *a2, a2[1], (a2[1] - *a2) >> 5);
  v207[0] = 0;
  v216 = 0;
  v7 = *(unsigned __int8 *)(a3 + 1664);
  if (*(_BYTE *)(a3 + 1664))
  {
    sub_20EB81E74((uint64_t)v207, a3);
    v8 = 1;
    v216 = 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = a4[1];
  v217 = *a4;
  v218 = v9;
  v219 = a4[2];
  v220 = *((_QWORD *)a4 + 6);
  v222 = a4[4];
  v224 = *(__int128 *)((char *)a4 + 88);
  v226 = a4[7];
  v228 = *(__int128 *)((char *)a4 + 136);
  v10 = a4[10];
  v231 = a4[11];
  v11 = a4[13];
  v232 = a4[12];
  v12 = *((_QWORD *)a4 + 7);
  v221 = v12;
  v223 = *((_QWORD *)a4 + 10);
  v225 = *((_QWORD *)a4 + 13);
  v227 = *((_QWORD *)a4 + 16);
  v229 = *((_QWORD *)a4 + 19);
  v233 = v11;
  v234 = *((_QWORD *)a4 + 28);
  v230 = v10;
  v235 = *(__int128 *)((char *)a4 + 232);
  v13 = *(__int128 *)((char *)a4 + 280);
  v237 = *(__int128 *)((char *)a4 + 264);
  v238 = v13;
  v236 = *(__int128 *)((char *)a4 + 248);
  v239 = *((_QWORD *)a4 + 37);
  v14 = (void **)(a1 + 3520);
  if (*(_BYTE *)(a1 + 5520))
  {
    v15 = (char *)*v14;
    if (*v14)
    {
      v16 = *(char **)(a1 + 3528);
      v17 = *v14;
      if (v16 != v15)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 3);
          if (v18)
          {
            v19 = *((_QWORD *)v16 - 2);
            v20 = (void *)*((_QWORD *)v16 - 3);
            if (v19 != v18)
            {
              do
                v19 = sub_20EB8188C(v19 - 1664);
              while (v19 != v18);
              v20 = (void *)*((_QWORD *)v16 - 3);
            }
            *((_QWORD *)v16 - 2) = v18;
            operator delete(v20);
          }
          v16 -= 32;
        }
        while (v16 != v15);
        v17 = *v14;
      }
      *(_QWORD *)(a1 + 3528) = v15;
      operator delete(v17);
      *v14 = 0;
      *(_QWORD *)(a1 + 3528) = 0;
      *(_QWORD *)(a1 + 3536) = 0;
      v8 = v216;
    }
    *(_OWORD *)(a1 + 3520) = *(_OWORD *)__p;
    *(void **)(a1 + 3536) = __p[2];
    memset(__p, 0, sizeof(__p));
    v29 = (_OWORD *)(a1 + 3544);
    if (*(unsigned __int8 *)(a1 + 5208) == v8)
    {
      if (*(_BYTE *)(a1 + 5208))
      {
        v30 = *(_OWORD *)v208;
        *(_OWORD *)(a1 + 3576) = *(_OWORD *)&v207[32];
        *(_OWORD *)(a1 + 3592) = v30;
        *(_QWORD *)(a1 + 3608) = *(_QWORD *)&v208[16];
        v31 = *(_OWORD *)&v207[16];
        *v29 = *(_OWORD *)v207;
        *(_OWORD *)(a1 + 3560) = v31;
        v32 = *(_OWORD *)&v208[24];
        *(_QWORD *)(a1 + 3632) = *(_QWORD *)v209;
        *(_OWORD *)(a1 + 3616) = v32;
        sub_20EB84848(a1 + 3640, (uint64_t)&v209[8]);
        *(_OWORD *)(a1 + 5088) = v210;
        *(_QWORD *)(a1 + 5104) = *(_QWORD *)v211;
        v33 = *(_OWORD *)&v211[8];
        *(_OWORD *)&v211[8] = 0u;
        v34 = *(std::__shared_weak_count **)(a1 + 5120);
        *(_OWORD *)(a1 + 5112) = v33;
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(p_shared_owners);
          while (__stlxr(v36 - 1, p_shared_owners));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        *(_OWORD *)(a1 + 5144) = v213;
        *(_OWORD *)(a1 + 5160) = v214;
        *(_OWORD *)(a1 + 5176) = v215[0];
        *(_OWORD *)(a1 + 5128) = v212;
        *(_OWORD *)(a1 + 5185) = *(_OWORD *)((char *)v215 + 9);
      }
    }
    else if (*(_BYTE *)(a1 + 5208))
    {
      sub_20EB8188C((uint64_t)v29);
      *(_BYTE *)(a1 + 5208) = 0;
    }
    else
    {
      v37 = *(_OWORD *)v208;
      *(_OWORD *)(a1 + 3576) = *(_OWORD *)&v207[32];
      *(_OWORD *)(a1 + 3592) = v37;
      *(_QWORD *)(a1 + 3608) = *(_QWORD *)&v208[16];
      v38 = *(_OWORD *)&v207[16];
      *v29 = *(_OWORD *)v207;
      *(_OWORD *)(a1 + 3560) = v38;
      v39 = *(_OWORD *)&v208[24];
      *(_QWORD *)(a1 + 3632) = *(_QWORD *)v209;
      *(_OWORD *)(a1 + 3616) = v39;
      sub_20E972C70((_BYTE *)(a1 + 3640), (uint64_t)&v209[8]);
      *(_OWORD *)(a1 + 5088) = v210;
      *(_OWORD *)(a1 + 5104) = *(_OWORD *)v211;
      *(_QWORD *)(a1 + 5120) = *(_QWORD *)&v211[16];
      *(_OWORD *)&v211[8] = 0u;
      *(_OWORD *)(a1 + 5144) = v213;
      *(_OWORD *)(a1 + 5160) = v214;
      *(_OWORD *)(a1 + 5176) = v215[0];
      *(_OWORD *)(a1 + 5128) = v212;
      *(_OWORD *)(a1 + 5185) = *(_OWORD *)((char *)v215 + 9);
      *(_BYTE *)(a1 + 5208) = 1;
    }
    v40 = v218;
    *(_OWORD *)(a1 + 5216) = v217;
    *(_OWORD *)(a1 + 5232) = v40;
    *(_OWORD *)(a1 + 5248) = v219;
    *(_QWORD *)(a1 + 5264) = v220;
    *(_QWORD *)(a1 + 5272) = v221;
    *(_OWORD *)(a1 + 5280) = v222;
    *(_QWORD *)(a1 + 5296) = v223;
    *(_QWORD *)(a1 + 5320) = v225;
    *(_OWORD *)(a1 + 5304) = v224;
    *(_QWORD *)(a1 + 5344) = v227;
    *(_OWORD *)(a1 + 5328) = v226;
    *(_QWORD *)(a1 + 5368) = v229;
    *(_OWORD *)(a1 + 5352) = v228;
    v41 = v231;
    *(_OWORD *)(a1 + 5376) = v230;
    *(_QWORD *)(a1 + 5440) = v234;
    v42 = v232;
    *(_OWORD *)(a1 + 5424) = v233;
    *(_OWORD *)(a1 + 5408) = v42;
    *(_OWORD *)(a1 + 5392) = v41;
    v43 = v236;
    *(_OWORD *)(a1 + 5448) = v235;
    v44 = v237;
    v45 = v238;
    *(_QWORD *)(a1 + 5512) = v239;
    *(_OWORD *)(a1 + 5480) = v44;
    *(_OWORD *)(a1 + 5496) = v45;
    *(_OWORD *)(a1 + 5464) = v43;
    if (v216)
LABEL_32:
      sub_20EB8188C((uint64_t)v207);
  }
  else
  {
    *(_OWORD *)(a1 + 3520) = *(_OWORD *)__p;
    *(void **)(a1 + 3536) = __p[2];
    memset(__p, 0, sizeof(__p));
    *(_BYTE *)(a1 + 3544) = 0;
    *(_BYTE *)(a1 + 5208) = 0;
    if (v7)
    {
      v21 = *(_OWORD *)v208;
      *(_OWORD *)(a1 + 3576) = *(_OWORD *)&v207[32];
      *(_OWORD *)(a1 + 3592) = v21;
      *(_QWORD *)(a1 + 3608) = *(_QWORD *)&v208[16];
      v22 = *(_OWORD *)&v207[16];
      *(_OWORD *)(a1 + 3544) = *(_OWORD *)v207;
      *(_OWORD *)(a1 + 3560) = v22;
      v23 = *(_OWORD *)&v208[24];
      *(_QWORD *)(a1 + 3632) = *(_QWORD *)v209;
      *(_OWORD *)(a1 + 3616) = v23;
      sub_20E972C70((_BYTE *)(a1 + 3640), (uint64_t)&v209[8]);
      *(_OWORD *)(a1 + 5088) = v210;
      *(_OWORD *)(a1 + 5104) = *(_OWORD *)v211;
      *(_QWORD *)(a1 + 5120) = *(_QWORD *)&v211[16];
      *(_OWORD *)&v211[8] = 0u;
      *(_OWORD *)(a1 + 5144) = v213;
      *(_OWORD *)(a1 + 5160) = v214;
      *(_OWORD *)(a1 + 5176) = v215[0];
      *(_OWORD *)(a1 + 5128) = v212;
      *(_OWORD *)(a1 + 5185) = *(_OWORD *)((char *)v215 + 9);
      *(_BYTE *)(a1 + 5208) = 1;
      v12 = v221;
    }
    v24 = v218;
    *(_OWORD *)(a1 + 5216) = v217;
    *(_OWORD *)(a1 + 5232) = v24;
    *(_OWORD *)(a1 + 5248) = v219;
    *(_QWORD *)(a1 + 5264) = v220;
    *(_QWORD *)(a1 + 5272) = v12;
    *(_OWORD *)(a1 + 5280) = v222;
    *(_QWORD *)(a1 + 5296) = v223;
    *(_QWORD *)(a1 + 5320) = v225;
    *(_OWORD *)(a1 + 5304) = v224;
    *(_OWORD *)(a1 + 5328) = v226;
    *(_QWORD *)(a1 + 5344) = v227;
    *(_OWORD *)(a1 + 5352) = v228;
    *(_QWORD *)(a1 + 5368) = v229;
    v25 = v230;
    *(_OWORD *)(a1 + 5392) = v231;
    v26 = v233;
    *(_OWORD *)(a1 + 5408) = v232;
    *(_OWORD *)(a1 + 5424) = v26;
    *(_QWORD *)(a1 + 5440) = v234;
    *(_OWORD *)(a1 + 5376) = v25;
    v27 = v236;
    *(_OWORD *)(a1 + 5448) = v235;
    *(_QWORD *)(a1 + 5512) = v239;
    v28 = v238;
    *(_OWORD *)(a1 + 5480) = v237;
    *(_OWORD *)(a1 + 5496) = v28;
    *(_OWORD *)(a1 + 5464) = v27;
    *(_BYTE *)(a1 + 5520) = 1;
    if (v216)
      goto LABEL_32;
  }
  v46 = (char *)__p[0];
  if (__p[0])
  {
    v47 = (char *)__p[1];
    v48 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v49 = *((_QWORD *)v47 - 3);
        if (v49)
        {
          v50 = *((_QWORD *)v47 - 2);
          v51 = (void *)*((_QWORD *)v47 - 3);
          if (v50 != v49)
          {
            do
              v50 = sub_20EB8188C(v50 - 1664);
            while (v50 != v49);
            v51 = (void *)*((_QWORD *)v47 - 3);
          }
          *((_QWORD *)v47 - 2) = v49;
          operator delete(v51);
        }
        v47 -= 32;
      }
      while (v47 != v46);
      v48 = __p[0];
    }
    __p[1] = v46;
    operator delete(v48);
  }
  if (*(_BYTE *)(a1 + 5208))
  {
    sub_20F021268(&v203);
    if (**(int **)(v203 + 56) > 3)
      goto LABEL_133;
    v52 = *(unsigned __int8 *)(v203 + 72);
    v53 = sub_20E8C31DC(v203, "OSLogSurrogateAppender", 1, 0);
    v54 = v53;
    if (!v52 && !v53)
      goto LABEL_133;
    v194 = &v203;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v196 = std::chrono::system_clock::now().__d_.__rep_;
    v197 = 3;
    v198 = "unknown file";
    v199 = 62;
    v201 = 0;
    v202 = 0;
    v200 = "unknown function";
    v55 = v203;
    if (*(char *)(v203 + 39) < 0)
    {
      v57 = *(const char **)(v203 + 16);
      v56 = *(_QWORD *)(v203 + 24);
      v192 = *v194 + 16;
      v58 = *(void **)(a1 + 5104);
      v60 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v60 & 1) != 0)
        goto LABEL_52;
    }
    else
    {
      v56 = *(unsigned __int8 *)(v203 + 39);
      v57 = (const char *)(*v194 + 16);
      v192 = (uint64_t)v57;
      v58 = *(void **)(a1 + 5104);
      v59 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v59 & 1) != 0)
        goto LABEL_52;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__p);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
      if (v207[0] && SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_52:
    if (byte_254A4A4F8[23] >= 0)
      v61 = byte_254A4A4F8;
    else
      v61 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v62 = byte_254A4A4F8[23];
    else
      v62 = *(_QWORD *)&byte_254A4A4F8[8];
    __p[0] = os_log_create(v61, v57);
    v63 = &__p[1];
    if (v62 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v62 >= 0x17)
    {
      v64 = v54;
      v65 = v57;
      v66 = v55;
      v67 = v52;
      v68 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v62 | 7) != 0x17)
        v68 = v62 | 7;
      v69 = v68 + 1;
      v63 = (void **)operator new(v68 + 1);
      __p[2] = (void *)v62;
      *(_QWORD *)v207 = v69 | 0x8000000000000000;
      __p[1] = v63;
      v52 = v67;
      v55 = v66;
      v57 = v65;
      v54 = v64;
    }
    else
    {
      v207[7] = v62;
      if (!v62)
      {
LABEL_66:
        *((_BYTE *)v63 + v62) = 0;
        v207[8] = 1;
        v70 = &v207[16];
        if (v56 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v56 >= 0x17)
        {
          v71 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v56 | 7) != 0x17)
            v71 = v56 | 7;
          v72 = v71 + 1;
          v70 = operator new(v71 + 1);
          *(_QWORD *)&v207[24] = v56;
          *(_QWORD *)&v207[32] = v72 | 0x8000000000000000;
          *(_QWORD *)&v207[16] = v70;
        }
        else
        {
          v207[39] = v56;
          if (!v56)
            goto LABEL_74;
        }
        memmove(v70, v57, v56);
LABEL_74:
        v70[v56] = 0;
        v207[40] = 1;
        v73 = __p[0];
        if ((v207[39] & 0x80000000) != 0)
          operator delete(*(void **)&v207[16]);
        if (v207[8] && (v207[7] & 0x80000000) != 0)
          operator delete(__p[1]);
        if (__p[0])
          os_release(__p[0]);
        if (v54 && *(_QWORD *)(v54 + 24))
        {
          v74 = _os_log_pack_size();
          v75 = (std::__shared_weak_count_vtbl *)operator new(v74, (std::align_val_t)8uLL);
          v76 = (std::__shared_weak_count *)operator new();
          v77 = v76;
          v76->__shared_owners_ = 0;
          v78 = (unint64_t *)&v76->__shared_owners_;
          v76->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v76->__shared_weak_owners_ = 0;
          v76[1].__vftable = v75;
          __p[0] = v75;
          __p[1] = v75;
          __p[2] = v76;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
          memset(v207, 0, 24);
          do
            v80 = __ldaxr(v78);
          while (__stlxr(v80 - 1, v78));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v77);
          }
          v81 = __p[0];
          v82 = _os_log_pack_fill();
          *(_DWORD *)v82 = 134217984;
          *(_QWORD *)(v82 + 4) = v58;
          v83 = operator new();
          v84 = *(unsigned __int8 *)(v55 + 39);
          v85 = v192;
          if ((v84 & 0x80u) != 0)
          {
            v85 = *(_QWORD *)(v55 + 16);
            v84 = *(_QWORD *)(v55 + 24);
          }
          *(_QWORD *)v83 = v81;
          *(_OWORD *)(v83 + 8) = *(_OWORD *)&__p[1];
          __p[1] = 0;
          __p[2] = 0;
          *(_OWORD *)(v83 + 24) = *(_OWORD *)v207;
          *(_QWORD *)v207 = 0;
          *(_QWORD *)&v207[8] = 0;
          *(_QWORD *)(v83 + 40) = v85;
          *(_QWORD *)(v83 + 48) = v84;
          *(_BYTE *)(v83 + 56) = 1;
          v204 = 0;
          v205 = v83;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v54 + 24) + 40))(*(_QWORD *)(v54 + 24), &v205);
          v86 = v205;
          v205 = 0;
          if (v86)
          {
            v87 = *(std::__shared_weak_count **)(v86 + 32);
            if (v87)
            {
              v88 = (unint64_t *)&v87->__shared_owners_;
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
            v90 = *(std::__shared_weak_count **)(v86 + 16);
            if (v90)
            {
              v91 = (unint64_t *)&v90->__shared_owners_;
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }
            MEMORY[0x212BC6398](v86, 0x10F0C40B62ED6C6);
            v93 = v204;
            v204 = 0;
            if (v93)
            {
              v94 = *(std::__shared_weak_count **)(v93 + 32);
              if (v94)
              {
                v95 = (unint64_t *)&v94->__shared_owners_;
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
              v97 = *(std::__shared_weak_count **)(v93 + 16);
              if (v97)
              {
                v98 = (unint64_t *)&v97->__shared_owners_;
                do
                  v99 = __ldaxr(v98);
                while (__stlxr(v99 - 1, v98));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                  std::__shared_weak_count::__release_weak(v97);
                }
              }
              MEMORY[0x212BC6398](v93, 0x10F0C40B62ED6C6);
            }
          }
          v100 = *(std::__shared_weak_count **)&v207[8];
          if (*(_QWORD *)&v207[8])
          {
            v101 = (unint64_t *)(*(_QWORD *)&v207[8] + 8);
            do
              v102 = __ldaxr(v101);
            while (__stlxr(v102 - 1, v101));
            if (!v102)
            {
              ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
              std::__shared_weak_count::__release_weak(v100);
            }
          }
          v103 = (std::__shared_weak_count *)__p[2];
          if (__p[2])
          {
            v104 = (unint64_t *)((char *)__p[2] + 8);
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
          }
        }
        else
        {
          os_log_type_enabled(v73, OS_LOG_TYPE_INFO);
          LODWORD(__p[0]) = 134217984;
          *(void **)((char *)__p + 4) = v58;
          v106 = (void *)_os_log_send_and_compose_impl();
          if (v106)
            free(v106);
        }
        if (v52)
        {
          sub_20E8C003C((uint64_t)&v194, "Latest depth sensor to IMU timeoffset %f", *(double *)(a1 + 5104));
          sub_20E863570((uint64_t)&v194);
        }
        sub_20E863570((uint64_t)&v194);
        v107 = v202;
        if (v202)
        {
          v108 = (unint64_t *)&v202->__shared_owners_;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 - 1, v108));
          if (!v109)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
LABEL_133:
        sub_20F021268(&v203);
        if (**(int **)(v203 + 56) > 3)
          return;
        v110 = *(unsigned __int8 *)(v203 + 72);
        v111 = sub_20E8C31DC(v203, "OSLogSurrogateAppender", 1, 0);
        v112 = v111;
        if (!v110 && v111 == 0)
          return;
        v194 = &v203;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v196 = std::chrono::system_clock::now().__d_.__rep_;
        v197 = 3;
        v198 = "unknown file";
        v199 = 79;
        v201 = 0;
        v202 = 0;
        v200 = "unknown function";
        v114 = *v194;
        if (*(char *)(*v194 + 39) < 0)
        {
          v116 = *(const char **)(v114 + 16);
          v115 = *(_QWORD *)(v114 + 24);
          v193 = *v194 + 16;
          v118 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v118 & 1) != 0)
            goto LABEL_142;
        }
        else
        {
          v115 = *(unsigned __int8 *)(*v194 + 39);
          v116 = (const char *)(*v194 + 16);
          v193 = (uint64_t)v116;
          v117 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v117 & 1) != 0)
            goto LABEL_142;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
          if (v207[0] && SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_142:
        if (byte_254A4A4F8[23] >= 0)
          v119 = byte_254A4A4F8;
        else
          v119 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v120 = byte_254A4A4F8[23];
        else
          v120 = *(_QWORD *)&byte_254A4A4F8[8];
        __p[0] = os_log_create(v119, v116);
        v121 = &__p[1];
        if (v120 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v120 >= 0x17)
        {
          v122 = v112;
          v123 = v116;
          v124 = v114;
          v125 = v110;
          v126 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v120 | 7) != 0x17)
            v126 = v120 | 7;
          v127 = v126 + 1;
          v121 = (void **)operator new(v126 + 1);
          __p[2] = (void *)v120;
          *(_QWORD *)v207 = v127 | 0x8000000000000000;
          __p[1] = v121;
          v110 = v125;
          v114 = v124;
          v116 = v123;
          v112 = v122;
        }
        else
        {
          v207[7] = v120;
          if (!v120)
          {
LABEL_156:
            *((_BYTE *)v121 + v120) = 0;
            v207[8] = 1;
            v128 = &v207[16];
            if (v115 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v115 >= 0x17)
            {
              v129 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v115 | 7) != 0x17)
                v129 = v115 | 7;
              v130 = v129 + 1;
              v128 = operator new(v129 + 1);
              *(_QWORD *)&v207[24] = v115;
              *(_QWORD *)&v207[32] = v130 | 0x8000000000000000;
              *(_QWORD *)&v207[16] = v128;
            }
            else
            {
              v207[39] = v115;
              if (!v115)
                goto LABEL_164;
            }
            memmove(v128, v116, v115);
LABEL_164:
            v128[v115] = 0;
            v207[40] = 1;
            v131 = __p[0];
            if ((v207[39] & 0x80000000) != 0)
              operator delete(*(void **)&v207[16]);
            if (v207[8] && (v207[7] & 0x80000000) != 0)
              operator delete(__p[1]);
            if (__p[0])
              os_release(__p[0]);
            if (v112 && *(_QWORD *)(v112 + 24))
            {
              v132 = _os_log_pack_size();
              v133 = (std::__shared_weak_count_vtbl *)operator new(v132, (std::align_val_t)8uLL);
              v134 = (std::__shared_weak_count *)operator new();
              v135 = v134;
              v134->__shared_owners_ = 0;
              v136 = (unint64_t *)&v134->__shared_owners_;
              v134->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v134->__shared_weak_owners_ = 0;
              v134[1].__vftable = v133;
              __p[0] = v133;
              __p[1] = v133;
              __p[2] = v134;
              do
                v137 = __ldxr(v136);
              while (__stxr(v137 + 1, v136));
              memset(v207, 0, 24);
              do
                v138 = __ldaxr(v136);
              while (__stlxr(v138 - 1, v136));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                std::__shared_weak_count::__release_weak(v135);
              }
              v139 = __p[0];
              v140 = _os_log_pack_fill();
              v141 = *(_QWORD *)(a1 + 3616);
              v142 = *(_QWORD *)(a1 + 3624);
              v143 = *(_QWORD *)(a1 + 3632);
              v144 = *(_QWORD *)(a1 + 3544);
              v145 = *(_QWORD *)(a1 + 3552);
              v146 = *(_QWORD *)(a1 + 3560);
              v147 = *(_QWORD *)(a1 + 3568);
              v148 = *(_QWORD *)(a1 + 3576);
              v149 = *(_QWORD *)(a1 + 3584);
              v150 = *(_QWORD *)(a1 + 3592);
              v151 = *(_QWORD *)(a1 + 3600);
              v152 = *(_QWORD *)(a1 + 3608);
              *(_DWORD *)v140 = 134220800;
              *(_QWORD *)(v140 + 4) = v141;
              *(_WORD *)(v140 + 12) = 2048;
              *(_QWORD *)(v140 + 14) = v142;
              *(_WORD *)(v140 + 22) = 2048;
              *(_QWORD *)(v140 + 24) = v143;
              *(_WORD *)(v140 + 32) = 2048;
              *(_QWORD *)(v140 + 34) = v144;
              *(_WORD *)(v140 + 42) = 2048;
              *(_QWORD *)(v140 + 44) = v145;
              *(_WORD *)(v140 + 52) = 2048;
              *(_QWORD *)(v140 + 54) = v146;
              *(_WORD *)(v140 + 62) = 2048;
              *(_QWORD *)(v140 + 64) = v147;
              *(_WORD *)(v140 + 72) = 2048;
              *(_QWORD *)(v140 + 74) = v148;
              *(_WORD *)(v140 + 82) = 2048;
              *(_QWORD *)(v140 + 84) = v149;
              *(_WORD *)(v140 + 92) = 2048;
              *(_QWORD *)(v140 + 94) = v150;
              *(_WORD *)(v140 + 102) = 2048;
              *(_QWORD *)(v140 + 104) = v151;
              *(_WORD *)(v140 + 112) = 2048;
              *(_QWORD *)(v140 + 114) = v152;
              v153 = operator new();
              v154 = *(unsigned __int8 *)(v114 + 39);
              v155 = v193;
              if ((v154 & 0x80u) != 0)
              {
                v155 = *(_QWORD *)(v114 + 16);
                v154 = *(_QWORD *)(v114 + 24);
              }
              *(_QWORD *)v153 = v139;
              *(_OWORD *)(v153 + 8) = *(_OWORD *)&__p[1];
              __p[1] = 0;
              __p[2] = 0;
              *(_OWORD *)(v153 + 24) = *(_OWORD *)v207;
              *(_QWORD *)v207 = 0;
              *(_QWORD *)&v207[8] = 0;
              *(_QWORD *)(v153 + 40) = v155;
              *(_QWORD *)(v153 + 48) = v154;
              *(_BYTE *)(v153 + 56) = 1;
              v204 = 0;
              v205 = v153;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v112 + 24) + 40))(*(_QWORD *)(v112 + 24), &v205);
              v156 = v205;
              v205 = 0;
              if (v156)
              {
                v157 = *(std::__shared_weak_count **)(v156 + 32);
                if (v157)
                {
                  v158 = (unint64_t *)&v157->__shared_owners_;
                  do
                    v159 = __ldaxr(v158);
                  while (__stlxr(v159 - 1, v158));
                  if (!v159)
                  {
                    ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                    std::__shared_weak_count::__release_weak(v157);
                  }
                }
                v160 = *(std::__shared_weak_count **)(v156 + 16);
                if (v160)
                {
                  v161 = (unint64_t *)&v160->__shared_owners_;
                  do
                    v162 = __ldaxr(v161);
                  while (__stlxr(v162 - 1, v161));
                  if (!v162)
                  {
                    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                    std::__shared_weak_count::__release_weak(v160);
                  }
                }
                MEMORY[0x212BC6398](v156, 0x10F0C40B62ED6C6);
                v163 = v204;
                v204 = 0;
                if (v163)
                {
                  v164 = *(std::__shared_weak_count **)(v163 + 32);
                  if (v164)
                  {
                    v165 = (unint64_t *)&v164->__shared_owners_;
                    do
                      v166 = __ldaxr(v165);
                    while (__stlxr(v166 - 1, v165));
                    if (!v166)
                    {
                      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                      std::__shared_weak_count::__release_weak(v164);
                    }
                  }
                  v167 = *(std::__shared_weak_count **)(v163 + 16);
                  if (v167)
                  {
                    v168 = (unint64_t *)&v167->__shared_owners_;
                    do
                      v169 = __ldaxr(v168);
                    while (__stlxr(v169 - 1, v168));
                    if (!v169)
                    {
                      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                      std::__shared_weak_count::__release_weak(v167);
                    }
                  }
                  MEMORY[0x212BC6398](v163, 0x10F0C40B62ED6C6);
                }
              }
              v170 = *(std::__shared_weak_count **)&v207[8];
              if (*(_QWORD *)&v207[8])
              {
                v171 = (unint64_t *)(*(_QWORD *)&v207[8] + 8);
                do
                  v172 = __ldaxr(v171);
                while (__stlxr(v172 - 1, v171));
                if (!v172)
                {
                  ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                  std::__shared_weak_count::__release_weak(v170);
                }
              }
              v173 = (std::__shared_weak_count *)__p[2];
              if (__p[2])
              {
                v174 = (unint64_t *)((char *)__p[2] + 8);
                do
                  v175 = __ldaxr(v174);
                while (__stlxr(v175 - 1, v174));
                if (!v175)
                {
                  ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                  std::__shared_weak_count::__release_weak(v173);
                }
              }
            }
            else
            {
              os_log_type_enabled(v131, OS_LOG_TYPE_INFO);
              v176 = *(void **)(a1 + 3616);
              v177 = *(void **)(a1 + 3624);
              v178 = *(_QWORD *)(a1 + 3632);
              v179 = *(_QWORD *)(a1 + 3544);
              v180 = *(_QWORD *)(a1 + 3552);
              v181 = *(_QWORD *)(a1 + 3560);
              v182 = *(_QWORD *)(a1 + 3568);
              v183 = *(_QWORD *)(a1 + 3576);
              v184 = *(_QWORD *)(a1 + 3584);
              v185 = *(_QWORD *)(a1 + 3592);
              v186 = *(_QWORD *)(a1 + 3600);
              v187 = *(_QWORD *)(a1 + 3608);
              LODWORD(__p[0]) = 134220800;
              *(void **)((char *)__p + 4) = v176;
              WORD2(__p[1]) = 2048;
              *(void **)((char *)&__p[1] + 6) = v177;
              HIWORD(__p[2]) = 2048;
              *(_QWORD *)v207 = v178;
              *(_WORD *)&v207[8] = 2048;
              *(_QWORD *)&v207[10] = v179;
              *(_WORD *)&v207[18] = 2048;
              *(_QWORD *)&v207[20] = v180;
              *(_WORD *)&v207[28] = 2048;
              *(_QWORD *)&v207[30] = v181;
              *(_WORD *)&v207[38] = 2048;
              *(_QWORD *)&v207[40] = v182;
              *(_WORD *)v208 = 2048;
              *(_QWORD *)&v208[2] = v183;
              *(_WORD *)&v208[10] = 2048;
              *(_QWORD *)&v208[12] = v184;
              *(_WORD *)&v208[20] = 2048;
              *(_QWORD *)&v208[22] = v185;
              *(_WORD *)&v208[30] = 2048;
              *(_QWORD *)&v208[32] = v186;
              *(_WORD *)v209 = 2048;
              *(_QWORD *)&v209[2] = v187;
              v188 = (void *)_os_log_send_and_compose_impl();
              if (v188)
                free(v188);
            }
            if (v110)
            {
              sub_20E8C003C((uint64_t)&v194, "Latest depth extrinsics p: %f %f %f, R: %f, %f, %f, %f, %f, %f, %f, %f, %f", *(double *)(a1 + 3616), *(double *)(a1 + 3624), *(double *)(a1 + 3632), *(double *)(a1 + 3544), *(double *)(a1 + 3552), *(double *)(a1 + 3560), *(double *)(a1 + 3568), *(double *)(a1 + 3576), *(double *)(a1 + 3584), *(double *)(a1 + 3592), *(double *)(a1 + 3600), *(double *)(a1 + 3608));
              sub_20E863570((uint64_t)&v194);
            }
            sub_20E863570((uint64_t)&v194);
            v189 = v202;
            if (v202)
            {
              v190 = (unint64_t *)&v202->__shared_owners_;
              do
                v191 = __ldaxr(v190);
              while (__stlxr(v191 - 1, v190));
              if (!v191)
              {
                ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                std::__shared_weak_count::__release_weak(v189);
              }
            }
            return;
          }
        }
        memmove(v121, v119, v120);
        goto LABEL_156;
      }
    }
    memmove(v63, v61, v62);
    goto LABEL_66;
  }
}

void sub_20F020F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  if (a45)
  {
    if (a44 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F020F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E86E8C4(&a38);
  sub_20E86E8C4(&a37);
  sub_20E86E658((uint64_t)&a39);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F020FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F021008(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

char **sub_20F0211C0(char **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (*((_BYTE *)a1 + 1688))
    sub_20EB8188C((uint64_t)(a1 + 3));
  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 3);
        if (v5)
        {
          v6 = *((_QWORD *)v3 - 2);
          v7 = (void *)*((_QWORD *)v3 - 3);
          if (v6 != v5)
          {
            do
              v6 = sub_20EB8188C(v6 - 1664);
            while (v6 != v5);
            v7 = (void *)*((_QWORD *)v3 - 3);
          }
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v7);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20F021268(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A61958);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A61958))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A61950);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A61958);
  }
  *a1 = qword_254A61950;
}

void sub_20F021304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A61958);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A61958);
  _Unwind_Resume(a1);
}

void sub_20F02135C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void **v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t i;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t j;
  unsigned __int8 v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  _BOOL4 v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t k;
  unsigned __int8 v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t m;
  unsigned __int8 v47;
  int v48;
  double *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  _QWORD *v63;
  const char *v64;
  size_t v65;
  uint64_t v66;
  double *v67;
  double *v68;
  double *v69;
  double *v70;
  uint64_t v71;
  double *v72;
  double *v73;
  double *v74;
  void **v75;
  double *v76;
  _QWORD v77[2];
  char v78;
  _DWORD v79[4];
  uint64_t v80[34];

  v3 = (void **)a2;
  *(_WORD *)(a2 + 264) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 72) = -1;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 96) = -1;
  *(_QWORD *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_DWORD *)(a2 + 120) = -1;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  *(_DWORD *)(a2 + 144) = -1;
  *(_QWORD *)(a2 + 152) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  *(_DWORD *)(a2 + 168) = -1;
  *(_QWORD *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  *(_DWORD *)(a2 + 192) = -1;
  *(_QWORD *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 208) = 0;
  *(_DWORD *)(a2 + 216) = -1;
  *(_QWORD *)(a2 + 224) = 0;
  *(_BYTE *)(a2 + 232) = 0;
  *(_DWORD *)(a2 + 240) = -1;
  *(_QWORD *)(a2 + 248) = 0;
  *(_BYTE *)(a2 + 256) = 0;
  *(_WORD *)(a2 + 272) = 0;
  *(_BYTE *)(a2 + 274) = 0;
  v4 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v6 = **v4;
  v71 = (*v4)[1];
  if (v6 != v71)
  {
    v7 = (_DWORD *)v5;
    v73 = (double *)(v5 + 48);
    v74 = (double *)(v5 + 24);
    v72 = (double *)(v5 + 72);
    v69 = (double *)(v5 + 120);
    v70 = (double *)(v5 + 96);
    v68 = (double *)(v5 + 144);
    v66 = v5 + 192;
    v67 = (double *)(v5 + 168);
    v75 = v3;
    v76 = (double *)v5;
    while (1)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v8 = *(_QWORD *)(v6 + 32);
      if (v8 != v9)
        break;
LABEL_3:
      v6 += 240;
      if (v6 == v71)
        return;
    }
    v10 = 0;
    while (1)
    {
      v12 = *(_QWORD **)(v9 + 16 * v10);
      if (!*v12 && !v12[1])
        goto LABEL_8;
      v13 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 >= 0x10000u)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v14 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v15 = qword_254A6DE40;
          for (i = qword_254A6DE48; v15 != i; v15 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v15)(*(_QWORD *)(v15 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        v17 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
LABEL_109:
          abort();
        qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
      }
      if (v10 >= 0x10000)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
        v18 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v19 = qword_254A6DE40;
          for (j = qword_254A6DE48; v19 != j; v19 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v19)(*(_QWORD *)(v19 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        v21 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_109;
        qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
      }
      v22 = *(_QWORD *)(v6 + 168);
      v23 = -1.0;
      if (v22 != *(_QWORD *)(v6 + 176))
      {
        v24 = v22 + 16 * v10;
        if (*(_BYTE *)(v24 + 8))
          v23 = *(double *)v24;
      }
      v25 = *v7 != -1;
      if (*v7 == -1)
      {
        v26 = v7[6];
        v27 = v26 == -1;
        v25 = v26 != -1;
        if (v27)
        {
          v28 = v7[12];
          v27 = v28 == -1;
          v25 = v28 != -1;
          if (v27)
          {
            v29 = v7[18];
            v27 = v29 == -1;
            v25 = v29 != -1;
            if (v27)
            {
              v30 = v7[24];
              v27 = v30 == -1;
              v25 = v30 != -1;
              if (v27)
              {
                v31 = v7[30];
                v27 = v31 == -1;
                v25 = v31 != -1;
                if (v27)
                {
                  v32 = v7[36];
                  v27 = v32 == -1;
                  v25 = v32 != -1;
                  if (v27)
                    v25 = v7[42] != -1;
                }
              }
            }
          }
        }
      }
      v33 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16 * v10);
      v34 = *(_QWORD *)(v33 + 56);
      v35 = *(_QWORD *)(v33 + 64);
      v36 = *(uint64_t **)(*(_QWORD *)(v6 + 48) + 16 * v10);
      v38 = *v36;
      v37 = v36[1];
      v39 = 1.0;
      if (v25)
      {
        if (v13 >= 0x10000)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v40 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v41 = qword_254A6DE40;
            for (k = qword_254A6DE48; v41 != k; v41 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v41)(*(_QWORD *)(v41 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
          }
          v43 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          v3 = v75;
          if (!byte_254A6DE68)
LABEL_111:
            abort();
          qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
        }
        if (v10 >= 0x10000)
        {
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
          v44 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v45 = qword_254A6DE40;
            for (m = qword_254A6DE48; v45 != m; v45 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v45)(*(_QWORD *)(v45 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v47 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          v3 = v75;
          if (!byte_254A6DE68)
            goto LABEL_111;
          qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
        }
        v48 = (unsigned __int16)v10 | ((unsigned __int16)v13 << 16);
        v49 = v76;
        if (*(_DWORD *)v76 != v48)
        {
          v49 = v74;
          if (*(_DWORD *)v74 != v48)
          {
            v49 = v73;
            if (*(_DWORD *)v73 != v48)
            {
              v49 = v72;
              if (*(_DWORD *)v72 != v48)
              {
                v49 = v70;
                if (*(_DWORD *)v70 != v48)
                {
                  v49 = v69;
                  if (*(_DWORD *)v69 != v48)
                  {
                    v49 = v68;
                    if (*(_DWORD *)v68 != v48)
                    {
                      v49 = v67;
                      if (*(_DWORD *)v67 != v48)
                      {
                        sub_20E863438((uint64_t)v79);
                        sub_20E86A980(v80, (uint64_t)"Query source ID does not exist.\nQuery source ID: ", 49);
                        v63 = (_QWORD *)std::ostream::operator<<();
                        sub_20E86A980(v63, (uint64_t)".\nAvailable source IDs: ", 24);
                        sub_20EEA5904((uint64_t)v76, v66, (uint64_t)v79);
                        sub_20E923E88(v79, v77);
                        if (v78 >= 0)
                          v64 = (const char *)v77;
                        else
                          v64 = (const char *)v77[0];
                        v65 = strlen(v64);
                        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraAllocationInfo.h", 122, (uint64_t)"", 0, (uint64_t)v64, v65, (void (*)(void **))sub_21023DDB0);
                        abort();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v39 = v49[1];
      }
      v50 = 0xAAAAAAAAAAAAAAABLL * ((v37 - v38) >> 3);
      v51 = (unint64_t)(v35 - v34) >> 5;
      v53 = (char *)v3[1];
      v52 = (unint64_t)v3[2];
      if ((unint64_t)v53 < v52)
      {
        *(_DWORD *)v53 = v13;
        *((_DWORD *)v53 + 1) = v10;
        *((_DWORD *)v53 + 2) = v51;
        *((_DWORD *)v53 + 3) = v50;
        v11 = v53 + 32;
        *((double *)v53 + 2) = v23;
        *((double *)v53 + 3) = v39;
        v7 = v76;
      }
      else
      {
        v54 = (char *)*v3;
        v55 = (v53 - (_BYTE *)*v3) >> 5;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 59)
          sub_20EABADD4();
        v57 = v52 - (_QWORD)v54;
        if (v57 >> 4 > v56)
          v56 = v57 >> 4;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFE0)
          v58 = 0x7FFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          if (v58 >> 59)
            sub_20E877A38();
          v59 = (char *)operator new(32 * v58);
        }
        else
        {
          v59 = 0;
        }
        v60 = &v59[32 * v55];
        *(_DWORD *)v60 = v13;
        *((_DWORD *)v60 + 1) = v10;
        *((_DWORD *)v60 + 2) = v51;
        *((_DWORD *)v60 + 3) = v50;
        *((double *)v60 + 2) = v23;
        *((double *)v60 + 3) = v39;
        v61 = v60;
        if (v53 != v54)
        {
          v3 = v75;
          v7 = v76;
          do
          {
            v62 = *((_OWORD *)v53 - 1);
            *((_OWORD *)v61 - 2) = *((_OWORD *)v53 - 2);
            *((_OWORD *)v61 - 1) = v62;
            v61 -= 32;
            v53 -= 32;
          }
          while (v53 != v54);
          v53 = (char *)*v75;
          v11 = v60 + 32;
          *v75 = v61;
          v75[1] = v60 + 32;
          v75[2] = &v59[32 * v58];
          if (!v53)
            goto LABEL_7;
LABEL_91:
          operator delete(v53);
          goto LABEL_7;
        }
        v3 = v75;
        v7 = v76;
        v11 = v60 + 32;
        *v75 = v60;
        v75[1] = v60 + 32;
        v75[2] = &v59[32 * v58];
        if (v53)
          goto LABEL_91;
      }
LABEL_7:
      v3[1] = v11;
      v9 = *(_QWORD *)(v6 + 24);
      v8 = *(_QWORD *)(v6 + 32);
LABEL_8:
      if (++v10 >= (unint64_t)((v8 - v9) >> 4))
        goto LABEL_3;
    }
  }
}

void sub_20F021DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a25 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a26);
  sub_20EAB96CC(a18);
  _Unwind_Resume(a1);
}

void sub_20F021DF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAB96CC(v1);
  _Unwind_Resume(a1);
}

void sub_20F021E08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAB96CC(v1);
  _Unwind_Resume(a1);
}

void sub_20F021E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_20EAB96CC(a18);
  _Unwind_Resume(a1);
}

void sub_20F021E34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAB96CC(v1);
  _Unwind_Resume(a1);
}

void sub_20F021E48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAB96CC(v1);
  _Unwind_Resume(a1);
}

void sub_20F021E5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAB96CC(v1);
  _Unwind_Resume(a1);
}

void sub_20F021E70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAB96CC(v1);
  _Unwind_Resume(a1);
}

void sub_20F021E84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAB96CC(v1);
  _Unwind_Resume(a1);
}

void sub_20F021E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_20EAB96CC(a18);
  _Unwind_Resume(a1);
}

void sub_20F021EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_20EAB96CC(a18);
  _Unwind_Resume(a1);
}

void sub_20F021EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAB96CC(v1);
  _Unwind_Resume(a1);
}

void sub_20F021EDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAB96CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F021EF0(int64x2_t *a1, uint64_t a2, int8x16_t *a3, uint64_t *a4, _QWORD *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t *a12)
{
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  double v36;
  int8x16_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float64x2_t v54;
  uint64_t v55;
  double *v56;
  void **v57;
  double *v58;
  double *v59;
  uint64_t v60;
  double v61;
  double v62;
  char **v63;
  uint64_t v64;
  uint64_t v65;
  char **v66;
  char **v67;
  uint64_t v68;
  uint64_t v69;
  char **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char **v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  char *v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  char *v103;
  double v106;
  double v108;
  float64x2_t v116;
  double v117;
  double v119;
  double v121;
  float64x2_t v122;
  float64x2_t v125;
  double v126;
  float64x2_t v128;
  float64x2_t v129;
  int64x2_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t i;
  uint64_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v154;
  double v155;
  double v156;
  double v158;
  double v160;
  float64x2_t v162;
  double v164;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  unsigned __int8 v170;
  uint64_t v171;
  uint64_t j;
  unsigned __int8 v173;
  uint64_t v174;
  uint64_t v175;
  float *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _DWORD *v180;
  double v183;
  double v185;
  float64x2_t v188;
  double v190;
  float64x2_t v191;
  double v193;
  float64x2_t v194;
  double v196;
  float64x2_t v197;
  int8x16_t v199;
  float64x2_t v201;
  int8x16_t v203;
  double v204;
  double v205;
  float v206;
  int v207;
  double v210;
  double v212;
  float64x2_t v215;
  double v217;
  float64x2_t v218;
  double v220;
  float64x2_t v221;
  double v223;
  float64x2_t v224;
  int8x16_t v226;
  int8x16_t v229;
  unsigned __int8 v230;
  uint64_t k;
  uint64_t v232;
  unsigned __int8 v233;
  double v234;
  float64x2_t v235;
  double v236;
  float64x2_t v237;
  float64x2_t v238;
  unsigned __int8 v239;
  uint64_t m;
  uint64_t v241;
  unsigned __int8 v242;
  uint64_t v243;
  int v244;
  float64x2_t *v245;
  uint64_t v246;
  float64x2_t v247;
  float64x2_t v248;
  double v249;
  double v250;
  float v251;
  float64x2_t *v252;
  uint64_t v253;
  double v254;
  int v255;
  const double *v256;
  float64x2_t v257;
  double v258;
  double v259;
  float v260;
  int8x16_t *v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *p_shared_owners;
  unint64_t v272;
  uint64_t v273;
  __int128 v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  __int128 v281;
  uint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  uint64_t v296;
  __int128 v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  __int128 v304;
  uint64_t v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  uint64_t v319;
  __int128 v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t *v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  uint64_t v348;
  _OWORD *v349;
  char *v350;
  _OWORD *v351;
  uint64_t v352;
  uint64_t v353;
  void *v354;
  uint64_t v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  void *v371;
  _OWORD *v372;
  __int128 v373;
  char *v374;
  char *v375;
  __int128 v376;
  void *v377;
  void *v378;
  void *v379;
  void **v380;
  _OWORD *v381;
  void *v382;
  void *v383;
  _QWORD *v384;
  void *v385;
  uint64_t v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  void *v390;
  void *v391;
  void *v392;
  void *v393;
  void *v394;
  void *v395;
  void *v396;
  void *v397;
  void *v398;
  void *v399;
  void *v400;
  void *v401;
  void *v402;
  void *v403;
  void *v404;
  void *v405;
  void *v406;
  void **v407;
  _QWORD *v408;
  void *v409;
  void *v410;
  _QWORD *v411;
  void *v412;
  void *v413;
  void *v414;
  void *v415;
  _QWORD *v416;
  void *v417;
  void **v418;
  _OWORD *v419;
  void *v420;
  void *v421;
  void *v422;
  void **v423;
  _QWORD *v424;
  void *v425;
  void *v426;
  _QWORD *v427;
  void *v428;
  void *v429;
  void **v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  void *v435;
  char *v436;
  char *v437;
  char *v438;
  void *v439;
  void *v440;
  void *v441;
  void *v442;
  void *v443;
  void *v444;
  void *v445;
  void *v446;
  void *v447;
  void *v448;
  void *v449;
  void *v450;
  void *v451;
  void *v452;
  void *v453;
  void *v454;
  float v455;
  char *v456;
  char *v457;
  void *v458;
  void *v459;
  char *v460;
  char *v461;
  char *v462;
  void *v463;
  void *v464;
  uint64_t *v466;
  unint64_t v468;
  float64_t v469;
  float64x2_t v470;
  uint64_t v471;
  float64x2_t v472;
  uint64_t v473;
  float64x2_t v474;
  uint64_t v475;
  uint64_t v476;
  void **v477;
  uint64_t *v478;
  uint64_t v479;
  int v480;
  void **v481;
  uint64_t v482;
  uint64_t v483;
  unsigned int v485;
  unint64_t v486;
  uint64_t *v487;
  unint64_t v488;
  uint64_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  double v494;
  double v495;
  char *v497;
  unint64_t v498;
  double v499;
  unint64_t v500;
  double v501;
  double v502;
  double v503;
  unint64_t v504;
  double v505;
  unint64_t v506;
  double v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  double v512;
  uint64_t v513;
  uint64x2_t v514;
  _BYTE v515[32];
  int v516;
  __int128 v517;
  uint64_t v518;
  char v519;
  void *__p[2];
  uint64_t v521;
  uint64_t v522;
  char v523;
  float v524;
  unsigned __int8 v525;
  int8x16_t v526;
  int8x16_t v527;
  int8x16_t v528;
  _BYTE v529[25];
  int v530;
  char v531;
  int v532;
  char v533;
  char *v534;
  char *v535;
  char *v536;
  void *v537;
  char *v538;
  char *v539;
  float64x2_t v540;
  uint64_t v541;
  float64x2_t v542;
  unint64_t v543;
  float64x2_t v544;
  double v545;
  __int128 v546;
  __int128 v547;
  int v548;
  int8x16_t v549;
  int8x16_t v550;
  int8x16_t v551;
  _BYTE v552[40];
  uint64_t v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  uint64_t v558;
  float64x2x3_t v559;

  v546 = 0u;
  v547 = 0u;
  v548 = 733226408;
  kdebug_trace();
  v16 = *a4;
  v17 = *(double *)(*a4 + 16);
  v18 = *(double *)(*a4 + 8) + v17;
  v20 = *a12;
  v19 = a12[1];
  if (*a12 != v19)
  {
    v21 = v18 - v17;
    v22 = v19 - v20 - 240;
    v23 = *a12;
    if (v22 < 0xF0)
      goto LABEL_537;
    v24 = v22 / 0xF0 + 1;
    v23 = v20 + 240 * (v24 & 0x3FFFFFFFFFFFFFELL);
    v25 = (double *)(v20 + 256);
    v26 = v24 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      *(v25 - 1) = v21;
      *v25 = v17;
      *(v25 - 31) = v21;
      *(v25 - 30) = v17;
      v25 += 60;
      v26 -= 2;
    }
    while (v26);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFELL))
    {
LABEL_537:
      do
      {
        *(double *)(v23 + 8) = v21;
        *(double *)(v23 + 16) = v17;
        v23 += 240;
      }
      while (v23 != v19);
    }
  }
  v27 = a12[3];
  v28 = a12[4];
  if (v27 != v28)
  {
    v29 = v18 - v17;
    do
    {
      v30 = *(_QWORD *)(v27 + 8);
      v31 = *(_QWORD *)(v27 + 16);
      while (v30 != v31)
      {
        *(_DWORD *)v30 = a6;
        *(double *)(v30 + 8) = v29;
        *(double *)(v30 + 16) = v17;
        *(_QWORD *)(v30 + 32) = *(_QWORD *)(v30 + 24);
        *(_QWORD *)(v30 + 56) = *(_QWORD *)(v30 + 48);
        *(_QWORD *)(v30 + 216) = *(_QWORD *)(v30 + 208);
        *(_QWORD *)(v30 + 80) = *(_QWORD *)(v30 + 72);
        if (*(_BYTE *)(v30 + 120))
          *(_QWORD *)(v30 + 104) = *(_QWORD *)(v30 + 96);
        *(_QWORD *)(v30 + 136) = *(_QWORD *)(v30 + 128);
        if (*(_BYTE *)(v30 + 176))
          *(_QWORD *)(v30 + 160) = *(_QWORD *)(v30 + 152);
        *(_QWORD *)(v30 + 192) = *(_QWORD *)(v30 + 184);
        *(_QWORD *)(v30 + 240) = *(_QWORD *)(v30 + 232);
        *(_QWORD *)(v30 + 264) = *(_QWORD *)(v30 + 256);
        *(_QWORD *)(v30 + 424) = *(_QWORD *)(v30 + 416);
        *(_QWORD *)(v30 + 288) = *(_QWORD *)(v30 + 280);
        if (*(_BYTE *)(v30 + 328))
          *(_QWORD *)(v30 + 312) = *(_QWORD *)(v30 + 304);
        *(_QWORD *)(v30 + 344) = *(_QWORD *)(v30 + 336);
        if (*(_BYTE *)(v30 + 384))
          *(_QWORD *)(v30 + 368) = *(_QWORD *)(v30 + 360);
        *(_QWORD *)(v30 + 400) = *(_QWORD *)(v30 + 392);
        v30 += 440;
      }
      v27 += 104;
    }
    while (v27 != v28);
  }
  if (a10)
  {
    v550 = 0uLL;
    *(_QWORD *)&v552[8] = 0;
    *(_QWORD *)v552 = 0;
    v554 = 0u;
    v555 = 0u;
    v556 = 0u;
    v557 = 0u;
    v558 = 0;
    v32 = *(_QWORD *)(a7 + 16);
    v549 = (int8x16_t)0x3FF0000000000000uLL;
    v551 = (int8x16_t)0x3FF0000000000000uLL;
    *(_QWORD *)&v552[16] = 0x3FF0000000000000;
    *(_OWORD *)&v552[24] = *(_OWORD *)a7;
    v553 = v32;
    v526 = *a3;
    sub_20FDBAC08((uint64_t)&v549, a9, &v526);
    v33 = v550;
    v34 = v551;
    v35 = v549;
    v36 = *(double *)&v552[16];
    v37 = *(int8x16_t *)v552;
    v38 = vextq_s8(v35, v35, 8uLL).u64[0];
    v39 = vextq_s8(v37, v37, 8uLL).u64[0];
    v40 = vextq_s8(v34, v34, 8uLL).u64[0];
    *(_QWORD *)&v41.f64[0] = vextq_s8(v33, v33, 8uLL).u64[0];
    v16 = *a4;
  }
  else
  {
    v35.i64[0] = 1.0;
    v38 = 0;
    v33.i64[0] = 0;
    v41.f64[0] = 0.0;
    v34.i64[0] = 1.0;
    v40 = 0;
    v37.i64[0] = 0;
    v39 = 0;
    v36 = 1.0;
  }
  v468 = v40;
  *(_QWORD *)&v42.f64[0] = v35.i64[0];
  v42.f64[1] = v41.f64[0];
  *(_QWORD *)&v43.f64[0] = v38;
  *(_QWORD *)&v43.f64[1] = v34.i64[0];
  v33.i64[1] = v40;
  v540 = v42;
  v542 = v43;
  v541 = v37.i64[0];
  v543 = v39;
  v544 = (float64x2_t)v33;
  v545 = v36;
  v475 = a4[1];
  v44 = -286331153 * ((unint64_t)(v475 - v16) >> 4);
  v538 = 0;
  v537 = 0;
  v539 = 0;
  if (!(_DWORD)v44)
  {
    v47 = 0;
    v535 = 0;
    v534 = 0;
    v536 = 0;
    if (v16 == v475)
      goto LABEL_509;
    goto LABEL_28;
  }
  v504 = v39;
  v506 = v38;
  v511 = v34.i64[0];
  v469 = v41.f64[0];
  v471 = v37.i64[0];
  v473 = v35.i64[0];
  v45 = (char *)operator new(24 * v44);
  v537 = v45;
  v539 = &v45[24 * v44];
  v46 = 24 * ((24 * v44 - 24) / 0x18uLL) + 24;
  bzero(v45, v46);
  v538 = &v45[v46];
  v47 = (char *)operator new(24 * v44);
  v534 = v47;
  v536 = &v47[24 * v44];
  bzero(v47, v46);
  v535 = &v47[v46];
  v37.i64[0] = v471;
  v35.i64[0] = v473;
  v41.f64[0] = v469;
  v38 = v506;
  v34.i64[0] = v511;
  v39 = v504;
  if (v16 != v475)
  {
LABEL_28:
    v466 = a4;
    v485 = 0;
    v48 = 0;
    v35.i64[1] = v38;
    v37.i64[1] = v39;
    v472 = (float64x2_t)v37;
    v474 = (float64x2_t)v35;
    *(_QWORD *)&v41.f64[1] = v34.i64[0];
    v470 = v41;
    v480 = a6;
    while (1)
    {
      v50 = *(_QWORD *)(v16 + 24);
      v51 = *(_QWORD *)(v16 + 32);
      v52 = *a12;
      v53 = a12[3];
      sub_20EE5FEDC(*a12 + 240 * v48, (__int128 *)v16);
      v55 = v53 + 104 * v48;
      v58 = *(double **)(v55 + 8);
      v57 = (void **)(v55 + 8);
      v56 = v58;
      v59 = (double *)v57[1];
      v477 = v57 + 1;
      v60 = v52;
      if (v58 != v59)
      {
        v61 = *(double *)(v52 + 240 * v48 + 16);
        v62 = *(double *)(v52 + 240 * v48 + 8) + v61 - v61;
        do
        {
          *(_DWORD *)v56 = a6;
          v56[1] = v62;
          v56[2] = v61;
          v56[4] = v56[3];
          v56[7] = v56[6];
          v56[27] = v56[26];
          v56[10] = v56[9];
          if (*((_BYTE *)v56 + 120))
            v56[13] = v56[12];
          v56[17] = v56[16];
          if (*((_BYTE *)v56 + 176))
            v56[20] = v56[19];
          v56[24] = v56[23];
          v56[30] = v56[29];
          v56[33] = v56[32];
          v56[53] = v56[52];
          v56[36] = v56[35];
          if (*((_BYTE *)v56 + 328))
            v56[39] = v56[38];
          v56[43] = v56[42];
          if (*((_BYTE *)v56 + 384))
            v56[46] = v56[45];
          v56[50] = v56[49];
          v56 += 55;
        }
        while (v56 != v59);
      }
      v481 = v57;
      v63 = (char **)(v52 + 240 * v48 + 120);
      v64 = v52;
      v65 = v53 + 104 * v48 + 32;
      if ((char **)v65 != v63)
        sub_20EDB66F4((_QWORD *)(v53 + 104 * v48 + 32), *v63, *(char **)(v60 + 240 * v48 + 128), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v60 + 240 * v48 + 128) - (_QWORD)*v63) >> 3));
      v66 = (char **)(v64 + 240 * v48 + 144);
      v67 = (char **)(v53 + 104 * v48 + 56);
      if (v67 != v66)
        sub_20EDB66F4(v67, *v66, *(char **)(v64 + 240 * v48 + 152), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v64 + 240 * v48 + 152) - (_QWORD)*v66) >> 3));
      v483 = v64;
      v68 = v53 + 104 * v48;
      v71 = *(_QWORD *)(v68 + 80);
      v70 = (char **)(v68 + 80);
      v69 = v71;
      v72 = v53;
      v73 = *a5 + 32 * v48;
      v75 = *(_QWORD *)(v73 + 8);
      v74 = v73 + 8;
      v478 = (uint64_t *)v65;
      v479 = *a5 + 32 * v48;
      v487 = (uint64_t *)(v479 + 16);
      v76 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v479 + 16) - v75) >> 7);
      v78 = v70 + 1;
      v77 = v70[1];
      v79 = 0x8E38E38E38E38E39 * ((uint64_t)&v77[-v69] >> 3);
      v80 = v76 - v79;
      v482 = v16;
      v489 = v48;
      v476 = v72;
      if (v76 <= v79)
      {
        if (v76 < v79)
        {
          v96 = (char *)(v69 + 72 * v76);
LABEL_67:
          *v78 = v96;
        }
      }
      else
      {
        v81 = v72 + 104 * v48;
        v84 = *(_QWORD *)(v81 + 96);
        v83 = (_QWORD *)(v81 + 96);
        v82 = v84;
        if (0x8E38E38E38E38E39 * ((v84 - (uint64_t)v77) >> 3) >= v80)
        {
          v96 = &v77[72 * v80];
          v97 = 72 * v76 - 72 * v79;
          do
          {
            *((_QWORD *)v77 + 8) = 0x7FF8000000000000;
            *(_OWORD *)v77 = xmmword_21039A0F8;
            *((_OWORD *)v77 + 1) = unk_21039A108;
            *((_OWORD *)v77 + 2) = xmmword_21039A118;
            *((_OWORD *)v77 + 3) = unk_21039A128;
            v77 += 72;
            v97 -= 72;
          }
          while (v97);
          goto LABEL_67;
        }
        if (v76 > 0x38E38E38E38E38ELL)
          sub_20EB849AC();
        v85 = 0x8E38E38E38E38E39 * ((v82 - v69) >> 3);
        v86 = 2 * v85;
        if (2 * v85 <= v76)
          v86 = v76;
        if (v85 >= 0x1C71C71C71C71C7)
          v87 = 0x38E38E38E38E38ELL;
        else
          v87 = v86;
        if (v87 > 0x38E38E38E38E38ELL)
          sub_20E877A38();
        v88 = (char *)operator new(72 * v87);
        v89 = &v88[72 * v79];
        v90 = 72 * v76 - 72 * v79;
        v91 = v89;
        do
        {
          *((_QWORD *)v91 + 8) = 0x7FF8000000000000;
          *(_OWORD *)v91 = xmmword_21039A0F8;
          *((_OWORD *)v91 + 1) = unk_21039A108;
          *((_OWORD *)v91 + 2) = xmmword_21039A118;
          *((_OWORD *)v91 + 3) = unk_21039A128;
          v91 += 72;
          v90 -= 72;
        }
        while (v90);
        v92 = *v70;
        if (v77 != *v70)
        {
          do
          {
            *(_OWORD *)(v89 - 72) = *(_OWORD *)(v77 - 72);
            v93 = *(_OWORD *)(v77 - 56);
            v94 = *(_OWORD *)(v77 - 40);
            v95 = *(_OWORD *)(v77 - 24);
            *((_QWORD *)v89 - 1) = *((_QWORD *)v77 - 1);
            *(_OWORD *)(v89 - 24) = v95;
            *(_OWORD *)(v89 - 40) = v94;
            *(_OWORD *)(v89 - 56) = v93;
            v89 -= 72;
            v77 -= 72;
          }
          while (v77 != v92);
          v77 = *v70;
        }
        *v70 = v89;
        *v78 = &v88[72 * v76];
        *v83 = &v88[72 * v87];
        if (v77)
          operator delete(v77);
      }
      _D26 = v468;
      if (a10 && *v487 != *(_QWORD *)v74)
      {
        v99 = 0;
        v100 = 0;
        v101 = (*v487 - *(_QWORD *)v74) / 1664;
        do
        {
          v102 = (__int128 *)(*(_QWORD *)v74 + v99);
          v103 = &(*v70)[v100];
          _Q1.f64[0] = *((float64_t *)v102 + 2);
          _Q3 = *v102;
          v106 = *((double *)v102 + 5);
          _Q5 = *(float64x2_t *)((char *)v102 + 24);
          v108 = *((double *)v102 + 8);
          _Q2 = (float64x2_t)v102[3];
          _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v474, *(double *)v102), v470, *(float64x2_t *)v102, 1), v472, _Q1.f64[0]);
          __asm { FMLA            D7, D26, V3.D[1] }
          v116 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v474, _Q5.f64[0]), v470, _Q5, 1), v472, v106);
          v117 = _D7 + v36 * _Q1.f64[0];
          __asm { FMLA            D17, D26, V5.D[1] }
          v54 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v474, _Q2.f64[0]), v470, _Q2, 1), v472, v108);
          v119 = _D17 + v36 * v106;
          __asm { FMLA            D19, D26, V2.D[1] }
          v121 = _D19 + v36 * v108;
          v122 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v102, (int64x2_t)_Q5);
          _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v102, (int64x2_t)_Q5);
          _Q1.f64[1] = v106;
          _Q5.f64[0] = _Q6.f64[1];
          __asm { FMLA            D4, D5, V2.D[1] }
          v125 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v122, _Q6.f64[0]), _Q3, _Q6, 1), _Q1, v117);
          v126 = _D4 + v108 * v117;
          _D7 = v116.f64[1];
          v128 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v122, v116.f64[0]), _Q3, v116, 1), _Q1, v119);
          __asm { FMLA            D6, D7, V2.D[1] }
          v129 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v122, v54.f64[0]), _Q3, v54, 1), _Q1, v121);
          _Q1.f64[0] = v54.f64[1];
          __asm { FMLA            D3, D1, V2.D[1] }
          *(float64x2_t *)v103 = v125;
          *((double *)v103 + 2) = v126;
          *(float64x2_t *)(v103 + 24) = v128;
          *((double *)v103 + 5) = _Q6.f64[0] + v108 * v119;
          *((float64x2_t *)v103 + 3) = v129;
          *((double *)v103 + 8) = _Q3.f64[0] + v108 * v121;
          v100 += 72;
          v99 += 1664;
          --v101;
        }
        while (v101);
      }
      v130 = a1;
      v131 = v489;
      if (a1[45].i8[5])
      {
        v132 = *(_QWORD *)(*a11 + 8 * v489);
        v133 = *(_QWORD *)(v132 + 624);
        v134 = *(_QWORD *)(v132 + 632);
        if (v134 >= v133)
          v134 = v133;
        v488 = v134;
        v135 = v486 & 0xFFFFFFFFFFFFFF00 | 1;
      }
      else
      {
        v488 &= 0xFFFFFFFFFFFFFF00;
        v135 = v486 & 0xFFFFFFFFFFFFFF00;
      }
      v486 = v135;
      v136 = (unint64_t)(v51 - v50) >> 4;
      v137 = v534;
      v138 = &v534[24 * v489];
      if (a1[31].i8[1])
      {
        v139 = (uint64_t *)((char *)v537 + 24 * v489);
        v140 = *v487;
        v141 = *(_QWORD *)v74;
        v142 = 0x4EC4EC4EC4EC4EC5 * ((*v487 - *(_QWORD *)v74) >> 7);
        v143 = 0x8E38E38E38E38E39 * ((v139[1] - *v139) >> 3);
        if (v142 <= v143)
        {
          if (v142 < v143)
            v139[1] = *v139 + 0x2762762762762768 * ((*v487 - *(_QWORD *)v74) >> 7);
        }
        else
        {
          sub_20EDB554C((char **)v537 + 3 * v489, v142 - v143);
          v140 = *v487;
          v141 = *(_QWORD *)v74;
          v142 = 0x4EC4EC4EC4EC4EC5 * ((*v487 - *(_QWORD *)v74) >> 7);
        }
        v145 = &v137[24 * v489];
        v147 = *((_QWORD *)v145 + 1);
        v146 = v145 + 8;
        v148 = (v147 - *(_QWORD *)v138) >> 2;
        v497 = v138;
        if (v142 <= v148)
        {
          if (v142 < v148)
            *v146 = *(_QWORD *)v138 + 4 * v142;
        }
        else
        {
          sub_20E9F5694((uint64_t)v138, v142 - v148);
          v140 = *v487;
          v141 = *(_QWORD *)v74;
          v142 = 0x4EC4EC4EC4EC4EC5 * ((*v487 - *(_QWORD *)v74) >> 7);
        }
        if (v140 != v141)
        {
          for (i = 0; i != v142; ++i)
          {
            v167 = *(_QWORD *)v74 + 1664 * i;
            if (*(_BYTE *)(v167 + 1536))
              v168 = v167 + 96;
            else
              v168 = 0;
            v169 = *(_DWORD *)(v168 + 992);
            if (v169 == -1)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v170 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v170 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v171 = qword_254A6DE40;
                for (j = qword_254A6DE48; v171 != j; v171 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v171)(*(_QWORD *)(v171 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
              }
              v173 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v173 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68)
                goto LABEL_526;
              qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, "", 0);
              v169 = *(_DWORD *)(v168 + 992);
              if (v169 > 7)
              {
LABEL_108:
                if (v169 == 13)
                  goto LABEL_119;
                goto LABEL_113;
              }
            }
            else if (v169 > 7)
            {
              goto LABEL_108;
            }
            if (v169 > 3)
            {
              if (v169 == 6)
                goto LABEL_119;
            }
            else
            {
              if (v169 <= 1)
              {
                if (!v169)
                {
                  sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_526:
                  abort();
                }
                goto LABEL_119;
              }
              if (v169 == 2)
                goto LABEL_119;
            }
LABEL_113:
            if (v130[45].i8[5])
            {
              v174 = *(_QWORD *)v74 + 1664 * i;
              if (*(_BYTE *)(v174 + 1536))
                v175 = v174 + 96;
              else
                v175 = 0;
              if (v130[31].i8[3])
                v176 = (float *)(*(_QWORD *)v497 + 4 * i);
              else
                v176 = 0;
              sub_20FDB5F50(v488, (uint64_t)&v540, (__int128 *)v174, v175, v175, *v139 + 72 * i, v176);
              continue;
            }
LABEL_119:
            v177 = *(_QWORD *)v74 + 1664 * i;
            if (*(_BYTE *)(v177 + 1536))
              v178 = v177 + 96;
            else
              v178 = 0;
            v179 = *v139;
            if (v130[31].i8[3])
            {
              v180 = *(_DWORD **)v497;
              _Q2.f64[0] = *(float64_t *)(v177 + 16);
              _Q3 = *(float64x2_t *)v177;
              v183 = *(double *)(v177 + 40);
              _Q5 = *(float64x2_t *)(v177 + 24);
              v185 = *(double *)(v177 + 64);
              _Q24 = *(float64x2_t *)(v177 + 48);
              _D16 = v543;
              v188 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v540, _Q3.f64[0]), v542, _Q3, 1), v544, _Q2.f64[0]);
              __asm { FMLA            D21, D16, V3.D[1] }
              v190 = _D21 + v545 * _Q2.f64[0];
              v191 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v540, _Q5.f64[0]), v542, _Q5, 1), v544, v183);
              __asm { FMLA            D23, D16, V5.D[1] }
              v193 = _D23 + v545 * v183;
              v194 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v540, _Q24.f64[0]), v542, _Q24, 1), v544, v185);
              __asm { FMLA            D7, D16, V24.D[1] }
              v196 = _D7 + v545 * v185;
              v197 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v177, (int64x2_t)_Q5);
              _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v177, (int64x2_t)_Q5);
              _Q2.f64[1] = v183;
              v199 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, v188.f64[0]), _Q3, v188, 1), _Q2, v190);
              _Q5.f64[0] = v188.f64[1];
              __asm { FMLA            D4, D5, V24.D[1] }
              v505 = _D4 + v185 * v190;
              v201 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, v191.f64[0]), _Q3, v191, 1), _Q2, v193);
              _Q5.f64[0] = v191.f64[1];
              __asm { FMLA            D4, D5, V24.D[1] }
              v502 = _D4 + v185 * v193;
              v203 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v197, v194.f64[0]), _Q3, v194, 1), _Q2, v196);
              _Q3.f64[0] = v194.f64[1];
              __asm { FMLA            D2, D3, V24.D[1] }
              v501 = _Q2.f64[0] + v185 * v196;
              v507 = v201.f64[0];
              v512 = *(double *)v199.i64;
              v499 = v201.f64[1];
              v503 = *(double *)v203.i64;
              v500 = vextq_s8(v203, v203, 8uLL).u64[0];
              v498 = vextq_s8(v199, v199, 8uLL).u64[0];
              if (*(_QWORD *)v497)
              {
                v204 = atan2(-*(double *)&v199.i64[1], *(long double *)v199.i64);
                if (v204 >= 0.0)
                  v205 = 0.0;
                else
                  v205 = 6.28318531;
                v206 = v204 + v205;
                *(float *)&v180[i] = v206;
              }
              v207 = *(_DWORD *)(v178 + 992);
              if (v207 == -1)
              {
LABEL_132:
                sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102C741A, 0, (void (*)(void **))sub_21023DDB0);
                v230 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v230 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                if (!byte_254A6DE68 || byte_254A6DE70)
                {
                  v232 = qword_254A6DE40;
                  for (k = qword_254A6DE48; v232 != k; v232 += 16)
                    (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v232)(*(_QWORD *)(v232 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_2102C741A, 0);
                }
                v233 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
                if ((v233 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
                {
                  __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A6DE78);
                }
                v130 = a1;
                if (!byte_254A6DE68)
                  goto LABEL_525;
                qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_2102C741A, 0);
                v207 = *(_DWORD *)(v178 + 992);
                if (!v207)
                  goto LABEL_524;
                goto LABEL_140;
              }
            }
            else
            {
              _Q2.f64[0] = *(float64_t *)(v177 + 16);
              _Q3 = *(int64x2_t *)v177;
              v210 = *(double *)(v177 + 40);
              _Q5 = *(float64x2_t *)(v177 + 24);
              v212 = *(double *)(v177 + 64);
              _Q1 = *(float64x2_t *)(v177 + 48);
              _D16 = v543;
              v215 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v540, *(double *)v177), v542, *(float64x2_t *)v177, 1), v544, _Q2.f64[0]);
              __asm { FMLA            D21, D16, V3.D[1] }
              v217 = _D21 + v545 * _Q2.f64[0];
              v218 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v540, _Q5.f64[0]), v542, _Q5, 1), v544, v210);
              __asm { FMLA            D23, D16, V5.D[1] }
              v220 = _D23 + v545 * v210;
              v221 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v540, _Q1.f64[0]), v542, _Q1, 1), v544, v212);
              __asm { FMLA            D7, D16, V1.D[1] }
              v223 = _D7 + v545 * v212;
              v224 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v177, (int64x2_t)_Q5);
              _Q3 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v177, (int64x2_t)_Q5);
              _Q2.f64[1] = v210;
              v226 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v215.f64[0]), _Q3, v215, 1), _Q2, v217);
              _Q5.f64[0] = v215.f64[1];
              __asm { FMLA            D4, D5, V1.D[1] }
              v505 = _D4 + v212 * v217;
              v54 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v218.f64[0]), _Q3, v218, 1), _Q2, v220);
              _Q5.f64[0] = v218.f64[1];
              __asm { FMLA            D4, D5, V1.D[1] }
              v502 = _D4 + v212 * v220;
              v229 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v224, v221.f64[0]), _Q3, v221, 1), _Q2, v223);
              _Q3.f64[0] = v221.f64[1];
              __asm { FMLA            D2, D3, V1.D[1] }
              v501 = _Q2.f64[0] + v212 * v223;
              v507 = v54.f64[0];
              v512 = *(double *)v226.i64;
              v499 = v54.f64[1];
              v503 = *(double *)v229.i64;
              v500 = vextq_s8(v229, v229, 8uLL).u64[0];
              v498 = vextq_s8(v226, v226, 8uLL).u64[0];
              v207 = *(_DWORD *)(v178 + 992);
              if (v207 == -1)
                goto LABEL_132;
            }
            if (!v207)
              goto LABEL_524;
LABEL_140:
            v234 = *(double *)(v178 + 88);
            v235 = *(float64x2_t *)(v178 + 72);
            v236 = *(double *)(v178 + 112);
            v237 = *(float64x2_t *)(v178 + 96);
            v54.f64[0] = *(float64_t *)(v178 + 136);
            v238 = *(float64x2_t *)(v178 + 120);
            if (v207 == -1)
            {
              v490 = *(float64x2_t *)(v178 + 120);
              v491 = *(float64x2_t *)(v178 + 96);
              v492 = *(float64x2_t *)(v178 + 72);
              v493 = v54;
              v494 = *(double *)(v178 + 112);
              v495 = *(double *)(v178 + 88);
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102C741A, 0, (void (*)(void **))sub_21023DDB0);
              v239 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v239 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v241 = qword_254A6DE40;
                for (m = qword_254A6DE48; v241 != m; v241 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v241)(*(_QWORD *)(v241 + 8), "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_2102C741A, 0);
              }
              v242 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v242 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              v130 = a1;
              if (!byte_254A6DE68)
                goto LABEL_525;
              qword_254A6DE58(unk_254A6DE60, "!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, &unk_2102C741A, 0);
              v236 = v494;
              v234 = v495;
              v235 = v492;
              v54 = v493;
              v238 = v490;
              v237 = v491;
              if (!*(_DWORD *)(v178 + 992))
              {
LABEL_524:
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102C741A, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_525:
                abort();
              }
            }
            v150 = v179 + 72 * i;
            *(_QWORD *)&v235.f64[1] = vextq_s8((int8x16_t)v235, (int8x16_t)v235, 8uLL).u64[0];
            *(_QWORD *)&v237.f64[1] = vextq_s8((int8x16_t)v237, (int8x16_t)v237, 8uLL).u64[0];
            *(_QWORD *)&v238.f64[1] = vextq_s8((int8x16_t)v238, (int8x16_t)v238, 8uLL).u64[0];
            v151 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v235, v512), v237, *(double *)&v498), v238, v505);
            v152 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v235, v507), v237, v499), v238, v502);
            _D3 = v234 * v507 + v236 * v499 + v54.f64[0] * v502;
            v154 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v235, v503), v237, *(double *)&v500), v238, v501);
            v155 = v234 * v503 + v236 * *(double *)&v500 + v54.f64[0] * v501;
            v156 = *(double *)(v178 + 16);
            _Q7 = *(_OWORD *)v178;
            v158 = *(double *)(v178 + 40);
            _Q17 = *(float64x2_t *)(v178 + 24);
            v160 = *(double *)(v178 + 64);
            _Q19 = *(float64x2_t *)(v178 + 48);
            v162 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v151, *(double *)v178), v152, *(float64x2_t *)v178, 1), v154, v156);
            __asm { FMLA            D21, D3, V7.D[1] }
            v164 = _D21 + v155 * v156;
            __asm
            {
              FMLA            D21, D3, V17.D[1]
              FMLA            D1, D3, V19.D[1]
            }
            *(double *)(v150 + 16) = v164;
            *(float64x2_t *)v150 = v162;
            *(double *)(v150 + 40) = _D21 + v155 * v158;
            *(float64x2_t *)(v150 + 24) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v151, _Q17.f64[0]), v152, _Q17, 1), v154, v158);
            *(double *)(v150 + 64) = _D1 + v155 * v160;
            *(float64x2_t *)(v150 + 48) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v151, _Q19.f64[0]), v152, _Q19, 1), v154, v160);
          }
        }
        if (!v130[31].i8[1])
        {
          v144 = 0;
          v243 = 0;
          v131 = v489;
          LODWORD(v136) = (unint64_t)(v51 - v50) >> 4;
          v138 = v497;
          LOBYTE(v532) = 0;
          v533 = 0;
          LOBYTE(v530) = 0;
          v531 = 0;
          if (!v130[31].i8[3])
            goto LABEL_179;
          goto LABEL_175;
        }
        v243 = *v139;
        v131 = v489;
        LODWORD(v136) = (unint64_t)(v51 - v50) >> 4;
        v138 = v497;
        if (!*(_BYTE *)(*(_QWORD *)v74 + 1592))
        {
          if (((unint64_t)(v51 - v50) >> 4) == 2)
            v144 = v243 + 72;
          else
            v144 = 0;
          LOBYTE(v532) = 0;
          v533 = 0;
          LOBYTE(v530) = 0;
          v531 = 0;
          if (!v130[31].i8[3])
            goto LABEL_179;
          goto LABEL_175;
        }
        v144 = *v139;
      }
      else
      {
        v144 = 0;
      }
      v243 = 0;
      LOBYTE(v532) = 0;
      v533 = 0;
      LOBYTE(v530) = 0;
      v531 = 0;
      if (!v130[31].i8[3])
        goto LABEL_179;
LABEL_175:
      v244 = **(_DWORD **)v138;
      if (!*(_BYTE *)(*(_QWORD *)v74 + 1592))
      {
        v532 = **(_DWORD **)v138;
        v533 = 1;
        if ((_DWORD)v136 != 2)
          goto LABEL_179;
        v244 = *(_DWORD *)(*(_QWORD *)v138 + 4);
      }
      v530 = v244;
      v531 = 1;
LABEL_179:
      v526.i8[0] = 0;
      v529[24] = 0;
      LOBYTE(v524) = 0;
      v525 = 0;
      if (!v130[31].i8[2])
        goto LABEL_197;
      if (*(_BYTE *)(*(_QWORD *)v74 + 1592))
      {
        v245 = (float64x2_t *)(*(_QWORD *)(*a5 + 32 * *(unsigned int *)(*(_QWORD *)v74 + 1584) + 8)
                             + 1664 * *(unsigned int *)(*(_QWORD *)v74 + 1588));
        sub_20EB83BBC(v479, (uint64_t)v245, v488, v486, (uint64_t)&v549);
        v528 = v551;
        *(_OWORD *)v529 = *(_OWORD *)v552;
        *(_OWORD *)&v529[9] = *(_OWORD *)&v552[9];
        v526 = v549;
        v527 = v550;
        v246 = *(_QWORD *)(v479 + 8);
        v247.f64[0] = *(float64_t *)(v246 + 16);
        v247.f64[1] = *(float64_t *)(v246 + 40);
        v248 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v246, *(int64x2_t *)(v246 + 24)), v245->f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v246, *(int64x2_t *)(v246 + 24)), *v245, 1), v247, v245[1].f64[0]);
        v249 = atan2(-v248.f64[1], v248.f64[0]);
        if (v249 >= 0.0)
          v250 = 0.0;
        else
          v250 = 6.28318531;
        v251 = v249 + v250;
        v524 = v251;
        if (!v525)
          goto LABEL_185;
      }
      else
      {
        if ((_DWORD)v136 != 2)
          goto LABEL_197;
        sub_20EB83470(v479, v488, v486, (uint64_t)&v549);
        v528 = v551;
        *(_OWORD *)v529 = *(_OWORD *)v552;
        *(_OWORD *)&v529[9] = *(_OWORD *)&v552[9];
        v526 = v549;
        v527 = v550;
        v252 = *(float64x2_t **)(v479 + 8);
        v253 = *(_QWORD *)(v479 + 16);
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v253 - (uint64_t)v252) >> 7)) >= 2)
        {
          v256 = (const double *)(v253 - 1664);
          v559 = vld3q_f64(v256);
          v257 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v559.val[0], v252->f64[0]), v559.val[1], *v252, 1), v559.val[2], v252[1].f64[0]);
          v258 = atan2(-v257.f64[1], v257.f64[0]);
          if (v258 >= 0.0)
            v259 = 0.0;
          else
            v259 = 6.28318531;
          v254 = v258 + v259;
          v255 = v525;
          if (v525 == 1)
          {
LABEL_195:
            if (v255)
            {
              v260 = v254;
              v524 = v260;
            }
            goto LABEL_197;
          }
        }
        else
        {
          v254 = 0.0;
          v255 = v525;
          if (!v525)
            goto LABEL_195;
        }
        if (!v255)
        {
          v455 = v254;
          v524 = v455;
LABEL_185:
          v525 = 1;
          goto LABEL_197;
        }
        v525 = 0;
      }
LABEL_197:
      v261 = &v526;
      if (!v529[24])
        v261 = 0;
      v513 = (uint64_t)v261;
      LOBYTE(v522) = 0;
      v523 = 0;
      if (*(_BYTE *)(*(_QWORD *)v74 + 1592))
      {
        v522 = *(_QWORD *)(a12[3] + 104 * *(unsigned int *)(*(_QWORD *)v74 + 1584) + 8)
             + 440 * *(unsigned int *)(*(_QWORD *)v74 + 1588);
        v523 = 1;
      }
      sub_20EE5F668(&v549, (uint64_t *)(v483 + 240 * v131 + 24));
      v262 = *(_QWORD *)v74;
      if (*(_BYTE *)(*(_QWORD *)v74 + 1592))
      {
        v263 = *(unsigned int *)(v262 + 1584);
        v264 = *v466;
        if (0xEEEEEEEEEEEEEEEFLL * ((v466[1] - *v466) >> 4) <= v263)
          sub_20EDB40C4();
        v265 = *(unsigned int *)(v262 + 1588);
        v266 = v549.i64[1];
        v267 = v549.i64[1] - v549.i64[0];
        if (v549.i64[1] - v549.i64[0] > 0x1FuLL)
        {
          if (v267 != 32)
          {
            v508 = v144;
            v268 = v243;
            v269 = v549.i64[0] + 32;
            while (v266 != v269)
            {
              v270 = *(std::__shared_weak_count **)(v266 - 8);
              if (v270)
              {
                p_shared_owners = (unint64_t *)&v270->__shared_owners_;
                do
                  v272 = __ldaxr(p_shared_owners);
                while (__stlxr(v272 - 1, p_shared_owners));
                if (!v272)
                {
                  ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                  std::__shared_weak_count::__release_weak(v270);
                }
              }
              v266 -= 16;
            }
            v549.i64[1] = v269;
            v243 = v268;
            v144 = v508;
          }
        }
        else
        {
          sub_20EE68A10((uint64_t)&v549, 2 - (v267 >> 4));
        }
        v273 = v549.i64[0];
        v274 = *(_OWORD *)v549.i64[0];
        *(_QWORD *)v549.i64[0] = 0;
        *(_QWORD *)(v273 + 8) = 0;
        v275 = *(std::__shared_weak_count **)(v273 + 24);
        *(_OWORD *)(v273 + 16) = v274;
        if (v275)
        {
          v276 = (unint64_t *)&v275->__shared_owners_;
          do
            v277 = __ldaxr(v276);
          while (__stlxr(v277 - 1, v276));
          if (!v277)
          {
            ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
            std::__shared_weak_count::__release_weak(v275);
          }
        }
        v278 = (uint64_t *)(v264 + 240 * v263 + 24);
        v279 = *v278;
        if (v265 >= (*(_QWORD *)(v264 + 240 * v263 + 32) - *v278) >> 4)
          sub_20EDB40C4();
        v280 = v549.i64[0];
        v281 = *(_OWORD *)(v279 + 16 * v265);
        v282 = *(_QWORD *)(v279 + 16 * v265 + 8);
        if (v282)
        {
          v283 = (unint64_t *)(v282 + 8);
          do
            v284 = __ldxr(v283);
          while (__stxr(v284 + 1, v283));
        }
        v285 = *(std::__shared_weak_count **)(v280 + 8);
        *(_OWORD *)v280 = v281;
        if (!v285)
          goto LABEL_228;
        v286 = (unint64_t *)&v285->__shared_owners_;
        do
          v287 = __ldaxr(v286);
        while (__stlxr(v287 - 1, v286));
        if (!v287)
        {
          ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
          std::__shared_weak_count::__release_weak(v285);
          v288 = v551.i64[0];
          v289 = v550.i64[1];
          v290 = v551.i64[0] - v550.i64[1];
          if (v551.i64[0] - v550.i64[1] > 0x1FuLL)
            goto LABEL_231;
LABEL_229:
          sub_20EE68A10((uint64_t)&v550.i64[1], 2 - (v290 >> 4));
        }
        else
        {
LABEL_228:
          v288 = v551.i64[0];
          v289 = v550.i64[1];
          v290 = v551.i64[0] - v550.i64[1];
          if (v551.i64[0] - v550.i64[1] <= 0x1FuLL)
            goto LABEL_229;
LABEL_231:
          if (v290 != 32)
          {
            v509 = v144;
            v291 = v243;
            v292 = v289 + 32;
            while (v288 != v292)
            {
              v293 = *(std::__shared_weak_count **)(v288 - 8);
              if (v293)
              {
                v294 = (unint64_t *)&v293->__shared_owners_;
                do
                  v295 = __ldaxr(v294);
                while (__stlxr(v295 - 1, v294));
                if (!v295)
                {
                  ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                  std::__shared_weak_count::__release_weak(v293);
                }
              }
              v288 -= 16;
            }
            v551.i64[0] = v292;
            v243 = v291;
            v144 = v509;
          }
        }
        v296 = v550.i64[1];
        v297 = *(_OWORD *)v550.i64[1];
        *(_QWORD *)v550.i64[1] = 0;
        *(_QWORD *)(v296 + 8) = 0;
        v298 = *(std::__shared_weak_count **)(v296 + 24);
        *(_OWORD *)(v296 + 16) = v297;
        if (v298)
        {
          v299 = (unint64_t *)&v298->__shared_owners_;
          do
            v300 = __ldaxr(v299);
          while (__stlxr(v300 - 1, v299));
          if (!v300)
          {
            ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
            std::__shared_weak_count::__release_weak(v298);
          }
        }
        v301 = v264 + 240 * v263;
        v302 = *(_QWORD *)(v301 + 48);
        if (v265 >= (*(_QWORD *)(v301 + 56) - v302) >> 4)
          sub_20EDB40C4();
        v303 = v550.i64[1];
        v304 = *(_OWORD *)(v302 + 16 * v265);
        v305 = *(_QWORD *)(v302 + 16 * v265 + 8);
        if (v305)
        {
          v306 = (unint64_t *)(v305 + 8);
          do
            v307 = __ldxr(v306);
          while (__stxr(v307 + 1, v306));
        }
        v308 = *(std::__shared_weak_count **)(v303 + 8);
        *(_OWORD *)v303 = v304;
        if (v308)
        {
          v309 = (unint64_t *)&v308->__shared_owners_;
          do
            v310 = __ldaxr(v309);
          while (__stlxr(v310 - 1, v309));
          if (!v310)
          {
            ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
            std::__shared_weak_count::__release_weak(v308);
          }
        }
        sub_20F007804(v552, 2uLL);
        sub_20ED95360(*(_QWORD *)v552 + 408, *(uint64_t *)v552);
        v311 = *(_QWORD *)(v264 + 240 * v263 + 72);
        if (0xFAFAFAFAFAFAFAFBLL * ((*(_QWORD *)(v264 + 240 * v263 + 80) - v311) >> 3) <= v265)
          sub_20EDB40C4();
        sub_20E9BF624(*(uint64_t *)v552, v311 + 408 * v265);
        v312 = *(_QWORD *)&v552[32];
        if (*(_QWORD *)&v552[24] != *(_QWORD *)&v552[32])
        {
          v313 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v552[32] - *(_QWORD *)&v552[24]) >> 3);
          if (v313 > 1)
          {
            if (*(_QWORD *)&v552[32] - *(_QWORD *)&v552[24] != 48)
            {
              v510 = v144;
              v314 = v243;
              v315 = *(_QWORD *)&v552[24] + 48;
              while (v312 != v315)
              {
                if (*(_BYTE *)(v312 - 8))
                {
                  v316 = *(std::__shared_weak_count **)(v312 - 16);
                  if (v316)
                  {
                    v317 = (unint64_t *)&v316->__shared_owners_;
                    do
                      v318 = __ldaxr(v317);
                    while (__stlxr(v318 - 1, v317));
                    if (!v318)
                    {
                      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
                      std::__shared_weak_count::__release_weak(v316);
                    }
                  }
                }
                v312 -= 24;
              }
              *(_QWORD *)&v552[32] = v315;
              v243 = v314;
              v144 = v510;
            }
          }
          else
          {
            sub_20F00A450(&v552[24], 2 - v313);
          }
          v319 = *(_QWORD *)&v552[24];
          if (*(unsigned __int8 *)(*(_QWORD *)&v552[24] + 40) == *(unsigned __int8 *)(*(_QWORD *)&v552[24] + 16))
          {
            if (*(_BYTE *)(*(_QWORD *)&v552[24] + 40))
            {
              v320 = **(_OWORD **)&v552[24];
              **(_QWORD **)&v552[24] = 0;
              *(_QWORD *)(v319 + 8) = 0;
              v321 = *(std::__shared_weak_count **)(v319 + 32);
              *(_OWORD *)(v319 + 24) = v320;
              if (v321)
              {
                v322 = (unint64_t *)&v321->__shared_owners_;
                do
                  v323 = __ldaxr(v322);
                while (__stlxr(v323 - 1, v322));
                if (!v323)
                {
                  ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
                  std::__shared_weak_count::__release_weak(v321);
                }
              }
            }
          }
          else if (*(_BYTE *)(*(_QWORD *)&v552[24] + 40))
          {
            v324 = *(std::__shared_weak_count **)(*(_QWORD *)&v552[24] + 32);
            if (v324)
            {
              v325 = (unint64_t *)&v324->__shared_owners_;
              do
                v326 = __ldaxr(v325);
              while (__stlxr(v326 - 1, v325));
              if (!v326)
              {
                ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                std::__shared_weak_count::__release_weak(v324);
              }
            }
            *(_BYTE *)(v319 + 40) = 0;
          }
          else
          {
            *(_OWORD *)(*(_QWORD *)&v552[24] + 24) = **(_OWORD **)&v552[24];
            *(_QWORD *)v319 = 0;
            *(_QWORD *)(v319 + 8) = 0;
            *(_BYTE *)(v319 + 40) = 1;
          }
          v327 = v264 + 240 * v263;
          v328 = *(_QWORD *)(v327 + 96);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v327 + 104) - v328) >> 3) <= v265)
            sub_20EDB40C4();
          v329 = (uint64_t *)(v328 + 24 * v265);
          v330 = *(_QWORD *)&v552[24];
          if (*(unsigned __int8 *)(*(_QWORD *)&v552[24] + 16) == *((unsigned __int8 *)v329 + 16))
          {
            if (*(_BYTE *)(*(_QWORD *)&v552[24] + 16))
            {
              v332 = *v329;
              v331 = v329[1];
              if (v331)
              {
                v333 = (unint64_t *)(v331 + 8);
                do
                  v334 = __ldxr(v333);
                while (__stxr(v334 + 1, v333));
              }
              v335 = *(std::__shared_weak_count **)(v330 + 8);
              *(_QWORD *)v330 = v332;
              *(_QWORD *)(v330 + 8) = v331;
              if (v335)
              {
                v336 = (unint64_t *)&v335->__shared_owners_;
                do
                  v337 = __ldaxr(v336);
                while (__stlxr(v337 - 1, v336));
                if (!v337)
                {
                  ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
                  std::__shared_weak_count::__release_weak(v335);
                }
              }
            }
          }
          else if (*(_BYTE *)(*(_QWORD *)&v552[24] + 16))
          {
            v338 = *(std::__shared_weak_count **)(*(_QWORD *)&v552[24] + 8);
            if (v338)
            {
              v339 = (unint64_t *)&v338->__shared_owners_;
              do
                v340 = __ldaxr(v339);
              while (__stlxr(v340 - 1, v339));
              if (!v340)
              {
                ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
                std::__shared_weak_count::__release_weak(v338);
              }
            }
            *(_BYTE *)(v330 + 16) = 0;
          }
          else
          {
            **(_QWORD **)&v552[24] = *v329;
            v341 = v329[1];
            *(_QWORD *)(v330 + 8) = v341;
            if (v341)
            {
              v342 = (unint64_t *)(v341 + 8);
              do
                v343 = __ldxr(v342);
              while (__stxr(v343 + 1, v342));
            }
            *(_BYTE *)(v330 + 16) = 1;
          }
        }
      }
      v521 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v344 = v549.i64[1] - v549.i64[0];
      if (v549.i64[1] == v549.i64[0])
      {
        v347 = 0;
        a6 = v480;
        v345 = v482;
        v348 = v489;
      }
      else
      {
        a6 = v480;
        v345 = v482;
        if ((unint64_t)v344 >= 0x94F2094F2094F21)
          sub_20E867F44();
        v346 = v344 >> 4;
        v347 = (char *)operator new(440 * (v344 >> 4));
        v348 = v489;
        v344 = (uint64_t)&v347[440 * v346];
        __p[0] = v347;
        v521 = v344;
        v349 = v347;
        do
        {
          *((_QWORD *)v349 + 48) = 0;
          v349[22] = 0uLL;
          v349[23] = 0uLL;
          v349[20] = 0uLL;
          v349[21] = 0uLL;
          v349[18] = 0uLL;
          v349[19] = 0uLL;
          v349[16] = 0uLL;
          v349[17] = 0uLL;
          v349[14] = 0uLL;
          v349[15] = 0uLL;
          v349[12] = 0uLL;
          v349[13] = 0uLL;
          v349[10] = 0uLL;
          v349[11] = 0uLL;
          v349[8] = 0uLL;
          v349[9] = 0uLL;
          v349[7] = 0uLL;
          *v349 = 0uLL;
          v349[1] = 0uLL;
          *(_DWORD *)v349 = -1;
          *((_QWORD *)v349 + 1) = 0xBFF0000000000000;
          *((_QWORD *)v349 + 17) = 0;
          *((_QWORD *)v349 + 18) = 0;
          *((_QWORD *)v349 + 16) = 0;
          *((_BYTE *)v349 + 152) = 0;
          *((_QWORD *)v349 + 43) = 0;
          *((_QWORD *)v349 + 44) = 0;
          *((_QWORD *)v349 + 42) = 0;
          *((_BYTE *)v349 + 360) = 0;
          v350 = (char *)v349 + 392;
          *(_OWORD *)((char *)v349 + 392) = 0uLL;
          *(_OWORD *)((char *)v349 + 408) = 0uLL;
          v349[1] = 0uLL;
          v349[2] = 0uLL;
          v349[2] = 0uLL;
          v349[3] = 0uLL;
          v349[3] = 0uLL;
          v349[4] = 0uLL;
          v349[4] = 0uLL;
          v349[5] = 0uLL;
          v349[5] = 0uLL;
          v349[6] = 0uLL;
          *((_BYTE *)v349 + 96) = 0;
          *(_OWORD *)((char *)v349 + 184) = 0uLL;
          v351 = (_OWORD *)((char *)v349 + 184);
          *(_OWORD *)((char *)v351 + 105) = 0uLL;
          v351[5] = 0uLL;
          v351[6] = 0uLL;
          v351[3] = 0uLL;
          v351[4] = 0uLL;
          v351[1] = 0uLL;
          v351[2] = 0uLL;
          v349 = v351 + 16;
          *((_OWORD *)v350 + 2) = 0uLL;
        }
        while (v349 != (_OWORD *)v344);
        __p[1] = &v347[440 * v346];
      }
      LOBYTE(v516) = 0;
      v519 = 0;
      if ((unint64_t)(0x6FB586FB586FB587 * ((v344 - (uint64_t)v347) >> 3)) >= 2)
      {
        sub_20EA84218(*a5 + 32 * v348, v478, (uint64_t)v515);
        v516 = *(_DWORD *)v515;
        if (!v519)
        {
          v517 = *(_OWORD *)&v515[8];
          v518 = *(_QWORD *)&v515[24];
          v519 = 1;
          v355 = *(_QWORD *)&v515[8];
          if (!*(_BYTE *)(*(_QWORD *)&v515[8] + 1592))
            goto LABEL_339;
LABEL_323:
          sub_20EA84218(*a5 + 32 * *(unsigned int *)(v355 + 1584), (uint64_t *)(a12[3] + 104 * *(unsigned int *)(v355 + 1584) + 32), (uint64_t)v515);
          v356 = *(_DWORD *)(v355 + 1588);
          v357 = *(_QWORD *)&v515[8];
          v358 = *((_QWORD *)&v517 + 1);
          v359 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)&v517 + 1) - v517) >> 7);
          if (v359 > 1)
          {
            if (*((_QWORD *)&v517 + 1) - (_QWORD)v517 != 3328)
            {
              v360 = v517 + 3328;
              if (*((_QWORD *)&v517 + 1) != (_QWORD)v517 + 3328)
              {
                do
                  v358 = sub_20EB8188C(v358 - 1664);
                while (v358 != v360);
              }
              *((_QWORD *)&v517 + 1) = v360;
            }
          }
          else
          {
            sub_20F024C2C((char **)&v517, 2 - v359);
          }
          v361 = v517;
          v362 = *(_OWORD *)v517;
          *(_OWORD *)(v517 + 1680) = *(_OWORD *)(v517 + 16);
          v363 = *(_OWORD *)(v361 + 48);
          *(_OWORD *)(v361 + 1696) = *(_OWORD *)(v361 + 32);
          *(_OWORD *)(v361 + 1712) = v363;
          *(_QWORD *)(v361 + 1728) = *(_QWORD *)(v361 + 64);
          *(_OWORD *)(v361 + 1664) = v362;
          *(_OWORD *)(v361 + 1736) = *(_OWORD *)(v361 + 72);
          *(_QWORD *)(v361 + 1752) = *(_QWORD *)(v361 + 88);
          sub_20EB84848(v361 + 1760, v361 + 96);
          *(_QWORD *)(v361 + 3224) = *(_QWORD *)(v361 + 1560);
          *(_OWORD *)(v361 + 3208) = *(_OWORD *)(v361 + 1544);
          v364 = *(_OWORD *)(v361 + 1568);
          *(_OWORD *)(v361 + 1568) = 0u;
          v365 = *(std::__shared_weak_count **)(v361 + 3240);
          *(_OWORD *)(v361 + 3232) = v364;
          if (v365)
          {
            v366 = (unint64_t *)&v365->__shared_owners_;
            do
              v367 = __ldaxr(v366);
            while (__stlxr(v367 - 1, v366));
            if (!v367)
            {
              ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
              std::__shared_weak_count::__release_weak(v365);
            }
          }
          *(_OWORD *)(v361 + 3264) = *(_OWORD *)(v361 + 1600);
          *(_OWORD *)(v361 + 3280) = *(_OWORD *)(v361 + 1616);
          *(_OWORD *)(v361 + 3296) = *(_OWORD *)(v361 + 1632);
          *(_OWORD *)(v361 + 3248) = *(_OWORD *)(v361 + 1584);
          *(_OWORD *)(v361 + 3305) = *(_OWORD *)(v361 + 1641);
          sub_20EB8200C(v517, v357 + 1664 * v356);
          v368 = *(_QWORD *)&v515[8];
          a6 = v480;
          v348 = v489;
          if (*(_QWORD *)&v515[8])
          {
            v369 = *(_QWORD *)&v515[16];
            v370 = *(void **)&v515[8];
            if (*(_QWORD *)&v515[16] != *(_QWORD *)&v515[8])
            {
              do
                v369 = sub_20EB8188C(v369 - 1664);
              while (v369 != v368);
              v370 = *(void **)&v515[8];
            }
            *(_QWORD *)&v515[16] = v368;
            operator delete(v370);
          }
          goto LABEL_339;
        }
        v352 = v517;
        if ((_QWORD)v517)
        {
          v353 = *((_QWORD *)&v517 + 1);
          v354 = (void *)v517;
          if (*((_QWORD *)&v517 + 1) != (_QWORD)v517)
          {
            do
              v353 = sub_20EB8188C(v353 - 1664);
            while (v353 != v352);
            v354 = (void *)v517;
          }
          *((_QWORD *)&v517 + 1) = v352;
          operator delete(v354);
        }
        v517 = *(_OWORD *)&v515[8];
        v518 = *(_QWORD *)&v515[24];
        v355 = *(_QWORD *)&v515[8];
        if (*(_BYTE *)(*(_QWORD *)&v515[8] + 1592))
          goto LABEL_323;
      }
LABEL_339:
      sub_20F144E28(*(_QWORD *)(*a11 + 8 * v348), (void ***)&v549, (_OWORD *)(v345 + 8), a6, v243, v144, v513, a2, (uint64_t)&v532, (uint64_t)&v530, (uint64_t)&v524, __p, (uint64_t)&v516, &v522);
      v371 = __p[1];
      if (*((_BYTE *)__p[1] - 320))
      {
        kdebug_trace();
        v371 = __p[1];
      }
      if ((unint64_t)(0x6FB586FB586FB587 * ((int64_t)((uint64_t)v371 - (unint64_t)__p[0]) >> 3)) >= 2)
      {
        v372 = (_OWORD *)a1[10].i64[0];
        if (a1[10].i64[1] - (_QWORD)v372 == 32)
        {
          v373 = v372[1];
          *(_OWORD *)v515 = *v372;
          *(_OWORD *)&v515[16] = v373;
          v514 = vshlq_u64(*(uint64x2_t *)(a1[29].i64[1] + 16 * v485), (uint64x2_t)vdupq_lane_s64(vnegq_s64(*a1).i64[0], 0));
          sub_20F151888((double *)v515, &v514, __p, *(double *)v514.i64);
        }
      }
      if (!*(_BYTE *)(*(_QWORD *)v74 + 1592))
      {
        v385 = *v481;
        v386 = v489;
        if (*v481)
        {
          v387 = *v481;
          if (*v477 != v385)
          {
            v388 = (uint64_t)*v477 - 208;
            do
            {
              v390 = *(void **)(v388 + 184);
              if (v390)
              {
                *(_QWORD *)(v388 + 192) = v390;
                operator delete(v390);
              }
              v391 = *(void **)(v388 + 160);
              if (v391)
              {
                *(_QWORD *)(v388 + 168) = v391;
                operator delete(v391);
              }
              if (*(_BYTE *)(v388 + 152))
              {
                v392 = *(void **)(v388 + 128);
                if (v392)
                {
                  *(_QWORD *)(v388 + 136) = v392;
                  operator delete(v392);
                }
              }
              v393 = *(void **)(v388 + 104);
              if (v393)
              {
                *(_QWORD *)(v388 + 112) = v393;
                operator delete(v393);
              }
              if (*(_BYTE *)(v388 + 96))
              {
                v394 = *(void **)(v388 + 72);
                if (v394)
                {
                  *(_QWORD *)(v388 + 80) = v394;
                  operator delete(v394);
                }
              }
              v395 = *(void **)(v388 + 48);
              if (v395)
              {
                *(_QWORD *)(v388 + 56) = v395;
                operator delete(v395);
              }
              v396 = *(void **)(v388 + 24);
              if (v396)
              {
                *(_QWORD *)(v388 + 32) = v396;
                operator delete(v396);
              }
              v397 = *(void **)v388;
              if (*(_QWORD *)v388)
              {
                *(_QWORD *)(v388 + 8) = v397;
                operator delete(v397);
              }
              v398 = *(void **)(v388 - 24);
              if (v398)
              {
                *(_QWORD *)(v388 - 16) = v398;
                operator delete(v398);
              }
              v399 = *(void **)(v388 - 48);
              if (v399)
              {
                *(_QWORD *)(v388 - 40) = v399;
                operator delete(v399);
              }
              if (*(_BYTE *)(v388 - 56))
              {
                v400 = *(void **)(v388 - 80);
                if (v400)
                {
                  *(_QWORD *)(v388 - 72) = v400;
                  operator delete(v400);
                }
              }
              v401 = *(void **)(v388 - 104);
              if (v401)
              {
                *(_QWORD *)(v388 - 96) = v401;
                operator delete(v401);
              }
              if (*(_BYTE *)(v388 - 112))
              {
                v402 = *(void **)(v388 - 136);
                if (v402)
                {
                  *(_QWORD *)(v388 - 128) = v402;
                  operator delete(v402);
                }
              }
              v403 = *(void **)(v388 - 160);
              if (v403)
              {
                *(_QWORD *)(v388 - 152) = v403;
                operator delete(v403);
              }
              v404 = *(void **)(v388 - 184);
              if (v404)
              {
                *(_QWORD *)(v388 - 176) = v404;
                operator delete(v404);
              }
              v405 = *(void **)(v388 - 208);
              if (v405)
              {
                *(_QWORD *)(v388 - 200) = v405;
                operator delete(v405);
              }
              v389 = v388 - 232;
              v388 -= 440;
            }
            while ((void *)v389 != v385);
            v387 = *v481;
            v386 = v489;
          }
          *v477 = v385;
          operator delete(v387);
          *v481 = 0;
          v481[1] = 0;
          v481[2] = 0;
        }
        *(_OWORD *)v481 = *(_OWORD *)__p;
        *(_QWORD *)(v476 + 104 * v386 + 24) = v521;
        v430 = __p;
        goto LABEL_453;
      }
      v374 = (char *)__p[0];
      v375 = (char *)*v481;
      v376 = *(_OWORD *)((char *)__p[0] + 440);
      *((_QWORD *)v375 + 2) = *((_QWORD *)__p[0] + 57);
      *(_OWORD *)v375 = v376;
      v377 = (void *)*((_QWORD *)v375 + 3);
      if (v377)
      {
        *((_QWORD *)v375 + 4) = v377;
        operator delete(v377);
        *((_QWORD *)v375 + 3) = 0;
        *((_QWORD *)v375 + 4) = 0;
        *((_QWORD *)v375 + 5) = 0;
      }
      *(_OWORD *)(v375 + 24) = *((_OWORD *)v374 + 29);
      *((_QWORD *)v375 + 5) = *((_QWORD *)v374 + 60);
      *((_QWORD *)v374 + 58) = 0;
      *((_QWORD *)v374 + 59) = 0;
      *((_QWORD *)v374 + 60) = 0;
      v378 = (void *)*((_QWORD *)v375 + 6);
      if (v378)
      {
        *((_QWORD *)v375 + 7) = v378;
        operator delete(v378);
        *((_QWORD *)v375 + 6) = 0;
        *((_QWORD *)v375 + 7) = 0;
        *((_QWORD *)v375 + 8) = 0;
      }
      *((_OWORD *)v375 + 3) = *(_OWORD *)(v374 + 488);
      *((_QWORD *)v375 + 8) = *((_QWORD *)v374 + 63);
      *((_QWORD *)v374 + 61) = 0;
      *((_QWORD *)v374 + 62) = 0;
      *((_QWORD *)v374 + 63) = 0;
      v379 = (void *)*((_QWORD *)v375 + 9);
      if (v379)
      {
        *((_QWORD *)v375 + 10) = v379;
        operator delete(v379);
        *((_QWORD *)v375 + 9) = 0;
        *((_QWORD *)v375 + 10) = 0;
        *((_QWORD *)v375 + 11) = 0;
      }
      *(_OWORD *)(v375 + 72) = *((_OWORD *)v374 + 32);
      *((_QWORD *)v375 + 11) = *((_QWORD *)v374 + 66);
      *((_QWORD *)v374 + 64) = 0;
      *((_QWORD *)v374 + 65) = 0;
      *((_QWORD *)v374 + 66) = 0;
      v380 = (void **)(v375 + 96);
      v381 = v374 + 536;
      if (v375[120] == v374[560])
      {
        if (!v375[120])
          goto LABEL_401;
        v382 = *v380;
        if (*v380)
        {
          *((_QWORD *)v375 + 13) = v382;
          operator delete(v382);
          *v380 = 0;
          *((_QWORD *)v375 + 13) = 0;
          *((_QWORD *)v375 + 14) = 0;
        }
        *((_OWORD *)v375 + 6) = *v381;
        *((_QWORD *)v375 + 14) = *((_QWORD *)v374 + 69);
        *(_QWORD *)v381 = 0;
        *((_QWORD *)v374 + 68) = 0;
        *((_QWORD *)v374 + 69) = 0;
        v384 = v375 + 128;
        v383 = (void *)*((_QWORD *)v375 + 16);
        if (v383)
          goto LABEL_402;
      }
      else
      {
        if (v375[120])
        {
          v406 = *v380;
          if (*v380)
          {
            *((_QWORD *)v375 + 13) = v406;
            operator delete(v406);
          }
          v375[120] = 0;
LABEL_401:
          v384 = v375 + 128;
          v383 = (void *)*((_QWORD *)v375 + 16);
          if (!v383)
            goto LABEL_403;
LABEL_402:
          *((_QWORD *)v375 + 17) = v383;
          operator delete(v383);
          *v384 = 0;
          v384[1] = 0;
          v384[2] = 0;
          goto LABEL_403;
        }
        *v380 = 0;
        *((_QWORD *)v375 + 13) = 0;
        *((_QWORD *)v375 + 14) = 0;
        *((_OWORD *)v375 + 6) = *v381;
        *((_QWORD *)v375 + 14) = *((_QWORD *)v374 + 69);
        *(_QWORD *)v381 = 0;
        *((_QWORD *)v374 + 68) = 0;
        *((_QWORD *)v374 + 69) = 0;
        v375[120] = 1;
        v384 = v375 + 128;
        v383 = (void *)*((_QWORD *)v375 + 16);
        if (v383)
          goto LABEL_402;
      }
LABEL_403:
      *((_OWORD *)v375 + 8) = *(_OWORD *)(v374 + 568);
      *((_QWORD *)v375 + 18) = *((_QWORD *)v374 + 73);
      *((_QWORD *)v374 + 71) = 0;
      *((_QWORD *)v374 + 72) = 0;
      *((_QWORD *)v374 + 73) = 0;
      v407 = (void **)(v375 + 152);
      v408 = v374 + 592;
      if (v375[176] == v374[616])
      {
        if (!v375[176])
          goto LABEL_413;
        v409 = *v407;
        if (*v407)
        {
          *((_QWORD *)v375 + 20) = v409;
          operator delete(v409);
          *v407 = 0;
          *((_QWORD *)v375 + 20) = 0;
          *((_QWORD *)v375 + 21) = 0;
        }
        *(_OWORD *)(v375 + 152) = *((_OWORD *)v374 + 37);
        *((_QWORD *)v375 + 21) = *((_QWORD *)v374 + 76);
        *v408 = 0;
        *((_QWORD *)v374 + 75) = 0;
        *((_QWORD *)v374 + 76) = 0;
        v411 = v375 + 184;
        v410 = (void *)*((_QWORD *)v375 + 23);
        if (v410)
          goto LABEL_414;
      }
      else
      {
        if (v375[176])
        {
          v412 = *v407;
          if (*v407)
          {
            *((_QWORD *)v375 + 20) = v412;
            operator delete(v412);
          }
          v375[176] = 0;
LABEL_413:
          v411 = v375 + 184;
          v410 = (void *)*((_QWORD *)v375 + 23);
          if (!v410)
            goto LABEL_415;
LABEL_414:
          *((_QWORD *)v375 + 24) = v410;
          operator delete(v410);
          *v411 = 0;
          v411[1] = 0;
          v411[2] = 0;
          goto LABEL_415;
        }
        *v407 = 0;
        *((_QWORD *)v375 + 20) = 0;
        *((_QWORD *)v375 + 21) = 0;
        *(_OWORD *)(v375 + 152) = *((_OWORD *)v374 + 37);
        *((_QWORD *)v375 + 21) = *((_QWORD *)v374 + 76);
        *v408 = 0;
        *((_QWORD *)v374 + 75) = 0;
        *((_QWORD *)v374 + 76) = 0;
        v375[176] = 1;
        v411 = v375 + 184;
        v410 = (void *)*((_QWORD *)v375 + 23);
        if (v410)
          goto LABEL_414;
      }
LABEL_415:
      *(_OWORD *)(v375 + 184) = *((_OWORD *)v374 + 39);
      *((_QWORD *)v375 + 25) = *((_QWORD *)v374 + 80);
      *((_QWORD *)v374 + 78) = 0;
      *((_QWORD *)v374 + 79) = 0;
      *((_QWORD *)v374 + 80) = 0;
      v413 = (void *)*((_QWORD *)v375 + 26);
      if (v413)
      {
        *((_QWORD *)v375 + 27) = v413;
        operator delete(v413);
        *((_QWORD *)v375 + 26) = 0;
        *((_QWORD *)v375 + 27) = 0;
        *((_QWORD *)v375 + 28) = 0;
      }
      *((_OWORD *)v375 + 13) = *(_OWORD *)(v374 + 648);
      *((_QWORD *)v375 + 28) = *((_QWORD *)v374 + 83);
      *((_QWORD *)v374 + 81) = 0;
      *((_QWORD *)v374 + 82) = 0;
      *((_QWORD *)v374 + 83) = 0;
      v414 = (void *)*((_QWORD *)v375 + 29);
      if (v414)
      {
        *((_QWORD *)v375 + 30) = v414;
        operator delete(v414);
        *((_QWORD *)v375 + 29) = 0;
        *((_QWORD *)v375 + 30) = 0;
        *((_QWORD *)v375 + 31) = 0;
      }
      *(_OWORD *)(v375 + 232) = *((_OWORD *)v374 + 42);
      *((_QWORD *)v375 + 31) = *((_QWORD *)v374 + 86);
      *((_QWORD *)v374 + 84) = 0;
      *((_QWORD *)v374 + 85) = 0;
      *((_QWORD *)v374 + 86) = 0;
      v415 = (void *)*((_QWORD *)v375 + 32);
      if (v415)
      {
        *((_QWORD *)v375 + 33) = v415;
        operator delete(v415);
        *((_QWORD *)v375 + 32) = 0;
        *((_QWORD *)v375 + 33) = 0;
        *((_QWORD *)v375 + 34) = 0;
      }
      v416 = v375 + 280;
      *((_OWORD *)v375 + 16) = *(_OWORD *)(v374 + 696);
      *((_QWORD *)v375 + 34) = *((_QWORD *)v374 + 89);
      *((_QWORD *)v374 + 87) = 0;
      *((_QWORD *)v374 + 88) = 0;
      *((_QWORD *)v374 + 89) = 0;
      v417 = (void *)*((_QWORD *)v375 + 35);
      if (v417)
      {
        *((_QWORD *)v375 + 36) = v417;
        operator delete(v417);
        *v416 = 0;
        *((_QWORD *)v375 + 36) = 0;
        *((_QWORD *)v375 + 37) = 0;
      }
      *(_OWORD *)v416 = *((_OWORD *)v374 + 45);
      *((_QWORD *)v375 + 37) = *((_QWORD *)v374 + 92);
      *((_QWORD *)v374 + 90) = 0;
      *((_QWORD *)v374 + 91) = 0;
      *((_QWORD *)v374 + 92) = 0;
      v418 = (void **)(v375 + 304);
      v419 = v374 + 744;
      if (v375[328] == v374[768])
      {
        if (!v375[328])
          goto LABEL_433;
        v420 = *v418;
        if (*v418)
        {
          *((_QWORD *)v375 + 39) = v420;
          operator delete(v420);
          *v418 = 0;
          *((_QWORD *)v375 + 39) = 0;
          *((_QWORD *)v375 + 40) = 0;
        }
        *((_OWORD *)v375 + 19) = *v419;
        *((_QWORD *)v375 + 40) = *((_QWORD *)v374 + 95);
        *(_QWORD *)v419 = 0;
        *((_QWORD *)v374 + 94) = 0;
        *((_QWORD *)v374 + 95) = 0;
        v421 = (void *)*((_QWORD *)v375 + 42);
        if (v421)
          goto LABEL_434;
      }
      else
      {
        if (v375[328])
        {
          v422 = *v418;
          if (*v418)
          {
            *((_QWORD *)v375 + 39) = v422;
            operator delete(v422);
          }
          v375[328] = 0;
LABEL_433:
          v421 = (void *)*((_QWORD *)v375 + 42);
          if (!v421)
            goto LABEL_435;
LABEL_434:
          *((_QWORD *)v375 + 43) = v421;
          operator delete(v421);
          *((_QWORD *)v375 + 42) = 0;
          *((_QWORD *)v375 + 43) = 0;
          *((_QWORD *)v375 + 44) = 0;
          goto LABEL_435;
        }
        *v418 = 0;
        *((_QWORD *)v375 + 39) = 0;
        *((_QWORD *)v375 + 40) = 0;
        *((_OWORD *)v375 + 19) = *v419;
        *((_QWORD *)v375 + 40) = *((_QWORD *)v374 + 95);
        *(_QWORD *)v419 = 0;
        *((_QWORD *)v374 + 94) = 0;
        *((_QWORD *)v374 + 95) = 0;
        v375[328] = 1;
        v421 = (void *)*((_QWORD *)v375 + 42);
        if (v421)
          goto LABEL_434;
      }
LABEL_435:
      *((_OWORD *)v375 + 21) = *(_OWORD *)(v374 + 776);
      *((_QWORD *)v375 + 44) = *((_QWORD *)v374 + 99);
      *((_QWORD *)v374 + 97) = 0;
      *((_QWORD *)v374 + 98) = 0;
      *((_QWORD *)v374 + 99) = 0;
      v423 = (void **)(v375 + 360);
      v424 = v374 + 800;
      if (v375[384] == v374[824])
      {
        if (v375[384])
        {
          v425 = *v423;
          if (*v423)
          {
            *((_QWORD *)v375 + 46) = v425;
            operator delete(v425);
            *v423 = 0;
            *((_QWORD *)v375 + 46) = 0;
            *((_QWORD *)v375 + 47) = 0;
          }
          *(_OWORD *)v423 = *((_OWORD *)v374 + 50);
          *((_QWORD *)v375 + 47) = *((_QWORD *)v374 + 102);
          *v424 = 0;
          *((_QWORD *)v374 + 101) = 0;
          *((_QWORD *)v374 + 102) = 0;
          v427 = v375 + 392;
          v426 = (void *)*((_QWORD *)v375 + 49);
          if (!v426)
            goto LABEL_447;
LABEL_446:
          *((_QWORD *)v375 + 50) = v426;
          operator delete(v426);
          *v427 = 0;
          v427[1] = 0;
          v427[2] = 0;
          goto LABEL_447;
        }
      }
      else
      {
        if (!v375[384])
        {
          *v423 = 0;
          *((_QWORD *)v375 + 46) = 0;
          *((_QWORD *)v375 + 47) = 0;
          *(_OWORD *)v423 = *((_OWORD *)v374 + 50);
          *((_QWORD *)v375 + 47) = *((_QWORD *)v374 + 102);
          *v424 = 0;
          *((_QWORD *)v374 + 101) = 0;
          *((_QWORD *)v374 + 102) = 0;
          v375[384] = 1;
          v427 = v375 + 392;
          v426 = (void *)*((_QWORD *)v375 + 49);
          if (!v426)
            goto LABEL_447;
          goto LABEL_446;
        }
        v428 = *v423;
        if (*v423)
        {
          *((_QWORD *)v375 + 46) = v428;
          operator delete(v428);
        }
        v375[384] = 0;
      }
      v427 = v375 + 392;
      v426 = (void *)*((_QWORD *)v375 + 49);
      if (v426)
        goto LABEL_446;
LABEL_447:
      *(_OWORD *)v427 = *((_OWORD *)v374 + 52);
      *((_QWORD *)v375 + 51) = *((_QWORD *)v374 + 106);
      *((_QWORD *)v374 + 104) = 0;
      *((_QWORD *)v374 + 105) = 0;
      *((_QWORD *)v374 + 106) = 0;
      v429 = (void *)*((_QWORD *)v375 + 52);
      if (v429)
      {
        *((_QWORD *)v375 + 53) = v429;
        operator delete(v429);
        *((_QWORD *)v375 + 52) = 0;
        *((_QWORD *)v375 + 53) = 0;
        *((_QWORD *)v375 + 54) = 0;
      }
      v430 = (void **)(v374 + 856);
      *((_OWORD *)v375 + 26) = *(_OWORD *)(v374 + 856);
      *((_QWORD *)v375 + 54) = *((_QWORD *)v374 + 109);
      a6 = v480;
LABEL_453:
      *v430 = 0;
      v430[1] = 0;
      v430[2] = 0;
      v431 = *v487;
      v432 = *(_QWORD *)v74;
      if (v519)
      {
        v433 = v517;
        if ((_QWORD)v517)
        {
          v434 = *((_QWORD *)&v517 + 1);
          v435 = (void *)v517;
          if (*((_QWORD *)&v517 + 1) != (_QWORD)v517)
          {
            do
              v434 = sub_20EB8188C(v434 - 1664);
            while (v434 != v433);
            v435 = (void *)v517;
          }
          *((_QWORD *)&v517 + 1) = v433;
          operator delete(v435);
        }
      }
      v436 = (char *)__p[0];
      if (__p[0])
      {
        v49 = __p[0];
        if (__p[1] != __p[0])
        {
          v437 = (char *)__p[1] - 208;
          do
          {
            v439 = (void *)*((_QWORD *)v437 + 23);
            if (v439)
            {
              *((_QWORD *)v437 + 24) = v439;
              operator delete(v439);
            }
            v440 = (void *)*((_QWORD *)v437 + 20);
            if (v440)
            {
              *((_QWORD *)v437 + 21) = v440;
              operator delete(v440);
            }
            if (v437[152])
            {
              v441 = (void *)*((_QWORD *)v437 + 16);
              if (v441)
              {
                *((_QWORD *)v437 + 17) = v441;
                operator delete(v441);
              }
            }
            v442 = (void *)*((_QWORD *)v437 + 13);
            if (v442)
            {
              *((_QWORD *)v437 + 14) = v442;
              operator delete(v442);
            }
            if (v437[96])
            {
              v443 = (void *)*((_QWORD *)v437 + 9);
              if (v443)
              {
                *((_QWORD *)v437 + 10) = v443;
                operator delete(v443);
              }
            }
            v444 = (void *)*((_QWORD *)v437 + 6);
            if (v444)
            {
              *((_QWORD *)v437 + 7) = v444;
              operator delete(v444);
            }
            v445 = (void *)*((_QWORD *)v437 + 3);
            if (v445)
            {
              *((_QWORD *)v437 + 4) = v445;
              operator delete(v445);
            }
            v446 = *(void **)v437;
            if (*(_QWORD *)v437)
            {
              *((_QWORD *)v437 + 1) = v446;
              operator delete(v446);
            }
            v447 = (void *)*((_QWORD *)v437 - 3);
            if (v447)
            {
              *((_QWORD *)v437 - 2) = v447;
              operator delete(v447);
            }
            v448 = (void *)*((_QWORD *)v437 - 6);
            if (v448)
            {
              *((_QWORD *)v437 - 5) = v448;
              operator delete(v448);
            }
            if (*(v437 - 56))
            {
              v449 = (void *)*((_QWORD *)v437 - 10);
              if (v449)
              {
                *((_QWORD *)v437 - 9) = v449;
                operator delete(v449);
              }
            }
            v450 = (void *)*((_QWORD *)v437 - 13);
            if (v450)
            {
              *((_QWORD *)v437 - 12) = v450;
              operator delete(v450);
            }
            if (*(v437 - 112))
            {
              v451 = (void *)*((_QWORD *)v437 - 17);
              if (v451)
              {
                *((_QWORD *)v437 - 16) = v451;
                operator delete(v451);
              }
            }
            v452 = (void *)*((_QWORD *)v437 - 20);
            if (v452)
            {
              *((_QWORD *)v437 - 19) = v452;
              operator delete(v452);
            }
            v453 = (void *)*((_QWORD *)v437 - 23);
            if (v453)
            {
              *((_QWORD *)v437 - 22) = v453;
              operator delete(v453);
            }
            v454 = (void *)*((_QWORD *)v437 - 26);
            if (v454)
            {
              *((_QWORD *)v437 - 25) = v454;
              operator delete(v454);
            }
            v438 = v437 - 232;
            v437 -= 440;
          }
          while (v438 != v436);
          v49 = __p[0];
        }
        __p[1] = v436;
        operator delete(v49);
      }
      v485 -= 991146299 * ((unint64_t)(v431 - v432) >> 7);
      sub_20E990FD8((void **)&v549);
      v16 = v345 + 240;
      v48 = v489 + 1;
      if (v16 == v475)
      {
        v47 = v534;
        break;
      }
    }
  }
LABEL_509:
  if (v47)
  {
    v456 = v535;
    if (v535 != v47)
    {
      v457 = v535;
      do
      {
        v459 = (void *)*((_QWORD *)v457 - 3);
        v457 -= 24;
        v458 = v459;
        if (v459)
        {
          *((_QWORD *)v456 - 2) = v458;
          operator delete(v458);
        }
        v456 = v457;
      }
      while (v457 != v47);
    }
    v535 = v47;
    operator delete(v47);
  }
  v460 = (char *)v537;
  if (v537)
  {
    v461 = v538;
    if (v538 != v537)
    {
      v462 = v538;
      do
      {
        v464 = (void *)*((_QWORD *)v462 - 3);
        v462 -= 24;
        v463 = v464;
        if (v464)
        {
          *((_QWORD *)v461 - 2) = v463;
          operator delete(v463);
        }
        v461 = v462;
      }
      while (v462 != v460);
    }
    operator delete(v460);
  }
  return kdebug_trace();
}

void sub_20F024A8C(_Unwind_Exception *a1)
{
  sub_20E9DD680((void **)&STACK[0x360]);
  sub_20E8E69C4((uint64_t)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

void sub_20F024AA8(_Unwind_Exception *a1)
{
  sub_20E8E69C4((uint64_t)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

void sub_20F024ABC(_Unwind_Exception *a1)
{
  sub_20E8E69C4((uint64_t)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

void sub_20F024AD8(_Unwind_Exception *a1)
{
  sub_20E9DD680((void **)&STACK[0x348]);
  sub_20E9DD680((void **)&STACK[0x360]);
  sub_20E8E69C4((uint64_t)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F024BCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);
      v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
          v3 = sub_20EB8188C(v3 - 1664);
        while (v3 != v2);
        v4 = *(void **)(a1 + 8);
      }
      *(_QWORD *)(a1 + 16) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_20F024C2C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  int64x2_t *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int64x2_t v17;
  int64x2_t *v18;
  uint64_t v19;
  char *i;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;

  v4 = a1[2];
  v5 = a1[1];
  if (0x4EC4EC4EC4EC4EC5 * ((v4 - v5) >> 7) >= a2)
  {
    if (a2)
    {
      v11 = 0;
      v12 = vdupq_n_s64(0x7FF8000000000000uLL);
      do
      {
        v13 = (int64x2_t *)&v5[v11];
        v13[6].i8[0] = 0;
        v13[96].i8[0] = 0;
        v13[97].i64[0] = 0x3FF0000000000000;
        v13[99].i8[8] = 0;
        v13[100].i8[0] = 0;
        v13[101].i8[8] = 0;
        v13[102].i8[0] = 0;
        v13[103].i8[8] = 0;
        v13[97].i64[1] = 0;
        v13[98].i64[1] = 0;
        v13[98].i64[0] = 0;
        v13[99].i8[0] = 0;
        *v13 = v12;
        v13[1] = v12;
        v13[2] = v12;
        v13[3] = v12;
        v13[4] = v12;
        v13[5] = v12;
        v11 += 1664;
        v13[96].i32[2] = 1;
      }
      while (1664 * a2 != v11);
      a1[1] = &v5[1664 * a2];
    }
    else
    {
      a1[1] = v5;
    }
  }
  else
  {
    v6 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 7);
    v7 = v6 + a2;
    if (v6 + a2 > 0x27627627627627)
      sub_20E867F44();
    v8 = 0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 7);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x13B13B13B13B13)
      v9 = 0x27627627627627;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x27627627627627)
        sub_20E877A38();
      v10 = (char *)operator new(1664 * v9);
    }
    else
    {
      v10 = 0;
    }
    v14 = 0;
    v15 = &v10[1664 * v6];
    *((_QWORD *)&v25 + 1) = &v10[1664 * v9];
    v16 = &v15[1664 * a2];
    v17 = vdupq_n_s64(0x7FF8000000000000uLL);
    do
    {
      v18 = (int64x2_t *)&v15[v14];
      v18[6].i8[0] = 0;
      v18[96].i8[0] = 0;
      v18[97].i64[0] = 0x3FF0000000000000;
      v18[99].i8[8] = 0;
      v18[100].i8[0] = 0;
      v18[101].i8[8] = 0;
      v18[102].i8[0] = 0;
      v18[103].i8[8] = 0;
      v18[97].i64[1] = 0;
      v18[98].i64[1] = 0;
      v18[98].i64[0] = 0;
      v18[99].i8[0] = 0;
      *v18 = v17;
      v18[1] = v17;
      v18[2] = v17;
      v18[3] = v17;
      v18[4] = v17;
      v18[5] = v17;
      v14 += 1664;
      v18[96].i32[2] = 1;
    }
    while (1664 * a2 != v14);
    v19 = 0;
    *(_QWORD *)&v25 = v16;
    v21 = *a1;
    for (i = a1[1]; &i[v19] != v21; sub_20EB81E74((uint64_t)&v15[v19], (uint64_t)&i[v19]))
      v19 -= 1664;
    v22 = &v15[v19];
    v24 = *a1;
    v23 = (uint64_t)a1[1];
    *a1 = v22;
    for (*(_OWORD *)(a1 + 1) = v25; (char *)v23 != v24; v23 = sub_20EB8188C(v23 - 1664))
      ;
    if (v24)
      operator delete(v24);
  }
}

uint64_t sub_20F024EE4@<X0>(double ***a1@<X0>, uint64_t *a2@<X8>)
{
  double **v4;
  double **v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  double **v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  double **v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  double **v55;
  double *v56;
  double *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  _QWORD *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  __int128 v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  __int128 v112;
  _QWORD *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  __int128 v129;
  _QWORD *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  _OWORD *v138;
  char *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  _BYTE *v172;
  _BYTE *v173;
  _OWORD *v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  _OWORD *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  char *v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  char *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  char *v209;
  char *v210;
  _OWORD *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  char *v219;
  char *v220;
  _OWORD *v221;
  _BYTE *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t *v226;
  double *v227;
  char *v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  char *v233;
  char *v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  char *v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  char *v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  _OWORD *v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  char *v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  char *v258;
  char *v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  char *v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  _OWORD *v267;
  _BYTE *v268;
  _BYTE *v269;
  _BYTE *v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  char *v280;
  char *v281;
  _OWORD *v282;
  _BYTE *v283;
  _BYTE *v284;
  _BYTE *v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  char *v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  char v294;
  char *v295;
  char *v296;
  uint64_t *v297;
  char *v298;
  char *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  char *v303;
  uint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  char v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  double **v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  void *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  char *v327;
  uint64_t v328;
  void *v329;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  void *v334;
  uint64_t v336;
  double **v337;
  double **v338;
  uint64_t *v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  _OWORD v343[2];
  __int128 v344;
  __int128 v345;
  _BYTE v346[288];
  char v347;
  __int128 v348;
  _QWORD v349[4];
  __int128 v350;
  _QWORD v351[4];
  __int128 v352;
  _QWORD v353[4];
  __int128 v354;
  _QWORD v355[4];
  __int128 v356;
  _QWORD v357[4];
  __int128 v358;
  __int128 v359;
  int v360;

  v358 = 0u;
  v359 = 0u;
  v360 = 733226592;
  kdebug_trace();
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_20F027058(a2, -1431655765 * ((unint64_t)((char *)a1[1] - (char *)*a1) >> 3));
  v5 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = *v5;
    if (*v5 == v5[1])
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSetFeatures.cpp", 77, (uint64_t)"!sequence_camera_stream_features_.empty()", 41, (uint64_t)&unk_2102C50BE, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v6 = *v5;
      v5 = *a1;
      v4 = a1[1];
      if (*a1 != v4)
        goto LABEL_4;
    }
    else if (v5 != v4)
    {
LABEL_4:
      v337 = v4;
      v7 = v6[1] + v6[2];
      v339 = a2;
      v336 = (uint64_t)(a2 + 2);
      do
      {
        LODWORD(v348) = 0;
        *((_QWORD *)&v348 + 1) = 0xBFF0000000000000;
        memset(v349, 0, sizeof(v349));
        v350 = 0u;
        memset(v351, 0, sizeof(v351));
        v352 = 0u;
        memset(v353, 0, sizeof(v353));
        v354 = 0u;
        memset(v355, 0, sizeof(v355));
        v356 = 0u;
        memset(v357, 0, sizeof(v357));
        v8 = *v5;
        v9 = v5[1];
        if (*v5 == v9)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/src/NodeCameraSetFeatures.cpp", 71, (uint64_t)"!sequence_camera_stream_features_.empty()", 41, (uint64_t)&unk_2102C50BE, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v8 = *v5;
          v9 = v5[1];
          v11 = v349[3];
          v10 = (char *)v349[1];
        }
        else
        {
          v10 = 0;
          v11 = 0;
        }
        LODWORD(v348) = *(_DWORD *)v8;
        *((double *)&v348 + 1) = v7;
        v12 = 0xF47E8FD1FA3F47E9 * (v9 - v8);
        if (v12 > (v11 - (uint64_t)v10) >> 4)
        {
          if (v12 >> 60)
            sub_20E867F44();
          v13 = (char *)v349[2];
          v14 = (char *)operator new(0x47E8FD1FA3F47E90 * (v9 - v8));
          v15 = &v14[v13 - v10];
          v16 = v15;
          if (v13 == v10)
          {
            v349[1] = &v14[v13 - v10];
            v349[2] = v349[1];
            v349[3] = &v14[16 * v12];
            if (v10)
              goto LABEL_24;
          }
          else
          {
            do
            {
              v17 = *((_OWORD *)v13 - 1);
              v13 -= 16;
              *((_OWORD *)v16 - 1) = v17;
              v16 -= 16;
              *(_QWORD *)v13 = 0;
              *((_QWORD *)v13 + 1) = 0;
            }
            while (v13 != v10);
            v10 = (char *)v349[1];
            v18 = (char *)v349[2];
            v349[1] = v16;
            v349[2] = v15;
            v349[3] = &v14[16 * v12];
            if (v18 != v10)
            {
              v19 = v5;
              do
              {
                v20 = (std::__shared_weak_count *)*((_QWORD *)v18 - 1);
                if (v20)
                {
                  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                  do
                    v22 = __ldaxr(p_shared_owners);
                  while (__stlxr(v22 - 1, p_shared_owners));
                  if (!v22)
                  {
                    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                    std::__shared_weak_count::__release_weak(v20);
                  }
                }
                v18 -= 16;
              }
              while (v18 != v10);
              v5 = v19;
            }
            if (v10)
LABEL_24:
              operator delete(v10);
          }
        }
        v23 = 0xF47E8FD1FA3F47E9 * (v5[1] - *v5);
        v24 = (char *)v350;
        if (v23 > (uint64_t)(v351[0] - v350) >> 4)
        {
          if (v23 >> 60)
            sub_20E867F44();
          v25 = (char *)*((_QWORD *)&v350 + 1);
          v26 = (char *)operator new(0x47E8FD1FA3F47E90 * (v5[1] - *v5));
          v27 = &v26[v25 - v24];
          v28 = v27;
          if (v25 == v24)
          {
            *(_QWORD *)&v350 = &v26[v25 - v24];
            *((_QWORD *)&v350 + 1) = v350;
            v351[0] = &v26[16 * v23];
            if (!v24)
              goto LABEL_40;
          }
          else
          {
            do
            {
              v29 = *((_OWORD *)v25 - 1);
              v25 -= 16;
              *((_OWORD *)v28 - 1) = v29;
              v28 -= 16;
              *(_QWORD *)v25 = 0;
              *((_QWORD *)v25 + 1) = 0;
            }
            while (v25 != v24);
            v30 = (char *)*((_QWORD *)&v350 + 1);
            v24 = (char *)v350;
            *(_QWORD *)&v350 = v28;
            *((_QWORD *)&v350 + 1) = v27;
            v351[0] = &v26[16 * v23];
            if (v30 != v24)
            {
              v31 = v5;
              do
              {
                v32 = (std::__shared_weak_count *)*((_QWORD *)v30 - 1);
                if (v32)
                {
                  v33 = (unint64_t *)&v32->__shared_owners_;
                  do
                    v34 = __ldaxr(v33);
                  while (__stlxr(v34 - 1, v33));
                  if (!v34)
                  {
                    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                    std::__shared_weak_count::__release_weak(v32);
                  }
                }
                v30 -= 16;
              }
              while (v30 != v24);
              v5 = v31;
            }
            if (!v24)
              goto LABEL_40;
          }
          operator delete(v24);
        }
LABEL_40:
        v35 = 0xF47E8FD1FA3F47E9 * (v5[1] - *v5);
        v36 = (_BYTE *)v353[1];
        if (0x8E38E38E38E38E39 * ((uint64_t)(v353[3] - v353[1]) >> 3) < v35)
        {
          if (v35 > 0x38E38E38E38E38ELL)
            goto LABEL_461;
          v37 = (_BYTE *)v353[2];
          v38 = (char *)operator new(0xC398730E61CC3988 * (v5[1] - *v5));
          v39 = &v38[72 * ((v37 - v36) / 72)];
          v40 = v39;
          if (v37 != v36)
          {
            v41 = &v38[72 * ((v37 - v36) / 72)];
            do
            {
              *(_OWORD *)(v41 - 72) = *(_OWORD *)(v37 - 72);
              v42 = *(_OWORD *)(v37 - 56);
              v43 = *(_OWORD *)(v37 - 40);
              v44 = *(_OWORD *)(v37 - 24);
              v40 = v41 - 72;
              *((_QWORD *)v41 - 1) = *((_QWORD *)v37 - 1);
              *(_OWORD *)(v41 - 24) = v44;
              *(_OWORD *)(v41 - 40) = v43;
              *(_OWORD *)(v41 - 56) = v42;
              v37 -= 72;
              v41 -= 72;
            }
            while (v37 != v36);
          }
          v353[1] = v40;
          v353[2] = v39;
          v353[3] = &v38[72 * v35];
          if (v36)
            operator delete(v36);
        }
        v45 = 0xF47E8FD1FA3F47E9 * (v5[1] - *v5);
        v46 = (_BYTE *)v354;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v355[0] - v354) >> 3) < v45)
        {
          if (v45 > 0x38E38E38E38E38ELL)
LABEL_461:
            sub_20EB849AC();
          v47 = (_BYTE *)*((_QWORD *)&v354 + 1);
          v48 = (char *)operator new(0xC398730E61CC3988 * (v5[1] - *v5));
          v49 = &v48[72 * ((v47 - v46) / 72)];
          v50 = v49;
          if (v47 != v46)
          {
            v51 = &v48[72 * ((v47 - v46) / 72)];
            do
            {
              *(_OWORD *)(v51 - 72) = *(_OWORD *)(v47 - 72);
              v52 = *(_OWORD *)(v47 - 56);
              v53 = *(_OWORD *)(v47 - 40);
              v54 = *(_OWORD *)(v47 - 24);
              v50 = v51 - 72;
              *((_QWORD *)v51 - 1) = *((_QWORD *)v47 - 1);
              *(_OWORD *)(v51 - 24) = v54;
              *(_OWORD *)(v51 - 40) = v53;
              *(_OWORD *)(v51 - 56) = v52;
              v47 -= 72;
              v51 -= 72;
            }
            while (v47 != v46);
          }
          *(_QWORD *)&v354 = v50;
          *((_QWORD *)&v354 + 1) = v49;
          v355[0] = &v48[72 * v45];
          if (v46)
            operator delete(v46);
        }
        v55 = v5;
        v56 = *v5;
        v338 = v55;
        v57 = v55[1];
        while (v56 != v57)
        {
          v60 = *((_QWORD *)v56 + 25);
          if (v60)
          {
            v61 = *((_QWORD *)v56 + 26);
            *(double *)&v340 = v56[25];
            *((_QWORD *)&v340 + 1) = v61;
            if (v61)
            {
              v62 = (unint64_t *)(v61 + 8);
              do
                v63 = __ldxr(v62);
              while (__stxr(v63 + 1, v62));
            }
            v64 = (_QWORD *)v349[2];
            if (v349[2] >= v349[3])
            {
              v71 = (_QWORD *)v349[1];
              v72 = (uint64_t)(v349[2] - v349[1]) >> 4;
              v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 60)
                sub_20E867F44();
              v74 = v349[3] - v349[1];
              if ((uint64_t)(v349[3] - v349[1]) >> 3 > v73)
                v73 = v74 >> 3;
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
                v75 = 0xFFFFFFFFFFFFFFFLL;
              else
                v75 = v73;
              if (v75 >> 60)
                sub_20E877A38();
              v76 = (char *)operator new(16 * v75);
              v77 = &v76[16 * v72];
              *(_QWORD *)v77 = v60;
              *((_QWORD *)v77 + 1) = v61;
              v340 = 0uLL;
              v65 = v77 + 16;
              if (v64 == v71)
              {
                v349[1] = &v76[16 * v72];
                v349[2] = v77 + 16;
                v349[3] = &v76[16 * v75];
              }
              else
              {
                do
                {
                  v78 = *((_OWORD *)v64 - 1);
                  v64 -= 2;
                  *((_OWORD *)v77 - 1) = v78;
                  v77 -= 16;
                  *v64 = 0;
                  v64[1] = 0;
                }
                while (v64 != v71);
                v64 = (_QWORD *)v349[1];
                v79 = (_QWORD *)v349[2];
                v349[1] = v77;
                v349[2] = v65;
                v349[3] = &v76[16 * v75];
                while (v79 != v64)
                {
                  v80 = (std::__shared_weak_count *)*(v79 - 1);
                  if (v80)
                  {
                    v81 = (unint64_t *)&v80->__shared_owners_;
                    do
                      v82 = __ldaxr(v81);
                    while (__stlxr(v82 - 1, v81));
                    if (!v82)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  v79 -= 2;
                }
              }
              if (v64)
                operator delete(v64);
            }
            else
            {
              *(_QWORD *)v349[2] = v60;
              v64[1] = v61;
              v65 = v64 + 2;
              v340 = 0uLL;
            }
            v349[2] = v65;
            v95 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
            if (!*((_QWORD *)&v340 + 1))
              goto LABEL_114;
            v96 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
          }
          else
          {
            v66 = (char *)operator new(0xD8uLL);
            v67 = v66;
            *((_QWORD *)v66 + 1) = 0;
            *((_QWORD *)v66 + 2) = 0;
            *(_QWORD *)v66 = &off_24C9EDD70;
            *(_OWORD *)(v66 + 24) = 0u;
            v68 = v66 + 24;
            *(_OWORD *)(v66 + 72) = 0u;
            *(_OWORD *)(v66 + 88) = 0u;
            *(_OWORD *)(v66 + 104) = 0u;
            *(_OWORD *)(v66 + 120) = 0u;
            *(_OWORD *)(v66 + 136) = 0u;
            *(_OWORD *)(v66 + 152) = 0u;
            *(_OWORD *)(v66 + 40) = 0u;
            *(_OWORD *)(v66 + 56) = 0u;
            *(_OWORD *)(v66 + 168) = 0u;
            *(_OWORD *)(v66 + 184) = 0u;
            *(_OWORD *)(v66 + 200) = 0u;
            v66[72] = 1;
            *((_OWORD *)v66 + 5) = 0u;
            *((_OWORD *)v66 + 6) = 0u;
            *((_OWORD *)v66 + 7) = 0u;
            *((_OWORD *)v66 + 8) = 0u;
            *(_OWORD *)(v66 + 138) = 0u;
            v66[208] = 0;
            *((_OWORD *)v66 + 11) = 0u;
            *((_OWORD *)v66 + 12) = 0u;
            *((_OWORD *)v66 + 10) = 0u;
            *(_QWORD *)&v340 = v66 + 24;
            *((_QWORD *)&v340 + 1) = v66;
            v69 = (_QWORD *)v349[2];
            if (v349[2] >= v349[3])
            {
              v83 = (_QWORD *)v349[1];
              v84 = (uint64_t)(v349[2] - v349[1]) >> 4;
              v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 60)
                sub_20E867F44();
              v86 = v349[3] - v349[1];
              if ((uint64_t)(v349[3] - v349[1]) >> 3 > v85)
                v85 = v86 >> 3;
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF0)
                v87 = 0xFFFFFFFFFFFFFFFLL;
              else
                v87 = v85;
              if (v87 >> 60)
                sub_20E877A38();
              v88 = (char *)operator new(16 * v87);
              v89 = &v88[16 * v84];
              *(_QWORD *)v89 = v68;
              *((_QWORD *)v89 + 1) = v67;
              v340 = 0uLL;
              v70 = v89 + 16;
              if (v69 == v83)
              {
                v349[1] = &v88[16 * v84];
                v349[2] = v89 + 16;
                v349[3] = &v88[16 * v87];
              }
              else
              {
                do
                {
                  v90 = *((_OWORD *)v69 - 1);
                  v69 -= 2;
                  *((_OWORD *)v89 - 1) = v90;
                  v89 -= 16;
                  *v69 = 0;
                  v69[1] = 0;
                }
                while (v69 != v83);
                v69 = (_QWORD *)v349[1];
                v91 = (_QWORD *)v349[2];
                v349[1] = v89;
                v349[2] = v70;
                v349[3] = &v88[16 * v87];
                while (v91 != v69)
                {
                  v92 = (std::__shared_weak_count *)*(v91 - 1);
                  if (v92)
                  {
                    v93 = (unint64_t *)&v92->__shared_owners_;
                    do
                      v94 = __ldaxr(v93);
                    while (__stlxr(v94 - 1, v93));
                    if (!v94)
                    {
                      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                      std::__shared_weak_count::__release_weak(v92);
                    }
                  }
                  v91 -= 2;
                }
              }
              if (v69)
                operator delete(v69);
            }
            else
            {
              *(_QWORD *)v349[2] = v68;
              v69[1] = v66;
              v70 = v69 + 2;
              v340 = 0uLL;
            }
            v349[2] = v70;
            v95 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
            if (!*((_QWORD *)&v340 + 1))
            {
LABEL_114:
              v99 = *((_QWORD *)v56 + 27);
              if (v99)
                goto LABEL_115;
              goto LABEL_138;
            }
            v98 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
            do
              v97 = __ldaxr(v98);
            while (__stlxr(v97 - 1, v98));
          }
          if (v97)
            goto LABEL_114;
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
          v99 = *((_QWORD *)v56 + 27);
          if (v99)
          {
LABEL_115:
            v100 = *((_QWORD *)v56 + 28);
            *(_QWORD *)&v340 = v99;
            *((_QWORD *)&v340 + 1) = v100;
            if (v100)
            {
              v101 = (unint64_t *)(v100 + 8);
              do
                v102 = __ldxr(v101);
              while (__stxr(v102 + 1, v101));
            }
            v103 = (_QWORD *)*((_QWORD *)&v350 + 1);
            if (*((_QWORD *)&v350 + 1) >= v351[0])
            {
              v105 = (_QWORD *)v350;
              v106 = (uint64_t)(*((_QWORD *)&v350 + 1) - v350) >> 4;
              v107 = v106 + 1;
              if ((unint64_t)(v106 + 1) >> 60)
                sub_20E867F44();
              v108 = v351[0] - v350;
              if ((uint64_t)(v351[0] - v350) >> 3 > v107)
                v107 = v108 >> 3;
              if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0)
                v109 = 0xFFFFFFFFFFFFFFFLL;
              else
                v109 = v107;
              if (v109 >> 60)
                sub_20E877A38();
              v110 = (char *)operator new(16 * v109);
              v111 = &v110[16 * v106];
              *(_QWORD *)v111 = v99;
              *((_QWORD *)v111 + 1) = v100;
              v340 = 0uLL;
              v104 = v111 + 16;
              if (v103 == v105)
              {
                *(_QWORD *)&v350 = &v110[16 * v106];
                *((_QWORD *)&v350 + 1) = v111 + 16;
                v351[0] = &v110[16 * v109];
              }
              else
              {
                do
                {
                  v112 = *((_OWORD *)v103 - 1);
                  v103 -= 2;
                  *((_OWORD *)v111 - 1) = v112;
                  v111 -= 16;
                  *v103 = 0;
                  v103[1] = 0;
                }
                while (v103 != v105);
                v113 = (_QWORD *)*((_QWORD *)&v350 + 1);
                v103 = (_QWORD *)v350;
                *(_QWORD *)&v350 = v111;
                *((_QWORD *)&v350 + 1) = v104;
                v351[0] = &v110[16 * v109];
                while (v113 != v103)
                {
                  v114 = (std::__shared_weak_count *)*(v113 - 1);
                  if (v114)
                  {
                    v115 = (unint64_t *)&v114->__shared_owners_;
                    do
                      v116 = __ldaxr(v115);
                    while (__stlxr(v116 - 1, v115));
                    if (!v116)
                    {
                      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                      std::__shared_weak_count::__release_weak(v114);
                    }
                  }
                  v113 -= 2;
                }
              }
              if (v103)
                operator delete(v103);
            }
            else
            {
              **((_QWORD **)&v350 + 1) = v99;
              v103[1] = v100;
              v104 = v103 + 2;
              v340 = 0uLL;
            }
            *((_QWORD *)&v350 + 1) = v104;
            v134 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
            if (!*((_QWORD *)&v340 + 1))
              goto LABEL_171;
            v135 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
            do
              v136 = __ldaxr(v135);
            while (__stlxr(v136 - 1, v135));
            goto LABEL_170;
          }
LABEL_138:
          v117 = operator new(0x30uLL);
          v118 = v117;
          v117[1] = 0;
          v117[2] = 0;
          *v117 = &off_24C9EDDC0;
          v117[3] = 0;
          v119 = v117 + 3;
          v117[4] = 0;
          v117[5] = 0;
          *(_QWORD *)&v340 = v117 + 3;
          *((_QWORD *)&v340 + 1) = v117;
          v120 = (_QWORD *)*((_QWORD *)&v350 + 1);
          if (*((_QWORD *)&v350 + 1) >= v351[0])
          {
            v122 = (_QWORD *)v350;
            v123 = (uint64_t)(*((_QWORD *)&v350 + 1) - v350) >> 4;
            v124 = v123 + 1;
            if ((unint64_t)(v123 + 1) >> 60)
              sub_20E867F44();
            v125 = v351[0] - v350;
            if ((uint64_t)(v351[0] - v350) >> 3 > v124)
              v124 = v125 >> 3;
            if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF0)
              v126 = 0xFFFFFFFFFFFFFFFLL;
            else
              v126 = v124;
            if (v126 >> 60)
              sub_20E877A38();
            v127 = (char *)operator new(16 * v126);
            v128 = &v127[16 * v123];
            *(_QWORD *)v128 = v119;
            *((_QWORD *)v128 + 1) = v118;
            v340 = 0uLL;
            v121 = v128 + 16;
            if (v120 == v122)
            {
              *(_QWORD *)&v350 = &v127[16 * v123];
              *((_QWORD *)&v350 + 1) = v128 + 16;
              v351[0] = &v127[16 * v126];
            }
            else
            {
              do
              {
                v129 = *((_OWORD *)v120 - 1);
                v120 -= 2;
                *((_OWORD *)v128 - 1) = v129;
                v128 -= 16;
                *v120 = 0;
                v120[1] = 0;
              }
              while (v120 != v122);
              v130 = (_QWORD *)*((_QWORD *)&v350 + 1);
              v120 = (_QWORD *)v350;
              *(_QWORD *)&v350 = v128;
              *((_QWORD *)&v350 + 1) = v121;
              v351[0] = &v127[16 * v126];
              while (v130 != v120)
              {
                v131 = (std::__shared_weak_count *)*(v130 - 1);
                if (v131)
                {
                  v132 = (unint64_t *)&v131->__shared_owners_;
                  do
                    v133 = __ldaxr(v132);
                  while (__stlxr(v133 - 1, v132));
                  if (!v133)
                  {
                    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                    std::__shared_weak_count::__release_weak(v131);
                  }
                }
                v130 -= 2;
              }
            }
            if (v120)
              operator delete(v120);
          }
          else
          {
            **((_QWORD **)&v350 + 1) = v119;
            v120[1] = v117;
            v121 = v120 + 2;
            v340 = 0uLL;
          }
          *((_QWORD *)&v350 + 1) = v121;
          v134 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
          if (!*((_QWORD *)&v340 + 1))
          {
LABEL_171:
            if (*((_BYTE *)v56 + 656))
              goto LABEL_172;
            goto LABEL_220;
          }
          v137 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
          do
            v136 = __ldaxr(v137);
          while (__stlxr(v136 - 1, v137));
LABEL_170:
          if (v136)
            goto LABEL_171;
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
          if (*((_BYTE *)v56 + 656))
          {
LABEL_172:
            v138 = v56 + 32;
            v139 = (char *)v351[2];
            if (v351[2] < v351[3])
            {
              *(_BYTE *)v351[2] = 0;
              v139[400] = 0;
              if (*((_BYTE *)v56 + 656))
              {
                *(_OWORD *)v139 = *v138;
                v140 = *((_OWORD *)v56 + 17);
                v141 = *((_OWORD *)v56 + 18);
                v142 = *((_OWORD *)v56 + 19);
                *(_OWORD *)(v139 + 57) = *(_OWORD *)((char *)v56 + 313);
                *((_OWORD *)v139 + 2) = v141;
                *((_OWORD *)v139 + 3) = v142;
                *((_OWORD *)v139 + 1) = v140;
                *((double *)v139 + 10) = v56[42];
                v143 = *((_QWORD *)v56 + 43);
                *((_QWORD *)v139 + 11) = v143;
                if (v143)
                {
                  v144 = (unint64_t *)(v143 + 8);
                  do
                    v145 = __ldxr(v144);
                  while (__stxr(v145 + 1, v144));
                }
                *((double *)v139 + 12) = v56[44];
                v146 = *((_QWORD *)v56 + 45);
                *((_QWORD *)v139 + 13) = v146;
                if (v146)
                {
                  v147 = (unint64_t *)(v146 + 8);
                  do
                    v148 = __ldxr(v147);
                  while (__stxr(v148 + 1, v147));
                }
                memcpy(v139 + 112, v56 + 46, 0x120uLL);
                v139[400] = 1;
              }
              v149 = (uint64_t)(v139 + 408);
LABEL_201:
              v351[2] = v149;
              goto LABEL_202;
            }
            v150 = (char *)v351[1];
            v151 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(v351[2] - v351[1]) >> 3);
            v152 = v151 + 1;
            if (v151 + 1 > 0xA0A0A0A0A0A0A0)
              sub_20E867F44();
            if (0xF5F5F5F5F5F5F5F6 * ((uint64_t)(v351[3] - v351[1]) >> 3) > v152)
              v152 = 0xF5F5F5F5F5F5F5F6 * ((uint64_t)(v351[3] - v351[1]) >> 3);
            if (0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(v351[3] - v351[1]) >> 3) >= 0x50505050505050)
              v153 = 0xA0A0A0A0A0A0A0;
            else
              v153 = v152;
            if (v153)
            {
              if (v153 > 0xA0A0A0A0A0A0A0)
                sub_20E877A38();
              v154 = (char *)operator new(408 * v153);
              v155 = (uint64_t)&v154[408 * v151];
              *(_BYTE *)v155 = 0;
              *(_BYTE *)(v155 + 400) = 0;
              if (*((_BYTE *)v56 + 656))
                goto LABEL_191;
LABEL_245:
              v165 = &v154[408 * v153];
              v149 = v155 + 408;
              if (v139 != v150)
                goto LABEL_246;
            }
            else
            {
              v154 = 0;
              v155 = 8 * ((uint64_t)(v351[2] - v351[1]) >> 3);
              *(_BYTE *)v155 = 0;
              *(_BYTE *)(v155 + 400) = 0;
              if (!*((_BYTE *)v56 + 656))
                goto LABEL_245;
LABEL_191:
              *(_OWORD *)v155 = *v138;
              v156 = *((_OWORD *)v56 + 17);
              v157 = *((_OWORD *)v56 + 18);
              v158 = *((_OWORD *)v56 + 19);
              *(_OWORD *)(v155 + 57) = *(_OWORD *)((char *)v56 + 313);
              *(_OWORD *)(v155 + 32) = v157;
              *(_OWORD *)(v155 + 48) = v158;
              *(_OWORD *)(v155 + 16) = v156;
              *(double *)(v155 + 80) = v56[42];
              v159 = *((_QWORD *)v56 + 43);
              *(_QWORD *)(v155 + 88) = v159;
              if (v159)
              {
                v160 = (unint64_t *)(v159 + 8);
                do
                  v161 = __ldxr(v160);
                while (__stxr(v161 + 1, v160));
              }
              *(double *)(v155 + 96) = v56[44];
              v162 = *((_QWORD *)v56 + 45);
              *(_QWORD *)(v155 + 104) = v162;
              if (v162)
              {
                v163 = (unint64_t *)(v162 + 8);
                do
                  v164 = __ldxr(v163);
                while (__stxr(v164 + 1, v163));
              }
              memcpy((void *)(v155 + 112), v56 + 46, 0x120uLL);
              *(_BYTE *)(v155 + 400) = 1;
              v139 = (char *)v351[2];
              v150 = (char *)v351[1];
              v165 = &v154[408 * v153];
              v149 = v155 + 408;
              if (v351[2] != v351[1])
              {
LABEL_246:
                v195 = 0;
                do
                {
                  v196 = v155 + v195;
                  v197 = (_BYTE *)(v155 + v195 - 408);
                  v198 = &v139[v195];
                  *v197 = 0;
                  *(_BYTE *)(v155 + v195 - 8) = 0;
                  if (v139[v195 - 8])
                  {
                    *(_OWORD *)v197 = *(_OWORD *)(v198 - 408);
                    v199 = *(_OWORD *)(v198 - 392);
                    v200 = *(_OWORD *)(v198 - 376);
                    v201 = *(_OWORD *)(v198 - 360);
                    *(_OWORD *)(v155 + v195 - 351) = *(_OWORD *)(v198 - 351);
                    *(_OWORD *)(v155 + v195 - 376) = v200;
                    *(_OWORD *)(v155 + v195 - 360) = v201;
                    *(_OWORD *)(v155 + v195 - 392) = v199;
                    *(_OWORD *)(v196 - 328) = *(_OWORD *)(v198 - 328);
                    *((_QWORD *)v198 - 40) = 0;
                    *((_QWORD *)v198 - 41) = 0;
                    *(_OWORD *)(v196 - 312) = *(_OWORD *)(v198 - 312);
                    *((_QWORD *)v198 - 38) = 0;
                    *((_QWORD *)v198 - 39) = 0;
                    memcpy((void *)(v196 - 296), v198 - 296, 0x120uLL);
                    *(_BYTE *)(v196 - 8) = 1;
                  }
                  v195 -= 408;
                }
                while (&v139[v195] != v150);
                v150 = (char *)v351[1];
                v202 = (char *)v351[2];
                v351[1] = v155 + v195;
                v351[2] = v149;
                v351[3] = v165;
                while (2)
                {
                  if (v202 == v150)
                    goto LABEL_199;
                  if (*(v202 - 8))
                  {
                    v203 = (std::__shared_weak_count *)*((_QWORD *)v202 - 38);
                    if (!v203)
                      goto LABEL_258;
                    v204 = (unint64_t *)&v203->__shared_owners_;
                    do
                      v205 = __ldaxr(v204);
                    while (__stlxr(v205 - 1, v204));
                    if (!v205)
                    {
                      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                      std::__shared_weak_count::__release_weak(v203);
                      v206 = (std::__shared_weak_count *)*((_QWORD *)v202 - 40);
                      if (v206)
                      {
LABEL_259:
                        v207 = (unint64_t *)&v206->__shared_owners_;
                        do
                          v208 = __ldaxr(v207);
                        while (__stlxr(v208 - 1, v207));
                        if (!v208)
                        {
                          ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                          std::__shared_weak_count::__release_weak(v206);
                        }
                      }
                    }
                    else
                    {
LABEL_258:
                      v206 = (std::__shared_weak_count *)*((_QWORD *)v202 - 40);
                      if (v206)
                        goto LABEL_259;
                    }
                  }
                  v202 -= 408;
                  continue;
                }
              }
            }
            v351[1] = v155;
            v351[2] = v149;
            v351[3] = v165;
LABEL_199:
            if (v150)
              operator delete(v150);
            goto LABEL_201;
          }
LABEL_220:
          LOBYTE(v340) = 0;
          v347 = 0;
          v179 = v351[2];
          if (v351[2] >= v351[3])
          {
            v183 = sub_20F0271DC(&v351[1], (uint64_t)&v340);
          }
          else
          {
            *(_BYTE *)v351[2] = 0;
            *(_BYTE *)(v179 + 400) = 0;
            if (v347)
            {
              *(_OWORD *)v179 = v340;
              v180 = v341;
              v181 = v342;
              v182 = v343[0];
              *(_OWORD *)(v179 + 57) = *(_OWORD *)((char *)v343 + 9);
              *(_OWORD *)(v179 + 32) = v181;
              *(_OWORD *)(v179 + 48) = v182;
              *(_OWORD *)(v179 + 16) = v180;
              *(_OWORD *)(v179 + 80) = v344;
              v344 = 0uLL;
              *(_OWORD *)(v179 + 96) = v345;
              v345 = 0uLL;
              memcpy((void *)(v179 + 112), v346, 0x120uLL);
              *(_BYTE *)(v179 + 400) = 1;
            }
            v183 = v179 + 408;
          }
          v351[2] = v183;
          if (v347)
          {
            v184 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
            if (!*((_QWORD *)&v345 + 1))
              goto LABEL_230;
            v185 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
            do
              v186 = __ldaxr(v185);
            while (__stlxr(v186 - 1, v185));
            if (!v186)
            {
              ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
              std::__shared_weak_count::__release_weak(v184);
              v187 = (std::__shared_weak_count *)*((_QWORD *)&v344 + 1);
              if (!*((_QWORD *)&v344 + 1))
                goto LABEL_202;
            }
            else
            {
LABEL_230:
              v187 = (std::__shared_weak_count *)*((_QWORD *)&v344 + 1);
              if (!*((_QWORD *)&v344 + 1))
                goto LABEL_202;
            }
            v188 = (unint64_t *)&v187->__shared_owners_;
            do
              v189 = __ldaxr(v188);
            while (__stlxr(v189 - 1, v188));
            if (!v189)
            {
              ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
              std::__shared_weak_count::__release_weak(v187);
            }
          }
LABEL_202:
          if (*((_BYTE *)v56 + 248))
          {
            v166 = *((_QWORD *)v56 + 29);
            v167 = *((_QWORD *)v56 + 30);
            *(_QWORD *)&v340 = v166;
            *((_QWORD *)&v340 + 1) = v167;
            if (v167)
            {
              v168 = (unint64_t *)(v167 + 8);
              do
                v169 = __ldxr(v168);
              while (__stxr(v169 + 1, v168));
            }
            LOBYTE(v341) = 1;
            v170 = *((_QWORD *)&v352 + 1);
            if (*((_QWORD *)&v352 + 1) >= v353[0])
            {
              v174 = (_OWORD *)v352;
              v175 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v352 + 1) - v352) >> 3);
              v176 = v175 + 1;
              if (v175 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20E867F44();
              if (0x5555555555555556 * ((uint64_t)(v353[0] - v352) >> 3) > v176)
                v176 = 0x5555555555555556 * ((uint64_t)(v353[0] - v352) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v353[0] - v352) >> 3) >= 0x555555555555555)
                v177 = 0xAAAAAAAAAAAAAAALL;
              else
                v177 = v176;
              if (v177)
              {
                if (v177 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E877A38();
                v178 = (char *)operator new(24 * v177);
              }
              else
              {
                v178 = 0;
              }
              v209 = &v178[24 * v175];
              *(_QWORD *)v209 = v166;
              *((_QWORD *)v209 + 1) = v167;
              v340 = 0uLL;
              v209[16] = 1;
              v171 = v209 + 24;
              if ((_OWORD *)v170 == v174)
              {
                *(_QWORD *)&v352 = &v178[24 * v175];
                *((_QWORD *)&v352 + 1) = v209 + 24;
                v353[0] = &v178[24 * v177];
              }
              else
              {
                v210 = &v178[24 * v175];
                do
                {
                  *(v210 - 24) = 0;
                  v210 -= 24;
                  v211 = (_OWORD *)(v170 - 24);
                  v210[16] = 0;
                  if (*(_BYTE *)(v170 - 8))
                  {
                    *(_OWORD *)(v209 - 24) = *v211;
                    *(_QWORD *)v211 = 0;
                    *(_QWORD *)(v170 - 16) = 0;
                    *(v209 - 8) = 1;
                  }
                  v209 = v210;
                  v170 -= 24;
                }
                while (v211 != v174);
                v212 = *((_QWORD *)&v352 + 1);
                v170 = v352;
                *(_QWORD *)&v352 = v210;
                *((_QWORD *)&v352 + 1) = v171;
                v353[0] = &v178[24 * v177];
                while (v212 != v170)
                {
                  if (*(_BYTE *)(v212 - 8))
                  {
                    v213 = *(std::__shared_weak_count **)(v212 - 16);
                    if (v213)
                    {
                      v214 = (unint64_t *)&v213->__shared_owners_;
                      do
                        v215 = __ldaxr(v214);
                      while (__stlxr(v215 - 1, v214));
                      if (!v215)
                      {
                        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                        std::__shared_weak_count::__release_weak(v213);
                      }
                    }
                  }
                  v212 -= 24;
                }
              }
              if (v170)
                operator delete((void *)v170);
            }
            else
            {
              **((_QWORD **)&v352 + 1) = v166;
              *(_QWORD *)(v170 + 8) = v167;
              v340 = 0uLL;
              v171 = (char *)(v170 + 24);
              *(_BYTE *)(v170 + 16) = 1;
            }
            *((_QWORD *)&v352 + 1) = v171;
            if (!(_BYTE)v341)
              goto LABEL_311;
            v216 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1);
            if (!*((_QWORD *)&v340 + 1))
              goto LABEL_311;
            v217 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
            do
              v218 = __ldaxr(v217);
            while (__stlxr(v218 - 1, v217));
          }
          else
          {
            LOBYTE(v340) = 0;
            LOBYTE(v341) = 0;
            v172 = (_BYTE *)*((_QWORD *)&v352 + 1);
            if (*((_QWORD *)&v352 + 1) >= v353[0])
            {
              v190 = (_OWORD *)v352;
              v191 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v352 + 1) - v352) >> 3);
              v192 = v191 + 1;
              if (v191 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_20E867F44();
              if (0x5555555555555556 * ((uint64_t)(v353[0] - v352) >> 3) > v192)
                v192 = 0x5555555555555556 * ((uint64_t)(v353[0] - v352) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v353[0] - v352) >> 3) >= 0x555555555555555)
                v193 = 0xAAAAAAAAAAAAAAALL;
              else
                v193 = v192;
              if (v193)
              {
                if (v193 > 0xAAAAAAAAAAAAAAALL)
                  sub_20E877A38();
                v194 = (char *)operator new(24 * v193);
              }
              else
              {
                v194 = 0;
              }
              v219 = &v194[24 * v191];
              *v219 = 0;
              v219[16] = 0;
              v173 = v219 + 24;
              if (v172 == (_BYTE *)v190)
              {
                *(_QWORD *)&v352 = v219;
                *((_QWORD *)&v352 + 1) = v219 + 24;
                v353[0] = &v194[24 * v193];
              }
              else
              {
                v220 = v219;
                do
                {
                  *(v220 - 24) = 0;
                  v220 -= 24;
                  v221 = v172 - 24;
                  v220[16] = 0;
                  if (*(v172 - 8))
                  {
                    *(_OWORD *)(v219 - 24) = *v221;
                    *(_QWORD *)v221 = 0;
                    *((_QWORD *)v172 - 2) = 0;
                    *(v219 - 8) = 1;
                  }
                  v219 = v220;
                  v172 -= 24;
                }
                while (v221 != v190);
                v222 = (_BYTE *)*((_QWORD *)&v352 + 1);
                v172 = (_BYTE *)v352;
                *(_QWORD *)&v352 = v220;
                *((_QWORD *)&v352 + 1) = v173;
                v353[0] = &v194[24 * v193];
                while (v222 != v172)
                {
                  if (*(v222 - 8))
                  {
                    v223 = (std::__shared_weak_count *)*((_QWORD *)v222 - 2);
                    if (v223)
                    {
                      v224 = (unint64_t *)&v223->__shared_owners_;
                      do
                        v225 = __ldaxr(v224);
                      while (__stlxr(v225 - 1, v224));
                      if (!v225)
                      {
                        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                        std::__shared_weak_count::__release_weak(v223);
                      }
                    }
                  }
                  v222 -= 24;
                }
              }
              if (v172)
                operator delete(v172);
            }
            else
            {
              **((_BYTE **)&v352 + 1) = 0;
              v172[16] = 0;
              v173 = v172 + 24;
            }
            *((_QWORD *)&v352 + 1) = v173;
            if (!(_BYTE)v341 || (v216 = (std::__shared_weak_count *)*((_QWORD *)&v340 + 1)) == 0)
            {
LABEL_311:
              v227 = v56 + 3;
              v228 = (char *)v353[2];
              v229 = v353[3];
              if (v353[2] < v353[3])
                goto LABEL_312;
              goto LABEL_314;
            }
            v226 = (unint64_t *)(*((_QWORD *)&v340 + 1) + 8);
            do
              v218 = __ldaxr(v226);
            while (__stlxr(v218 - 1, v226));
          }
          if (v218)
            goto LABEL_311;
          ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
          std::__shared_weak_count::__release_weak(v216);
          v227 = v56 + 3;
          v228 = (char *)v353[2];
          v229 = v353[3];
          if (v353[2] < v353[3])
          {
LABEL_312:
            *(_OWORD *)v228 = *(_OWORD *)v227;
            v230 = *((_OWORD *)v227 + 1);
            v231 = *((_OWORD *)v227 + 2);
            v232 = *((_OWORD *)v227 + 3);
            *((double *)v228 + 8) = v227[8];
            *((_OWORD *)v228 + 2) = v231;
            *((_OWORD *)v228 + 3) = v232;
            *((_OWORD *)v228 + 1) = v230;
            v233 = v228 + 72;
            goto LABEL_329;
          }
LABEL_314:
          v234 = (char *)v353[1];
          v235 = 0x8E38E38E38E38E39 * ((uint64_t)&v228[-v353[1]] >> 3);
          v236 = v235 + 1;
          if (v235 + 1 > 0x38E38E38E38E38ELL)
            goto LABEL_442;
          v237 = 0x8E38E38E38E38E39 * ((v229 - v353[1]) >> 3);
          if (2 * v237 > v236)
            v236 = 2 * v237;
          if (v237 >= 0x1C71C71C71C71C7)
            v238 = 0x38E38E38E38E38ELL;
          else
            v238 = v236;
          if (v238)
          {
            if (v238 > 0x38E38E38E38E38ELL)
              goto LABEL_441;
            v239 = (char *)operator new(72 * v238);
          }
          else
          {
            v239 = 0;
          }
          v240 = &v239[72 * v235];
          *(_OWORD *)v240 = *(_OWORD *)v227;
          v241 = *((_OWORD *)v227 + 1);
          v242 = *((_OWORD *)v227 + 2);
          v243 = *((_OWORD *)v227 + 3);
          *((double *)v240 + 8) = v227[8];
          *((_OWORD *)v240 + 2) = v242;
          *((_OWORD *)v240 + 3) = v243;
          *((_OWORD *)v240 + 1) = v241;
          v244 = v240;
          if (v228 != v234)
          {
            do
            {
              *(_OWORD *)(v244 - 72) = *(_OWORD *)(v228 - 72);
              v245 = *(_OWORD *)(v228 - 56);
              v246 = *(_OWORD *)(v228 - 40);
              v247 = *(_OWORD *)(v228 - 24);
              *((_QWORD *)v244 - 1) = *((_QWORD *)v228 - 1);
              *(_OWORD *)(v244 - 24) = v247;
              *(_OWORD *)(v244 - 40) = v246;
              *(_OWORD *)(v244 - 56) = v245;
              v244 -= 72;
              v228 -= 72;
            }
            while (v228 != v234);
            v228 = (char *)v353[1];
          }
          v233 = v240 + 72;
          v353[1] = v244;
          v353[2] = v240 + 72;
          v353[3] = &v239[72 * v238];
          if (v228)
            operator delete(v228);
LABEL_329:
          v353[2] = v233;
          v248 = v56 + 12;
          v249 = *((_QWORD *)&v354 + 1);
          if (*((_QWORD *)&v354 + 1) >= v355[0])
          {
            v254 = v354;
            v255 = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)&v354 + 1) - v354) >> 3);
            v256 = v255 + 1;
            if (v255 + 1 > 0x38E38E38E38E38ELL)
LABEL_442:
              sub_20EB849AC();
            if (0x1C71C71C71C71C72 * ((uint64_t)(v355[0] - v354) >> 3) > v256)
              v256 = 0x1C71C71C71C71C72 * ((uint64_t)(v355[0] - v354) >> 3);
            if (0x8E38E38E38E38E39 * ((uint64_t)(v355[0] - v354) >> 3) >= 0x1C71C71C71C71C7)
              v257 = 0x38E38E38E38E38ELL;
            else
              v257 = v256;
            if (v257)
            {
              if (v257 > 0x38E38E38E38E38ELL)
                goto LABEL_441;
              v258 = (char *)operator new(72 * v257);
            }
            else
            {
              v258 = 0;
            }
            v259 = &v258[72 * v255];
            *(_OWORD *)v259 = *v248;
            v260 = *((_OWORD *)v56 + 7);
            v261 = *((_OWORD *)v56 + 8);
            v262 = *((_OWORD *)v56 + 9);
            *((double *)v259 + 8) = v56[20];
            *((_OWORD *)v259 + 2) = v261;
            *((_OWORD *)v259 + 3) = v262;
            *((_OWORD *)v259 + 1) = v260;
            v263 = v259;
            if (v249 != v254)
            {
              do
              {
                *(_OWORD *)(v263 - 72) = *(_OWORD *)(v249 - 72);
                v264 = *(_OWORD *)(v249 - 56);
                v265 = *(_OWORD *)(v249 - 40);
                v266 = *(_OWORD *)(v249 - 24);
                *((_QWORD *)v263 - 1) = *(_QWORD *)(v249 - 8);
                *(_OWORD *)(v263 - 24) = v266;
                *(_OWORD *)(v263 - 40) = v265;
                *(_OWORD *)(v263 - 56) = v264;
                v263 -= 72;
                v249 -= 72;
              }
              while (v249 != v254);
              v249 = v354;
            }
            v253 = v259 + 72;
            *(_QWORD *)&v354 = v263;
            *((_QWORD *)&v354 + 1) = v259 + 72;
            v355[0] = &v258[72 * v257];
            if (v249)
              operator delete((void *)v249);
          }
          else
          {
            **((_OWORD **)&v354 + 1) = *v248;
            v250 = *((_OWORD *)v56 + 7);
            v251 = *((_OWORD *)v56 + 8);
            v252 = *((_OWORD *)v56 + 9);
            *(double *)(v249 + 64) = v56[20];
            *(_OWORD *)(v249 + 32) = v251;
            *(_OWORD *)(v249 + 48) = v252;
            *(_OWORD *)(v249 + 16) = v250;
            v253 = (char *)(v249 + 72);
          }
          *((_QWORD *)&v354 + 1) = v253;
          v267 = v56 + 21;
          v268 = (_BYTE *)v355[2];
          if (v355[2] < v355[3])
          {
            *(_OWORD *)v355[2] = *v267;
            v269 = v268 + 16;
            goto LABEL_364;
          }
          v270 = (_BYTE *)v355[1];
          v271 = (uint64_t)(v355[2] - v355[1]) >> 4;
          v272 = v271 + 1;
          if ((unint64_t)(v271 + 1) >> 60)
            goto LABEL_444;
          v273 = v355[3] - v355[1];
          if ((uint64_t)(v355[3] - v355[1]) >> 3 > v272)
            v272 = v273 >> 3;
          if ((unint64_t)v273 >= 0x7FFFFFFFFFFFFFF0)
            v274 = 0xFFFFFFFFFFFFFFFLL;
          else
            v274 = v272;
          if (v274)
          {
            if (v274 >> 60)
              goto LABEL_441;
            v275 = (char *)operator new(16 * v274);
            v276 = &v275[16 * v271];
            *(_OWORD *)v276 = *v267;
            v277 = (uint64_t)v276;
            if (v268 == v270)
            {
LABEL_362:
              v281 = &v275[16 * v274];
              v269 = v276 + 16;
              v355[1] = v277;
              v355[2] = v276 + 16;
              v355[3] = v281;
              if (!v268)
                goto LABEL_364;
LABEL_363:
              operator delete(v268);
              goto LABEL_364;
            }
          }
          else
          {
            v275 = 0;
            v276 = (char *)(16 * v271);
            *(_OWORD *)(16 * v271) = *v267;
            v277 = 16 * v271;
            if (v268 == v270)
              goto LABEL_362;
          }
          do
          {
            v278 = *((_QWORD *)v268 - 2);
            v268 -= 16;
            v279 = v268[8];
            *(_QWORD *)(v277 - 16) = v278;
            v277 -= 16;
            *(_BYTE *)(v277 + 8) = v279;
          }
          while (v268 != v270);
          v268 = (_BYTE *)v355[1];
          v280 = &v275[16 * v274];
          v269 = v276 + 16;
          v355[1] = v277;
          v355[2] = v276 + 16;
          v355[3] = v280;
          if (v268)
            goto LABEL_363;
LABEL_364:
          v355[2] = v269;
          v282 = v56 + 23;
          v283 = (_BYTE *)*((_QWORD *)&v356 + 1);
          if (*((_QWORD *)&v356 + 1) < v357[0])
          {
            **((_OWORD **)&v356 + 1) = *v282;
            v284 = v283 + 16;
            goto LABEL_382;
          }
          v285 = (_BYTE *)v356;
          v286 = (uint64_t)(*((_QWORD *)&v356 + 1) - v356) >> 4;
          v287 = v286 + 1;
          if ((unint64_t)(v286 + 1) >> 60)
LABEL_444:
            sub_20E867F44();
          v288 = v357[0] - v356;
          if ((uint64_t)(v357[0] - v356) >> 3 > v287)
            v287 = v288 >> 3;
          if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFF0)
            v289 = 0xFFFFFFFFFFFFFFFLL;
          else
            v289 = v287;
          if (v289)
          {
            if (v289 >> 60)
              goto LABEL_441;
            v290 = (char *)operator new(16 * v289);
            v291 = &v290[16 * v286];
            *(_OWORD *)v291 = *v282;
            v292 = (uint64_t)v291;
            if (v283 == v285)
            {
LABEL_380:
              v296 = &v290[16 * v289];
              v284 = v291 + 16;
              *(_QWORD *)&v356 = v292;
              *((_QWORD *)&v356 + 1) = v291 + 16;
              v357[0] = v296;
              if (!v283)
                goto LABEL_382;
LABEL_381:
              operator delete(v283);
              goto LABEL_382;
            }
          }
          else
          {
            v290 = 0;
            v291 = (char *)(16 * v286);
            *(_OWORD *)(16 * v286) = *v282;
            v292 = 16 * v286;
            if (v283 == v285)
              goto LABEL_380;
          }
          do
          {
            v293 = *((_QWORD *)v283 - 2);
            v283 -= 16;
            v294 = v283[8];
            *(_QWORD *)(v292 - 16) = v293;
            v292 -= 16;
            *(_BYTE *)(v292 + 8) = v294;
          }
          while (v283 != v285);
          v283 = (_BYTE *)v356;
          v295 = &v290[16 * v289];
          v284 = v291 + 16;
          *(_QWORD *)&v356 = v292;
          *((_QWORD *)&v356 + 1) = v291 + 16;
          v357[0] = v295;
          if (v283)
            goto LABEL_381;
LABEL_382:
          *((_QWORD *)&v356 + 1) = v284;
          v297 = (uint64_t *)(v56 + 87);
          v298 = (char *)v357[2];
          if (v357[2] < v357[3])
          {
            v58 = *v297;
            *(_DWORD *)(v357[2] + 8) = *((_DWORD *)v56 + 176);
            *(_QWORD *)v298 = v58;
            v59 = v298 + 12;
          }
          else
          {
            v299 = (char *)v357[1];
            v300 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v357[2] - v357[1]) >> 2);
            v301 = v300 + 1;
            if (v300 + 1 > 0x1555555555555555)
              sub_20E867F44();
            if (0x5555555555555556 * ((uint64_t)(v357[3] - v357[1]) >> 2) > v301)
              v301 = 0x5555555555555556 * ((uint64_t)(v357[3] - v357[1]) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v357[3] - v357[1]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v302 = 0x1555555555555555;
            else
              v302 = v301;
            if (v302)
            {
              if (v302 > 0x1555555555555555)
LABEL_441:
                sub_20E877A38();
              v303 = (char *)operator new(12 * v302);
            }
            else
            {
              v303 = 0;
            }
            v304 = *v297;
            v305 = &v303[12 * v300];
            *((_DWORD *)v305 + 2) = *((_DWORD *)v56 + 176);
            *(_QWORD *)v305 = v304;
            v306 = v305;
            if (v298 != v299)
            {
              do
              {
                v307 = *(_QWORD *)(v298 - 12);
                v298 -= 12;
                v308 = v298[8];
                *(_QWORD *)(v306 - 12) = v307;
                v306 -= 12;
                v306[8] = v308;
              }
              while (v298 != v299);
              v298 = (char *)v357[1];
            }
            v59 = v305 + 12;
            v357[1] = v306;
            v357[2] = v305 + 12;
            v357[3] = &v303[12 * v302];
            if (v298)
              operator delete(v298);
          }
          v357[2] = v59;
          v56 += 89;
        }
        v310 = v339[1];
        v309 = v339[2];
        if (v310 >= v309)
        {
          v313 = *v339;
          v314 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v310 - *v339) >> 4);
          v315 = v314 + 1;
          if (v314 + 1 > 0x111111111111111)
            sub_20E867F44();
          v316 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v309 - v313) >> 4);
          if (2 * v316 > v315)
            v315 = 2 * v316;
          if (v316 >= 0x88888888888888)
            v317 = 0x111111111111111;
          else
            v317 = v315;
          if (v317 > 0x111111111111111)
            sub_20E877A38();
          v318 = operator new(240 * v317);
          v319 = v349[3];
          v320 = (uint64_t)v318 + 240 * v314;
          *(_QWORD *)(v320 + 16) = v349[0];
          *(_QWORD *)(v320 + 40) = v319;
          v321 = v351[3];
          *(_QWORD *)(v320 + 64) = v351[0];
          *(_QWORD *)(v320 + 88) = 0;
          *(_QWORD *)(v320 + 88) = v321;
          *(_QWORD *)(v320 + 112) = 0;
          v322 = v353[3];
          *(_QWORD *)(v320 + 112) = v353[0];
          *(_QWORD *)(v320 + 136) = 0;
          *(_QWORD *)(v320 + 136) = v322;
          *(_QWORD *)(v320 + 160) = 0;
          v323 = v355[3];
          *(_QWORD *)(v320 + 160) = v355[0];
          *(_QWORD *)(v320 + 184) = 0;
          *(_QWORD *)(v320 + 184) = v323;
          *(_QWORD *)(v320 + 208) = 0;
          v324 = v357[3];
          *(_QWORD *)(v320 + 208) = v357[0];
          *(_OWORD *)v320 = v348;
          *(_OWORD *)(v320 + 24) = *(_OWORD *)&v349[1];
          memset(&v349[1], 0, 24);
          *(_OWORD *)(v320 + 48) = v350;
          v351[0] = 0;
          v350 = 0uLL;
          *(_QWORD *)(v320 + 80) = 0;
          *(_OWORD *)(v320 + 72) = *(_OWORD *)&v351[1];
          memset(&v351[1], 0, 24);
          *(_QWORD *)(v320 + 104) = 0;
          *(_OWORD *)(v320 + 96) = v352;
          v352 = 0uLL;
          v353[0] = 0;
          *(_QWORD *)(v320 + 128) = 0;
          *(_OWORD *)(v320 + 120) = *(_OWORD *)&v353[1];
          memset(&v353[1], 0, 24);
          *(_QWORD *)(v320 + 152) = 0;
          *(_OWORD *)(v320 + 144) = v354;
          v354 = 0uLL;
          v355[0] = 0;
          *(_QWORD *)(v320 + 176) = 0;
          *(_OWORD *)(v320 + 168) = *(_OWORD *)&v355[1];
          memset(&v355[1], 0, 24);
          *(_QWORD *)(v320 + 200) = 0;
          *(_OWORD *)(v320 + 192) = v356;
          v356 = 0uLL;
          v357[0] = 0;
          *(_QWORD *)(v320 + 224) = 0;
          *(_QWORD *)(v320 + 232) = 0;
          *(_OWORD *)(v320 + 216) = *(_OWORD *)&v357[1];
          *(_QWORD *)(v320 + 232) = v324;
          memset(&v357[1], 0, 24);
          sub_20F009CC8(v336, v310, v310, v313, v313, v320, v320);
          v325 = v320 + 240;
          v326 = (char *)*v339;
          v327 = (char *)v339[1];
          *v339 = v328;
          v339[1] = v325;
          for (v339[2] = (uint64_t)v318 + 240 * v317; v327 != v326; v327 -= 240)
          {
            v330 = (void *)*((_QWORD *)v327 - 3);
            if (v330)
            {
              *((_QWORD *)v327 - 2) = v330;
              operator delete(v330);
            }
            v331 = (void *)*((_QWORD *)v327 - 6);
            if (v331)
            {
              *((_QWORD *)v327 - 5) = v331;
              operator delete(v331);
            }
            v332 = (void *)*((_QWORD *)v327 - 9);
            if (v332)
            {
              *((_QWORD *)v327 - 8) = v332;
              operator delete(v332);
            }
            v333 = (void *)*((_QWORD *)v327 - 12);
            if (v333)
            {
              *((_QWORD *)v327 - 11) = v333;
              operator delete(v333);
            }
            v334 = (void *)*((_QWORD *)v327 - 15);
            if (v334)
            {
              *((_QWORD *)v327 - 14) = v334;
              operator delete(v334);
            }
            sub_20E990FD8((void **)v327 - 27);
          }
          if (v326)
            operator delete(v326);
          v329 = (void *)v357[1];
          v339[1] = v325;
          v312 = v338;
          if (v329)
          {
            v357[2] = v329;
            operator delete(v329);
          }
        }
        else
        {
          v311 = v349[0];
          *(_OWORD *)v310 = v348;
          *(_QWORD *)(v310 + 16) = v311;
          *(_QWORD *)(v310 + 24) = 0;
          *(_QWORD *)(v310 + 40) = 0;
          *(_QWORD *)(v310 + 48) = 0;
          *(_QWORD *)(v310 + 32) = 0;
          *(_OWORD *)(v310 + 24) = *(_OWORD *)&v349[1];
          *(_QWORD *)(v310 + 40) = v349[3];
          memset(&v349[1], 0, 24);
          *(_QWORD *)(v310 + 56) = 0;
          *(_QWORD *)(v310 + 64) = 0;
          *(_OWORD *)(v310 + 48) = v350;
          *(_QWORD *)(v310 + 64) = v351[0];
          *(_QWORD *)(v310 + 72) = 0;
          v350 = 0uLL;
          v351[0] = 0;
          *(_QWORD *)(v310 + 80) = 0;
          *(_QWORD *)(v310 + 88) = 0;
          *(_OWORD *)(v310 + 72) = *(_OWORD *)&v351[1];
          v351[1] = 0;
          v351[2] = 0;
          *(_QWORD *)(v310 + 88) = v351[3];
          *(_QWORD *)(v310 + 96) = 0;
          v351[3] = 0;
          *(_QWORD *)(v310 + 104) = 0;
          *(_QWORD *)(v310 + 112) = 0;
          *(_OWORD *)(v310 + 96) = v352;
          v352 = 0uLL;
          *(_QWORD *)(v310 + 112) = v353[0];
          *(_QWORD *)(v310 + 120) = 0;
          v353[0] = 0;
          *(_QWORD *)(v310 + 128) = 0;
          *(_QWORD *)(v310 + 136) = 0;
          *(_OWORD *)(v310 + 120) = *(_OWORD *)&v353[1];
          v353[1] = 0;
          v353[2] = 0;
          *(_QWORD *)(v310 + 136) = v353[3];
          *(_QWORD *)(v310 + 144) = 0;
          v353[3] = 0;
          *(_QWORD *)(v310 + 152) = 0;
          *(_QWORD *)(v310 + 160) = 0;
          *(_OWORD *)(v310 + 144) = v354;
          v354 = 0uLL;
          *(_QWORD *)(v310 + 160) = v355[0];
          *(_QWORD *)(v310 + 168) = 0;
          v355[0] = 0;
          *(_QWORD *)(v310 + 176) = 0;
          *(_QWORD *)(v310 + 184) = 0;
          *(_OWORD *)(v310 + 168) = *(_OWORD *)&v355[1];
          v355[1] = 0;
          v355[2] = 0;
          *(_QWORD *)(v310 + 184) = v355[3];
          *(_QWORD *)(v310 + 192) = 0;
          v355[3] = 0;
          *(_QWORD *)(v310 + 200) = 0;
          *(_QWORD *)(v310 + 208) = 0;
          *(_OWORD *)(v310 + 192) = v356;
          v356 = 0uLL;
          *(_QWORD *)(v310 + 208) = v357[0];
          *(_QWORD *)(v310 + 216) = 0;
          v357[0] = 0;
          *(_QWORD *)(v310 + 224) = 0;
          *(_QWORD *)(v310 + 232) = 0;
          *(_OWORD *)(v310 + 216) = *(_OWORD *)&v357[1];
          *(_QWORD *)(v310 + 232) = v357[3];
          memset(&v357[1], 0, 24);
          v339[1] = v310 + 240;
          v312 = v338;
        }
        if ((_QWORD)v356)
        {
          *((_QWORD *)&v356 + 1) = v356;
          operator delete((void *)v356);
        }
        if (v355[1])
        {
          v355[2] = v355[1];
          operator delete((void *)v355[1]);
        }
        if ((_QWORD)v354)
        {
          *((_QWORD *)&v354 + 1) = v354;
          operator delete((void *)v354);
        }
        if (v353[1])
        {
          v353[2] = v353[1];
          operator delete((void *)v353[1]);
        }
        sub_20E990FD8((void **)&v349[1]);
        v5 = v312 + 3;
      }
      while (v5 != v337);
    }
  }
  return kdebug_trace();
}

void sub_20F026F4C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  sub_20ED2894C(v1);
  sub_20E8E69C4(v2 - 160);
  _Unwind_Resume(a1);
}

void sub_20F026F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  void *v21;
  uint64_t v22;
  uint64_t v23;

  sub_20E990F68(v22);
  operator delete(v21);
  sub_20F027164((uint64_t)&STACK[0x220]);
  sub_20ED2894C(a21);
  sub_20E8E69C4(v23 - 160);
  _Unwind_Resume(a1);
}

void sub_20F027058(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v2 = (uint64_t)(a1 + 2);
  v3 = *a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 4) < a2)
  {
    if (a2 >= 0x111111111111112)
      sub_20E867F44();
    v5 = a1[1];
    v6 = 240 * a2;
    v10 = operator new(240 * a2);
    v11 = (uint64_t)v10 + v5 - v3;
    sub_20F009CC8(v2, v5, v5, v3, v3, v11, v11);
    v7 = (void *)*a1;
    v8 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (uint64_t)v10 + v6;
    while ((void *)v8 != v7)
    {
      v8 -= 240;
      sub_20E990F68(v8);
    }
    if (v7)
      operator delete(v7);
  }
}

void sub_20F027150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F009C78((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F027164(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(_QWORD *)(a1 + 176) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 144);
  if (v5)
  {
    *(_QWORD *)(a1 + 152) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 120);
  if (v6)
  {
    *(_QWORD *)(a1 + 128) = v6;
    operator delete(v6);
  }
  sub_20E990FD8((void **)(a1 + 24));
  return a1;
}

uint64_t sub_20F0271DC(uint64_t *a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)&v4[-*a1] >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xA0A0A0A0A0A0A0)
    sub_20E867F44();
  if (0xF5F5F5F5F5F5F5F6 * ((a1[2] - (uint64_t)v3) >> 3) > v6)
    v6 = 0xF5F5F5F5F5F5F5F6 * ((a1[2] - (uint64_t)v3) >> 3);
  if (0xFAFAFAFAFAFAFAFBLL * ((a1[2] - (uint64_t)v3) >> 3) >= 0x50505050505050)
    v8 = 0xA0A0A0A0A0A0A0;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xA0A0A0A0A0A0A0)
      sub_20E877A38();
    v9 = (char *)operator new(408 * v8);
    v10 = (uint64_t)&v9[408 * v5];
    *(_BYTE *)v10 = 0;
    *(_BYTE *)(v10 + 400) = 0;
    if (*(_BYTE *)(a2 + 400))
      goto LABEL_10;
  }
  else
  {
    v9 = 0;
    v10 = 8 * ((uint64_t)&v4[-*a1] >> 3);
    *(_BYTE *)v10 = 0;
    *(_BYTE *)(v10 + 400) = 0;
    if (*(_BYTE *)(a2 + 400))
    {
LABEL_10:
      v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(v10 + 48) = v11;
      *(_OWORD *)(v10 + 57) = *(_OWORD *)(a2 + 57);
      v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)v10 = *(_OWORD *)a2;
      *(_OWORD *)(v10 + 16) = v12;
      v13 = *(_OWORD *)(a2 + 80);
      v14 = *(_OWORD *)(a2 + 96);
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 104) = 0;
      *(_OWORD *)(v10 + 80) = v13;
      *(_OWORD *)(v10 + 96) = v14;
      memcpy((void *)(v10 + 112), (const void *)(a2 + 112), 0x120uLL);
      *(_BYTE *)(v10 + 400) = 1;
      v3 = (char *)*a1;
      v4 = (char *)a1[1];
    }
  }
  v15 = &v9[408 * v8];
  v16 = v10 + 408;
  if (v4 != v3)
  {
    v17 = 0;
    do
    {
      v18 = v10 + v17;
      v19 = (_BYTE *)(v10 + v17 - 408);
      v20 = &v4[v17];
      *v19 = 0;
      *(_BYTE *)(v10 + v17 - 8) = 0;
      if (v4[v17 - 8])
      {
        *(_OWORD *)v19 = *(_OWORD *)(v20 - 408);
        v21 = *(_OWORD *)(v20 - 392);
        v22 = *(_OWORD *)(v20 - 376);
        v23 = *(_OWORD *)(v20 - 360);
        *(_OWORD *)(v10 + v17 - 351) = *(_OWORD *)(v20 - 351);
        *(_OWORD *)(v10 + v17 - 376) = v22;
        *(_OWORD *)(v10 + v17 - 360) = v23;
        *(_OWORD *)(v10 + v17 - 392) = v21;
        *(_OWORD *)(v18 - 328) = *(_OWORD *)(v20 - 328);
        *((_QWORD *)v20 - 40) = 0;
        *((_QWORD *)v20 - 41) = 0;
        *(_OWORD *)(v18 - 312) = *(_OWORD *)(v20 - 312);
        *((_QWORD *)v20 - 38) = 0;
        *((_QWORD *)v20 - 39) = 0;
        memcpy((void *)(v18 - 296), v20 - 296, 0x120uLL);
        *(_BYTE *)(v18 - 8) = 1;
      }
      v17 -= 408;
    }
    while (&v4[v17] != v3);
    v3 = (char *)*a1;
    v24 = (char *)a1[1];
    *a1 = v10 + v17;
    a1[1] = v16;
    a1[2] = (uint64_t)v15;
    while (1)
    {
      if (v24 == v3)
        goto LABEL_34;
      if (*(v24 - 8))
      {
        v25 = (std::__shared_weak_count *)*((_QWORD *)v24 - 38);
        if (!v25)
          goto LABEL_24;
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
          v28 = (std::__shared_weak_count *)*((_QWORD *)v24 - 40);
          if (!v28)
            goto LABEL_17;
        }
        else
        {
LABEL_24:
          v28 = (std::__shared_weak_count *)*((_QWORD *)v24 - 40);
          if (!v28)
            goto LABEL_17;
        }
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
LABEL_17:
      v24 -= 408;
    }
  }
  *a1 = v10;
  a1[1] = v16;
  a1[2] = (uint64_t)v15;
LABEL_34:
  if (v3)
    operator delete(v3);
  return v10 + 408;
}

uint64_t *sub_20F0274B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__p;
  __int128 v24;

  __p = operator new(0x20uLL);
  v24 = xmmword_2102DC000;
  strcpy((char *)__p, "Front end odometry parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v24) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)(a1 + 2));
  sub_20E8B2F9C((uint64_t *)&__p, "re_initialize", v4, "Enable re-initialization capability");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 3));
  sub_20E8B2F9C((uint64_t *)&__p, "enable_heuristics_reinitialization", v5, "Enable low texture based re-initialization");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EA9DB90((double *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)&__p, "FrontEndOdometryConfig.pnp_angle_error_bound_in_degrees_during_inplace_relocalization", v6, "PnP angle update bound for inplace relocalization");
  __p = (void *)nullsub_1(a2);
  v7 = sub_20EA9DB90((double *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)&__p, "FrontEndOdometryConfig.min_time_difference_between_query_and_map_frames", v7, "Minimum time different between query frame and map frame to allow use of the map frame");
  __p = (void *)nullsub_1(a2);
  v8 = sub_20EAA14D8((_BYTE *)(a1 + 4));
  sub_20E8B2F9C((uint64_t *)&__p, "FrontEndOdometryConfig.check_delta_motion_to_enable_epipolar_map_tracking", v8, "Flag to determine whether to check delta motion between current pose and the last known pose used for epipolar tracker.");
  __p = (void *)nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)&__p, "FrontEndOdometryConfig.max_velocity_allowed_to_enable_epipolar_map_tracker_m_s", v9, "Maximum allowed velocity to enable epipolar tracker.");
  __p = (void *)nullsub_1(a2);
  v10 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "is_visual_slam_enabled", v10, "Enable/Disable Visual-SLAM (Moving SLAM).");
  __p = (void *)nullsub_1(a2);
  v11 = sub_20EAA14D8((_BYTE *)(a1 + 1));
  sub_20E8B2F9C((uint64_t *)&__p, "is_general_visual_slam_enabled", v11, "Whether Visual SLAM for trains is enabled.");
  sub_20F12B408(a1 + 256, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20F405AF0(a1 + 4008, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20F10B9C0(a1 + 152, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20EFDF440(a1 + 4216, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20EFDF994((int *)(a1 + 4248), &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20EFF58AC(a1 + 4608, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20F156B68(a1 + 4624, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  __p = (void *)nullsub_1(a2);
  v12 = sub_20EAA14D8((_BYTE *)(a1 + 5));
  sub_20E8B2F9C((uint64_t *)&__p, "FrontEndOdometryConfig.extend_map_tracking_from_frame_to_frame_matching", v12, "Flag to enable extending map tracking using frame to frame tracking result.");
  __p = (void *)nullsub_1(a2);
  v13 = sub_20EAA14D8((_BYTE *)(a1 + 6));
  sub_20E8B2F9C((uint64_t *)&__p, "FrontEndOdometryConfig.only_extend_map_tracking_for_bad_geometry", v13, "Only extend map tracking when the frame has bad geometry in AK.");
  __p = (void *)nullsub_1(a2);
  v14 = sub_20EAA14D8((_BYTE *)(a1 + 7));
  sub_20E8B2F9C((uint64_t *)&__p, "FrontEndOdometryConfig.compute_distorted_to_calibrated_scale", v14, "Flag to compute distorted to calibrated scale. ");
  __p = (void *)nullsub_1(a2);
  v15 = sub_20EAA14D8((_BYTE *)(a1 + 4736));
  sub_20E8B2F9C((uint64_t *)&__p, "FrontEndOdometryConfig.enable_logging_invalid_stats", v15, "Enable Triage error logging.");
  __p = (void *)nullsub_1(a2);
  v16 = sub_20F027AC4(a1 + 88);
  sub_20E8B2F9C((uint64_t *)&__p, "FrontEndOdometryConfig.reprojection_threshold_scale_of_high_angular_speed", v16, "reprojection_threshold_scale_of_high_angular_speed.");
  __p = (void *)nullsub_1(a2);
  v17 = sub_20F027AC4(a1 + 48);
  sub_20E8B2F9C((uint64_t *)&__p, "FrontEndOdometryConfig.angular_speed_for_larger_reprojection_threshold_scale_rad_s", v17, "angular_speed_for_larger_reprojection_threshold_scale_rad_s.");
  sub_20F0D0CAC(a1 + 4464, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  __p = (void *)nullsub_1(a2);
  v18 = sub_20EAA14D8((_BYTE *)(a1 + 4738));
  sub_20E8B2F9C((uint64_t *)&__p, "FrontEndOdometryConfig.enable_calibration_change_notifier", v18, "Enable calibration change notifier.");
  __p = (void *)nullsub_1(a2);
  v19 = sub_20EAA14D8((_BYTE *)(a1 + 4739));
  sub_20E8B2F9C((uint64_t *)&__p, "FrontEndOdometryConfig.apply_state_correction_to_front_end_tracker", v19, "apply_state_correction_to_front_end_tracker.");
  __p = (void *)nullsub_1(a2);
  v20 = sub_20EA9DCF0((unsigned int *)(a1 + 144));
  sub_20E8B2F9C((uint64_t *)&__p, "FrontEndOdometryConfig.max_num_stereo_matches_for_low_stereo_coverage", v20, "Maximum number of stereo matches for low stereo coverage.");
  __p = (void *)nullsub_1(a2);
  v21 = sub_20EAA14D8((_BYTE *)(a1 + 4740));
  return sub_20E8B2F9C((uint64_t *)&__p, "use_eelp_prototype", v21, "Toggle end to end LP mode prototyping.");
}

void sub_20F0279BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20E869298(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F027AC4(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD *, _QWORD *, uint64_t);
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  void *__p;
  void *v9;
  char *v10;
  uint64_t v11;
  _QWORD v12[3];

  v2 = operator new();
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 109) = 0;
  *(_QWORD *)v2 = &off_24C9C2E20;
  *(_QWORD *)(v2 + 8) = &unk_24C9C2E98;
  *(_QWORD *)(v2 + 152) = &unk_24C9C2EC0;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  v11 = (uint64_t)off_24C9F7C70 + 1;
  v12[0] = a1;
  sub_20EAA459C((uint64_t *)(v2 + 120), &v11);
  if (v11)
  {
    if ((v11 & 1) == 0)
    {
      v3 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(v12, v12, 2);
    }
    v11 = 0;
  }
  v4 = operator new(0x28uLL);
  v9 = (char *)v4 + 40;
  v10 = (char *)v4 + 40;
  __p = v4;
  v5 = *(_OWORD *)(a1 + 16);
  *v4 = *(_OWORD *)a1;
  v4[1] = v5;
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a1 + 32);
  v6 = sub_20EAA2D64(v2, (uint64_t)&__p);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_20F027BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F027C04(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9F7C80;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z47CreateProgramOptionValueOrArrayWithSavedCurrentIdLm5EEPN5boost15program_options"
                                      "11typed_valueINSt3__16vectorIT_NS3_9allocatorIS5_EEEEcEERNS3_5arrayIS5_XT0_EEEEUlR"
                                      "KNS4_IdNS6_IdEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z47CreateProgramOptionValueOrArrayWithSavedCurrentIdLm5EEPN5boost15program_options11typed_valueINSt3__16vectorIT_NS3_9allocatorIS5_EEEEcEERNS3_5arrayIS5_XT0_EEEEUlRKNS4_IdNS6_IdEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

__n128 sub_20F027CB0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __n128 result;
  _QWORD *v6;
  __int128 v7;

  v2 = *a2;
  v3 = (a2[1] - *a2) >> 3;
  if (v3 == 5)
  {
    v6 = (_QWORD *)*a1;
    result = *(__n128 *)v2;
    v7 = *(_OWORD *)(v2 + 16);
    v6[4] = *(_QWORD *)(v2 + 32);
    *(__n128 *)v6 = result;
    *((_OWORD *)v6 + 1) = v7;
  }
  else
  {
    if (v3 != 1)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/ProgramOptions/include/Kit/ProgramOptions/ProgramOptionsParserUtil.h", 161, (uint64_t)"", 0, (uint64_t)"invalid size of array parameter", 31, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v4 = (_QWORD *)*a1;
    *v4 = *(_QWORD *)v2;
    v4[1] = *(_QWORD *)v2;
    v4[2] = *(_QWORD *)v2;
    v4[3] = *(_QWORD *)v2;
    result.n128_u64[0] = *(_QWORD *)v2;
    v4[4] = *(_QWORD *)v2;
  }
  return result;
}

uint64_t sub_20F027D58(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  char **v10;
  char v11;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = *(_BYTE **)(v4 + 328);
  v5 = *(_BYTE **)(v4 + 336);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_20E867F44();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 16) = v9;
  }
  v10 = (char **)(a1 + 32);
  v11 = *((_BYTE *)a2 + 488);
  if (v11)
  {
    sub_20F1589FC(v10, (uint64_t)(a2 + 22));
    v11 = 1;
  }
  else
  {
    *(_BYTE *)v10 = 0;
  }
  *(_BYTE *)(a1 + 344) = v11;
  return a1;
}

void sub_20F027E04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

double sub_20F027E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void **v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double result;
  char *v11;
  char *v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  _OWORD v47[296];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  *(_BYTE *)(v1 + 56) = 0;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 152) = -1;
  v3 = operator new(0x68uLL);
  *(_BYTE *)(v2 + 176) = 0;
  v4 = (void **)(v2 + 176);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_24C9D0DF0;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  v3[10] = 0;
  v3[11] = v2 + 112;
  *(_QWORD *)(v2 + 168) = v3;
  v3[3] = 850045863;
  *(_QWORD *)(v2 + 160) = v3 + 3;
  *(_BYTE *)(v2 + 488) = 0;
  sub_20F12B9C4((char **)(v0 + 8), (uint64_t)&v26);
  v5 = operator new(0x13B0uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_24C9F7CA0;
  v6 = sub_20F028CB8((uint64_t)(v5 + 3), (uint64_t)&v26);
  v7 = *(std::__shared_weak_count **)(v2 + 8);
  *(_QWORD *)v2 = v6;
  *(_QWORD *)(v2 + 8) = v5;
  if (!v7)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    sub_20F028268((uint64_t)&v26);
    if (!*(_BYTE *)(v0 + 344))
      return result;
  }
  else
  {
LABEL_5:
    sub_20F028268((uint64_t)&v26);
    if (!*(_BYTE *)(v0 + 344))
      return result;
  }
  sub_20F158FB0((uint64_t *)(v0 + 32), (uint64_t)&v26);
  if (*(_BYTE *)(v2 + 488))
  {
    v11 = (char *)*v4;
    if (*v4)
    {
      v12 = *(char **)(v2 + 184);
      v13 = *v4;
      if (v12 != v11)
      {
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 22);
          if (v14)
          {
            *((_QWORD *)v12 - 21) = v14;
            operator delete(v14);
          }
          v12 -= 272;
        }
        while (v12 != v11);
        v13 = *v4;
      }
      *(_QWORD *)(v2 + 184) = v11;
      operator delete(v13);
      *v4 = 0;
      *(_QWORD *)(v2 + 184) = 0;
      *(_QWORD *)(v2 + 192) = 0;
    }
    *(_OWORD *)(v2 + 176) = v26;
    *(_QWORD *)(v2 + 192) = v27;
    *(_DWORD *)(v2 + 200) = v28;
    *(_OWORD *)(v2 + 208) = v29;
    *(_QWORD *)(v2 + 224) = v30;
    *(_OWORD *)(v2 + 248) = v32;
    *(_OWORD *)(v2 + 264) = v33;
    *(_OWORD *)(v2 + 280) = v34;
    *(_QWORD *)(v2 + 296) = v35;
    *(_OWORD *)(v2 + 232) = v31;
    *(_QWORD *)(v2 + 368) = v40;
    v19 = v39;
    *(_OWORD *)(v2 + 336) = v38;
    *(_OWORD *)(v2 + 352) = v19;
    v20 = v37;
    *(_OWORD *)(v2 + 304) = v36;
    *(_OWORD *)(v2 + 320) = v20;
    v21 = (_OWORD *)(v2 + 376);
    if (*(unsigned __int8 *)(v2 + 448) == v46)
    {
      if (*(_BYTE *)(v2 + 448))
      {
        v22 = v44;
        *(_OWORD *)(v2 + 408) = v43;
        *(_OWORD *)(v2 + 424) = v22;
        *(_QWORD *)(v2 + 440) = v45;
        v23 = v42;
        *v21 = v41;
        *(_OWORD *)(v2 + 392) = v23;
      }
    }
    else if (*(_BYTE *)(v2 + 448))
    {
      *(_BYTE *)(v2 + 448) = 0;
    }
    else
    {
      v24 = v44;
      *(_OWORD *)(v2 + 408) = v43;
      *(_OWORD *)(v2 + 424) = v24;
      *(_QWORD *)(v2 + 440) = v45;
      v25 = v42;
      *v21 = v41;
      *(_OWORD *)(v2 + 392) = v25;
      *(_BYTE *)(v2 + 448) = 1;
    }
    *(_OWORD *)(v2 + 456) = v47[0];
    result = *(double *)((char *)v47 + 9);
    *(_OWORD *)(v2 + 465) = *(_OWORD *)((char *)v47 + 9);
  }
  else
  {
    *(_OWORD *)(v2 + 176) = v26;
    *(_QWORD *)(v2 + 192) = v27;
    *(_DWORD *)(v2 + 200) = v28;
    *(_OWORD *)(v2 + 208) = v29;
    *(_QWORD *)(v2 + 224) = v30;
    *(_OWORD *)(v2 + 248) = v32;
    *(_OWORD *)(v2 + 264) = v33;
    *(_OWORD *)(v2 + 280) = v34;
    *(_QWORD *)(v2 + 296) = v35;
    *(_OWORD *)(v2 + 232) = v31;
    v15 = v39;
    *(_OWORD *)(v2 + 336) = v38;
    *(_OWORD *)(v2 + 352) = v15;
    *(_QWORD *)(v2 + 368) = v40;
    v16 = v37;
    *(_OWORD *)(v2 + 304) = v36;
    *(_OWORD *)(v2 + 320) = v16;
    *(_BYTE *)(v2 + 376) = 0;
    *(_BYTE *)(v2 + 448) = 0;
    if (v46)
    {
      v17 = v42;
      v18 = v44;
      *(_OWORD *)(v2 + 408) = v43;
      *(_OWORD *)(v2 + 424) = v18;
      *(_QWORD *)(v2 + 440) = v45;
      *(_OWORD *)(v2 + 376) = v41;
      *(_OWORD *)(v2 + 392) = v17;
      *(_BYTE *)(v2 + 448) = 1;
    }
    *(_OWORD *)(v2 + 456) = v47[0];
    result = *(double *)((char *)v47 + 9);
    *(_OWORD *)(v2 + 465) = *(_OWORD *)((char *)v47 + 9);
    *(_BYTE *)(v2 + 488) = 1;
  }
  return result;
}

void sub_20F0281A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAFDDD0(v1);
  _Unwind_Resume(a1);
}

void sub_20F0281B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *v12;

  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v12);
  sub_20F028268((uint64_t)&a9);
  sub_20EAFDDD0(v9);
  _Unwind_Resume(a1);
}

void sub_20F0281E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAFDDD0(v1);
  _Unwind_Resume(a1);
}

void **sub_20F0281F8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 22);
        if (v5)
        {
          *((_QWORD *)v3 - 21) = v5;
          operator delete(v5);
        }
        v3 -= 272;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20F028268(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  sub_20F028428(a1 + 4864);
  sub_20E866BE0(a1 + 4704, *(char **)(a1 + 4712));
  sub_20F0284B0(a1 + 4576, *(_QWORD **)(a1 + 4584));
  v2 = *(unsigned int *)(a1 + 4568);
  if ((_DWORD)v2)
  {
    v3 = (_QWORD *)(a1 + 4392);
    do
    {
      v4 = (void *)*(v3 - 1);
      if (v4)
      {
        *v3 = v4;
        operator delete(v4);
      }
      v5 = (void *)*(v3 - 5);
      if (v5)
      {
        *(v3 - 4) = v5;
        operator delete(v5);
      }
      v6 = (void *)*(v3 - 8);
      if (v6)
      {
        *(v3 - 7) = v6;
        operator delete(v6);
      }
      v3 += 10;
      --v2;
    }
    while (v2);
  }
  *(_DWORD *)(a1 + 4568) = 0;
  v7 = *(void **)(a1 + 4304);
  if (v7)
  {
    *(_QWORD *)(a1 + 4312) = v7;
    operator delete(v7);
  }
  sub_20F0284F8((_QWORD *)(a1 + 4080));
  v8 = *(unsigned int *)(a1 + 4072);
  if ((_DWORD)v8)
  {
    v9 = (_QWORD *)(a1 + 3896);
    do
    {
      v10 = (void *)*(v9 - 1);
      if (v10)
      {
        *v9 = v10;
        operator delete(v10);
      }
      v11 = (void *)*(v9 - 5);
      if (v11)
      {
        *(v9 - 4) = v11;
        operator delete(v11);
      }
      v12 = (void *)*(v9 - 8);
      if (v12)
      {
        *(v9 - 7) = v12;
        operator delete(v12);
      }
      v9 += 10;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)(a1 + 4072) = 0;
  v13 = *(void **)(a1 + 3808);
  if (v13)
  {
    *(_QWORD *)(a1 + 3816) = v13;
    operator delete(v13);
  }
  sub_20F0284F8((_QWORD *)(a1 + 3584));
  return sub_20F028598(a1);
}

_QWORD *sub_20F02839C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(unsigned int *)(a1 + 488);
  if ((_DWORD)v2)
  {
    v3 = (_QWORD *)(a1 + 312);
    do
    {
      v4 = (void *)*(v3 - 1);
      if (v4)
      {
        *v3 = v4;
        operator delete(v4);
      }
      v5 = (void *)*(v3 - 5);
      if (v5)
      {
        *(v3 - 4) = v5;
        operator delete(v5);
      }
      v6 = (void *)*(v3 - 8);
      if (v6)
      {
        *(v3 - 7) = v6;
        operator delete(v6);
      }
      v3 += 10;
      --v2;
    }
    while (v2);
  }
  *(_DWORD *)(a1 + 488) = 0;
  v7 = *(void **)(a1 + 224);
  if (v7)
  {
    *(_QWORD *)(a1 + 232) = v7;
    operator delete(v7);
  }
  return sub_20F0284F8((_QWORD *)a1);
}

uint64_t sub_20F028428(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 144))
  {
    v2 = *(void **)(a1 + 120);
    if (v2)
    {
      *(_QWORD *)(a1 + 128) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 96);
    if (v3)
    {
      *(_QWORD *)(a1 + 104) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 72);
    if (v4)
    {
      *(_QWORD *)(a1 + 80) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 48);
    if (v5)
    {
      *(_QWORD *)(a1 + 56) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(a1 + 24);
    if (v6)
    {
      *(_QWORD *)(a1 + 32) = v6;
      operator delete(v6);
    }
    v7 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
    }
  }
  return a1;
}

void sub_20F0284B0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20F0284B0(a1, *a2);
    sub_20F0284B0(a1, a2[1]);
    sub_20EB8188C((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

_QWORD *sub_20F0284F8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[22];
  if (v3)
  {
    a1[23] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[19];
  if (v4)
  {
    a1[20] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[16];
  if (v5)
  {
    a1[17] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[13];
  if (v6)
  {
    a1[14] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[10];
  if (v7)
  {
    a1[11] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[7];
  if (v8)
  {
    a1[8] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[4];
  if (v9)
  {
    a1[5] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_20F028598(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void **v31;

  v2 = *(void **)(a1 + 1752);
  if (v2)
  {
    *(_QWORD *)(a1 + 1760) = v2;
    operator delete(v2);
  }
  sub_20F0287BC((_QWORD *)(a1 + 840));
  v3 = *(void **)(a1 + 616);
  if (v3)
  {
    *(_QWORD *)(a1 + 624) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 592);
  if (v4)
  {
    *(_QWORD *)(a1 + 600) = v4;
    operator delete(v4);
  }
  v31 = (void **)(a1 + 568);
  sub_20F028A48(&v31);
  v31 = (void **)(a1 + 544);
  sub_20F028A48(&v31);
  v31 = (void **)(a1 + 520);
  sub_20F028A48(&v31);
  v5 = *(_QWORD *)(a1 + 496);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 504);
    v7 = *(void **)(a1 + 496);
    if (v6 != v5)
    {
      do
      {
        v8 = *(void **)(v6 - 24);
        if (v8)
        {
          *(_QWORD *)(v6 - 16) = v8;
          operator delete(v8);
        }
        v9 = *(void **)(v6 - 56);
        if (v9)
        {
          *(_QWORD *)(v6 - 48) = v9;
          operator delete(v9);
        }
        v6 -= 216;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 496);
    }
    *(_QWORD *)(a1 + 504) = v5;
    operator delete(v7);
  }
  v10 = *(_QWORD *)(a1 + 472);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 480);
    v12 = *(void **)(a1 + 472);
    if (v11 != v10)
    {
      do
      {
        v13 = *(void **)(v11 - 24);
        if (v13)
        {
          *(_QWORD *)(v11 - 16) = v13;
          operator delete(v13);
        }
        v14 = *(void **)(v11 - 56);
        if (v14)
        {
          *(_QWORD *)(v11 - 48) = v14;
          operator delete(v14);
        }
        v11 -= 216;
      }
      while (v11 != v10);
      v12 = *(void **)(a1 + 472);
    }
    *(_QWORD *)(a1 + 480) = v10;
    operator delete(v12);
  }
  v15 = *(_QWORD *)(a1 + 448);
  if (v15)
  {
    v16 = *(_QWORD *)(a1 + 456);
    v17 = *(void **)(a1 + 448);
    if (v16 != v15)
    {
      v18 = *(_QWORD *)(a1 + 456);
      do
      {
        v20 = *(void **)(v18 - 24);
        v18 -= 24;
        v19 = v20;
        if (v20)
        {
          *(_QWORD *)(v16 - 16) = v19;
          operator delete(v19);
        }
        v16 = v18;
      }
      while (v18 != v15);
      v17 = *(void **)(a1 + 448);
    }
    *(_QWORD *)(a1 + 456) = v15;
    operator delete(v17);
  }
  v21 = *(void **)(a1 + 424);
  if (v21)
  {
    *(_QWORD *)(a1 + 432) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(a1 + 400);
  if (v22)
  {
    *(_QWORD *)(a1 + 408) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(a1 + 376);
  if (v23)
    operator delete(v23);
  v24 = *(void **)(a1 + 352);
  if (v24)
  {
    *(_QWORD *)(a1 + 360) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(a1 + 328);
  if (v25)
  {
    *(_QWORD *)(a1 + 336) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(a1 + 304);
  if (v26)
  {
    *(_QWORD *)(a1 + 312) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 280);
  if (v27)
  {
    *(_QWORD *)(a1 + 288) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 256);
  if (v28)
  {
    *(_QWORD *)(a1 + 264) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 208);
  if (v29)
  {
    *(_QWORD *)(a1 + 216) = v29;
    operator delete(v29);
  }
  return sub_20F028B60(a1);
}

_QWORD *sub_20F0287BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  v2 = a1[108];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[105];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[102];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[99];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = a1[96];
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = (void *)a1[93];
  if (v7)
  {
    a1[94] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[90];
  if (v8)
  {
    a1[91] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[87];
  if (v9)
  {
    a1[88] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[84];
  if (v10)
  {
    a1[85] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[81];
  if (v11)
  {
    a1[82] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[78];
  if (v12)
  {
    a1[79] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[75];
  if (v13)
  {
    a1[76] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[72];
  if (v14)
  {
    a1[73] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[69];
  if (v15)
  {
    a1[70] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[66];
  if (v16)
  {
    a1[67] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[63];
  if (v17)
  {
    a1[64] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[60];
  if (v18)
  {
    a1[61] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[57];
  if (v19)
  {
    a1[58] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[53];
  if (v20)
  {
    a1[54] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[50];
  if (v21)
  {
    a1[51] = v21;
    operator delete(v21);
  }
  v22 = (void *)a1[47];
  if (v22)
  {
    a1[48] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[44];
  if (v23)
  {
    a1[45] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[41];
  if (v24)
  {
    a1[42] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[38];
  if (v25)
  {
    a1[39] = v25;
    operator delete(v25);
  }
  v26 = (void *)a1[35];
  if (v26)
  {
    a1[36] = v26;
    operator delete(v26);
  }
  v27 = (void *)a1[32];
  if (v27)
  {
    a1[33] = v27;
    operator delete(v27);
  }
  v28 = (void *)a1[26];
  if (v28)
  {
    a1[27] = v28;
    operator delete(v28);
  }
  v29 = (void *)a1[23];
  if (v29)
  {
    a1[24] = v29;
    operator delete(v29);
  }
  v30 = (void *)a1[20];
  if (v30)
  {
    a1[21] = v30;
    operator delete(v30);
  }
  v31 = (void *)a1[17];
  if (v31)
  {
    a1[18] = v31;
    operator delete(v31);
  }
  v32 = (void *)a1[14];
  if (v32)
  {
    a1[15] = v32;
    operator delete(v32);
  }
  v33 = (void *)a1[11];
  if (v33)
  {
    a1[12] = v33;
    operator delete(v33);
  }
  v34 = (void *)a1[8];
  if (v34)
  {
    a1[9] = v34;
    operator delete(v34);
  }
  v35 = (void *)a1[5];
  if (v35)
  {
    a1[6] = v35;
    operator delete(v35);
  }
  v36 = (void *)a1[2];
  if (v36)
  {
    a1[3] = v36;
    operator delete(v36);
  }
  return a1;
}

void sub_20F028A48(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (void **)v1[1];
      do
      {
        v9 = (void **)*(v6 - 3);
        v6 -= 3;
        v8 = v9;
        if (v9)
        {
          v10 = (void **)*(v4 - 2);
          v7 = v8;
          if (v10 != v8)
          {
            v11 = (void **)*(v4 - 2);
            do
            {
              v14 = (char *)*(v11 - 3);
              v11 -= 3;
              v13 = v14;
              if (v14)
              {
                v15 = (char *)*(v10 - 2);
                v12 = v13;
                if (v15 != v13)
                {
                  v16 = (char *)*(v10 - 2);
                  do
                  {
                    v18 = (void *)*((_QWORD *)v16 - 3);
                    v16 -= 24;
                    v17 = v18;
                    if (v18)
                    {
                      *((_QWORD *)v15 - 2) = v17;
                      operator delete(v17);
                    }
                    v15 = v16;
                  }
                  while (v16 != v13);
                  v12 = *v11;
                }
                *(v10 - 2) = v13;
                operator delete(v12);
              }
              v10 = v11;
            }
            while (v11 != v8);
            v7 = *v6;
          }
          *(v4 - 2) = v8;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20F028B60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    v4 = *(void **)(a1 + 168);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 176);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 168);
    }
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v4);
  }
  v8 = *(void **)(a1 + 144);
  if (v8)
  {
    *(_QWORD *)(a1 + 152) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 120);
  if (v9)
  {
    *(_QWORD *)(a1 + 128) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 96);
  if (v10)
  {
    *(_QWORD *)(a1 + 104) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 72);
  if (v11)
  {
    *(_QWORD *)(a1 + 80) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 48);
  if (v12)
  {
    *(_QWORD *)(a1 + 56) = v12;
    operator delete(v12);
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(void **)(a1 + 24);
    if (v14 != v13)
    {
      do
        v14 = sub_20EB8188C(v14 - 1664);
      while (v14 != v13);
      v15 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v13;
    operator delete(v15);
  }
  v16 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v16;
    operator delete(v16);
  }
  return a1;
}

void sub_20F028C6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F7CA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F028C7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F7CA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F028CAC(uint64_t a1)
{
  return sub_20F028268(a1 + 24);
}

uint64_t sub_20F028CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = sub_20F028FB8(a1, a2);
  v5 = *(_DWORD *)(a2 + 1776);
  *(_WORD *)(v4 + 1780) = *(_WORD *)(a2 + 1780);
  *(_DWORD *)(v4 + 1776) = v5;
  memcpy((void *)(v4 + 1784), (const void *)(a2 + 1784), 0x708uLL);
  sub_20F02994C(a1 + 3584, (__int128 *)(a2 + 3584));
  sub_20F029BF0(a1 + 4080, (__int128 *)(a2 + 4080));
  v6 = (_BYTE *)(a2 + 4696);
  v7 = (_BYTE *)(a1 + 4600);
  *(_QWORD *)(a1 + 4576) = *(_QWORD *)(a2 + 4576);
  v8 = a1 + 4584;
  v9 = *(_QWORD *)(a2 + 4584);
  *(_QWORD *)(a1 + 4584) = v9;
  v10 = *(_QWORD *)(a2 + 4592);
  *(_QWORD *)(a1 + 4592) = v10;
  if (v10)
  {
    *(_QWORD *)(v9 + 16) = v8;
    *(_QWORD *)(a2 + 4576) = a2 + 4584;
    *(_QWORD *)(a2 + 4584) = 0;
    *(_QWORD *)(a2 + 4592) = 0;
    *v7 = 0;
    *(_BYTE *)(a1 + 4696) = 0;
    if (!*v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  *(_QWORD *)(a1 + 4576) = v8;
  *v7 = 0;
  *(_BYTE *)(a1 + 4696) = 0;
  if (*v6)
  {
LABEL_3:
    *(_OWORD *)v7 = *(_OWORD *)(a2 + 4600);
    v11 = *(_OWORD *)(a2 + 4616);
    v12 = *(_OWORD *)(a2 + 4632);
    v13 = *(_OWORD *)(a2 + 4648);
    *(_QWORD *)(a1 + 4664) = *(_QWORD *)(a2 + 4664);
    *(_OWORD *)(a1 + 4632) = v12;
    *(_OWORD *)(a1 + 4648) = v13;
    *(_OWORD *)(a1 + 4616) = v11;
    v14 = *(_OWORD *)(a2 + 4672);
    *(_QWORD *)(a1 + 4688) = *(_QWORD *)(a2 + 4688);
    *(_OWORD *)(a1 + 4672) = v14;
    *(_BYTE *)(a1 + 4696) = 1;
  }
LABEL_4:
  v15 = (_BYTE *)(a1 + 4864);
  *(_QWORD *)(a1 + 4704) = *(_QWORD *)(a2 + 4704);
  v16 = a1 + 4712;
  v17 = *(_QWORD *)(a2 + 4712);
  *(_QWORD *)(a1 + 4712) = v17;
  v18 = *(_QWORD *)(a2 + 4720);
  *(_QWORD *)(a1 + 4720) = v18;
  if (v18)
  {
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(a2 + 4704) = a2 + 4712;
    *(_QWORD *)(a2 + 4712) = 0;
    *(_QWORD *)(a2 + 4720) = 0;
    *(_BYTE *)(a1 + 4728) = 0;
    v19 = (_OWORD *)(a1 + 4728);
    *(_BYTE *)(a1 + 4856) = 0;
    if (!*(_BYTE *)(a2 + 4856))
      goto LABEL_7;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 4704) = v16;
  *(_BYTE *)(a1 + 4728) = 0;
  v19 = (_OWORD *)(a1 + 4728);
  *(_BYTE *)(a1 + 4856) = 0;
  if (*(_BYTE *)(a2 + 4856))
  {
LABEL_6:
    v20 = *(_OWORD *)(a2 + 4728);
    v21 = *(_OWORD *)(a2 + 4744);
    v22 = *(_OWORD *)(a2 + 4776);
    v19[2] = *(_OWORD *)(a2 + 4760);
    v19[3] = v22;
    *v19 = v20;
    v19[1] = v21;
    v23 = *(_OWORD *)(a2 + 4792);
    v24 = *(_OWORD *)(a2 + 4808);
    v25 = *(_OWORD *)(a2 + 4840);
    v19[6] = *(_OWORD *)(a2 + 4824);
    v19[7] = v25;
    v19[4] = v23;
    v19[5] = v24;
    *(_BYTE *)(a1 + 4856) = 1;
  }
LABEL_7:
  *v15 = 0;
  *(_BYTE *)(a1 + 5008) = 0;
  if (*(_BYTE *)(a2 + 5008))
  {
    *(_QWORD *)(a1 + 4880) = 0;
    *(_OWORD *)v15 = 0u;
    *(_OWORD *)(a1 + 4864) = *(_OWORD *)(a2 + 4864);
    *(_QWORD *)(a1 + 4880) = *(_QWORD *)(a2 + 4880);
    *(_QWORD *)(a2 + 4880) = 0;
    *(_OWORD *)(a2 + 4864) = 0u;
    *(_QWORD *)(a1 + 4896) = 0;
    *(_QWORD *)(a1 + 4888) = 0;
    *(_QWORD *)(a1 + 4904) = 0;
    *(_QWORD *)(a1 + 4888) = *(_QWORD *)(a2 + 4888);
    *(_QWORD *)(a1 + 4896) = *(_QWORD *)(a2 + 4896);
    *(_QWORD *)(a1 + 4904) = *(_QWORD *)(a2 + 4904);
    *(_QWORD *)(a2 + 4896) = 0;
    *(_QWORD *)(a2 + 4888) = 0;
    *(_QWORD *)(a2 + 4904) = 0;
    *(_QWORD *)(a1 + 4920) = 0;
    *(_QWORD *)(a1 + 4912) = 0;
    *(_QWORD *)(a1 + 4928) = 0;
    *(_OWORD *)(a1 + 4912) = *(_OWORD *)(a2 + 4912);
    *(_QWORD *)(a1 + 4928) = *(_QWORD *)(a2 + 4928);
    *(_QWORD *)(a2 + 4920) = 0;
    *(_QWORD *)(a2 + 4912) = 0;
    *(_QWORD *)(a2 + 4928) = 0;
    *(_QWORD *)(a1 + 4944) = 0;
    *(_QWORD *)(a1 + 4936) = 0;
    *(_QWORD *)(a1 + 4952) = 0;
    *(_QWORD *)(a1 + 4936) = *(_QWORD *)(a2 + 4936);
    *(_QWORD *)(a1 + 4944) = *(_QWORD *)(a2 + 4944);
    *(_QWORD *)(a1 + 4952) = *(_QWORD *)(a2 + 4952);
    *(_QWORD *)(a2 + 4944) = 0;
    *(_QWORD *)(a2 + 4936) = 0;
    *(_QWORD *)(a2 + 4952) = 0;
    *(_QWORD *)(a1 + 4968) = 0;
    *(_QWORD *)(a1 + 4960) = 0;
    *(_QWORD *)(a1 + 4976) = 0;
    *(_OWORD *)(a1 + 4960) = *(_OWORD *)(a2 + 4960);
    *(_QWORD *)(a1 + 4976) = *(_QWORD *)(a2 + 4976);
    *(_QWORD *)(a2 + 4968) = 0;
    *(_QWORD *)(a2 + 4960) = 0;
    *(_QWORD *)(a2 + 4976) = 0;
    *(_QWORD *)(a1 + 4992) = 0;
    *(_QWORD *)(a1 + 4984) = 0;
    *(_QWORD *)(a1 + 5000) = 0;
    *(_QWORD *)(a1 + 4984) = *(_QWORD *)(a2 + 4984);
    *(_QWORD *)(a1 + 4992) = *(_QWORD *)(a2 + 4992);
    *(_QWORD *)(a1 + 5000) = *(_QWORD *)(a2 + 5000);
    *(_QWORD *)(a2 + 4992) = 0;
    *(_QWORD *)(a2 + 4984) = 0;
    *(_QWORD *)(a2 + 5000) = 0;
    *(_BYTE *)(a1 + 5008) = 1;
  }
  return a1;
}

void sub_20F028F88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_20F02839C(v2);
  sub_20F028598(v1);
  _Unwind_Resume(a1);
}

void sub_20F028FA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20F028598(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F028FB8(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  v4 = *(_WORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 200) = v4;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  v5 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a2 + 208) = 0u;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a1 + 232) = v5;
  v6 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a1 + 240) = v6;
  v7 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a1 + 248) = v7;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  v8 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v8;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = 0;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_QWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  v9 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v9;
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a2 + 344) = 0;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_QWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 368) = 0;
  *(_OWORD *)(a2 + 352) = 0u;
  v10 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v10;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a2 + 392) = 0;
  *(_OWORD *)(a2 + 376) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a2 + 416) = 0;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_QWORD *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  v11 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = v11;
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a2 + 440) = 0;
  *(_OWORD *)(a2 + 424) = 0u;
  *(_QWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a2 + 464) = 0;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_QWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  v12 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v12;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a2 + 488) = 0;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_QWORD *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a2 + 512) = 0;
  *(_OWORD *)(a2 + 496) = 0u;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  v13 = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = v13;
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a2 + 536) = 0;
  *(_OWORD *)(a2 + 520) = 0u;
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a2 + 560) = 0;
  *(_OWORD *)(a2 + 544) = 0u;
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  v14 = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 576) = v14;
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a2 + 584) = 0;
  *(_OWORD *)(a2 + 568) = 0u;
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a2 + 608) = 0;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  v15 = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = v15;
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a2 + 632) = 0;
  *(_OWORD *)(a2 + 616) = 0u;
  *(_BYTE *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  if (*(_BYTE *)(a2 + 808))
  {
    v16 = *(_OWORD *)(a2 + 640);
    v17 = *(_OWORD *)(a2 + 672);
    *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
    *(_OWORD *)(a1 + 672) = v17;
    *(_OWORD *)(a1 + 640) = v16;
    v18 = *(_OWORD *)(a2 + 688);
    v19 = *(_OWORD *)(a2 + 704);
    v20 = *(_OWORD *)(a2 + 736);
    *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
    *(_OWORD *)(a1 + 736) = v20;
    *(_OWORD *)(a1 + 688) = v18;
    *(_OWORD *)(a1 + 704) = v19;
    v21 = *(_OWORD *)(a2 + 752);
    v22 = *(_OWORD *)(a2 + 768);
    v23 = *(_OWORD *)(a2 + 784);
    *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
    *(_OWORD *)(a1 + 768) = v22;
    *(_OWORD *)(a1 + 784) = v23;
    *(_OWORD *)(a1 + 752) = v21;
    *(_BYTE *)(a1 + 808) = 1;
  }
  v24 = *(_OWORD *)(a2 + 816);
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 816) = v24;
  sub_20F029404(a1 + 840, a2 + 840);
  *(_QWORD *)(a1 + 1768) = 0;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_QWORD *)(a1 + 1752) = *(_QWORD *)(a2 + 1752);
  *(_QWORD *)(a1 + 1760) = *(_QWORD *)(a2 + 1760);
  *(_QWORD *)(a1 + 1768) = *(_QWORD *)(a2 + 1768);
  *(_QWORD *)(a2 + 1768) = 0;
  *(_OWORD *)(a2 + 1752) = 0u;
  return a1;
}

__n128 sub_20F029404(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 224) = 0;
  *(_OWORD *)(a2 + 208) = 0u;
  v2 = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = v2;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  v3 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v3;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = 0;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_QWORD *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  v4 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v4;
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a2 + 344) = 0;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_QWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 368) = 0;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_QWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  v5 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v5;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a2 + 392) = 0;
  *(_OWORD *)(a2 + 376) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a2 + 416) = 0;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_QWORD *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  v6 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = v6;
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a2 + 440) = 0;
  *(_OWORD *)(a2 + 424) = 0u;
  v7 = *(_QWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = 0u;
  *(_QWORD *)(a1 + 448) = v7;
  *(_QWORD *)(a1 + 456) = 0;
  v8 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = v8;
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a2 + 472) = 0;
  *(_OWORD *)(a2 + 456) = 0u;
  *(_QWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a2 + 496) = 0;
  *(_OWORD *)(a2 + 480) = 0u;
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  v9 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = v9;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a2 + 520) = 0;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_QWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a2 + 544) = 0;
  *(_OWORD *)(a2 + 528) = 0u;
  *(_QWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a2 + 568) = 0;
  *(_OWORD *)(a2 + 552) = 0u;
  *(_QWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a2 + 592) = 0;
  *(_OWORD *)(a2 + 576) = 0u;
  *(_QWORD *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a2 + 616) = 0;
  *(_OWORD *)(a2 + 600) = 0u;
  *(_QWORD *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(a2 + 640) = 0;
  *(_OWORD *)(a2 + 624) = 0u;
  *(_QWORD *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(a2 + 664) = 0;
  *(_OWORD *)(a2 + 648) = 0u;
  *(_QWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(a2 + 688) = 0;
  *(_OWORD *)(a2 + 672) = 0u;
  *(_QWORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  *(_QWORD *)(a2 + 712) = 0;
  *(_OWORD *)(a2 + 696) = 0u;
  *(_QWORD *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a2 + 736) = 0;
  *(_OWORD *)(a2 + 720) = 0u;
  *(_QWORD *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a2 + 760) = 0;
  *(_OWORD *)(a2 + 744) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  *(_QWORD *)(a2 + 768) = 0;
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
  *(_QWORD *)(a2 + 776) = 0;
  *(_DWORD *)(a1 + 784) = *(_DWORD *)(a2 + 784);
  *(_DWORD *)(a2 + 784) = 0;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(a2 + 792) = 0;
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  *(_QWORD *)(a2 + 800) = 0;
  *(_DWORD *)(a1 + 808) = *(_DWORD *)(a2 + 808);
  *(_DWORD *)(a2 + 808) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_QWORD *)(a1 + 816) = *(_QWORD *)(a2 + 816);
  *(_QWORD *)(a2 + 816) = 0;
  *(_QWORD *)(a1 + 824) = *(_QWORD *)(a2 + 824);
  *(_QWORD *)(a2 + 824) = 0;
  *(_DWORD *)(a1 + 832) = *(_DWORD *)(a2 + 832);
  *(_DWORD *)(a2 + 832) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
  *(_QWORD *)(a2 + 840) = 0;
  *(_QWORD *)(a1 + 848) = *(_QWORD *)(a2 + 848);
  *(_QWORD *)(a2 + 848) = 0;
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(a2 + 856);
  *(_DWORD *)(a2 + 856) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
  *(_QWORD *)(a2 + 864) = 0;
  *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 872);
  *(_QWORD *)(a2 + 872) = 0;
  *(_DWORD *)(a1 + 880) = *(_DWORD *)(a2 + 880);
  *(_DWORD *)(a2 + 880) = 0;
  result = *(__n128 *)(a2 + 888);
  *(_DWORD *)(a1 + 904) = *(_DWORD *)(a2 + 904);
  *(__n128 *)(a1 + 888) = result;
  return result;
}

uint64_t sub_20F02994C(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_OWORD *)(a1 + 12) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 20) = 0;
  *((_QWORD *)a2 + 21) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  *((_QWORD *)a2 + 24) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = *(__int128 *)((char *)a2 + 200);
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 25) = 0;
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 28) = 0;
  *((_QWORD *)a2 + 29) = 0;
  *((_QWORD *)a2 + 30) = 0;
  sub_20F029AD4(a1 + 248, (uint64_t)a2 + 248);
  return a1;
}

void sub_20F029AAC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    v1[29] = v5;
    operator delete(v5);
  }
  sub_20F0284F8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F029AD4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;

  *(_DWORD *)(a1 + 240) = 0;
  v4 = *(_DWORD *)(a2 + 240);
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 80 * v4;
    v7 = a2;
    do
    {
      v8 = (_QWORD *)(a1 + 80 * v5);
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *(_OWORD *)v8 = *(_OWORD *)v7;
      v8[2] = *(_QWORD *)(v7 + 16);
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      v8[3] = 0;
      v8[4] = 0;
      v8[5] = 0;
      *(_OWORD *)(v8 + 3) = *(_OWORD *)(v7 + 24);
      v8[5] = *(_QWORD *)(v7 + 40);
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      v9 = *(_QWORD *)(v7 + 48);
      v8[8] = 0;
      v8[9] = 0;
      v8[6] = v9;
      v8[7] = 0;
      *(_OWORD *)(v8 + 7) = *(_OWORD *)(v7 + 56);
      v8[9] = *(_QWORD *)(v7 + 72);
      *(_QWORD *)(v7 + 56) = 0;
      *(_QWORD *)(v7 + 64) = 0;
      *(_QWORD *)(v7 + 72) = 0;
      v5 = *(_DWORD *)(a1 + 240) + 1;
      *(_DWORD *)(a1 + 240) = v5;
      v7 += 80;
    }
    while (v7 != v6);
    v10 = *(unsigned int *)(a2 + 240);
    if ((_DWORD)v10)
    {
      v11 = (_QWORD *)(a2 + 32);
      do
      {
        v12 = (void *)v11[3];
        if (v12)
        {
          v11[4] = v12;
          operator delete(v12);
        }
        v13 = (void *)*(v11 - 1);
        if (v13)
        {
          *v11 = v13;
          operator delete(v13);
        }
        v14 = (void *)*(v11 - 4);
        if (v14)
        {
          *(v11 - 3) = v14;
          operator delete(v14);
        }
        v11 += 10;
        --v10;
      }
      while (v10);
    }
  }
  *(_DWORD *)(a2 + 240) = 0;
  return a1;
}

uint64_t sub_20F029BF0(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_OWORD *)(a1 + 12) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = a2[8];
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 19) = 0;
  *((_QWORD *)a2 + 20) = 0;
  *((_QWORD *)a2 + 21) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  *((_QWORD *)a2 + 24) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = *(__int128 *)((char *)a2 + 200);
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 25) = 0;
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 28) = 0;
  *((_QWORD *)a2 + 29) = 0;
  *((_QWORD *)a2 + 30) = 0;
  sub_20F029AD4(a1 + 248, (uint64_t)a2 + 248);
  return a1;
}

void sub_20F029D50(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    v1[29] = v5;
    operator delete(v5);
  }
  sub_20F0284F8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F029D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned __int8 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  unsigned __int8 v30;
  _QWORD *v31;
  int v32;
  const void *v33;
  size_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (**v56)();
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _BYTE *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void **v94;
  void *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unsigned __int8 v99;
  uint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  void **v104;
  void **v105;
  void *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t *v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  void **v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  void *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  void *v171;
  uint64_t v172;
  void **v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  uint64_t v181;
  void *v182;
  void *v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  void *v188;
  uint64_t v189;
  int v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  void *v202;
  void *v203;
  uint64_t v204;
  uint64_t i;
  uint64_t v206;
  unsigned int v207;
  unsigned __int8 v208;
  uint64_t v209;
  uint64_t v210;
  unsigned __int8 v211;
  unsigned __int8 v212;
  uint64_t v213;
  uint64_t v214;
  unsigned __int8 v215;
  unsigned int v216;
  unsigned __int8 v217;
  uint64_t v218;
  uint64_t v219;
  unsigned __int8 v220;
  unsigned __int8 v221;
  uint64_t v222;
  uint64_t v223;
  unsigned __int8 v224;
  uint64_t *v225;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  std::logic_error *exception;
  void **v240;
  uint64_t *v241;
  uint64_t *v242;
  uint64_t *v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  int v253[2];
  int v254;
  unsigned int v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  __int128 v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  int *v263;
  _QWORD v264[3];
  _QWORD *v265;
  _QWORD v266[3];
  _QWORD *v267;
  _QWORD v268[3];
  _QWORD *v269;
  _BYTE v270[48];
  __int128 v271;
  __int128 v272;
  void *v273[4];
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  char v282;
  void *v283;
  char v284;
  __int16 v285;
  char v286;
  void *v287;
  char v288;
  void *v289;
  char v290;
  void *v291;
  char v292;
  void *v293;
  char v294;
  void *v295;
  char v296;
  void *v297;
  void *v298;
  void *__p;
  char v300;
  uint64_t (**v301)();
  uint64_t *v302;
  uint64_t v303;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v303 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 88) = -1;
  v8 = operator new(0x68uLL);
  *(_OWORD *)(v7 + 144) = 0u;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C9D0DF0;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  v8[10] = 0;
  v8[11] = v7 + 48;
  *(_QWORD *)(v7 + 104) = v8;
  v8[3] = 850045863;
  *(_QWORD *)(v7 + 96) = v8 + 3;
  *(_OWORD *)(v7 + 112) = 0u;
  v245 = (uint64_t *)(v7 + 112);
  *(_BYTE *)(v7 + 184) = 0;
  *(_BYTE *)(v7 + 280) = 0;
  *(_BYTE *)(v7 + 392) = 0;
  *(_BYTE *)(v7 + 400) = 0;
  *(_BYTE *)(v7 + 512) = 0;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_BYTE *)(v7 + 176) = 0;
  *(_QWORD *)(v7 + 288) = 0;
  *(_QWORD *)(v7 + 296) = 0;
  *(_BYTE *)(v7 + 312) = 0;
  *(_QWORD *)(v7 + 304) = 0;
  v250 = v7 + 520;
  *(_OWORD *)(v7 + 520) = xmmword_21039A250;
  *(_QWORD *)(v7 + 536) = 0x1E00000000;
  *(_QWORD *)(v7 + 544) = *v4;
  v9 = v4[1];
  *(_QWORD *)(v7 + 552) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v242 = (uint64_t *)(v7 + 120);
  v244 = (uint64_t *)(v7 + 136);
  v12 = (std::__shared_weak_count *)v4[1];
  v261 = *v4;
  v262 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v243 = (uint64_t *)(v7 + 152);
  v15 = atomic_load((unsigned __int8 *)&qword_254A6DA78);
  *(_QWORD *)v253 = v7;
  v246 = v7 + 312;
  v247 = v7 + 144;
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DA78))
  {
    sub_20FDBEA28(qword_254A6DA60);
    __cxa_atexit((void (*)(void *))sub_20FDBEE1C, qword_254A6DA60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DA78);
  }
  sub_20F10A540(v7 + 560, &v261, 20, (uint64_t)qword_254A6DA60);
  v16 = v262;
  if (v262)
  {
    v17 = (unint64_t *)&v262->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)v4[1];
  v259 = *v4;
  v260 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = atomic_load((unsigned __int8 *)&qword_254A6DA78);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DA78))
  {
    sub_20FDBEA28(qword_254A6DA60);
    __cxa_atexit((void (*)(void *))sub_20FDBEE1C, qword_254A6DA60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DA78);
  }
  sub_20EFF59D0(v7 + 936, &v259, (uint64_t)qword_254A6DA60);
  v23 = v260;
  if (v260)
  {
    v24 = (unint64_t *)&v260->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v241 = (uint64_t *)(v7 + 1176);
  *(_QWORD *)(v7 + 1176) = 0;
  *(_BYTE *)(v7 + 1184) = 0;
  *(_BYTE *)(v7 + 1200) = 0;
  *(_OWORD *)(v7 + 1208) = 0u;
  *(_OWORD *)(v7 + 1224) = 0u;
  *(_DWORD *)(v7 + 1240) = 1065353216;
  v240 = (void **)(v7 + 1248);
  *(_OWORD *)(v7 + 1304) = 0u;
  *(_OWORD *)(v7 + 1320) = 0u;
  *(_OWORD *)(v7 + 1248) = 0u;
  *(_OWORD *)(v7 + 1264) = 0u;
  *(_OWORD *)(v7 + 1280) = 0u;
  *(_QWORD *)(v7 + 1336) = -1;
  v26 = operator new(0x68uLL);
  *v26 = &off_24C9F7F20;
  v26[1] = 0;
  v26[3] = 850045863;
  v26[2] = 0;
  *((_OWORD *)v26 + 2) = 0u;
  *((_OWORD *)v26 + 3) = 0u;
  *((_OWORD *)v26 + 4) = 0u;
  v26[10] = 0;
  v26[11] = v7 + 1296;
  *(_QWORD *)(v7 + 1344) = v26 + 3;
  *(_QWORD *)(v7 + 1352) = v26;
  *(_OWORD *)(v7 + 1368) = 0u;
  *(_OWORD *)(v7 + 1384) = 0u;
  *(_QWORD *)(v7 + 1400) = -1;
  v27 = operator new(0x68uLL);
  v27[1] = 0;
  v27[2] = 0;
  *v27 = &off_24C9F7F70;
  v27[3] = 850045863;
  *((_OWORD *)v27 + 2) = 0u;
  *((_OWORD *)v27 + 3) = 0u;
  *((_OWORD *)v27 + 4) = 0u;
  v27[10] = 0;
  v27[11] = v7 + 1360;
  *(_QWORD *)(v7 + 1408) = v27 + 3;
  *(_QWORD *)(v7 + 1416) = v27;
  sub_20F41C71C((uint64_t *)(v7 + 1424), 0, 0, 0, 0, 0);
  *(_QWORD *)(v7 + 1456) = 0;
  *(_OWORD *)(v7 + 1440) = 0u;
  *(_WORD *)(v7 + 1656) = 0;
  *(_DWORD *)(v7 + 1464) = -1;
  *(_QWORD *)(v7 + 1472) = 0;
  *(_BYTE *)(v7 + 1480) = 0;
  *(_DWORD *)(v7 + 1488) = -1;
  *(_QWORD *)(v7 + 1496) = 0;
  *(_BYTE *)(v7 + 1504) = 0;
  *(_DWORD *)(v7 + 1512) = -1;
  *(_QWORD *)(v7 + 1520) = 0;
  *(_BYTE *)(v7 + 1528) = 0;
  *(_DWORD *)(v7 + 1536) = -1;
  *(_QWORD *)(v7 + 1544) = 0;
  *(_BYTE *)(v7 + 1552) = 0;
  *(_DWORD *)(v7 + 1560) = -1;
  *(_QWORD *)(v7 + 1568) = 0;
  *(_BYTE *)(v7 + 1576) = 0;
  *(_DWORD *)(v7 + 1584) = -1;
  *(_QWORD *)(v7 + 1592) = 0;
  *(_BYTE *)(v7 + 1600) = 0;
  *(_DWORD *)(v7 + 1608) = -1;
  *(_QWORD *)(v7 + 1616) = 0;
  *(_BYTE *)(v7 + 1624) = 0;
  *(_DWORD *)(v7 + 1632) = -1;
  *(_QWORD *)(v7 + 1640) = 0;
  *(_BYTE *)(v7 + 1648) = 0;
  sub_20F16D020(v7 + 1664, (__int16 *)(v6 + 2704), (int *)(v6 + 7072));
  sub_20F12C0C4(v7 + 1712, (uint64_t *)(v6 + 8), v6 + 2704, *(_BYTE *)(v6 + 7188), v2, v7 + 23336);
  sub_20E86B4E8((uint64_t)v270, v6 + 2704);
  v285 = 0;
  v286 = 0;
  v282 = 0;
  sub_20F12C0C4(v7 + 12464, (uint64_t *)(v6 + 8), (uint64_t)v270, *(_BYTE *)(v6 + 7188), v2, v7 + 23336);
  if (v300 < 0)
    operator delete(__p);
  if (v297)
  {
    v298 = v297;
    operator delete(v297);
  }
  if (v296 < 0)
  {
    operator delete(v295);
    if ((v294 & 0x80000000) == 0)
    {
LABEL_28:
      if ((v292 & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_74;
    }
  }
  else if ((v294 & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v293);
  if ((v292 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v290 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_75;
  }
LABEL_74:
  operator delete(v291);
  if ((v290 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v288 & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_76;
  }
LABEL_75:
  operator delete(v289);
  if ((v288 & 0x80000000) == 0)
  {
LABEL_31:
    if ((v284 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_77;
  }
LABEL_76:
  operator delete(v287);
  if ((v284 & 0x80000000) == 0)
  {
LABEL_32:
    v28 = v280;
    if (!v280)
      goto LABEL_34;
    goto LABEL_33;
  }
LABEL_77:
  operator delete(v283);
  v28 = v280;
  if (v280)
  {
LABEL_33:
    v281 = v28;
    operator delete(v28);
  }
LABEL_34:
  if (v278)
  {
    v279 = v278;
    operator delete(v278);
  }
  if (v276)
  {
    v277 = v276;
    operator delete(v276);
  }
  if (v274)
  {
    v275 = v274;
    operator delete(v274);
  }
  if ((SHIBYTE(v273[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v272) & 0x80000000) == 0)
      goto LABEL_42;
LABEL_80:
    operator delete(*((void **)&v271 + 1));
    v29 = *(void **)&v270[32];
    if (!*(_QWORD *)&v270[32])
      goto LABEL_44;
    goto LABEL_43;
  }
  operator delete(v273[0]);
  if (SHIBYTE(v272) < 0)
    goto LABEL_80;
LABEL_42:
  v29 = *(void **)&v270[32];
  if (*(_QWORD *)&v270[32])
  {
LABEL_43:
    *(_QWORD *)&v270[40] = v29;
    operator delete(v29);
  }
LABEL_44:
  *(_OWORD *)(v7 + 23216) = 0u;
  if (*(_BYTE *)*v4 && *(_BYTE *)(v6 + 7186))
  {
    v30 = atomic_load((unsigned __int8 *)&qword_254A6DA78);
    if ((v30 & 1) != 0)
    {
      v31 = qword_254A6DA60;
    }
    else if (__cxa_guard_acquire(&qword_254A6DA78))
    {
      sub_20FDBEA28(qword_254A6DA60);
      v31 = qword_254A6DA60;
      __cxa_atexit((void (*)(void *))sub_20FDBEE1C, qword_254A6DA60, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DA78);
    }
    else
    {
      v31 = qword_254A6DA60;
    }
  }
  else
  {
    v31 = 0;
  }
  v32 = *(char *)(*v4 + 31);
  if (v32 >= 0)
    v33 = (const void *)(*v4 + 8);
  else
    v33 = *(const void **)(*v4 + 8);
  if (v32 >= 0)
    v34 = *(unsigned __int8 *)(*v4 + 31);
  else
    v34 = *(_QWORD *)(*v4 + 16);
  v35 = *(_QWORD *)(*v4 + 64);
  *(_QWORD *)&v258 = *(_QWORD *)(*v4 + 56);
  *((_QWORD *)&v258 + 1) = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  *(_OWORD *)(v7 + 23232) = *(_OWORD *)(v6 + 6896);
  *(_OWORD *)(v7 + 23248) = 0u;
  *(_OWORD *)(v7 + 23264) = 0u;
  *(_DWORD *)(v7 + 23280) = 1065353216;
  *(_QWORD *)(v7 + 23288) = v31;
  v38 = (void *)(v7 + 23296);
  if (v34 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v34 >= 0x17)
  {
    v39 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v39 = v34 | 7;
    v40 = v39 + 1;
    v38 = operator new(v39 + 1);
    *(_QWORD *)(*(_QWORD *)v253 + 23296) = v38;
    *(_QWORD *)(*(_QWORD *)v253 + 23312) = v40 | 0x8000000000000000;
    *(_QWORD *)(*(_QWORD *)v253 + 23304) = v34;
  }
  else
  {
    *(_BYTE *)(v7 + 23319) = v34;
    if (!v34)
      goto LABEL_66;
  }
  memmove(v38, v33, v34);
LABEL_66:
  *((_BYTE *)v38 + v34) = 0;
  *(_OWORD *)(v247 + 23176) = v258;
  v258 = 0uLL;
  *(_QWORD *)(*(_QWORD *)v253 + 23352) = 0;
  *(_QWORD *)(*(_QWORD *)v253 + 23344) = 0;
  *(_QWORD *)(*(_QWORD *)v253 + 23336) = *(_QWORD *)v253 + 23344;
  *(_QWORD *)(*(_QWORD *)v253 + 168) = v6;
  sub_20F050130(*(_QWORD **)v253, (*(_DWORD *)(v6 + 3216) + 2));
  v41 = *(_BYTE **)(*(_QWORD *)v253 + 168);
  if (v41[6664] && !v41[2448])
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 533, (uint64_t)"(!this_->config().adaptive_vio_logic_config.enable_adaptive_vio || this_->config().is_visual_slam_enabled)", 106, (uint64_t)"Adaptive VIO can only run for Moving SLAM", 41, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_422;
    }
    v41 = *(_BYTE **)(*(_QWORD *)v253 + 168);
    if (v41[2448])
      goto LABEL_84;
  }
  else if (v41[2448])
  {
    goto LABEL_84;
  }
  if (v41[3176])
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 538, (uint64_t)"this_->config().is_visual_slam_enabled || !this_->config() .vfusion_config.initialization_config .correct_gravity_direction_using_stationary_init", 145, (uint64_t)"Gravity correction must not be used in VIO", 42, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_422;
    }
    v41 = *(_BYTE **)(*(_QWORD *)v253 + 168);
  }
LABEL_84:
  if (!v41[3739]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 541, (uint64_t)"this_->config().vfusion_config.navigation_config.pose_tracker_config.use_IMU", 76, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_422:
    abort();
  }
  *(_QWORD *)(*(_QWORD *)v253 + 6664) = v246;
  v42 = *(_QWORD *)(*(_QWORD *)v253 + 6576);
  if (v42)
    *(_QWORD *)(v42 + 12448) = v246;
  v43 = *(_QWORD *)(*(_QWORD *)v253 + 6560);
  if (v43)
    *(_QWORD *)(v43 + 2552) = v246;
  v44 = *(_QWORD *)(*(_QWORD *)v253 + 168);
  if (!*(_BYTE *)(v44 + 2448))
    goto LABEL_120;
  v45 = operator new();
  v46 = *(_OWORD *)(v44 + 6680);
  *(_OWORD *)v45 = *(_OWORD *)(v44 + 6664);
  *(_OWORD *)(v45 + 16) = v46;
  *(_QWORD *)(v45 + 32) = 0;
  *(_DWORD *)(v45 + 40) = -1;
  *(_BYTE *)(v45 + 44) = 0;
  *(_DWORD *)(v45 + 48) = 0;
  *(_DWORD *)(v45 + 56) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v45 + 64) = _Q0;
  *(_QWORD *)(v45 + 96) = 0;
  *(_QWORD *)(v45 + 104) = 0;
  *(_QWORD *)(v45 + 80) = 0xBFF0000000000000;
  *(_QWORD *)(v45 + 88) = 0;
  *(_OWORD *)(v45 + 112) = _Q0;
  *(_BYTE *)(v45 + 128) = *(_BYTE *)(v44 + 6688);
  *(_QWORD *)(v45 + 160) = 0;
  v51 = *(_QWORD *)(*(_QWORD *)v253 + 168);
  v52 = *(_QWORD *)(v51 + 2440);
  *(_QWORD *)(v51 + 2440) = v45;
  if (v52)
  {
    v53 = *(_QWORD **)(v52 + 160);
    if (v53 == (_QWORD *)(v52 + 136))
    {
      v54 = 4;
      v53 = (_QWORD *)(v52 + 136);
    }
    else
    {
      if (!v53)
      {
LABEL_97:
        MEMORY[0x212BC6398](v52, 0x1020C4027D33E7ELL);
        goto LABEL_98;
      }
      v54 = 5;
    }
    (*(void (**)(void))(*v53 + 8 * v54))();
    goto LABEL_97;
  }
LABEL_98:
  v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v253 + 168) + 2440);
  v56 = &off_24C9F81E0;
  *(_QWORD *)v270 = &off_24C9F81E0;
  *(_QWORD *)&v270[8] = *(_QWORD *)v253;
  *(_QWORD *)&v270[24] = v270;
  v59 = *(_QWORD **)(v55 + 160);
  v58 = (_QWORD *)(v55 + 160);
  v57 = v59;
  v60 = v58 - 3;
  *v58 = 0;
  if (v59 == v58 - 3)
  {
    (*(void (**)(_QWORD *))(*v60 + 32))(v58 - 3);
    v61 = *(_BYTE **)&v270[24];
    if (!*(_QWORD *)&v270[24])
    {
LABEL_105:
      *v58 = 0;
      v62 = v246;
      goto LABEL_108;
    }
  }
  else
  {
    if (!v57)
      goto LABEL_107;
    (*(void (**)(_QWORD *))(*v57 + 40))(v57);
    v61 = *(_BYTE **)&v270[24];
    if (!*(_QWORD *)&v270[24])
      goto LABEL_105;
  }
  if (v61 != v270)
  {
    *v58 = v61;
    v58 = &v270[24];
    goto LABEL_105;
  }
  v56 = *(uint64_t (***)())v270;
LABEL_107:
  *v58 = v60;
  ((void (*)(_BYTE *, _QWORD *))v56[3])(v270, v58 - 3);
  v62 = v246;
LABEL_108:
  v63 = *(_QWORD **)&v270[24];
  if (*(_BYTE **)&v270[24] == v270)
  {
    v64 = 4;
    v63 = v270;
  }
  else
  {
    if (!*(_QWORD *)&v270[24])
      goto LABEL_113;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_113:
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)v253 + 17312) + 2544) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v253 + 168)
                                                                                               + 2440)
                                                                                   + 128) | 0x100;
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)v253 + 6560) + 2544) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v253 + 168)
                                                                                              + 2440)
                                                                                  + 128) | 0x100;
  *(_QWORD *)(*(_QWORD *)v253 + 17416) = v62;
  v65 = *(_QWORD *)(*(_QWORD *)v253 + 17328);
  if (v65)
    *(_QWORD *)(v65 + 12448) = v62;
  v66 = *(_QWORD *)(*(_QWORD *)v253 + 17312);
  if (v66)
    *(_QWORD *)(v66 + 2552) = v62;
  v44 = *(_QWORD *)(*(_QWORD *)v253 + 168);
  if (!*(_BYTE *)(v44 + 2448))
    goto LABEL_120;
  v67 = *(_QWORD *)(v44 + 2440);
  if (!v67)
    sub_20E866B34();
  v68 = *(unsigned __int8 *)(v67 + 128);
  v69 = *(_QWORD *)v253 + 12464;
  if (v68 == 2)
LABEL_120:
    v69 = *(_QWORD *)v253 + 1712;
  *(_QWORD *)(*(_QWORD *)v253 + 23216) = v69;
  v70 = operator new();
  sub_20F403984(v70, (__int128 *)(v44 + 6456));
  *(_QWORD *)v270 = 0;
  v71 = *(_QWORD **)v247;
  *(_QWORD *)v247 = v70;
  if (v71)
  {
    sub_20F04BCC8(v247, v71);
    v72 = *(_QWORD **)v270;
    *(_QWORD *)v270 = 0;
    if (v72)
      sub_20F04BCC8((uint64_t)v270, v72);
  }
  v73 = *(_QWORD *)(*(_QWORD *)v253 + 168);
  v74 = operator new();
  sub_20F40458C(v74, (__int128 *)(v73 + 6456));
  v75 = (_QWORD *)*v243;
  *v243 = v74;
  if (v75)
  {
    v76 = v75[23];
    v75[23] = 0;
    if (v76)
    {
      v77 = *(void **)(v76 + 32);
      if (v77)
      {
        *(_QWORD *)(v76 + 40) = v77;
        operator delete(v77);
      }
      MEMORY[0x212BC6398](v76, 0x1010C409BE32CFALL);
    }
    v78 = (void *)v75[9];
    if (v78)
    {
      v75[10] = v78;
      operator delete(v78);
    }
    v79 = (void *)v75[6];
    if (v79)
    {
      v75[7] = v79;
      operator delete(v79);
    }
    MEMORY[0x212BC6398](v75, 0x10B0C40D335D76ALL);
  }
  v80 = *(_QWORD *)(*(_QWORD *)v253 + 168);
  v81 = operator new();
  sub_20F406560(v81, (__int128 *)(v80 + 6456));
  v82 = *(_QWORD *)(*(_QWORD *)v253 + 160);
  *(_QWORD *)(*(_QWORD *)v253 + 160) = v81;
  if (v82)
    sub_20F04BE04(v82);
  v268[0] = &off_24C9F7FC0;
  v268[1] = *(_QWORD *)v253;
  v269 = v268;
  *(_QWORD *)v270 = &off_24C9F7FC0;
  v83 = (_BYTE *)(v81 + 880);
  v84 = v270;
  *(_QWORD *)&v270[24] = v270;
  *(_QWORD *)&v270[8] = *(_QWORD *)v253;
  if ((_BYTE *)(v81 + 880) == v270)
  {
    v85 = 4;
    goto LABEL_144;
  }
  v84 = *(_BYTE **)(v81 + 904);
  if (v84 == v83)
  {
    v301 = &off_24C9F7FC0;
    v302 = *(uint64_t **)v253;
    *(_QWORD *)&v270[24] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v83 + 24))(v81 + 880, v270);
    (*(void (**)(_QWORD))(**(_QWORD **)(v81 + 904) + 32))(*(_QWORD *)(v81 + 904));
    *(_QWORD *)(v81 + 904) = 0;
    *(_QWORD *)&v270[24] = v270;
    ((void (*)(uint64_t, _QWORD *))v301[3])((uint64_t)&v301, (_QWORD *)(v81 + 880));
    ((void (*)(uint64_t (***)()))v301[4])(&v301);
    *(_QWORD *)(v81 + 904) = v83;
    v84 = *(_BYTE **)&v270[24];
    if (*(_BYTE **)&v270[24] != v270)
      goto LABEL_139;
LABEL_143:
    v85 = 4;
    v84 = v270;
    goto LABEL_144;
  }
  *(_QWORD *)(v81 + 880) = &off_24C9F7FC0;
  *(_QWORD *)(v81 + 888) = *(_QWORD *)v253;
  *(_QWORD *)&v270[24] = v84;
  *(_QWORD *)(v81 + 904) = v83;
  if (v84 == v270)
    goto LABEL_143;
LABEL_139:
  if (!v84)
    goto LABEL_145;
  v85 = 5;
LABEL_144:
  (*(void (**)(void))(*(_QWORD *)v84 + 8 * v85))();
LABEL_145:
  v86 = v269;
  if (v269 == v268)
  {
    v87 = 4;
    v86 = v268;
  }
  else
  {
    if (!v269)
      goto LABEL_150;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_150:
  v88 = *(_QWORD *)(*(_QWORD *)v253 + 168);
  if (*(char *)(v88 + 5167) < 0)
  {
    if (!*(_QWORD *)(v88 + 5152))
      goto LABEL_169;
  }
  else if (!*(_BYTE *)(v88 + 5167))
  {
    goto LABEL_169;
  }
  *(_QWORD *)v270 = 0x80000000CLL;
  memset(&v270[8], 0, 32);
  *(_DWORD *)&v270[40] = 1065353216;
  v271 = 0u;
  v272 = 0u;
  memset(v273, 0, 28);
  sub_20F7F82A8(v88 + 5144, (int *)v270);
  v89 = sub_20FDBE57C((_QWORD *)(v247 + 256), (uint64_t)v270);
  v90 = v273[2];
  v273[2] = 0;
  if (v90)
    (*(void (**)(void *, double))(*(_QWORD *)v90 + 8))(v90, v89);
  if (*((_QWORD *)&v272 + 1))
  {
    v273[0] = *((void **)&v272 + 1);
    operator delete(*((void **)&v272 + 1));
  }
  v91 = v271;
  if ((_QWORD)v271)
  {
    v92 = *((_QWORD *)&v271 + 1);
    v93 = (void *)v271;
    if (*((_QWORD *)&v271 + 1) != (_QWORD)v271)
    {
      do
      {
        if (*(char *)(v92 - 1) < 0)
          operator delete(*(void **)(v92 - 24));
        v92 -= 24;
      }
      while (v92 != v91);
      v93 = (void *)v271;
    }
    *((_QWORD *)&v271 + 1) = v91;
    operator delete(v93);
  }
  v94 = *(void ***)&v270[24];
  if (*(_QWORD *)&v270[24])
  {
    do
    {
      v104 = (void **)*v94;
      if (*((char *)v94 + 39) < 0)
        operator delete(v94[2]);
      operator delete(v94);
      v94 = v104;
    }
    while (v104);
  }
  v95 = *(void **)&v270[8];
  *(_QWORD *)&v270[8] = 0;
  if (v95)
    operator delete(v95);
LABEL_169:
  if (*(_BYTE *)*v4)
  {
    v96 = (std::__shared_weak_count *)v4[1];
    v256 = *v4;
    v257 = v96;
    if (v96)
    {
      v97 = (unint64_t *)&v96->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    v99 = atomic_load((unsigned __int8 *)&qword_254A6DA78);
    if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DA78))
    {
      sub_20FDBEA28(qword_254A6DA60);
      __cxa_atexit((void (*)(void *))sub_20FDBEE1C, qword_254A6DA60, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DA78);
    }
    *(_DWORD *)v270 = 600;
    if (v257)
    {
      v100 = &v257->__shared_owners_;
      do
        v101 = __ldxr((unint64_t *)v100);
      while (__stxr(v101 + 1, (unint64_t *)v100));
      *(_QWORD *)&v270[8] = v256;
      *(_QWORD *)&v270[16] = v257;
      do
        v102 = __ldxr((unint64_t *)v100);
      while (__stxr(v102 + 1, (unint64_t *)v100));
      *(_QWORD *)&v270[24] = qword_254A6DA60;
      do
        v103 = __ldaxr((unint64_t *)v100);
      while (__stlxr(v103 - 1, (unint64_t *)v100));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
        std::__shared_weak_count::__release_weak(v257);
      }
    }
    else
    {
      *(_QWORD *)&v270[8] = v256;
      *(_QWORD *)&v270[16] = 0;
      *(_QWORD *)&v270[24] = qword_254A6DA60;
    }
    *(_OWORD *)&v270[32] = 0u;
    v271 = 0u;
    LODWORD(v272) = 1065353216;
    DWORD2(v272) = 0;
    sub_20FDBE430(v246, (uint64_t)v270);
    v105 = (void **)v271;
    if ((_QWORD)v271)
    {
      do
      {
        v118 = (void **)*v105;
        if (*((char *)v105 + 39) < 0)
          operator delete(v105[2]);
        operator delete(v105);
        v105 = v118;
      }
      while (v118);
    }
    v106 = *(void **)&v270[32];
    *(_QWORD *)&v270[32] = 0;
    if (v106)
      operator delete(v106);
    v107 = *(std::__shared_weak_count **)&v270[16];
    if (*(_QWORD *)&v270[16])
    {
      v108 = (unint64_t *)(*(_QWORD *)&v270[16] + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    if (v257)
    {
      v110 = &v257->__shared_owners_;
      do
        v111 = __ldaxr((unint64_t *)v110);
      while (__stlxr(v111 - 1, (unint64_t *)v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
        std::__shared_weak_count::__release_weak(v257);
      }
    }
  }
  v112 = *(uint64_t **)v253;
  v113 = *(_QWORD *)(*(_QWORD *)v253 + 168);
  v114 = operator new();
  sub_20F10BDF4(v114, (__int128 *)(v113 + 2600));
  v115 = *v245;
  *v245 = v114;
  if (v115)
  {
    v116 = *(_QWORD **)(v115 + 264);
    if (v116 == (_QWORD *)(v115 + 240))
    {
      v117 = 4;
      v116 = (_QWORD *)(v115 + 240);
    }
    else
    {
      if (!v116)
      {
LABEL_209:
        MEMORY[0x212BC6398](v115, 0x1020C40690644D0);
        v114 = *v245;
        goto LABEL_210;
      }
      v117 = 5;
    }
    (*(void (**)(void))(*v116 + 8 * v117))();
    goto LABEL_209;
  }
LABEL_210:
  *(_BYTE *)(v114 + 272) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v253 + 168) + 2450);
  v266[0] = &off_24C9F8050;
  v266[1] = *(_QWORD *)v253;
  v267 = v266;
  *(_QWORD *)&v270[24] = v270;
  *(_QWORD *)v270 = &off_24C9F8050;
  *(_QWORD *)&v270[8] = *(_QWORD *)v253;
  sub_20F10ECA0(v270, (_QWORD *)(v114 + 240));
  v119 = *(_QWORD **)&v270[24];
  if (*(_BYTE **)&v270[24] == v270)
  {
    v120 = 4;
    v119 = v270;
  }
  else
  {
    if (!*(_QWORD *)&v270[24])
      goto LABEL_215;
    v120 = 5;
  }
  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_215:
  v121 = v267;
  if (v267 == v266)
  {
    v122 = 4;
    v121 = v266;
  }
  else
  {
    if (!v267)
      goto LABEL_220;
    v122 = 5;
  }
  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_220:
  v123 = *(_QWORD *)(*(_QWORD *)v253 + 168);
  v124 = operator new();
  sub_20F10BDF4(v124, (__int128 *)(v123 + 2600));
  v125 = *v244;
  *v244 = v124;
  if (!v125)
    goto LABEL_227;
  v126 = *(_QWORD **)(v125 + 264);
  if (v126 == (_QWORD *)(v125 + 240))
  {
    v127 = 4;
    v126 = (_QWORD *)(v125 + 240);
    goto LABEL_225;
  }
  if (v126)
  {
    v127 = 5;
LABEL_225:
    (*(void (**)(void))(*v126 + 8 * v127))();
  }
  MEMORY[0x212BC6398](v125, 0x1020C40690644D0);
  v124 = *v244;
LABEL_227:
  *(_BYTE *)(v124 + 272) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v253 + 168) + 2450);
  *(_BYTE *)(v124 + 195) = 1;
  v264[0] = &off_24C9F80E0;
  v264[1] = *(_QWORD *)v253;
  v265 = v264;
  *(_QWORD *)&v270[24] = v270;
  *(_QWORD *)v270 = &off_24C9F80E0;
  *(_QWORD *)&v270[8] = *(_QWORD *)v253;
  sub_20F10ECA0(v270, (_QWORD *)(v124 + 240));
  v128 = *(_QWORD **)&v270[24];
  if (*(_BYTE **)&v270[24] == v270)
  {
    v129 = 4;
    v128 = v270;
  }
  else
  {
    if (!*(_QWORD *)&v270[24])
      goto LABEL_232;
    v129 = 5;
  }
  (*(void (**)(void))(*v128 + 8 * v129))();
LABEL_232:
  v130 = v265;
  if (v265 == v264)
  {
    v131 = 4;
    v130 = v264;
  }
  else
  {
    if (!v265)
      goto LABEL_237;
    v131 = 5;
  }
  (*(void (**)(void))(*v130 + 8 * v131))();
LABEL_237:
  v132 = *(_QWORD *)(*(_QWORD *)v253 + 6992);
  v133 = *(_QWORD *)(*(_QWORD *)v253 + 7000);
  if (v132 == v133)
  {
    v136 = 0;
  }
  else
  {
    v134 = v132 + 32;
    do
    {
      v135 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v134 - 16) - *(_QWORD *)(v134 - 24)) >> 7);
      v136 = v135 > 1;
      _ZF = v135 > 1 || v134 == v133;
      v134 += 32;
    }
    while (!_ZF);
  }
  v138 = *(_QWORD *)(*(_QWORD *)v253 + 168);
  v139 = operator new();
  sub_20F0CE434(v139, v138 + 6912, v136);
  v140 = (_QWORD *)*v242;
  *v242 = v139;
  if (v140)
  {
    v141 = (void *)v140[77];
    if (v141)
    {
      v140[78] = v141;
      operator delete(v141);
    }
    v142 = (void *)v140[34];
    if (v142)
    {
      v140[35] = v142;
      operator delete(v142);
    }
    v143 = (void *)v140[28];
    if (v143)
    {
      v140[29] = v143;
      operator delete(v143);
    }
    MEMORY[0x212BC6398](v140, 0x1020C4091E15263);
  }
  v144 = *(_QWORD *)(*(_QWORD *)v253 + 168);
  if (*(_BYTE *)(v144 + 2448))
  {
    v145 = operator new();
    *(_QWORD *)v145 = 0xFFFFFFFFLL;
    *(_BYTE *)(v145 + 8) = 0;
    *(_BYTE *)(v145 + 136) = 0;
    *(_OWORD *)(v145 + 144) = *(_OWORD *)(v144 + 7056);
    v146 = *(_QWORD *)(*(_QWORD *)v253 + 128);
    *(_QWORD *)(*(_QWORD *)v253 + 128) = v145;
    if (v146)
      MEMORY[0x212BC6398](v146, 0x1000C40C5DEEC0BLL);
  }
  v147 = *(_QWORD *)(*(_QWORD *)v253 + 168);
  v148 = operator new();
  v149 = *(_QWORD *)(v147 + 2464);
  *(_OWORD *)(v148 + 16) = 0u;
  *(_OWORD *)(v148 + 32) = 0u;
  *(_OWORD *)v148 = 0u;
  *(_QWORD *)(v148 + 48) = v149;
  v150 = *v241;
  *v241 = v148;
  if (v150)
  {
    v151 = *(void **)(v150 + 24);
    if (v151)
    {
      *(_QWORD *)(v150 + 32) = v151;
      operator delete(v151);
    }
    v152 = *(void **)v150;
    if (*(_QWORD *)v150)
    {
      *(_QWORD *)(v150 + 8) = v152;
      operator delete(v152);
    }
    MEMORY[0x212BC6398](v150, 0x10A0C40906386E4);
  }
  v153 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v253 + 168) + 3216);
  v154 = *(_QWORD *)(*(_QWORD *)v253 + 1256);
  v155 = *(_QWORD *)(*(_QWORD *)v253 + 1248);
  if (0xEF7BDEF7BDEF7BDFLL * ((v154 - v155) >> 4) == v153)
  {
LABEL_305:
    v189 = *(_QWORD *)(*(_QWORD *)v253 + 168);
    v190 = *(_DWORD *)(v189 + 6696);
    if (v190 == 1)
      goto LABEL_409;
    goto LABEL_306;
  }
  if (!v153)
  {
    if (v154 != v155)
    {
      v185 = v154 - 352;
      do
      {
        if (*(_BYTE *)(v185 + 336))
        {
          v187 = *(void **)(v185 + 24);
          if (v187)
          {
            *(_QWORD *)(v185 + 32) = v187;
            operator delete(v187);
          }
        }
        v188 = *(void **)v185;
        if (*(_QWORD *)v185)
        {
          *(_QWORD *)(v185 + 8) = v188;
          operator delete(v188);
        }
        v186 = v185 - 144;
        v185 -= 496;
      }
      while (v186 != v155);
    }
    *(_QWORD *)(*(_QWORD *)v253 + 1256) = v155;
    *(_QWORD *)(*(_QWORD *)v253 + 1272) = 0;
    *(_QWORD *)(*(_QWORD *)v253 + 1288) = 0;
    *(_QWORD *)(*(_QWORD *)v253 + 1280) = 0;
    goto LABEL_305;
  }
  memset(v270, 0, 24);
  sub_20F050BCC((void **)v270, v153);
  v156 = 0;
  v157 = *(_QWORD *)(*(_QWORD *)v253 + 1288);
  if (v157 >= v153)
    v158 = v153;
  else
    v158 = *(_QWORD *)(*(_QWORD *)v253 + 1288);
  v251 = v158;
  v159 = *(_QWORD *)v270;
  v160 = v157 == 0;
  v248 = *(_QWORD *)v270;
  while (v160)
  {
    if (v157 <= v153)
      goto LABEL_287;
LABEL_276:
    v162 = *(_QWORD *)(*(_QWORD *)v253 + 1248);
    v163 = (v156 + *(_QWORD *)(*(_QWORD *)v253 + 1272))
         % (0xEF7BDEF7BDEF7BDFLL * ((*(_QWORD *)(*(_QWORD *)v253 + 1256) - v162) >> 4));
    v164 = v162 + 496 * v163;
    v165 = *(_OWORD *)(v164 + 64);
    v167 = *(_OWORD *)(v164 + 16);
    v166 = *(_OWORD *)(v164 + 32);
    *(_OWORD *)(v159 + 48) = *(_OWORD *)(v164 + 48);
    *(_OWORD *)(v159 + 64) = v165;
    *(_OWORD *)(v159 + 16) = v167;
    *(_OWORD *)(v159 + 32) = v166;
    v168 = *(_OWORD *)(v164 + 128);
    v170 = *(_OWORD *)(v164 + 80);
    v169 = *(_OWORD *)(v164 + 96);
    *(_OWORD *)(v159 + 112) = *(_OWORD *)(v164 + 112);
    *(_OWORD *)(v159 + 128) = v168;
    *(_OWORD *)(v159 + 80) = v170;
    *(_OWORD *)(v159 + 96) = v169;
    *(_OWORD *)v159 = *(_OWORD *)v164;
    v171 = *(void **)(v159 + 144);
    if (v171)
    {
      *(_QWORD *)(v159 + 152) = v171;
      operator delete(v171);
      *(_QWORD *)(v159 + 144) = 0;
      *(_QWORD *)(v159 + 152) = 0;
      *(_QWORD *)(v159 + 160) = 0;
    }
    *(_OWORD *)(v159 + 144) = *(_OWORD *)(v164 + 144);
    v172 = v162 + 496 * v163;
    *(_QWORD *)(v159 + 160) = *(_QWORD *)(v172 + 160);
    *(_QWORD *)(v164 + 144) = 0;
    *(_QWORD *)(v164 + 152) = 0;
    *(_QWORD *)(v164 + 160) = 0;
    v173 = (void **)(v159 + 168);
    v174 = v172 + 168;
    if (*(unsigned __int8 *)(v159 + 480) == *(unsigned __int8 *)(v172 + 480))
    {
      if (*(_BYTE *)(v159 + 480))
      {
        v175 = *v173;
        if (*v173)
        {
          *(_QWORD *)(v159 + 176) = v175;
          operator delete(v175);
          *v173 = 0;
          *(_QWORD *)(v159 + 176) = 0;
          *(_QWORD *)(v159 + 184) = 0;
        }
        *(_OWORD *)(v159 + 168) = *(_OWORD *)v174;
        v176 = v162 + 496 * v163;
        *(_QWORD *)(v159 + 184) = *(_QWORD *)(v176 + 184);
        *(_QWORD *)v174 = 0;
        *(_QWORD *)(v174 + 8) = 0;
        *(_QWORD *)(v174 + 16) = 0;
        memcpy((void *)(v159 + 192), (const void *)(v176 + 192), 0x120uLL);
      }
    }
    else if (*(_BYTE *)(v159 + 480))
    {
      v177 = *v173;
      if (*v173)
      {
        *(_QWORD *)(v159 + 176) = v177;
        operator delete(v177);
      }
      *(_BYTE *)(v159 + 480) = 0;
    }
    else
    {
      *v173 = 0;
      *(_QWORD *)(v159 + 176) = 0;
      *(_QWORD *)(v159 + 184) = 0;
      *(_OWORD *)(v159 + 168) = *(_OWORD *)v174;
      v161 = v162 + 496 * v163;
      *(_QWORD *)(v159 + 184) = *(_QWORD *)(v161 + 184);
      *(_QWORD *)v174 = 0;
      *(_QWORD *)(v172 + 176) = 0;
      *(_QWORD *)(v172 + 184) = 0;
      memcpy((void *)(v159 + 192), (const void *)(v161 + 192), 0x120uLL);
      *(_BYTE *)(v159 + 480) = 1;
    }
    *(_BYTE *)(v159 + 488) = *(_BYTE *)(v162 + 496 * v163 + 488);
    v160 = ++v156 == *(_QWORD *)(*(_QWORD *)v253 + 1288);
    v159 += 496;
  }
  if (v157 <= v153 || v251 != v156)
    goto LABEL_276;
LABEL_287:
  v178 = *v240;
  v112 = *(uint64_t **)v253;
  if (*v240)
  {
    v179 = *(void **)(v250 + 736);
    v180 = *v240;
    if (v179 != v178)
    {
      v181 = (uint64_t)v179 - 352;
      do
      {
        if (*(_BYTE *)(v181 + 336))
        {
          v183 = *(void **)(v181 + 24);
          if (v183)
          {
            *(_QWORD *)(v181 + 32) = v183;
            operator delete(v183);
          }
        }
        v184 = *(void **)v181;
        if (*(_QWORD *)v181)
        {
          *(_QWORD *)(v181 + 8) = v184;
          operator delete(v184);
        }
        v182 = (void *)(v181 - 144);
        v181 -= 496;
      }
      while (v182 != v178);
      v180 = *v240;
    }
    *(_QWORD *)(v250 + 736) = v178;
    operator delete(v180);
    *v240 = 0;
    *(_QWORD *)(*(_QWORD *)v253 + 1256) = 0;
    *(_QWORD *)(*(_QWORD *)v253 + 1264) = 0;
  }
  *(_QWORD *)(*(_QWORD *)v253 + 1248) = v248;
  v227 = *(_QWORD *)&v270[8];
  *(_OWORD *)(v250 + 736) = *(_OWORD *)&v270[8];
  *(_QWORD *)(*(_QWORD *)v253 + 1288) = v251;
  *(_QWORD *)(*(_QWORD *)v253 + 1272) = 0;
  *(_QWORD *)(*(_QWORD *)v253 + 1280) = v251 % (0xEF7BDEF7BDEF7BDFLL * ((v227 - v248) >> 4));
  v189 = *(_QWORD *)(*(_QWORD *)v253 + 168);
  v190 = *(_DWORD *)(v189 + 6696);
  if (v190 != 1)
  {
LABEL_306:
    if (v190 == 2)
    {
      memset(v270, 0, 32);
      *(_DWORD *)&v270[32] = 1065353216;
      sub_20EA93AE4((uint64_t *)(v189 + 8), &v301);
      v191 = (uint64_t *)v301;
      if (v302 != (uint64_t *)v301)
      {
        v192 = 0;
        v193 = ((char *)v302 - (char *)v301) >> 2;
        do
        {
          if (*((_DWORD *)v191 + v192) == 2)
          {
            if (WORD1(v192))
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v254 = v192;
              v255 = 1;
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| v255 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
            }
            else
            {
              v254 = v192;
              v255 = 1;
            }
            v263 = &v254;
            sub_20F050F4C((uint64_t)v270, &v254, (_QWORD **)&v263)[3] = v192;
          }
          v194 = *(_QWORD *)(*(_QWORD *)v253 + 168);
          v196 = *(_QWORD *)(v194 + 8);
          v195 = *(_QWORD *)(v194 + 16);
          if (v196 != v195)
          {
            while (*(_DWORD *)v196 != (_DWORD)v192)
            {
              v196 += 1088;
              if (v196 == v195)
                goto LABEL_414;
            }
          }
          if (v196 == v195)
          {
LABEL_414:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Requested camera id not found.");
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
          }
          if (*(_BYTE *)(v196 + 1080))
          {
            v254 = v192;
            v255 = 0;
            if (v192 >= 0x10000
              && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| v255 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)))
            {
              abort();
            }
            v263 = &v254;
            sub_20F050F4C((uint64_t)v270, &v254, (_QWORD **)&v263)[3] = *(_QWORD *)(v196 + 1072);
          }
          ++v192;
        }
        while (v192 != v193);
      }
      v112 = *(uint64_t **)v253;
      v197 = *(_QWORD *)(*(_QWORD *)v253 + 168);
      v198 = operator new();
      sub_20F11EF38(v198, (__int128 *)(v197 + 6696), (uint64_t)v270);
      v199 = *(_QWORD *)(*(_QWORD *)v253 + 23224);
      *(_QWORD *)(*(_QWORD *)v253 + 23224) = v198;
      if (v199)
        (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
      if (v191)
        operator delete(v191);
      v200 = *(_QWORD **)&v270[16];
      if (*(_QWORD *)&v270[16])
      {
        do
        {
          v201 = (_QWORD *)*v200;
          operator delete(v200);
          v200 = v201;
        }
        while (v201);
      }
      v202 = *(void **)v270;
      *(_QWORD *)v270 = 0;
      if (v202)
        operator delete(v202);
    }
    if (v112[2903])
      goto LABEL_339;
    return v112;
  }
LABEL_409:
  v228 = operator new();
  *(_QWORD *)v228 = &off_24C9F67E0;
  *(_OWORD *)(v228 + 8) = *(_OWORD *)(v189 + 6696);
  v229 = *(_OWORD *)(v189 + 6712);
  v230 = *(_OWORD *)(v189 + 6728);
  v231 = *(_OWORD *)(v189 + 6744);
  *(_OWORD *)(v228 + 72) = *(_OWORD *)(v189 + 6760);
  *(_OWORD *)(v228 + 56) = v231;
  *(_OWORD *)(v228 + 40) = v230;
  *(_OWORD *)(v228 + 24) = v229;
  v232 = *(_OWORD *)(v189 + 6776);
  v233 = *(_OWORD *)(v189 + 6792);
  v234 = *(_OWORD *)(v189 + 6808);
  *(_OWORD *)(v228 + 136) = *(_OWORD *)(v189 + 6824);
  *(_OWORD *)(v228 + 120) = v234;
  *(_OWORD *)(v228 + 104) = v233;
  *(_OWORD *)(v228 + 88) = v232;
  v235 = *(_OWORD *)(v189 + 6840);
  v236 = *(_OWORD *)(v189 + 6856);
  v237 = *(_OWORD *)(v189 + 6872);
  *(_QWORD *)(v228 + 200) = *(_QWORD *)(v189 + 6888);
  *(_OWORD *)(v228 + 184) = v237;
  *(_OWORD *)(v228 + 168) = v236;
  *(_OWORD *)(v228 + 152) = v235;
  *(_OWORD *)(v228 + 208) = 0u;
  *(_OWORD *)(v228 + 224) = 0u;
  *(_DWORD *)(v228 + 240) = 1065353216;
  *(_OWORD *)(v228 + 248) = 0u;
  *(_OWORD *)(v228 + 264) = 0u;
  *(_DWORD *)(v228 + 280) = 1065353216;
  *(_OWORD *)(v228 + 288) = 0u;
  *(_OWORD *)(v228 + 304) = 0u;
  *(_DWORD *)(v228 + 320) = 1065353216;
  *(_QWORD *)(v228 + 328) = 0;
  v238 = v112[2903];
  v112[2903] = v228;
  if (v238)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v238 + 8))(v238);
    if (!v112[2903])
      return v112;
  }
LABEL_339:
  sub_20EA93AE4((uint64_t *)(v112[21] + 8), v270);
  v203 = *(void **)&v270[8];
  if (*(_QWORD *)&v270[8] != *(_QWORD *)v270)
  {
    v204 = 0;
    v249 = (uint64_t)(*(_QWORD *)&v270[8] - *(_QWORD *)v270) >> 2;
    do
    {
      v252 = *(unsigned int *)(*(_QWORD *)v270 + 4 * v204);
      if ((_DWORD)v252)
      {
        for (i = 0; i != v252; ++i)
        {
          v206 = v112[2903];
          v207 = i;
          v301 = (uint64_t (**)())__PAIR64__(i, v204);
          if (v204 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v208 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v208 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v210 = qword_254A6DE40;
              v209 = qword_254A6DE48;
              while (v210 != v209)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v210)(*(_QWORD *)(v210 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
                v210 += 16;
              }
            }
            v211 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v211 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v112 = *(uint64_t **)v253;
            if (!byte_254A6DE68)
LABEL_412:
              abort();
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            v207 = HIDWORD(v301);
          }
          if (v207 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v212 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v212 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v214 = qword_254A6DE40;
              v213 = qword_254A6DE48;
              while (v214 != v213)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v214)(*(_QWORD *)(v214 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                v214 += 16;
              }
            }
            v215 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v215 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            v112 = *(uint64_t **)v253;
            if (!byte_254A6DE68)
              goto LABEL_412;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          (*(void (**)(uint64_t, uint64_t (***)(), uint64_t, double))(*(_QWORD *)v206 + 16))(v206, &v301, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v253 + 23216) + 4824) + 32 * v204 + 8)+ 1664 * i, 0.0);
          v263 = (int *)__PAIR64__(i, v204);
          v216 = i;
          if (v204 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v217 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v217 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v218 = qword_254A6DE40;
              v219 = qword_254A6DE48;
              while (v218 != v219)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v218)(*(_QWORD *)(v218 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
                v218 += 16;
              }
            }
            v220 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v220 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
LABEL_413:
              abort();
            qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            v216 = HIDWORD(v263);
          }
          if (v216 >= 0x10000)
          {
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
            v221 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v221 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v222 = qword_254A6DE40;
              v223 = qword_254A6DE48;
              while (v222 != v223)
              {
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v222)(*(_QWORD *)(v222 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
                v222 += 16;
              }
            }
            v224 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v224 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68)
              goto LABEL_413;
            qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
          }
          v301 = (uint64_t (**)())&v263;
          v225 = sub_20EFE3558((float *)(*(_QWORD *)v253 + 23248), (int *)&v263, (uint64_t)&unk_2102DB95C, (uint64_t **)&v301);
          v225[3] = 0;
          v225[4] = 0;
          *((_DWORD *)v225 + 10) = 0;
        }
      }
      ++v204;
    }
    while (v204 != v249);
    v203 = *(void **)v270;
  }
  if (v203)
    operator delete(v203);
  return v112;
}

void sub_20F02BF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, uint64_t *a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t *a21,_QWORD *a22,_QWORD *a23,uint64_t a24,uint64_t *a25,uint64_t *a26,uint64_t a27,_QWORD *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p)
{
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;

  __cxa_guard_abort(&qword_254A6DA78);
  v60 = *(_QWORD *)(a34 + 23224);
  *(_QWORD *)(a34 + 23224) = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  sub_20F12BBD0(a18);
  sub_20F12BBD0(a20);
  sub_20F16D364(a15);
  sub_20EE5EE28((_QWORD *)(a34 + 1440));
  v61 = *a16;
  *a16 = 0;
  if (v61)
    (*(void (**)(void))(a34 + 1432))();
  sub_20F05009C(a17);
  sub_20F04FFC4(a35);
  sub_20F02C6CC(a19);
  sub_20E8C25A8(a10);
  sub_20F02C5C4(a21);
  sub_20F02C75C(a11);
  sub_20F02C84C(a12);
  sub_20E86665C((uint64_t)(a28 + 50));
  sub_20F02C8DC(a27);
  v62 = (void *)a28[18];
  if (v62)
  {
    *(_QWORD *)(a34 + 296) = v62;
    operator delete(v62);
    v63 = *(_QWORD *)(a34 + 160);
    *(_QWORD *)(a34 + 160) = 0;
    if (!v63)
    {
LABEL_7:
      sub_20F04BD64(a23);
      v64 = (_QWORD *)*a28;
      *a28 = 0;
      if (v64)
      {
        sub_20F04BCC8((uint64_t)a28, v64);
        sub_20F02C4DC(a25);
        v65 = *(_QWORD *)(a34 + 128);
        *(_QWORD *)(a34 + 128) = 0;
        if (!v65)
        {
LABEL_10:
          sub_20F02C550(a22);
          sub_20F02C4DC(a26);
          sub_20F02C9A8((void **)a34);
          _Unwind_Resume(a1);
        }
      }
      else
      {
        sub_20F02C4DC(a25);
        v65 = *(_QWORD *)(a34 + 128);
        *(_QWORD *)(a34 + 128) = 0;
        if (!v65)
          goto LABEL_10;
      }
      MEMORY[0x212BC6398](v65, 0x1000C40C5DEEC0BLL);
      goto LABEL_10;
    }
  }
  else
  {
    v63 = *(_QWORD *)(a34 + 160);
    *(_QWORD *)(a34 + 160) = 0;
    if (!v63)
      goto LABEL_7;
  }
  sub_20F04BE04(v63);
}

_QWORD *sub_20F02C428(_QWORD *a1)
{
  void **v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v8;

  v2 = (void **)a1[6];
  if (v2)
  {
    do
    {
      v8 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v8;
    }
    while (v8);
  }
  v3 = (void *)a1[4];
  a1[4] = 0;
  if (v3)
    operator delete(v3);
  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t *sub_20F02C4DC(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 264);
    if (v3 == (_QWORD *)(v2 + 240))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 240);
    }
    else
    {
      if (!v3)
      {
LABEL_7:
        MEMORY[0x212BC6398](v2, 0x1020C40690644D0);
        return a1;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_7;
  }
  return a1;
}

_QWORD *sub_20F02C550(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[77];
    if (v3)
    {
      v2[78] = v3;
      operator delete(v3);
    }
    v4 = (void *)v2[34];
    if (v4)
    {
      v2[35] = v4;
      operator delete(v4);
    }
    v5 = (void *)v2[28];
    if (v5)
    {
      v2[29] = v5;
      operator delete(v5);
    }
    MEMORY[0x212BC6398](v2, 0x1020C4091E15263);
  }
  return a1;
}

uint64_t *sub_20F02C5C4(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 24);
    if (v3)
    {
      *(_QWORD *)(v2 + 32) = v3;
      operator delete(v3);
    }
    v4 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v4;
      operator delete(v4);
    }
    MEMORY[0x212BC6398](v2, 0x10A0C40906386E4);
  }
  return a1;
}

uint64_t sub_20F02C628(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_12:
    operator delete(*(void **)(a1 + 64));
    v5 = *(_QWORD **)(a1 + 32);
    if (!v5)
      goto LABEL_8;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 87) < 0)
    goto LABEL_12;
LABEL_6:
  v5 = *(_QWORD **)(a1 + 32);
  if (!v5)
    goto LABEL_8;
  do
  {
LABEL_7:
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_8:
  v7 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

void **sub_20F02C6CC(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (uint64_t)v3 - 352;
      do
      {
        if (*(_BYTE *)(v5 + 336))
        {
          v7 = *(void **)(v5 + 24);
          if (v7)
          {
            *(_QWORD *)(v5 + 32) = v7;
            operator delete(v7);
          }
        }
        v8 = *(void **)v5;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)(v5 + 8) = v8;
          operator delete(v8);
        }
        v6 = (void *)(v5 - 144);
        v5 -= 496;
      }
      while (v6 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20F02C75C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x212BC6398](v2, 0x20C40960023A9);
  }
  v6 = *(void **)(a1 + 112);
  if (v6)
  {
    *(_QWORD *)(a1 + 120) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v7)
    return a1;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return a1;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

uint64_t sub_20F02C84C(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(_BYTE *)(a1 + 296))
    sub_20F04BF8C(a1 + 104);
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  if (!*(_BYTE *)(a1 + 24))
    return a1;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t sub_20F02C8DC(uint64_t a1)
{
  void **v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v8;

  if (*(_BYTE *)(a1 + 200))
    sub_20F04BEB4((_QWORD *)(a1 + 88));
  if (!*(_BYTE *)(a1 + 80))
    return a1;
  v2 = *(void ***)(a1 + 48);
  if (v2)
  {
    do
    {
      v8 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v8;
    }
    while (v8);
  }
  v3 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void **sub_20F02C9A8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  sub_20EAFDF54((uint64_t)(a1 + 6));
  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_20F02CA48(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)*a1;
  if (*a1)
  {
    v4 = (_QWORD *)a1[1];
    v5 = (_QWORD *)*a1;
    if (v4 != v3)
    {
      do
      {
        v4 -= 13;
        sub_20E9905B4(v4);
      }
      while (v4 != v3);
      v5 = (_QWORD *)*a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_20F02CAB8(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 2440);
  v2 = v1 == 0;
  v3 = v1 + 56;
  if (v2)
    return 0;
  else
    return v3;
}

uint64_t sub_20F02CAD0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (*(_QWORD *)(result + 2440))
  {
    v3 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
    v4 = *(_QWORD *)(v3 + 2440);
    if (!v4)
      sub_20E866B34();
    v5 = *(_QWORD *)(result + 24);
    v6 = *(_BYTE *)(v4 + 128);
    *(_DWORD *)a2 = *(_DWORD *)result;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
    *(_QWORD *)(a2 + 24) = v5;
    *(_BYTE *)(a2 + 32) = v6;
    *(_BYTE *)(a2 + 40) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
  }
  return result;
}

double sub_20F02CB4C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_DWORD *)a2 = 65792;
  *(_BYTE *)(a2 + 4) = 1;
  *(_QWORD *)(a2 + 8) = 0xBFF0000000000000;
  *(_WORD *)(a2 + 16) = 1;
  *(_BYTE *)(a2 + 4) = *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1) + 1043);
  if (*(_BYTE *)(a1 + 2448))
  {
    *(_WORD *)a2 = 257;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
    v6 = *(_BYTE *)(v5 + 1043);
    if (v6)
    {
      v7 = *(_QWORD **)(v5 + 4848);
      v8 = v7[106];
      if (v8)
      {
        v9 = v7[102];
      }
      else
      {
        v10 = v7[103];
        v9 = v7[102];
        v8 = 0x8F9C18F9C18F9C19 * ((v10 - v9) >> 3);
      }
      v6 = *(_BYTE *)(v9 + 328 * v8 - 40) == 0;
    }
    *(_BYTE *)(a2 + 2) = v6;
    *(_BYTE *)(a2 + 17) = *(_BYTE *)(a1 + 2449);
    if (*(_BYTE *)(a1 + 2451))
      goto LABEL_10;
  }
  else
  {
    *(_WORD *)a2 = 256;
    *(_BYTE *)(a2 + 2) = 1;
    if (*(_BYTE *)(a1 + 2451))
LABEL_10:
      *(_BYTE *)(a2 + 3) = 1;
  }
  v11 = *(_QWORD *)(a1 + 2440);
  if (v11)
  {
    result = *(double *)(v11 + 112);
    *(double *)(a2 + 8) = result;
  }
  return result;
}

void sub_20F02CC60(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t i;
  uint64_t v18;

  v12 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1) + 4864);
  v13 = *(_QWORD *)(v12 + 2488);
  if (*(_QWORD *)(v12 + 2480) != v13)
  {
    v14 = (_QWORD *)a1[921];
    v15 = v14[5];
    if (v15)
    {
      v16 = *(_DWORD *)(v13 - 4);
      for (i = v14[3]; ; ++i)
      {
        v18 = *(_QWORD *)(*v14 + 16 * (i % ((uint64_t)(v14[1] - *v14) >> 4)));
        if (*(_DWORD *)(v18 + 48) == v16)
          break;
        if (!--v15)
          return;
      }
      sub_20EFF5BB8((uint64_t)(v14 + 117), a2, a3, a4, a5, (uint64_t *)v18, a6);
    }
  }
}

void sub_20F02CD34(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  int v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1) + 4864);
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
  if (*(_QWORD *)(v4 + 2528) == *(_QWORD *)(v4 + 2536))
    return;
  v6 = *(_QWORD *)(v5 + 4864);
  v7 = *(_QWORD *)(v6 + 2488);
  if (*(_QWORD *)(v6 + 2480) == v7)
    return;
  v8 = (uint64_t *)a1[921];
  v9 = v8[5];
  if (!v9)
    return;
  v10 = *(_DWORD *)(v7 - 4);
  v11 = v8[3];
  v12 = *v8;
  while (1)
  {
    v13 = *(uint64_t **)(v12 + 16 * (v11 % ((*(_QWORD *)(a1[921] + 8) - v12) >> 4)));
    if (*((_DWORD *)v13 + 12) == v10)
      break;
    ++v11;
    if (!--v9)
      return;
  }
  v31 = 0;
  v32 = 0;
  v34[0] = &off_24C9F8160;
  v34[1] = &v31;
  v14 = v34;
  v35 = v34;
  v15 = (uint64_t *)v13[10];
  if (!v15)
  {
    v18 = 4;
    goto LABEL_28;
  }
  if (*v13 == v13[1])
  {
    v18 = 4;
    do
      v15 = (uint64_t *)*v15;
    while (v15);
    goto LABEL_27;
  }
  do
  {
    v16 = *v13;
    v17 = v13[1];
    if (*v13 != v17)
    {
      while ((unsigned __int16)HIWORD(*((_DWORD *)v15 + 4)) != *(_DWORD *)v16
           || 0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v16 + 16) - *(_QWORD *)(v16 + 8)) >> 3) <= (unint64_t)(unsigned __int16)*((_DWORD *)v15 + 4))
      {
        v16 += 104;
        if (v16 == v17)
          goto LABEL_11;
      }
      v33 = *((_DWORD *)v15 + 4);
      if (!v35)
        sub_20E86D37C();
      (*(void (**)(_QWORD *, int *, uint64_t *))(*v35 + 48))(v35, &v33, v15 + 3);
    }
LABEL_11:
    v15 = (uint64_t *)*v15;
  }
  while (v15);
  v14 = v35;
  if (v35 == v34)
  {
    v18 = 4;
LABEL_27:
    v14 = v34;
    goto LABEL_28;
  }
  if (v35)
  {
    v18 = 5;
LABEL_28:
    (*(void (**)(void))(*v14 + 8 * v18))();
  }
  v19 = *(double *)(*(_QWORD *)(v4 + 2536) - 8);
  v20 = a1[921] + 560;
  v29 = v31;
  v30 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  sub_20F10B4FC(v20, a2, &v29, v19);
  v23 = v30;
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v32;
  if (v32)
  {
    v27 = (unint64_t *)&v32->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_20F02CFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20E86665C((uint64_t)&a9);
  sub_20E86665C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F02CFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  sub_20E86665C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F02D044(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, double a6, double a7, double a8, double a9, double a10, double a11, __n128 a12, __n128 a13)
{
  __int128 v13;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int64x2_t v24;
  int64x2_t v25;
  float64_t v26;
  float64x2_t v27;
  double v28;
  float64_t v29;
  float64x2_t v30;
  double v31;
  double v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v60;
  float64x2_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  size_t v65;
  void **v66;
  uint64_t v67;
  const void *v68;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v75;
  float64x2_t v79;
  uint64_t v80;
  _OWORD *v81;
  _OWORD *v82;
  double v83;
  float64x2_t v86;
  int64x2_t v87;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  size_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  const char *v116;
  size_t v117;
  unsigned __int8 v118;
  unsigned __int8 v119;
  const char *v120;
  size_t v121;
  _BYTE *v122;
  uint64_t v123;
  const char *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  NSObject *v129;
  uint64_t v130;
  uint64_t v131;
  size_t v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  size_t v135;
  size_t v136;
  _QWORD *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  char v142;
  _QWORD *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *p_shared_owners;
  unint64_t v147;
  char *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  _QWORD *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  const char *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  unsigned __int8 v191;
  const char *v192;
  size_t v193;
  _BYTE *v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  uint64_t v198;
  uint64_t v199;
  NSObject *v200;
  size_t v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  _DWORD *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  _QWORD *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  void *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  float64x2_t v240;
  double v241;
  _QWORD *v242;
  int8x16_t v243;
  char *v244;
  int v245;
  char v246;
  double v247;
  uint64_t v248;
  unint64_t v249;
  int8x16_t category;
  const char *categorya;
  const char *categoryb;
  uint64_t *v253;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v255;
  int v256;
  const char *v257;
  int v258;
  const char *v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  void *__dst[2];
  int64_t v263;
  int64x2_t v264;
  __n128 v265;
  int64x2_t v266;
  __n128 v267;
  int64x2_t v268;
  void *v269[2];
  float64x2_t v270;
  double v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  __int128 v275;
  std::__shared_weak_count *v276;
  char *v277;
  std::__shared_weak_count *v278;
  _QWORD *v279;
  __int128 v280;
  _BYTE object[48];
  __int128 v282;
  float64x2_t v283;
  __int128 v284;
  float64x2_t v285;
  double v286;
  uint64_t v287;
  _BYTE v288[100];
  _QWORD v289[5];

  v289[2] = *MEMORY[0x24BDAC8D0];
  v16 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)&v288[36] = *(_OWORD *)(a4 + 32);
  *(_OWORD *)&v288[52] = v16;
  v17 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)&v288[68] = *(_OWORD *)(a4 + 64);
  *(_OWORD *)&v288[84] = v17;
  v18 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&v288[4] = *(_OWORD *)a4;
  *(_OWORD *)&v288[20] = v18;
  v19 = *(_QWORD *)(a2 + 23216);
  v20 = *(_QWORD *)(v19 + 4864);
  if (*(_QWORD *)(v20 + 2504) == *(_QWORD *)(v20 + 2512)
    || (*(_DWORD *)(v20 + 2276) & 0xFFFFFFFE) != 2
    || *(int *)(v19 + 4904) <= 0)
  {
    sub_20F02E848(&v274);
    if (**(int **)(v274 + 56) > 3
      || (v62 = *(unsigned __int8 *)(v274 + 72),
          v63 = sub_20E8C31DC(v274, "OSLogSurrogateAppender", 1, 0),
          v64 = v63,
          !v62)
      && !v63)
    {
LABEL_159:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 104) = 0;
      return;
    }
    sub_20E863438((uint64_t)&v264);
    sub_20E86A980(&v265, (uint64_t)"failed to update state with correction for state ", 49);
    std::ostream::operator<<();
    if ((v272 & 0x10) != 0)
    {
      v67 = *(_QWORD *)&v271;
      if (*(_QWORD *)&v271 < v268.i64[1])
      {
        v271 = *(double *)&v268.i64[1];
        v67 = v268.i64[1];
      }
      v68 = (const void *)v268.i64[0];
      v65 = v67 - v268.i64[0];
      if ((unint64_t)(v67 - v268.i64[0]) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_80;
    }
    else
    {
      if ((v272 & 8) == 0)
      {
        v65 = 0;
        HIBYTE(v263) = 0;
        v66 = __dst;
        goto LABEL_35;
      }
      v68 = (const void *)v266.i64[1];
      v65 = v267.n128_u64[1] - v266.i64[1];
      if (v267.n128_u64[1] - v266.i64[1] > 0x7FFFFFFFFFFFFFF7)
LABEL_80:
        sub_20E860B7C();
    }
    if (v65 >= 0x17)
    {
      v112 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v65 | 7) != 0x17)
        v112 = v65 | 7;
      v113 = v112 + 1;
      v66 = (void **)operator new(v112 + 1);
      __dst[1] = (void *)v65;
      v263 = v113 | 0x8000000000000000;
      __dst[0] = v66;
    }
    else
    {
      HIBYTE(v263) = v65;
      v66 = __dst;
      if (!v65)
      {
LABEL_35:
        *((_BYTE *)v66 + v65) = 0;
        v253 = &v274;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v255 = std::chrono::system_clock::now().__d_.__rep_;
        v256 = 3;
        v257 = "unknown file";
        v258 = 1157;
        v260 = 0;
        v261 = 0;
        v259 = "unknown function";
        if (v263 >= 0)
          v114 = (const char *)__dst;
        else
          v114 = (const char *)__dst[0];
        v115 = *v253;
        v116 = (const char *)(*v253 + 16);
        categoryb = v116;
        v248 = *v253;
        if (*(char *)(*v253 + 39) < 0)
        {
          v116 = *(const char **)(v115 + 16);
          v117 = *(_QWORD *)(v115 + 24);
          v119 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v119 & 1) != 0)
            goto LABEL_42;
        }
        else
        {
          v117 = *(unsigned __int8 *)(*v253 + 39);
          v118 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v118 & 1) != 0)
            goto LABEL_42;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_42:
        if (byte_254A4A4F8[23] >= 0)
          v120 = byte_254A4A4F8;
        else
          v120 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v121 = byte_254A4A4F8[23];
        else
          v121 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v120, v116);
        v122 = &object[8];
        if (v121 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v121 >= 0x17)
        {
          v123 = a1;
          v124 = v114;
          v125 = v62;
          v126 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v121 | 7) != 0x17)
            v126 = v121 | 7;
          v127 = v126 + 1;
          v122 = operator new(v126 + 1);
          *(_QWORD *)&object[24] = v127 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v122;
          *(_QWORD *)&object[16] = v121;
          v62 = v125;
          v114 = v124;
          a1 = v123;
        }
        else
        {
          object[31] = v121;
          if (!v121)
          {
LABEL_56:
            v122[v121] = 0;
            object[32] = 1;
            v128 = &object[40];
            if (v117 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v117 >= 0x17)
            {
              v130 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v117 | 7) != 0x17)
                v130 = v117 | 7;
              v131 = v130 + 1;
              v128 = operator new(v130 + 1);
              *((_QWORD *)&v282 + 1) = v131 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v128;
              *(_QWORD *)&v282 = v117;
            }
            else
            {
              HIBYTE(v282) = v117;
              if (!v117)
              {
                object[40] = 0;
                LOBYTE(v283.f64[0]) = 1;
                v129 = *(NSObject **)object;
                if ((SHIBYTE(v282) & 0x80000000) == 0)
                  goto LABEL_60;
                goto LABEL_66;
              }
            }
            memmove(v128, v116, v117);
            v128[v117] = 0;
            LOBYTE(v283.f64[0]) = 1;
            v129 = *(NSObject **)object;
            if ((SHIBYTE(v282) & 0x80000000) == 0)
            {
LABEL_60:
              if (!object[32])
                goto LABEL_69;
              goto LABEL_67;
            }
LABEL_66:
            operator delete(*(void **)&object[40]);
            if (!object[32])
              goto LABEL_69;
LABEL_67:
            if ((object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
LABEL_69:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (!v64 || !*(_QWORD *)(v64 + 24))
            {
              os_log_type_enabled(v129, OS_LOG_TYPE_INFO);
              *(_DWORD *)object = 136315138;
              *(_QWORD *)&object[4] = v114;
              v138 = (void *)_os_log_send_and_compose_impl();
              if (v138)
                free(v138);
              goto LABEL_145;
            }
            v132 = _os_log_pack_size();
            v133 = (std::__shared_weak_count_vtbl *)operator new(v132, (std::align_val_t)8uLL);
            v134 = (std::__shared_weak_count *)operator new();
            v134->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v134->__shared_owners_ = 0;
            v134->__shared_weak_owners_ = 0;
            v134[1].__vftable = v133;
            *(_QWORD *)&v275 = v133;
            *((_QWORD *)&v275 + 1) = v133;
            v278 = 0;
            v276 = v134;
            v277 = 0;
            v135 = strlen(v114);
            if (v135 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v136 = v135;
            if (v135 >= 0x17)
            {
              v139 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v135 | 7) != 0x17)
                v139 = v135 | 7;
              v140 = v139 + 1;
              v137 = operator new(v139 + 1);
              *((_QWORD *)&v280 + 1) = v140 | 0x8000000000000000;
              v279 = v137;
              *(_QWORD *)&v280 = v136;
            }
            else
            {
              HIBYTE(v280) = v135;
              v137 = &v279;
              if (!v135)
              {
LABEL_85:
                *((_BYTE *)v137 + v136) = 0;
                v141 = v279;
                v289[0] = v280;
                *(_QWORD *)((char *)v289 + 7) = *(_QWORD *)((char *)&v280 + 7);
                v142 = HIBYTE(v280);
                v143 = operator new(0x38uLL);
                v143[1] = 0;
                v143[2] = 0;
                v143[3] = off_24C9ABC20;
                *v143 = &off_24C9ABBD0;
                v144 = v289[0];
                v143[4] = v141;
                v143[5] = v144;
                *(_QWORD *)((char *)v143 + 47) = *(_QWORD *)((char *)v289 + 7);
                *((_BYTE *)v143 + 55) = v142;
                v289[0] = 0;
                *(_QWORD *)((char *)v289 + 7) = 0;
                v145 = v278;
                v277 = (char *)(v143 + 3);
                v278 = (std::__shared_weak_count *)v143;
                if (v145)
                {
                  p_shared_owners = (unint64_t *)&v145->__shared_owners_;
                  do
                    v147 = __ldaxr(p_shared_owners);
                  while (__stlxr(v147 - 1, p_shared_owners));
                  if (!v147)
                  {
                    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                    std::__shared_weak_count::__release_weak(v145);
                  }
                }
                *(_OWORD *)object = v275;
                v148 = v277;
                *(_QWORD *)&object[16] = v276;
                if (v276)
                {
                  v149 = (unint64_t *)&v276->__shared_owners_;
                  do
                    v150 = __ldxr(v149);
                  while (__stxr(v150 + 1, v149));
                }
                v151 = v278;
                *(_QWORD *)&object[24] = v148;
                *(_QWORD *)&object[32] = v278;
                if (v278)
                {
                  v152 = (unint64_t *)&v278->__shared_owners_;
                  do
                    v153 = __ldxr(v152);
                  while (__stxr(v153 + 1, v152));
                  *(_QWORD *)&object[40] = v148;
                  do
                    v154 = __ldaxr(v152);
                  while (__stlxr(v154 - 1, v152));
                  if (!v154)
                  {
                    ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                    std::__shared_weak_count::__release_weak(v151);
                  }
                }
                else
                {
                  *(_QWORD *)&object[40] = v148;
                }
                v155 = v276;
                if (v276)
                {
                  v156 = (unint64_t *)&v276->__shared_owners_;
                  do
                    v157 = __ldaxr(v156);
                  while (__stlxr(v157 - 1, v156));
                  if (!v157)
                  {
                    ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                    std::__shared_weak_count::__release_weak(v155);
                  }
                }
                v158 = *(_QWORD *)object;
                if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                  v159 = *(_QWORD *)&object[40] + 8;
                else
                  v159 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                v160 = _os_log_pack_fill();
                *(_DWORD *)v160 = 136315138;
                *(_QWORD *)(v160 + 4) = v159;
                v161 = operator new();
                v162 = *(unsigned __int8 *)(v248 + 39);
                v163 = *(const char **)(v248 + 16);
                v164 = *(_QWORD *)(v248 + 24);
                v165 = *(_OWORD *)&object[24];
                *(_OWORD *)(v161 + 8) = *(_OWORD *)&object[8];
                if ((v162 & 0x80u) != 0)
                  v162 = v164;
                else
                  v163 = categoryb;
                *(_QWORD *)v161 = v158;
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v161 + 24) = v165;
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)(v161 + 40) = v163;
                *(_QWORD *)(v161 + 48) = v162;
                *(_BYTE *)(v161 + 56) = 1;
                v279 = 0;
                *(_QWORD *)&v275 = v161;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v64 + 24) + 40))(*(_QWORD *)(v64 + 24), &v275);
                v166 = v275;
                *(_QWORD *)&v275 = 0;
                if (v166)
                {
                  v167 = *(std::__shared_weak_count **)(v166 + 32);
                  if (v167)
                  {
                    v168 = (unint64_t *)&v167->__shared_owners_;
                    do
                      v169 = __ldaxr(v168);
                    while (__stlxr(v169 - 1, v168));
                    if (!v169)
                    {
                      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                      std::__shared_weak_count::__release_weak(v167);
                    }
                  }
                  v170 = *(std::__shared_weak_count **)(v166 + 16);
                  if (v170)
                  {
                    v171 = (unint64_t *)&v170->__shared_owners_;
                    do
                      v172 = __ldaxr(v171);
                    while (__stlxr(v172 - 1, v171));
                    if (!v172)
                    {
                      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                      std::__shared_weak_count::__release_weak(v170);
                    }
                  }
                  MEMORY[0x212BC6398](v166, 0x10F0C40B62ED6C6);
                  v173 = v279;
                  v279 = 0;
                  if (v173)
                  {
                    v174 = (std::__shared_weak_count *)v173[4];
                    if (v174)
                    {
                      v175 = (unint64_t *)&v174->__shared_owners_;
                      do
                        v176 = __ldaxr(v175);
                      while (__stlxr(v176 - 1, v175));
                      if (!v176)
                      {
                        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                        std::__shared_weak_count::__release_weak(v174);
                      }
                    }
                    v177 = (std::__shared_weak_count *)v173[2];
                    if (v177)
                    {
                      v178 = (unint64_t *)&v177->__shared_owners_;
                      do
                        v179 = __ldaxr(v178);
                      while (__stlxr(v179 - 1, v178));
                      if (!v179)
                      {
                        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                        std::__shared_weak_count::__release_weak(v177);
                      }
                    }
                    MEMORY[0x212BC6398](v173, 0x10F0C40B62ED6C6);
                  }
                }
                v180 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v181 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v182 = __ldaxr(v181);
                  while (__stlxr(v182 - 1, v181));
                  if (!v182)
                  {
                    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                    std::__shared_weak_count::__release_weak(v180);
                  }
                }
                v183 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v184 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v185 = __ldaxr(v184);
                  while (__stlxr(v185 - 1, v184));
                  if (!v185)
                  {
                    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                    std::__shared_weak_count::__release_weak(v183);
                  }
                }
LABEL_145:
                if (v62)
                {
                  v186 = (const char *)__dst;
                  if (v263 < 0)
                    v186 = (const char *)__dst[0];
                  sub_20E8C003C((uint64_t)&v253, "%s", v186);
                  sub_20E863570((uint64_t)&v253);
                }
                sub_20E863570((uint64_t)&v253);
                v187 = v261;
                if (v261)
                {
                  v188 = (unint64_t *)&v261->__shared_owners_;
                  do
                    v189 = __ldaxr(v188);
                  while (__stlxr(v189 - 1, v188));
                  if (!v189)
                  {
                    ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                    std::__shared_weak_count::__release_weak(v187);
                  }
                }
                if (SHIBYTE(v263) < 0)
                  operator delete(__dst[0]);
                v264.i64[0] = *MEMORY[0x24BEDB7F0];
                v190 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                *(uint64_t *)((char *)v264.i64 + *(_QWORD *)(v264.i64[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                v265.n128_u64[0] = v190;
                v265.n128_u64[1] = MEMORY[0x24BEDB848] + 16;
                if (SHIBYTE(v270.f64[1]) < 0)
                  operator delete(v269[1]);
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x212BC6290](&v273);
                goto LABEL_159;
              }
            }
            memcpy(v137, v114, v136);
            goto LABEL_85;
          }
        }
        memmove(v122, v120, v121);
        goto LABEL_56;
      }
    }
    memmove(v66, v68, v65);
    goto LABEL_35;
  }
  v21 = a5;
  v27.f64[0] = *(float64_t *)a4;
  v24.i64[0] = *(_QWORD *)(a4 + 8);
  v25.i64[0] = *(_QWORD *)(a4 + 16);
  v26 = *(double *)(a4 + 24);
  v27.f64[1] = *(float64_t *)(a4 + 32);
  v24.i64[1] = *(_QWORD *)(a4 + 40);
  *(_QWORD *)&v13 = *(_QWORD *)(a4 + 80);
  v28 = *(double *)(a4 + 88);
  v25.i64[1] = *(_QWORD *)(a4 + 48);
  v29 = *(double *)(a4 + 56);
  a12.n128_u64[0] = *(_QWORD *)(a4 + 64);
  a13.n128_u64[0] = *(_QWORD *)(a4 + 72);
  v268 = v25;
  *(_OWORD *)v269 = v13;
  v266 = v24;
  v267 = a13;
  v264 = (int64x2_t)v27;
  v265 = a12;
  v270.f64[0] = v26;
  v270.f64[1] = v29;
  v271 = v28;
  v272 = 0x3FF0000000000000;
  if (a5)
  {
    *(_QWORD *)(v19 + 4672) = 0;
    *(_QWORD *)(v19 + 4664) = 0;
    *(_QWORD *)(v19 + 4680) = 0;
    sub_20F86A7D0(v20, a4, v27);
    if (*(_BYTE *)(v19 + 10432))
    {
      v30.f64[0] = *(float64_t *)a4;
      v31 = *(double *)(a4 + 8);
      v33.f64[0] = *(float64_t *)(a4 + 32);
      v32 = *(double *)(a4 + 40);
      v35.f64[0] = *(float64_t *)(a4 + 64);
      v34 = *(double *)(a4 + 72);
      _Q22.f64[0] = *(float64_t *)(a4 + 16);
      _Q5.f64[0] = *(float64_t *)(a4 + 24);
      _D2 = *(double *)(a4 + 80);
      _D6 = *(double *)(a4 + 88);
      _Q5.f64[1] = *(float64_t *)(a4 + 56);
      v40 = *(float64x2_t *)(v19 + 10320);
      v41 = *(float64x2_t *)(v19 + 10304);
      v42 = *(float64x2_t *)(v19 + 10352);
      v43 = *(float64x2_t *)(v19 + 10336);
      v44 = *(float64x2_t *)(v19 + 10384);
      v45 = *(float64x2_t *)(v19 + 10368);
      v46 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v41, *(double *)a4), v43, v31), v45, _Q22.f64[0]);
      v47 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v40, *(double *)a4), v42, v31), v44, _Q22.f64[0]);
      _Q22.f64[1] = *(float64_t *)(a4 + 48);
      v30.f64[1] = v31;
      v48 = vmulq_n_f64(v41, v33.f64[0]);
      v49 = vmulq_n_f64(v40, v33.f64[0]);
      v33.f64[1] = v32;
      v50 = vmlsq_laneq_f64(vmulq_n_f64(v30, vnegq_f64(_Q5).f64[0]), v33, _Q5, 1);
      v51 = vmulq_n_f64(v41, v35.f64[0]);
      v52 = vmulq_n_f64(v40, v35.f64[0]);
      v35.f64[1] = v34;
      v53 = vmlsq_lane_f64(v50, v35, _D6, 0);
      __asm
      {
        FMLS            D7, D4, V5.D[1]
        FMLS            D7, D2, V6.D[0]
      }
      v60 = *(float64x2_t *)(v19 + 10416);
      v61 = *(float64x2_t *)(v19 + 10400);
      *(float64x2_t *)(v19 + 10304) = vmlaq_f64(v46, (float64x2_t)0, v61);
      *(float64x2_t *)(v19 + 10320) = vmlaq_f64(v47, (float64x2_t)0, v60);
      *(float64x2_t *)(v19 + 10336) = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(v48, v43, v32), v45, _Q22, 1), (float64x2_t)0, v61);
      *(float64x2_t *)(v19 + 10352) = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(v49, v42, v32), v44, _Q22, 1), (float64x2_t)0, v60);
      *(float64x2_t *)(v19 + 10368) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v51, v43, v34), v45, _D2), (float64x2_t)0, v61);
      *(float64x2_t *)(v19 + 10384) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v52, v42, v34), v44, _D2), (float64x2_t)0, v60);
      *(float64x2_t *)(v19 + 10400) = vaddq_f64(v61, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v41, v53.f64[0]), v43, v53, 1), v45, _D7));
      *(float64x2_t *)(v19 + 10416) = vaddq_f64(v60, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, v53.f64[0]), v42, v53, 1), v44, _D7));
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 168) + 312))(*(_QWORD *)(a2 + 168));
  }
  else
  {
    _D2 = v269[0];
    v70 = (float64x2_t)vzip1q_s64(v264, v266);
    v71 = (float64x2_t)vzip2q_s64(v264, v266);
    *(_QWORD *)&v72.f64[0] = v265.n128_u64[0];
    *(_QWORD *)&v72.f64[1] = v267.n128_u64[0];
    v79 = (float64x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)vdupq_laneq_s64(v268, 1), 8uLL);
    _D4 = v271;
    _V5.D[1] = v270.f64[1];
    v75 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v70, vnegq_f64(v270).f64[0]), v71, v270, 1), v72, v271, 0);
    _D6 = v268.i64[1];
    __asm
    {
      FMLS            D17, D6, V5.D[1]
      FMLS            D17, D2, V4.D[0]
    }
    v71.f64[1] = v79.f64[0];
    *(float64x2_t *)object = v70;
    *(_OWORD *)&object[16] = v268.u64[0];
    v283 = v72;
    v284 = (unint64_t)v269[0];
    *(float64x2_t *)&object[32] = v71;
    v282 = *(unint64_t *)&v79.f64[1];
    v241 = _D17;
    v243 = (int8x16_t)v71;
    v285 = v75;
    v286 = _D17;
    v287 = 0x3FF0000000000000;
    v247 = *(double *)v268.i64;
    category = (int8x16_t)v70;
    v239 = *(_QWORD *)&v79.f64[1];
    *(void **)&v79.f64[0] = v269[0];
    v240 = v75;
    v80 = *(_QWORD *)(v20 + 7952);
    if (v80 && *(_QWORD *)(v80 + 8))
      sub_20F88867C((_QWORD *)v20, (float64x2_t *)object, v79);
    v81 = *(_OWORD **)(a2 + 288);
    v82 = *(_OWORD **)(a2 + 296);
    if (v81 != v82)
    {
      *(_QWORD *)&v83 = vextq_s8(category, category, 8uLL).u64[0];
      _D16 = v241;
      _V7.D[1] = v240.f64[1];
      *(_QWORD *)&v86.f64[0] = v268.i64[0];
      *(_QWORD *)&v86.f64[1] = v239;
      v87 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)category, (int64x2_t)v243), vnegq_f64(v240).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)category, (int64x2_t)v243), v240, 1), v86, v241, 0);
      _D5 = v267.n128_u64[0];
      __asm { FMLS            D17, D5, V7.D[1] }
      v90 = (float64x2_t)vdupq_lane_s64(v243.i64[0], 0);
      v91 = (float64x2_t)vdupq_lane_s64(v265.n128_i64[0], 0);
      v92 = (float64x2_t)vdupq_lane_s64(vextq_s8(v243, v243, 8uLL).i64[0], 0);
      v93 = (float64x2_t)vdupq_lane_s64(v267.n128_i64[0], 0);
      v94 = (float64x2_t)vdupq_lane_s64(v239, 0);
      _D18 = v269[0];
      v96 = (float64x2_t)vdupq_lane_s64((uint64_t)v269[0], 0);
      __asm { FMLS            D17, D18, V16.D[0] }
      v98 = (float64x2_t)vdupq_laneq_s64(v87, 1);
      v99 = (float64x2_t)vdupq_lane_s64(_D17, 0);
      do
      {
        v101 = *((float64x2_t *)v81 + 1);
        v100 = *((float64x2_t *)v81 + 2);
        v103 = *((float64x2_t *)v81 + 3);
        v102 = *((float64x2_t *)v81 + 4);
        v105 = *((float64x2_t *)v81 + 5);
        v104 = *((float64x2_t *)v81 + 6);
        v107 = *((float64x2_t *)v81 + 7);
        v106 = *((float64x2_t *)v81 + 8);
        v81[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v101, *(double *)category.i64), v90, v103), v91, v105), (float64x2_t)0, v107);
        v81[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v100, *(double *)category.i64), v90, v102), v91, v104), (float64x2_t)0, v106);
        v81[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v101, v83), v92, v103), v93, v105), (float64x2_t)0, v107);
        v81[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v100, v83), v92, v102), v93, v104), (float64x2_t)0, v106);
        v81[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v101, v247), v94, v103), v96, v105), (float64x2_t)0, v107);
        v81[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v100, v247), v94, v102), v96, v104), (float64x2_t)0, v106);
        v81[7] = vaddq_f64(v107, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v101, *(double *)v87.i64), v98, v103), v99, v105));
        v81[8] = vaddq_f64(v106, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v100, *(double *)v87.i64), v98, v102), v99, v104));
        v81 = (_OWORD *)((char *)v81 + 152);
      }
      while (v81 != v82);
    }
  }
  sub_20F02E848(__dst);
  if (**((int **)__dst[0] + 7) > 3)
    goto LABEL_244;
  v108 = *((unsigned __int8 *)__dst[0] + 72);
  v109 = sub_20E8C31DC((uint64_t)__dst[0], "OSLogSurrogateAppender", 1, 0);
  v110 = v109;
  if (!v108 && !v109)
    goto LABEL_244;
  v253 = (uint64_t *)__dst;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v255 = std::chrono::system_clock::now().__d_.__rep_;
  v256 = 3;
  v257 = "unknown file";
  v258 = 1175;
  v260 = 0;
  v261 = 0;
  v259 = "unknown function";
  v242 = __dst[0];
  if (*((char *)__dst[0] + 39) < 0)
  {
    v111 = *((_QWORD *)__dst[0] + 3);
    categorya = (const char *)*((_QWORD *)__dst[0] + 2);
  }
  else
  {
    v111 = *((unsigned __int8 *)__dst[0] + 39);
    categorya = (char *)__dst[0] + 16;
  }
  v244 = (char *)__dst[0] + 16;
  v249 = v110;
  v245 = v108;
  v246 = v21;
  v191 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v191 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (object[24] && (object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v192 = byte_254A4A4F8;
  else
    v192 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v193 = byte_254A4A4F8[23];
  else
    v193 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v192, categorya);
  v194 = &object[8];
  if (v193 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v193 >= 0x17)
  {
    v195 = (v193 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v193 | 7) != 0x17)
      v195 = v193 | 7;
    v196 = v195 + 1;
    v194 = operator new(v195 + 1);
    *(_QWORD *)&object[24] = v196 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v194;
    *(_QWORD *)&object[16] = v193;
    goto LABEL_175;
  }
  object[31] = v193;
  if (v193)
LABEL_175:
    memmove(v194, v192, v193);
  v194[v193] = 0;
  object[32] = 1;
  v197 = &object[40];
  if (v111 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v21 = v246;
  if (v111 >= 0x17)
  {
    v198 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v111 | 7) != 0x17)
      v198 = v111 | 7;
    v199 = v198 + 1;
    v197 = operator new(v198 + 1);
    *((_QWORD *)&v282 + 1) = v199 | 0x8000000000000000;
    *(_QWORD *)&object[40] = v197;
    *(_QWORD *)&v282 = v111;
  }
  else
  {
    HIBYTE(v282) = v111;
    if (!v111)
      goto LABEL_184;
  }
  memmove(v197, categorya, v111);
LABEL_184:
  v197[v111] = 0;
  LOBYTE(v283.f64[0]) = 1;
  v200 = *(NSObject **)object;
  if (SHIBYTE(v282) < 0)
    operator delete(*(void **)&object[40]);
  if (object[32] && (object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  if (v249 && *(_QWORD *)(v249 + 24))
  {
    v201 = _os_log_pack_size();
    v202 = (std::__shared_weak_count_vtbl *)operator new(v201, (std::align_val_t)8uLL);
    v203 = (std::__shared_weak_count *)operator new();
    v204 = v203;
    v203->__shared_owners_ = 0;
    v205 = (unint64_t *)&v203->__shared_owners_;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v202;
    *(_QWORD *)object = v202;
    *(_QWORD *)&object[8] = v202;
    *(_QWORD *)&object[16] = v203;
    do
      v206 = __ldxr(v205);
    while (__stxr(v206 + 1, v205));
    memset(&object[24], 0, 24);
    do
      v207 = __ldaxr(v205);
    while (__stlxr(v207 - 1, v205));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v204);
    }
    v208 = *(_QWORD *)object;
    v209 = (_DWORD *)_os_log_pack_fill();
    *v209 = 67109120;
    v209[1] = a3;
    v210 = operator new();
    v211 = *((unsigned __int8 *)v242 + 39);
    v212 = (char *)v242[2];
    v213 = v242[3];
    v214 = *(_OWORD *)&object[24];
    *(_OWORD *)(v210 + 8) = *(_OWORD *)&object[8];
    if ((v211 & 0x80u) != 0)
      v211 = v213;
    else
      v212 = v244;
    *(_QWORD *)v210 = v208;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v210 + 24) = v214;
    *(_QWORD *)&object[24] = 0;
    *(_QWORD *)&object[32] = 0;
    *(_QWORD *)(v210 + 40) = v212;
    *(_QWORD *)(v210 + 48) = v211;
    *(_BYTE *)(v210 + 56) = 1;
    v279 = 0;
    *(_QWORD *)&v275 = v210;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v249 + 24) + 40))(*(_QWORD *)(v249 + 24), &v275);
    v215 = v275;
    *(_QWORD *)&v275 = 0;
    if (v215)
    {
      v216 = *(std::__shared_weak_count **)(v215 + 32);
      if (v216)
      {
        v217 = (unint64_t *)&v216->__shared_owners_;
        do
          v218 = __ldaxr(v217);
        while (__stlxr(v218 - 1, v217));
        if (!v218)
        {
          ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
          std::__shared_weak_count::__release_weak(v216);
        }
      }
      v219 = *(std::__shared_weak_count **)(v215 + 16);
      if (v219)
      {
        v220 = (unint64_t *)&v219->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
      MEMORY[0x212BC6398](v215, 0x10F0C40B62ED6C6);
      v222 = v279;
      v279 = 0;
      if (v222)
      {
        v223 = (std::__shared_weak_count *)v222[4];
        if (v223)
        {
          v224 = (unint64_t *)&v223->__shared_owners_;
          do
            v225 = __ldaxr(v224);
          while (__stlxr(v225 - 1, v224));
          if (!v225)
          {
            ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
            std::__shared_weak_count::__release_weak(v223);
          }
        }
        v226 = (std::__shared_weak_count *)v222[2];
        if (v226)
        {
          v227 = (unint64_t *)&v226->__shared_owners_;
          do
            v228 = __ldaxr(v227);
          while (__stlxr(v228 - 1, v227));
          if (!v228)
          {
            ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
            std::__shared_weak_count::__release_weak(v226);
          }
        }
        MEMORY[0x212BC6398](v222, 0x10F0C40B62ED6C6);
      }
    }
    v229 = *(std::__shared_weak_count **)&object[32];
    if (*(_QWORD *)&object[32])
    {
      v230 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
      do
        v231 = __ldaxr(v230);
      while (__stlxr(v231 - 1, v230));
      if (!v231)
      {
        ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
        std::__shared_weak_count::__release_weak(v229);
      }
    }
    v232 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v233 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v234 = __ldaxr(v233);
      while (__stlxr(v234 - 1, v233));
      if (!v234)
      {
        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
        std::__shared_weak_count::__release_weak(v232);
      }
    }
  }
  else
  {
    os_log_type_enabled(v200, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 67109120;
    *(_DWORD *)&object[4] = a3;
    v235 = (void *)_os_log_send_and_compose_impl();
    if (v235)
      free(v235);
  }
  if (v245)
  {
    sub_20E8C003C((uint64_t)&v253, "[FG] StateCorrection for state %d", a3);
    sub_20E863570((uint64_t)&v253);
  }
  sub_20E863570((uint64_t)&v253);
  v236 = v261;
  if (v261)
  {
    v237 = (unint64_t *)&v261->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
LABEL_244:
  sub_20F4086B0(*(_QWORD *)(a2 + 160), a3, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 23216) + 4864) + 2504), v21, (__int128 *)v264.i8);
  *(_DWORD *)a1 = a3;
  *(_OWORD *)(a1 + 52) = *(_OWORD *)&v288[48];
  *(_OWORD *)(a1 + 68) = *(_OWORD *)&v288[64];
  *(_OWORD *)(a1 + 84) = *(_OWORD *)&v288[80];
  *(_DWORD *)(a1 + 100) = *(_DWORD *)&v288[96];
  *(_OWORD *)(a1 + 4) = *(_OWORD *)v288;
  *(_OWORD *)(a1 + 20) = *(_OWORD *)&v288[16];
  *(_OWORD *)(a1 + 36) = *(_OWORD *)&v288[32];
  *(_BYTE *)(a1 + 104) = 1;
}

void sub_20F02E5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (LOBYTE(STACK[0x278]))
  {
    if (SLOBYTE(STACK[0x277]) < 0)
      operator delete((void *)STACK[0x260]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_20F02E614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (LOBYTE(STACK[0x278]) && SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a29);
  if (a43 < 0)
  {
    operator delete(a38);
    sub_20E863784((uint64_t)&a44);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void sub_20F02E838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20F02E848(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A61968);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A61968))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.odometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A61960);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A61968);
  }
  *a1 = qword_254A61960;
}

void sub_20F02E8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A61968);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A61968);
  _Unwind_Resume(a1);
}

long double sub_20F02E93C(uint64_t a1, double *a2, _QWORD *a3, double a4, double a5, double a6, double a7, double a8, double a9, int64x2_t a10)
{
  long double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  int8x16_t v23;
  int64x2_t v24;
  double v25;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  size_t v38;
  const char *v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  long double result;
  double v58;
  double v59;
  _QWORD v60[3];
  int v61;
  const char *v62;
  int v63;
  const char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  void *object;
  void *v69;
  size_t v70;
  unint64_t v71;
  char v72;
  void *__p[2];
  unint64_t v74;
  char v75;

  *a3 = *(_QWORD *)(a1 + 24);
  a3[1] = *(_QWORD *)(a1 + 56);
  a3[2] = *(_QWORD *)(a1 + 88);
  v11 = *(double *)a1;
  v12 = *(double *)(a1 + 8);
  v13 = *(double *)(a1 + 80);
  if (fabs(v13 + -1.0) > 0.00001)
    goto LABEL_8;
  v14 = *(double *)(a1 + 16);
  if (fabs(v14) > 0.00001)
    goto LABEL_8;
  v15 = *(double *)(a1 + 48);
  if (fabs(v15) > 0.00001)
    goto LABEL_8;
  v16 = *(double *)(a1 + 64);
  if (fabs(v16) > 0.00001)
    goto LABEL_8;
  v17 = *(double *)(a1 + 72);
  if (fabs(v17) > 0.00001)
    goto LABEL_8;
  v18.f64[0] = *(float64_t *)a1;
  v18.f64[1] = *(float64_t *)(a1 + 32);
  v19.f64[0] = *(float64_t *)(a1 + 8);
  v19.f64[1] = *(float64_t *)(a1 + 40);
  v20.f64[0] = *(float64_t *)(a1 + 16);
  v20.f64[1] = *(float64_t *)(a1 + 48);
  v21 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, v11), v19, v12), v20, v14);
  v22.f64[0] = v16 * v11 + v17 * v12 + v13 * v14;
  v23 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, v18.f64[1]), v19, v19.f64[1]), v20, v15);
  *(double *)a10.i64 = v16 * v18.f64[1] + v17 * v19.f64[1] + v13 * v15;
  v24 = (int64x2_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, v16), v19, v17), v20, v13);
  v25 = v16 * v16 + v17 * v17 + v13 * v13;
  __asm { FMOV            V4.2D, #-1.0 }
  v31 = vaddq_f64((float64x2_t)vextq_s8(v23, (int8x16_t)v21, 8uLL), _Q4);
  v21.f64[0] = v25 + -1.0;
  *(_QWORD *)&v22.f64[1] = v23.i64[0];
  v32 = vabsq_f64(v22);
  v33 = (float64x2_t)vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v33, vabsq_f64(v31)), (int32x4_t)vcgtq_f64(v33, vabsq_f64(v21))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v33, v32), (int32x4_t)vcgtq_f64(v33, vabsq_f64((float64x2_t)vzip1q_s64(a10, v24)))))))) & 1) != 0|| fabs(*(double *)&v24.i64[1]) >= 0.00001)
  {
LABEL_8:
    v58 = *(double *)(a1 + 8);
    v59 = *(double *)a1;
    sub_20F04C07C(&v67);
    if (**(int **)(v67 + 56) > 3
      || ((v34 = *(unsigned __int8 *)(v67 + 72), (v35 = sub_20E8C31DC(v67, "OSLogSurrogateAppender", 1, 0)) == 0)
        ? (v36 = 0)
        : (v36 = v35 + 16),
          !v34 && !v35))
    {
LABEL_54:
      v12 = v58;
      v11 = v59;
      goto LABEL_55;
    }
    v60[0] = &v67;
    v60[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v60[2] = std::chrono::system_clock::now().__d_.__rep_;
    v61 = 3;
    v62 = "unknown file";
    v63 = 479;
    v65 = 0;
    v66 = 0;
    v64 = "unknown function";
    v37 = (uint64_t *)(v67 + 16);
    if (*(char *)(v67 + 39) < 0)
    {
      v39 = *(const char **)(v67 + 16);
      v38 = *(_QWORD *)(v67 + 24);
      v41 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v41 & 1) != 0)
        goto LABEL_18;
    }
    else
    {
      v38 = *(unsigned __int8 *)(v67 + 39);
      v39 = (const char *)(*(_QWORD *)v60[0] + 16);
      v40 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v40 & 1) != 0)
        goto LABEL_18;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v71 && SHIBYTE(v70) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_18:
    if (byte_254A4A4F8[23] >= 0)
      v42 = byte_254A4A4F8;
    else
      v42 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v43 = byte_254A4A4F8[23];
    else
      v43 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v42, v39);
    v44 = &v69;
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v43 >= 0x17)
    {
      v45 = v39;
      v46 = v36;
      v47 = v37;
      v48 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v48 = v43 | 7;
      v49 = v48 + 1;
      v44 = operator new(v48 + 1);
      v70 = v43;
      v71 = v49 | 0x8000000000000000;
      v69 = v44;
      v37 = v47;
      v36 = v46;
      v39 = v45;
    }
    else
    {
      HIBYTE(v71) = v43;
      if (!v43)
      {
LABEL_32:
        *((_BYTE *)v44 + v43) = 0;
        v72 = 1;
        v50 = __p;
        if (v38 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v38 >= 0x17)
        {
          v52 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v38 | 7) != 0x17)
            v52 = v38 | 7;
          v53 = v52 + 1;
          v50 = operator new(v52 + 1);
          __p[1] = (void *)v38;
          v74 = v53 | 0x8000000000000000;
          __p[0] = v50;
        }
        else
        {
          HIBYTE(v74) = v38;
          if (!v38)
          {
            LOBYTE(__p[0]) = 0;
            v75 = 1;
            v51 = object;
            if ((SHIBYTE(v74) & 0x80000000) == 0)
              goto LABEL_36;
            goto LABEL_42;
          }
        }
        memmove(v50, v39, v38);
        *((_BYTE *)v50 + v38) = 0;
        v75 = 1;
        v51 = object;
        if ((SHIBYTE(v74) & 0x80000000) == 0)
        {
LABEL_36:
          if (!v72)
            goto LABEL_45;
          goto LABEL_43;
        }
LABEL_42:
        operator delete(__p[0]);
        if (!v72)
        {
LABEL_45:
          if (object)
            os_release(object);
          sub_20F04C170((int)&object, v36, v37, v51, OS_LOG_TYPE_INFO);
          if (v34)
          {
            sub_20E8C003C((uint64_t)v60, "Invalid gravity-aligned rotation matrix for state correction");
            sub_20E863570((uint64_t)v60);
          }
          sub_20E863570((uint64_t)v60);
          v54 = v66;
          if (v66)
          {
            p_shared_owners = (unint64_t *)&v66->__shared_owners_;
            do
              v56 = __ldaxr(p_shared_owners);
            while (__stlxr(v56 - 1, p_shared_owners));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          goto LABEL_54;
        }
LABEL_43:
        if (SHIBYTE(v71) < 0)
          operator delete(v69);
        goto LABEL_45;
      }
    }
    memmove(v44, v42, v43);
    goto LABEL_32;
  }
LABEL_55:
  result = -atan2(-v12, v11);
  *a2 = result;
  return result;
}

void sub_20F02EE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F02EEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F02EEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F02EF0C(uint64_t a1, uint64_t a2, double a3, double a4, double a5, float64x2_t a6)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  float64x2_t v23;
  uint64_t v24;
  __int128 *v25;
  double v26;
  double v28;
  double v30;
  float64x2_t v32;
  double v37;
  float64x2_t v38;
  double v40;
  float64x2_t v41;
  double v43;
  int8x8_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint8x8_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v54;
  size_t v55;
  const char *v56;
  unsigned __int8 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  float64x2_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  unsigned __int8 v81;
  const char *v82;
  size_t v83;
  _BYTE *v84;
  unint64_t v85;
  const char *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  size_t v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  _BYTE object[48];
  float64x2_t v132;
  double v133;
  float64x2_t v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  float64x2_t v139;
  _BYTE v140[57];
  _QWORD v141[3];
  int v142;
  const char *v143;
  int v144;
  const char *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150[3];

  v8 = *(_QWORD *)(a2 + 23216);
  v9 = *(_QWORD *)(v8 + 4864);
  v10 = **(_DWORD **)(v9 + 2480);
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 24);
    while (1)
    {
      v13 = *(_QWORD *)(*(_QWORD *)a2 + 16 * (v12 % ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4)));
      if (*(_DWORD *)(v13 + 48) == v10)
        break;
      ++v12;
      if (!--v11)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v13 = 0;
  }
  v14 = (_QWORD *)(v13 + 80);
  do
  {
    v14 = (_QWORD *)*v14;
    if (!v14)
    {
      sub_20F02E848(&v148);
      if (**(int **)(v148 + 56) > 2)
        goto LABEL_143;
      v50 = *(unsigned __int8 *)(v148 + 72);
      v51 = sub_20E8C31DC(v148, "OSLogSurrogateAppender", 1, 0);
      v52 = v51;
      _ZF = !v50 && v51 == 0;
      if (_ZF)
        goto LABEL_143;
      v141[0] = &v148;
      v141[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v141[2] = std::chrono::system_clock::now().__d_.__rep_;
      v142 = 2;
      v143 = "unknown file";
      v144 = 1399;
      v146 = 0;
      v147 = 0;
      v145 = "unknown function";
      v54 = v148;
      if (*(char *)(v148 + 39) < 0)
      {
        v56 = *(const char **)(v148 + 16);
        v55 = *(_QWORD *)(v148 + 24);
        v130 = v148 + 16;
        v81 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v81 & 1) != 0)
          goto LABEL_62;
      }
      else
      {
        v55 = *(unsigned __int8 *)(v148 + 39);
        v56 = (const char *)(v148 + 16);
        v130 = v148 + 16;
        v57 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v57 & 1) != 0)
          goto LABEL_62;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_62:
      if (byte_254A4A4F8[23] >= 0)
        v82 = byte_254A4A4F8;
      else
        v82 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v83 = byte_254A4A4F8[23];
      else
        v83 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v82, v56);
      v84 = &object[8];
      if (v83 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v83 >= 0x17)
      {
        v85 = v52;
        v86 = v56;
        v87 = v54;
        v88 = v50;
        v89 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v83 | 7) != 0x17)
          v89 = v83 | 7;
        v90 = v89 + 1;
        v84 = operator new(v89 + 1);
        *(_QWORD *)&object[16] = v83;
        *(_QWORD *)&object[24] = v90 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v84;
        v50 = v88;
        v54 = v87;
        v56 = v86;
        v52 = v85;
      }
      else
      {
        object[31] = v83;
        if (!v83)
        {
LABEL_76:
          v84[v83] = 0;
          object[32] = 1;
          v91 = &object[40];
          if (v55 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v55 >= 0x17)
          {
            v92 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v55 | 7) != 0x17)
              v92 = v55 | 7;
            v93 = v92 + 1;
            v91 = operator new(v92 + 1);
            *(_QWORD *)&v132.f64[0] = v55;
            *(_QWORD *)&v132.f64[1] = v93 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v91;
          }
          else
          {
            HIBYTE(v132.f64[1]) = v55;
            if (!v55)
              goto LABEL_84;
          }
          memmove(v91, v56, v55);
LABEL_84:
          v91[v55] = 0;
          LOBYTE(v133) = 1;
          v94 = *(NSObject **)object;
          if (SHIBYTE(v132.f64[1]) < 0)
            operator delete(*(void **)&object[40]);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v52 && *(_QWORD *)(v52 + 24))
          {
            v95 = _os_log_pack_size();
            v96 = (std::__shared_weak_count_vtbl *)operator new(v95, (std::align_val_t)8uLL);
            v97 = (std::__shared_weak_count *)operator new();
            v98 = v97;
            v97->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v97->__shared_owners_;
            v97->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v97->__shared_weak_owners_ = 0;
            v97[1].__vftable = v96;
            *(_QWORD *)object = v96;
            *(_QWORD *)&object[8] = v96;
            *(_QWORD *)&object[16] = v97;
            do
              v100 = __ldxr(p_shared_owners);
            while (__stxr(v100 + 1, p_shared_owners));
            memset(&object[24], 0, 24);
            do
              v101 = __ldaxr(p_shared_owners);
            while (__stlxr(v101 - 1, p_shared_owners));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v98);
            }
            v102 = *(_QWORD *)object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v103 = operator new();
            v104 = *(unsigned __int8 *)(v54 + 39);
            v105 = v130;
            if ((v104 & 0x80u) != 0)
            {
              v105 = *(_QWORD *)(v54 + 16);
              v104 = *(_QWORD *)(v54 + 24);
            }
            *(_QWORD *)v103 = v102;
            *(_OWORD *)(v103 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v103 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)(v103 + 40) = v105;
            *(_QWORD *)(v103 + 48) = v104;
            *(_BYTE *)(v103 + 56) = 2;
            v149 = 0;
            v150[0] = v103;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v52 + 24) + 40))(*(_QWORD *)(v52 + 24), v150);
            v106 = v150[0];
            v150[0] = 0;
            if (v106)
            {
              v107 = *(std::__shared_weak_count **)(v106 + 32);
              if (v107)
              {
                v108 = (unint64_t *)&v107->__shared_owners_;
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 - 1, v108));
                if (!v109)
                {
                  ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                  std::__shared_weak_count::__release_weak(v107);
                }
              }
              v110 = *(std::__shared_weak_count **)(v106 + 16);
              if (v110)
              {
                v111 = (unint64_t *)&v110->__shared_owners_;
                do
                  v112 = __ldaxr(v111);
                while (__stlxr(v112 - 1, v111));
                if (!v112)
                {
                  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                  std::__shared_weak_count::__release_weak(v110);
                }
              }
              MEMORY[0x212BC6398](v106, 0x10F0C40B62ED6C6);
              v113 = v149;
              v149 = 0;
              if (v113)
              {
                v114 = *(std::__shared_weak_count **)(v113 + 32);
                if (v114)
                {
                  v115 = (unint64_t *)&v114->__shared_owners_;
                  do
                    v116 = __ldaxr(v115);
                  while (__stlxr(v116 - 1, v115));
                  if (!v116)
                  {
                    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                    std::__shared_weak_count::__release_weak(v114);
                  }
                }
                v117 = *(std::__shared_weak_count **)(v113 + 16);
                if (v117)
                {
                  v118 = (unint64_t *)&v117->__shared_owners_;
                  do
                    v119 = __ldaxr(v118);
                  while (__stlxr(v119 - 1, v118));
                  if (!v119)
                  {
                    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                    std::__shared_weak_count::__release_weak(v117);
                  }
                }
                MEMORY[0x212BC6398](v113, 0x10F0C40B62ED6C6);
              }
            }
            v120 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v121 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v122 = __ldaxr(v121);
              while (__stlxr(v122 - 1, v121));
              if (!v122)
              {
                ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                std::__shared_weak_count::__release_weak(v120);
              }
            }
            v123 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v124 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v125 = __ldaxr(v124);
              while (__stlxr(v125 - 1, v124));
              if (!v125)
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
            }
          }
          else
          {
            os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG);
            *(_WORD *)object = 0;
            v126 = (void *)_os_log_send_and_compose_impl();
            if (v126)
              free(v126);
          }
          if (v50)
          {
            sub_20E8C003C((uint64_t)v141, "A frame was not added because it has no features.");
            sub_20E863570((uint64_t)v141);
          }
          sub_20E863570((uint64_t)v141);
          v127 = v147;
          if (v147)
          {
            v128 = (unint64_t *)&v147->__shared_owners_;
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
              std::__shared_weak_count::__release_weak(v127);
            }
          }
          goto LABEL_143;
        }
      }
      memmove(v84, v82, v83);
      goto LABEL_76;
    }
  }
  while (v14[76] == v14[75]);
  v136 = 0uLL;
  v137 = 0;
  *((_QWORD *)&v138 + 1) = -1;
  v140[52] = 0;
  v140[56] = 0;
  memset(&v140[8], 0, 43);
  v15 = *(_DWORD *)(v13 + 48);
  *(_QWORD *)&v138 = *(_QWORD *)(v13 + 56);
  DWORD2(v138) = v15;
  _Q0 = *(float64x2_t *)(a2 + 1184);
  v139 = _Q0;
  v140[0] = *(_BYTE *)(a2 + 1200);
  v17 = *(_QWORD *)(v9 + 2280);
  if (*(_QWORD *)(v9 + 2288) != v17)
  {
    v18 = *(float64x2_t *)v17;
    _D1 = *(_QWORD *)(v17 + 40);
    v20 = *(float64x2_t *)(v17 + 24);
    v21 = *(double *)(v17 + 64);
    v22 = *(float64x2_t *)(v17 + 48);
    a6.f64[0] = *(float64_t *)(v17 + 160);
    v23 = *(float64x2_t *)(v17 + 144);
    _ZF = *(_QWORD *)(v9 + 7952) == 0;
    v24 = 4824;
    if (_ZF)
      v24 = 5280;
    v25 = *(__int128 **)(*(_QWORD *)(v8 + v24) + 8);
    v26 = *((double *)v25 + 2);
    _Q17 = *v25;
    v28 = *((double *)v25 + 5);
    _Q19 = *(float64x2_t *)((char *)v25 + 24);
    v30 = *((double *)v25 + 8);
    _Q21 = (float64x2_t)v25[3];
    v32 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, *(double *)v25), v20, *(float64x2_t *)v25, 1), v22, v26);
    __asm { FMLA            D23, D1, V17.D[1] }
    v37 = _D23 + v21 * v26;
    v38 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, _Q19.f64[0]), v20, _Q19, 1), v22, v28);
    __asm { FMLA            D23, D1, V19.D[1] }
    v40 = _D23 + v21 * v28;
    v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, _Q21.f64[0]), v20, _Q21, 1), v22, v30);
    __asm { FMLA            D23, D1, V21.D[1] }
    v43 = _D23 + v21 * v30;
    _Q21.f64[0] = *((float64_t *)v25 + 11);
    _Q23 = *(float64x2_t *)((char *)v25 + 72);
    __asm { FMLA            D0, D1, V23.D[1] }
    _Q0.f64[0] = _Q0.f64[0] + v21 * _Q21.f64[0];
    *(float64x2_t *)object = v32;
    *(double *)&object[16] = v37;
    *(float64x2_t *)&object[24] = v38;
    *(double *)&object[40] = v40;
    v132 = v41;
    v133 = v43;
    v134 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, _Q23.f64[0]), v20, _Q23, 1), v22, _Q21.f64[0]), v23);
    v135 = *(_OWORD *)&vaddq_f64(_Q0, a6);
    v45 = *(int8x8_t *)(v13 + 72);
    if (v45)
    {
      v46 = **(uint64_t ****)(v13 + 64);
      if (v46)
      {
        v47 = *v46;
        if (v47)
        {
          v48 = (uint8x8_t)vcnt_s8(v45);
          v48.i16[0] = vaddlv_u8(v48);
          if (v48.u32[0] < 2uLL)
          {
            v49 = *(_QWORD *)&v45 - 1;
            while (1)
            {
              v58 = v47[1];
              if (v58)
              {
                if ((v58 & v49) != 0)
                  goto LABEL_35;
              }
              else if (!*((_DWORD *)v47 + 4))
              {
                goto LABEL_144;
              }
              v47 = (uint64_t *)*v47;
              if (!v47)
                goto LABEL_35;
            }
          }
          do
          {
            v59 = v47[1];
            if (v59)
            {
              if (v59 < *(_QWORD *)&v45 || v59 % *(_QWORD *)&v45)
                break;
            }
            else if (!*((_DWORD *)v47 + 4))
            {
LABEL_144:
              v60 = v47 + 3;
              if (&v136 == (__int128 *)(v60 + 99))
              {
LABEL_38:
                sub_20F1552E4(*(_QWORD *)(a2 + 23216), 0, 0, (double *)(*(_QWORD *)(a2 + 168) + 64), (double *)&v140[16], (double *)&v140[32], (double *)&v140[24]);
                v61 = *(_QWORD **)(a2 + 23216);
                v62 = v61[608];
                v63 = *(_QWORD *)(v62 + 2424);
                if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(v62 + 2288) - *(_QWORD *)(v62 + 2280)) >> 3) == (*(_QWORD *)(v62 + 2432) - v63) >> 5)
                  v64 = (*(unsigned __int8 *)(v63 + 24) >> 5) & 1;
                else
                  LOBYTE(v64) = 0;
                v140[48] = v64;
                *(_QWORD *)&v140[40] = **(_QWORD **)(v62 + 5264);
                v140[49] = *(_BYTE *)(*(_QWORD *)(a2 + 112) + 192);
                v65 = *(_QWORD *)(a2 + 1288);
                if (v65)
                {
                  v66 = *(_QWORD *)(a2 + 1272);
                  while (1)
                  {
                    v67 = *(_QWORD *)(a2 + 1248)
                        + 496
                        * (v66
                         % (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(_QWORD *)(a2 + 1256) - *(_QWORD *)(a2 + 1248)) >> 4)));
                    if ((_QWORD)v138 == *(_QWORD *)(v67 + 8) && DWORD2(v138) == *(_DWORD *)(v67 + 16))
                      break;
                    ++v66;
                    if (!--v65)
                      goto LABEL_47;
                  }
                  LOBYTE(v65) = 1;
                }
LABEL_47:
                v140[50] = v65;
                *(_QWORD *)&v140[8] = (uint64_t)(v61[611] - v61[610]) >> 4;
                v68 = v61[606];
                if (*(_BYTE *)(v68 + 760))
                {
                  v69 = *(_QWORD *)(v68 + 1016);
                  if (v69)
                  {
                    v70 = *(_QWORD *)(v68 + 1000);
                    v71 = *(_QWORD *)(v68 + 984);
                    v72 = *(_QWORD *)(v68 + 976);
                    v73 = 0xCCCCCCCCCCCCCCCDLL * ((v71 - v72) >> 5);
                    while (1)
                    {
                      v74 = v72 + 160 * (v70 % v73);
                      if (!*(_DWORD *)(v74 + 16) && *(_DWORD *)(v74 + 12) == v10)
                        break;
                      ++v70;
                      if (!--v69)
                        goto LABEL_54;
                    }
                    v76 = *(_QWORD *)(v74 + 148);
                    v69 = v76 & 0xFF00000000;
                    v75 = v76 & 0xFFFFFF00;
                    LODWORD(v76) = v76;
LABEL_57:
                    v140[56] = BYTE4(v69);
                    *(_DWORD *)&v140[52] = v76 | v75 | v69;
                    if (*(_BYTE *)(*(_QWORD *)(a2 + 168) + 2448)
                      || !v69
                      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1461, (uint64_t)"this_->config().is_visual_slam_enabled || !keyframe_candidate_info.opt_num_triangulated_points_for_pnp_ransac.has_value()", 121, (uint64_t)"This info should be invalid for regular SLAM candidate keyframes", 64, (void (*)(void **))sub_21023DDB0))
                    {
                      v77 = v132;
                      *(_OWORD *)(a1 + 32) = *(_OWORD *)&object[32];
                      *(float64x2_t *)(a1 + 48) = v77;
                      v78 = *(_OWORD *)&object[16];
                      *(_OWORD *)a1 = *(_OWORD *)object;
                      *(_OWORD *)(a1 + 16) = v78;
                      *(float64x2_t *)(a1 + 72) = v134;
                      *(_OWORD *)(a1 + 96) = v136;
                      *(_OWORD *)(a1 + 193) = *(_OWORD *)&v140[41];
                      *(_OWORD *)(a1 + 184) = *(_OWORD *)&v140[32];
                      v79 = *(_OWORD *)v140;
                      *(_OWORD *)(a1 + 168) = *(_OWORD *)&v140[16];
                      *(_OWORD *)(a1 + 152) = v79;
                      v80 = v138;
                      *(float64x2_t *)(a1 + 136) = v139;
                      *(double *)(a1 + 64) = v133;
                      *(_QWORD *)(a1 + 88) = v135;
                      *(_QWORD *)(a1 + 112) = v137;
                      *(_OWORD *)(a1 + 120) = v80;
                      *(_BYTE *)(a1 + 216) = 1;
                      return;
                    }
LABEL_146:
                    abort();
                  }
LABEL_54:
                  LODWORD(v76) = 0;
                }
                else
                {
                  LODWORD(v76) = 0;
                  v69 = 0;
                }
                v75 = 0;
                goto LABEL_57;
              }
LABEL_37:
              sub_20F04CF00((char **)&v136, (__int128 *)v60[99], (__int128 *)v60[100], 0xCCCCCCCCCCCCCCCDLL * ((v60[100] - v60[99]) >> 3));
              goto LABEL_38;
            }
            v47 = (uint64_t *)*v47;
          }
          while (v47);
        }
      }
    }
LABEL_35:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1424, (uint64_t)"frame_bundle", 12, (uint64_t)"Cannot find the corresponding frame bundle", 42, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_146;
    }
    v60 = 0;
    if (&v136 == (__int128 *)792)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_143:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 216) = 0;
}

void sub_20F02FB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  uint64_t v19;

  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v19 - 192);
  _Unwind_Resume(a1);
}

void sub_20F02FB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20E86E8C4((uint64_t *)(v5 - 104));
  sub_20E86E8C4((uint64_t *)(v5 - 112));
  sub_20E86E658((uint64_t)va);
  sub_20E863714(v5 - 192);
  _Unwind_Resume(a1);
}

void sub_20F02FB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  sub_20E863714(v5 - 192);
  _Unwind_Resume(a1);
}

void sub_20F02FBAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  sub_20E863714(v2 - 192);
  _Unwind_Resume(a1);
}

void sub_20F02FBD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 192);
  _Unwind_Resume(a1);
}

void sub_20F02FBF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 192);
  _Unwind_Resume(a1);
}

void sub_20F02FC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *object, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 && a19 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v20 - 192);
  _Unwind_Resume(a1);
}

void sub_20F02FC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20F02FC74@<Q0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v4 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1) + 4824) + 32 * *a2 + 8)
     + 1664 * a2[1];
  v5 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(a3 + 48) = v5;
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(v4 + 64);
  v6 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v4;
  *(_OWORD *)(a3 + 16) = v6;
  result = *(__n128 *)(v4 + 72);
  *(__n128 *)(a3 + 72) = result;
  *(_QWORD *)(a3 + 88) = *(_QWORD *)(v4 + 88);
  return result;
}

double sub_20F02FCE0(_OWORD *a1, uint64_t a2, char a3, __int128 *a4, double a5, double a6)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  void **v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  double result;
  std::runtime_error *exception;
  _OWORD *v69;
  __int128 v70;
  unint64_t v71;
  __int128 v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;

  v12 = *(_QWORD *)(a2 + 1408);
  v13 = *(std::__shared_weak_count **)(a2 + 1416);
  *(_QWORD *)&v70 = v12;
  *((_QWORD *)&v70 + 1) = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = *(_QWORD *)(a2 + 1376);
  if (*(_QWORD *)(a2 + 1368) != v16)
  {
    v17 = *(_BYTE **)(v16 - 8);
    *(_QWORD *)(v16 - 8) = 0;
    sub_20F04FE98(a2 + 1368, (_QWORD *)(*(_QWORD *)(a2 + 1376) - 8));
    v74 = v13;
    v75 = 0;
    v73 = v12;
    if (!v13)
      goto LABEL_11;
    goto LABEL_9;
  }
  v18 = *(_QWORD *)(a2 + 1392);
  if (v18 >= *(_QWORD *)(a2 + 1400))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *(_QWORD *)(a2 + 1392) = v18 + 1;
  v17 = (_BYTE *)operator new();
  bzero(v17, 0x240uLL);
  v17[339] = 1;
  v17[348] = 1;
  v74 = v13;
  v75 = 0;
  v73 = v12;
  if (v13)
  {
LABEL_9:
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
LABEL_11:
  *(_QWORD *)&v72 = v17;
  v21 = (_QWORD *)operator new();
  v73 = 0;
  v74 = 0;
  *v21 = &off_24C9F8270;
  v21[1] = 0;
  v21[2] = 0;
  v21[3] = v17;
  v21[4] = v12;
  v21[5] = v13;
  *((_QWORD *)&v72 + 1) = v21;
  if (v13)
  {
    v22 = (unint64_t *)&v13->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v24 = v72;
  *(_QWORD *)(v72 + 8) = *(_QWORD *)v72;
  *(_QWORD *)(v24 + 32) = *(_QWORD *)(v24 + 24);
  if (*(_BYTE *)(v24 + 192))
    *(_BYTE *)(v24 + 192) = 0;
  v25 = (void **)(v24 + 200);
  *(_QWORD *)(v24 + 208) = *(_QWORD *)(v24 + 200);
  v26 = (void **)(v24 + 224);
  *(_QWORD *)(v24 + 232) = *(_QWORD *)(v24 + 224);
  if (*(_BYTE *)(v24 + 424))
    *(_BYTE *)(v24 + 424) = 0;
  if (*(_BYTE *)(v24 + 560))
    *(_BYTE *)(v24 + 560) = 0;
  v69 = a1;
  if (*((_BYTE *)a4 + 128))
  {
    v27 = *a4;
    v28 = a4[1];
    v29 = a4[3];
    *(_OWORD *)(v24 + 464) = a4[2];
    *(_OWORD *)(v24 + 480) = v29;
    *(_OWORD *)(v24 + 432) = v27;
    *(_OWORD *)(v24 + 448) = v28;
    v30 = a4[4];
    v31 = a4[5];
    v32 = a4[7];
    *(_OWORD *)(v24 + 528) = a4[6];
    *(_OWORD *)(v24 + 544) = v32;
    *(_OWORD *)(v24 + 496) = v30;
    *(_OWORD *)(v24 + 512) = v31;
    *(_BYTE *)(v24 + 560) = 1;
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 168) + 112))(*(_QWORD *)(a2 + 168), v24);
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a2 + 168) + 296))(&v70, *(_QWORD *)(a2 + 168), *(unsigned int *)(*(_QWORD *)(a2 + 168) + 2584));
  v33 = *v25;
  if (*v25)
  {
    *(_QWORD *)(v24 + 208) = v33;
    operator delete(v33);
    *v25 = 0;
    *(_QWORD *)(v24 + 208) = 0;
    *(_QWORD *)(v24 + 216) = 0;
  }
  v35 = (char *)*((_QWORD *)&v70 + 1);
  v34 = (char *)v70;
  *(_QWORD *)(v24 + 200) = v70;
  *(_QWORD *)(v24 + 208) = v35;
  v36 = v71;
  *(_QWORD *)(v24 + 216) = v71;
  if (*(_BYTE *)(a2 + 1200))
  {
    v37 = (_OWORD *)(a2 + 1184);
    if ((unint64_t)v35 >= v36)
    {
      v39 = (v35 - v34) >> 4;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 60)
        sub_20E867F44();
      v41 = v36 - (_QWORD)v34;
      if (v41 >> 3 > v40)
        v40 = v41 >> 3;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
      {
        if (v42 >> 60)
          sub_20E877A38();
        v43 = (char *)operator new(16 * v42);
      }
      else
      {
        v43 = 0;
      }
      v44 = &v43[16 * v39];
      *(_OWORD *)v44 = *v37;
      v38 = v44 + 16;
      if (v35 != v34)
      {
        do
        {
          v45 = *((_QWORD *)v35 - 2);
          v35 -= 16;
          v46 = *((_DWORD *)v35 + 2);
          *((_QWORD *)v44 - 2) = v45;
          v44 -= 16;
          *((_DWORD *)v44 + 2) = v46;
        }
        while (v35 != v34);
        v34 = (char *)*v25;
      }
      *(_QWORD *)(v24 + 200) = v44;
      *(_QWORD *)(v24 + 208) = v38;
      *(_QWORD *)(v24 + 216) = &v43[16 * v42];
      if (v34)
        operator delete(v34);
    }
    else
    {
      *(_OWORD *)v35 = *v37;
      v38 = v35 + 16;
    }
    *(_QWORD *)(v24 + 208) = v38;
  }
  *(double *)(v24 + 384) = a5;
  *(_BYTE *)(v24 + 392) = a3;
  v47 = *(_QWORD *)(*(_QWORD *)(a2 + 23216) + 4864);
  v48 = *(_QWORD *)(v47 + 2424);
  v49 = (*(_QWORD *)(v47 + 2432) - v48) >> 5;
  if (v49 == 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(v47 + 2288) - *(_QWORD *)(v47 + 2280)) >> 3))
  {
    v50 = v69;
    *(_BYTE *)(v24 + 393) = (*(_BYTE *)(v48 + 32 * v49 - 8) & 0x20) != 0;
    v51 = *(_QWORD *)(a2 + 40);
    if (!v51)
      goto LABEL_56;
  }
  else
  {
    v50 = v69;
    *(_BYTE *)(v24 + 393) = 0;
    v51 = *(_QWORD *)(a2 + 40);
    if (!v51)
      goto LABEL_56;
  }
  v52 = *(_DWORD *)(v47 + 5288);
  v53 = *(_QWORD *)(a2 + 24);
  while (1)
  {
    v54 = *(_QWORD *)(*(_QWORD *)a2 + 16 * (v53 % ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4)));
    if (*(_DWORD *)(v54 + 48) == v52)
      break;
    ++v53;
    if (!--v51)
      goto LABEL_56;
  }
  sub_20FCBA984(v54, 0, (uint64_t *)&v70);
  v55 = *v26;
  if (*v26)
  {
    *(_QWORD *)(v24 + 232) = v55;
    operator delete(v55);
    *v26 = 0;
    *(_QWORD *)(v24 + 232) = 0;
    *(_QWORD *)(v24 + 240) = 0;
  }
  *(_OWORD *)(v24 + 224) = v70;
  *(_QWORD *)(v24 + 240) = v71;
LABEL_56:
  v56 = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(v24 + 248) = *(_OWORD *)(v56 + 104);
  v57 = *(_OWORD *)(v56 + 120);
  v58 = *(_OWORD *)(v56 + 136);
  v59 = *(_OWORD *)(v56 + 168);
  *(_OWORD *)(v24 + 296) = *(_OWORD *)(v56 + 152);
  *(_OWORD *)(v24 + 312) = v59;
  *(_OWORD *)(v24 + 264) = v57;
  *(_OWORD *)(v24 + 280) = v58;
  v60 = *(_OWORD *)(v56 + 184);
  v61 = *(_OWORD *)(v56 + 200);
  v62 = *(_OWORD *)(v56 + 216);
  *(_QWORD *)(v24 + 376) = *(_QWORD *)(v56 + 232);
  *(_OWORD *)(v24 + 344) = v61;
  *(_OWORD *)(v24 + 360) = v62;
  *(_OWORD *)(v24 + 328) = v60;
  v63 = *(_QWORD *)(a2 + 23216);
  if (*(int *)(v63 + 4904) >= 1)
  {
    v64 = *(unsigned __int8 *)(v24 + 424);
    v65 = *(_QWORD *)(*(_QWORD *)(v63 + 4864) + 2280)
        + 168
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v63 + 4864) + 2512) - *(_QWORD *)(*(_QWORD *)(v63 + 4864) + 2504)) >> 3);
    v66 = *(_QWORD *)(v65 - 8);
    *(_OWORD *)(v24 + 400) = *(_OWORD *)(v65 - 24);
    *(_QWORD *)(v24 + 416) = v66;
    if (!v64)
      *(_BYTE *)(v24 + 424) = 1;
  }
  *(_BYTE *)(v24 + 394) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 168) + 24))(*(_QWORD *)(a2 + 168));
  *(double *)(v24 + 568) = a6;
  result = *(double *)&v72;
  *v50 = v72;
  return result;
}

void sub_20F0301FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  sub_20E86665C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F030218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F03022C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F030240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F030254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F030268(void *a1)
{
  std::mutex *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  sub_20F051F2C(v1, v2);
  __cxa_rethrow();
}

void sub_20F030280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  __cxa_end_catch();
  sub_20E86665C((uint64_t)va1);
  sub_20F04FF40((uint64_t *)va2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F0302AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_20F0302C0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = v3 - 488;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v3 - 48);
      if (!v6)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        v9 = (std::__shared_weak_count *)*((_QWORD *)v3 - 50);
        if (v9)
        {
LABEL_10:
          v10 = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      else
      {
LABEL_9:
        v9 = (std::__shared_weak_count *)*((_QWORD *)v3 - 50);
        if (v9)
          goto LABEL_10;
      }
      v3 -= 488;
      if (v5 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
  }
  return a1;
}

uint64_t sub_20F0303B0(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v8;
  char ***v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char **v16;
  char **v17;

  v8 = (_QWORD *)sub_20F091380(a1, a2, a3, a6);
  *v8 = &off_24C9F7CF0;
  v9 = (char ***)(v8 + 921);
  v8[921] = 0;
  v10 = operator new();
  v11 = *(std::__shared_weak_count **)(a4 + 8);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_20F029D78();
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v16 = *v9;
  *v9 = (char **)v10;
  if (v16)
  {
    v17 = sub_20F04D480(v16);
    MEMORY[0x212BC6398](v17, 0x10F2C408265A22FLL);
  }
  return a1;
}

void sub_20F0304B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  char ***v10;
  uint64_t v11;

  sub_20E86665C((uint64_t)&a9);
  MEMORY[0x212BC6398](v11, 0x10F2C408265A22FLL);
  sub_20F030510(v10);
  sub_20F09376C(v9);
  _Unwind_Resume(a1);
}

void sub_20F0304F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  char ***v2;

  sub_20F030510(v2);
  sub_20F09376C(v1);
  _Unwind_Resume(a1);
}

char ***sub_20F030510(char ***a1)
{
  char **v2;
  char **v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F04D480(v2);
    MEMORY[0x212BC6398](v3, 0x10F2C408265A22FLL);
  }
  return a1;
}

uint64_t sub_20F030554(_QWORD *a1)
{
  char **v2;
  char **v3;

  *a1 = &off_24C9F7CF0;
  v2 = (char **)a1[921];
  a1[921] = 0;
  if (v2)
  {
    v3 = sub_20F04D480(v2);
    MEMORY[0x212BC6398](v3, 0x10F2C408265A22FLL);
  }
  return sub_20F09376C((uint64_t)a1);
}

void sub_20F0305A4(_QWORD *a1)
{
  char **v2;
  char **v3;

  *a1 = &off_24C9F7CF0;
  v2 = (char **)a1[921];
  a1[921] = 0;
  if (v2)
  {
    v3 = sub_20F04D480(v2);
    MEMORY[0x212BC6398](v3, 0x10F2C408265A22FLL);
  }
  sub_20F09376C((uint64_t)a1);
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F030608(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 7185) && !*(_BYTE *)(*(_QWORD *)(a1 + 7368) + 1200))
    return 0;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  if (!*(_BYTE *)(v2 + 3616))
    return 0;
  v3 = *(_QWORD *)(v2 + 4864);
  v4 = *(_QWORD *)(v3 + 2512);
  if (*(_QWORD *)(v3 + 2504) == v4)
    return 0;
  if ((*(_DWORD *)(v3 + 2276) & 0xFFFFFFFE) != 2)
    return 0;
  v5 = *(_DWORD *)(v2 + 4904);
  if (v5 < 1)
    return 0;
  if (*(double *)(v4 - 8) - *(double *)(v2 + 4912) < *(double *)(v2 + 3624))
    return 0;
  v7 = *(_QWORD *)(v2 + 4848);
  if (*(_BYTE *)(v7 + 2616)
    && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 1240) + 304) - 4) > v5
    && (v8 = *(_QWORD *)(*(_QWORD *)(a1 + 7368) + 160), !*(_BYTE *)(v8 + 224)))
  {
    return *(_QWORD *)(v8 + 184) >= *(_QWORD *)(v8 + 120);
  }
  else
  {
    return 0;
  }
}

BOOL sub_20F0306FC(uint64_t a1)
{
  char v1;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1);
  return v1 != 0;
}

BOOL sub_20F030720(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  int v11;
  float64x2_t v12;
  float64x2_t v14;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;
  unint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  unint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  _BYTE *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  unint64_t v35;
  unsigned int *v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  double v40;
  float64x2_t v41;
  double v42;
  float64x2_t v43;
  int64x2_t v45;
  int64x2_t v46;
  float64x2_t v48;
  double v49;
  float64x2_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  double sinval;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  __n128 v63;
  __n128 v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  const char *v69;
  size_t v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  double v76;
  double v77;
  double cosval;
  int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  size_t v83;
  const char *v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  size_t v90;
  const char *v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  size_t v96;
  const char *v97;
  __double2 v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  __n128 v106;
  __n128 v107;
  double v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  int8x8_t *v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t tv_nsec;
  int v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  size_t v124;
  const char *v125;
  _DWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _DWORD *v133;
  _DWORD *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  char *v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  size_t v149;
  const char *v150;
  int v151;
  void *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  unsigned __int8 v156;
  const char *v157;
  size_t v158;
  _BYTE *v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  size_t v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  __darwin_time_t v173;
  double v174;
  uint64_t v175;
  const char *v176;
  void *v177;
  int v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  void *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unsigned __int8 v202;
  const char *v203;
  size_t v204;
  _BYTE *v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  NSObject *v211;
  size_t v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t v218;
  __darwin_time_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  void *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  void *v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  unsigned __int8 v247;
  const char *v248;
  size_t v249;
  _BYTE *v250;
  unint64_t v251;
  const char *v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  NSObject *v261;
  size_t v262;
  std::__shared_weak_count_vtbl *v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count *v265;
  unint64_t *p_shared_owners;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  __darwin_time_t tv_sec;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  void *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  _BOOL8 v297;
  unsigned __int8 v298;
  const char *v299;
  size_t v300;
  _BYTE *p_tv_nsec;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  NSObject *v307;
  size_t v308;
  std::__shared_weak_count_vtbl *v309;
  std::__shared_weak_count *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  unint64_t v314;
  __darwin_time_t v315;
  uint64_t v316;
  uint64_t v317;
  double v318;
  double v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  void *v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  void *v343;
  unint64_t *v344;
  unsigned __int8 v345;
  const char *v346;
  size_t v347;
  _BYTE *v348;
  uint64_t v349;
  uint64_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  NSObject *v354;
  size_t v355;
  std::__shared_weak_count_vtbl *v356;
  std::__shared_weak_count *v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t v361;
  __darwin_time_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  uint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  void *v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  __double2 v391;
  unsigned int v392;
  uint64_t v393;
  unint64_t v394;
  int8x8_t *v395;
  uint64_t v396;
  char v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  _DWORD *v401;
  uint64_t v402;
  _OWORD *v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  double v410;
  _DWORD *v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  char *v416;
  char *v417;
  char *v418;
  uint64_t v419;
  int v420;
  char *v421;
  char *v422;
  int v423;
  void *v424;
  uint64_t v425;
  char *v426;
  char *v427;
  int v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  size_t v432;
  const char *v433;
  unsigned __int8 v434;
  const char *v435;
  size_t v436;
  _BYTE *v437;
  uint64_t v438;
  uint64_t v439;
  void *v440;
  uint64_t v441;
  uint64_t v442;
  NSObject *v443;
  size_t v444;
  std::__shared_weak_count_vtbl *v445;
  std::__shared_weak_count *v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  unint64_t v450;
  __darwin_time_t v451;
  double v452;
  uint64_t v453;
  uint64_t v454;
  void *v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  uint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  std::__shared_weak_count *v469;
  unint64_t *v470;
  unint64_t v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  void *v475;
  unint64_t *v476;
  unsigned __int8 v477;
  const char *v478;
  size_t v479;
  _BYTE *v480;
  unint64_t v481;
  const char *v482;
  uint64_t v483;
  int v484;
  _QWORD *v485;
  uint64_t v486;
  uint64_t v487;
  void *v488;
  uint64_t v489;
  uint64_t v490;
  NSObject *v491;
  size_t v492;
  std::__shared_weak_count_vtbl *v493;
  std::__shared_weak_count *v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  unint64_t v498;
  __darwin_time_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  uint64_t v510;
  std::__shared_weak_count *v511;
  unint64_t *v512;
  unint64_t v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  void *v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v528;
  uint64_t v529;
  unint64_t v530;
  int8x8_t *v531;
  uint64_t v532;
  timespec v533;
  timespec v534;
  timespec v535;
  __int128 v536;
  _QWORD *v537;
  _DWORD *v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  unint64_t v542;
  BOOL v543;
  _DWORD *v544;
  uint64_t v545;
  int v546;
  uint64_t v547;
  uint64_t v548;
  float64x2_t *v549;
  float64x2_t v551;
  float64x2_t v555;
  int64x2_t v558;
  int64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  unsigned int v565;
  float64x2_t v566;
  float64x2_t v568;
  unint64_t v570;
  _DWORD *v571;
  _DWORD *v572;
  char *v573;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  unint64_t v579;
  uint64_t v580;
  _BOOL4 v581;
  float64x2_t v582;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  int8x16_t v587;
  float64x2_t v588;
  float64x2_t v591;
  float64x2_t v593;
  double v594;
  float64x2_t v595;
  float64x2_t v597;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  char *v612;
  uint64_t v613;
  unint64_t v614;
  int64_t v615;
  unint64_t v616;
  char *v617;
  float64x2_t *v618;
  char *v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  char *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t *v629;
  int v630;
  unsigned __int8 v631;
  char *v633;
  size_t v634;
  __darwin_time_t v635;
  uint64_t v636;
  uint64_t i;
  uint64_t v638;
  double v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  int8x16_t v650;
  const char *v651;
  uint64_t v652;
  float64x2_t v653;
  double v654;
  int v655;
  int v656;
  float64x2_t v657;
  int v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  float64x2_t v663;
  int v664;
  float64_t v665;
  _QWORD *v666;
  int64x2_t v667;
  double v668;
  double v669;
  int64x2_t v670;
  double v671;
  double v672;
  float64x2_t v673;
  double v674;
  double v675;
  _BYTE object[48];
  int8x16_t v677;
  double v678;
  float64x2_t v679;
  double v680;
  char v681;
  void *v682;
  _DWORD *v683;
  void *v684;
  void *v685;
  uint64_t v686;
  _BYTE v687[288];
  char v688;
  unsigned __int8 v689;
  timespec v690;
  uint64_t v691;
  float64x2_t v692;
  double v693;
  double v694;
  int8x16_t v695;
  double v696;
  double v697;
  int8x16_t v698;
  double v699;
  double v700;
  void *v701;
  void *v702;
  uint64_t v703;
  void *v704;
  _BYTE *v705;
  char *v706;
  void *v707;
  void *v708;
  uint64_t v709;
  void *v710;
  _BYTE *v711;
  uint64_t v712;
  void *v713;
  _BYTE *v714;
  uint64_t v715;
  uint64_t v716;
  void *v717;
  double v718;
  double v719;
  timespec v720;
  timespec v721;
  timespec v722;
  timespec v723;
  _BYTE v724[32];
  __darwin_time_t v725;
  char v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  _BYTE v730[24];
  int64x2_t v731;
  double v732[3];
  double v733;
  float64x2_t v734;
  double v735;
  void *v736[2];
  _OWORD v737[29];
  char v738;
  char v739;
  char v740;
  timespec __p[18];
  char v742;
  uint64_t v743;

  v743 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a1[921] + 160);
  if ((*(_BYTE *)(v10 + 872) || *(_BYTE *)(v10 + 368))
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1894, (uint64_t)"!impl_->state_correction_logic_->HasRelocalizationInfo() && !impl_->state_correction_logic_->HasStateCorrectionRequest()", 120, (uint64_t)"Invalid state correction logic. We should not have existing request/reloc_info when next inplace relocalization is called", 121, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *(unsigned __int8 *)(a3 + 24);
  v714 = 0;
  v713 = 0;
  v715 = 0;
  v711 = 0;
  v710 = 0;
  v712 = 0;
  v708 = 0;
  v707 = 0;
  v709 = 0;
  v705 = 0;
  v704 = 0;
  v706 = 0;
  v702 = 0;
  v701 = 0;
  v703 = 0;
  v691 = -1;
  v690.tv_nsec = -1;
  v690.tv_sec = -1;
  v666 = a1;
  if (!v11)
  {
    v31 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
    v32 = (unsigned int *)a1[813];
    v33 = (unsigned int *)a1[814];
    if (v32 != v33)
    {
      v34 = v32 + 2;
      if (v32 + 2 != v33)
      {
        v35 = *(_QWORD *)v32;
        v36 = v32 + 2;
        do
        {
          v38 = *(_QWORD *)v36;
          v36 += 2;
          v37 = v38;
          if (v38 < v35)
          {
            v35 = v37;
            v32 = v34;
          }
          v34 = v36;
        }
        while (v36 != v33);
      }
    }
    sub_20F133584(v31, *v32, 0, 1, (_QWORD *)(a1[921] + 1208), &v692, &v713, (char **)&v710, (uint64_t)__p, &v701, 1, (uint64_t)&v707, 1);
    if (LOBYTE(__p[1].tv_nsec))
    {
      v658 = a5;
      v664 = a2;
      v690 = __p[0];
      LODWORD(v691) = __p[1].tv_sec;
      object[0] = 0;
      v689 = 0;
      v30 = v704;
      goto LABEL_32;
    }
    sub_20F02E848(&v667);
    if (**(int **)(v667.i64[0] + 56) > 2
      || (v85 = *(unsigned __int8 *)(v667.i64[0] + 72),
          v86 = sub_20E8C31DC(v667.i64[0], "OSLogSurrogateAppender", 1, 0),
          v87 = v86,
          !v85)
      && !v86)
    {
LABEL_381:
      v297 = 0;
      goto LABEL_893;
    }
    v736[0] = &v667;
    v736[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)&v737[0] = std::chrono::system_clock::now();
    DWORD2(v737[0]) = 2;
    *(_QWORD *)&v737[1] = "unknown file";
    DWORD2(v737[1]) = 1915;
    *(_QWORD *)&v737[3] = 0;
    *(_QWORD *)&v737[2] = "unknown function";
    *((_QWORD *)&v737[2] + 1) = 0;
    v88 = *(_QWORD *)v736[0];
    v89 = *(_QWORD *)v736[0] + 16;
    if (*(char *)(*(_QWORD *)v736[0] + 39) < 0)
    {
      v91 = *(const char **)(v88 + 16);
      v90 = *(_QWORD *)(v88 + 24);
    }
    else
    {
      v90 = *(unsigned __int8 *)(*(_QWORD *)v736[0] + 39);
      v91 = (const char *)(*(_QWORD *)v736[0] + 16);
    }
    v247 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v247 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v248 = byte_254A4A4F8;
    else
      v248 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v249 = byte_254A4A4F8[23];
    else
      v249 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v248, v91);
    v250 = &object[8];
    if (v249 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v249 >= 0x17)
    {
      v251 = v87;
      v252 = v91;
      v253 = v88;
      v254 = v85;
      v255 = v89;
      v256 = (v249 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v249 | 7) != 0x17)
        v256 = v249 | 7;
      v257 = v256 + 1;
      v250 = operator new(v256 + 1);
      *(_QWORD *)&object[24] = v257 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v250;
      *(_QWORD *)&object[16] = v249;
      v89 = v255;
      v85 = v254;
      v88 = v253;
      v91 = v252;
      v87 = v251;
    }
    else
    {
      object[31] = v249;
      if (!v249)
      {
LABEL_311:
        v250[v249] = 0;
        object[32] = 1;
        v258 = &object[40];
        if (v90 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v90 >= 0x17)
        {
          v259 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v90 | 7) != 0x17)
            v259 = v90 | 7;
          v260 = v259 + 1;
          v258 = operator new(v259 + 1);
          v677.i64[1] = v260 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v258;
          v677.i64[0] = v90;
        }
        else
        {
          v677.i8[15] = v90;
          if (!v90)
            goto LABEL_319;
        }
        memmove(v258, v91, v90);
LABEL_319:
        v258[v90] = 0;
        LOBYTE(v678) = 1;
        v261 = *(NSObject **)object;
        if (v677.i8[15] < 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v87 && *(_QWORD *)(v87 + 24))
        {
          v262 = _os_log_pack_size();
          v263 = (std::__shared_weak_count_vtbl *)operator new(v262, (std::align_val_t)8uLL);
          v264 = (std::__shared_weak_count *)operator new();
          v265 = v264;
          v264->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v264->__shared_owners_;
          v264->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v264->__shared_weak_owners_ = 0;
          v264[1].__vftable = v263;
          *(_QWORD *)object = v263;
          *(_QWORD *)&object[8] = v263;
          *(_QWORD *)&object[16] = v264;
          do
            v267 = __ldxr(p_shared_owners);
          while (__stxr(v267 + 1, p_shared_owners));
          memset(&object[24], 0, 24);
          do
            v268 = __ldaxr(p_shared_owners);
          while (__stlxr(v268 - 1, p_shared_owners));
          if (!v268)
          {
            ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
            std::__shared_weak_count::__release_weak(v265);
          }
          v269 = *(_QWORD *)object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v270 = operator new();
          v271 = *(unsigned __int8 *)(v88 + 39);
          if ((v271 & 0x80u) == 0)
            v272 = v89;
          else
            v272 = *(_QWORD *)(v88 + 16);
          if ((v271 & 0x80u) != 0)
            v271 = *(_QWORD *)(v88 + 24);
          *(_QWORD *)v270 = v269;
          *(_OWORD *)(v270 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v270 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v270 + 40) = v272;
          *(_QWORD *)(v270 + 48) = v271;
          *(_BYTE *)(v270 + 56) = 2;
          *(_QWORD *)v730 = 0;
          v720.tv_sec = v270;
          (*(void (**)(_QWORD, timespec *))(**(_QWORD **)(v87 + 24) + 40))(*(_QWORD *)(v87 + 24), &v720);
          tv_sec = v720.tv_sec;
          v720.tv_sec = 0;
          if (tv_sec)
          {
            v274 = *(std::__shared_weak_count **)(tv_sec + 32);
            if (v274)
            {
              v275 = (unint64_t *)&v274->__shared_owners_;
              do
                v276 = __ldaxr(v275);
              while (__stlxr(v276 - 1, v275));
              if (!v276)
              {
                ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                std::__shared_weak_count::__release_weak(v274);
              }
            }
            v277 = *(std::__shared_weak_count **)(tv_sec + 16);
            if (v277)
            {
              v278 = (unint64_t *)&v277->__shared_owners_;
              do
                v279 = __ldaxr(v278);
              while (__stlxr(v279 - 1, v278));
              if (!v279)
              {
                ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                std::__shared_weak_count::__release_weak(v277);
              }
            }
            MEMORY[0x212BC6398](tv_sec, 0x10F0C40B62ED6C6);
            v280 = *(_QWORD *)v730;
            *(_QWORD *)v730 = 0;
            if (v280)
            {
              v281 = *(std::__shared_weak_count **)(v280 + 32);
              if (v281)
              {
                v282 = (unint64_t *)&v281->__shared_owners_;
                do
                  v283 = __ldaxr(v282);
                while (__stlxr(v283 - 1, v282));
                if (!v283)
                {
                  ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                  std::__shared_weak_count::__release_weak(v281);
                }
              }
              v284 = *(std::__shared_weak_count **)(v280 + 16);
              if (v284)
              {
                v285 = (unint64_t *)&v284->__shared_owners_;
                do
                  v286 = __ldaxr(v285);
                while (__stlxr(v286 - 1, v285));
                if (!v286)
                {
                  ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                  std::__shared_weak_count::__release_weak(v284);
                }
              }
              MEMORY[0x212BC6398](v280, 0x10F0C40B62ED6C6);
            }
          }
          v287 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v288 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v289 = __ldaxr(v288);
            while (__stlxr(v289 - 1, v288));
            if (!v289)
            {
              ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
              std::__shared_weak_count::__release_weak(v287);
            }
          }
          v290 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v291 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v292 = __ldaxr(v291);
            while (__stlxr(v292 - 1, v291));
            if (!v292)
            {
              ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
              std::__shared_weak_count::__release_weak(v290);
            }
          }
        }
        else
        {
          os_log_type_enabled(v261, OS_LOG_TYPE_DEBUG);
          *(_WORD *)object = 0;
          v293 = (void *)_os_log_send_and_compose_impl();
          if (v293)
            free(v293);
        }
        if (v85)
        {
          sub_20E8C003C((uint64_t)v736, "failed to retrieve query frame id");
          sub_20E863570((uint64_t)v736);
        }
        sub_20E863570((uint64_t)v736);
        v294 = *(std::__shared_weak_count **)&v737[3];
        if (*(_QWORD *)&v737[3])
        {
          v295 = (unint64_t *)(*(_QWORD *)&v737[3] + 8);
          do
            v296 = __ldaxr(v295);
          while (__stlxr(v296 - 1, v295));
          if (!v296)
          {
            ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
            std::__shared_weak_count::__release_weak(v294);
          }
        }
        goto LABEL_381;
      }
    }
    memmove(v250, v248, v249);
    goto LABEL_311;
  }
  v690 = *(timespec *)a3;
  LODWORD(v691) = *(_DWORD *)(a3 + 16);
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, timespec *))(*a1 + 200))(object, a1, &v690);
  if (!v681)
    sub_20E866B34();
  v12.f64[0] = *(float64_t *)object;
  v12.f64[1] = *(float64_t *)&object[24];
  _Q2.f64[0] = *(float64_t *)&object[16];
  _Q2.f64[1] = *(float64_t *)&object[40];
  v14 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v12, v679.f64[0]), (float64x2_t)vextq_s8(*(int8x16_t *)object, *(int8x16_t *)&object[32], 8uLL), v679, 1), _Q2, v680);
  *(_QWORD *)&_Q2.f64[0] = vextq_s8(v677, v677, 8uLL).u64[0];
  v650 = (int8x16_t)v679;
  v654 = v680;
  __asm { FMLA            D1, D2, V4.D[1] }
  v646 = *(float64x2_t *)&object[16];
  v648 = *(float64x2_t *)object;
  v692 = *(float64x2_t *)object;
  v693 = *(double *)&object[16];
  v694 = -v14.f64[0];
  v695 = vextq_s8(*(int8x16_t *)&object[16], *(int8x16_t *)&object[32], 8uLL);
  v642 = (float64x2_t)v677;
  v644 = *(float64x2_t *)&object[32];
  v696 = *(double *)&object[40];
  v697 = -v14.f64[1];
  v698 = v677;
  v640 = v678;
  v699 = v678;
  v700 = -(_D1 + v678 * v680);
  v20 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
  v21 = (unsigned int *)a1[813];
  v22 = (unsigned int *)a1[814];
  if (v21 != v22)
  {
    v23 = v21 + 2;
    if (v21 + 2 != v22)
    {
      v24 = *(_QWORD *)v21;
      v25 = v21 + 2;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 2;
        v26 = v27;
        if (v27 < v24)
        {
          v24 = v26;
          v21 = v23;
        }
        v23 = v25;
      }
      while (v25 != v22);
    }
  }
  sub_20F133B6C(v20, (uint64_t)&v690, *v21, 0, 1, &v692, 1u, &v713, (char **)&v710, (uint64_t)&v704, 1, 0, 0, 0, 0);
  v658 = a5;
  v664 = a2;
  v29 = (float64x2_t)vextq_s8(v650, v650, 8uLL);
  object[0] = 0;
  v689 = 0;
  v30 = v704;
  if (v704 == v705 || !*(_BYTE *)(a4 + 128))
  {
LABEL_32:
    v52 = a1;
    v71 = (_QWORD *)a1[921];
    v705 = v30;
    v72 = (unint64_t)((v714 - (_BYTE *)v713) >> 3) >> 1;
    if (v72 > (v706 - v30) >> 2)
    {
      if (v714 - (_BYTE *)v713 < 0)
        sub_20E867F44();
      v704 = operator new(4 * v72);
      v705 = v704;
      v706 = (char *)v704 + 4 * v72;
      if (v30)
        operator delete(v30);
    }
    v73 = v71[2902];
    if (*(_BYTE *)(v73 + 1043))
    {
      v74 = *(_QWORD **)(v73 + 4848);
      v75 = v74[106];
      if (v75)
      {
        if (*(_BYTE *)(v74[102] + 328 * v75 - 40))
          goto LABEL_39;
LABEL_59:
        v667 = 0uLL;
        v668 = 0.0;
        v728 = 0x7FEFFFFFFFFFFFFFLL;
        if ((sub_20F403B58(v71[18], (uint64_t *)&v713, (uint64_t)&v710, (__int128 *)&v692, (long double *)&v728, &v667, (char **)&v704) & 1) != 0)
        {
          v98 = __sincos_stret(*(double *)&v728);
          cosval = v98.__cosval;
          v734.f64[0] = 0.0;
          v733 = 0.0;
          *(double *)v730 = v98.__cosval;
          *(double *)&v730[8] = v98.__sinval;
          *(_QWORD *)&v730[16] = 0;
          v731.i64[0] = v667.i64[0];
          *(double *)&v731.i64[1] = -v98.__sinval;
          v732[0] = v98.__cosval;
          v732[1] = 0.0;
          v732[2] = *(double *)&v667.i64[1];
          v734.f64[1] = 1.0;
          v76 = 1.0;
          v77 = v98.__cosval;
          v735 = v668;
LABEL_61:
          v99 = *(double *)(v71[21] + 2456);
          v100 = (v76 + cosval + v77 + -1.0) * 0.5;
          if (v100 > 1.0)
            v100 = 1.0;
          if (v100 < -1.0)
            v100 = -1.0;
          v108 = acos(v100);
          if (v108 * 57.2957795 <= v99)
          {
            sub_20F02D044((uint64_t)&v720, (uint64_t)v71, v690.tv_nsec, (uint64_t)v730, v658, v108 * 57.2957795, v101, v102, v103, v104, v105, v106, v107);
            if (v726)
            {
              v109 = v691;
              v110 = v71[5];
              if (v110)
              {
                v111 = v71[3];
                while (1)
                {
                  v112 = *(int8x8_t **)(*v71 + 16 * (v111 % ((uint64_t)(v71[1] - *v71) >> 4)));
                  if (v112[6].i32[0] == LODWORD(v690.tv_nsec))
                    break;
                  ++v111;
                  if (!--v110)
                    goto LABEL_71;
                }
              }
              else
              {
LABEL_71:
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1269, (uint64_t)"camera_set_ftr", 14, (uint64_t)"Missing camera set features in front-end", 40, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_921;
                }
                v112 = 0;
              }
              v113 = sub_20FCBA6DC(v112, HIWORD(v109), (unsigned __int16)v109);
              if (v114
                || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1272, (uint64_t)"frame_bundle_ref", 16, (uint64_t)"Missing Frame bundle ref in front-end", 37, (void (*)(void **))sub_21023DDB0))
              {
                v667 = 0uLL;
                v668 = 0.0;
                v115 = v71[37] - v71[36];
                if (v115)
                {
                  v116 = 0x86BCA1AF286BCA1BLL * (v115 >> 3);
                  if (v116 >> 60)
                    sub_20E867F44();
                  v667.i64[0] = (uint64_t)operator new(0x6BCA1AF286BCA1B0 * (v115 >> 3));
                  v667.i64[1] = v667.i64[0];
                  *(_QWORD *)&v668 = v667.i64[0] + 16 * v116;
                }
                v117 = v113 + 768;
                sub_20FCC2C1C(v117, 0, &__p[0].tv_sec);
                v118 = (_DWORD *)__p[0].tv_sec;
                tv_nsec = __p[0].tv_nsec;
                if (__p[0].tv_sec == __p[0].tv_nsec)
                {
LABEL_121:
                  if (v118)
                  {
                    __p[0].tv_nsec = (uint64_t)v118;
                    operator delete(v118);
                  }
                  *(timespec *)&__p[0].tv_nsec = *(timespec *)v117;
                  v151 = *(_DWORD *)(v117 + 16);
                  LODWORD(__p[0].tv_sec) = 2;
                  LODWORD(__p[1].tv_nsec) = v151;
                  __p[6] = *(timespec *)v724;
                  __p[7] = *(timespec *)&v724[16];
                  __p[2] = v720;
                  __p[3] = v721;
                  __p[5] = v723;
                  __p[4] = v722;
                  __p[8].tv_sec = v725;
                  __p[8].tv_nsec = (v705 - (_BYTE *)v704) >> 2;
                  memset(&__p[9], 0, 24);
                  v152 = (void *)v667.i64[0];
                  v153 = v667.i64[1] - v667.i64[0];
                  if (v667.i64[1] == v667.i64[0])
                  {
                    v155 = 0;
                    v154 = 0;
                  }
                  else
                  {
                    if (v153 < 0)
                      sub_20E867F44();
                    v154 = (char *)operator new(v667.i64[1] - v667.i64[0]);
                    v155 = &v154[16 * (v153 >> 4)];
                    memcpy(v154, v152, v153 - 4);
                  }
                  v737[5] = __p[6];
                  v737[6] = __p[7];
                  v737[7] = __p[8];
                  v737[1] = __p[2];
                  v737[2] = __p[3];
                  v737[4] = __p[5];
                  v737[3] = __p[4];
                  v737[0] = __p[1];
                  *(timespec *)v736 = __p[0];
                  *(_QWORD *)&v737[8] = v154;
                  *((_QWORD *)&v737[8] + 1) = v155;
                  *(_QWORD *)&v737[9] = v155;
                  BYTE8(v737[9]) = 0;
                  v738 = 0;
                  v739 = 1;
                  v740 = 1;
                  if (v152)
                  {
                    v667.i64[1] = (uint64_t)v152;
                    operator delete(v152);
                  }
                  goto LABEL_777;
                }
                while (1)
                {
                  v127 = v71[36];
                  v128 = v71[37];
                  if (v128 != v127)
                  {
                    v129 = 0x86BCA1AF286BCA1BLL * ((v128 - v127) >> 3);
                    v130 = *(_QWORD *)v118;
                    do
                    {
                      v131 = v129 >> 1;
                      v132 = v127 + 152 * (v129 >> 1);
                      if (*(_QWORD *)v132 < v130 || *(_QWORD *)v132 == v130 && *(_DWORD *)(v132 + 8) < v118[2])
                      {
                        v127 = v132 + 152;
                        v131 = v129 + ~v131;
                      }
                      v129 = v131;
                    }
                    while (v131);
                  }
                  if (v127 == v128 || *(_QWORD *)v127 != *(_QWORD *)v118 || *(_DWORD *)(v127 + 8) != v118[2])
                    goto LABEL_87;
                  v133 = (_DWORD *)v667.i64[1];
                  if (v667.i64[1] >= *(_QWORD *)&v668)
                    break;
                  *(_OWORD *)v667.i64[1] = *(_OWORD *)v118;
                  v126 = v133 + 4;
LABEL_86:
                  v667.i64[1] = (uint64_t)v126;
LABEL_87:
                  v118 += 4;
                  if (v118 == (_DWORD *)tv_nsec)
                  {
                    v118 = (_DWORD *)__p[0].tv_sec;
                    v52 = v666;
                    goto LABEL_121;
                  }
                }
                v134 = (_DWORD *)v667.i64[0];
                v135 = (v667.i64[1] - v667.i64[0]) >> 4;
                v136 = v135 + 1;
                if ((unint64_t)(v135 + 1) >> 60)
                  sub_20E867F44();
                v137 = *(_QWORD *)&v668 - v667.i64[0];
                if ((*(_QWORD *)&v668 - v667.i64[0]) >> 3 > v136)
                  v136 = v137 >> 3;
                if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0)
                  v138 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v138 = v136;
                if (v138)
                {
                  if (v138 >> 60)
                    sub_20E877A38();
                  v139 = (char *)operator new(16 * v138);
                  v140 = &v139[16 * v135];
                  *(_OWORD *)v140 = *(_OWORD *)v118;
                  v141 = (uint64_t)v140;
                  if (v133 == v134)
                    goto LABEL_113;
                }
                else
                {
                  v139 = 0;
                  v140 = (char *)(16 * v135);
                  *(_OWORD *)(16 * v135) = *(_OWORD *)v118;
                  v141 = 16 * v135;
                  if (v133 == v134)
                    goto LABEL_113;
                }
                do
                {
                  v142 = *((_QWORD *)v133 - 2);
                  v133 -= 4;
                  v143 = v133[2];
                  *(_QWORD *)(v141 - 16) = v142;
                  v141 -= 16;
                  *(_DWORD *)(v141 + 8) = v143;
                }
                while (v133 != v134);
                v133 = (_DWORD *)v667.i64[0];
LABEL_113:
                v144 = &v139[16 * v138];
                v126 = v140 + 16;
                v667.i64[0] = v141;
                v667.i64[1] = (uint64_t)(v140 + 16);
                v668 = *(double *)&v144;
                if (v133)
                  operator delete(v133);
                goto LABEL_86;
              }
LABEL_921:
              abort();
            }
LABEL_691:
            LOBYTE(v736[0]) = 0;
            v740 = 0;
            goto LABEL_777;
          }
          sub_20F02E848(&v729);
          if (**(int **)(v729 + 56) > 2)
            goto LABEL_691;
          v120 = *(unsigned __int8 *)(v729 + 72);
          v121 = sub_20E8C31DC(v729, "OSLogSurrogateAppender", 1, 0);
          v122 = v121;
          if (!v120 && !v121)
            goto LABEL_691;
          v720.tv_sec = (__darwin_time_t)&v729;
          v720.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
          v721.tv_sec = std::chrono::system_clock::now().__d_.__rep_;
          LODWORD(v721.tv_nsec) = 2;
          v722.tv_sec = (__darwin_time_t)"unknown file";
          LODWORD(v722.tv_nsec) = 1254;
          *(_QWORD *)v724 = 0;
          v723.tv_sec = (__darwin_time_t)"unknown function";
          v723.tv_nsec = 0;
          v123 = *(_QWORD *)v720.tv_sec;
          if (*(char *)(*(_QWORD *)v720.tv_sec + 39) < 0)
          {
            v125 = *(const char **)(v123 + 16);
            v124 = *(_QWORD *)(v123 + 24);
          }
          else
          {
            v124 = *(unsigned __int8 *)(*(_QWORD *)v720.tv_sec + 39);
            v125 = (const char *)(*(_QWORD *)v720.tv_sec + 16);
          }
          v660 = *(_QWORD *)v720.tv_sec + 16;
          v298 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v298 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)__p);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
            if (LOBYTE(__p[1].tv_nsec) && SHIBYTE(__p[1].tv_sec) < 0)
              operator delete((void *)__p[0].tv_sec);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v299 = byte_254A4A4F8;
          else
            v299 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v300 = byte_254A4A4F8[23];
          else
            v300 = *(_QWORD *)&byte_254A4A4F8[8];
          __p[0].tv_sec = (__darwin_time_t)os_log_create(v299, v125);
          p_tv_nsec = &__p[0].tv_nsec;
          if (v300 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v300 >= 0x17)
          {
            v302 = (v300 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v300 | 7) != 0x17)
              v302 = v300 | 7;
            v303 = v302 + 1;
            p_tv_nsec = operator new(v302 + 1);
            __p[1].tv_nsec = v303 | 0x8000000000000000;
            __p[0].tv_nsec = (uint64_t)p_tv_nsec;
            __p[1].tv_sec = v300;
            v52 = v666;
          }
          else
          {
            HIBYTE(__p[1].tv_nsec) = v300;
            if (!v300)
            {
LABEL_398:
              p_tv_nsec[v300] = 0;
              LOBYTE(__p[2].tv_sec) = 1;
              v304 = &__p[2].tv_nsec;
              if (v124 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v124 >= 0x17)
              {
                v305 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v124 | 7) != 0x17)
                  v305 = v124 | 7;
                v306 = v305 + 1;
                v304 = operator new(v305 + 1);
                __p[3].tv_nsec = v306 | 0x8000000000000000;
                __p[2].tv_nsec = (uint64_t)v304;
                __p[3].tv_sec = v124;
              }
              else
              {
                HIBYTE(__p[3].tv_nsec) = v124;
                if (!v124)
                  goto LABEL_406;
              }
              memmove(v304, v125, v124);
LABEL_406:
              *((_BYTE *)v304 + v124) = 0;
              LOBYTE(__p[4].tv_sec) = 1;
              v307 = __p[0].tv_sec;
              if (SHIBYTE(__p[3].tv_nsec) < 0)
                operator delete((void *)__p[2].tv_nsec);
              if (LOBYTE(__p[2].tv_sec) && SHIBYTE(__p[1].tv_nsec) < 0)
                operator delete((void *)__p[0].tv_nsec);
              if (__p[0].tv_sec)
                os_release((void *)__p[0].tv_sec);
              if (v122 && *(_QWORD *)(v122 + 24))
              {
                v308 = _os_log_pack_size();
                v309 = (std::__shared_weak_count_vtbl *)operator new(v308, (std::align_val_t)8uLL);
                v310 = (std::__shared_weak_count *)operator new();
                v311 = v310;
                v310->__shared_owners_ = 0;
                v312 = (unint64_t *)&v310->__shared_owners_;
                v310->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v310->__shared_weak_owners_ = 0;
                v310[1].__vftable = v309;
                __p[0].tv_sec = (__darwin_time_t)v309;
                __p[0].tv_nsec = (uint64_t)v309;
                __p[1].tv_sec = (__darwin_time_t)v310;
                do
                  v313 = __ldxr(v312);
                while (__stxr(v313 + 1, v312));
                __p[2].tv_sec = 0;
                __p[1].tv_nsec = 0;
                __p[2].tv_nsec = 0;
                do
                  v314 = __ldaxr(v312);
                while (__stlxr(v314 - 1, v312));
                if (!v314)
                {
                  ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                  std::__shared_weak_count::__release_weak(v311);
                }
                v315 = __p[0].tv_sec;
                v316 = _os_log_pack_fill();
                v317 = v731.i64[0];
                v318 = v732[2];
                v319 = v735;
                *(_DWORD *)v316 = 134218752;
                *(double *)(v316 + 4) = v108;
                *(_WORD *)(v316 + 12) = 2048;
                *(_QWORD *)(v316 + 14) = v317;
                *(_WORD *)(v316 + 22) = 2048;
                *(double *)(v316 + 24) = v318;
                *(_WORD *)(v316 + 32) = 2048;
                *(double *)(v316 + 34) = v319;
                v320 = operator new();
                v321 = *(unsigned __int8 *)(v123 + 39);
                v322 = v660;
                if ((v321 & 0x80u) != 0)
                {
                  v322 = *(_QWORD *)(v123 + 16);
                  v321 = *(_QWORD *)(v123 + 24);
                }
                *(_QWORD *)v320 = v315;
                *(timespec *)(v320 + 8) = *(timespec *)&__p[0].tv_nsec;
                __p[0].tv_nsec = 0;
                __p[1].tv_sec = 0;
                *(timespec *)(v320 + 24) = *(timespec *)&__p[1].tv_nsec;
                __p[1].tv_nsec = 0;
                __p[2].tv_sec = 0;
                *(_QWORD *)(v320 + 40) = v322;
                *(_QWORD *)(v320 + 48) = v321;
                *(_BYTE *)(v320 + 56) = 2;
                *(double *)&v717 = 0.0;
                v667.i64[0] = v320;
                (*(void (**)(_QWORD, int64x2_t *))(**(_QWORD **)(v122 + 24) + 40))(*(_QWORD *)(v122 + 24), &v667);
                v323 = v667.i64[0];
                v667.i64[0] = 0;
                if (v323)
                {
                  v324 = *(std::__shared_weak_count **)(v323 + 32);
                  if (v324)
                  {
                    v325 = (unint64_t *)&v324->__shared_owners_;
                    do
                      v326 = __ldaxr(v325);
                    while (__stlxr(v326 - 1, v325));
                    if (!v326)
                    {
                      ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                      std::__shared_weak_count::__release_weak(v324);
                    }
                  }
                  v327 = *(std::__shared_weak_count **)(v323 + 16);
                  if (v327)
                  {
                    v328 = (unint64_t *)&v327->__shared_owners_;
                    do
                      v329 = __ldaxr(v328);
                    while (__stlxr(v329 - 1, v328));
                    if (!v329)
                    {
                      ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
                      std::__shared_weak_count::__release_weak(v327);
                    }
                  }
                  MEMORY[0x212BC6398](v323, 0x10F0C40B62ED6C6);
                  v330 = v717;
                  *(double *)&v717 = 0.0;
                  if (v330)
                  {
                    v331 = (std::__shared_weak_count *)*((_QWORD *)v330 + 4);
                    if (v331)
                    {
                      v332 = (unint64_t *)&v331->__shared_owners_;
                      do
                        v333 = __ldaxr(v332);
                      while (__stlxr(v333 - 1, v332));
                      if (!v333)
                      {
                        ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                        std::__shared_weak_count::__release_weak(v331);
                      }
                    }
                    v334 = (std::__shared_weak_count *)*((_QWORD *)v330 + 2);
                    if (v334)
                    {
                      v335 = (unint64_t *)&v334->__shared_owners_;
                      do
                        v336 = __ldaxr(v335);
                      while (__stlxr(v336 - 1, v335));
                      if (!v336)
                      {
                        ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                        std::__shared_weak_count::__release_weak(v334);
                      }
                    }
                    MEMORY[0x212BC6398](v330, 0x10F0C40B62ED6C6);
                  }
                }
                v337 = (std::__shared_weak_count *)__p[2].tv_sec;
                if (__p[2].tv_sec)
                {
                  v338 = (unint64_t *)(__p[2].tv_sec + 8);
                  do
                    v339 = __ldaxr(v338);
                  while (__stlxr(v339 - 1, v338));
                  if (!v339)
                  {
                    ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
                    std::__shared_weak_count::__release_weak(v337);
                  }
                }
                v340 = (std::__shared_weak_count *)__p[1].tv_sec;
                if (__p[1].tv_sec)
                {
                  v341 = (unint64_t *)(__p[1].tv_sec + 8);
                  do
                    v342 = __ldaxr(v341);
                  while (__stlxr(v342 - 1, v341));
                  if (!v342)
                  {
                    ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
                    std::__shared_weak_count::__release_weak(v340);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v307, OS_LOG_TYPE_DEBUG);
                LODWORD(__p[0].tv_sec) = 134218752;
                *(double *)((char *)&__p[0].tv_sec + 4) = v108;
                WORD2(__p[0].tv_nsec) = 2048;
                *(uint64_t *)((char *)&__p[0].tv_nsec + 6) = v731.i64[0];
                HIWORD(__p[1].tv_sec) = 2048;
                *(double *)&__p[1].tv_nsec = v732[2];
                LOWORD(__p[2].tv_sec) = 2048;
                *(double *)((char *)&__p[2].tv_sec + 2) = v735;
                v343 = (void *)_os_log_send_and_compose_impl();
                if (v343)
                  free(v343);
              }
              if (v120)
              {
                sub_20E8C003C((uint64_t)&v720, "Reject state correction due to large update: Theta: %f, translation: %f, %f, %f", v108, *(double *)v731.i64, v732[2], v735);
                sub_20E863570((uint64_t)&v720);
              }
              sub_20E863570((uint64_t)&v720);
              v244 = *(std::__shared_weak_count **)v724;
              if (!*(_QWORD *)v724)
                goto LABEL_691;
              v344 = (unint64_t *)(*(_QWORD *)v724 + 8);
              do
                v246 = __ldaxr(v344);
              while (__stlxr(v246 - 1, v344));
              goto LABEL_689;
            }
          }
          memmove(p_tv_nsec, v299, v300);
          goto LABEL_398;
        }
        sub_20F02E848(&v727);
        if (**(int **)(v727 + 56) > 2)
          goto LABEL_691;
        v145 = *(unsigned __int8 *)(v727 + 72);
        v146 = sub_20E8C31DC(v727, "OSLogSurrogateAppender", 1, 0);
        v147 = v146;
        if (!v145 && !v146)
          goto LABEL_691;
        v720.tv_sec = (__darwin_time_t)&v727;
        v720.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
        v721.tv_sec = std::chrono::system_clock::now().__d_.__rep_;
        LODWORD(v721.tv_nsec) = 2;
        v722.tv_sec = (__darwin_time_t)"unknown file";
        LODWORD(v722.tv_nsec) = 1226;
        *(_QWORD *)v724 = 0;
        v723.tv_sec = (__darwin_time_t)"unknown function";
        v723.tv_nsec = 0;
        v148 = *(_QWORD *)v720.tv_sec;
        if (*(char *)(*(_QWORD *)v720.tv_sec + 39) < 0)
        {
          v150 = *(const char **)(v148 + 16);
          v149 = *(_QWORD *)(v148 + 24);
        }
        else
        {
          v149 = *(unsigned __int8 *)(*(_QWORD *)v720.tv_sec + 39);
          v150 = (const char *)(*(_QWORD *)v720.tv_sec + 16);
        }
        v661 = *(_QWORD *)v720.tv_sec + 16;
        v434 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v434 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)__p);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
          if (LOBYTE(__p[1].tv_nsec) && SHIBYTE(__p[1].tv_sec) < 0)
            operator delete((void *)__p[0].tv_sec);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v435 = byte_254A4A4F8;
        else
          v435 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v436 = byte_254A4A4F8[23];
        else
          v436 = *(_QWORD *)&byte_254A4A4F8[8];
        __p[0].tv_sec = (__darwin_time_t)os_log_create(v435, v150);
        v437 = &__p[0].tv_nsec;
        if (v436 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v436 >= 0x17)
        {
          v438 = (v436 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v436 | 7) != 0x17)
            v438 = v436 | 7;
          v439 = v438 + 1;
          v437 = operator new(v438 + 1);
          __p[1].tv_nsec = v439 | 0x8000000000000000;
          __p[0].tv_nsec = (uint64_t)v437;
          __p[1].tv_sec = v436;
          v52 = v666;
        }
        else
        {
          HIBYTE(__p[1].tv_nsec) = v436;
          if (!v436)
          {
LABEL_624:
            v437[v436] = 0;
            LOBYTE(__p[2].tv_sec) = 1;
            v440 = &__p[2].tv_nsec;
            if (v149 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v149 >= 0x17)
            {
              v441 = (v149 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v149 | 7) != 0x17)
                v441 = v149 | 7;
              v442 = v441 + 1;
              v440 = operator new(v441 + 1);
              __p[3].tv_nsec = v442 | 0x8000000000000000;
              __p[2].tv_nsec = (uint64_t)v440;
              __p[3].tv_sec = v149;
            }
            else
            {
              HIBYTE(__p[3].tv_nsec) = v149;
              if (!v149)
                goto LABEL_632;
            }
            memmove(v440, v150, v149);
LABEL_632:
            *((_BYTE *)v440 + v149) = 0;
            LOBYTE(__p[4].tv_sec) = 1;
            v443 = __p[0].tv_sec;
            if (SHIBYTE(__p[3].tv_nsec) < 0)
              operator delete((void *)__p[2].tv_nsec);
            if (LOBYTE(__p[2].tv_sec) && SHIBYTE(__p[1].tv_nsec) < 0)
              operator delete((void *)__p[0].tv_nsec);
            if (__p[0].tv_sec)
              os_release((void *)__p[0].tv_sec);
            if (v147 && *(_QWORD *)(v147 + 24))
            {
              v444 = _os_log_pack_size();
              v445 = (std::__shared_weak_count_vtbl *)operator new(v444, (std::align_val_t)8uLL);
              v446 = (std::__shared_weak_count *)operator new();
              v447 = v446;
              v446->__shared_owners_ = 0;
              v448 = (unint64_t *)&v446->__shared_owners_;
              v446->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v446->__shared_weak_owners_ = 0;
              v446[1].__vftable = v445;
              __p[0].tv_sec = (__darwin_time_t)v445;
              __p[0].tv_nsec = (uint64_t)v445;
              __p[1].tv_sec = (__darwin_time_t)v446;
              do
                v449 = __ldxr(v448);
              while (__stxr(v449 + 1, v448));
              __p[2].tv_sec = 0;
              __p[1].tv_nsec = 0;
              __p[2].tv_nsec = 0;
              do
                v450 = __ldaxr(v448);
              while (__stlxr(v450 - 1, v448));
              if (!v450)
              {
                ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
                std::__shared_weak_count::__release_weak(v447);
              }
              v451 = __p[0].tv_sec;
              *(_WORD *)_os_log_pack_fill() = 0;
              v452 = COERCE_DOUBLE(operator new());
              v453 = *(unsigned __int8 *)(v148 + 39);
              v454 = v661;
              if ((v453 & 0x80u) != 0)
              {
                v454 = *(_QWORD *)(v148 + 16);
                v453 = *(_QWORD *)(v148 + 24);
              }
              **(_QWORD **)&v452 = v451;
              *(timespec *)(*(_QWORD *)&v452 + 8) = *(timespec *)&__p[0].tv_nsec;
              __p[0].tv_nsec = 0;
              __p[1].tv_sec = 0;
              *(timespec *)(*(_QWORD *)&v452 + 24) = *(timespec *)&__p[1].tv_nsec;
              __p[1].tv_nsec = 0;
              __p[2].tv_sec = 0;
              *(_QWORD *)(*(_QWORD *)&v452 + 40) = v454;
              *(_QWORD *)(*(_QWORD *)&v452 + 48) = v453;
              *(_BYTE *)(*(_QWORD *)&v452 + 56) = 2;
              v729 = 0;
              *(double *)&v717 = v452;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v147 + 24) + 40))(*(_QWORD *)(v147 + 24), &v717);
              v455 = v717;
              *(double *)&v717 = 0.0;
              if (v455)
              {
                v456 = (std::__shared_weak_count *)*((_QWORD *)v455 + 4);
                if (v456)
                {
                  v457 = (unint64_t *)&v456->__shared_owners_;
                  do
                    v458 = __ldaxr(v457);
                  while (__stlxr(v458 - 1, v457));
                  if (!v458)
                  {
                    ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
                    std::__shared_weak_count::__release_weak(v456);
                  }
                }
                v459 = (std::__shared_weak_count *)*((_QWORD *)v455 + 2);
                if (v459)
                {
                  v460 = (unint64_t *)&v459->__shared_owners_;
                  do
                    v461 = __ldaxr(v460);
                  while (__stlxr(v461 - 1, v460));
                  if (!v461)
                  {
                    ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
                    std::__shared_weak_count::__release_weak(v459);
                  }
                }
                MEMORY[0x212BC6398](v455, 0x10F0C40B62ED6C6);
                v462 = v729;
                v729 = 0;
                if (v462)
                {
                  v463 = *(std::__shared_weak_count **)(v462 + 32);
                  if (v463)
                  {
                    v464 = (unint64_t *)&v463->__shared_owners_;
                    do
                      v465 = __ldaxr(v464);
                    while (__stlxr(v465 - 1, v464));
                    if (!v465)
                    {
                      ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
                      std::__shared_weak_count::__release_weak(v463);
                    }
                  }
                  v466 = *(std::__shared_weak_count **)(v462 + 16);
                  if (v466)
                  {
                    v467 = (unint64_t *)&v466->__shared_owners_;
                    do
                      v468 = __ldaxr(v467);
                    while (__stlxr(v468 - 1, v467));
                    if (!v468)
                    {
                      ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
                      std::__shared_weak_count::__release_weak(v466);
                    }
                  }
                  MEMORY[0x212BC6398](v462, 0x10F0C40B62ED6C6);
                }
              }
              v469 = (std::__shared_weak_count *)__p[2].tv_sec;
              if (__p[2].tv_sec)
              {
                v470 = (unint64_t *)(__p[2].tv_sec + 8);
                do
                  v471 = __ldaxr(v470);
                while (__stlxr(v471 - 1, v470));
                if (!v471)
                {
                  ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
                  std::__shared_weak_count::__release_weak(v469);
                }
              }
              v472 = (std::__shared_weak_count *)__p[1].tv_sec;
              if (__p[1].tv_sec)
              {
                v473 = (unint64_t *)(__p[1].tv_sec + 8);
                do
                  v474 = __ldaxr(v473);
                while (__stlxr(v474 - 1, v473));
                if (!v474)
                {
                  ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
                  std::__shared_weak_count::__release_weak(v472);
                }
              }
            }
            else
            {
              os_log_type_enabled(v443, OS_LOG_TYPE_DEBUG);
              LOWORD(__p[0].tv_sec) = 0;
              v475 = (void *)_os_log_send_and_compose_impl();
              if (v475)
                free(v475);
            }
            if (v145)
            {
              sub_20E8C003C((uint64_t)&v720, "Failed to compute P2P RANSAC");
              sub_20E863570((uint64_t)&v720);
            }
            sub_20E863570((uint64_t)&v720);
            v244 = *(std::__shared_weak_count **)v724;
            if (!*(_QWORD *)v724)
              goto LABEL_691;
            v476 = (unint64_t *)(*(_QWORD *)v724 + 8);
            do
              v246 = __ldaxr(v476);
            while (__stlxr(v246 - 1, v476));
LABEL_689:
            if (!v246)
            {
              ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
              std::__shared_weak_count::__release_weak(v244);
            }
            goto LABEL_691;
          }
        }
        memmove(v437, v435, v436);
        goto LABEL_624;
      }
      if (!*(_BYTE *)(v74[102] + 8 * ((uint64_t)(v74[103] - v74[102]) >> 3) - 40))
        goto LABEL_59;
    }
LABEL_39:
    if (sub_20F40478C(v71[19], (uint64_t *)&v713, (uint64_t *)&v710, v692.f64, (double *)v730, (char **)&v704))
    {
      v76 = v734.f64[1];
      v77 = *(double *)v730;
      cosval = v732[0];
      goto LABEL_61;
    }
    sub_20F02E848(&v729);
    if (**(int **)(v729 + 56) > 2)
      goto LABEL_691;
    v79 = *(unsigned __int8 *)(v729 + 72);
    v80 = sub_20E8C31DC(v729, "OSLogSurrogateAppender", 1, 0);
    v81 = v80;
    if (!v79 && !v80)
      goto LABEL_691;
    v720.tv_sec = (__darwin_time_t)&v729;
    v720.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
    v721.tv_sec = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v721.tv_nsec) = 2;
    v722.tv_sec = (__darwin_time_t)"unknown file";
    LODWORD(v722.tv_nsec) = 1239;
    *(_QWORD *)v724 = 0;
    v723.tv_sec = (__darwin_time_t)"unknown function";
    v723.tv_nsec = 0;
    v82 = *(_QWORD *)v720.tv_sec;
    if (*(char *)(*(_QWORD *)v720.tv_sec + 39) < 0)
    {
      v84 = *(const char **)(v82 + 16);
      v83 = *(_QWORD *)(v82 + 24);
    }
    else
    {
      v83 = *(unsigned __int8 *)(*(_QWORD *)v720.tv_sec + 39);
      v84 = (const char *)(*(_QWORD *)v720.tv_sec + 16);
    }
    v659 = *(_QWORD *)v720.tv_sec + 16;
    v202 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v202 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__p);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
      if (LOBYTE(__p[1].tv_nsec) && SHIBYTE(__p[1].tv_sec) < 0)
        operator delete((void *)__p[0].tv_sec);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v203 = byte_254A4A4F8;
    else
      v203 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v204 = byte_254A4A4F8[23];
    else
      v204 = *(_QWORD *)&byte_254A4A4F8[8];
    __p[0].tv_sec = (__darwin_time_t)os_log_create(v203, v84);
    v205 = &__p[0].tv_nsec;
    if (v204 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v204 >= 0x17)
    {
      v206 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v204 | 7) != 0x17)
        v206 = v204 | 7;
      v207 = v206 + 1;
      v205 = operator new(v206 + 1);
      __p[1].tv_nsec = v207 | 0x8000000000000000;
      __p[0].tv_nsec = (uint64_t)v205;
      __p[1].tv_sec = v204;
      v52 = v666;
    }
    else
    {
      HIBYTE(__p[1].tv_nsec) = v204;
      if (!v204)
      {
LABEL_229:
        v205[v204] = 0;
        LOBYTE(__p[2].tv_sec) = 1;
        v208 = &__p[2].tv_nsec;
        if (v83 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v83 >= 0x17)
        {
          v209 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v83 | 7) != 0x17)
            v209 = v83 | 7;
          v210 = v209 + 1;
          v208 = operator new(v209 + 1);
          __p[3].tv_nsec = v210 | 0x8000000000000000;
          __p[2].tv_nsec = (uint64_t)v208;
          __p[3].tv_sec = v83;
        }
        else
        {
          HIBYTE(__p[3].tv_nsec) = v83;
          if (!v83)
            goto LABEL_237;
        }
        memmove(v208, v84, v83);
LABEL_237:
        *((_BYTE *)v208 + v83) = 0;
        LOBYTE(__p[4].tv_sec) = 1;
        v211 = __p[0].tv_sec;
        if (SHIBYTE(__p[3].tv_nsec) < 0)
          operator delete((void *)__p[2].tv_nsec);
        if (LOBYTE(__p[2].tv_sec) && SHIBYTE(__p[1].tv_nsec) < 0)
          operator delete((void *)__p[0].tv_nsec);
        if (__p[0].tv_sec)
          os_release((void *)__p[0].tv_sec);
        if (v81 && *(_QWORD *)(v81 + 24))
        {
          v212 = _os_log_pack_size();
          v213 = (std::__shared_weak_count_vtbl *)operator new(v212, (std::align_val_t)8uLL);
          v214 = (std::__shared_weak_count *)operator new();
          v215 = v214;
          v214->__shared_owners_ = 0;
          v216 = (unint64_t *)&v214->__shared_owners_;
          v214->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v214->__shared_weak_owners_ = 0;
          v214[1].__vftable = v213;
          __p[0].tv_sec = (__darwin_time_t)v213;
          __p[0].tv_nsec = (uint64_t)v213;
          __p[1].tv_sec = (__darwin_time_t)v214;
          do
            v217 = __ldxr(v216);
          while (__stxr(v217 + 1, v216));
          __p[2].tv_sec = 0;
          __p[1].tv_nsec = 0;
          __p[2].tv_nsec = 0;
          do
            v218 = __ldaxr(v216);
          while (__stlxr(v218 - 1, v216));
          if (!v218)
          {
            ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
            std::__shared_weak_count::__release_weak(v215);
          }
          v219 = __p[0].tv_sec;
          *(_WORD *)_os_log_pack_fill() = 0;
          v220 = operator new();
          v221 = *(unsigned __int8 *)(v82 + 39);
          v222 = v659;
          if ((v221 & 0x80u) != 0)
          {
            v222 = *(_QWORD *)(v82 + 16);
            v221 = *(_QWORD *)(v82 + 24);
          }
          *(_QWORD *)v220 = v219;
          *(timespec *)(v220 + 8) = *(timespec *)&__p[0].tv_nsec;
          __p[0].tv_nsec = 0;
          __p[1].tv_sec = 0;
          *(timespec *)(v220 + 24) = *(timespec *)&__p[1].tv_nsec;
          __p[1].tv_nsec = 0;
          __p[2].tv_sec = 0;
          *(_QWORD *)(v220 + 40) = v222;
          *(_QWORD *)(v220 + 48) = v221;
          *(_BYTE *)(v220 + 56) = 2;
          *(double *)&v717 = 0.0;
          v667.i64[0] = v220;
          (*(void (**)(_QWORD, int64x2_t *))(**(_QWORD **)(v81 + 24) + 40))(*(_QWORD *)(v81 + 24), &v667);
          v223 = v667.i64[0];
          v667.i64[0] = 0;
          if (v223)
          {
            v224 = *(std::__shared_weak_count **)(v223 + 32);
            if (v224)
            {
              v225 = (unint64_t *)&v224->__shared_owners_;
              do
                v226 = __ldaxr(v225);
              while (__stlxr(v226 - 1, v225));
              if (!v226)
              {
                ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                std::__shared_weak_count::__release_weak(v224);
              }
            }
            v227 = *(std::__shared_weak_count **)(v223 + 16);
            if (v227)
            {
              v228 = (unint64_t *)&v227->__shared_owners_;
              do
                v229 = __ldaxr(v228);
              while (__stlxr(v229 - 1, v228));
              if (!v229)
              {
                ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                std::__shared_weak_count::__release_weak(v227);
              }
            }
            MEMORY[0x212BC6398](v223, 0x10F0C40B62ED6C6);
            v230 = v717;
            *(double *)&v717 = 0.0;
            if (v230)
            {
              v231 = (std::__shared_weak_count *)*((_QWORD *)v230 + 4);
              if (v231)
              {
                v232 = (unint64_t *)&v231->__shared_owners_;
                do
                  v233 = __ldaxr(v232);
                while (__stlxr(v233 - 1, v232));
                if (!v233)
                {
                  ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                  std::__shared_weak_count::__release_weak(v231);
                }
              }
              v234 = (std::__shared_weak_count *)*((_QWORD *)v230 + 2);
              if (v234)
              {
                v235 = (unint64_t *)&v234->__shared_owners_;
                do
                  v236 = __ldaxr(v235);
                while (__stlxr(v236 - 1, v235));
                if (!v236)
                {
                  ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                  std::__shared_weak_count::__release_weak(v234);
                }
              }
              MEMORY[0x212BC6398](v230, 0x10F0C40B62ED6C6);
            }
          }
          v237 = (std::__shared_weak_count *)__p[2].tv_sec;
          if (__p[2].tv_sec)
          {
            v238 = (unint64_t *)(__p[2].tv_sec + 8);
            do
              v239 = __ldaxr(v238);
            while (__stlxr(v239 - 1, v238));
            if (!v239)
            {
              ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
              std::__shared_weak_count::__release_weak(v237);
            }
          }
          v240 = (std::__shared_weak_count *)__p[1].tv_sec;
          if (__p[1].tv_sec)
          {
            v241 = (unint64_t *)(__p[1].tv_sec + 8);
            do
              v242 = __ldaxr(v241);
            while (__stlxr(v242 - 1, v241));
            if (!v242)
            {
              ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
              std::__shared_weak_count::__release_weak(v240);
            }
          }
        }
        else
        {
          os_log_type_enabled(v211, OS_LOG_TYPE_DEBUG);
          LOWORD(__p[0].tv_sec) = 0;
          v243 = (void *)_os_log_send_and_compose_impl();
          if (v243)
            free(v243);
        }
        if (v79)
        {
          sub_20E8C003C((uint64_t)&v720, "Failed to compute P3P RANSAC");
          sub_20E863570((uint64_t)&v720);
        }
        sub_20E863570((uint64_t)&v720);
        v244 = *(std::__shared_weak_count **)v724;
        if (!*(_QWORD *)v724)
          goto LABEL_691;
        v245 = (unint64_t *)(*(_QWORD *)v724 + 8);
        do
          v246 = __ldaxr(v245);
        while (__stlxr(v246 - 1, v245));
        goto LABEL_689;
      }
    }
    memmove(v205, v203, v204);
    goto LABEL_229;
  }
  v39 = *(double *)(a4 + 16);
  v40 = *(double *)(a4 + 48);
  v41 = *(float64x2_t *)(a4 + 32);
  v42 = *(double *)(a4 + 80);
  v43 = *(float64x2_t *)(a4 + 64);
  v28.f64[0] = *(float64_t *)(a4 + 112);
  _Q4.f64[0] = v39 * v648.f64[0] + v40 * v648.f64[1] + v42 * v646.f64[0];
  v45 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a4, v648.f64[0]), v41, v648, 1), v43, v646.f64[0]);
  v46 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(*(float64x2_t *)a4, v646, 1), v41, v644.f64[0]), v43, v644, 1);
  _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a4, v642.f64[0]), v41, v642, 1), v43, v640);
  v48 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a4, *(double *)v650.i64), v41, v29.f64[0]);
  v29.f64[0] = v39 * *(double *)v650.i64 + v40 * v29.f64[0] + v42 * v654;
  v49 = vaddq_f64(v29, v28).f64[0];
  _Q2 = vaddq_f64(vmlaq_n_f64(v48, v43, v654), *(float64x2_t *)(a4 + 96));
  v668 = _Q4.f64[0];
  _Q4.f64[1] = v39 * v646.f64[1] + v40 * v644.f64[0] + v42 * v644.f64[1];
  v51 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v45, v46), _Q2.f64[0]), (float64x2_t)vzip2q_s64(v45, v46), _Q2, 1), _Q4, v49);
  _Q2.f64[0] = _Q2.f64[1];
  __asm { FMLA            D4, D2, V6.D[1] }
  v667 = v45;
  v670 = v46;
  v673 = _Q6;
  v669 = -v51.f64[0];
  v671 = _Q4.f64[1];
  v672 = -v51.f64[1];
  v674 = v39 * v642.f64[0] + v40 * v642.f64[1] + v42 * v640;
  v675 = -(_Q4.f64[0] + v674 * v49);
  v52 = a1;
  v53 = (_QWORD *)a1[921];
  v54 = v53[2902];
  if (!*(_BYTE *)(v54 + 1043))
    goto LABEL_26;
  v55 = *(_QWORD **)(v54 + 4848);
  v56 = v55[106];
  if (v56)
  {
    if (*(_BYTE *)(v55[102] + 328 * v56 - 40))
      goto LABEL_26;
  }
  else if (*(_BYTE *)(v55[102] + 8 * ((uint64_t)(v55[103] - v55[102]) >> 3) - 40))
  {
LABEL_26:
    if ((sub_20F404B88(v53[19], (uint64_t *)&v713, (uint64_t *)&v710, (char **)&v704, &v667, v692.f64, (double *)v730) & 1) != 0)
      goto LABEL_549;
    sub_20F02E848(&v728);
    if (**(int **)(v728 + 56) > 3)
      goto LABEL_212;
    v65 = *(unsigned __int8 *)(v728 + 72);
    v66 = sub_20E8C31DC(v728, "OSLogSurrogateAppender", 1, 0);
    v67 = v66;
    if (!v65 && !v66)
      goto LABEL_212;
    v655 = v65;
    v720.tv_sec = (__darwin_time_t)&v728;
    v720.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
    v721.tv_sec = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v721.tv_nsec) = 3;
    v722.tv_sec = (__darwin_time_t)"unknown file";
    LODWORD(v722.tv_nsec) = 1337;
    *(_QWORD *)v724 = 0;
    v723.tv_sec = (__darwin_time_t)"unknown function";
    v723.tv_nsec = 0;
    v68 = *(_QWORD *)v720.tv_sec;
    v69 = (const char *)(*(_QWORD *)v720.tv_sec + 16);
    v651 = v69;
    if (*(char *)(*(_QWORD *)v720.tv_sec + 39) < 0)
    {
      v69 = *(const char **)(v68 + 16);
      v70 = *(_QWORD *)(v68 + 24);
    }
    else
    {
      v70 = *(unsigned __int8 *)(*(_QWORD *)v720.tv_sec + 39);
    }
    v156 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v156 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__p);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
      if (LOBYTE(__p[1].tv_nsec) && SHIBYTE(__p[1].tv_sec) < 0)
        operator delete((void *)__p[0].tv_sec);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v157 = byte_254A4A4F8;
    else
      v157 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v158 = byte_254A4A4F8[23];
    else
      v158 = *(_QWORD *)&byte_254A4A4F8[8];
    __p[0].tv_sec = (__darwin_time_t)os_log_create(v157, v69);
    v159 = &__p[0].tv_nsec;
    if (v158 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v158 >= 0x17)
    {
      v160 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v158 | 7) != 0x17)
        v160 = v158 | 7;
      v161 = v160 + 1;
      v159 = operator new(v160 + 1);
      __p[1].tv_nsec = v161 | 0x8000000000000000;
      __p[0].tv_nsec = (uint64_t)v159;
      __p[1].tv_sec = v158;
    }
    else
    {
      HIBYTE(__p[1].tv_nsec) = v158;
      if (!v158)
      {
LABEL_145:
        v159[v158] = 0;
        LOBYTE(__p[2].tv_sec) = 1;
        v162 = &__p[2].tv_nsec;
        if (v70 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        v52 = v666;
        if (v70 >= 0x17)
        {
          v163 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v70 | 7) != 0x17)
            v163 = v70 | 7;
          v164 = v163 + 1;
          v162 = operator new(v163 + 1);
          __p[3].tv_nsec = v164 | 0x8000000000000000;
          __p[2].tv_nsec = (uint64_t)v162;
          __p[3].tv_sec = v70;
        }
        else
        {
          HIBYTE(__p[3].tv_nsec) = v70;
          if (!v70)
            goto LABEL_153;
        }
        memmove(v162, v69, v70);
LABEL_153:
        *((_BYTE *)v162 + v70) = 0;
        LOBYTE(__p[4].tv_sec) = 1;
        v165 = __p[0].tv_sec;
        if (SHIBYTE(__p[3].tv_nsec) < 0)
          operator delete((void *)__p[2].tv_nsec);
        if (LOBYTE(__p[2].tv_sec) && SHIBYTE(__p[1].tv_nsec) < 0)
          operator delete((void *)__p[0].tv_nsec);
        if (__p[0].tv_sec)
          os_release((void *)__p[0].tv_sec);
        if (v67 && *(_QWORD *)(v67 + 24))
        {
          v166 = _os_log_pack_size();
          v167 = (std::__shared_weak_count_vtbl *)operator new(v166, (std::align_val_t)8uLL);
          v168 = (std::__shared_weak_count *)operator new();
          v169 = v168;
          v168->__shared_owners_ = 0;
          v170 = (unint64_t *)&v168->__shared_owners_;
          v168->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v168->__shared_weak_owners_ = 0;
          v168[1].__vftable = v167;
          __p[0].tv_sec = (__darwin_time_t)v167;
          __p[0].tv_nsec = (uint64_t)v167;
          __p[1].tv_sec = (__darwin_time_t)v168;
          do
            v171 = __ldxr(v170);
          while (__stxr(v171 + 1, v170));
          __p[2].tv_sec = 0;
          __p[1].tv_nsec = 0;
          __p[2].tv_nsec = 0;
          do
            v172 = __ldaxr(v170);
          while (__stlxr(v172 - 1, v170));
          if (!v172)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v169);
          }
          v173 = __p[0].tv_sec;
          *(_WORD *)_os_log_pack_fill() = 0;
          v174 = COERCE_DOUBLE(operator new());
          v175 = *(unsigned __int8 *)(v68 + 39);
          v176 = v651;
          if ((v175 & 0x80u) != 0)
          {
            v176 = *(const char **)(v68 + 16);
            v175 = *(_QWORD *)(v68 + 24);
          }
          **(_QWORD **)&v174 = v173;
          *(timespec *)(*(_QWORD *)&v174 + 8) = *(timespec *)&__p[0].tv_nsec;
          __p[0].tv_nsec = 0;
          __p[1].tv_sec = 0;
          *(timespec *)(*(_QWORD *)&v174 + 24) = *(timespec *)&__p[1].tv_nsec;
          __p[1].tv_nsec = 0;
          __p[2].tv_sec = 0;
          *(_QWORD *)(*(_QWORD *)&v174 + 40) = v176;
          *(_QWORD *)(*(_QWORD *)&v174 + 48) = v175;
          *(_BYTE *)(*(_QWORD *)&v174 + 56) = 1;
          v729 = 0;
          *(double *)&v717 = v174;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v67 + 24) + 40))(*(_QWORD *)(v67 + 24), &v717);
          v177 = v717;
          *(double *)&v717 = 0.0;
          v178 = v655;
          if (v177)
          {
            v179 = (std::__shared_weak_count *)*((_QWORD *)v177 + 4);
            if (v179)
            {
              v180 = (unint64_t *)&v179->__shared_owners_;
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                std::__shared_weak_count::__release_weak(v179);
              }
            }
            v182 = (std::__shared_weak_count *)*((_QWORD *)v177 + 2);
            if (v182)
            {
              v183 = (unint64_t *)&v182->__shared_owners_;
              do
                v184 = __ldaxr(v183);
              while (__stlxr(v184 - 1, v183));
              if (!v184)
              {
                ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                std::__shared_weak_count::__release_weak(v182);
              }
            }
            MEMORY[0x212BC6398](v177, 0x10F0C40B62ED6C6);
            v185 = v729;
            v729 = 0;
            if (v185)
            {
              v186 = *(std::__shared_weak_count **)(v185 + 32);
              if (v186)
              {
                v187 = (unint64_t *)&v186->__shared_owners_;
                do
                  v188 = __ldaxr(v187);
                while (__stlxr(v188 - 1, v187));
                if (!v188)
                {
                  ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                  std::__shared_weak_count::__release_weak(v186);
                }
              }
              v189 = *(std::__shared_weak_count **)(v185 + 16);
              if (v189)
              {
                v190 = (unint64_t *)&v189->__shared_owners_;
                do
                  v191 = __ldaxr(v190);
                while (__stlxr(v191 - 1, v190));
                if (!v191)
                {
                  ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                  std::__shared_weak_count::__release_weak(v189);
                }
              }
              MEMORY[0x212BC6398](v185, 0x10F0C40B62ED6C6);
            }
          }
          v192 = (std::__shared_weak_count *)__p[2].tv_sec;
          if (__p[2].tv_sec)
          {
            v193 = (unint64_t *)(__p[2].tv_sec + 8);
            do
              v194 = __ldaxr(v193);
            while (__stlxr(v194 - 1, v193));
            if (!v194)
            {
              ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
              std::__shared_weak_count::__release_weak(v192);
            }
          }
          v195 = (std::__shared_weak_count *)__p[1].tv_sec;
          if (__p[1].tv_sec)
          {
            v196 = (unint64_t *)(__p[1].tv_sec + 8);
            do
              v197 = __ldaxr(v196);
            while (__stlxr(v197 - 1, v196));
            if (!v197)
            {
              ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
              std::__shared_weak_count::__release_weak(v195);
            }
          }
        }
        else
        {
          os_log_type_enabled(v165, OS_LOG_TYPE_INFO);
          LOWORD(__p[0].tv_sec) = 0;
          v198 = (void *)_os_log_send_and_compose_impl();
          v178 = v655;
          if (v198)
            free(v198);
        }
        if (v178)
        {
          sub_20E8C003C((uint64_t)&v720, "Failed to refine 6-DoF pose. State correction will be updated with the estimated pose as-is");
          sub_20E863570((uint64_t)&v720);
        }
        sub_20E863570((uint64_t)&v720);
        v199 = *(std::__shared_weak_count **)v724;
        if (*(_QWORD *)v724)
        {
          v200 = (unint64_t *)(*(_QWORD *)v724 + 8);
          do
            v201 = __ldaxr(v200);
          while (__stlxr(v201 - 1, v200));
          if (!v201)
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
          }
        }
LABEL_212:
        v60 = v668 * v669 + v671 * v672 + v674 * v675;
        v64.n128_f64[0] = *(double *)v667.i64 * v694
                        - (*(double *)v667.i64 * v669
                         + *(double *)v670.i64 * v672
                         + v673.f64[0] * v675)
                        + v673.f64[0] * v700
                        + *(double *)v670.i64 * v697;
        v61 = *(double *)&v670.i64[1] * v697
            + v673.f64[1] * v700
            + *(double *)&v667.i64[1] * v694
            - (*(double *)&v667.i64[1] * v669
             + *(double *)&v670.i64[1] * v672
             + v673.f64[1] * v675);
        v62 = v671 * *(double *)v695.i64 + v668 * v692.f64[0] + v674 * *(double *)v698.i64;
        v63.n128_f64[0] = v671 * *(double *)&v695.i64[1] + v668 * v692.f64[1] + v674 * *(double *)&v698.i64[1];
        v59 = v674 * v700 - v60;
        v58 = v671 * v697;
        *(double *)v730 = *(double *)v667.i64 * v692.f64[0]
                        + *(double *)v670.i64 * *(double *)v695.i64
                        + v673.f64[0] * *(double *)v698.i64;
        *(double *)&v730[8] = *(double *)v667.i64 * v692.f64[1]
                            + *(double *)v670.i64 * *(double *)&v695.i64[1]
                            + v673.f64[0] * *(double *)&v698.i64[1];
        *(double *)&v730[16] = *(double *)v667.i64 * v693 + v673.f64[0] * v699 + *(double *)v670.i64 * v696;
        *(double *)v731.i64 = v64.n128_f64[0];
        *(double *)&v731.i64[1] = *(double *)&v667.i64[1] * v692.f64[0]
                                + *(double *)&v670.i64[1] * *(double *)v695.i64
                                + v673.f64[1] * *(double *)v698.i64;
        v732[0] = *(double *)&v667.i64[1] * v692.f64[1]
                + *(double *)&v670.i64[1] * *(double *)&v695.i64[1]
                + v673.f64[1] * *(double *)&v698.i64[1];
        v732[1] = *(double *)&v670.i64[1] * v696 + *(double *)&v667.i64[1] * v693 + v673.f64[1] * v699;
        v732[2] = v61;
        v733 = v62;
        v734.f64[0] = v63.n128_f64[0];
        sinval = v671 * v697 + v668 * v694 + v59;
        v734.f64[1] = v668 * v693 + v674 * v699 + v671 * v696;
        v735 = sinval;
        goto LABEL_549;
      }
    }
    memmove(v159, v157, v158);
    goto LABEL_145;
  }
  v727 = 0;
  v718 = 0.0;
  *(double *)&v717 = 0.0;
  v719 = 0.0;
  if ((sub_20F403FD0(v53[18], (uint64_t *)&v713, (uint64_t *)&v710, (char **)&v704, &v667, v692.f64, (long double *)&v727, &v717) & 1) != 0)
  {
LABEL_548:
    v391 = __sincos_stret(*(double *)&v727);
    v58 = v391.__cosval;
    sinval = v391.__sinval;
    v59 = -v391.__sinval;
    v734.f64[0] = 0.0;
    v733 = 0.0;
    v60 = *(double *)&v717;
    v61 = v718;
    v62 = v719;
    *(double *)v730 = v391.__cosval;
    *(double *)&v730[8] = v391.__sinval;
    *(_QWORD *)&v730[16] = 0;
    v731.i64[0] = (uint64_t)v717;
    *(double *)&v731.i64[1] = -v391.__sinval;
    v732[0] = v391.__cosval;
    v732[1] = 0.0;
    v732[2] = v718;
    v734.f64[1] = 1.0;
    v735 = v719;
LABEL_549:
    sub_20F02D044((uint64_t)&v720, (uint64_t)v53, v690.tv_nsec, (uint64_t)v730, a5, sinval, v58, v59, v60, v61, v62, v63, v64);
    if (v726)
    {
      v392 = v691;
      v393 = v53[5];
      if (v393)
      {
        v394 = v53[3];
        while (1)
        {
          v395 = *(int8x8_t **)(*v53 + 16 * (v394 % ((uint64_t)(v53[1] - *v53) >> 4)));
          if (v395[6].i32[0] == LODWORD(v690.tv_nsec))
            break;
          ++v394;
          if (!--v393)
            goto LABEL_554;
        }
      }
      else
      {
LABEL_554:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1354, (uint64_t)"camera_set_ftr", 14, (uint64_t)"Missing camera set features in front-end", 40, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_915;
        }
        v395 = 0;
      }
      v396 = sub_20FCBA6DC(v395, HIWORD(v392), (unsigned __int16)v392);
      if (v397
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1357, (uint64_t)"frame_bundle_ref", 16, (uint64_t)"Missing Frame bundle ref in front-end", 37, (void (*)(void **))sub_21023DDB0))
      {
        v718 = 0.0;
        *(double *)&v717 = 0.0;
        v719 = 0.0;
        v398 = v53[37] - v53[36];
        if (v398)
        {
          v399 = 0x86BCA1AF286BCA1BLL * (v398 >> 3);
          if (v399 >> 60)
            sub_20E867F44();
          *(double *)&v717 = COERCE_DOUBLE(operator new(0x6BCA1AF286BCA1B0 * (v398 >> 3)));
          v718 = *(double *)&v717;
          *(_QWORD *)&v719 = (char *)v717 + 16 * v399;
        }
        v400 = v396 + 768;
        sub_20FCC2C1C(v400, 0, &__p[0].tv_sec);
        v401 = (_DWORD *)__p[0].tv_sec;
        v402 = __p[0].tv_nsec;
        if (__p[0].tv_sec != __p[0].tv_nsec)
        {
          while (1)
          {
            v404 = v53[36];
            v405 = v53[37];
            if (v405 != v404)
            {
              v406 = 0x86BCA1AF286BCA1BLL * ((v405 - v404) >> 3);
              v407 = *(_QWORD *)v401;
              do
              {
                v408 = v406 >> 1;
                v409 = v404 + 152 * (v406 >> 1);
                if (*(_QWORD *)v409 < v407 || *(_QWORD *)v409 == v407 && *(_DWORD *)(v409 + 8) < v401[2])
                {
                  v404 = v409 + 152;
                  v408 = v406 + ~v408;
                }
                v406 = v408;
              }
              while (v408);
            }
            if (v404 == v405 || *(_QWORD *)v404 != *(_QWORD *)v401 || *(_DWORD *)(v404 + 8) != v401[2])
              goto LABEL_565;
            v410 = v718;
            if (*(_QWORD *)&v718 < *(_QWORD *)&v719)
            {
              **(_OWORD **)&v718 = *(_OWORD *)v401;
              v403 = (_OWORD *)(*(_QWORD *)&v410 + 16);
            }
            else
            {
              v411 = v717;
              v412 = (uint64_t)(*(_QWORD *)&v718 - (_QWORD)v717) >> 4;
              v413 = v412 + 1;
              if ((unint64_t)(v412 + 1) >> 60)
                sub_20E867F44();
              v414 = *(_QWORD *)&v719 - (_QWORD)v717;
              if ((uint64_t)(*(_QWORD *)&v719 - (_QWORD)v717) >> 3 > v413)
                v413 = v414 >> 3;
              if ((unint64_t)v414 >= 0x7FFFFFFFFFFFFFF0)
                v415 = 0xFFFFFFFFFFFFFFFLL;
              else
                v415 = v413;
              if (v415)
              {
                if (v415 >> 60)
                  sub_20E877A38();
                v416 = (char *)operator new(16 * v415);
                v417 = &v416[16 * v412];
                *(_OWORD *)v417 = *(_OWORD *)v401;
                v418 = v417;
                if (*(_DWORD **)&v410 != v411)
                {
                  do
                  {
LABEL_589:
                    v419 = *(_QWORD *)(*(_QWORD *)&v410 - 16);
                    *(_QWORD *)&v410 -= 16;
                    v420 = *(_DWORD *)(*(_QWORD *)&v410 + 8);
                    *((_QWORD *)v418 - 2) = v419;
                    v418 -= 16;
                    *((_DWORD *)v418 + 2) = v420;
                  }
                  while (*(_DWORD **)&v410 != v411);
                  v410 = *(double *)&v717;
                  v421 = &v416[16 * v415];
                  v403 = v417 + 16;
                  v717 = v418;
                  *(_QWORD *)&v718 = v417 + 16;
                  v719 = *(double *)&v421;
                  if (v410 == 0.0)
                    goto LABEL_564;
LABEL_593:
                  operator delete(*(void **)&v410);
                  goto LABEL_564;
                }
              }
              else
              {
                v416 = 0;
                v417 = (char *)(16 * v412);
                *(_OWORD *)(16 * v412) = *(_OWORD *)v401;
                v418 = (char *)(16 * v412);
                if (*(_DWORD **)&v410 != v411)
                  goto LABEL_589;
              }
              v422 = &v416[16 * v415];
              v403 = v417 + 16;
              v717 = v418;
              *(_QWORD *)&v718 = v417 + 16;
              v719 = *(double *)&v422;
              if (v410 != 0.0)
                goto LABEL_593;
            }
LABEL_564:
            v718 = *(double *)&v403;
LABEL_565:
            v401 += 4;
            if (v401 == (_DWORD *)v402)
            {
              v401 = (_DWORD *)__p[0].tv_sec;
              v52 = v666;
              break;
            }
          }
        }
        if (v401)
        {
          __p[0].tv_nsec = (uint64_t)v401;
          operator delete(v401);
        }
        *(timespec *)&__p[0].tv_nsec = *(timespec *)v400;
        v423 = *(_DWORD *)(v400 + 16);
        LODWORD(__p[0].tv_sec) = 2;
        LODWORD(__p[1].tv_nsec) = v423;
        __p[6] = *(timespec *)v724;
        __p[7] = *(timespec *)&v724[16];
        __p[2] = v720;
        __p[3] = v721;
        __p[5] = v723;
        __p[4] = v722;
        __p[8].tv_sec = v725;
        __p[8].tv_nsec = (v705 - (_BYTE *)v704) >> 2;
        memset(&__p[9], 0, 24);
        v424 = v717;
        v425 = *(_QWORD *)&v718 - (_QWORD)v717;
        if (*(void **)&v718 == v717)
        {
          v427 = 0;
          v426 = 0;
        }
        else
        {
          if (v425 < 0)
            sub_20E867F44();
          v426 = (char *)operator new(*(_QWORD *)&v718 - (_QWORD)v717);
          v427 = &v426[16 * (v425 >> 4)];
          memcpy(v426, v424, v425 - 4);
        }
        v737[5] = __p[6];
        v737[6] = __p[7];
        v737[7] = __p[8];
        v737[1] = __p[2];
        v737[2] = __p[3];
        v737[4] = __p[5];
        v737[3] = __p[4];
        v737[0] = __p[1];
        *(timespec *)v736 = __p[0];
        *(_QWORD *)&v737[8] = v426;
        *((_QWORD *)&v737[8] + 1) = v427;
        *(_QWORD *)&v737[9] = v427;
        BYTE8(v737[9]) = 0;
        v738 = 0;
        v739 = 1;
        v740 = 1;
        if (*(double *)&v424 != 0.0)
        {
          v718 = *(double *)&v424;
          operator delete(v424);
        }
        goto LABEL_777;
      }
LABEL_915:
      abort();
    }
    goto LABEL_776;
  }
  sub_20F02E848(&v716);
  if (**(int **)(v716 + 56) <= 3)
  {
    v92 = *(unsigned __int8 *)(v716 + 72);
    v93 = sub_20E8C31DC(v716, "OSLogSurrogateAppender", 1, 0);
    v94 = v93;
    if (v92 || v93)
    {
      v656 = v92;
      v720.tv_sec = (__darwin_time_t)&v716;
      v720.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
      v721.tv_sec = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v721.tv_nsec) = 3;
      v722.tv_sec = (__darwin_time_t)"unknown file";
      LODWORD(v722.tv_nsec) = 1318;
      *(_QWORD *)v724 = 0;
      v723.tv_sec = (__darwin_time_t)"unknown function";
      v723.tv_nsec = 0;
      v95 = *(_QWORD *)v720.tv_sec;
      if (*(char *)(*(_QWORD *)v720.tv_sec + 39) < 0)
      {
        v97 = *(const char **)(v95 + 16);
        v96 = *(_QWORD *)(v95 + 24);
      }
      else
      {
        v96 = *(unsigned __int8 *)(*(_QWORD *)v720.tv_sec + 39);
        v97 = (const char *)(*(_QWORD *)v720.tv_sec + 16);
      }
      v652 = *(_QWORD *)v720.tv_sec + 16;
      v345 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v345 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__p);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
        if (LOBYTE(__p[1].tv_nsec) && SHIBYTE(__p[1].tv_sec) < 0)
          operator delete((void *)__p[0].tv_sec);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v346 = byte_254A4A4F8;
      else
        v346 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v347 = byte_254A4A4F8[23];
      else
        v347 = *(_QWORD *)&byte_254A4A4F8[8];
      __p[0].tv_sec = (__darwin_time_t)os_log_create(v346, v97);
      v348 = &__p[0].tv_nsec;
      if (v347 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v347 >= 0x17)
      {
        v349 = (v347 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v347 | 7) != 0x17)
          v349 = v347 | 7;
        v350 = v349 + 1;
        v348 = operator new(v349 + 1);
        __p[1].tv_nsec = v350 | 0x8000000000000000;
        __p[0].tv_nsec = (uint64_t)v348;
        __p[1].tv_sec = v347;
      }
      else
      {
        HIBYTE(__p[1].tv_nsec) = v347;
        if (!v347)
        {
LABEL_480:
          v348[v347] = 0;
          LOBYTE(__p[2].tv_sec) = 1;
          v351 = &__p[2].tv_nsec;
          if (v96 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v52 = v666;
          if (v96 >= 0x17)
          {
            v352 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v96 | 7) != 0x17)
              v352 = v96 | 7;
            v353 = v352 + 1;
            v351 = operator new(v352 + 1);
            __p[3].tv_nsec = v353 | 0x8000000000000000;
            __p[2].tv_nsec = (uint64_t)v351;
            __p[3].tv_sec = v96;
          }
          else
          {
            HIBYTE(__p[3].tv_nsec) = v96;
            if (!v96)
              goto LABEL_488;
          }
          memmove(v351, v97, v96);
LABEL_488:
          *((_BYTE *)v351 + v96) = 0;
          LOBYTE(__p[4].tv_sec) = 1;
          v354 = __p[0].tv_sec;
          if (SHIBYTE(__p[3].tv_nsec) < 0)
            operator delete((void *)__p[2].tv_nsec);
          if (LOBYTE(__p[2].tv_sec) && SHIBYTE(__p[1].tv_nsec) < 0)
            operator delete((void *)__p[0].tv_nsec);
          if (__p[0].tv_sec)
            os_release((void *)__p[0].tv_sec);
          if (v94 && *(_QWORD *)(v94 + 24))
          {
            v355 = _os_log_pack_size();
            v356 = (std::__shared_weak_count_vtbl *)operator new(v355, (std::align_val_t)8uLL);
            v357 = (std::__shared_weak_count *)operator new();
            v358 = v357;
            v357->__shared_owners_ = 0;
            v359 = (unint64_t *)&v357->__shared_owners_;
            v357->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v357->__shared_weak_owners_ = 0;
            v357[1].__vftable = v356;
            __p[0].tv_sec = (__darwin_time_t)v356;
            __p[0].tv_nsec = (uint64_t)v356;
            __p[1].tv_sec = (__darwin_time_t)v357;
            do
              v360 = __ldxr(v359);
            while (__stxr(v360 + 1, v359));
            __p[2].tv_sec = 0;
            __p[1].tv_nsec = 0;
            __p[2].tv_nsec = 0;
            do
              v361 = __ldaxr(v359);
            while (__stlxr(v361 - 1, v359));
            if (!v361)
            {
              ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
              std::__shared_weak_count::__release_weak(v358);
            }
            v362 = __p[0].tv_sec;
            *(_WORD *)_os_log_pack_fill() = 0;
            v363 = operator new();
            v364 = *(unsigned __int8 *)(v95 + 39);
            v365 = v652;
            if ((v364 & 0x80u) != 0)
            {
              v365 = *(_QWORD *)(v95 + 16);
              v364 = *(_QWORD *)(v95 + 24);
            }
            *(_QWORD *)v363 = v362;
            *(timespec *)(v363 + 8) = *(timespec *)&__p[0].tv_nsec;
            __p[0].tv_nsec = 0;
            __p[1].tv_sec = 0;
            *(timespec *)(v363 + 24) = *(timespec *)&__p[1].tv_nsec;
            __p[1].tv_nsec = 0;
            __p[2].tv_sec = 0;
            *(_QWORD *)(v363 + 40) = v365;
            *(_QWORD *)(v363 + 48) = v364;
            *(_BYTE *)(v363 + 56) = 1;
            v728 = 0;
            v729 = v363;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v94 + 24) + 40))(*(_QWORD *)(v94 + 24), &v729);
            v366 = v729;
            v729 = 0;
            v52 = v666;
            v367 = v656;
            if (v366)
            {
              v368 = *(std::__shared_weak_count **)(v366 + 32);
              if (v368)
              {
                v369 = (unint64_t *)&v368->__shared_owners_;
                do
                  v370 = __ldaxr(v369);
                while (__stlxr(v370 - 1, v369));
                if (!v370)
                {
                  ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                  std::__shared_weak_count::__release_weak(v368);
                }
              }
              v371 = *(std::__shared_weak_count **)(v366 + 16);
              if (v371)
              {
                v372 = (unint64_t *)&v371->__shared_owners_;
                do
                  v373 = __ldaxr(v372);
                while (__stlxr(v373 - 1, v372));
                if (!v373)
                {
                  ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                  std::__shared_weak_count::__release_weak(v371);
                }
              }
              MEMORY[0x212BC6398](v366, 0x10F0C40B62ED6C6);
              v374 = v728;
              v728 = 0;
              if (v374)
              {
                v375 = *(std::__shared_weak_count **)(v374 + 32);
                if (v375)
                {
                  v376 = (unint64_t *)&v375->__shared_owners_;
                  do
                    v377 = __ldaxr(v376);
                  while (__stlxr(v377 - 1, v376));
                  if (!v377)
                  {
                    ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                    std::__shared_weak_count::__release_weak(v375);
                  }
                }
                v378 = *(std::__shared_weak_count **)(v374 + 16);
                if (v378)
                {
                  v379 = (unint64_t *)&v378->__shared_owners_;
                  do
                    v380 = __ldaxr(v379);
                  while (__stlxr(v380 - 1, v379));
                  if (!v380)
                  {
                    ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
                    std::__shared_weak_count::__release_weak(v378);
                  }
                }
                MEMORY[0x212BC6398](v374, 0x10F0C40B62ED6C6);
              }
            }
            v381 = (std::__shared_weak_count *)__p[2].tv_sec;
            if (__p[2].tv_sec)
            {
              v382 = (unint64_t *)(__p[2].tv_sec + 8);
              do
                v383 = __ldaxr(v382);
              while (__stlxr(v383 - 1, v382));
              if (!v383)
              {
                ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                std::__shared_weak_count::__release_weak(v381);
              }
            }
            v384 = (std::__shared_weak_count *)__p[1].tv_sec;
            if (__p[1].tv_sec)
            {
              v385 = (unint64_t *)(__p[1].tv_sec + 8);
              do
                v386 = __ldaxr(v385);
              while (__stlxr(v386 - 1, v385));
              if (!v386)
              {
                ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
                std::__shared_weak_count::__release_weak(v384);
              }
            }
          }
          else
          {
            os_log_type_enabled(v354, OS_LOG_TYPE_INFO);
            LOWORD(__p[0].tv_sec) = 0;
            v387 = (void *)_os_log_send_and_compose_impl();
            v367 = v656;
            if (v387)
              free(v387);
          }
          if (v367)
          {
            sub_20E8C003C((uint64_t)&v720, "Failed to refine 4-DoF pose. State correction will be updated with the estimated pose as-is");
            sub_20E863570((uint64_t)&v720);
          }
          sub_20E863570((uint64_t)&v720);
          v388 = *(std::__shared_weak_count **)v724;
          if (*(_QWORD *)v724)
          {
            v389 = (unint64_t *)(*(_QWORD *)v724 + 8);
            do
              v390 = __ldaxr(v389);
            while (__stlxr(v390 - 1, v389));
            if (!v390)
            {
              ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
              std::__shared_weak_count::__release_weak(v388);
            }
          }
          goto LABEL_547;
        }
      }
      memmove(v348, v346, v347);
      goto LABEL_480;
    }
  }
LABEL_547:
  *(double *)&__p[0].tv_sec = *(double *)v667.i64 * v692.f64[0]
                            + *(double *)v670.i64 * *(double *)v695.i64
                            + v673.f64[0] * *(double *)v698.i64;
  *(double *)&__p[0].tv_nsec = *(double *)v667.i64 * v692.f64[1]
                             + *(double *)v670.i64 * *(double *)&v695.i64[1]
                             + v673.f64[0] * *(double *)&v698.i64[1];
  *(double *)&__p[1].tv_sec = *(double *)v667.i64 * v693 + v673.f64[0] * v699 + *(double *)v670.i64 * v696;
  *(double *)&__p[1].tv_nsec = *(double *)v667.i64 * v694
                             - (*(double *)v667.i64 * v669
                              + *(double *)v670.i64 * v672
                              + v673.f64[0] * v675)
                             + v673.f64[0] * v700
                             + *(double *)v670.i64 * v697;
  *(double *)&__p[2].tv_sec = *(double *)&v667.i64[1] * v692.f64[0]
                            + *(double *)&v670.i64[1] * *(double *)v695.i64
                            + v673.f64[1] * *(double *)v698.i64;
  *(double *)&__p[2].tv_nsec = *(double *)&v667.i64[1] * v692.f64[1]
                             + *(double *)&v670.i64[1] * *(double *)&v695.i64[1]
                             + v673.f64[1] * *(double *)&v698.i64[1];
  *(double *)&__p[3].tv_sec = *(double *)&v670.i64[1] * v696 + *(double *)&v667.i64[1] * v693 + v673.f64[1] * v699;
  *(double *)&__p[3].tv_nsec = *(double *)&v670.i64[1] * v697
                             + v673.f64[1] * v700
                             + *(double *)&v667.i64[1] * v694
                             - (*(double *)&v667.i64[1] * v669
                              + *(double *)&v670.i64[1] * v672
                              + v673.f64[1] * v675);
  *(double *)&__p[4].tv_sec = v671 * *(double *)v695.i64 + v668 * v692.f64[0] + v674 * *(double *)v698.i64;
  *(double *)&__p[4].tv_nsec = v671 * *(double *)&v695.i64[1] + v668 * v692.f64[1] + v674 * *(double *)&v698.i64[1];
  *(double *)&__p[5].tv_sec = v668 * v693 + v674 * v699 + v671 * v696;
  *(double *)&__p[5].tv_nsec = v671 * v697 + v668 * v694 + v674 * v700 - (v668 * v669 + v671 * v672 + v674 * v675);
  if ((sub_20F04C560((uint64_t)__p, (long double *)&v727, &v717) & 1) != 0)
    goto LABEL_548;
  sub_20F02E848(&v716);
  if (**(int **)(v716 + 56) <= 4)
  {
    v428 = *(unsigned __int8 *)(v716 + 72);
    v429 = sub_20E8C31DC(v716, "OSLogSurrogateAppender", 1, 0);
    v430 = v429;
    if (v428 || v429)
    {
      v720.tv_sec = (__darwin_time_t)&v716;
      v720.tv_nsec = std::chrono::steady_clock::now().__d_.__rep_;
      v721.tv_sec = std::chrono::system_clock::now().__d_.__rep_;
      LODWORD(v721.tv_nsec) = 4;
      v722.tv_sec = (__darwin_time_t)"unknown file";
      LODWORD(v722.tv_nsec) = 1322;
      *(_QWORD *)v724 = 0;
      v723.tv_sec = (__darwin_time_t)"unknown function";
      v723.tv_nsec = 0;
      v431 = *(_QWORD *)v720.tv_sec;
      if (*(char *)(*(_QWORD *)v720.tv_sec + 39) < 0)
      {
        v433 = *(const char **)(v431 + 16);
        v432 = *(_QWORD *)(v431 + 24);
      }
      else
      {
        v432 = *(unsigned __int8 *)(*(_QWORD *)v720.tv_sec + 39);
        v433 = (const char *)(*(_QWORD *)v720.tv_sec + 16);
      }
      v662 = *(_QWORD *)v720.tv_sec + 16;
      v477 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v477 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)__p);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
        if (LOBYTE(__p[1].tv_nsec) && SHIBYTE(__p[1].tv_sec) < 0)
          operator delete((void *)__p[0].tv_sec);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v478 = byte_254A4A4F8;
      else
        v478 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v479 = byte_254A4A4F8[23];
      else
        v479 = *(_QWORD *)&byte_254A4A4F8[8];
      __p[0].tv_sec = (__darwin_time_t)os_log_create(v478, v433);
      v480 = &__p[0].tv_nsec;
      if (v479 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v479 >= 0x17)
      {
        v481 = v430;
        v482 = v433;
        v483 = v431;
        v484 = v428;
        v485 = v52;
        v486 = (v479 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v479 | 7) != 0x17)
          v486 = v479 | 7;
        v487 = v486 + 1;
        v480 = operator new(v486 + 1);
        __p[1].tv_nsec = v487 | 0x8000000000000000;
        __p[0].tv_nsec = (uint64_t)v480;
        __p[1].tv_sec = v479;
        v52 = v485;
        v428 = v484;
        v431 = v483;
        v433 = v482;
        v430 = v481;
      }
      else
      {
        HIBYTE(__p[1].tv_nsec) = v479;
        if (!v479)
        {
LABEL_709:
          v480[v479] = 0;
          LOBYTE(__p[2].tv_sec) = 1;
          v488 = &__p[2].tv_nsec;
          if (v432 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v432 >= 0x17)
          {
            v489 = (v432 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v432 | 7) != 0x17)
              v489 = v432 | 7;
            v490 = v489 + 1;
            v488 = operator new(v489 + 1);
            __p[3].tv_nsec = v490 | 0x8000000000000000;
            __p[2].tv_nsec = (uint64_t)v488;
            __p[3].tv_sec = v432;
          }
          else
          {
            HIBYTE(__p[3].tv_nsec) = v432;
            if (!v432)
              goto LABEL_717;
          }
          memmove(v488, v433, v432);
LABEL_717:
          *((_BYTE *)v488 + v432) = 0;
          LOBYTE(__p[4].tv_sec) = 1;
          v491 = __p[0].tv_sec;
          if (SHIBYTE(__p[3].tv_nsec) < 0)
            operator delete((void *)__p[2].tv_nsec);
          if (LOBYTE(__p[2].tv_sec) && SHIBYTE(__p[1].tv_nsec) < 0)
            operator delete((void *)__p[0].tv_nsec);
          if (__p[0].tv_sec)
            os_release((void *)__p[0].tv_sec);
          if (v430 && *(_QWORD *)(v430 + 24))
          {
            v492 = _os_log_pack_size();
            v493 = (std::__shared_weak_count_vtbl *)operator new(v492, (std::align_val_t)8uLL);
            v494 = (std::__shared_weak_count *)operator new();
            v495 = v494;
            v494->__shared_owners_ = 0;
            v496 = (unint64_t *)&v494->__shared_owners_;
            v494->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v494->__shared_weak_owners_ = 0;
            v494[1].__vftable = v493;
            __p[0].tv_sec = (__darwin_time_t)v493;
            __p[0].tv_nsec = (uint64_t)v493;
            __p[1].tv_sec = (__darwin_time_t)v494;
            do
              v497 = __ldxr(v496);
            while (__stxr(v497 + 1, v496));
            __p[2].tv_sec = 0;
            __p[1].tv_nsec = 0;
            __p[2].tv_nsec = 0;
            do
              v498 = __ldaxr(v496);
            while (__stlxr(v498 - 1, v496));
            if (!v498)
            {
              ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
              std::__shared_weak_count::__release_weak(v495);
            }
            v499 = __p[0].tv_sec;
            *(_WORD *)_os_log_pack_fill() = 0;
            v500 = operator new();
            v501 = *(unsigned __int8 *)(v431 + 39);
            v502 = v662;
            if ((v501 & 0x80u) != 0)
            {
              v502 = *(_QWORD *)(v431 + 16);
              v501 = *(_QWORD *)(v431 + 24);
            }
            *(_QWORD *)v500 = v499;
            *(timespec *)(v500 + 8) = *(timespec *)&__p[0].tv_nsec;
            __p[0].tv_nsec = 0;
            __p[1].tv_sec = 0;
            *(timespec *)(v500 + 24) = *(timespec *)&__p[1].tv_nsec;
            __p[1].tv_nsec = 0;
            __p[2].tv_sec = 0;
            *(_QWORD *)(v500 + 40) = v502;
            *(_QWORD *)(v500 + 48) = v501;
            *(_BYTE *)(v500 + 56) = 16;
            v728 = 0;
            v729 = v500;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v430 + 24) + 40))(*(_QWORD *)(v430 + 24), &v729);
            v503 = v729;
            v729 = 0;
            if (v503)
            {
              v504 = *(std::__shared_weak_count **)(v503 + 32);
              if (v504)
              {
                v505 = (unint64_t *)&v504->__shared_owners_;
                do
                  v506 = __ldaxr(v505);
                while (__stlxr(v506 - 1, v505));
                if (!v506)
                {
                  ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
                  std::__shared_weak_count::__release_weak(v504);
                }
              }
              v507 = *(std::__shared_weak_count **)(v503 + 16);
              if (v507)
              {
                v508 = (unint64_t *)&v507->__shared_owners_;
                do
                  v509 = __ldaxr(v508);
                while (__stlxr(v509 - 1, v508));
                if (!v509)
                {
                  ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
                  std::__shared_weak_count::__release_weak(v507);
                }
              }
              MEMORY[0x212BC6398](v503, 0x10F0C40B62ED6C6);
              v510 = v728;
              v728 = 0;
              if (v510)
              {
                v511 = *(std::__shared_weak_count **)(v510 + 32);
                if (v511)
                {
                  v512 = (unint64_t *)&v511->__shared_owners_;
                  do
                    v513 = __ldaxr(v512);
                  while (__stlxr(v513 - 1, v512));
                  if (!v513)
                  {
                    ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
                    std::__shared_weak_count::__release_weak(v511);
                  }
                }
                v514 = *(std::__shared_weak_count **)(v510 + 16);
                if (v514)
                {
                  v515 = (unint64_t *)&v514->__shared_owners_;
                  do
                    v516 = __ldaxr(v515);
                  while (__stlxr(v516 - 1, v515));
                  if (!v516)
                  {
                    ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
                    std::__shared_weak_count::__release_weak(v514);
                  }
                }
                MEMORY[0x212BC6398](v510, 0x10F0C40B62ED6C6);
              }
            }
            v517 = (std::__shared_weak_count *)__p[2].tv_sec;
            if (__p[2].tv_sec)
            {
              v518 = (unint64_t *)(__p[2].tv_sec + 8);
              do
                v519 = __ldaxr(v518);
              while (__stlxr(v519 - 1, v518));
              if (!v519)
              {
                ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
                std::__shared_weak_count::__release_weak(v517);
              }
            }
            v520 = (std::__shared_weak_count *)__p[1].tv_sec;
            if (__p[1].tv_sec)
            {
              v521 = (unint64_t *)(__p[1].tv_sec + 8);
              do
                v522 = __ldaxr(v521);
              while (__stlxr(v522 - 1, v521));
              if (!v522)
              {
                ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
                std::__shared_weak_count::__release_weak(v520);
              }
            }
          }
          else
          {
            os_log_type_enabled(v491, OS_LOG_TYPE_ERROR);
            LOWORD(__p[0].tv_sec) = 0;
            v523 = (void *)_os_log_send_and_compose_impl();
            if (v523)
              free(v523);
          }
          if (v428)
          {
            sub_20E8C003C((uint64_t)&v720, "Failed to compute 4-DoF pose update.");
            sub_20E863570((uint64_t)&v720);
          }
          sub_20E863570((uint64_t)&v720);
          v524 = *(std::__shared_weak_count **)v724;
          if (*(_QWORD *)v724)
          {
            v525 = (unint64_t *)(*(_QWORD *)v724 + 8);
            do
              v526 = __ldaxr(v525);
            while (__stlxr(v526 - 1, v525));
            if (!v526)
            {
              ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
              std::__shared_weak_count::__release_weak(v524);
            }
          }
          goto LABEL_776;
        }
      }
      memmove(v480, v478, v479);
      goto LABEL_709;
    }
  }
LABEL_776:
  LOBYTE(v736[0]) = 0;
  v740 = 0;
LABEL_777:
  sub_20F04DA80((uint64_t)object, (uint64_t)v736);
  if (v740)
  {
    if (v738 && *((_QWORD *)&v737[9] + 1))
    {
      *(_QWORD *)&v737[10] = *((_QWORD *)&v737[9] + 1);
      operator delete(*((void **)&v737[9] + 1));
    }
    if (*(_QWORD *)&v737[8])
    {
      *((_QWORD *)&v737[8] + 1) = *(_QWORD *)&v737[8];
      operator delete(*(void **)&v737[8]);
    }
  }
  if (!v664 || !v689)
    goto LABEL_865;
  if (LODWORD(v690.tv_nsec) != *(_DWORD *)&object[16]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1970, (uint64_t)"query_image_id.view.key() == opt_relocalization_info->query_image_id.view.key()", 79, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (_DWORD)v691 != *(_DWORD *)&object[24]&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1971, (uint64_t)"query_image_id.source == opt_relocalization_info->query_image_id.source", 71, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_911;
  }
  if (!v689)
    sub_20E866B34();
  v527 = v52[921];
  if (v704 == v705 || v701 == v702 || v707 == v708)
    goto LABEL_859;
  v528 = v691;
  v529 = *(_QWORD *)(v527 + 40);
  if (v529)
  {
    v530 = *(_QWORD *)(v527 + 24);
    while (1)
    {
      v531 = *(int8x8_t **)(*(_QWORD *)v527 + 16 * (v530 % ((uint64_t)(*(_QWORD *)(v527 + 8) - *(_QWORD *)v527) >> 4)));
      if (v531[6].i32[0] == LODWORD(v690.tv_nsec))
        break;
      ++v530;
      if (!--v529)
        goto LABEL_797;
    }
  }
  else
  {
LABEL_797:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1574, (uint64_t)"query_state_features_ref", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_911;
    }
    v531 = 0;
  }
  sub_20FCBA6DC(v531, v528 >> 16, (unsigned __int16)v528);
  v532 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v527 + 168) + 440))(*(_QWORD *)(v527 + 168))
                               + 4824)
                   + 32 * (v528 >> 16)
                   + 8)
       + 1664 * (unsigned __int16)v528;
  v720 = *(timespec *)v532;
  v534 = *(timespec *)(v532 + 32);
  v533 = *(timespec *)(v532 + 48);
  v535 = *(timespec *)(v532 + 16);
  *(_QWORD *)v724 = *(_QWORD *)(v532 + 64);
  v723 = v533;
  v721 = v535;
  v722 = v534;
  v536 = *(_OWORD *)(v532 + 72);
  *(_QWORD *)&v724[24] = *(_QWORD *)(v532 + 88);
  *(_OWORD *)&v724[8] = v536;
  v731.i64[0] = 0;
  memset(v732, 0, sizeof(v732));
  *(_OWORD *)&v730[8] = 0u;
  *(_QWORD *)v730 = 0x3FF0000000000000;
  v731.i64[1] = 0x3FF0000000000000;
  v733 = 1.0;
  v735 = 0.0;
  v734 = 0uLL;
  v537 = *(_QWORD **)(*(_QWORD *)(v527 + 23216) + 4864);
  v538 = (_DWORD *)v537[310];
  v539 = v537[311] - (_QWORD)v538;
  if (v539)
  {
    v540 = v539 >> 2;
    v541 = (unint64_t)(v539 >> 2) <= 1 ? 1 : v539 >> 2;
    if (*v538 == *(_DWORD *)&object[16])
    {
      v542 = 0;
      v543 = 1;
    }
    else
    {
      v542 = 0;
      v544 = v538 + 1;
      v545 = v541 - 1;
      do
      {
        if (v545 == v542)
          goto LABEL_810;
        v546 = v544[v542++];
      }
      while (v546 != *(_DWORD *)&object[16]);
      v543 = v542 < v540;
    }
    v547 = v537[285] + 168 * v542;
    *(_OWORD *)v730 = *(_OWORD *)v547;
    *(_QWORD *)&v730[16] = *(_QWORD *)(v547 + 16);
    v731 = *(int64x2_t *)(v547 + 24);
    v732[0] = *(double *)(v547 + 40);
    *(_OWORD *)&v732[1] = *(_OWORD *)(v547 + 48);
    v733 = *(double *)(v547 + 64);
    v734 = *(float64x2_t *)(v547 + 144);
    v735 = *(double *)(v547 + 160);
    if (v543)
      goto LABEL_811;
  }
LABEL_810:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1590, (uint64_t)"result_after_update", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_911:
    abort();
  }
LABEL_811:
  v548 = *(_QWORD *)(v527 + 160);
  if (*(_BYTE *)(v548 + 368))
  {
    if (!*(_BYTE *)(v548 + 226))
    {
      v549 = (float64x2_t *)v710;
      if (v711 != v710)
      {
        _D0 = *(double *)(v548 + 320);
        v551 = *(float64x2_t *)(v548 + 304);
        _D2 = vextq_s8((int8x16_t)v551, (int8x16_t)v551, 8uLL).u64[0];
        _D16 = *(double *)(v548 + 352);
        _Q17 = *(float64x2_t *)(v548 + 336);
        v555 = vnegq_f64(_Q17);
        _Q3 = vmulq_f64(v551, v555);
        _D4 = *(_QWORD *)(v548 + 312);
        __asm
        {
          FMLS            D3, D4, V17.D[1]
          FMLS            D3, D0, V16.D[0]
        }
        v562.f64[0] = *(float64_t *)(v548 + 256);
        v558 = *(int64x2_t *)(v548 + 240);
        v559 = *(int64x2_t *)(v548 + 272);
        v560 = (float64x2_t)vzip2q_s64(v558, v559);
        v561 = (float64x2_t)vextq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v560.f64[0], 0), (int8x16_t)vdupq_laneq_s64((int64x2_t)v560, 1), 8uLL);
        v562.f64[1] = *(float64_t *)(v548 + 288);
        v563 = (float64x2_t)vzip1q_s64(v558, v559);
        v566 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v563, v555.f64[0]), v560, _Q17, 1), v562, _D16, 0);
        v564 = (float64x2_t)vextq_s8((int8x16_t)v566, (int8x16_t)v566, 8uLL);
        v565 = 3;
        v566.f64[1] = v564.f64[0];
        do
        {
          v564.f64[0] = v549[1].f64[0];
          _Q17 = *v549;
          v568 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v563, v549->f64[0]), v561, *v549, 1), v562, v564.f64[0]);
          __asm { FMLA            D19, D2, V17.D[1] }
          v564.f64[0] = _D19 + _D0 * v564.f64[0];
          v564 = vaddq_f64(_Q3, v564);
          *v549 = vaddq_f64(v566, v568);
          v549[1].f64[0] = v564.f64[0];
          v549 = (float64x2_t *)((char *)v549 + 24);
          v570 = v565;
          v565 += 3;
        }
        while (v570 < (v711 - (_BYTE *)v710) >> 3);
      }
    }
  }
  v736[0] = v730;
  LODWORD(v736[1]) = 0;
  *(_QWORD *)&v737[0] = &v734;
  DWORD2(v737[0]) = 0;
  v667.i64[0] = (uint64_t)&v720;
  v667.i32[2] = 0;
  v668 = COERCE_DOUBLE(&v724[8]);
  LODWORD(v669) = 0;
  sub_20FC82CD0((int64x2_t **)v736, v667.i64, (unsigned int **)&v704, &v710, &v707, &v701, *(_DWORD *)(*(_QWORD *)(v527 + 168) + 2576), __p);
  if (!v742)
    goto LABEL_858;
  v736[1] = 0;
  v736[0] = 0;
  *(_QWORD *)&v737[0] = 0;
  v571 = v682;
  v572 = v683;
  if (v682 == v683)
  {
    v573 = 0;
    goto LABEL_854;
  }
  v573 = 0;
  __asm { FMOV            V0.2D, #1.0 }
  v665 = *((double *)&_Q0 + 1);
  do
  {
    v575 = *(_QWORD *)(v527 + 288);
    v576 = *(_QWORD *)(v527 + 296);
    if (v576 != v575)
    {
      v577 = 0x86BCA1AF286BCA1BLL * ((v576 - v575) >> 3);
      v578 = *(_QWORD *)v571;
      do
      {
        v579 = v577 >> 1;
        v580 = v575 + 152 * (v577 >> 1);
        if (*(_QWORD *)v580 < v578 || *(_QWORD *)v580 == v578 && *(_DWORD *)(v580 + 8) < v571[2])
        {
          v575 = v580 + 152;
          v579 = v577 + ~v579;
        }
        v577 = v579;
      }
      while (v579);
    }
    if (v575 == v576 || *(_QWORD *)v575 != *(_QWORD *)v571 || *(_DWORD *)(v575 + 8) != v571[2])
    {
      v581 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1617, (uint64_t)"iter != local_map_ref_state_poses_.end()", 40, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v575 = v576;
      if (v581)
        abort();
    }
    v582.f64[0] = *(float64_t *)&v730[16];
    _V5.D[1] = v732[2];
    v584 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v730, v731);
    v585 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)&v732[1], 1);
    v586 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v730, v731);
    v582.f64[1] = v732[0];
    v587 = vextq_s8((int8x16_t)v586, (int8x16_t)v585, 8uLL);
    v588 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v584, v734.f64[0]), v586, v734, 1), v582, v735);
    _D16 = v734.f64[1];
    __asm { FMLA            D17, D16, V5.D[1] }
    v585.f64[0] = _D17 + v733 * v735;
    *(_QWORD *)&v586.f64[1] = v587.i64[0];
    v591.f64[1] = v665;
    *(_QWORD *)&v591.f64[0] = *(_OWORD *)&vnegq_f64(v585);
    _Q22.f64[0] = *(float64_t *)(v575 + 32);
    v593 = *(float64x2_t *)(v575 + 16);
    v594 = *(double *)(v575 + 64);
    v595 = *(float64x2_t *)(v575 + 48);
    _D17 = *(double *)(v575 + 96);
    v597 = *(float64x2_t *)(v575 + 80);
    _D23 = *(double *)(v575 + 128);
    _Q24 = *(float64x2_t *)(v575 + 112);
    v600 = vmulq_n_f64(v584, _Q22.f64[0]);
    v601 = vmulq_n_f64((float64x2_t)*(unint64_t *)&v732[1], _Q22.f64[0]);
    _Q22.f64[1] = v594;
    v602 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v593, (int64x2_t)v595), vnegq_f64(_Q24).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v593, (int64x2_t)v595), _Q24, 1), _Q22, _D23, 0);
    _D25 = *(_QWORD *)(v575 + 88);
    __asm
    {
      FMLS            D22, D25, V24.D[1]
      FMLS            D22, D17, V23.D[0]
    }
    v604 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v584, v593.f64[0]), v586, v595.f64[0]), v582, v597.f64[0]), (float64x2_t)0, v588);
    v605 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v732[1], v593.f64[0]), (float64x2_t)v587.u64[1], v595.f64[0]), (float64x2_t)*(unint64_t *)&v733, v597.f64[0]), (float64x2_t)0, v591);
    v606 = vmlsq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v584, v593, 1), v586, v595, 1), v582, v597, 1), (float64x2_t)0, v588);
    v607 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v732[1], v593, 1), (float64x2_t)v587.u64[1], v595, 1), (float64x2_t)*(unint64_t *)&v733, v597, 1), (float64x2_t)0, v591);
    v608 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v600, v586, v594), v582, _D17), (float64x2_t)0, v588);
    v609 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v601, (float64x2_t)v587.u64[1], v594), (float64x2_t)*(unint64_t *)&v733, _D17), (float64x2_t)0, v591);
    v610 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v584, v602.f64[0]), v586, v602, 1), v582, _Q22.f64[0]), v588);
    v611 = vaddq_f64(v591, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v732[1], v602.f64[0]), (float64x2_t)v587.u64[1], v602, 1), (float64x2_t)*(unint64_t *)&v733, _Q22.f64[0]));
    if ((unint64_t)v573 < *(_QWORD *)&v737[0])
    {
      *(float64x2_t *)v573 = v604;
      *((float64x2_t *)v573 + 1) = v605;
      *((float64x2_t *)v573 + 2) = v606;
      *((float64x2_t *)v573 + 3) = v607;
      *((float64x2_t *)v573 + 4) = v608;
      *((float64x2_t *)v573 + 5) = v609;
      *((float64x2_t *)v573 + 6) = v610;
      *((float64x2_t *)v573 + 7) = v611;
      v573 += 128;
      goto LABEL_820;
    }
    v612 = (char *)v736[0];
    v613 = (v573 - (char *)v736[0]) >> 7;
    v614 = v613 + 1;
    if ((unint64_t)(v613 + 1) >> 57)
      sub_20E867F44();
    v615 = *(_QWORD *)&v737[0] - (unint64_t)v736[0];
    if ((uint64_t)(*(_QWORD *)&v737[0] - (unint64_t)v736[0]) >> 6 > v614)
      v614 = v615 >> 6;
    if ((unint64_t)v615 >= 0x7FFFFFFFFFFFFF80)
      v616 = 0x1FFFFFFFFFFFFFFLL;
    else
      v616 = v614;
    if (v616)
    {
      v641 = v611;
      v643 = v610;
      v645 = v605;
      v647 = v604;
      v649 = v607;
      v653 = v606;
      v657 = v609;
      v663 = v608;
      if (v616 >> 57)
        sub_20E877A38();
      v617 = (char *)operator new(v616 << 7);
      v609 = v657;
      v608 = v663;
      v607 = v649;
      v606 = v653;
      v605 = v645;
      v604 = v647;
      v611 = v641;
      v610 = v643;
    }
    else
    {
      v617 = 0;
    }
    v618 = (float64x2_t *)&v617[128 * v613];
    *v618 = v604;
    v618[1] = v605;
    v618[2] = v606;
    v618[3] = v607;
    v618[4] = v608;
    v618[5] = v609;
    v618[6] = v610;
    v618[7] = v611;
    if (v573 == v612)
    {
      v626 = v573;
      v573 = (char *)&v618[8];
      v736[0] = &v617[128 * v613];
      v736[1] = &v618[8];
      *(_QWORD *)&v737[0] = &v617[128 * v616];
      if (!v626)
        goto LABEL_820;
LABEL_850:
      operator delete(v626);
      goto LABEL_820;
    }
    v619 = &v617[128 * v613];
    do
    {
      v620 = *((_OWORD *)v573 - 8);
      v621 = *((_OWORD *)v573 - 7);
      v622 = *((_OWORD *)v573 - 5);
      *((_OWORD *)v619 - 6) = *((_OWORD *)v573 - 6);
      *((_OWORD *)v619 - 5) = v622;
      *((_OWORD *)v619 - 8) = v620;
      *((_OWORD *)v619 - 7) = v621;
      v623 = *((_OWORD *)v573 - 4);
      v624 = *((_OWORD *)v573 - 3);
      v625 = *((_OWORD *)v573 - 1);
      *((_OWORD *)v619 - 2) = *((_OWORD *)v573 - 2);
      *((_OWORD *)v619 - 1) = v625;
      *((_OWORD *)v619 - 4) = v623;
      *((_OWORD *)v619 - 3) = v624;
      v619 -= 128;
      v573 -= 128;
    }
    while (v573 != v612);
    v626 = (char *)v736[0];
    v573 = (char *)&v618[8];
    v736[0] = v619;
    v736[1] = &v618[8];
    *(_QWORD *)&v737[0] = &v617[128 * v616];
    if (v626)
      goto LABEL_850;
LABEL_820:
    v736[1] = v573;
    v571 += 4;
  }
  while (v571 != v572);
  if (!v742)
    sub_20E866B34();
LABEL_854:
  memcpy((char *)v737 + 8, __p, 0x120uLL);
  v52 = v666;
  if (v688 && v684)
  {
    v685 = v684;
    operator delete(v684);
  }
  v684 = v736[0];
  v685 = v573;
  v686 = *(_QWORD *)&v737[0];
  *(_QWORD *)&v737[0] = 0;
  v736[1] = 0;
  v736[0] = 0;
  memcpy(v687, (char *)v737 + 8, sizeof(v687));
  v688 = 1;
  sub_20F408864(*(_QWORD *)(v527 + 160), (uint64_t)object);
LABEL_858:
  v527 = v52[921];
LABEL_859:
  v627 = *(_QWORD *)(v527 + 160);
  if (!*(_BYTE *)(v627 + 226) && !*(_BYTE *)(v627 + 872))
    sub_20F408600(v627);
  v628 = v52[909];
  if (v628)
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v628 + 48))(v628, object);
  sub_20F8008AC(v52[921] + 312);
LABEL_865:
  v629 = sub_210219C18();
  v630 = v689;
  v631 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v631 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(v736[0]) = 67109120;
    HIDWORD(v736[0]) = v630;
    v633 = (char *)_os_log_send_and_compose_impl();
    v634 = strlen(v633);
    __p[0].tv_sec = 0;
    pthread_threadid_np(0, (__uint64_t *)__p);
    v635 = __p[0].tv_sec;
    timespec_get(__p, 1);
    sub_210219E20(v736, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v629 + 1), (__int128 *)(v629 + 5), "FEOI:IPRL:%d", 0xCuLL, v633, v634, v635, __p);
    std::mutex::lock(&stru_254A5A410);
    v636 = qword_254A5A458;
    for (i = unk_254A5A460; v636 != i; v636 += 40)
    {
      v638 = *(_QWORD *)(v636 + 32);
      if (!v638)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v638 + 48))(v638, v736);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(v737[7]) < 0)
    {
      operator delete(*((void **)&v737[6] + 1));
      if (SBYTE7(v737[6]) < 0)
        goto LABEL_875;
LABEL_872:
      if (BYTE8(v737[4]))
      {
LABEL_876:
        if (SBYTE7(v737[4]) < 0)
          operator delete(*(void **)&v737[3]);
      }
    }
    else
    {
      if ((SBYTE7(v737[6]) & 0x80000000) == 0)
        goto LABEL_872;
LABEL_875:
      operator delete(*(void **)&v737[5]);
      if (BYTE8(v737[4]))
        goto LABEL_876;
    }
    if (BYTE8(v737[2]) && SBYTE7(v737[2]) < 0)
      operator delete(*(void **)&v737[1]);
    if (SHIBYTE(v737[0]) < 0)
      operator delete(v736[1]);
    if (v633)
      free(v633);
  }
  if (os_signpost_enabled((os_log_t)*v629))
  {
    LODWORD(v736[0]) = 67109120;
    HIDWORD(v736[0]) = v630;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v297 = v689 != 0;
  if (v689)
  {
    if (v688 && v684)
    {
      v685 = v684;
      operator delete(v684);
    }
    if (v682)
    {
      v683 = v682;
      operator delete(v682);
    }
  }
LABEL_893:
  if (v701)
  {
    v702 = v701;
    operator delete(v701);
  }
  if (v704)
  {
    v705 = v704;
    operator delete(v704);
  }
  if (v707)
  {
    v708 = v707;
    operator delete(v707);
  }
  if (v710)
  {
    v711 = v710;
    operator delete(v710);
  }
  if (v713)
  {
    v714 = v713;
    operator delete(v713);
  }
  return v297;
}

void sub_20F0358FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *object;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;

  if (LOBYTE(STACK[0x818]))
  {
    if (SLOBYTE(STACK[0x817]) < 0)
      operator delete((void *)STACK[0x800]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x510]);
  sub_20F035EA4((uint64_t)&object);
  v72 = (void *)STACK[0x478];
  if (STACK[0x478])
  {
    STACK[0x480] = (unint64_t)v72;
    operator delete(v72);
    v73 = (void *)STACK[0x490];
    if (!STACK[0x490])
    {
LABEL_6:
      v74 = (void *)STACK[0x4A8];
      if (!STACK[0x4A8])
        goto LABEL_7;
      goto LABEL_13;
    }
  }
  else
  {
    v73 = (void *)STACK[0x490];
    if (!STACK[0x490])
      goto LABEL_6;
  }
  STACK[0x498] = (unint64_t)v73;
  operator delete(v73);
  v74 = (void *)STACK[0x4A8];
  if (!STACK[0x4A8])
  {
LABEL_7:
    v75 = (void *)STACK[0x4C0];
    if (!STACK[0x4C0])
      goto LABEL_8;
    goto LABEL_14;
  }
LABEL_13:
  STACK[0x4B0] = (unint64_t)v74;
  operator delete(v74);
  v75 = (void *)STACK[0x4C0];
  if (!STACK[0x4C0])
  {
LABEL_8:
    v76 = (void *)STACK[0x4D8];
    if (!STACK[0x4D8])
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_14:
  STACK[0x4C8] = (unint64_t)v75;
  operator delete(v75);
  v76 = (void *)STACK[0x4D8];
  if (!STACK[0x4D8])
LABEL_10:
    _Unwind_Resume(a1);
LABEL_9:
  STACK[0x4E0] = (unint64_t)v76;
  operator delete(v76);
  goto LABEL_10;
}

uint64_t sub_20F035EA4(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 496))
  {
    if (*(_BYTE *)(a1 + 480))
    {
      v2 = *(void **)(a1 + 168);
      if (v2)
      {
        *(_QWORD *)(a1 + 176) = v2;
        operator delete(v2);
      }
    }
    v3 = *(void **)(a1 + 144);
    if (v3)
    {
      *(_QWORD *)(a1 + 152) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void sub_20F035EF4(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>, double a10@<D5>, __n128 a11@<Q6>, __n128 a12@<Q7>)
{
  sub_20F02D044(a4, *(_QWORD *)(a1 + 7368), a2, a3, 1, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_20F035F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_BYTE *)(a2 + 16))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 7368) + 160);
    if (*(_BYTE *)(v2 + 368))
    {
      if (*(_DWORD *)(a2 + 8) >= *(_DWORD *)(v2 + 232))
        sub_20F408600(v2);
    }
  }
}

uint64_t sub_20F035F3C(uint64_t result, __int16 a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 7368) + 120) + 216) = a2;
  return result;
}

void sub_20F035F4C(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
  sub_20F1332A8(v6, *(_DWORD *)(a2 + 8), *((_DWORD *)a3 + 2));
  v7 = a1[921];
  v8 = v7 + 1184;
  if (*(_BYTE *)(v7 + 1200))
  {
    v9 = *a3;
    *(_DWORD *)(v8 + 8) = *((_DWORD *)a3 + 2);
    *(_QWORD *)v8 = v9;
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a3;
    *(_BYTE *)(v7 + 1200) = 1;
  }
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
  if (*(_QWORD *)(*(_QWORD *)(v10 + 4864) + 2480) != *(_QWORD *)(*(_QWORD *)(v10 + 4864) + 2488))
  {
    v11 = **(_DWORD **)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1) + 4864) + 2480)
        - *((_DWORD *)a3 + 2);
    sub_20F7FA5A0(v11, a1[921] + 312);
  }
}

__n128 sub_20F03602C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v2 = *(_QWORD *)(a1 + 7368);
  result = *(__n128 *)(a2 + 144);
  v4 = *(_OWORD *)(a2 + 160);
  v5 = *(_OWORD *)(a2 + 176);
  *(_WORD *)(v2 + 1656) = *(_WORD *)(a2 + 192);
  *(_OWORD *)(v2 + 1464) = *(_OWORD *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v2 + 1512) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 1528) = v8;
  *(_OWORD *)(v2 + 1480) = v6;
  *(_OWORD *)(v2 + 1496) = v7;
  v9 = *(_OWORD *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 96);
  v11 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v2 + 1576) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v2 + 1592) = v11;
  *(_OWORD *)(v2 + 1544) = v9;
  *(_OWORD *)(v2 + 1560) = v10;
  *(_OWORD *)(v2 + 1624) = v4;
  *(_OWORD *)(v2 + 1640) = v5;
  *(__n128 *)(v2 + 1608) = result;
  return result;
}

uint64_t sub_20F036078(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  void **v27;
  void **v28;
  int v30;
  _BYTE v32[288];
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;

  v3 = *(unsigned __int8 *)(a1 + 6664);
  if (!*(_BYTE *)(a1 + 6664))
    goto LABEL_30;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 2440) + 128) != 1 || (v5 = *(_QWORD *)(a1 + 7368), *(int *)(v5 + 17368) < 1))
  {
    v3 = 0;
LABEL_30:
    v30 = 0;
    return v3 | (v30 << 8);
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  sub_20EE65E28((uint64_t)&v36, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v8 = *a3;
  v7 = a3[1];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    v10 = 0x6DB6DB6DB6DB6DB7 * (v9 >> 3);
    if (v10 >= 0x492492492492493)
      sub_20EABADD4();
    v11 = (char *)operator new(v9);
    v12 = 0;
    v39 = v11;
    v40 = v11;
    v41 = &v11[56 * v10];
    do
    {
      v13 = v8 + v12;
      v14 = &v11[v12];
      *(_QWORD *)v14 = *(_QWORD *)(v8 + v12);
      v15 = *(_OWORD *)(v8 + v12 + 8);
      *((_QWORD *)v14 + 3) = *(_QWORD *)(v8 + v12 + 24);
      *(_OWORD *)(v14 + 8) = v15;
      v16 = *(_OWORD *)(v8 + v12 + 32);
      *((_QWORD *)v14 + 6) = *(_QWORD *)(v8 + v12 + 48);
      *((_OWORD *)v14 + 2) = v16;
      v12 += 56;
    }
    while (v13 + 56 != v7);
    v40 = &v11[v12];
  }
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v32[104] = 0;
  v32[280] = 0;
  sub_20F130780(v5 + 1712, (uint64_t)&v36, (uint64_t)v32);
  v17 = v33;
  if (v33)
  {
    v18 = v34;
    v19 = v33;
    if ((void *)v34 != v33)
    {
      do
      {
        v18 -= 240;
        sub_20E990F68(v18);
      }
      while ((void *)v18 != v17);
      v19 = v33;
    }
    v34 = (uint64_t)v17;
    operator delete(v19);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  v20 = v36;
  if (v36)
  {
    v21 = v37;
    v22 = v36;
    if (v37 != v36)
    {
      do
      {
        v21 -= 13;
        sub_20E9905B4(v21);
      }
      while (v21 != v20);
      v22 = v36;
    }
    v37 = v20;
    operator delete(v22);
  }
  v23 = *(_QWORD *)(a1 + 7368);
  sub_20F16BC4C(*(_QWORD *)(v23 + 6560), 1, *(_QWORD **)(*(_QWORD *)(v23 + 6576) + 7952));
  v24 = *(_QWORD **)(v23 + 6576);
  if (v24[1027])
  {
    v25 = (uint64_t *)v24[382];
    v26 = (uint64_t *)v24[383];
    if (v25 != v26)
    {
      v27 = (void **)(v24 + 382);
      v28 = (void **)(v23 + 6536);
      if (v25[1] != v25[2] && v28 != v27)
        sub_20F04F4F0(v28, v25, v26, ((char *)v26 - (char *)v25) >> 5);
    }
  }
  v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 7368) + 6560) + 2536);
  v30 = 1;
  return v3 | (v30 << 8);
}

void sub_20F0362F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20ED2894C((void **)(v1 - 136));
  sub_20F02CA48((_QWORD *)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_20F036310(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 88);
  if (v3)
  {
    *(_QWORD *)(v1 - 80) = v3;
    operator delete(v3);
  }
  sub_20EE5EE28((_QWORD *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_20F036334(_QWORD *a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  void *v65;
  uint64_t v66;
  void *v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  double v72;
  double *v73;
  double *v74;
  unint64_t v75;
  unint64_t v76;
  double *v77;
  double *v78;
  double v79;
  double *v80;
  double *v81;
  _QWORD *v82;
  char *v83;
  double *v84;
  char *v85;
  _BYTE *v86;
  uint64_t v87;
  double *v88;
  int64_t v89;
  _DWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  char *v93;
  char *v94;
  _QWORD *v95;
  int8x8_t v96;
  unint64_t v97;
  uint8x8_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  __int32 *v114;
  __int32 *v115;
  __int32 *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  __int128 v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *p_shared_owners;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t *i;
  uint64_t v151;
  unint64_t v152;
  uint8x8_t v153;
  uint64_t **v154;
  uint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  float v160;
  float v161;
  _BOOL8 v162;
  unint64_t v163;
  unint64_t v164;
  size_t prime;
  uint64_t v166;
  _QWORD *v167;
  void *v168;
  void *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  size_t v173;
  size_t v174;
  size_t v175;
  _QWORD *j;
  size_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint8x8_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  size_t v185;
  uint64_t v186;
  void *v187;
  unint64_t v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  _QWORD *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  _BOOL4 v200;
  uint64_t *v201;
  float64x2_t v202;
  float64x2_t v203;
  double v204;
  const double *v210;
  float64x2_t v212;
  int64x2_t v213;
  float64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v222;
  double v223;
  uint64_t v224;
  unint64_t v225;
  _QWORD *v226;
  uint64_t *v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v251;
  int v253;
  uint64_t v254;
  float64x2_t v255;
  float64x2_t v256;
  int v257;
  uint64_t v258;
  unsigned int *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t m;
  void *v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v273;
  uint64_t v274;
  double v275;
  double v277;
  double v279;
  __int128 v283;
  double v286;
  double v289;
  float64x2_t v290;
  unint64_t v291;
  unint64_t v292;
  double v293;
  float64x2_t v295;
  double v296;
  double v297;
  uint64_t v298;
  int64x2_t v300;
  float64x2_t v302;
  float64x2_t v303;
  int8x16_t v304;
  int8x16_t v305;
  float64x2_t v308;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  int8x16_t v315;
  float64x2_t v317;
  int8x16_t v319;
  float64x2_t v320;
  uint64_t v321;
  double v322;
  double v326;
  double *v327;
  char *v328;
  char *v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  char *v333;
  char *v334;
  __int128 v335;
  __int128 v336;
  char *v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  int8x8_t **v355;
  uint64_t v356;
  int v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  _DWORD *v367;
  _DWORD *v368;
  int v369;
  _DWORD *v370;
  double v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int *v374;
  double v375;
  uint64_t v376;
  int8x16_t v377;
  int8x16_t v378;
  uint64_t v380;
  unsigned int *v381;
  _BOOL4 v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  char v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int *v390;
  unsigned int *v391;
  unsigned int *v392;
  unint64_t v394;
  unsigned int *v395;
  unint64_t v396;
  unint64_t v397;
  float64x2_t v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  float64x2_t v403;
  unint64_t v404;
  int64x2_t v405;
  int64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  float64x2_t v412;
  float64x2_t v413;
  float64x2_t v414;
  float64x2_t v415;
  float64x2_t v416;
  float64x2_t v417;
  float64x2_t v418;
  unint64_t v419;
  float64x2_t v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v426;
  float64x2_t v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  float64x2_t v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  int v448;
  unint64_t v449;
  unint64_t v450;
  uint64_t v451;
  size_t v452;
  const char *v453;
  int v454;
  unint64_t v455;
  unint64_t v456;
  uint64_t v457;
  const char *v458;
  size_t v459;
  unsigned __int8 v460;
  unsigned __int8 v461;
  size_t v462;
  const char *v463;
  void **v464;
  uint64_t v465;
  uint64_t v466;
  void **v467;
  NSObject *v468;
  uint64_t v469;
  uint64_t v470;
  size_t v471;
  std::__shared_weak_count_vtbl *v472;
  std::__shared_weak_count *v473;
  std::__shared_weak_count *v474;
  unint64_t *v475;
  unint64_t v476;
  unint64_t v477;
  _QWORD *v478;
  uint64_t v479;
  const char *v480;
  void *v481;
  int v482;
  std::__shared_weak_count *v483;
  unint64_t *v484;
  unint64_t v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  void *v489;
  std::__shared_weak_count *v490;
  unint64_t *v491;
  unint64_t v492;
  _BYTE *v493;
  unsigned __int8 v494;
  size_t v495;
  const char *v496;
  void **v497;
  uint64_t v498;
  uint64_t v499;
  void **v500;
  NSObject *v501;
  uint64_t v502;
  uint64_t v503;
  size_t v504;
  std::__shared_weak_count_vtbl *v505;
  std::__shared_weak_count *v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  unint64_t v510;
  uint64_t v511;
  int v512;
  _QWORD *v513;
  uint64_t v514;
  uint64_t v515;
  void *v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  int v523;
  void *v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  uint64_t *v528;
  _BYTE *v529;
  _BYTE *v530;
  unsigned __int8 v531;
  unint64_t v532;
  int v534;
  char *v535;
  size_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t n;
  uint64_t v540;
  int v541;
  uint64_t v542;
  _QWORD *v543;
  uint64_t *v544;
  uint64_t *v545;
  void **v546;
  void **v547;
  uint64_t v550;
  uint64_t v551;
  int v552;
  _BYTE *v553;
  _BYTE *v554;
  const char *v555;
  _BYTE *v556;
  int v557;
  _BYTE *v558;
  uint64_t *v559;
  unsigned int *v560;
  float64_t v561;
  float64x2_t v562;
  unsigned int *k;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  unint64_t v568;
  float64x2_t v569;
  float64_t v570;
  float64x2_t v571;
  unint64_t v572;
  float64x2_t v573;
  float64_t v574;
  int8x16_t v575;
  float64_t v576;
  double v577;
  double v578;
  int8x16_t v579;
  double v580;
  int8x16_t v581;
  float64_t v582;
  int8x8_t **v583;
  float64_t v584;
  unsigned int *v585;
  uint64_t *v586;
  double v587;
  uint64_t v588;
  unint64_t v589;
  double v590;
  uint64_t v591;
  uint64_t v592;
  _QWORD *v594;
  float64x2_t v595;
  _BYTE v596[32];
  float64x2_t v597;
  double v598;
  float64x2_t v599;
  float64_t v600;
  unsigned __int8 v601;
  __uint64_t v602[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v604;
  const char *v605;
  int v606;
  const char *v607;
  uint64_t v608;
  std::__shared_weak_count *v609;
  uint64_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  _BYTE v615[32];
  float64x2_t v616;
  float64x2_t v617;
  void *v618;
  uint64_t v619;
  double v620;
  uint64_t v621;
  uint64_t v622;
  double v623;
  double v624;
  uint64_t v625;
  float64x2_t v626;
  double v627;
  uint64_t v628;
  void *v629;
  __int128 v630;
  __int128 v631;
  double v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  void *v636;
  _BYTE *v637;
  uint64_t v638;
  void *v639;
  void *v640;
  uint64_t v641;
  void *v642;
  _BYTE *v643;
  uint64_t v644;
  __int128 v645;
  uint64_t v646;
  char v647;
  void *object[4];
  void *v649[2];
  _BYTE v650[32];
  __int128 v651;
  void *v652[2];
  void *v653[36];
  unsigned __int8 v654;
  void *v655;
  void *v656;
  double v657;
  char v658;
  uint64_t v659;
  float64x2x3_t v660;

  v659 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v7 = *a2;
  if (*a2 == a2[1])
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 2078, (uint64_t)"!trimmed_camera_feature_samples.empty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_674;
    }
    v8 = *(unsigned int **)(*a2 + 8);
    if (v8 != *(unsigned int **)(*a2 + 16))
      goto LABEL_3;
  }
  else
  {
    v8 = *(unsigned int **)(v7 + 8);
    if (v8 != *(unsigned int **)(v7 + 16))
    {
LABEL_3:
      v9 = *v8;
      v10 = (_QWORD *)a1[921];
      v11 = v10[5];
      v589 = *v8;
      if (v11)
      {
LABEL_4:
        v12 = v10[3];
        v14 = v10;
        v13 = *v10;
        v15 = (v14[1] - v13) >> 4;
        v16 = v12;
        v17 = v11;
        do
        {
          v18 = *(_QWORD *)(v13 + 16 * (v16 % v15));
          if (*(_DWORD *)(v18 + 48) == v9)
            goto LABEL_8;
          ++v16;
          --v17;
        }
        while (v17);
        v18 = 0;
LABEL_8:
        while (*(_DWORD *)(*(_QWORD *)(v13 + 16 * (v12 % v15)) + 48) != v9)
        {
          ++v12;
          if (!--v11)
            goto LABEL_16;
        }
        goto LABEL_17;
      }
      goto LABEL_15;
    }
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 2079, (uint64_t)"!trimmed_camera_feature_samples.front().feature_samples.empty()", 63, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_674;
  }
  v9 = **(_DWORD **)(*a2 + 8);
  v10 = (_QWORD *)a1[921];
  v11 = v10[5];
  v589 = v9;
  if (v11)
    goto LABEL_4;
LABEL_15:
  v18 = 0;
LABEL_16:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 2085, (uint64_t)"impl_->camera_set_features(state_id)", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_674:
    abort();
  }
LABEL_17:
  v594 = a1;
  v19 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
  memset(object, 0, 24);
  v586 = a2;
  v20 = (unint64_t)object;
  sub_20EE65E28((uint64_t)object, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  v649[0] = 0;
  object[3] = 0;
  v649[1] = 0;
  v21 = *a3;
  v22 = a3[1];
  v23 = v22 - *a3;
  if (v22 != *a3)
  {
    v24 = 0x6DB6DB6DB6DB6DB7 * (v23 >> 3);
    if (v24 > 0x492492492492492)
      sub_20EABADD4();
    v25 = (char *)operator new(v23);
    v26 = 0;
    object[3] = v25;
    v649[0] = v25;
    v649[1] = &v25[56 * v24];
    do
    {
      v27 = v21 + v26;
      v28 = &v25[v26];
      *(_QWORD *)v28 = *(_QWORD *)(v21 + v26);
      v29 = *(_OWORD *)(v21 + v26 + 8);
      *((_QWORD *)v28 + 3) = *(_QWORD *)(v21 + v26 + 24);
      *(_OWORD *)(v28 + 8) = v29;
      v30 = *(_OWORD *)(v21 + v26 + 32);
      *((_QWORD *)v28 + 6) = *(_QWORD *)(v21 + v26 + 48);
      *((_OWORD *)v28 + 2) = v30;
      v26 += 56;
    }
    while (v27 + 56 != v22);
    v649[0] = &v25[v26];
  }
  sub_20F130780(v19, (uint64_t)object, (uint64_t)&v595);
  if (object[3])
  {
    v649[0] = object[3];
    operator delete(object[3]);
  }
  v31 = object[0];
  if (object[0])
  {
    v32 = object[1];
    v33 = object[0];
    if (object[1] != object[0])
    {
      do
      {
        v32 -= 13;
        sub_20E9905B4(v32);
      }
      while (v32 != v31);
      v33 = object[0];
    }
    object[1] = v31;
    operator delete(v33);
  }
  if (*(int *)((*(uint64_t (**)(_QWORD *))(*v594 + 432))(v594) + 4904) >= 1)
  {
    v34 = v594[921];
    v35 = (*(uint64_t (**)(_QWORD *))(*v594 + 432))(v594);
    if (*(int *)(v35 + 4904) <= 0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1495, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v36 = *(_QWORD *)(v34 + 1672);
    if (v36)
    {
      v37 = *(_QWORD *)(*(_QWORD *)(v35 + 4864) + 2280)
          + 168
          * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v35 + 4864) + 2512) - *(_QWORD *)(*(_QWORD *)(v35 + 4864) + 2504)) >> 3);
      v38 = *(unsigned __int8 *)(v36 + 2632);
      v39 = *(_OWORD *)(v37 - 136);
      v40 = *(_OWORD *)(v37 - 152);
      *(_OWORD *)(v36 + 2464) = *(_OWORD *)(v37 - 168);
      *(_OWORD *)(v36 + 2480) = v40;
      *(_OWORD *)(v36 + 2496) = v39;
      v41 = *(_OWORD *)(v37 - 104);
      v42 = *(_OWORD *)(v37 - 88);
      v43 = *(_OWORD *)(v37 - 72);
      *(_OWORD *)(v36 + 2512) = *(_OWORD *)(v37 - 120);
      *(_OWORD *)(v36 + 2560) = v43;
      *(_OWORD *)(v36 + 2544) = v42;
      *(_OWORD *)(v36 + 2528) = v41;
      v44 = *(_OWORD *)(v37 - 40);
      v45 = *(_OWORD *)(v37 - 24);
      v46 = *(_QWORD *)(v37 - 8);
      *(_OWORD *)(v36 + 2576) = *(_OWORD *)(v37 - 56);
      *(_QWORD *)(v36 + 2624) = v46;
      *(_OWORD *)(v36 + 2608) = v45;
      *(_OWORD *)(v36 + 2592) = v44;
      if (v38)
      {
        if (*(_BYTE *)(v36 + 488))
        {
LABEL_35:
          sub_20F0A4710(v36);
          goto LABEL_38;
        }
      }
      else
      {
        *(_BYTE *)(v36 + 2632) = 1;
        if (*(_BYTE *)(v36 + 488))
          goto LABEL_35;
      }
      sub_20F0A2138(v36, a3);
    }
  }
LABEL_38:
  v47 = v594;
  if (*((_BYTE *)v594 + 2448))
  {
    v48 = v594[305];
    if (v48)
    {
      if (*(_BYTE *)(v48 + 128) == 2)
      {
        if (!*(_BYTE *)((*(uint64_t (**)(void))(*v594 + 432))() + 1043)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 2104, (uint64_t)"vfusion().IsUsingIMU()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v49 = *(_QWORD *)(*v586 + 8);
        v50 = *(double *)(v49 + 8);
        v51 = *(double *)(v49 + 16);
        v52 = (*(uint64_t (**)(_QWORD *))(*v594 + 432))(v594);
        v53 = sub_20F13C8E4(v52);
        _ZF = sub_20EFDED94(v594[305], v53, v50 + v51) == 2;
        v47 = v594;
        if (!_ZF)
        {
          if (*(_BYTE *)((*(uint64_t (**)(_QWORD *))(*v594 + 432))(v594) + 1043)
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 2115, (uint64_t)"!vfusion().IsUsingIMU()", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v54 = (*(uint64_t (**)(_QWORD *))(*v594 + 432))(v594);
          v630 = 0uLL;
          v629 = 0;
          v20 = (unint64_t)&v629;
          sub_20EE65E28((uint64_t)&v629, *v586, v586[1], 0x4EC4EC4EC4EC4EC5 * ((v586[1] - *v586) >> 3));
          v631 = 0uLL;
          v632 = 0.0;
          v55 = *a3;
          v56 = a3[1];
          v57 = v56 - *a3;
          if (v56 != *a3)
          {
            v58 = 0x6DB6DB6DB6DB6DB7 * (v57 >> 3);
            if (v58 > 0x492492492492492)
              sub_20EABADD4();
            v59 = (char *)operator new(v57);
            v60 = 0;
            *(_QWORD *)&v631 = v59;
            *((_QWORD *)&v631 + 1) = v59;
            *(_QWORD *)&v632 = &v59[56 * v58];
            do
            {
              v61 = v55 + v60;
              v62 = &v59[v60];
              *(_QWORD *)v62 = *(_QWORD *)(v55 + v60);
              v63 = *(_OWORD *)(v55 + v60 + 8);
              *((_QWORD *)v62 + 3) = *(_QWORD *)(v55 + v60 + 24);
              *(_OWORD *)(v62 + 8) = v63;
              v64 = *(_OWORD *)(v55 + v60 + 32);
              *((_QWORD *)v62 + 6) = *(_QWORD *)(v55 + v60 + 48);
              *((_OWORD *)v62 + 2) = v64;
              v60 += 56;
            }
            while (v61 + 56 != v56);
            *((_QWORD *)&v631 + 1) = &v59[v60];
          }
          v619 = 0;
          v618 = 0;
          v620 = 0.0;
          LOBYTE(object[0]) = 0;
          LOBYTE(v653[8]) = 0;
          sub_20F130780(v54, (uint64_t)&v629, (uint64_t)&v611);
          if (v601 == LOBYTE(v616.f64[0]))
          {
            if (v601)
            {
              *(float64x2_t *)&v596[16] = v613;
              v597 = v614;
              v598 = *(double *)v615;
              v595 = v611;
              *(float64x2_t *)v596 = v612;
              v599 = *(float64x2_t *)&v615[8];
              v600 = *(double *)&v615[24];
            }
          }
          else if (v601)
          {
            v601 = 0;
          }
          else
          {
            v598 = *(double *)v615;
            *(float64x2_t *)&v596[16] = v613;
            v597 = v614;
            v595 = v611;
            *(float64x2_t *)v596 = v612;
            v599 = *(float64x2_t *)&v615[8];
            v600 = *(double *)&v615[24];
            v601 = 1;
          }
          v65 = v618;
          if (v618)
          {
            v66 = v619;
            v67 = v618;
            if ((void *)v619 != v618)
            {
              do
              {
                v66 -= 240;
                sub_20E990F68(v66);
              }
              while ((void *)v66 != v65);
              v67 = v618;
            }
            v619 = (uint64_t)v65;
            operator delete(v67);
          }
          if ((_QWORD)v631)
          {
            *((_QWORD *)&v631 + 1) = v631;
            operator delete((void *)v631);
          }
          v68 = v629;
          if (v629)
          {
            v69 = (_QWORD *)v630;
            v70 = v629;
            if ((void *)v630 != v629)
            {
              do
              {
                v69 -= 13;
                sub_20E9905B4(v69);
              }
              while (v69 != v68);
              v70 = v629;
            }
            *(_QWORD *)&v630 = v68;
            operator delete(v70);
          }
          v47 = v594;
        }
      }
    }
  }
  v71 = *(_QWORD *)(v47[921] + 1176);
  v72 = *(double *)(*(_QWORD *)(v18 + 24) + 8) + *(double *)(*(_QWORD *)(v18 + 24) + 16);
  object[0] = a4;
  LODWORD(object[1]) = v589;
  v611.f64[0] = v72;
  v73 = *(double **)v71;
  v74 = *(double **)(v71 + 8);
  if (v74 != *(double **)v71)
  {
    v75 = ((uint64_t)v74 - *(_QWORD *)v71) >> 3;
    v74 = *(double **)v71;
    do
    {
      v76 = v75 >> 1;
      v77 = &v74[v75 >> 1];
      v79 = *v77;
      v78 = v77 + 1;
      v75 += ~(v75 >> 1);
      if (v79 < v72)
        v74 = v78;
      else
        v75 = v76;
    }
    while (v75);
  }
  sub_20F05242C((void **)v71, v74, (uint64_t *)&v611);
  sub_20F0527A0((char **)(v71 + 24), (char *)(*(_QWORD *)(v71 + 24) + 16 * (v74 - v73)), object);
  v81 = *(double **)v71;
  v80 = *(double **)(v71 + 8);
  v82 = v594;
  if (*(double **)v71 != v80)
  {
    v83 = *(char **)(v71 + 24);
    v84 = *(double **)v71;
    v85 = v83;
    while (*(v80 - 1) - *v84 >= *(double *)(v71 + 48))
    {
      ++v84;
      v85 += 16;
      if (v84 == v80)
      {
        v84 = *(double **)(v71 + 8);
        break;
      }
    }
    if (v83 != v85)
    {
      v86 = *(_BYTE **)(v71 + 32);
      v87 = v86 - v85;
      if (v86 != v85)
      {
        memmove(*(void **)(v71 + 24), v85, v87 - 4);
        v81 = *(double **)v71;
      }
      *(_QWORD *)(v71 + 32) = &v83[v87];
      v82 = v594;
    }
    if (v81 != v84)
    {
      v88 = *(double **)(v71 + 8);
      v89 = (char *)v88 - (char *)v84;
      if (v88 != v84)
        memmove(v81, v84, (char *)v88 - (char *)v84);
      *(_QWORD *)(v71 + 8) = (char *)v81 + v89;
    }
  }
  v90 = *(_DWORD **)(v82[921] + 1224);
  if (v90)
  {
    do
    {
      while (*((unsigned __int8 *)v90 + 20) <= 1u)
      {
        v90 = *(_DWORD **)v90;
        if (!v90)
          goto LABEL_126;
      }
      kdebug_trace();
      kdebug_trace();
      v91 = v594;
      v92 = (_QWORD *)v594[921];
      v93 = (char *)v92[5];
      if (v93)
      {
        v94 = 0;
        while (*(_DWORD *)(*(_QWORD *)(*v92 + 16 * ((unint64_t)&v94[v92[3]] % ((uint64_t)(v92[1] - *v92) >> 4)))
                          + 48) != v90[4])
        {
          if (v93 == ++v94)
            goto LABEL_99;
        }
        object[0] = *((void **)v594 + 921);
        LOBYTE(object[1]) = 0;
        object[2] = v94;
        *(_QWORD *)&v611.f64[0] = v92;
        *(_QWORD *)&v612.f64[0] = v94 + 1;
        LOBYTE(v611.f64[1]) = v93 - 1 == v94;
        sub_20FCBD248(v92, (uint64_t)object, (uint64_t)&v611, (uint64_t)&v629);
        v91 = v594;
      }
LABEL_99:
      kdebug_trace();
      kdebug_trace();
      v95 = (_QWORD *)v91[921];
      v96 = (int8x8_t)v95[152];
      v97 = *((_QWORD *)v90 + 1);
      v98 = (uint8x8_t)vcnt_s8(v96);
      v98.i16[0] = vaddlv_u8(v98);
      if (v98.u32[0] > 1uLL)
      {
        if (v97 >= *(_QWORD *)&v96)
          v97 %= *(_QWORD *)&v96;
      }
      else
      {
        v97 &= *(_QWORD *)&v96 - 1;
      }
      v99 = *(_QWORD **)v90;
      v100 = v95[151];
      v101 = *(_QWORD **)(v100 + 8 * v97);
      do
      {
        v102 = v101;
        v101 = (_QWORD *)*v101;
      }
      while (v101 != (_QWORD *)v90);
      if (v102 == v95 + 153)
        goto LABEL_690;
      v103 = v102[1];
      if (v98.u32[0] > 1uLL)
      {
        if (v103 >= *(_QWORD *)&v96)
          v103 %= *(_QWORD *)&v96;
      }
      else
      {
        v103 &= *(_QWORD *)&v96 - 1;
      }
      v104 = *(_QWORD *)v90;
      if (v103 != v97)
      {
LABEL_690:
        if (v99)
        {
          v105 = v99[1];
          if (v98.u32[0] > 1uLL)
          {
            if (v105 >= *(_QWORD *)&v96)
              v105 %= *(_QWORD *)&v96;
          }
          else
          {
            v105 &= *(_QWORD *)&v96 - 1;
          }
          v104 = *(_QWORD *)v90;
          if (v105 == v97)
          {
LABEL_119:
            v106 = *(_QWORD *)(v104 + 8);
            if (v98.u32[0] > 1uLL)
            {
              if (v106 >= *(_QWORD *)&v96)
                v106 %= *(_QWORD *)&v96;
            }
            else
            {
              v106 &= *(_QWORD *)&v96 - 1;
            }
            if (v106 != v97)
            {
              *(_QWORD *)(v95[151] + 8 * v106) = v102;
              v104 = *(_QWORD *)v90;
            }
            goto LABEL_125;
          }
        }
        *(_QWORD *)(v100 + 8 * v97) = 0;
        v104 = *(_QWORD *)v90;
      }
      if (v104)
        goto LABEL_119;
LABEL_125:
      *v102 = v104;
      *(_QWORD *)v90 = 0;
      --v95[154];
      operator delete(v90);
      v90 = v99;
    }
    while (v99);
  }
LABEL_126:
  kdebug_trace();
  v107 = (*(uint64_t (**)(_QWORD *))(*v594 + 432))(v594);
  v108 = *(_QWORD *)(v18 + 24);
  v591 = *(_QWORD *)(v18 + 32);
  if (v108 != v591)
  {
    v109 = *(unsigned __int8 *)(*(_QWORD *)(v107 + 4848) + 2536);
    v110 = v594[921];
    v111 = (uint64_t *)(v110 + 1424);
    v20 = *(_QWORD *)(v110 + 168);
    while (1)
    {
      v112 = *(_QWORD *)(v108 + 72);
      v113 = *(_QWORD *)(v108 + 80);
      if (v112 != v113)
        break;
LABEL_128:
      v108 += 240;
      if (v108 == v591)
        goto LABEL_193;
    }
    while (1)
    {
      if (!*(_BYTE *)(v112 + 400) || !*(_BYTE *)(v112 + 72))
        goto LABEL_132;
      v114 = *(__int32 **)(v20 + 7200);
      v115 = wmemchr(*(__int32 **)(v20 + 7192), *(_DWORD *)(v112 + 392), ((uint64_t)v114 - *(_QWORD *)(v20 + 7192)) >> 2);
      if (v115)
        v116 = v115;
      else
        v116 = v114;
      if (!v109 || v116 == *(__int32 **)(v20 + 7200))
      {
        if (!*(_BYTE *)(v112 + 400))
          goto LABEL_132;
        v128 = *(std::__shared_weak_count **)(v112 + 104);
        if (!v128)
          goto LABEL_157;
        p_shared_owners = (unint64_t *)&v128->__shared_owners_;
        do
          v130 = __ldaxr(p_shared_owners);
        while (__stlxr(v130 - 1, p_shared_owners));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
          v131 = *(std::__shared_weak_count **)(v112 + 88);
          if (v131)
          {
LABEL_158:
            v132 = (unint64_t *)&v131->__shared_owners_;
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
          }
        }
        else
        {
LABEL_157:
          v131 = *(std::__shared_weak_count **)(v112 + 88);
          if (v131)
            goto LABEL_158;
        }
        *(_BYTE *)(v112 + 400) = 0;
        goto LABEL_132;
      }
      if (!*(_BYTE *)(v112 + 400))
        sub_20E866B34();
      sub_20F41D62C(v111, v112, (uint64_t)object);
      if (*(unsigned __int8 *)(v112 + 400) == v654)
        break;
      if (*(_BYTE *)(v112 + 400))
      {
        v134 = *(std::__shared_weak_count **)(v112 + 104);
        if (!v134)
          goto LABEL_167;
        v135 = (unint64_t *)&v134->__shared_owners_;
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
          v137 = *(std::__shared_weak_count **)(v112 + 88);
          if (v137)
          {
LABEL_168:
            v138 = (unint64_t *)&v137->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
        }
        else
        {
LABEL_167:
          v137 = *(std::__shared_weak_count **)(v112 + 88);
          if (v137)
            goto LABEL_168;
        }
        *(_BYTE *)(v112 + 400) = 0;
        if (!v654)
          goto LABEL_132;
        goto LABEL_181;
      }
      *(_OWORD *)v112 = *(_OWORD *)object;
      v140 = *(_OWORD *)&object[2];
      v141 = *(_OWORD *)v649;
      v142 = *(_OWORD *)v650;
      *(_OWORD *)(v112 + 57) = *(_OWORD *)&v650[9];
      *(_OWORD *)(v112 + 32) = v141;
      *(_OWORD *)(v112 + 48) = v142;
      *(_OWORD *)(v112 + 16) = v140;
      *(_OWORD *)(v112 + 80) = v651;
      v651 = 0uLL;
      *(_OWORD *)(v112 + 96) = *(_OWORD *)v652;
      v652[0] = 0;
      v652[1] = 0;
      memcpy((void *)(v112 + 112), v653, 0x120uLL);
      *(_BYTE *)(v112 + 400) = 1;
      if (!v654)
        goto LABEL_132;
LABEL_181:
      v144 = (std::__shared_weak_count *)v652[1];
      if (!v652[1])
        goto LABEL_185;
      v145 = (unint64_t *)((char *)v652[1] + 8);
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
        v147 = (std::__shared_weak_count *)*((_QWORD *)&v651 + 1);
        if (!*((_QWORD *)&v651 + 1))
          goto LABEL_132;
LABEL_186:
        v148 = (unint64_t *)&v147->__shared_owners_;
        do
          v149 = __ldaxr(v148);
        while (__stlxr(v149 - 1, v148));
        if (v149)
          goto LABEL_132;
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
        v112 += 408;
        if (v112 == v113)
          goto LABEL_128;
      }
      else
      {
LABEL_185:
        v147 = (std::__shared_weak_count *)*((_QWORD *)&v651 + 1);
        if (*((_QWORD *)&v651 + 1))
          goto LABEL_186;
LABEL_132:
        v112 += 408;
        if (v112 == v113)
          goto LABEL_128;
      }
    }
    if (!*(_BYTE *)(v112 + 400))
      goto LABEL_132;
    *(_OWORD *)v112 = *(_OWORD *)object;
    v117 = *(_OWORD *)&object[2];
    v118 = *(_OWORD *)v649;
    v119 = *(_OWORD *)v650;
    *(_OWORD *)(v112 + 57) = *(_OWORD *)&v650[9];
    *(_OWORD *)(v112 + 32) = v118;
    *(_OWORD *)(v112 + 48) = v119;
    *(_OWORD *)(v112 + 16) = v117;
    v120 = v651;
    v651 = 0uLL;
    v121 = *(std::__shared_weak_count **)(v112 + 88);
    *(_OWORD *)(v112 + 80) = v120;
    if (!v121)
      goto LABEL_147;
    v122 = (unint64_t *)&v121->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
      v143 = *(_OWORD *)v652;
      v652[0] = 0;
      v652[1] = 0;
      v125 = *(std::__shared_weak_count **)(v112 + 104);
      *(_OWORD *)(v112 + 96) = v143;
      if (!v125)
        goto LABEL_177;
    }
    else
    {
LABEL_147:
      v124 = *(_OWORD *)v652;
      v652[0] = 0;
      v652[1] = 0;
      v125 = *(std::__shared_weak_count **)(v112 + 104);
      *(_OWORD *)(v112 + 96) = v124;
      if (!v125)
        goto LABEL_177;
    }
    v126 = (unint64_t *)&v125->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
LABEL_177:
    memcpy((void *)(v112 + 112), v653, 0x120uLL);
    if (!v654)
      goto LABEL_132;
    goto LABEL_181;
  }
LABEL_193:
  kdebug_trace();
  for (i = *(uint64_t **)(v594[921] + 1224); i; i = (uint64_t *)*i)
    ++*((_BYTE *)i + 20);
  if (!*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v594 + 432))(v594) + 4848) + 2536))
  {
    v151 = v594[921];
    v152 = *(_QWORD *)(v151 + 1216);
    if (v152)
    {
      v153 = (uint8x8_t)vcnt_s8((int8x8_t)v152);
      v153.i16[0] = vaddlv_u8(v153);
      if (v153.u32[0] > 1uLL)
      {
        v20 = v589;
        if (v152 <= v589)
          v20 = v589 % v152;
      }
      else
      {
        v20 = ((_DWORD)v152 - 1) & v589;
      }
      v154 = *(uint64_t ***)(*(_QWORD *)(v151 + 1208) + 8 * v20);
      if (v154)
      {
        v155 = *v154;
        if (v155)
        {
          if (v153.u32[0] < 2uLL)
          {
            while (1)
            {
              v157 = v155[1];
              if (v157 == v589)
              {
                if (*((_DWORD *)v155 + 4) == (_DWORD)v589)
                  goto LABEL_286;
              }
              else if ((v157 & (v152 - 1)) != v20)
              {
                goto LABEL_217;
              }
              v155 = (uint64_t *)*v155;
              if (!v155)
                goto LABEL_217;
            }
          }
          do
          {
            v156 = v155[1];
            if (v156 == v589)
            {
              if (*((_DWORD *)v155 + 4) == (_DWORD)v589)
                goto LABEL_286;
            }
            else
            {
              if (v156 >= v152)
                v156 %= v152;
              if (v156 != v20)
                break;
            }
            v155 = (uint64_t *)*v155;
          }
          while (v155);
        }
      }
    }
LABEL_217:
    v158 = operator new(0x18uLL);
    v159 = v589;
    *v158 = 0;
    v158[1] = v589;
    v158[2] = v589 | 0x100000000;
    v160 = (float)(unint64_t)(*(_QWORD *)(v151 + 1232) + 1);
    v161 = *(float *)(v151 + 1240);
    if ((((float)(v161 * (float)v152) >= v160) & ~(v152 == 0)) != 0)
    {
      v159 = v20;
      v166 = *(_QWORD *)(v151 + 1208);
      v167 = *(_QWORD **)(v166 + 8 * v20);
      if (!v167)
        goto LABEL_278;
      goto LABEL_266;
    }
    v162 = 1;
    if (v152 >= 3)
      v162 = (v152 & (v152 - 1)) != 0;
    v163 = v162 | (2 * v152);
    v164 = vcvtps_u32_f32(v160 / v161);
    if (v163 <= v164)
      prime = v164;
    else
      prime = v163;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v152 = *(_QWORD *)(v151 + 1216);
    }
    if (prime > v152)
    {
LABEL_230:
      if (prime >> 61)
        sub_20E877A38();
      v168 = operator new(8 * prime);
      v169 = *(void **)(v151 + 1208);
      *(_QWORD *)(v151 + 1208) = v168;
      if (v169)
        operator delete(v169);
      v170 = 0;
      *(_QWORD *)(v151 + 1216) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(v151 + 1208) + 8 * v170++) = 0;
      while (prime != v170);
      v171 = *(_QWORD **)(v151 + 1224);
      if (!v171)
        goto LABEL_262;
      v172 = v151 + 1224;
      v173 = v171[1];
      v174 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v175 = v173 & v174;
        *(_QWORD *)(*(_QWORD *)(v151 + 1208) + 8 * v175) = v172;
        for (j = (_QWORD *)*v171; *v171; j = (_QWORD *)*v171)
        {
          v177 = j[1] & v174;
          if (v177 == v175)
          {
            v171 = j;
          }
          else
          {
            v178 = *(_QWORD *)(v151 + 1208);
            if (*(_QWORD *)(v178 + 8 * v177))
            {
              *v171 = *j;
              v179 = 8 * v177;
              *j = **(_QWORD **)(*(_QWORD *)(v151 + 1208) + v179);
              **(_QWORD **)(*(_QWORD *)(v151 + 1208) + v179) = j;
            }
            else
            {
              *(_QWORD *)(v178 + 8 * v177) = v171;
              v171 = j;
              v175 = v177;
            }
          }
        }
        goto LABEL_262;
      }
      if (v173 >= prime)
        v173 %= prime;
      *(_QWORD *)(*(_QWORD *)(v151 + 1208) + 8 * v173) = v172;
      v183 = (_QWORD *)*v171;
      if (!*v171)
      {
LABEL_262:
        v152 = prime;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_263;
        goto LABEL_277;
      }
      while (1)
      {
        v185 = v183[1];
        if (v185 >= prime)
          v185 %= prime;
        if (v185 == v173)
          goto LABEL_256;
        v186 = *(_QWORD *)(v151 + 1208);
        if (*(_QWORD *)(v186 + 8 * v185))
        {
          *v171 = *v183;
          v184 = 8 * v185;
          *v183 = **(_QWORD **)(*(_QWORD *)(v151 + 1208) + v184);
          **(_QWORD **)(*(_QWORD *)(v151 + 1208) + v184) = v183;
          v183 = v171;
LABEL_256:
          v171 = v183;
          v183 = (_QWORD *)*v183;
          if (!v183)
            goto LABEL_262;
        }
        else
        {
          *(_QWORD *)(v186 + 8 * v185) = v171;
          v171 = v183;
          v183 = (_QWORD *)*v183;
          v173 = v185;
          if (!v183)
            goto LABEL_262;
        }
      }
    }
    if (prime < v152)
    {
      v180 = vcvtps_u32_f32((float)*(unint64_t *)(v151 + 1232) / *(float *)(v151 + 1240));
      if (v152 < 3 || (v181 = (uint8x8_t)vcnt_s8((int8x8_t)v152), v181.i16[0] = vaddlv_u8(v181), v181.u32[0] > 1uLL))
      {
        v180 = std::__next_prime(v180);
      }
      else
      {
        v182 = 1 << -(char)__clz(v180 - 1);
        if (v180 >= 2)
          v180 = v182;
      }
      if (prime <= v180)
        prime = v180;
      if (prime < v152)
      {
        if (!prime)
        {
          v187 = *(void **)(v151 + 1208);
          *(_QWORD *)(v151 + 1208) = 0;
          if (v187)
            operator delete(v187);
          v152 = 0;
          *(_QWORD *)(v151 + 1216) = 0;
LABEL_277:
          v159 = ((_DWORD)v152 - 1) & v589;
          v166 = *(_QWORD *)(v151 + 1208);
          v167 = *(_QWORD **)(v166 + 8 * v159);
          if (!v167)
            goto LABEL_278;
LABEL_266:
          *v158 = *v167;
          goto LABEL_284;
        }
        goto LABEL_230;
      }
      v152 = *(_QWORD *)(v151 + 1216);
    }
    if ((v152 & (v152 - 1)) != 0)
    {
LABEL_263:
      if (v152 <= v589)
        v159 = v589 % v152;
      v166 = *(_QWORD *)(v151 + 1208);
      v167 = *(_QWORD **)(v166 + 8 * v159);
      if (v167)
        goto LABEL_266;
LABEL_278:
      *v158 = *(_QWORD *)(v151 + 1224);
      *(_QWORD *)(v151 + 1224) = v158;
      *(_QWORD *)(v166 + 8 * v159) = v151 + 1224;
      if (!*v158)
      {
LABEL_285:
        ++*(_QWORD *)(v151 + 1232);
        goto LABEL_286;
      }
      v188 = *(_QWORD *)(*v158 + 8);
      if ((v152 & (v152 - 1)) != 0)
      {
        if (v188 >= v152)
          v188 %= v152;
      }
      else
      {
        v188 &= v152 - 1;
      }
      v167 = (_QWORD *)(*(_QWORD *)(v151 + 1208) + 8 * v188);
LABEL_284:
      *v167 = v158;
      goto LABEL_285;
    }
    goto LABEL_277;
  }
LABEL_286:
  kdebug_trace();
  v189 = (uint64_t *)v594[921];
  if (!v594[913] || (v189[5] & 0xFFFFFFFE) == 0)
    goto LABEL_434;
  if (!*(_BYTE *)((*(uint64_t (**)(void))(*v594 + 448))() + 144))
    goto LABEL_317;
  v190 = (uint64_t *)v594[921];
  if (!v190[5])
    goto LABEL_317;
  v191 = v190[4];
  v192 = *v190;
  if (!v191)
    v191 = (*(_QWORD *)(v594[921] + 8) - v192) >> 4;
  v193 = *(_DWORD *)(*(_QWORD *)(v192 + 16 * v191 - 16) + 48);
  v194 = *(_QWORD **)((*(uint64_t (**)(_QWORD *))(*v594 + 440))(v594) + 4848);
  v195 = v194[133];
  if (!v195)
    goto LABEL_299;
  v196 = v194[131];
  v197 = v194[129];
  v198 = v194[128];
  v199 = (v197 - v198) >> 3;
  while (*(_DWORD *)(v198 + 8 * (v196 % v199)) != v193)
  {
    ++v196;
    if (!--v195)
      goto LABEL_299;
  }
  if (!*(_BYTE *)(v198 + 8 * (v196 % v199) + 4))
  {
LABEL_299:
    if (!*((_BYTE *)v594 + 2452))
      goto LABEL_691;
    if (!v601)
      goto LABEL_691;
    if (!*((_BYTE *)v189 + 280))
      goto LABEL_691;
    if (*(_BYTE *)((*(uint64_t (**)(_QWORD *))(*v594 + 448))(v594) + 224))
      goto LABEL_691;
    v202.f64[0] = v600;
    *(_QWORD *)&v203.f64[0] = v189[34];
    *(_QWORD *)&v204 = *(_OWORD *)&vsubq_f64(v202, v203);
    _D3 = vsubq_f64(v599, *(float64x2_t *)(v189 + 256)).f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    if (vmlad_n_f64(_D2, v204, v204) >= *((double *)v594 + 309))
      goto LABEL_691;
    v210 = (const double *)(v189 + 23);
    v660 = vld3q_f64(v210);
    _Q4 = *(_OWORD *)(v189 + 29);
    v212 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v660.val[0], v595.f64[0]), v660.val[1], v595, 1), v660.val[2], *(double *)v596);
    v213 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v660.val[0], *(double *)&v596[8]), v660.val[1], *(float64x2_t *)&v596[8], 1), v660.val[2], *(double *)&v596[24]);
    v660.val[1].f64[0] = v597.f64[1];
    __asm { FMLA            D0, D1, V4.D[1] }
    v214 = (v660.val[0].f64[0]
          + *((double *)v189 + 31) * v598
          + vaddq_f64(v212, (float64x2_t)vdupq_laneq_s64(v213, 1)).f64[0]
          + -1.0)
         * 0.5;
    if (v214 > 1.0)
      v214 = 1.0;
    if (v214 < -1.0)
      v214 = -1.0;
    if (acos(v214) >= *((double *)v594 + 310))
    {
LABEL_691:
      v215 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v594 + 440))(v594) + 4864);
      v216 = *(_QWORD *)(v215 + 2488);
      v217 = *(_QWORD *)(v215 + 2480);
      if (v216 == v217)
        goto LABEL_311;
      v218 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v594 + 440))(v594) + 4864) + 2280)
           + 168 * (((unint64_t)(v216 - v217) >> 2) - 1);
      _Q1 = *(_OWORD *)(v218 + 96);
      _D3 = *(_QWORD *)(v218 + 104);
      __asm { FMLA            D2, D3, V1.D[1] }
      if (_D2 + *(double *)(v218 + 112) * *(double *)(v218 + 112) <= *((double *)v594 + 311) * *((double *)v594 + 311))
      {
LABEL_311:
        v222 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v594 + 440))(v594) + 4864) + 5264);
        LOBYTE(object[0]) = 0;
        v658 = 0;
        v201 = v586;
        if (*(_BYTE *)(v222 + 872)
          && (sub_20F04F154((uint64_t)object, v222 + 416),
              v658 = 1,
              v223 = v657,
              v223 < *(double *)((*(uint64_t (**)(_QWORD *))(*v594 + 448))(v594) + 136))
          || ((*(uint64_t (**)(_QWORD *))(*v594 + 16))(v594) & 1) != 0
          || (v224 = (*(uint64_t (**)(_QWORD *))(*v594 + 448))(v594), *(_BYTE *)(v224 + 224))
          || *(_QWORD *)(v224 + 184) >= *(_QWORD *)(v224 + 120))
        {
          v200 = 1;
        }
        else
        {
          v225 = *(unsigned int *)((*(uint64_t (**)(_QWORD *))(*v594 + 448))(v594) + 184);
          v200 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v594 + 448))(v594) + 128) <= v225;
        }
        if (v658)
        {
          if (v655)
          {
            v656 = v655;
            operator delete(v655);
          }
          sub_20F04F084(object);
        }
        goto LABEL_362;
      }
    }
LABEL_317:
    v226 = v594;
    *(_BYTE *)(v594[921] + 176) = 0;
    v201 = v586;
    goto LABEL_318;
  }
  v200 = 1;
  v201 = v586;
LABEL_362:
  v226 = v594;
  v254 = v594[921];
  *(_BYTE *)(v254 + 176) = v200;
  if (v601)
  {
    if (v200)
    {
      v255 = v595;
      *(_OWORD *)(v254 + 200) = *(_OWORD *)v596;
      v256 = v597;
      *(_OWORD *)(v254 + 216) = *(_OWORD *)&v596[16];
      *(float64x2_t *)(v254 + 232) = v256;
      v257 = *(unsigned __int8 *)(v254 + 280);
      *(double *)(v254 + 248) = v598;
      *(float64x2_t *)(v254 + 184) = v255;
      *(float64x2_t *)(v254 + 256) = v599;
      *(float64_t *)(v254 + 272) = v600;
      if (!v257)
        *(_BYTE *)(v254 + 280) = 1;
    }
  }
LABEL_318:
  BYTE8(v651) = 0;
  LOWORD(v652[0]) = 0;
  v652[1] = 0;
  memset(v650, 0, 17);
  *(_OWORD *)v649 = 0u;
  memset(object, 0, sizeof(object));
  v227 = (uint64_t *)v226[921];
  v228 = v227[4];
  v229 = v226;
  if (!v228)
  {
    v239 = v226[921];
    v238 = *v227;
    v231 = *(_OWORD *)(v238 + 16 * ((*(_QWORD *)(v239 + 8) - v238) >> 4) - 16);
    v232 = *(_QWORD *)(v238 + 16 * ((*(_QWORD *)(v239 + 8) - v238) >> 4) - 8);
    if (v232)
      goto LABEL_320;
LABEL_328:
    object[0] = (void *)v231;
    object[1] = 0;
    goto LABEL_329;
  }
  v230 = *v227;
  v231 = *(_OWORD *)(v230 + 16 * v228 - 16);
  v232 = *(_QWORD *)(v230 + 16 * v228 - 8);
  if (!v232)
    goto LABEL_328;
LABEL_320:
  v233 = (unint64_t *)(v232 + 8);
  do
    v234 = __ldxr(v233);
  while (__stxr(v234 + 1, v233));
  v235 = (std::__shared_weak_count *)object[1];
  *(_OWORD *)object = v231;
  if (v235)
  {
    v236 = (unint64_t *)&v235->__shared_owners_;
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
LABEL_329:
  v240 = v229[921];
  v241 = *(_QWORD *)(v240 + 1176);
  if (&v649[1] != (void **)(v241 + 24))
  {
    sub_20F04DCF4(&v649[1], *(char **)(v241 + 24), *(char **)(v241 + 32), (uint64_t)(*(_QWORD *)(v241 + 32) - *(_QWORD *)(v241 + 24)) >> 4);
    v240 = v229[921];
  }
  LOBYTE(v652[0]) = *(_BYTE *)(v240 + 176);
  BYTE1(v652[0]) = *(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v229 + 432))(v229) + 4848) + 2536);
  *(double *)&v652[1] = *(double *)(*(_QWORD *)(*v201 + 8) + 8) + *(double *)(*(_QWORD *)(*v201 + 8) + 16);
  v242 = *(_QWORD *)(*(_QWORD *)(v229[921] + 23216) + 4864);
  if (*(_BYTE *)(v242 + 1932))
  {
    if (BYTE8(v651) && *(_QWORD *)&v650[16])
    {
      *(_QWORD *)&v650[24] = *(_QWORD *)&v650[16];
      operator delete(*(void **)&v650[16]);
      v242 = *(_QWORD *)(*(_QWORD *)(v229[921] + 23216) + 4864);
      *(_QWORD *)&v650[24] = 0;
      *(_QWORD *)&v651 = 0;
      *(_QWORD *)&v650[16] = 0;
      BYTE8(v651) = 1;
      if (&v650[16] == (_BYTE *)(v242 + 304))
      {
LABEL_335:
        v243 = 0;
        v244 = 0;
        goto LABEL_338;
      }
    }
    else
    {
      *(_QWORD *)&v650[16] = 0;
      *(_QWORD *)&v650[24] = 0;
      *(_QWORD *)&v651 = 0;
      BYTE8(v651) = 1;
      if (&v650[16] == (_BYTE *)(v242 + 304))
        goto LABEL_335;
    }
    sub_20F04DCF4(&v650[16], *(char **)(v242 + 304), *(char **)(v242 + 312), (uint64_t)(*(_QWORD *)(v242 + 312) - *(_QWORD *)(v242 + 304)) >> 4);
    v244 = *(_QWORD *)&v650[16];
    v243 = *(_QWORD *)&v650[24];
LABEL_338:
    v245 = 126 - 2 * __clz((uint64_t)(v243 - v244) >> 4);
    if (v243 == v244)
      v246 = 0;
    else
      v246 = v245;
    sub_20F04DE40(v244, v243, v246, 1);
    v247 = *(_QWORD *)&v650[24];
    if (*(_QWORD *)&v650[16] != *(_QWORD *)&v650[24])
    {
      v248 = *(_QWORD *)&v650[16] - 16;
      while (v248 + 32 != *(_QWORD *)&v650[24])
      {
        v249 = *(_QWORD *)(v248 + 16);
        v248 += 16;
        _ZF = v249 == *(_QWORD *)(v248 + 16) && *(_DWORD *)(v248 + 8) == *(_DWORD *)(v248 + 24);
        if (_ZF)
        {
          v251 = v248 + 32;
          if (v248 + 32 != *(_QWORD *)&v650[24])
          {
            do
            {
              if (*(_QWORD *)v248 != *(_QWORD *)v251 || *(_DWORD *)(v248 + 8) != *(_DWORD *)(v251 + 8))
              {
                v253 = *(_DWORD *)(v251 + 8);
                *(_QWORD *)(v248 + 16) = *(_QWORD *)v251;
                v248 += 16;
                *(_DWORD *)(v248 + 8) = v253;
              }
              v251 += 16;
            }
            while (v251 != v247);
            v247 = *(_QWORD *)&v650[24];
          }
          if (v248 + 16 != v247)
            *(_QWORD *)&v650[24] = v248 + 16;
          break;
        }
      }
    }
  }
  if (v601)
  {
    v258 = (*(uint64_t (**)(_QWORD *))(*v594 + 432))(v594);
    v259 = *(unsigned int **)(v258 + 4824);
    for (k = *(unsigned int **)(v258 + 4832); v259 != k; v259 += 8)
    {
      v260 = *v259;
      if (v260 >= 0x10000
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
LABEL_669:
        abort();
      }
      v261 = -991146299 * ((*((_QWORD *)v259 + 2) - *((_QWORD *)v259 + 1)) >> 7);
      if ((_DWORD)v261)
      {
        for (m = 0; m != v261; ++m)
        {
          v264 = sub_20FCBA6DC((int8x8_t *)object[0], v260, m);
          if (v265 && *(_QWORD *)(v264 + 584) != *(_QWORD *)(v264 + 576))
          {
            v266 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v594 + 432))(v594) + 5280)
                             + 32 * v260
                             + 8)
                 + 1664 * m;
            if (*(_BYTE *)(v266 + 1536))
              v267 = v266 + 96;
            else
              v267 = 0;
            v268 = *(_DWORD *)(v267 + 992);
            if (v268 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_669;
              }
              v268 = *(_DWORD *)(v267 + 992);
            }
            if (!v268)
              goto LABEL_668;
            if (v268 == -1)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_669;
              }
              v268 = *(_DWORD *)(v267 + 992);
            }
            if (!v268)
            {
LABEL_668:
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
              goto LABEL_669;
            }
            v269 = *(_QWORD *)(v267 + 144);
            v270 = (*(uint64_t (**)(_QWORD *))(*v594 + 432))(v594);
            if (!v601)
              sub_20E866B34();
            if (*(_QWORD *)(*(_QWORD *)(v270 + 4864) + 7952))
              v273 = (_QWORD *)(v270 + 4824);
            else
              v273 = (_QWORD *)(v270 + 5280);
            v274 = *(_QWORD *)(*v273 + 32 * v260 + 8) + 1664 * m;
            _Q1.f64[0] = *(float64_t *)&v596[24];
            v275 = *(double *)(v274 + 16);
            _Q7 = *(_OWORD *)v274;
            v277 = *(double *)(v274 + 40);
            _Q17 = *(float64x2_t *)(v274 + 24);
            v279 = *(double *)(v274 + 64);
            _Q19 = *(float64x2_t *)(v274 + 48);
            _Q30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v595, *(double *)v274), *(float64x2_t *)&v596[8], *(float64x2_t *)v274, 1), v597, v275);
            __asm { FMLA            D20, D1, V7.D[1] }
            *(double *)&v283 = _D20 + v598 * v275;
            _Q29 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v595, _Q17.f64[0]), *(float64x2_t *)&v596[8], _Q17, 1), v597, v277);
            __asm { FMLA            D6, D1, V17.D[1] }
            v286 = _D6 + v598 * v277;
            _Q26 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v595, _Q19.f64[0]), *(float64x2_t *)&v596[8], _Q19, 1), v597, v279);
            __asm { FMLA            D6, D1, V19.D[1] }
            v289 = _D6 + v598 * v279;
            v290.f64[0] = _Q29.f64[1];
            v291 = vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).u64[0];
            v292 = vextq_s8((int8x16_t)_Q30, (int8x16_t)_Q30, 8uLL).u64[0];
            v293 = *(double *)(v274 + 88);
            _Q7 = *(float64x2_t *)(v274 + 72);
            __asm { FMLA            D0, D1, V7.D[1] }
            _Q0.f64[0] = _Q0.f64[0] + v598 * v293;
            _Q1.f64[0] = v600;
            v295 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v595, _Q7.f64[0]), *(float64x2_t *)&v596[8], _Q7, 1), v597, v293), v599);
            *(_QWORD *)&v296 = vextq_s8((int8x16_t)v295, (int8x16_t)v295, 8uLL).u64[0];
            *(_QWORD *)&v297 = *(_OWORD *)&vaddq_f64(_Q0, _Q1);
            v298 = *(_QWORD *)(v594[921] + 160);
            if (*(_BYTE *)(v298 + 368) && !*(_BYTE *)(v298 + 226))
            {
              _Q0.f64[0] = *(float64_t *)(v298 + 256);
              _Q4 = *(int64x2_t *)(v298 + 240);
              _Q1.f64[0] = *(float64_t *)(v298 + 288);
              v300 = *(int64x2_t *)(v298 + 272);
              _D2 = *(double *)(v298 + 320);
              v302 = *(float64x2_t *)(v298 + 304);
              v303 = (float64x2_t)vzip2q_s64(_Q4, v300);
              v304 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v303, 1);
              v305 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v303.f64[0], 0);
              _D18 = *(double *)(v298 + 352);
              _Q19 = *(float64x2_t *)(v298 + 336);
              v290 = vnegq_f64(_Q19);
              v308 = (float64x2_t)vzip1q_s64(_Q4, v300);
              _Q21 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v308, v290.f64[0]), v303, _Q19, 1), (float64x2_t)vzip1q_s64((int64x2_t)_Q0, (int64x2_t)_Q1), _D18, 0);
              _Q6 = vmulq_f64(v302, v290);
              _Q4.i64[0] = *(_QWORD *)(v298 + 312);
              __asm
              {
                FMLS            D6, D4, V19.D[1]
                FMLS            D6, D2, V18.D[0]
              }
              _Q7 = (int64x2_t)vextq_s8(v305, v304, 8uLL);
              v312 = (float64x2_t)vzip1q_s64((int64x2_t)v308, _Q7);
              v313 = (float64x2_t)vzip2q_s64((int64x2_t)v308, _Q7);
              v314 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v312, _Q21.f64[0]), v313, _Q21, 1), v302, _Q6.f64[0]);
              __asm { FMLA            D7, D1, V21.D[1] }
              _Q6.f64[0] = *(double *)_Q7.i64 + _D2 * _Q6.f64[0];
              v315 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v312, _Q30.f64[0]), v313, _Q30, 1), v302, *(double *)&v283);
              __asm { FMLA            D17, D1, V30.D[1] }
              *(double *)&v283 = _D17 + _D2 * *(double *)&v283;
              v317 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v312, _Q29.f64[0]), v313, _Q29, 1), v302, v286);
              __asm { FMLA            D18, D1, V29.D[1] }
              v286 = _D18 + _D2 * v286;
              v319 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v312, _Q26.f64[0]), v313, _Q26, 1), v302, v289);
              __asm { FMLA            D19, D1, V26.D[1] }
              v289 = _Q19.f64[0] + _D2 * v289;
              v290.f64[0] = v317.f64[1];
              v291 = vextq_s8(v319, v319, 8uLL).u64[0];
              v292 = vextq_s8(v315, v315, 8uLL).u64[0];
              v320 = vmulq_f64(_Q0, v295);
              v320.f64[0] = v320.f64[0] + _Q1.f64[0] * v296 + _D2 * v297;
              v295 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v312, v295.f64[0]), v313, v296), v302, v297), v314);
              *(_QWORD *)&v296 = vextq_s8((int8x16_t)v295, (int8x16_t)v295, 8uLL).u64[0];
              *(_QWORD *)&v297 = *(_OWORD *)&vsubq_f64(v320, _Q6);
              *(_QWORD *)&_Q30.f64[0] = v315.i64[0];
              _Q29.f64[0] = v317.f64[0];
              *(_QWORD *)&_Q26.f64[0] = v319.i64[0];
            }
            v321 = a3[1];
            v322 = 1.0;
            if (*a3 != v321)
            {
              _Q1 = *(_OWORD *)(v321 - 48);
              _D3 = *(_QWORD *)(v321 - 40);
              __asm { FMLA            D2, D3, V1.D[1] }
              v326 = sqrt(_D2 + *(double *)(v321 - 32) * *(double *)(v321 - 32));
              v327 = (double *)(v594 + 317);
              if (v326 >= *((double *)v594 + 312)
                || (v327 = (double *)(v594 + 318), v326 >= *((double *)v594 + 313))
                || (v327 = (double *)(v594 + 319), v326 >= *((double *)v594 + 314))
                || (v327 = (double *)(v594 + 320), v326 >= *((double *)v594 + 315))
                || (v327 = (double *)(v594 + 321), v326 >= *((double *)v594 + 316)))
              {
                v322 = *v327;
              }
            }
            v328 = (char *)object[3];
            if (object[3] < v649[0])
            {
              *(_DWORD *)object[3] = v260;
              *((_DWORD *)v328 + 1) = m;
              *((_QWORD *)v328 + 1) = v269;
              *((double *)v328 + 2) = v322;
              *(_QWORD *)&_Q30.f64[1] = v292;
              *(float64x2_t *)(v328 + 24) = _Q30;
              *((_QWORD *)&v283 + 1) = *(_QWORD *)&_Q29.f64[0];
              *(_OWORD *)(v328 + 40) = v283;
              v290.f64[1] = v286;
              *(float64x2_t *)(v328 + 56) = v290;
              *((double *)v328 + 11) = v289;
              *(_QWORD *)&_Q26.f64[1] = v291;
              *(float64x2_t *)(v328 + 72) = _Q26;
              *((double *)v328 + 14) = v297;
              v295.f64[1] = v296;
              *((float64x2_t *)v328 + 6) = v295;
              v263 = v328 + 120;
            }
            else
            {
              v329 = (char *)object[2];
              v330 = 0xEEEEEEEEEEEEEEEFLL * (((char *)object[3] - (char *)object[2]) >> 3);
              v331 = v330 + 1;
              if (v330 + 1 > 0x222222222222222)
                sub_20E867F44();
              v568 = v292;
              v570 = v290.f64[0];
              v572 = v291;
              v574 = _Q30.f64[0];
              v576 = _Q29.f64[0];
              v578 = v297;
              v580 = v296;
              v582 = _Q26.f64[0];
              v584 = v295.f64[0];
              v587 = v289;
              v590 = v286;
              v592 = v283;
              if (0xDDDDDDDDDDDDDDDELL * (((char *)v649[0] - (char *)object[2]) >> 3) > v331)
                v331 = 0xDDDDDDDDDDDDDDDELL * (((char *)v649[0] - (char *)object[2]) >> 3);
              if (0xEEEEEEEEEEEEEEEFLL * (((char *)v649[0] - (char *)object[2]) >> 3) >= 0x111111111111111)
                v332 = 0x222222222222222;
              else
                v332 = v331;
              if (v332 > 0x222222222222222)
                sub_20E877A38();
              v333 = (char *)operator new(120 * v332);
              v334 = &v333[120 * v330];
              *(_DWORD *)v334 = v260;
              *((_DWORD *)v334 + 1) = m;
              *((_QWORD *)v334 + 1) = v269;
              *((double *)v334 + 2) = v322;
              *(float64_t *)&v335 = v574;
              *((_QWORD *)&v335 + 1) = v568;
              *(_OWORD *)(v334 + 24) = v335;
              *(_QWORD *)&v335 = v592;
              *((float64_t *)&v335 + 1) = v576;
              *(_OWORD *)(v334 + 40) = v335;
              *(float64_t *)&v336 = v570;
              *((double *)&v336 + 1) = v590;
              *(_OWORD *)(v334 + 56) = v336;
              *((double *)v334 + 11) = v587;
              *(float64_t *)&v335 = v582;
              *((_QWORD *)&v335 + 1) = v572;
              *(_OWORD *)(v334 + 72) = v335;
              *((double *)v334 + 14) = v578;
              *(float64_t *)&v335 = v584;
              *((double *)&v335 + 1) = v580;
              *((_OWORD *)v334 + 6) = v335;
              v337 = v334;
              if (v328 != v329)
              {
                do
                {
                  v338 = *(_OWORD *)(v328 - 120);
                  *((_QWORD *)v337 - 13) = *((_QWORD *)v328 - 13);
                  *(_OWORD *)(v337 - 120) = v338;
                  v340 = *((_OWORD *)v328 - 4);
                  v339 = *((_OWORD *)v328 - 3);
                  v341 = *((_OWORD *)v328 - 5);
                  *((_QWORD *)v337 - 4) = *((_QWORD *)v328 - 4);
                  *((_OWORD *)v337 - 4) = v340;
                  *((_OWORD *)v337 - 3) = v339;
                  *((_OWORD *)v337 - 5) = v341;
                  *((_OWORD *)v337 - 6) = *((_OWORD *)v328 - 6);
                  v342 = *(_OWORD *)(v328 - 24);
                  *((_QWORD *)v337 - 1) = *((_QWORD *)v328 - 1);
                  *(_OWORD *)(v337 - 24) = v342;
                  v337 -= 120;
                  v328 -= 120;
                }
                while (v328 != v329);
                v328 = v329;
              }
              v263 = v334 + 120;
              object[2] = v337;
              object[3] = v334 + 120;
              v649[0] = &v333[120 * v332];
              if (v328)
                operator delete(v328);
            }
            object[3] = v263;
          }
        }
      }
    }
  }
  v343 = v594[913];
  if (!v343)
    sub_20E86D37C();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v343 + 48))(v343, object);
  if (BYTE8(v651) && *(_QWORD *)&v650[16])
  {
    *(_QWORD *)&v650[24] = *(_QWORD *)&v650[16];
    operator delete(*(void **)&v650[16]);
  }
  if (v649[1])
  {
    *(void **)v650 = v649[1];
    operator delete(v649[1]);
  }
  if (object[2])
  {
    object[3] = object[2];
    operator delete(object[2]);
  }
  v344 = (std::__shared_weak_count *)object[1];
  if (object[1])
  {
    v345 = (unint64_t *)((char *)object[1] + 8);
    do
      v346 = __ldaxr(v345);
    while (__stlxr(v346 - 1, v345));
    if (!v346)
    {
      ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
      std::__shared_weak_count::__release_weak(v344);
    }
  }
  v189 = (uint64_t *)v594[921];
LABEL_434:
  v347 = v189[21];
  if (*(_BYTE *)(v347 + 2448))
  {
    if (*(_BYTE *)(v347 + 6632))
    {
      v348 = v189[2902];
      if (*(int *)(v348 + 4904) >= 1)
      {
        v349 = v189[4];
        if (v349)
        {
          v350 = *v189;
          v351 = *(_QWORD **)(v348 + 4848);
          v352 = v351[133];
          if (!v352)
            goto LABEL_659;
        }
        else
        {
          v350 = *v189;
          v349 = (v189[1] - *v189) >> 4;
          v351 = *(_QWORD **)(v348 + 4848);
          v352 = v351[133];
          if (!v352)
            goto LABEL_659;
        }
        v353 = v350 + 16 * v349;
        v356 = *(_QWORD *)(v353 - 16);
        v355 = (int8x8_t **)(v353 - 16);
        v354 = (uint64_t *)v356;
        v357 = *(_DWORD *)(v356 + 48);
        v358 = v351[131];
        v359 = v351[128];
        v360 = (v351[129] - v359) >> 3;
        while (*(_DWORD *)(v359 + 8 * (v358 % v360)) != v357)
        {
          ++v358;
          if (!--v352)
            goto LABEL_659;
        }
        if (*(_BYTE *)(v359 + 8 * (v358 % v360) + 4))
        {
          v361 = *v354;
          v362 = v351[106];
          if (v362 > 1)
          {
            v364 = v362 - 2;
            v363 = v351[102];
          }
          else
          {
            v363 = v351[102];
            v364 = v362 - 0x7063E7063E7063E7 * ((v351[103] - v363) >> 3) - 2;
          }
          v365 = *(_QWORD *)(v361 + 8);
          v366 = *(_QWORD **)(v348 + 4864);
          v367 = (_DWORD *)v366[310];
          v368 = (_DWORD *)v366[311];
          if (v367 == v368)
          {
            v370 = (_DWORD *)v366[310];
          }
          else
          {
            v369 = *(_DWORD *)(v363 + 328 * v364);
            v370 = (_DWORD *)v366[310];
            while (*v370 != v369)
            {
              if (++v370 == v368)
              {
                v370 = (_DWORD *)v366[311];
                break;
              }
            }
          }
          v371 = *(double *)(v365 + 8);
          v372 = v370 - v367;
          if (v370 == v368)
            v373 = 0;
          else
            v373 = v372;
          if (v370 == v368)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 859, (uint64_t)"opt_ref_state_index", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            v348 = v189[2902];
            v366 = *(_QWORD **)(v348 + 4864);
          }
          v374 = *(unsigned int **)(v348 + 4824);
          v560 = *(unsigned int **)(v348 + 4832);
          if (v374 != v560)
          {
            v375 = *(double *)(v366[316] + 8 * v373);
            v376 = v366[285] + 168 * v373;
            v377 = *(int8x16_t *)(v376 + 32);
            v378 = *(int8x16_t *)(v376 + 16);
            v579 = *(int8x16_t *)v376;
            v581 = *(int8x16_t *)(v376 + 48);
            *(_QWORD *)&v577 = vextq_s8(v378, v378, 8uLL).u64[0];
            v575 = *(int8x16_t *)(v376 + 144);
            v571 = (float64x2_t)vdupq_lane_s64(v378.i64[0], 0);
            v573 = (float64x2_t)vdupq_lane_s64(vextq_s8(v579, v579, 8uLL).i64[0], 0);
            v567 = (float64x2_t)vdupq_lane_s64(vextq_s8(v377, v377, 8uLL).i64[0], 0);
            v569 = (float64x2_t)vdupq_lane_s64(v377.i64[0], 0);
            v566 = (float64x2_t)vdupq_lane_s64(vextq_s8(v581, v581, 8uLL).i64[0], 0);
            v564 = (float64x2_t)vdupq_lane_s64(vextq_s8(v575, v575, 8uLL).i64[0], 0);
            v565 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)(v376 + 64), 0);
            __asm { FMOV            V0.2D, #1.0 }
            v561 = *((double *)&_Q0 + 1);
            v562 = (float64x2_t)vdupq_lane_s64(*(_QWORD *)(v376 + 160), 0);
            v559 = v189;
            v583 = v355;
            while (1)
            {
              v380 = *v374;
              if (v380 >= 0x10000)
              {
                v381 = v374;
                v382 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
                v374 = v381;
                if (v382)
                  abort();
              }
              v585 = v374;
              v383 = -991146299 * ((*((_QWORD *)v374 + 2) - *((_QWORD *)v374 + 1)) >> 7);
              if ((_DWORD)v383)
                break;
LABEL_463:
              v374 = v585 + 8;
              if (v585 + 8 == v560)
                goto LABEL_659;
            }
            v384 = 0;
            v385 = 0;
            v588 = v380;
            while (1)
            {
              if (v385)
              {
                v385 = 1;
              }
              else
              {
                v386 = sub_20FCBA6DC(*v355, v380, v384);
                if (v387)
                {
                  v388 = v386;
                  if (*(_QWORD *)(v386 + 584) != *(_QWORD *)(v386 + 576))
                  {
                    v643 = 0;
                    v642 = 0;
                    v644 = 0;
                    v640 = 0;
                    v639 = 0;
                    v641 = 0;
                    v637 = 0;
                    v636 = 0;
                    v638 = 0;
                    v389 = v189[21];
                    v390 = *(unsigned int **)(v389 + 6504);
                    v391 = *(unsigned int **)(v389 + 6512);
                    v392 = v390 + 2;
                    if (v390 != v391 && v392 != v391)
                    {
                      v394 = *(_QWORD *)v390;
                      v395 = v390 + 2;
                      do
                      {
                        v397 = *(_QWORD *)v395;
                        v395 += 2;
                        v396 = v397;
                        if (v397 < v394)
                        {
                          v394 = v396;
                          v390 = v392;
                        }
                        v392 = v395;
                      }
                      while (v395 != v391);
                    }
                    sub_20F133B6C(v189[2902], v386, *v390, 0, 1, 0, 0, &v642, (char **)&v639, (uint64_t)&v636, 1, 0, 0, 0, 0);
                    v632 = 1.0;
                    v629 = (void *)0x3FF0000000000000;
                    v635 = xmmword_21030D320;
                    v630 = 0u;
                    v631 = 0u;
                    v633 = 0u;
                    v634 = 0u;
                    if ((sub_20F40478C(v189[19], (uint64_t *)&v642, (uint64_t *)&v639, (double *)&v629, (double *)&v618, (char **)&v636) & 1) != 0)
                    {
                      v399 = (uint64_t *)v189[2902];
                      v400 = 660;
                      if (*(_QWORD *)(v399[608] + 7952))
                        v400 = 603;
                      v401 = *(_QWORD *)(v399[v400] + 32 * v380 + 8) + 1664 * v384;
                      v402 = *(_QWORD *)(v401 + 16);
                      v403 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64(*(int64x2_t *)(v401 + 16), 1), *(int64x2_t *)(v401 + 32));
                      v404 = *(_QWORD *)(v401 + 40);
                      v405.i64[0] = (uint64_t)v618;
                      v405.i64[1] = v622;
                      v406.i64[0] = v619;
                      *(double *)&v406.i64[1] = v623;
                      v407 = (float64x2_t)vzip1q_s64(v405, v406);
                      v406.i64[0] = v622;
                      v408 = vmlaq_f64(vmlaq_f64(vmulq_f64(v407, (float64x2_t)vdupq_n_s64(v621 ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(v625 ^ 0x8000000000000000), (float64x2_t)v406), (float64x2_t)vdupq_n_s64(v628 ^ 0x8000000000000000), v626);
                      v409 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v401, *(double *)&v629), v403, *((double *)&v631 + 1));
                      v410 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v402, *(double *)&v629), (float64x2_t)v404, *((double *)&v631 + 1));
                      v411 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v401, *(double *)&v630), v403, v632);
                      v412 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v402, *(double *)&v630), (float64x2_t)v404, v632);
                      v413 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v401, *((double *)&v630 + 1)), v403, *(double *)&v633);
                      v414 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v402, *((double *)&v630 + 1)), (float64x2_t)v404, *(double *)&v633);
                      v415 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v401, *(double *)&v631), v403, *((double *)&v633 + 1));
                      v416 = vmulq_n_f64((float64x2_t)v402, *(double *)&v631);
                      v417 = *(float64x2_t *)(v401 + 48);
                      v418 = vmlaq_n_f64(v416, (float64x2_t)v404, *((double *)&v633 + 1));
                      v419 = *(_QWORD *)(v401 + 64);
                      v420 = vmlaq_n_f64(v410, (float64x2_t)v419, *(double *)&v634);
                      v421 = vmlaq_n_f64(v412, (float64x2_t)v419, *((double *)&v634 + 1));
                      v422 = vmlaq_n_f64(v414, (float64x2_t)v419, *(double *)&v635);
                      v423 = *(float64x2_t *)(v401 + 72);
                      v424 = vmlaq_f64(vmlaq_n_f64(v409, v417, *(double *)&v634), (float64x2_t)0, v423);
                      v425 = vmlaq_n_f64(v418, (float64x2_t)v419, *((double *)&v635 + 1));
                      v426 = vmlaq_f64(vmlaq_n_f64(v411, v417, *((double *)&v634 + 1)), (float64x2_t)0, v423);
                      v427 = vmlaq_n_f64(vmulq_n_f64(v424, *(double *)&v618), v426, *(double *)&v619);
                      v428.f64[1] = v561;
                      v428.f64[0] = *(float64_t *)(v401 + 88);
                      v429 = vmlaq_f64(v420, (float64x2_t)0, v428);
                      v430 = vmlaq_f64(v421, (float64x2_t)0, v428);
                      v431 = vmlaq_n_f64(vmulq_laneq_f64(v424, (float64x2_t)v405, 1), v426, v623);
                      v432 = vmlaq_n_f64(vmulq_laneq_f64(v429, (float64x2_t)v405, 1), v430, v623);
                      v433 = vmlaq_n_f64(vmulq_n_f64(v424, v626.f64[0]), v426, v626.f64[1]);
                      v398.f64[0] = v620;
                      v434 = vmlaq_laneq_f64(vmulq_n_f64(v424, v408.f64[0]), v426, v408, 1);
                      v435 = vmlaq_laneq_f64(vmulq_n_f64(v429, v408.f64[0]), v430, v408, 1);
                      *(_QWORD *)&v408.f64[0] = v621 ^ 0x8000000000000000;
                      v408.f64[0] = vmulq_f64(v398, v408).f64[0];
                      v436 = vmlaq_f64(vmlaq_n_f64(v413, v417, *(double *)&v635), (float64x2_t)0, v423);
                      v437 = vmlaq_f64(v422, (float64x2_t)0, v428);
                      v398.f64[1] = v624;
                      v408.f64[0] = v408.f64[0]
                                  + v624 * COERCE_DOUBLE(v625 ^ 0x8000000000000000)
                                  + v627 * COERCE_DOUBLE(v628 ^ 0x8000000000000000);
                      v438 = vaddq_f64(v423, vmlaq_n_f64(v415, v417, *((double *)&v635 + 1)));
                      v439 = vaddq_f64(v428, v425);
                      v440 = vmlaq_f64(vmlaq_n_f64(v427, v436, v620), (float64x2_t)0, v438);
                      v441 = vmlaq_f64(vmlaq_laneq_f64(v431, v436, v398, 1), (float64x2_t)0, v438);
                      v442 = vmlaq_f64(vmlaq_n_f64(v433, v436, v627), (float64x2_t)0, v438);
                      v443 = vaddq_f64(v438, vmlaq_n_f64(v434, v436, v408.f64[0]));
                      v444 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v429, *(double *)&v618), v430, *(double *)&v619), v437, v620), (float64x2_t)0, v439);
                      v445 = vmlaq_f64(vmlaq_laneq_f64(v432, v437, v398, 1), (float64x2_t)0, v439);
                      v446 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v429, v626.f64[0]), v430, v626.f64[1]), v437, v627), (float64x2_t)0, v439);
                      v447 = vaddq_f64(v439, vmlaq_n_f64(v435, v437, v408.f64[0]));
                      v611 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v440, *(double *)v579.i64), v573, v441), v571, v442), (float64x2_t)0, v443);
                      v612 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v444, *(double *)v579.i64), v573, v445), v571, v446), (float64x2_t)0, v447);
                      v613 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v440, v577), v569, v441), v567, v442), (float64x2_t)0, v443);
                      v614 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v444, v577), v569, v445), v567, v446), (float64x2_t)0, v447);
                      *(float64x2_t *)v615 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v440, *(double *)v581.i64), v566, v441), v565, v442), (float64x2_t)0, v443);
                      *(float64x2_t *)&v615[16] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v444, *(double *)v581.i64), v566, v445), v565, v446), (float64x2_t)0, v447);
                      v616 = vaddq_f64(v443, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v440, *(double *)v575.i64), v564, v441), v562, v442));
                      v617 = vaddq_f64(v447, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v444, *(double *)v575.i64), v564, v445), v562, v446));
                      sub_20F1011E4(v399[606] + 760, &v611, 0, v399 + 603, 0, *(unsigned __int8 *)(v189[21] + 6633), v375, v371);
                      sub_20F02E848(&v610);
                      if (**(int **)(v610 + 56) > 3)
                        goto LABEL_623;
                      v448 = *(unsigned __int8 *)(v610 + 72);
                      v449 = sub_20E8C31DC(v610, "OSLogSurrogateAppender", 1, 0);
                      v450 = v449;
                      if (!v448 && !v449)
                        goto LABEL_623;
                      v552 = v448;
                      v602[0] = (__uint64_t)&v610;
                      v602[1] = std::chrono::steady_clock::now().__d_.__rep_;
                      rep = std::chrono::system_clock::now().__d_.__rep_;
                      v604 = 3;
                      v605 = "unknown file";
                      v606 = 919;
                      v607 = "unknown function";
                      v608 = 0;
                      v609 = 0;
                      v451 = *(_QWORD *)v602[0];
                      v551 = *(_QWORD *)v602[0];
                      if (*(char *)(*(_QWORD *)v602[0] + 39) < 0)
                      {
                        v453 = *(const char **)(v451 + 16);
                        v452 = *(_QWORD *)(v451 + 24);
                      }
                      else
                      {
                        v452 = *(unsigned __int8 *)(*(_QWORD *)v602[0] + 39);
                        v453 = (const char *)(*(_QWORD *)v602[0] + 16);
                      }
                      v550 = *(_QWORD *)v602[0] + 16;
                      v556 = v636;
                      v558 = v643;
                      v553 = v637;
                      v554 = v642;
                      v494 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                      if ((v494 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                      {
                        sub_20E9E46F8((uint64_t)&v645);
                        if (v647)
                        {
                          *(_OWORD *)byte_254A4A4F8 = v645;
                          *(_QWORD *)&byte_254A4A4F8[16] = v646;
                        }
                        else
                        {
                          byte_254A4A4F8[23] = 14;
                          strcpy(byte_254A4A4F8, "com.apple.cv3d");
                        }
                        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                        __cxa_guard_release(&qword_254A4A510);
                      }
                      if (byte_254A4A4F8[23] >= 0)
                        v495 = byte_254A4A4F8[23];
                      else
                        v495 = *(_QWORD *)&byte_254A4A4F8[8];
                      if (byte_254A4A4F8[23] >= 0)
                        v496 = byte_254A4A4F8;
                      else
                        v496 = *(const char **)byte_254A4A4F8;
                      object[0] = os_log_create(v496, v453);
                      if (v495 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      if (v495 >= 0x17)
                      {
                        v498 = (v495 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v495 | 7) != 0x17)
                          v498 = v495 | 7;
                        v499 = v498 + 1;
                        v497 = (void **)operator new(v498 + 1);
                        object[3] = (void *)(v499 | 0x8000000000000000);
                        object[1] = v497;
                        object[2] = (void *)v495;
                      }
                      else
                      {
                        HIBYTE(object[3]) = v495;
                        v497 = &object[1];
                        if (!v495)
                        {
LABEL_578:
                          *((_BYTE *)v497 + v495) = 0;
                          LOBYTE(v649[0]) = 1;
                          if (v452 > 0x7FFFFFFFFFFFFFF7)
                            sub_20E860B7C();
                          v189 = v559;
                          if (v452 >= 0x17)
                          {
                            v502 = (v452 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v452 | 7) != 0x17)
                              v502 = v452 | 7;
                            v503 = v502 + 1;
                            v500 = (void **)operator new(v502 + 1);
                            *(_QWORD *)&v650[8] = v503 | 0x8000000000000000;
                            v649[1] = v500;
                            *(_QWORD *)v650 = v452;
                          }
                          else
                          {
                            v650[15] = v452;
                            v500 = &v649[1];
                            if (!v452)
                            {
                              LOBYTE(v649[1]) = 0;
                              v650[16] = 1;
                              v501 = object[0];
                              if ((v650[15] & 0x80000000) == 0)
                                goto LABEL_582;
LABEL_588:
                              operator delete(v649[1]);
                              if (LOBYTE(v649[0]))
                                goto LABEL_589;
                              goto LABEL_591;
                            }
                          }
                          memmove(v500, v453, v452);
                          *((_BYTE *)v500 + v452) = 0;
                          v650[16] = 1;
                          v501 = object[0];
                          if ((v650[15] & 0x80000000) != 0)
                            goto LABEL_588;
LABEL_582:
                          if (LOBYTE(v649[0]))
                          {
LABEL_589:
                            if (SHIBYTE(object[3]) < 0)
                              operator delete(object[1]);
                          }
LABEL_591:
                          if (object[0])
                            os_release(object[0]);
                          if (v450 && *(_QWORD *)(v450 + 24))
                          {
                            v504 = _os_log_pack_size();
                            v505 = (std::__shared_weak_count_vtbl *)operator new(v504, (std::align_val_t)8uLL);
                            v506 = (std::__shared_weak_count *)operator new();
                            v507 = v506;
                            v506->__shared_owners_ = 0;
                            v508 = (unint64_t *)&v506->__shared_owners_;
                            v506->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                            v506->__shared_weak_owners_ = 0;
                            v506[1].__vftable = v505;
                            do
                              v509 = __ldxr(v508);
                            while (__stxr(v509 + 1, v508));
                            do
                              v510 = __ldaxr(v508);
                            while (__stlxr(v510 - 1, v508));
                            if (!v510)
                            {
                              ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
                              std::__shared_weak_count::__release_weak(v507);
                            }
                            v511 = _os_log_pack_fill();
                            v512 = *(_DWORD *)(v388 + 16);
                            *(_DWORD *)v511 = 67109632;
                            *(_DWORD *)(v511 + 4) = v512;
                            *(_WORD *)(v511 + 8) = 2048;
                            *(_QWORD *)(v511 + 10) = (v553 - v556) >> 2;
                            *(_WORD *)(v511 + 18) = 2048;
                            *(_QWORD *)(v511 + 20) = (unint64_t)((v558 - v554) >> 3) >> 1;
                            v513 = (_QWORD *)operator new();
                            v514 = *(unsigned __int8 *)(v551 + 39);
                            v515 = v550;
                            if ((v514 & 0x80u) != 0)
                            {
                              v515 = *(_QWORD *)(v551 + 16);
                              v514 = *(_QWORD *)(v551 + 24);
                            }
                            *v513 = v505;
                            v513[1] = v505;
                            v513[2] = v507;
                            v513[3] = 0;
                            v513[4] = 0;
                            v513[5] = v515;
                            v513[6] = v514;
                            *((_BYTE *)v513 + 56) = 1;
                            object[0] = v513;
                            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v450 + 24) + 40))(*(_QWORD *)(v450 + 24), object);
                            v189 = v559;
                            v355 = v583;
                            v380 = v588;
                            v516 = object[0];
                            object[0] = 0;
                            if (v516)
                            {
                              v517 = (std::__shared_weak_count *)*((_QWORD *)v516 + 4);
                              if (v517)
                              {
                                v518 = (unint64_t *)&v517->__shared_owners_;
                                do
                                  v519 = __ldaxr(v518);
                                while (__stlxr(v519 - 1, v518));
                                if (!v519)
                                {
                                  ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
                                  std::__shared_weak_count::__release_weak(v517);
                                }
                              }
                              v520 = (std::__shared_weak_count *)*((_QWORD *)v516 + 2);
                              if (v520)
                              {
                                v521 = (unint64_t *)&v520->__shared_owners_;
                                do
                                  v522 = __ldaxr(v521);
                                while (__stlxr(v522 - 1, v521));
                                if (!v522)
                                {
                                  ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
                                  std::__shared_weak_count::__release_weak(v520);
                                }
                              }
                              MEMORY[0x212BC6398](v516, 0x10F0C40B62ED6C6);
                            }
                          }
                          else
                          {
                            os_log_type_enabled(v501, OS_LOG_TYPE_INFO);
                            v523 = *(_DWORD *)(v388 + 16);
                            LODWORD(object[0]) = 67109632;
                            HIDWORD(object[0]) = v523;
                            LOWORD(object[1]) = 2048;
                            *(void **)((char *)&object[1] + 2) = (void *)((v553 - v556) >> 2);
                            WORD1(object[2]) = 2048;
                            *(void **)((char *)&object[2] + 4) = (void *)((unint64_t)((v558 - v554) >> 3) >> 1);
                            v524 = (void *)_os_log_send_and_compose_impl();
                            v355 = v583;
                            v380 = v588;
                            if (v524)
                              free(v524);
                          }
                          if (v552)
                          {
                            sub_20E8C003C((uint64_t)v602, "Corrected the pose of the state being added using re-localization before BA. Using camera %u with %lu inliers out of %lu 3D points", *(_DWORD *)(v388 + 16), (v637 - (_BYTE *)v636) >> 2, (unint64_t)((v643 - (_BYTE *)v642) >> 3) >> 1);
                            sub_20E863570((uint64_t)v602);
                          }
                          sub_20E863570((uint64_t)v602);
                          v525 = v609;
                          if (v609)
                          {
                            v526 = (unint64_t *)&v609->__shared_owners_;
                            do
                              v527 = __ldaxr(v526);
                            while (__stlxr(v527 - 1, v526));
                            if (!v527)
                            {
                              ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
                              std::__shared_weak_count::__release_weak(v525);
                            }
                          }
LABEL_623:
                          kdebug_trace();
                          v528 = sub_210219C18();
                          v529 = v643;
                          v530 = v642;
                          v531 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
                          if ((v531 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
                          {
                            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                            __cxa_guard_release(&qword_254A6DDD0);
                          }
                          v532 = (unint64_t)(v529 - v530) >> 4;
                          if (atomic_load(&qword_254A5A450))
                          {
                            v534 = *(_DWORD *)(v388 + 16);
                            LODWORD(object[0]) = 67109376;
                            HIDWORD(object[0]) = v534;
                            LOWORD(object[1]) = 1024;
                            *(_DWORD *)((char *)&object[1] + 2) = v532;
                            v535 = (char *)_os_log_send_and_compose_impl();
                            v536 = strlen(v535);
                            v602[0] = 0;
                            pthread_threadid_np(0, v602);
                            v537 = v602[0];
                            timespec_get((timespec *)v602, 1);
                            sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v528 + 1), (__int128 *)(v528 + 5), "VSExtrapolation. Reloc. Source: %u, Inliers: %u", 0x2FuLL, v535, v536, v537, v602);
                            std::mutex::lock(&stru_254A5A410);
                            v538 = qword_254A5A458;
                            for (n = unk_254A5A460; v538 != n; v538 += 40)
                            {
                              v540 = *(_QWORD *)(v538 + 32);
                              if (!v540)
                                sub_20E86D37C();
                              (*(void (**)(uint64_t, void **))(*(_QWORD *)v540 + 48))(v540, object);
                            }
                            std::mutex::unlock(&stru_254A5A410);
                            if (SHIBYTE(v653[3]) < 0)
                            {
                              operator delete(v653[1]);
                              v355 = v583;
                              v380 = v588;
                              if (SHIBYTE(v653[0]) < 0)
                                goto LABEL_633;
LABEL_630:
                              if (BYTE8(v651))
                              {
LABEL_634:
                                if (SBYTE7(v651) < 0)
                                  operator delete(*(void **)&v650[16]);
                              }
                            }
                            else
                            {
                              v355 = v583;
                              v380 = v588;
                              if ((SHIBYTE(v653[0]) & 0x80000000) == 0)
                                goto LABEL_630;
LABEL_633:
                              operator delete(v652[0]);
                              if (BYTE8(v651))
                                goto LABEL_634;
                            }
                            if (v650[8] && (v650[7] & 0x80000000) != 0)
                              operator delete(v649[0]);
                            if (SHIBYTE(object[3]) < 0)
                              operator delete(object[1]);
                            if (v535)
                              free(v535);
                          }
                          if (os_signpost_enabled((os_log_t)*v528))
                          {
                            v541 = *(_DWORD *)(v388 + 16);
                            LODWORD(object[0]) = 67109376;
                            HIDWORD(object[0]) = v541;
                            LOWORD(object[1]) = 1024;
                            *(_DWORD *)((char *)&object[1] + 2) = v532;
                            _os_signpost_emit_unreliably_with_name_impl();
                          }
                          v385 = 1;
                          v493 = v636;
                          if (!v636)
                          {
LABEL_558:
                            if (v639)
                            {
                              v640 = v639;
                              operator delete(v639);
                            }
                            if (v642)
                            {
                              v643 = v642;
                              operator delete(v642);
                            }
                            goto LABEL_469;
                          }
LABEL_557:
                          v637 = v493;
                          operator delete(v493);
                          goto LABEL_558;
                        }
                      }
                      memmove(v497, v496, v495);
                      goto LABEL_578;
                    }
                    sub_20F02E848(&v645);
                    if (**(int **)(v645 + 56) > 2)
                      goto LABEL_556;
                    v454 = *(unsigned __int8 *)(v645 + 72);
                    v455 = sub_20E8C31DC(v645, "OSLogSurrogateAppender", 1, 0);
                    v456 = v455;
                    if (!v454 && !v455)
                      goto LABEL_556;
                    v557 = v454;
                    *(_QWORD *)&v611.f64[0] = &v645;
                    *(std::chrono::steady_clock::time_point *)&v611.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
                    *(std::chrono::system_clock::time_point *)&v612.f64[0] = (std::chrono::system_clock::time_point)std::chrono::system_clock::now().__d_.__rep_;
                    LODWORD(v612.f64[1]) = 2;
                    *(_QWORD *)&v613.f64[0] = "unknown file";
                    LODWORD(v613.f64[1]) = 900;
                    *(_QWORD *)&v614.f64[0] = "unknown function";
                    v614.f64[1] = 0.0;
                    *(_QWORD *)v615 = 0;
                    v457 = **(_QWORD **)&v611.f64[0];
                    v458 = (const char *)(**(_QWORD **)&v611.f64[0] + 16);
                    v555 = v458;
                    if (*(char *)(**(_QWORD **)&v611.f64[0] + 39) < 0)
                    {
                      v458 = *(const char **)(v457 + 16);
                      v459 = *(_QWORD *)(v457 + 24);
                      v461 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                      if ((v461 & 1) == 0)
                      {
LABEL_649:
                        if (__cxa_guard_acquire(&qword_254A4A510))
                        {
                          sub_20E9E46F8((uint64_t)v602);
                          if ((_BYTE)v604)
                          {
                            *(_OWORD *)byte_254A4A4F8 = *(_OWORD *)v602;
                            *(_QWORD *)&byte_254A4A4F8[16] = rep;
                          }
                          else
                          {
                            byte_254A4A4F8[23] = 14;
                            strcpy(byte_254A4A4F8, "com.apple.cv3d");
                          }
                          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                          __cxa_guard_release(&qword_254A4A510);
                          v380 = v588;
                        }
                      }
                    }
                    else
                    {
                      v459 = *(unsigned __int8 *)(**(_QWORD **)&v611.f64[0] + 39);
                      v460 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                      if ((v460 & 1) == 0)
                        goto LABEL_649;
                    }
                    if (byte_254A4A4F8[23] >= 0)
                      v462 = byte_254A4A4F8[23];
                    else
                      v462 = *(_QWORD *)&byte_254A4A4F8[8];
                    if (byte_254A4A4F8[23] >= 0)
                      v463 = byte_254A4A4F8;
                    else
                      v463 = *(const char **)byte_254A4A4F8;
                    object[0] = os_log_create(v463, v458);
                    if (v462 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v462 >= 0x17)
                    {
                      v465 = (v462 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v462 | 7) != 0x17)
                        v465 = v462 | 7;
                      v466 = v465 + 1;
                      v464 = (void **)operator new(v465 + 1);
                      object[3] = (void *)(v466 | 0x8000000000000000);
                      object[1] = v464;
                      object[2] = (void *)v462;
                      v380 = v588;
                    }
                    else
                    {
                      HIBYTE(object[3]) = v462;
                      v464 = &object[1];
                      if (!v462)
                      {
LABEL_511:
                        *((_BYTE *)v464 + v462) = 0;
                        LOBYTE(v649[0]) = 1;
                        if (v459 > 0x7FFFFFFFFFFFFFF7)
                          sub_20E860B7C();
                        v189 = v559;
                        if (v459 >= 0x17)
                        {
                          v469 = (v459 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v459 | 7) != 0x17)
                            v469 = v459 | 7;
                          v470 = v469 + 1;
                          v467 = (void **)operator new(v469 + 1);
                          *(_QWORD *)&v650[8] = v470 | 0x8000000000000000;
                          v649[1] = v467;
                          *(_QWORD *)v650 = v459;
                          v380 = v588;
                        }
                        else
                        {
                          v650[15] = v459;
                          v467 = &v649[1];
                          if (!v459)
                          {
                            LOBYTE(v649[1]) = 0;
                            v650[16] = 1;
                            v468 = object[0];
                            if ((v650[15] & 0x80000000) == 0)
                              goto LABEL_515;
LABEL_521:
                            operator delete(v649[1]);
                            v355 = v583;
                            if (LOBYTE(v649[0]))
                              goto LABEL_522;
                            goto LABEL_524;
                          }
                        }
                        memmove(v467, v458, v459);
                        *((_BYTE *)v467 + v459) = 0;
                        v650[16] = 1;
                        v468 = object[0];
                        if ((v650[15] & 0x80000000) != 0)
                          goto LABEL_521;
LABEL_515:
                        v355 = v583;
                        if (LOBYTE(v649[0]))
                        {
LABEL_522:
                          if (SHIBYTE(object[3]) < 0)
                            operator delete(object[1]);
                        }
LABEL_524:
                        if (object[0])
                          os_release(object[0]);
                        if (v456 && *(_QWORD *)(v456 + 24))
                        {
                          v471 = _os_log_pack_size();
                          v472 = (std::__shared_weak_count_vtbl *)operator new(v471, (std::align_val_t)8uLL);
                          v473 = (std::__shared_weak_count *)operator new();
                          v474 = v473;
                          v473->__shared_owners_ = 0;
                          v475 = (unint64_t *)&v473->__shared_owners_;
                          v473->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                          v473->__shared_weak_owners_ = 0;
                          v473[1].__vftable = v472;
                          do
                            v476 = __ldxr(v475);
                          while (__stxr(v476 + 1, v475));
                          do
                            v477 = __ldaxr(v475);
                          while (__stlxr(v477 - 1, v475));
                          if (!v477)
                          {
                            ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
                            std::__shared_weak_count::__release_weak(v474);
                          }
                          *(_WORD *)_os_log_pack_fill() = 0;
                          v478 = (_QWORD *)operator new();
                          v479 = *(unsigned __int8 *)(v457 + 39);
                          v480 = v555;
                          if ((v479 & 0x80u) != 0)
                          {
                            v480 = *(const char **)(v457 + 16);
                            v479 = *(_QWORD *)(v457 + 24);
                          }
                          *v478 = v472;
                          v478[1] = v472;
                          v478[2] = v474;
                          v478[3] = 0;
                          v478[4] = 0;
                          v478[5] = v480;
                          v478[6] = v479;
                          *((_BYTE *)v478 + 56) = 2;
                          object[0] = v478;
                          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v456 + 24) + 40))(*(_QWORD *)(v456 + 24), object);
                          v481 = object[0];
                          object[0] = 0;
                          v380 = v588;
                          v482 = v557;
                          if (v481)
                          {
                            v483 = (std::__shared_weak_count *)*((_QWORD *)v481 + 4);
                            if (v483)
                            {
                              v484 = (unint64_t *)&v483->__shared_owners_;
                              do
                                v485 = __ldaxr(v484);
                              while (__stlxr(v485 - 1, v484));
                              if (!v485)
                              {
                                ((void (*)(std::__shared_weak_count *))v483->__on_zero_shared)(v483);
                                std::__shared_weak_count::__release_weak(v483);
                              }
                            }
                            v486 = (std::__shared_weak_count *)*((_QWORD *)v481 + 2);
                            if (v486)
                            {
                              v487 = (unint64_t *)&v486->__shared_owners_;
                              do
                                v488 = __ldaxr(v487);
                              while (__stlxr(v488 - 1, v487));
                              if (!v488)
                              {
                                ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
                                std::__shared_weak_count::__release_weak(v486);
                              }
                            }
                            MEMORY[0x212BC6398](v481, 0x10F0C40B62ED6C6);
                          }
                        }
                        else
                        {
                          os_log_type_enabled(v468, OS_LOG_TYPE_DEBUG);
                          LOWORD(object[0]) = 0;
                          v489 = (void *)_os_log_send_and_compose_impl();
                          v482 = v557;
                          if (v489)
                            free(v489);
                        }
                        if (v482)
                        {
                          sub_20E8C003C((uint64_t)&v611, "Failed to compute P3P RANSAC for pose correction in moving slam");
                          sub_20E863570((uint64_t)&v611);
                        }
                        sub_20E863570((uint64_t)&v611);
                        v490 = *(std::__shared_weak_count **)v615;
                        if (*(_QWORD *)v615)
                        {
                          v491 = (unint64_t *)(*(_QWORD *)v615 + 8);
                          do
                            v492 = __ldaxr(v491);
                          while (__stlxr(v492 - 1, v491));
                          if (!v492)
                          {
                            ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
                            std::__shared_weak_count::__release_weak(v490);
                          }
                        }
LABEL_556:
                        v385 = 0;
                        v493 = v636;
                        if (!v636)
                          goto LABEL_558;
                        goto LABEL_557;
                      }
                    }
                    memmove(v464, v463, v462);
                    goto LABEL_511;
                  }
                }
                v385 = 0;
              }
LABEL_469:
              if (++v384 == v383)
                goto LABEL_463;
            }
          }
        }
      }
    }
  }
LABEL_659:
  kdebug_trace();
  v542 = (*(uint64_t (**)(_QWORD *))(*v594 + 432))(v594);
  sub_20F16BC4C(*(_QWORD *)(v542 + 4848), 1, *(_QWORD **)(*(_QWORD *)(v542 + 4864) + 7952));
  v543 = *(_QWORD **)(v542 + 4864);
  if (v543[1027])
  {
    v544 = (uint64_t *)v543[382];
    v545 = (uint64_t *)v543[383];
    if (v544 != v545)
    {
      v546 = (void **)(v543 + 382);
      v547 = (void **)(v542 + 4824);
      if (v544[1] != v544[2] && v547 != v546)
        sub_20F04F4F0(v547, v544, v545, ((char *)v545 - (char *)v544) >> 5);
    }
  }
  kdebug_trace();
  return *(unsigned __int8 *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v594 + 432))(v594) + 4848) + 2536);
}

void sub_20F039D74(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863570((uint64_t)&STACK[0x240]);
  v2 = (std::__shared_weak_count *)STACK[0x280];
  if (STACK[0x280])
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (void *)STACK[0x3D8];
  if (STACK[0x3D8])
  {
    STACK[0x3E0] = (unint64_t)v5;
    operator delete(v5);
    v6 = (void *)STACK[0x3F0];
    if (!STACK[0x3F0])
    {
LABEL_8:
      v7 = (void *)STACK[0x408];
      if (!STACK[0x408])
LABEL_13:
        _Unwind_Resume(a1);
LABEL_12:
      STACK[0x410] = (unint64_t)v7;
      operator delete(v7);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v6 = (void *)STACK[0x3F0];
    if (!STACK[0x3F0])
      goto LABEL_8;
  }
  STACK[0x3F8] = (unint64_t)v6;
  operator delete(v6);
  v7 = (void *)STACK[0x408];
  if (!STACK[0x408])
    goto LABEL_13;
  goto LABEL_12;
}

void sub_20F03A32C(_Unwind_Exception *a1)
{
  sub_20F03A354((uint64_t)&STACK[0x440]);
  _Unwind_Resume(a1);
}

void sub_20F03A340(_Unwind_Exception *a1)
{
  sub_20F03A354((uint64_t)&STACK[0x440]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F03A354(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 88))
  {
    v2 = *(void **)(a1 + 64);
    if (v2)
    {
      *(_QWORD *)(a1 + 72) = v2;
      operator delete(v2);
    }
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    operator delete(v4);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *sub_20F03A3F4(_QWORD *result, double a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  _QWORD v16[52];
  void *__p;
  void *v18;
  char v19;

  if (!*((_BYTE *)result + 6664))
    return result;
  v3 = result;
  v4 = result[921];
  if (*(_QWORD *)(v4 + 40))
  {
    v5 = *(_QWORD *)(v4 + 32);
    if (!v5)
      v5 = (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 4;
    v6 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v4 + 16 * v5 - 16) + 8);
    if (*(double *)(v6 + 8) + *(double *)(v6 + 16) >= a2)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 2304, (uint64_t)"impl_->camera_set_features_queue_.empty() || incoming_state_timestamp > impl_->camera_set_features_queue_.back() ->camera_feature_samples.front() .feature_samples.front() .timestamp_info.timestamp()", 198, (uint64_t)"The incoming frame must not have been processed yet", 51, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v4 = v3[921];
    }
  }
  LOBYTE(v16[0]) = 0;
  v19 = 0;
  if (*(int *)(v4 + 6616) >= 1)
  {
    v7 = *(_QWORD *)(v4 + 6576);
    v8 = *(_DWORD *)(*(_QWORD *)(v7 + 2488) - 4);
    v9 = *(_QWORD *)(v7 + 5264);
    v10 = v8 & 0xFFFFFF00;
    if (*(_BYTE *)(v9 + 872))
    {
      sub_20F04F154((uint64_t)v16, v9 + 416);
      v19 = 1;
    }
    v11 = 0x100000000;
    v12 = v3[305];
    if (v12)
      goto LABEL_12;
LABEL_23:
    sub_20E866B34();
  }
  v11 = 0;
  LOBYTE(v8) = 0;
  v10 = 0;
  v12 = v3[305];
  if (!v12)
    goto LABEL_23;
LABEL_12:
  v13 = v3[921];
  if (*(_BYTE *)(v12 + 128) == 1 && *(int *)(v13 + 6616) >= 1 && *(int *)(v13 + 17368) >= 1)
  {
    v14 = sub_20F1561E8(v13 + 1712, v13 + 12464);
    v12 = v3[305];
    v13 = v3[921];
    v15 = 256;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  result = (_QWORD *)sub_20EFDEEBC(v12, v11 | v10 | v8, (*(_DWORD *)(*(_QWORD *)(v13 + 6576) + 2276) & 0xFFFFFFFE) == 2, (uint64_t)v16, v15 | v14, a2);
  if (v19)
  {
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    return sub_20F04F084(v16);
  }
  return result;
}

void sub_20F03A5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F03A628((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F03A5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F03A628((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F03A600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F03A628((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F03A614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F03A628((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F03A628(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 456))
  {
    v2 = *(void **)(a1 + 416);
    if (v2)
    {
      *(_QWORD *)(a1 + 424) = v2;
      operator delete(v2);
    }
    sub_20F04F084((_QWORD *)a1);
  }
  return a1;
}

BOOL sub_20F03A668(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, char *a5)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int8x8_t *v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _BYTE *v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  size_t v39;
  void **v40;
  unint64_t v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  const char *v47;
  size_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  const char *v51;
  size_t v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  size_t v61;
  std::__shared_weak_count_vtbl *v62;
  std::__shared_weak_count *v63;
  size_t v64;
  size_t v65;
  _QWORD *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char v71;
  _QWORD *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  char *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  const char *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  void *v130;
  _QWORD *v131;
  _QWORD *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  char *v156;
  unint64_t v157;
  int v158;
  char *v159;
  char **v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char **v164;
  uint64_t v165;
  char *v166;
  unint64_t v167;
  char *v168;
  char **v169;
  unint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  char *v190;
  unint64_t v191;
  int v192;
  size_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  BOOL v200;
  unint64_t v201;
  unint64_t v202;
  unsigned __int8 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char **v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  __int128 **v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  __int128 *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  BOOL v230;
  unint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  __int128 v235;
  int64_t v236;
  char **v237;
  char *v238;
  char *v239;
  unint64_t v240;
  uint64_t v241;
  __int128 *v242;
  __int128 v243;
  __int128 *v244;
  char *v245;
  uint64_t v246;
  char *v247;
  __int128 v248;
  uint64_t v249;
  char *v250;
  char *v251;
  __int128 v252;
  char *v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  __int128 **v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  char **v266;
  char *v267;
  char *v268;
  char *v269;
  char *v270;
  char *v271;
  char *v272;
  __int128 *v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  char *v279;
  char **v280;
  char *v281;
  uint64_t v282;
  __int128 v283;
  char *v284;
  char *v285;
  char *v286;
  unint64_t v287;
  uint64_t v288;
  __int128 *v289;
  __int128 v290;
  __int128 *v291;
  char *v292;
  uint64_t v293;
  char *v294;
  __int128 v295;
  int64_t v296;
  uint64_t v297;
  char *v298;
  __int128 v299;
  char *v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t *v304;
  _BYTE *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  const void **v309;
  int64_t v310;
  unint64_t v311;
  char *v312;
  _BYTE *v313;
  char **v314;
  _BYTE *v315;
  char *v316;
  uint64_t v317;
  char *v318;
  char *v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  char *v323;
  char *v324;
  __int128 *v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  char *v334;
  void **v335;
  size_t v336;
  char *v337;
  char *v338;
  char *v339;
  size_t v340;
  unint64_t v341;
  char *v342;
  char *v343;
  char *v344;
  char *v345;
  uint64_t v346;
  char **v347;
  uint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  _BYTE *v352;
  char *v353;
  uint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  char *v360;
  char *v361;
  __int128 *v362;
  uint64_t v363;
  __int128 v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  unint64_t v368;
  unint64_t v369;
  uint64_t v370;
  char *v371;
  size_t v372;
  char *v373;
  void **v374;
  char *v375;
  size_t v376;
  unint64_t v377;
  char *v378;
  char *v379;
  char *v380;
  uint64_t v381;
  uint64_t *v382;
  uint64_t v383;
  _BYTE *v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  const void **v389;
  unint64_t v390;
  unint64_t v391;
  char *v392;
  _BYTE *v393;
  char **v394;
  _BYTE *v395;
  uint64_t v396;
  char *v397;
  uint64_t v398;
  char *v399;
  char *v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  char *v404;
  char *v405;
  __int128 *v406;
  uint64_t v407;
  __int128 v408;
  int v409;
  char *v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  char *v414;
  void **v415;
  size_t v416;
  char *v417;
  char *v418;
  char *v419;
  size_t v420;
  unint64_t v421;
  char *v422;
  char *v423;
  char *v424;
  char *v425;
  uint64_t v426;
  char **v427;
  uint64_t v428;
  char *v429;
  char *v430;
  unint64_t v431;
  _BYTE *v432;
  uint64_t v433;
  char *v434;
  uint64_t v435;
  char *v436;
  char *v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  char *v441;
  char *v442;
  __int128 *v443;
  uint64_t v444;
  __int128 v445;
  int v446;
  char *v447;
  unint64_t v448;
  unint64_t v449;
  uint64_t v450;
  char *v451;
  size_t v452;
  char *v453;
  void **v454;
  char *v455;
  size_t v456;
  unint64_t v457;
  char *v458;
  char *v459;
  char *v460;
  uint64_t v461;
  uint64_t *v462;
  uint64_t v463;
  _BYTE *v464;
  uint64_t *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  const void **v469;
  unint64_t v470;
  unint64_t v471;
  char *v472;
  _BYTE *v473;
  char **v474;
  _BYTE *v475;
  uint64_t v476;
  char *v477;
  uint64_t v478;
  char *v479;
  char *v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  char *v484;
  char *v485;
  __int128 *v486;
  uint64_t v487;
  __int128 v488;
  uint64_t v489;
  char *v490;
  unint64_t v491;
  unint64_t v492;
  uint64_t v493;
  char *v494;
  void **v495;
  size_t v496;
  char *v497;
  char *v498;
  char *v499;
  size_t v500;
  unint64_t v501;
  char *v502;
  char *v503;
  char *v504;
  uint64_t v505;
  uint64_t *v506;
  uint64_t v507;
  _BYTE *v508;
  uint64_t *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  const void **v513;
  unint64_t v514;
  unint64_t v515;
  char *v516;
  _BYTE *v517;
  char **v518;
  _BYTE *v519;
  uint64_t v520;
  char *v521;
  uint64_t v522;
  char *v523;
  char *v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  char *v528;
  char *v529;
  __int128 *v530;
  uint64_t v531;
  __int128 v532;
  uint64_t v533;
  char *v534;
  uint64_t v535;
  unint64_t v536;
  char **v537;
  unint64_t v538;
  uint64_t v539;
  char *v540;
  char *v541;
  char **v542;
  size_t v543;
  char *v544;
  char *v545;
  char *v546;
  size_t v547;
  unint64_t v548;
  char *v549;
  char *v550;
  uint64_t v551;
  uint64_t v552;
  char **v553;
  char *v554;
  char *v555;
  uint64_t v556;
  uint64_t v557;
  _OWORD **v558;
  int64_t v559;
  unint64_t v560;
  uint64_t v561;
  char *v562;
  char *v563;
  char *v564;
  char *v565;
  char *v566;
  _OWORD *v567;
  uint64_t v568;
  unint64_t v569;
  uint64_t v570;
  uint64_t v571;
  unint64_t v572;
  uint64_t v573;
  char *v574;
  int64_t v575;
  char **v576;
  char *v577;
  char *v578;
  unint64_t v579;
  _OWORD *v580;
  char *v581;
  char *v582;
  char *v583;
  char *v584;
  char *v585;
  char **v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t *v589;
  uint64_t v590;
  _BYTE *v591;
  char *v592;
  _BYTE *v593;
  char *v594;
  char *v595;
  char *v596;
  char *v597;
  _OWORD *v598;
  uint64_t v599;
  unint64_t v600;
  _OWORD *v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v604;
  char *v605;
  char *v606;
  char *v607;
  unint64_t v608;
  _OWORD *v609;
  char *v610;
  char *v611;
  int64_t v612;
  char *v613;
  char *v614;
  char **v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t *v618;
  uint64_t v619;
  _BYTE *v620;
  char *v621;
  _BYTE *v622;
  char *v623;
  uint64_t v624;
  char *v625;
  char *v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t v629;
  char *v630;
  char *v631;
  __int128 *v632;
  uint64_t v633;
  __int128 v634;
  uint64_t v635;
  char *v636;
  uint64_t v637;
  unint64_t v638;
  unint64_t v639;
  uint64_t v640;
  char *v641;
  size_t v642;
  int64_t v643;
  uint64_t v644;
  char *v645;
  char *v646;
  char *v647;
  char *v648;
  uint64_t v649;
  char **v650;
  uint64_t v651;
  char *v652;
  char *v653;
  uint64_t v654;
  _BYTE *v655;
  char *v656;
  uint64_t v657;
  char *v658;
  char *v659;
  uint64_t v660;
  unint64_t v661;
  uint64_t v662;
  char *v663;
  char *v664;
  __int128 *v665;
  uint64_t v666;
  __int128 v667;
  uint64_t v668;
  char *v669;
  uint64_t v670;
  unint64_t v671;
  unint64_t v672;
  uint64_t v673;
  char *v674;
  size_t v675;
  char *v676;
  void **v677;
  char *v678;
  size_t v679;
  unint64_t v680;
  char *v681;
  char *v682;
  char *v683;
  char **v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t *v687;
  uint64_t v688;
  _BYTE *v689;
  char *v690;
  _BYTE *v691;
  char *v692;
  uint64_t v693;
  char *v694;
  char *v695;
  uint64_t v696;
  unint64_t v697;
  uint64_t v698;
  char *v699;
  char *v700;
  __int128 *v701;
  uint64_t v702;
  __int128 v703;
  int v704;
  char *v705;
  uint64_t v706;
  unint64_t v707;
  unint64_t v708;
  uint64_t v709;
  char *v710;
  size_t v711;
  int64_t v712;
  uint64_t v713;
  char *v714;
  char *v715;
  char *v716;
  char *v717;
  uint64_t v718;
  char **v719;
  uint64_t v720;
  char *v721;
  char *v722;
  uint64_t v723;
  _BYTE *v724;
  char *v725;
  uint64_t v726;
  char *v727;
  char *v728;
  uint64_t v729;
  unint64_t v730;
  uint64_t v731;
  char *v732;
  char *v733;
  __int128 *v734;
  uint64_t v735;
  __int128 v736;
  int v737;
  char *v738;
  uint64_t v739;
  unint64_t v740;
  unint64_t v741;
  uint64_t v742;
  char *v743;
  size_t v744;
  char *v745;
  void **v746;
  char *v747;
  size_t v748;
  unint64_t v749;
  char *v750;
  char *v751;
  char *v752;
  char **v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t *v756;
  uint64_t v757;
  _BYTE *v758;
  char *v759;
  _BYTE *v760;
  char *v761;
  uint64_t v762;
  char *v763;
  char *v764;
  uint64_t v765;
  unint64_t v766;
  uint64_t v767;
  char *v768;
  char *v769;
  __int128 *v770;
  uint64_t v771;
  __int128 v772;
  uint64_t v773;
  char *v774;
  uint64_t v775;
  unint64_t v776;
  unint64_t v777;
  uint64_t v778;
  char *v779;
  size_t v780;
  int64_t v781;
  uint64_t v782;
  char *v783;
  char *v784;
  char *v785;
  char **v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t *v789;
  uint64_t v790;
  _BYTE *v791;
  char *v792;
  _BYTE *v793;
  char *v794;
  uint64_t v795;
  char *v796;
  char *v797;
  uint64_t v798;
  unint64_t v799;
  uint64_t v800;
  char *v801;
  char *v802;
  __int128 *v803;
  uint64_t v804;
  __int128 v805;
  uint64_t v806;
  char *v807;
  uint64_t v808;
  unint64_t v809;
  unint64_t v810;
  uint64_t v811;
  char *v812;
  char *v813;
  int64_t v814;
  uint64_t v815;
  _QWORD *v816;
  _QWORD *v817;
  unint64_t v818;
  char *v819;
  char *v820;
  unint64_t v821;
  char *v822;
  uint64_t v823;
  unint64_t v824;
  uint64_t v825;
  int v826;
  unint64_t v827;
  unint64_t v828;
  uint64_t v830;
  uint64_t v831;
  size_t v832;
  const char *v833;
  unsigned __int8 v834;
  const char *v835;
  size_t v836;
  __int128 *p_p;
  unint64_t v838;
  const char *v839;
  uint64_t v840;
  int v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  void *v845;
  uint64_t v846;
  uint64_t v847;
  NSObject *v848;
  size_t v849;
  std::__shared_weak_count_vtbl *v850;
  std::__shared_weak_count *v851;
  std::__shared_weak_count *v852;
  unint64_t *v853;
  unint64_t v854;
  unint64_t v855;
  void *v856;
  _DWORD *v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  std::__shared_weak_count *v862;
  unint64_t *v863;
  unint64_t v864;
  std::__shared_weak_count *v865;
  unint64_t *v866;
  unint64_t v867;
  _QWORD *v868;
  std::__shared_weak_count *v869;
  unint64_t *v870;
  unint64_t v871;
  std::__shared_weak_count *v872;
  unint64_t *v873;
  unint64_t v874;
  std::__shared_weak_count *v875;
  unint64_t *v876;
  unint64_t v877;
  std::__shared_weak_count *v878;
  unint64_t *v879;
  unint64_t v880;
  void *v881;
  std::__shared_weak_count *v882;
  unint64_t *v883;
  unint64_t v884;
  unsigned __int16 v885;
  uint64_t v886;
  uint64_t v887;
  _QWORD *v888;
  _QWORD *v889;
  void *v890;
  char **v895;
  uint64_t *v896;
  int v897;
  _QWORD *v898;
  _QWORD *v899;
  _QWORD *v900;
  int v901;
  char **v902;
  uint64_t *v903;
  unint64_t v904;
  const char *v905;
  uint64_t v906;
  uint64_t v907;
  char *__s;
  char *__sa;
  char *__sb;
  void *v911;
  _QWORD *rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v913;
  int v914;
  const char *v915;
  int v916;
  const char *v917;
  uint64_t v918;
  std::__shared_weak_count *v919;
  void *__dst[2];
  int64_t v921;
  uint64_t v922;
  void *v923;
  char *v924;
  unint64_t v925;
  int8x8_t *v926;
  std::__shared_weak_count *v927;
  void *v928;
  void *v929;
  uint64_t v930;
  void *v931;
  _QWORD *v932;
  uint64_t v933;
  char *v934;
  __int128 v935;
  std::__shared_weak_count *v936;
  char *v937;
  std::__shared_weak_count *v938;
  _QWORD *v939;
  __int128 v940;
  void *object;
  __int128 __p;
  __int128 v943;
  void *v944[2];
  unint64_t v945;
  const void *v946;
  unint64_t v947;
  void *v948;
  char v949;
  unint64_t v950;
  int v951;
  uint64_t v952;
  _QWORD v953[2];
  _BYTE v954[24];
  __int128 v955;
  char *v956;
  const char *v957;
  unint64_t v958;
  std::__shared_weak_count *v959;
  uint64_t v960;

  v960 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *, double))(*a1 + 464))(a1, *(double *)(*(_QWORD *)(*a2 + 8) + 8) + *(double *)(*(_QWORD *)(*a2 + 8) + 16));
  v7 = (uint64_t *)a1[921];
  v8 = v7[5];
  if (v8)
  {
    v9 = v7[3];
    v10 = *v7;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)(v10 + 16 * (v9 % ((*(_QWORD *)(a1[921] + 8) - v10) >> 4))) + 48) == **(_DWORD **)(*a2 + 8))
        return *(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1) + 4848) + 2536) != 0;
      ++v9;
      --v8;
    }
    while (v8);
  }
  v898 = a1;
  kdebug_trace();
  v934 = a5;
  v11 = *a2;
  v12 = a2[1];
  v13 = **(_DWORD **)(*a2 + 8);
  v931 = 0;
  v932 = 0;
  v933 = 0;
  sub_20EE65E28((uint64_t)&v931, v11, v12, 0x4EC4EC4EC4EC4EC5 * ((v12 - v11) >> 3));
  v928 = 0;
  v929 = 0;
  v930 = 0;
  sub_20F04F36C((uint64_t)&v928, *a3, a3[1], 0xEEEEEEEEEEEEEEEFLL * ((a3[1] - *a3) >> 4));
  sub_20FCBC378((_QWORD *)v898[921], &v931, (uint64_t *)&v928, v13, &v934, (uint64_t *)&v926);
  v923 = 0;
  v924 = 0;
  v925 = 0;
  sub_20EA89AFC((uint64_t)&v923, 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  if (a2[1] != *a2)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (*(uint64_t (**)(_QWORD *))(*v898 + 432))(v898);
      sub_20F132E4C(v16, *(_DWORD *)(*a2 + 104 * v14), (uint64_t *)(*a2 + 104 * v14 + 32), (uint64_t)&object);
      v17 = v924;
      if ((unint64_t)v924 < v925)
      {
        *(_DWORD *)v924 = (_DWORD)object;
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = 0;
        *((_QWORD *)v17 + 1) = 0;
        *(_OWORD *)(v17 + 8) = __p;
        *((_QWORD *)v17 + 3) = v943;
        v924 = v17 + 32;
      }
      else
      {
        v18 = sub_20EA89C1C(&v923, (uint64_t)&object);
        v19 = __p;
        v924 = v18;
        if ((_QWORD)__p)
        {
          v20 = *((_QWORD *)&__p + 1);
          v21 = (void *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            do
              v20 = sub_20EB8188C(v20 - 1664);
            while (v20 != v19);
            v21 = (void *)__p;
          }
          *((_QWORD *)&__p + 1) = v19;
          operator delete(v21);
        }
      }
      v14 = ++v15;
    }
    while (0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3) > (unint64_t)v15);
  }
  v22 = v926;
  v23 = (_QWORD *)((*(uint64_t (**)(_QWORD *))(*v898 + 432))(v898) + 5280);
  if (*((_BYTE *)v898 + 2455))
    v24 = *(_BYTE *)(*(_QWORD *)(v898[921] + 112) + 194) != 0;
  else
    v24 = 0;
  sub_20FCB66D0(v22, &v923, v23, v24);
  sub_20F02E848(&v922);
  if (**(int **)(v922 + 56) > 2)
    goto LABEL_168;
  v26 = *(unsigned __int8 *)(v922 + 72);
  v27 = sub_20E8C31DC(v922, "OSLogSurrogateAppender", 1, 0);
  v28 = v27;
  if (!v26 && !v27)
    goto LABEL_168;
  sub_20E863438((uint64_t)&object);
  v29 = sub_20E86A980((_QWORD *)&__p + 1, (uint64_t)"[CM] Session: ", 14);
  v30 = (uint64_t *)v898[921];
  v31 = v30[4];
  v32 = *v30;
  if (!v31)
    v31 = (*(_QWORD *)(v898[921] + 8) - v32) >> 4;
  v33 = *(_QWORD *)(v32 + 16 * v31 - 16);
  v34 = *(void **)(v33 + 56);
  LODWORD(v33) = *(_DWORD *)(v33 + 48);
  v911 = v34;
  LODWORD(rep) = v33;
  sub_210216370((uint64_t)&v911);
  if (v954[23] >= 0)
    v35 = v954;
  else
    v35 = *(_BYTE **)v954;
  if (v954[23] >= 0)
    v36 = v954[23];
  else
    v36 = *(_QWORD *)&v954[8];
  v37 = sub_20E86A980(v29, (uint64_t)v35, v36);
  sub_20E86A980(v37, (uint64_t)" time: ", 7);
  std::ostream::operator<<();
  if ((v954[23] & 0x80000000) == 0)
  {
    v38 = v951;
    if ((v951 & 0x10) == 0)
      goto LABEL_32;
LABEL_35:
    v41 = v950;
    if (v950 < v947)
    {
      v950 = v947;
      v41 = v947;
    }
    v42 = v946;
    v39 = v41 - (_QWORD)v946;
    if (v41 - (unint64_t)v946 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_90;
    goto LABEL_38;
  }
  operator delete(*(void **)v954);
  v38 = v951;
  if ((v951 & 0x10) != 0)
    goto LABEL_35;
LABEL_32:
  if ((v38 & 8) == 0)
  {
    v39 = 0;
    HIBYTE(v921) = 0;
    v40 = __dst;
    goto LABEL_45;
  }
  v42 = v944[0];
  v39 = v945 - (unint64_t)v944[0];
  if (v945 - (unint64_t)v944[0] > 0x7FFFFFFFFFFFFFF7)
LABEL_90:
    sub_20E860B7C();
LABEL_38:
  if (v39 >= 0x17)
  {
    v43 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v43 = v39 | 7;
    v44 = v43 + 1;
    v40 = (void **)operator new(v43 + 1);
    __dst[1] = (void *)v39;
    v921 = v44 | 0x8000000000000000;
    __dst[0] = v40;
    goto LABEL_44;
  }
  HIBYTE(v921) = v39;
  v40 = __dst;
  if (v39)
LABEL_44:
    memmove(v40, v42, v39);
LABEL_45:
  *((_BYTE *)v40 + v39) = 0;
  v911 = &v922;
  rep = (_QWORD *)std::chrono::steady_clock::now().__d_.__rep_;
  v913 = std::chrono::system_clock::now().__d_.__rep_;
  v914 = 2;
  v915 = "unknown file";
  v916 = 2420;
  v918 = 0;
  v919 = 0;
  v917 = "unknown function";
  if (v921 >= 0)
    v45 = __dst;
  else
    v45 = (void **)__dst[0];
  v46 = *(_QWORD *)v911;
  v47 = (const char *)(*(_QWORD *)v911 + 16);
  v905 = v47;
  __s = (char *)v45;
  if (*(char *)(*(_QWORD *)v911 + 39) < 0)
  {
    v47 = *(const char **)(v46 + 16);
    v48 = *(_QWORD *)(v46 + 24);
    v50 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v50 & 1) != 0)
      goto LABEL_52;
  }
  else
  {
    v48 = *(unsigned __int8 *)(*(_QWORD *)v911 + 39);
    v49 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v49 & 1) != 0)
      goto LABEL_52;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v954);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v954);
    if ((_BYTE)v955 && (v954[23] & 0x80000000) != 0)
      operator delete(*(void **)v954);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_52:
  if (byte_254A4A4F8[23] >= 0)
    v51 = byte_254A4A4F8;
  else
    v51 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v52 = byte_254A4A4F8[23];
  else
    v52 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v954 = os_log_create(v51, v47);
  v53 = &v954[8];
  if (v52 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v52 >= 0x17)
  {
    v54 = v26;
    v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17)
      v55 = v52 | 7;
    v56 = v55 + 1;
    v53 = operator new(v55 + 1);
    *(_QWORD *)&v954[16] = v52;
    *(_QWORD *)&v955 = v56 | 0x8000000000000000;
    *(_QWORD *)&v954[8] = v53;
    v26 = v54;
    goto LABEL_65;
  }
  BYTE7(v955) = v52;
  if (v52)
LABEL_65:
    memmove(v53, v51, v52);
  v53[v52] = 0;
  BYTE8(v955) = 1;
  v57 = (char *)&v956;
  if (v48 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v48 >= 0x17)
  {
    v58 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17)
      v58 = v48 | 7;
    v59 = v58 + 1;
    v57 = (char *)operator new(v58 + 1);
    v957 = (const char *)v48;
    v958 = v59 | 0x8000000000000000;
    v956 = v57;
    goto LABEL_73;
  }
  HIBYTE(v958) = v48;
  if (v48)
LABEL_73:
    memmove(v57, v47, v48);
  v57[v48] = 0;
  LOBYTE(v959) = 1;
  v60 = *(NSObject **)v954;
  if (SHIBYTE(v958) < 0)
    operator delete(v956);
  if (BYTE8(v955) && SBYTE7(v955) < 0)
    operator delete(*(void **)&v954[8]);
  if (*(_QWORD *)v954)
    os_release(*(void **)v954);
  if (!v28 || !*(_QWORD *)(v28 + 24))
  {
    os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v954 = 136315138;
    *(_QWORD *)&v954[4] = __s;
    v67 = (void *)_os_log_send_and_compose_impl();
    if (v67)
      free(v67);
    goto LABEL_154;
  }
  v61 = _os_log_pack_size();
  v62 = (std::__shared_weak_count_vtbl *)operator new(v61, (std::align_val_t)8uLL);
  v63 = (std::__shared_weak_count *)operator new();
  v63->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v63->__shared_owners_ = 0;
  v63->__shared_weak_owners_ = 0;
  v63[1].__vftable = v62;
  *(_QWORD *)&v935 = v62;
  *((_QWORD *)&v935 + 1) = v62;
  v937 = 0;
  v938 = 0;
  v936 = v63;
  v64 = strlen(__s);
  if (v64 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v65 = v64;
  if (v64 >= 0x17)
  {
    v68 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v64 | 7) != 0x17)
      v68 = v64 | 7;
    v69 = v68 + 1;
    v66 = operator new(v68 + 1);
    *(_QWORD *)&v940 = v65;
    *((_QWORD *)&v940 + 1) = v69 | 0x8000000000000000;
    v939 = v66;
    goto LABEL_94;
  }
  HIBYTE(v940) = v64;
  v66 = &v939;
  if (v64)
LABEL_94:
    memcpy(v66, __s, v65);
  *((_BYTE *)v66 + v65) = 0;
  v70 = v939;
  v953[0] = v940;
  *(_QWORD *)((char *)v953 + 7) = *(_QWORD *)((char *)&v940 + 7);
  v71 = HIBYTE(v940);
  v72 = operator new(0x38uLL);
  v72[1] = 0;
  v72[2] = 0;
  v72[3] = off_24C9ABC20;
  *v72 = &off_24C9ABBD0;
  v73 = v953[0];
  v72[4] = v70;
  v72[5] = v73;
  *(_QWORD *)((char *)v72 + 47) = *(_QWORD *)((char *)v953 + 7);
  *((_BYTE *)v72 + 55) = v71;
  v953[0] = 0;
  *(_QWORD *)((char *)v953 + 7) = 0;
  v74 = v938;
  v937 = (char *)(v72 + 3);
  v938 = (std::__shared_weak_count *)v72;
  if (v74)
  {
    p_shared_owners = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  *(_OWORD *)v954 = v935;
  v77 = v937;
  *(_QWORD *)&v954[16] = v936;
  if (v936)
  {
    v78 = (unint64_t *)&v936->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  v80 = v938;
  *(_QWORD *)&v955 = v77;
  *((_QWORD *)&v955 + 1) = v938;
  if (v938)
  {
    v81 = (unint64_t *)&v938->__shared_owners_;
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
    v956 = v77;
    do
      v83 = __ldaxr(v81);
    while (__stlxr(v83 - 1, v81));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  else
  {
    v956 = v77;
  }
  v84 = v936;
  if (v936)
  {
    v85 = (unint64_t *)&v936->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = *(_QWORD *)v954;
  if (v956[31] >= 0)
    v88 = v956 + 8;
  else
    v88 = (char *)*((_QWORD *)v956 + 1);
  v89 = _os_log_pack_fill();
  *(_DWORD *)v89 = 136315138;
  *(_QWORD *)(v89 + 4) = v88;
  v90 = operator new();
  v91 = *(unsigned __int8 *)(v46 + 39);
  v92 = v905;
  if ((v91 & 0x80u) != 0)
  {
    v92 = *(const char **)(v46 + 16);
    v91 = *(_QWORD *)(v46 + 24);
  }
  *(_QWORD *)v90 = v87;
  *(_OWORD *)(v90 + 8) = *(_OWORD *)&v954[8];
  *(_QWORD *)&v954[8] = 0;
  *(_QWORD *)&v954[16] = 0;
  *(_OWORD *)(v90 + 24) = v955;
  v955 = 0uLL;
  *(_QWORD *)(v90 + 40) = v92;
  *(_QWORD *)(v90 + 48) = v91;
  *(_BYTE *)(v90 + 56) = 2;
  v939 = 0;
  *(_QWORD *)&v935 = v90;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v28 + 24) + 40))(*(_QWORD *)(v28 + 24), &v935);
  v93 = v935;
  *(_QWORD *)&v935 = 0;
  if (v93)
  {
    v94 = *(std::__shared_weak_count **)(v93 + 32);
    if (v94)
    {
      v95 = (unint64_t *)&v94->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    v97 = *(std::__shared_weak_count **)(v93 + 16);
    if (v97)
    {
      v98 = (unint64_t *)&v97->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    MEMORY[0x212BC6398](v93, 0x10F0C40B62ED6C6);
    v100 = v939;
    v939 = 0;
    if (v100)
    {
      v101 = (std::__shared_weak_count *)v100[4];
      if (v101)
      {
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      v104 = (std::__shared_weak_count *)v100[2];
      if (v104)
      {
        v105 = (unint64_t *)&v104->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      MEMORY[0x212BC6398](v100, 0x10F0C40B62ED6C6);
    }
  }
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v955 + 1);
  if (*((_QWORD *)&v955 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v955 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = *(std::__shared_weak_count **)&v954[16];
  if (*(_QWORD *)&v954[16])
  {
    v111 = (unint64_t *)(*(_QWORD *)&v954[16] + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
LABEL_154:
  if (v26)
  {
    v113 = (const char *)__dst;
    if (v921 < 0)
      v113 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)&v911, "%s", v113);
    sub_20E863570((uint64_t)&v911);
  }
  sub_20E863570((uint64_t)&v911);
  v114 = v919;
  if (v919)
  {
    v115 = (unint64_t *)&v919->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  if (SHIBYTE(v921) < 0)
    operator delete(__dst[0]);
  object = (void *)*MEMORY[0x24BEDB7F0];
  v117 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)&object + *((_QWORD *)object - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  *((_QWORD *)&__p + 1) = v117;
  *(_QWORD *)&v943 = MEMORY[0x24BEDB848] + 16;
  if (v949 < 0)
    operator delete(v948);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v952);
LABEL_168:
  v118 = (uint64_t *)v926;
  v119 = (char *)v923;
  v896 = (uint64_t *)v926;
  if (v923)
  {
    v120 = v924;
    v121 = v923;
    if (v924 != v923)
    {
      do
      {
        v122 = *((_QWORD *)v120 - 3);
        if (v122)
        {
          v123 = *((_QWORD *)v120 - 2);
          v124 = (void *)*((_QWORD *)v120 - 3);
          if (v123 != v122)
          {
            do
              v123 = sub_20EB8188C(v123 - 1664);
            while (v123 != v122);
            v124 = (void *)*((_QWORD *)v120 - 3);
          }
          *((_QWORD *)v120 - 2) = v122;
          operator delete(v124);
        }
        v120 -= 32;
      }
      while (v120 != v119);
      v121 = v923;
      v118 = v896;
    }
    v924 = v119;
    operator delete(v121);
  }
  v125 = v927;
  if (v927)
  {
    v126 = (unint64_t *)&v927->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v928;
  if (v928)
  {
    v129 = (uint64_t)v929;
    v130 = v928;
    if (v929 != v928)
    {
      do
      {
        v129 -= 240;
        sub_20E990F68(v129);
      }
      while ((void *)v129 != v128);
      v130 = v928;
    }
    v929 = v128;
    operator delete(v130);
  }
  v131 = v931;
  if (v931)
  {
    v132 = v932;
    v133 = v931;
    if (v932 != v931)
    {
      do
      {
        v132 -= 13;
        sub_20E9905B4(v132);
      }
      while (v132 != v131);
      v133 = v931;
    }
    v932 = v131;
    operator delete(v133);
  }
  kdebug_trace();
  v135 = v118[3];
  v134 = v118[4];
  if (v134 == v135)
    goto LABEL_900;
  v136 = 0;
  v137 = 0;
  v138 = v898[921];
  v895 = (char **)(v138 + 1440);
  while (1)
  {
    v139 = v135 + 240 * v136;
    v140 = *(_QWORD *)(v139 + 24);
    v141 = *(_QWORD *)(v139 + 32);
    v142 = (uint64_t *)(v139 + 24);
    if (v141 != v140)
      break;
LABEL_196:
    v136 = ++v137;
    if (0xEEEEEEEEEEEEEEEFLL * ((v134 - v135) >> 4) <= v137)
    {
      v118 = v896;
      goto LABEL_900;
    }
  }
  v143 = 0;
  v144 = 1;
  while (1)
  {
    v145 = 16 * v143;
    v146 = *(_QWORD *)(v140 + 16 * v143);
    if (*(_BYTE *)(v146 + 184))
    {
      v147 = *(_QWORD *)(v146 + 88) - *(_QWORD *)(v146 + 80);
      if (v147)
        v148 = v147 == *(_QWORD *)(v146 + 168) - *(_QWORD *)(v146 + 160);
      else
        v148 = 0;
      if (!v148)
        goto LABEL_210;
      v149 = (uint64_t)(*(_QWORD *)(v146 + 64) - *(_QWORD *)(v146 + 56)) >> 5;
      if (v149 != v147 >> 6)
        goto LABEL_210;
    }
    else
    {
      if (*(_QWORD *)(v146 + 160) != *(_QWORD *)(v146 + 168))
        goto LABEL_210;
      v149 = (uint64_t)(*(_QWORD *)(v146 + 64) - *(_QWORD *)(v146 + 56)) >> 5;
      if (v149 != (uint64_t)(*(_QWORD *)(v146 + 88) - *(_QWORD *)(v146 + 80)) >> 6)
        goto LABEL_210;
    }
    v150 = *(_QWORD *)(v146 + 16);
    if (v150 <= v149)
    {
      if (v149 - v150 != v149)
        break;
      goto LABEL_212;
    }
LABEL_210:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0))
    {
LABEL_1028:
      abort();
    }
    v140 = *v142;
    if (((uint64_t)(*(_QWORD *)(v146 + 64) - *(_QWORD *)(v146 + 56)) >> 5) - *(_QWORD *)(v146 + 16) != (uint64_t)(*(_QWORD *)(*(_QWORD *)(*v142 + v145) + 64) - *(_QWORD *)(*(_QWORD *)(*v142 + v145) + 56)) >> 5)
      break;
LABEL_212:
    v143 = v144++;
    if (v143 >= (v142[1] - v140) >> 4)
    {
      v135 = v896[3];
      v134 = v896[4];
      goto LABEL_196;
    }
  }
  v151 = 0x4EC4EC4EC4EC4EC5 * ((v896[1] - *v896) >> 3);
  v152 = *(_QWORD **)(v138 + 1448);
  v153 = *(_QWORD *)(v138 + 1440);
  v154 = 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v152 - v153) >> 3);
  if (v151 <= v154)
  {
    if (v151 < v154)
    {
      v155 = (_QWORD *)(v153 + 8 * ((v896[1] - *v896) >> 3));
      while (v152 != v155)
      {
        v152 -= 13;
        sub_20E9905B4(v152);
      }
      *(_QWORD *)(v138 + 1448) = v155;
    }
  }
  else
  {
    sub_20F009E24(v895, v151 - v154);
  }
  v156 = (char *)*v896;
  if (v896[1] != *v896)
  {
    v157 = 0;
    v158 = 0;
    while (1)
    {
      v897 = v158;
      v159 = *v895;
      *(_DWORD *)&v159[104 * v157] = *(_DWORD *)&v156[104 * v157];
      if (v159 != v156)
      {
        v160 = (char **)&v156[104 * v157];
        v161 = &v159[104 * v157];
        sub_20EDB66F4((_QWORD *)v161 + 4, v160[4], v160[5], 0x8E38E38E38E38E39 * ((v160[5] - v160[4]) >> 3));
        sub_20EDB66F4((_QWORD *)v161 + 7, v160[7], v160[8], 0x8E38E38E38E38E39 * ((v160[8] - v160[7]) >> 3));
        sub_20EDB66F4((_QWORD *)v161 + 10, v160[10], v160[11], 0x8E38E38E38E38E39 * ((v160[11] - v160[10]) >> 3));
      }
      v162 = &v159[104 * v157];
      v165 = *((_QWORD *)v162 + 1);
      v164 = (char **)(v162 + 8);
      v163 = v165;
      v166 = &v156[104 * v157];
      v903 = (uint64_t *)(v166 + 8);
      v167 = 0x6FB586FB586FB587 * ((uint64_t)(*((_QWORD *)v166 + 2) - *((_QWORD *)v166 + 1)) >> 3);
      v169 = v164 + 1;
      v168 = v164[1];
      v170 = 0x6FB586FB586FB587 * ((uint64_t)&v168[-v165] >> 3);
      if (v167 <= v170)
      {
        if (v167 < v170)
        {
          v171 = (char *)(v163 + 440 * v167);
          if (v168 != v171)
          {
            v172 = v168 - 208;
            do
            {
              v174 = (void *)*((_QWORD *)v172 + 23);
              if (v174)
              {
                *((_QWORD *)v172 + 24) = v174;
                operator delete(v174);
              }
              v175 = (void *)*((_QWORD *)v172 + 20);
              if (v175)
              {
                *((_QWORD *)v172 + 21) = v175;
                operator delete(v175);
              }
              if (v172[152])
              {
                v176 = (void *)*((_QWORD *)v172 + 16);
                if (v176)
                {
                  *((_QWORD *)v172 + 17) = v176;
                  operator delete(v176);
                }
              }
              v177 = (void *)*((_QWORD *)v172 + 13);
              if (v177)
              {
                *((_QWORD *)v172 + 14) = v177;
                operator delete(v177);
              }
              if (v172[96])
              {
                v178 = (void *)*((_QWORD *)v172 + 9);
                if (v178)
                {
                  *((_QWORD *)v172 + 10) = v178;
                  operator delete(v178);
                }
              }
              v179 = (void *)*((_QWORD *)v172 + 6);
              if (v179)
              {
                *((_QWORD *)v172 + 7) = v179;
                operator delete(v179);
              }
              v180 = (void *)*((_QWORD *)v172 + 3);
              if (v180)
              {
                *((_QWORD *)v172 + 4) = v180;
                operator delete(v180);
              }
              v181 = *(void **)v172;
              if (*(_QWORD *)v172)
              {
                *((_QWORD *)v172 + 1) = v181;
                operator delete(v181);
              }
              v182 = (void *)*((_QWORD *)v172 - 3);
              if (v182)
              {
                *((_QWORD *)v172 - 2) = v182;
                operator delete(v182);
              }
              v183 = (void *)*((_QWORD *)v172 - 6);
              if (v183)
              {
                *((_QWORD *)v172 - 5) = v183;
                operator delete(v183);
              }
              if (*(v172 - 56))
              {
                v184 = (void *)*((_QWORD *)v172 - 10);
                if (v184)
                {
                  *((_QWORD *)v172 - 9) = v184;
                  operator delete(v184);
                }
              }
              v185 = (void *)*((_QWORD *)v172 - 13);
              if (v185)
              {
                *((_QWORD *)v172 - 12) = v185;
                operator delete(v185);
              }
              if (*(v172 - 112))
              {
                v186 = (void *)*((_QWORD *)v172 - 17);
                if (v186)
                {
                  *((_QWORD *)v172 - 16) = v186;
                  operator delete(v186);
                }
              }
              v187 = (void *)*((_QWORD *)v172 - 20);
              if (v187)
              {
                *((_QWORD *)v172 - 19) = v187;
                operator delete(v187);
              }
              v188 = (void *)*((_QWORD *)v172 - 23);
              if (v188)
              {
                *((_QWORD *)v172 - 22) = v188;
                operator delete(v188);
              }
              v189 = (void *)*((_QWORD *)v172 - 26);
              if (v189)
              {
                *((_QWORD *)v172 - 25) = v189;
                operator delete(v189);
              }
              v173 = v172 - 232;
              v172 -= 440;
            }
            while (v173 != v171);
          }
          *v169 = v171;
          v168 = v171;
        }
      }
      else
      {
        sub_20F00A71C((void **)v164, v167 - v170);
        v168 = *v169;
      }
      v190 = *v164;
      if (v168 != *v164)
        break;
LABEL_223:
      v157 = (v897 + 1);
      v156 = (char *)*v896;
      v158 = v897 + 1;
      if (0x4EC4EC4EC4EC4EC5 * ((v896[1] - *v896) >> 3) <= v157)
        goto LABEL_899;
    }
    v191 = 0;
    v192 = 0;
    v899 = v164 + 1;
    v900 = (_QWORD *)(v896[3] + 240 * v157 + 24);
    v902 = v164;
    while (2)
    {
      v196 = *v903 + 440 * v191;
      v197 = &v190[440 * v191];
      *(_DWORD *)v197 = *(_DWORD *)v196;
      *(_OWORD *)(v197 + 8) = *(_OWORD *)(v196 + 8);
      v198 = *(_QWORD *)(*v900 + 16 * v191);
      v901 = v192;
      if (*(_BYTE *)(v198 + 184))
      {
        v199 = *(_QWORD *)(v198 + 88) - *(_QWORD *)(v198 + 80);
        if (v199)
          v200 = v199 == *(_QWORD *)(v198 + 168) - *(_QWORD *)(v198 + 160);
        else
          v200 = 0;
        if (!v200 || (v201 = (uint64_t)(*(_QWORD *)(v198 + 64) - *(_QWORD *)(v198 + 56)) >> 5, v201 != v199 >> 6))
        {
LABEL_286:
          sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0);
          v203 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v203 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68 || byte_254A6DE70)
          {
            v204 = qword_254A6DE40;
            v205 = qword_254A6DE48;
            while (v204 != v205)
            {
              v207 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v204;
              v206 = *(_QWORD *)(v204 + 8);
              v204 += 16;
              v207(v206, "HasValidSize()", 14, "Descriptor size mis-match", 25);
            }
          }
          v208 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
          if ((v208 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
          {
            __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DE78);
          }
          if (!byte_254A6DE68)
            goto LABEL_1028;
          qword_254A6DE58(unk_254A6DE60, "HasValidSize()", 14, "Descriptor size mis-match", 25);
          v201 = (uint64_t)(*(_QWORD *)(v198 + 64) - *(_QWORD *)(v198 + 56)) >> 5;
          v202 = *(_QWORD *)(v198 + 16);
          goto LABEL_294;
        }
      }
      else
      {
        if (*(_QWORD *)(v198 + 160) != *(_QWORD *)(v198 + 168))
          goto LABEL_286;
        v201 = (uint64_t)(*(_QWORD *)(v198 + 64) - *(_QWORD *)(v198 + 56)) >> 5;
        if (v201 != (uint64_t)(*(_QWORD *)(v198 + 88) - *(_QWORD *)(v198 + 80)) >> 6)
          goto LABEL_286;
      }
      v202 = *(_QWORD *)(v198 + 16);
      if (v202 > v201)
        goto LABEL_286;
LABEL_294:
      v209 = v201 - v202;
      v904 = v209;
      v906 = *v903;
      v210 = *v903 + 440 * v191;
      __sa = *v164;
      v211 = (uint64_t)&(*v164)[440 * v191];
      v214 = *(char **)(v211 + 24);
      v213 = (char **)(v211 + 24);
      v212 = v214;
      v216 = *(_QWORD *)(v210 + 24);
      v215 = *(_QWORD *)(v210 + 32);
      v217 = (__int128 **)(v210 + 24);
      v218 = (v215 - v216) >> 4;
      if (v218 >= v209)
        v219 = v209;
      else
        v219 = v218;
      v220 = (uint64_t)v213[2];
      if (v219 <= (v220 - (uint64_t)v212) >> 4)
      {
        v224 = v212;
        v226 = *v217;
        v227 = v219 << 32;
        v228 = (int)v219;
        if ((int)v219 <= (unint64_t)((v220 - (uint64_t)v212) >> 4))
          goto LABEL_318;
LABEL_305:
        if (v224)
        {
          v213[1] = v224;
          operator delete(v224);
          v220 = 0;
          *v213 = 0;
          v213[1] = 0;
          v213[2] = 0;
        }
        if (v227 < 0)
          goto LABEL_1025;
        v229 = v220 >> 3;
        if (v220 >> 3 <= v228)
          v229 = v228;
        v230 = (unint64_t)v220 >= 0x7FFFFFFFFFFFFFF0;
        v231 = 0xFFFFFFFFFFFFFFFLL;
        if (!v230)
          v231 = v229;
        if (v231 >> 60)
LABEL_1025:
          sub_20E867F44();
        v232 = 16 * v231;
        v224 = (char *)operator new(16 * v231);
        *v213 = v224;
        v213[1] = v224;
        v213[2] = &v224[v232];
        v233 = v224;
        if (v227)
        {
          v234 = 16 * v228;
          v233 = v224;
          do
          {
            v235 = *v226++;
            *(_OWORD *)v233 = v235;
            v233 += 16;
            v234 -= 16;
          }
          while (v234);
        }
        v236 = v233 - v224;
        v237 = v213 + 1;
      }
      else
      {
        if (v219 >> 60)
          goto LABEL_1025;
        v221 = v213[1];
        v222 = (char *)operator new(16 * v219);
        v223 = &v222[(v221 - v212) & 0xFFFFFFFFFFFFFFF0];
        v224 = v223;
        if (v221 != v212)
        {
          v225 = &v222[(v221 - v212) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v224 = v225 - 16;
            *((_OWORD *)v225 - 1) = *((_OWORD *)v221 - 1);
            v221 -= 16;
            v225 -= 16;
          }
          while (v221 != v212);
        }
        v220 = (uint64_t)&v222[16 * v219];
        *v213 = v224;
        v213[1] = v223;
        v213[2] = (char *)v220;
        if (v212)
        {
          operator delete(v212);
          v224 = *v213;
          v220 = (uint64_t)v213[2];
        }
        v226 = *v217;
        v227 = v219 << 32;
        v228 = (int)v219;
        if ((int)v219 > (unint64_t)((v220 - (uint64_t)v224) >> 4))
          goto LABEL_305;
LABEL_318:
        v239 = v213[1];
        v237 = v213 + 1;
        v238 = v239;
        v240 = (v239 - v224) >> 4;
        if (v240 >= v228)
        {
          if (v227)
          {
            v249 = 16 * v228;
            v250 = v224;
            v251 = v224;
            do
            {
              v252 = *v226++;
              *(_OWORD *)v251 = v252;
              v251 += 16;
              v250 += 16;
              v249 -= 16;
            }
            while (v249);
            v236 = v250 - v224;
          }
          else
          {
            v236 = 0;
          }
        }
        else
        {
          if (v238 != v224)
          {
            v241 = 16 * v240;
            v242 = v226;
            do
            {
              v243 = *v242++;
              *(_OWORD *)v224 = v243;
              v224 += 16;
              v241 -= 16;
            }
            while (v241);
            v224 = *v237;
          }
          v244 = &v226[v240];
          v245 = v224;
          if (v244 != (__int128 *)((char *)v226 + (v227 >> 28)))
          {
            v246 = 16 * v228 - 16 * v240;
            v245 = v224;
            v247 = v224;
            do
            {
              v248 = *v244++;
              *(_OWORD *)v247 = v248;
              v247 += 16;
              v245 += 16;
              v246 -= 16;
            }
            while (v246);
          }
          v236 = v245 - v224;
        }
      }
      *v237 = &v224[v236];
      v253 = &__sa[440 * v191];
      v256 = *((_QWORD *)v253 + 8);
      v255 = (uint64_t *)(v253 + 64);
      v254 = v256;
      v257 = v255 - 2;
      v258 = (char *)*(v255 - 2);
      v259 = v906 + 440 * v191;
      v260 = *(_QWORD *)(v259 + 48);
      v261 = *(_QWORD *)(v259 + 56);
      v262 = (__int128 **)(v259 + 48);
      v263 = (v261 - v260) >> 4;
      if (v263 >= v904)
        v264 = v904;
      else
        v264 = v263;
      if (v264 <= (v254 - (uint64_t)v258) >> 4)
      {
        v271 = (char *)*(v255 - 2);
        v273 = *v262;
        v274 = v264 << 32;
        v275 = (int)v264;
        if ((int)v264 <= (unint64_t)((v254 - (uint64_t)v258) >> 4))
          goto LABEL_356;
LABEL_343:
        if (v271)
        {
          *(_QWORD *)&__sa[440 * v191 + 56] = v271;
          operator delete(v271);
          v254 = 0;
          *v257 = 0;
          *(v255 - 1) = 0;
          *v255 = 0;
        }
        if (v274 < 0)
          goto LABEL_1024;
        v276 = v254 >> 3;
        if (v254 >> 3 <= v275)
          v276 = v275;
        v230 = (unint64_t)v254 >= 0x7FFFFFFFFFFFFFF0;
        v277 = 0xFFFFFFFFFFFFFFFLL;
        if (!v230)
          v277 = v276;
        if (v277 >> 60)
LABEL_1024:
          sub_20E867F44();
        v278 = 16 * v277;
        v271 = (char *)operator new(16 * v277);
        *v257 = (uint64_t)v271;
        v279 = &__sa[440 * v191];
        *((_QWORD *)v279 + 7) = v271;
        v280 = (char **)(v279 + 56);
        *v255 = (uint64_t)&v271[v278];
        v281 = v271;
        if (v274)
        {
          v282 = 16 * v275;
          v281 = v271;
          do
          {
            v283 = *v273++;
            *(_OWORD *)v281 = v283;
            v281 += 16;
            v282 -= 16;
          }
          while (v282);
        }
      }
      else
      {
        if (v264 >> 60)
          goto LABEL_1024;
        v265 = &__sa[440 * v191];
        v268 = (char *)*((_QWORD *)v265 + 7);
        v266 = (char **)(v265 + 56);
        v267 = v268;
        v269 = (char *)operator new(16 * v264);
        v270 = &v269[(v268 - v258) & 0xFFFFFFFFFFFFFFF0];
        v271 = v270;
        if (v268 != v258)
        {
          v272 = v270;
          do
          {
            v271 = v272 - 16;
            *((_OWORD *)v272 - 1) = *((_OWORD *)v267 - 1);
            v267 -= 16;
            v272 -= 16;
          }
          while (v267 != v258);
        }
        v254 = (uint64_t)&v269[16 * v264];
        *v257 = (uint64_t)v271;
        *v266 = v270;
        *v255 = v254;
        if (v258)
        {
          operator delete(v258);
          v271 = (char *)*v257;
          v254 = *v255;
        }
        v273 = *v262;
        v274 = v264 << 32;
        v275 = (int)v264;
        if ((int)v264 > (unint64_t)((v254 - (uint64_t)v271) >> 4))
          goto LABEL_343;
LABEL_356:
        v284 = &__sa[440 * v191];
        v286 = (char *)*((_QWORD *)v284 + 7);
        v280 = (char **)(v284 + 56);
        v285 = v286;
        v287 = (v286 - v271) >> 4;
        if (v287 < v275)
        {
          if (v285 != v271)
          {
            v288 = 16 * v287;
            v289 = v273;
            do
            {
              v290 = *v289++;
              *(_OWORD *)v271 = v290;
              v271 += 16;
              v288 -= 16;
            }
            while (v288);
            v271 = *v280;
          }
          v291 = &v273[v287];
          v292 = v271;
          if (v291 != (__int128 *)((char *)v273 + (v274 >> 28)))
          {
            v293 = 16 * v275 - 16 * v287;
            v292 = v271;
            v294 = v271;
            do
            {
              v295 = *v291++;
              *(_OWORD *)v294 = v295;
              v294 += 16;
              v292 += 16;
              v293 -= 16;
            }
            while (v293);
          }
          v296 = v292 - v271;
LABEL_371:
          *v280 = &v271[v296];
          v300 = &__sa[440 * v191];
          v303 = *((_QWORD *)v300 + 11);
          v302 = (uint64_t *)(v300 + 88);
          v301 = v303;
          v304 = v302 - 2;
          v305 = (_BYTE *)*(v302 - 2);
          v306 = v906 + 440 * v191;
          v307 = *(_QWORD *)(v306 + 72);
          v308 = *(_QWORD *)(v306 + 80);
          v309 = (const void **)(v306 + 72);
          v310 = v308 - v307;
          v311 = (v308 - v307) >> 3;
          if (v311 <= (v303 - (uint64_t)v305) >> 3)
          {
            v319 = (char *)*(v302 - 2);
          }
          else
          {
            if (v310 < 0)
              goto LABEL_1021;
            v312 = &__sa[440 * v191];
            v315 = (_BYTE *)*((_QWORD *)v312 + 10);
            v314 = (char **)(v312 + 80);
            v313 = v315;
            v316 = (char *)operator new(v310);
            v317 = v315 - v305;
            v318 = &v316[(v315 - v305) & 0xFFFFFFFFFFFFFFF8];
            v319 = v318;
            if (v315 != v305)
            {
              if ((unint64_t)(v317 - 8) < 0x58)
              {
                v319 = &v316[(v313 - v305) & 0xFFFFFFFFFFFFFFF8];
                goto LABEL_381;
              }
              v319 = &v316[(v313 - v305) & 0xFFFFFFFFFFFFFFF8];
              if ((unint64_t)(v313 - &v316[v317 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
                goto LABEL_1048;
              v320 = v317 >> 3;
              v321 = ((unint64_t)(v317 - 8) >> 3) + 1;
              v322 = 8 * (v321 & 0x3FFFFFFFFFFFFFFCLL);
              v323 = &v313[-v322];
              v319 = &v318[-v322];
              v324 = &v316[8 * v320 - 16];
              v325 = (__int128 *)(v313 - 16);
              v326 = v321 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v327 = *v325;
                *((_OWORD *)v324 - 1) = *(v325 - 1);
                *(_OWORD *)v324 = v327;
                v324 -= 32;
                v325 -= 2;
                v326 -= 4;
              }
              while (v326);
              v313 = v323;
              if (v321 != (v321 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1048:
                do
                {
LABEL_381:
                  v328 = *((_QWORD *)v313 - 1);
                  v313 -= 8;
                  *((_QWORD *)v319 - 1) = v328;
                  v319 -= 8;
                }
                while (v313 != v305);
              }
            }
            *v304 = (uint64_t)v319;
            v301 = (uint64_t)&v316[8 * v311];
            *v314 = v318;
            *v302 = v301;
            if (v305)
            {
              operator delete(v305);
              v301 = *v302;
              v319 = (char *)*v304;
            }
          }
          v329 = (char *)*v309;
          v330 = v310 << 29;
          v331 = (int)(v310 >> 3);
          if (v331 <= (v301 - (uint64_t)v319) >> 3)
          {
            v337 = &__sa[440 * v191];
            v339 = (char *)*((_QWORD *)v337 + 10);
            v335 = (void **)(v337 + 80);
            v338 = v339;
            v340 = v339 - v319;
            v341 = (v339 - v319) >> 3;
            if (v341 >= v331)
            {
              if (!v330)
                goto LABEL_404;
              v336 = v330 >> 29;
LABEL_402:
              v343 = v319;
              v342 = v329;
            }
            else
            {
              if (v338 != v319)
              {
                memmove(v319, *v309, v340);
                v319 = (char *)*v335;
              }
              v342 = &v329[8 * v341];
              v336 = (v330 >> 29) - 8 * v341;
              if (v341 == v331)
                goto LABEL_405;
              v343 = v319;
            }
            memmove(v343, v342, v336);
            goto LABEL_405;
          }
          if (v319)
          {
            *(_QWORD *)&__sa[440 * v191 + 80] = v319;
            operator delete(v319);
            v301 = 0;
            *v304 = 0;
            *(v302 - 1) = 0;
            *v302 = 0;
          }
          if (v330 < 0)
            goto LABEL_1021;
          v332 = v301 >> 2;
          if (v301 >> 2 <= v331)
            v332 = (int)(v310 >> 3);
          if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFF8)
            v332 = 0x1FFFFFFFFFFFFFFFLL;
          if (v332 >> 61)
LABEL_1021:
            sub_20E867F44();
          v333 = 8 * v332;
          v319 = (char *)operator new(8 * v332);
          *v304 = (uint64_t)v319;
          v334 = &__sa[440 * v191];
          *((_QWORD *)v334 + 10) = v319;
          v335 = (void **)(v334 + 80);
          *v302 = (uint64_t)&v319[v333];
          if (v330)
          {
            v336 = v310 & 0x7FFFFFFFFLL;
            goto LABEL_402;
          }
LABEL_404:
          v336 = 0;
LABEL_405:
          *v335 = &v319[v336];
          v344 = &__sa[440 * v191];
          v345 = v344 + 96;
          v346 = v906 + 440 * v191;
          if (*(_BYTE *)(v346 + 120))
          {
            v347 = (char **)(v346 + 96);
            if (v344[120])
            {
              v348 = *((_QWORD *)v344 + 14);
              v349 = *(char **)v345;
            }
            else
            {
              v349 = 0;
              v348 = 0;
              *(_QWORD *)v345 = 0;
              *((_QWORD *)v344 + 13) = 0;
              *((_QWORD *)v344 + 14) = 0;
              v344[120] = 1;
              if (!*((_BYTE *)v347 + 24))
                goto LABEL_1029;
            }
            v351 = v347[1] - *v347;
            if (v351 >> 3 <= (unint64_t)((v348 - (uint64_t)v349) >> 3))
            {
              v356 = v349;
            }
            else
            {
              if (v351 < 0)
                goto LABEL_1023;
              v352 = (_BYTE *)*((_QWORD *)v344 + 13);
              v353 = (char *)operator new(v347[1] - *v347);
              v354 = v352 - v349;
              v355 = &v353[(v352 - v349) & 0xFFFFFFFFFFFFFFF8];
              v356 = v355;
              if (v352 != v349)
              {
                if ((unint64_t)(v354 - 8) < 0x58)
                {
                  v356 = &v353[(v352 - v349) & 0xFFFFFFFFFFFFFFF8];
                  goto LABEL_423;
                }
                v356 = &v353[(v352 - v349) & 0xFFFFFFFFFFFFFFF8];
                if ((unint64_t)(v352 - &v353[v354 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
                  goto LABEL_1049;
                v357 = v354 >> 3;
                v358 = ((unint64_t)(v354 - 8) >> 3) + 1;
                v359 = 8 * (v358 & 0x3FFFFFFFFFFFFFFCLL);
                v360 = &v352[-v359];
                v356 = &v355[-v359];
                v361 = &v353[8 * v357 - 16];
                v362 = (__int128 *)(v352 - 16);
                v363 = v358 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v364 = *v362;
                  *((_OWORD *)v361 - 1) = *(v362 - 1);
                  *(_OWORD *)v361 = v364;
                  v361 -= 32;
                  v362 -= 2;
                  v363 -= 4;
                }
                while (v363);
                v352 = v360;
                if (v358 != (v358 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1049:
                  do
                  {
LABEL_423:
                    v365 = *((_QWORD *)v352 - 1);
                    v352 -= 8;
                    *((_QWORD *)v356 - 1) = v365;
                    v356 -= 8;
                  }
                  while (v352 != v349);
                }
              }
              v348 = (uint64_t)&v353[8 * (v351 >> 3)];
              *(_QWORD *)v345 = v356;
              *((_QWORD *)v345 + 1) = v355;
              *((_QWORD *)v345 + 2) = v348;
              if (v349)
              {
                operator delete(v349);
                v348 = *((_QWORD *)v345 + 2);
                v356 = *(char **)v345;
              }
            }
            v366 = *v347;
            v367 = v351 << 29;
            v368 = (int)(v351 >> 3);
            if (v368 <= (v348 - (uint64_t)v356) >> 3)
            {
              v375 = (char *)*((_QWORD *)v345 + 1);
              v374 = (void **)(v345 + 8);
              v373 = v375;
              v376 = v375 - v356;
              v377 = (v375 - v356) >> 3;
              if (v377 >= v368)
              {
                if (!v367)
                {
                  v372 = 0;
                  goto LABEL_447;
                }
                v372 = v367 >> 29;
                v379 = v356;
                v378 = v366;
              }
              else
              {
                if (v373 != v356)
                {
                  memmove(v356, v366, v376);
                  v356 = (char *)*v374;
                }
                v378 = &v366[8 * v377];
                v372 = (v367 >> 29) - 8 * v377;
                if (v377 == v368)
                  goto LABEL_447;
                v379 = v356;
              }
              memmove(v379, v378, v372);
              goto LABEL_447;
            }
            if (v356)
            {
              *((_QWORD *)v345 + 1) = v356;
              operator delete(v356);
              v348 = 0;
              *(_QWORD *)v345 = 0;
              *((_QWORD *)v345 + 1) = 0;
              *((_QWORD *)v345 + 2) = 0;
            }
            if (v367 < 0)
              goto LABEL_1023;
            v369 = v348 >> 2;
            if (v348 >> 2 <= v368)
              v369 = (int)(v351 >> 3);
            if ((unint64_t)v348 >= 0x7FFFFFFFFFFFFFF8)
              v369 = 0x1FFFFFFFFFFFFFFFLL;
            if (v369 >> 61)
LABEL_1023:
              sub_20E867F44();
            v370 = 8 * v369;
            v371 = (char *)operator new(8 * v369);
            v356 = v371;
            *(_QWORD *)v345 = v371;
            *((_QWORD *)v345 + 1) = v371;
            *((_QWORD *)v345 + 2) = &v371[v370];
            if (v367)
            {
              v372 = v351 & 0x7FFFFFFFFLL;
              memmove(v371, v366, v372);
            }
            else
            {
              v372 = 0;
            }
            v374 = (void **)(v345 + 8);
LABEL_447:
            *v374 = &v356[v372];
          }
          else if (v344[120])
          {
            v350 = *(char **)v345;
            if (*(_QWORD *)v345)
            {
              *((_QWORD *)v344 + 13) = v350;
              operator delete(v350);
            }
            v345[24] = 0;
          }
          v380 = &__sa[440 * v191];
          v383 = *((_QWORD *)v380 + 18);
          v382 = (uint64_t *)(v380 + 144);
          v381 = v383;
          v385 = v382 - 2;
          v384 = (_BYTE *)*(v382 - 2);
          v386 = v906 + 440 * v191;
          v387 = *(_QWORD *)(v386 + 128);
          v388 = *(_QWORD *)(v386 + 136);
          v389 = (const void **)(v386 + 128);
          v390 = (v388 - v387) >> 2;
          if (v390 >= v904)
            v391 = v904;
          else
            v391 = v390;
          if (v391 <= (v381 - (uint64_t)v384) >> 2)
          {
            v400 = (char *)*(v382 - 2);
          }
          else
          {
            if (v391 >> 62)
              goto LABEL_1020;
            v392 = &__sa[440 * v191];
            v395 = (_BYTE *)*((_QWORD *)v392 + 17);
            v394 = (char **)(v392 + 136);
            v393 = v395;
            v396 = 4 * v391;
            v397 = (char *)operator new(4 * v391);
            v398 = v395 - v384;
            v399 = &v397[(v395 - v384) & 0xFFFFFFFFFFFFFFFCLL];
            v400 = v399;
            if (v395 != v384)
            {
              if ((unint64_t)(v398 - 4) < 0x2C)
              {
                v400 = &v397[(v393 - v384) & 0xFFFFFFFFFFFFFFFCLL];
                goto LABEL_461;
              }
              v400 = &v397[(v393 - v384) & 0xFFFFFFFFFFFFFFFCLL];
              if ((unint64_t)(&v393[-(v398 & 0xFFFFFFFFFFFFFFFCLL)] - v397) < 0x20)
                goto LABEL_1050;
              v401 = v398 >> 2;
              v402 = ((unint64_t)(v398 - 4) >> 2) + 1;
              v403 = 4 * (v402 & 0x7FFFFFFFFFFFFFF8);
              v404 = &v393[-v403];
              v400 = &v399[-v403];
              v405 = &v397[4 * v401 - 16];
              v406 = (__int128 *)(v393 - 16);
              v407 = v402 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v408 = *v406;
                *((_OWORD *)v405 - 1) = *(v406 - 1);
                *(_OWORD *)v405 = v408;
                v405 -= 32;
                v406 -= 2;
                v407 -= 8;
              }
              while (v407);
              v393 = v404;
              if (v402 != (v402 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_1050:
                do
                {
LABEL_461:
                  v409 = *((_DWORD *)v393 - 1);
                  v393 -= 4;
                  *((_DWORD *)v400 - 1) = v409;
                  v400 -= 4;
                }
                while (v393 != v384);
              }
            }
            v381 = (uint64_t)&v397[v396];
            *v385 = (uint64_t)v400;
            *v394 = v399;
            *v382 = (uint64_t)&v397[v396];
            if (v384)
            {
              operator delete(v384);
              v381 = *v382;
              v400 = (char *)*v385;
            }
          }
          v410 = (char *)*v389;
          v411 = v391 << 32;
          if ((int)v391 <= (unint64_t)((v381 - (uint64_t)v400) >> 2))
          {
            v417 = &__sa[440 * v191];
            v419 = (char *)*((_QWORD *)v417 + 17);
            v415 = (void **)(v417 + 136);
            v418 = v419;
            v420 = v419 - v400;
            v421 = (v419 - v400) >> 2;
            if (v421 >= (int)v391)
            {
              if (!v411)
                goto LABEL_484;
              v416 = 4 * (int)v391;
LABEL_482:
              v423 = v400;
              v422 = v410;
            }
            else
            {
              if (v418 != v400)
              {
                memmove(v400, v410, v420);
                v400 = (char *)*v415;
              }
              v422 = &v410[4 * v421];
              v416 = 4 * (int)v391 - 4 * v421;
              if (v421 == (int)v391)
                goto LABEL_485;
              v423 = v400;
            }
            memmove(v423, v422, v416);
            goto LABEL_485;
          }
          if (v400)
          {
            *(_QWORD *)&__sa[440 * v191 + 136] = v400;
            operator delete(v400);
            v381 = 0;
            *v385 = 0;
            *(v382 - 1) = 0;
            *v382 = 0;
          }
          if ((v411 & 0x8000000000000000) != 0)
            goto LABEL_1020;
          v412 = v381 >> 1;
          if (v381 >> 1 <= (unint64_t)(int)v391)
            v412 = (int)v391;
          if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFFCLL)
            v412 = 0x3FFFFFFFFFFFFFFFLL;
          if (v412 >> 62)
LABEL_1020:
            sub_20EABADD4();
          v413 = 4 * v412;
          v400 = (char *)operator new(4 * v412);
          *v385 = (uint64_t)v400;
          v414 = &__sa[440 * v191];
          *((_QWORD *)v414 + 17) = v400;
          v415 = (void **)(v414 + 136);
          *v382 = (uint64_t)&v400[v413];
          if (v411)
          {
            v416 = (4 * v391) & 0x3FFFFFFFFLL;
            goto LABEL_482;
          }
LABEL_484:
          v416 = 0;
LABEL_485:
          *v415 = &v400[v416];
          v424 = &__sa[440 * v191];
          v425 = v424 + 152;
          v426 = v906 + 440 * v191;
          if (*(_BYTE *)(v426 + 176))
          {
            v427 = (char **)(v426 + 152);
            if (v424[176])
            {
              v428 = *((_QWORD *)v424 + 21);
              v429 = *(char **)v425;
            }
            else
            {
              v429 = 0;
              v428 = 0;
              *(_QWORD *)v425 = 0;
              *((_QWORD *)v424 + 20) = 0;
              *((_QWORD *)v424 + 21) = 0;
              v424[176] = 1;
              if (!*((_BYTE *)v427 + 24))
                goto LABEL_1029;
            }
            if ((v427[1] - *v427) >> 2 >= v904)
              v431 = v904;
            else
              v431 = (v427[1] - *v427) >> 2;
            if (v431 <= (v428 - (uint64_t)v429) >> 2)
            {
              v437 = v429;
            }
            else
            {
              if (v431 >> 62)
                goto LABEL_1022;
              v432 = (_BYTE *)*((_QWORD *)v424 + 20);
              v433 = 4 * v431;
              v434 = (char *)operator new(4 * v431);
              v435 = v432 - v429;
              v436 = &v434[(v432 - v429) & 0xFFFFFFFFFFFFFFFCLL];
              v437 = v436;
              if (v432 != v429)
              {
                if ((unint64_t)(v435 - 4) < 0x2C)
                {
                  v437 = &v434[(v432 - v429) & 0xFFFFFFFFFFFFFFFCLL];
                  goto LABEL_506;
                }
                v437 = &v434[(v432 - v429) & 0xFFFFFFFFFFFFFFFCLL];
                if ((unint64_t)(v432 - &v434[v435 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
                  goto LABEL_1051;
                v438 = v435 >> 2;
                v439 = ((unint64_t)(v435 - 4) >> 2) + 1;
                v440 = 4 * (v439 & 0x7FFFFFFFFFFFFFF8);
                v441 = &v432[-v440];
                v437 = &v436[-v440];
                v442 = &v434[4 * v438 - 16];
                v443 = (__int128 *)(v432 - 16);
                v444 = v439 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v445 = *v443;
                  *((_OWORD *)v442 - 1) = *(v443 - 1);
                  *(_OWORD *)v442 = v445;
                  v442 -= 32;
                  v443 -= 2;
                  v444 -= 8;
                }
                while (v444);
                v432 = v441;
                if (v439 != (v439 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1051:
                  do
                  {
LABEL_506:
                    v446 = *((_DWORD *)v432 - 1);
                    v432 -= 4;
                    *((_DWORD *)v437 - 1) = v446;
                    v437 -= 4;
                  }
                  while (v432 != v429);
                }
              }
              v428 = (uint64_t)&v434[v433];
              *(_QWORD *)v425 = v437;
              *((_QWORD *)v425 + 1) = v436;
              *((_QWORD *)v425 + 2) = &v434[v433];
              if (v429)
              {
                operator delete(v429);
                v428 = *((_QWORD *)v425 + 2);
                v437 = *(char **)v425;
              }
            }
            v447 = *v427;
            v448 = v431 << 32;
            if ((int)v431 <= (unint64_t)((v428 - (uint64_t)v437) >> 2))
            {
              v455 = (char *)*((_QWORD *)v425 + 1);
              v454 = (void **)(v425 + 8);
              v453 = v455;
              v456 = v455 - v437;
              v457 = (v455 - v437) >> 2;
              if (v457 >= (int)v431)
              {
                if (!v448)
                {
                  v452 = 0;
                  goto LABEL_530;
                }
                v452 = 4 * (int)v431;
                v459 = v437;
                v458 = v447;
              }
              else
              {
                if (v453 != v437)
                {
                  memmove(v437, v447, v456);
                  v437 = (char *)*v454;
                }
                v458 = &v447[4 * v457];
                v452 = 4 * (int)v431 - 4 * v457;
                if (v457 == (int)v431)
                  goto LABEL_530;
                v459 = v437;
              }
              memmove(v459, v458, v452);
              goto LABEL_530;
            }
            if (v437)
            {
              *((_QWORD *)v425 + 1) = v437;
              operator delete(v437);
              v428 = 0;
              *(_QWORD *)v425 = 0;
              *((_QWORD *)v425 + 1) = 0;
              *((_QWORD *)v425 + 2) = 0;
            }
            if ((v448 & 0x8000000000000000) != 0)
              goto LABEL_1022;
            v449 = v428 >> 1;
            if (v428 >> 1 <= (unint64_t)(int)v431)
              v449 = (int)v431;
            if ((unint64_t)v428 >= 0x7FFFFFFFFFFFFFFCLL)
              v449 = 0x3FFFFFFFFFFFFFFFLL;
            if (v449 >> 62)
LABEL_1022:
              sub_20EABADD4();
            v450 = 4 * v449;
            v451 = (char *)operator new(4 * v449);
            v437 = v451;
            *(_QWORD *)v425 = v451;
            *((_QWORD *)v425 + 1) = v451;
            *((_QWORD *)v425 + 2) = &v451[v450];
            if (v448)
            {
              v452 = (4 * v431) & 0x3FFFFFFFFLL;
              memmove(v451, v447, v452);
            }
            else
            {
              v452 = 0;
            }
            v454 = (void **)(v425 + 8);
LABEL_530:
            *v454 = &v437[v452];
          }
          else if (v424[176])
          {
            v430 = *(char **)v425;
            if (*(_QWORD *)v425)
            {
              *((_QWORD *)v424 + 20) = v430;
              operator delete(v430);
            }
            v425[24] = 0;
          }
          v460 = &__sa[440 * v191];
          v463 = *((_QWORD *)v460 + 25);
          v462 = (uint64_t *)(v460 + 200);
          v461 = v463;
          v465 = v462 - 2;
          v464 = (_BYTE *)*(v462 - 2);
          v466 = v906 + 440 * v191;
          v467 = *(_QWORD *)(v466 + 184);
          v468 = *(_QWORD *)(v466 + 192);
          v469 = (const void **)(v466 + 184);
          v470 = (v468 - v467) >> 3;
          if (v470 >= v904)
            v471 = v904;
          else
            v471 = v470;
          if (v471 <= (v461 - (uint64_t)v464) >> 3)
          {
            v480 = (char *)*(v462 - 2);
          }
          else
          {
            if (v471 >> 61)
              goto LABEL_1019;
            v472 = &__sa[440 * v191];
            v475 = (_BYTE *)*((_QWORD *)v472 + 24);
            v474 = (char **)(v472 + 192);
            v473 = v475;
            v476 = 8 * v471;
            v477 = (char *)operator new(8 * v471);
            v478 = v475 - v464;
            v479 = &v477[(v475 - v464) & 0xFFFFFFFFFFFFFFF8];
            v480 = v479;
            if (v475 != v464)
            {
              if ((unint64_t)(v478 - 8) < 0x58)
              {
                v480 = &v477[(v473 - v464) & 0xFFFFFFFFFFFFFFF8];
                goto LABEL_544;
              }
              v480 = &v477[(v473 - v464) & 0xFFFFFFFFFFFFFFF8];
              if ((unint64_t)(&v473[-(v478 & 0xFFFFFFFFFFFFFFF8)] - v477) < 0x20)
                goto LABEL_1052;
              v481 = v478 >> 3;
              v482 = ((unint64_t)(v478 - 8) >> 3) + 1;
              v483 = 8 * (v482 & 0x3FFFFFFFFFFFFFFCLL);
              v484 = &v473[-v483];
              v480 = &v479[-v483];
              v485 = &v477[8 * v481 - 16];
              v486 = (__int128 *)(v473 - 16);
              v487 = v482 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v488 = *v486;
                *((_OWORD *)v485 - 1) = *(v486 - 1);
                *(_OWORD *)v485 = v488;
                v485 -= 32;
                v486 -= 2;
                v487 -= 4;
              }
              while (v487);
              v473 = v484;
              if (v482 != (v482 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1052:
                do
                {
LABEL_544:
                  v489 = *((_QWORD *)v473 - 1);
                  v473 -= 8;
                  *((_QWORD *)v480 - 1) = v489;
                  v480 -= 8;
                }
                while (v473 != v464);
              }
            }
            v461 = (uint64_t)&v477[v476];
            *v465 = (uint64_t)v480;
            *v474 = v479;
            *v462 = (uint64_t)&v477[v476];
            if (v464)
            {
              operator delete(v464);
              v461 = *v462;
              v480 = (char *)*v465;
            }
          }
          v490 = (char *)*v469;
          v491 = v471 << 32;
          if ((int)v471 <= (unint64_t)((v461 - (uint64_t)v480) >> 3))
          {
            v497 = &__sa[440 * v191];
            v499 = (char *)*((_QWORD *)v497 + 24);
            v495 = (void **)(v497 + 192);
            v498 = v499;
            v500 = v499 - v480;
            v501 = (v499 - v480) >> 3;
            if (v501 >= (int)v471)
            {
              if (!v491)
                goto LABEL_567;
              v496 = 8 * (int)v471;
LABEL_565:
              v503 = v480;
              v502 = v490;
            }
            else
            {
              if (v498 != v480)
              {
                memmove(v480, v490, v500);
                v480 = (char *)*v495;
              }
              v502 = &v490[8 * v501];
              v496 = 8 * (int)v471 - 8 * v501;
              if (v501 == (int)v471)
                goto LABEL_568;
              v503 = v480;
            }
            memmove(v503, v502, v496);
            goto LABEL_568;
          }
          if (v480)
          {
            *(_QWORD *)&__sa[440 * v191 + 192] = v480;
            operator delete(v480);
            v461 = 0;
            *v465 = 0;
            *(v462 - 1) = 0;
            *v462 = 0;
          }
          if ((v491 & 0x8000000000000000) != 0)
            goto LABEL_1019;
          v492 = v461 >> 2;
          if (v461 >> 2 <= (unint64_t)(int)v471)
            v492 = (int)v471;
          if ((unint64_t)v461 >= 0x7FFFFFFFFFFFFFF8)
            v492 = 0x1FFFFFFFFFFFFFFFLL;
          if (v492 >> 61)
LABEL_1019:
            sub_20E867F44();
          v493 = 8 * v492;
          v480 = (char *)operator new(8 * v492);
          *v465 = (uint64_t)v480;
          v494 = &__sa[440 * v191];
          *((_QWORD *)v494 + 24) = v480;
          v495 = (void **)(v494 + 192);
          *v462 = (uint64_t)&v480[v493];
          if (v491)
          {
            v496 = (8 * v471) & 0x7FFFFFFFFLL;
            goto LABEL_565;
          }
LABEL_567:
          v496 = 0;
LABEL_568:
          *v495 = &v480[v496];
          v504 = &__sa[440 * v191];
          v507 = *((_QWORD *)v504 + 28);
          v506 = (uint64_t *)(v504 + 224);
          v505 = v507;
          v509 = v506 - 2;
          v508 = (_BYTE *)*(v506 - 2);
          v510 = v906 + 440 * v191;
          v511 = *(_QWORD *)(v510 + 208);
          v512 = *(_QWORD *)(v510 + 216);
          v513 = (const void **)(v510 + 208);
          v514 = (v512 - v511) >> 3;
          if (v514 >= v904)
            v515 = v904;
          else
            v515 = v514;
          if (v515 <= (v505 - (uint64_t)v508) >> 3)
          {
            v524 = (char *)*(v506 - 2);
          }
          else
          {
            if (v515 >> 61)
              goto LABEL_1019;
            v516 = &__sa[440 * v191];
            v519 = (_BYTE *)*((_QWORD *)v516 + 27);
            v518 = (char **)(v516 + 216);
            v517 = v519;
            v520 = 8 * v515;
            v521 = (char *)operator new(8 * v515);
            v522 = v519 - v508;
            v523 = &v521[(v519 - v508) & 0xFFFFFFFFFFFFFFF8];
            v524 = v523;
            if (v519 != v508)
            {
              if ((unint64_t)(v522 - 8) < 0x58)
              {
                v524 = &v521[(v517 - v508) & 0xFFFFFFFFFFFFFFF8];
                goto LABEL_581;
              }
              v524 = &v521[(v517 - v508) & 0xFFFFFFFFFFFFFFF8];
              if ((unint64_t)(v517 - &v521[v522 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
                goto LABEL_1053;
              v525 = v522 >> 3;
              v526 = ((unint64_t)(v522 - 8) >> 3) + 1;
              v527 = 8 * (v526 & 0x3FFFFFFFFFFFFFFCLL);
              v528 = &v517[-v527];
              v524 = &v523[-v527];
              v529 = &v521[8 * v525 - 16];
              v530 = (__int128 *)(v517 - 16);
              v531 = v526 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v532 = *v530;
                *((_OWORD *)v529 - 1) = *(v530 - 1);
                *(_OWORD *)v529 = v532;
                v529 -= 32;
                v530 -= 2;
                v531 -= 4;
              }
              while (v531);
              v517 = v528;
              if (v526 != (v526 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_1053:
                do
                {
LABEL_581:
                  v533 = *((_QWORD *)v517 - 1);
                  v517 -= 8;
                  *((_QWORD *)v524 - 1) = v533;
                  v524 -= 8;
                }
                while (v517 != v508);
              }
            }
            v505 = (uint64_t)&v521[v520];
            *v509 = (uint64_t)v524;
            *v518 = v523;
            *v506 = (uint64_t)&v521[v520];
            if (v508)
            {
              operator delete(v508);
              v505 = *v506;
              v524 = (char *)*v509;
            }
          }
          v534 = (char *)*v513;
          v535 = v515 << 32;
          v536 = (int)v515;
          if ((int)v515 > (unint64_t)((v505 - (uint64_t)v524) >> 3))
          {
            if (v524)
            {
              *(_QWORD *)&__sa[440 * v191 + 216] = v524;
              operator delete(v524);
              v505 = 0;
              *v509 = 0;
              *(v506 - 1) = 0;
              *v506 = 0;
            }
            v537 = v902;
            if (v535 < 0)
              goto LABEL_1019;
            v538 = v505 >> 2;
            if (v505 >> 2 <= v536)
              v538 = v536;
            if ((unint64_t)v505 >= 0x7FFFFFFFFFFFFFF8)
              v538 = 0x1FFFFFFFFFFFFFFFLL;
            if (v538 >> 61)
              goto LABEL_1019;
            v539 = 8 * v538;
            v540 = (char *)operator new(8 * v538);
            v524 = v540;
            *v509 = (uint64_t)v540;
            v541 = &__sa[440 * v191];
            *((_QWORD *)v541 + 27) = v540;
            v542 = (char **)(v541 + 216);
            *v506 = (uint64_t)&v540[v539];
            if (v535)
            {
              v543 = (unint64_t)v535 >> 29;
              memmove(v540, v534, (unint64_t)v535 >> 29);
            }
            else
            {
              v543 = 0;
            }
LABEL_606:
            *v542 = &v524[v543];
            v551 = *v903 + 440 * v191;
            v907 = *v903;
            __sb = *v537;
            v552 = (uint64_t)&(*v537)[440 * v191];
            v555 = *(char **)(v552 + 232);
            v553 = (char **)(v552 + 232);
            v554 = v555;
            v557 = *(_QWORD *)(v551 + 232);
            v556 = *(_QWORD *)(v551 + 240);
            v558 = (_OWORD **)(v551 + 232);
            v559 = v556 - v557;
            v560 = (v556 - v557) >> 5;
            v561 = (uint64_t)v553[2];
            if (v560 <= (v561 - (uint64_t)v555) >> 5)
            {
              v565 = v554;
            }
            else
            {
              if (v559 < 0)
                goto LABEL_1027;
              v562 = v553[1];
              v563 = (char *)operator new(v559);
              v564 = &v563[v562 - v554];
              v565 = v564;
              if (v562 != v554)
              {
                v566 = &v563[v562 - v554];
                do
                {
                  v565 = v566 - 32;
                  *((_OWORD *)v566 - 2) = *((_OWORD *)v562 - 2);
                  *((_OWORD *)v566 - 1) = *((_OWORD *)v562 - 1);
                  v562 -= 32;
                  v566 -= 32;
                }
                while (v562 != v554);
              }
              v561 = (uint64_t)&v563[32 * v560];
              *v553 = v565;
              v553[1] = v564;
              v553[2] = (char *)v561;
              if (v554)
              {
                operator delete(v554);
                v565 = *v553;
                v561 = (uint64_t)v553[2];
              }
            }
            v567 = *v558;
            v568 = v559 << 27;
            v569 = (int)(v559 >> 5);
            v570 = (uint64_t)*v558 + (v568 >> 27);
            if (v569 <= (v561 - (uint64_t)v565) >> 5)
            {
              v578 = v553[1];
              v576 = v553 + 1;
              v577 = v578;
              v579 = (v578 - v565) >> 5;
              if (v579 >= v569)
              {
                v583 = v565;
                if (v568)
                {
                  v584 = v565;
                  do
                  {
                    *(_OWORD *)v584 = *v567;
                    *((_OWORD *)v584 + 1) = v567[1];
                    v583 += 32;
                    v567 += 2;
                    v584 += 32;
                  }
                  while (v567 != (_OWORD *)v570);
                }
                v575 = v583 - v565;
              }
              else
              {
                v580 = &v567[2 * v579];
                if (v577 != v565)
                {
                  do
                  {
                    *(_OWORD *)v565 = *v567;
                    *((_OWORD *)v565 + 1) = v567[1];
                    v567 += 2;
                    v565 += 32;
                  }
                  while (v567 != v580);
                  v565 = *v576;
                }
                v581 = v565;
                if (v579 != v569)
                {
                  v581 = v565;
                  v582 = v565;
                  do
                  {
                    *(_OWORD *)v582 = *v580;
                    *((_OWORD *)v582 + 1) = v580[1];
                    v581 += 32;
                    v580 += 2;
                    v582 += 32;
                  }
                  while (v580 != (_OWORD *)v570);
                }
                v575 = v581 - v565;
              }
            }
            else
            {
              if (v565)
              {
                v553[1] = v565;
                operator delete(v565);
                v561 = 0;
                *v553 = 0;
                v553[1] = 0;
                v553[2] = 0;
              }
              if (v568 < 0)
                goto LABEL_1027;
              v571 = v561 >> 4;
              if (v561 >> 4 <= v569)
                v571 = v569;
              v230 = (unint64_t)v561 >= 0x7FFFFFFFFFFFFFE0;
              v572 = 0x7FFFFFFFFFFFFFFLL;
              if (!v230)
                v572 = v571;
              if (v572 >> 59)
LABEL_1027:
                sub_20E867F44();
              v573 = 32 * v572;
              v565 = (char *)operator new(32 * v572);
              *v553 = v565;
              v553[1] = v565;
              v553[2] = &v565[v573];
              v574 = v565;
              if (v568)
              {
                v574 = v565;
                do
                {
                  *(_OWORD *)v574 = *v567;
                  *((_OWORD *)v574 + 1) = v567[1];
                  v574 += 32;
                  v567 += 2;
                }
                while (v567 != (_OWORD *)v570);
              }
              v575 = v574 - v565;
              v576 = v553 + 1;
            }
            *v576 = &v565[v575];
            v585 = &__sb[440 * v191];
            v586 = (char **)(v585 + 256);
            v587 = v907 + 440 * v191;
            v588 = *(_QWORD *)(v587 + 264) - *(_QWORD *)(v587 + 256);
            v589 = (uint64_t *)(v585 + 272);
            v590 = *((_QWORD *)v585 + 34);
            v591 = (_BYTE *)*((_QWORD *)v585 + 32);
            if (v588 >> 5 <= (unint64_t)((v590 - (uint64_t)v591) >> 5))
            {
              v596 = (char *)*((_QWORD *)v585 + 32);
            }
            else
            {
              if (v588 < 0)
                goto LABEL_1026;
              v592 = &__sb[440 * v191];
              v593 = (_BYTE *)*((_QWORD *)v592 + 33);
              v594 = (char *)operator new(*(_QWORD *)(v587 + 264) - *(_QWORD *)(v587 + 256));
              v595 = &v594[v593 - v591];
              v596 = v595;
              if (v593 != v591)
              {
                v597 = &v594[v593 - v591];
                do
                {
                  v596 = v597 - 32;
                  *((_OWORD *)v597 - 2) = *((_OWORD *)v593 - 2);
                  *((_OWORD *)v597 - 1) = *((_OWORD *)v593 - 1);
                  v593 -= 32;
                  v597 -= 32;
                }
                while (v593 != v591);
              }
              *v586 = v596;
              v590 = (uint64_t)&v594[32 * (v588 >> 5)];
              *((_QWORD *)v592 + 33) = v595;
              *v589 = v590;
              if (v591)
              {
                operator delete(v591);
                v596 = *v586;
                v590 = *v589;
              }
            }
            v598 = *(_OWORD **)(v587 + 256);
            v599 = v588 << 27;
            v600 = (int)(v588 >> 5);
            v601 = (_OWORD *)((char *)v598 + (v599 >> 27));
            if (v600 <= (v590 - (uint64_t)v596) >> 5)
            {
              v607 = &__sb[440 * v191 + 264];
              v608 = (uint64_t)(*(_QWORD *)v607 - (_QWORD)v596) >> 5;
              if (v608 >= v600)
              {
                v606 = v596;
                if (v599)
                {
                  v613 = v596;
                  do
                  {
                    *(_OWORD *)v613 = *v598;
                    *((_OWORD *)v613 + 1) = v598[1];
                    v606 += 32;
                    v598 += 2;
                    v613 += 32;
                  }
                  while (v598 != v601);
                }
                goto LABEL_671;
              }
              v609 = &v598[2 * v608];
              if (*(char **)v607 != v596)
              {
                do
                {
                  *(_OWORD *)v596 = *v598;
                  *((_OWORD *)v596 + 1) = v598[1];
                  v598 += 2;
                  v596 += 32;
                }
                while (v598 != v609);
                v596 = *(char **)v607;
              }
              v610 = v596;
              if (v608 != v600)
              {
                v610 = v596;
                v611 = v596;
                do
                {
                  *(_OWORD *)v611 = *v609;
                  *((_OWORD *)v611 + 1) = v609[1];
                  v610 += 32;
                  v609 += 2;
                  v611 += 32;
                }
                while (v609 != v601);
              }
              v612 = v610 - v596;
            }
            else
            {
              if (v596)
              {
                *(_QWORD *)&__sb[440 * v191 + 264] = v596;
                operator delete(v596);
                v590 = 0;
                *v586 = 0;
                v586[1] = 0;
                v586[2] = 0;
              }
              if (v599 < 0)
                goto LABEL_1026;
              v602 = v590 >> 4;
              if (v590 >> 4 <= v600)
                v602 = v600;
              v230 = (unint64_t)v590 >= 0x7FFFFFFFFFFFFFE0;
              v603 = 0x7FFFFFFFFFFFFFFLL;
              if (!v230)
                v603 = v602;
              if (v603 >> 59)
LABEL_1026:
                sub_20E867F44();
              v604 = 32 * v603;
              v596 = (char *)operator new(32 * v603);
              *v586 = v596;
              v605 = &__sb[440 * v191];
              *((_QWORD *)v605 + 33) = v596;
              *v589 = (uint64_t)&v596[v604];
              v606 = v596;
              if (v599)
              {
                v606 = v596;
                do
                {
                  *(_OWORD *)v606 = *v598;
                  *((_OWORD *)v606 + 1) = v598[1];
                  v606 += 32;
                  v598 += 2;
                }
                while (v598 != v601);
              }
              v607 = v605 + 264;
LABEL_671:
              v612 = v606 - v596;
            }
            *(_QWORD *)v607 = &v596[v612];
            v614 = &__sb[440 * v191];
            v615 = (char **)(v614 + 280);
            v616 = v907 + 440 * v191;
            v617 = *(_QWORD *)(v616 + 288) - *(_QWORD *)(v616 + 280);
            v618 = (uint64_t *)(v614 + 296);
            v619 = *((_QWORD *)v614 + 37);
            v620 = (_BYTE *)*((_QWORD *)v614 + 35);
            if (v617 >> 3 <= (unint64_t)((v619 - (uint64_t)v620) >> 3))
            {
              v626 = (char *)*((_QWORD *)v614 + 35);
            }
            else
            {
              if (v617 < 0)
                goto LABEL_1021;
              v621 = &__sb[440 * v191];
              v622 = (_BYTE *)*((_QWORD *)v621 + 36);
              v623 = (char *)operator new(*(_QWORD *)(v616 + 288) - *(_QWORD *)(v616 + 280));
              v624 = v622 - v620;
              v625 = &v623[(v622 - v620) & 0xFFFFFFFFFFFFFFF8];
              v626 = v625;
              if (v622 != v620)
              {
                if ((unint64_t)(v624 - 8) < 0x58)
                {
                  v626 = &v623[(v622 - v620) & 0xFFFFFFFFFFFFFFF8];
                  goto LABEL_682;
                }
                v626 = &v623[(v622 - v620) & 0xFFFFFFFFFFFFFFF8];
                if ((unint64_t)(v622 - &v623[v624 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
                  goto LABEL_1054;
                v627 = v624 >> 3;
                v628 = ((unint64_t)(v624 - 8) >> 3) + 1;
                v629 = 8 * (v628 & 0x3FFFFFFFFFFFFFFCLL);
                v630 = &v622[-v629];
                v626 = &v625[-v629];
                v631 = &v623[8 * v627 - 16];
                v632 = (__int128 *)(v622 - 16);
                v633 = v628 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v634 = *v632;
                  *((_OWORD *)v631 - 1) = *(v632 - 1);
                  *(_OWORD *)v631 = v634;
                  v631 -= 32;
                  v632 -= 2;
                  v633 -= 4;
                }
                while (v633);
                v622 = v630;
                if (v628 != (v628 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1054:
                  do
                  {
LABEL_682:
                    v635 = *((_QWORD *)v622 - 1);
                    v622 -= 8;
                    *((_QWORD *)v626 - 1) = v635;
                    v626 -= 8;
                  }
                  while (v622 != v620);
                }
              }
              *v615 = v626;
              v619 = (uint64_t)&v623[8 * (v617 >> 3)];
              *((_QWORD *)v621 + 36) = v625;
              *v618 = v619;
              if (v620)
              {
                operator delete(v620);
                v619 = *v618;
                v626 = *v615;
              }
            }
            v636 = *(char **)(v616 + 280);
            v637 = v617 << 29;
            v638 = (int)(v617 >> 3);
            if (v638 <= (v619 - (uint64_t)v626) >> 3)
            {
              v641 = &__sb[440 * v191 + 288];
              v643 = *(_QWORD *)v641 - (_QWORD)v626;
              v644 = v643 >> 3;
              if (v643 >> 3 >= v638)
              {
                if (!v637)
                  goto LABEL_705;
                v642 = v637 >> 29;
LABEL_703:
                v646 = v626;
                v645 = v636;
              }
              else
              {
                if (*(char **)v641 != v626)
                {
                  memmove(v626, *(const void **)(v616 + 280), v643);
                  v626 = *(char **)v641;
                }
                v645 = &v636[8 * v644];
                v642 = (v637 >> 29) - 8 * v644;
                if (v644 == v638)
                  goto LABEL_706;
                v646 = v626;
              }
              memmove(v646, v645, v642);
              goto LABEL_706;
            }
            if (v626)
            {
              *(_QWORD *)&__sb[440 * v191 + 288] = v626;
              operator delete(v626);
              v619 = 0;
              *v615 = 0;
              v615[1] = 0;
              v615[2] = 0;
            }
            if (v637 < 0)
              goto LABEL_1021;
            v639 = v619 >> 2;
            if (v619 >> 2 <= v638)
              v639 = (int)(v617 >> 3);
            if ((unint64_t)v619 >= 0x7FFFFFFFFFFFFFF8)
              v639 = 0x1FFFFFFFFFFFFFFFLL;
            if (v639 >> 61)
              goto LABEL_1021;
            v640 = 8 * v639;
            v626 = (char *)operator new(8 * v639);
            *v615 = v626;
            v641 = &__sb[440 * v191 + 288];
            *(_QWORD *)v641 = v626;
            *v618 = (uint64_t)&v626[v640];
            if (v637)
            {
              v642 = v617 & 0x7FFFFFFFFLL;
              goto LABEL_703;
            }
LABEL_705:
            v642 = 0;
LABEL_706:
            *(_QWORD *)v641 = &v626[v642];
            v647 = &__sb[440 * v191];
            v648 = v647 + 304;
            v649 = v907 + 440 * v191;
            if (*(_BYTE *)(v649 + 328))
            {
              v650 = (char **)(v649 + 304);
              if (v647[328])
              {
                v651 = *((_QWORD *)v647 + 40);
                v652 = *(char **)v648;
              }
              else
              {
                v652 = 0;
                v651 = 0;
                *(_QWORD *)v648 = 0;
                *((_QWORD *)v647 + 39) = 0;
                *((_QWORD *)v647 + 40) = 0;
                v647[328] = 1;
                if (!*((_BYTE *)v650 + 24))
                  goto LABEL_1029;
              }
              v654 = v650[1] - *v650;
              if (v654 >> 3 <= (unint64_t)((v651 - (uint64_t)v652) >> 3))
              {
                v659 = v652;
              }
              else
              {
                if (v654 < 0)
                  goto LABEL_1023;
                v655 = (_BYTE *)*((_QWORD *)v647 + 39);
                v656 = (char *)operator new(v650[1] - *v650);
                v657 = v655 - v652;
                v658 = &v656[(v655 - v652) & 0xFFFFFFFFFFFFFFF8];
                v659 = v658;
                if (v655 != v652)
                {
                  if ((unint64_t)(v657 - 8) < 0x58)
                  {
                    v659 = &v656[(v655 - v652) & 0xFFFFFFFFFFFFFFF8];
                    goto LABEL_724;
                  }
                  v659 = &v656[(v655 - v652) & 0xFFFFFFFFFFFFFFF8];
                  if ((unint64_t)(v655 - &v656[v657 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
                    goto LABEL_1055;
                  v660 = v657 >> 3;
                  v661 = ((unint64_t)(v657 - 8) >> 3) + 1;
                  v662 = 8 * (v661 & 0x3FFFFFFFFFFFFFFCLL);
                  v663 = &v655[-v662];
                  v659 = &v658[-v662];
                  v664 = &v656[8 * v660 - 16];
                  v665 = (__int128 *)(v655 - 16);
                  v666 = v661 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v667 = *v665;
                    *((_OWORD *)v664 - 1) = *(v665 - 1);
                    *(_OWORD *)v664 = v667;
                    v664 -= 32;
                    v665 -= 2;
                    v666 -= 4;
                  }
                  while (v666);
                  v655 = v663;
                  if (v661 != (v661 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_1055:
                    do
                    {
LABEL_724:
                      v668 = *((_QWORD *)v655 - 1);
                      v655 -= 8;
                      *((_QWORD *)v659 - 1) = v668;
                      v659 -= 8;
                    }
                    while (v655 != v652);
                  }
                }
                v651 = (uint64_t)&v656[8 * (v654 >> 3)];
                *(_QWORD *)v648 = v659;
                *((_QWORD *)v648 + 1) = v658;
                *((_QWORD *)v648 + 2) = v651;
                if (v652)
                {
                  operator delete(v652);
                  v651 = *((_QWORD *)v648 + 2);
                  v659 = *(char **)v648;
                }
              }
              v669 = *v650;
              v670 = v654 << 29;
              v671 = (int)(v654 >> 3);
              if (v671 <= (v651 - (uint64_t)v659) >> 3)
              {
                v678 = (char *)*((_QWORD *)v648 + 1);
                v677 = (void **)(v648 + 8);
                v676 = v678;
                v679 = v678 - v659;
                v680 = (v678 - v659) >> 3;
                if (v680 >= v671)
                {
                  if (!v670)
                  {
                    v675 = 0;
                    goto LABEL_748;
                  }
                  v675 = v670 >> 29;
                  v682 = v659;
                  v681 = v669;
                }
                else
                {
                  if (v676 != v659)
                  {
                    memmove(v659, v669, v679);
                    v659 = (char *)*v677;
                  }
                  v681 = &v669[8 * v680];
                  v675 = (v670 >> 29) - 8 * v680;
                  if (v680 == v671)
                    goto LABEL_748;
                  v682 = v659;
                }
                memmove(v682, v681, v675);
                goto LABEL_748;
              }
              if (v659)
              {
                *((_QWORD *)v648 + 1) = v659;
                operator delete(v659);
                v651 = 0;
                *(_QWORD *)v648 = 0;
                *((_QWORD *)v648 + 1) = 0;
                *((_QWORD *)v648 + 2) = 0;
              }
              if (v670 < 0)
                goto LABEL_1023;
              v672 = v651 >> 2;
              if (v651 >> 2 <= v671)
                v672 = (int)(v654 >> 3);
              if ((unint64_t)v651 >= 0x7FFFFFFFFFFFFFF8)
                v672 = 0x1FFFFFFFFFFFFFFFLL;
              if (v672 >> 61)
                goto LABEL_1023;
              v673 = 8 * v672;
              v674 = (char *)operator new(8 * v672);
              v659 = v674;
              *(_QWORD *)v648 = v674;
              *((_QWORD *)v648 + 1) = v674;
              *((_QWORD *)v648 + 2) = &v674[v673];
              if (v670)
              {
                v675 = v654 & 0x7FFFFFFFFLL;
                memmove(v674, v669, v675);
              }
              else
              {
                v675 = 0;
              }
              v677 = (void **)(v648 + 8);
LABEL_748:
              *v677 = &v659[v675];
            }
            else if (v647[328])
            {
              v653 = *(char **)v648;
              if (*(_QWORD *)v648)
              {
                *((_QWORD *)v647 + 39) = v653;
                operator delete(v653);
              }
              v648[24] = 0;
            }
            v683 = &__sb[440 * v191];
            v684 = (char **)(v683 + 336);
            v685 = v907 + 440 * v191;
            v686 = *(_QWORD *)(v685 + 344) - *(_QWORD *)(v685 + 336);
            v687 = (uint64_t *)(v683 + 352);
            v688 = *((_QWORD *)v683 + 44);
            v689 = (_BYTE *)*((_QWORD *)v683 + 42);
            if (v686 >> 2 <= (unint64_t)((v688 - (uint64_t)v689) >> 2))
            {
              v695 = (char *)*((_QWORD *)v683 + 42);
            }
            else
            {
              if (v686 < 0)
                goto LABEL_1020;
              v690 = &__sb[440 * v191];
              v691 = (_BYTE *)*((_QWORD *)v690 + 43);
              v692 = (char *)operator new(*(_QWORD *)(v685 + 344) - *(_QWORD *)(v685 + 336));
              v693 = v691 - v689;
              v694 = &v692[(v691 - v689) & 0xFFFFFFFFFFFFFFFCLL];
              v695 = v694;
              if (v691 != v689)
              {
                if ((unint64_t)(v693 - 4) < 0x2C)
                {
                  v695 = &v692[(v691 - v689) & 0xFFFFFFFFFFFFFFFCLL];
                  goto LABEL_759;
                }
                v695 = &v692[(v691 - v689) & 0xFFFFFFFFFFFFFFFCLL];
                if ((unint64_t)(v691 - &v692[v693 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
                  goto LABEL_1056;
                v696 = v693 >> 2;
                v697 = ((unint64_t)(v693 - 4) >> 2) + 1;
                v698 = 4 * (v697 & 0x7FFFFFFFFFFFFFF8);
                v699 = &v691[-v698];
                v695 = &v694[-v698];
                v700 = &v692[4 * v696 - 16];
                v701 = (__int128 *)(v691 - 16);
                v702 = v697 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v703 = *v701;
                  *((_OWORD *)v700 - 1) = *(v701 - 1);
                  *(_OWORD *)v700 = v703;
                  v700 -= 32;
                  v701 -= 2;
                  v702 -= 8;
                }
                while (v702);
                v691 = v699;
                if (v697 != (v697 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_1056:
                  do
                  {
LABEL_759:
                    v704 = *((_DWORD *)v691 - 1);
                    v691 -= 4;
                    *((_DWORD *)v695 - 1) = v704;
                    v695 -= 4;
                  }
                  while (v691 != v689);
                }
              }
              *v684 = v695;
              v688 = (uint64_t)&v692[4 * (v686 >> 2)];
              *((_QWORD *)v690 + 43) = v694;
              *v687 = v688;
              if (v689)
              {
                operator delete(v689);
                v688 = *v687;
                v695 = *v684;
              }
            }
            v705 = *(char **)(v685 + 336);
            v706 = v686 << 30;
            v707 = (int)(v686 >> 2);
            if (v707 <= (v688 - (uint64_t)v695) >> 2)
            {
              v710 = &__sb[440 * v191 + 344];
              v712 = *(_QWORD *)v710 - (_QWORD)v695;
              v713 = v712 >> 2;
              if (v712 >> 2 >= v707)
              {
                if (!v706)
                  goto LABEL_782;
                v711 = v706 >> 30;
LABEL_780:
                v715 = v695;
                v714 = v705;
              }
              else
              {
                if (*(char **)v710 != v695)
                {
                  memmove(v695, *(const void **)(v685 + 336), v712);
                  v695 = *(char **)v710;
                }
                v714 = &v705[4 * v713];
                v711 = (v706 >> 30) - 4 * v713;
                if (v713 == v707)
                  goto LABEL_783;
                v715 = v695;
              }
              memmove(v715, v714, v711);
              goto LABEL_783;
            }
            if (v695)
            {
              *(_QWORD *)&__sb[440 * v191 + 344] = v695;
              operator delete(v695);
              v688 = 0;
              *v684 = 0;
              v684[1] = 0;
              v684[2] = 0;
            }
            if (v706 < 0)
              goto LABEL_1020;
            v708 = v688 >> 1;
            if (v688 >> 1 <= v707)
              v708 = (int)(v686 >> 2);
            if ((unint64_t)v688 >= 0x7FFFFFFFFFFFFFFCLL)
              v708 = 0x3FFFFFFFFFFFFFFFLL;
            if (v708 >> 62)
              goto LABEL_1020;
            v709 = 4 * v708;
            v695 = (char *)operator new(4 * v708);
            *v684 = v695;
            v710 = &__sb[440 * v191 + 344];
            *(_QWORD *)v710 = v695;
            *v687 = (uint64_t)&v695[v709];
            if (v706)
            {
              v711 = v686 & 0x3FFFFFFFFLL;
              goto LABEL_780;
            }
LABEL_782:
            v711 = 0;
LABEL_783:
            *(_QWORD *)v710 = &v695[v711];
            v716 = &__sb[440 * v191];
            v717 = v716 + 360;
            v718 = v907 + 440 * v191;
            if (*(_BYTE *)(v718 + 384))
            {
              v719 = (char **)(v718 + 360);
              if (v716[384])
              {
                v720 = *((_QWORD *)v716 + 47);
                v721 = *(char **)v717;
              }
              else
              {
                v721 = 0;
                v720 = 0;
                *(_QWORD *)v717 = 0;
                *((_QWORD *)v716 + 46) = 0;
                *((_QWORD *)v716 + 47) = 0;
                v716[384] = 1;
                if (!*((_BYTE *)v719 + 24))
LABEL_1029:
                  sub_20E866B34();
              }
              v723 = v719[1] - *v719;
              if (v723 >> 2 <= (unint64_t)((v720 - (uint64_t)v721) >> 2))
              {
                v728 = v721;
              }
              else
              {
                if (v723 < 0)
                  goto LABEL_1022;
                v724 = (_BYTE *)*((_QWORD *)v716 + 46);
                v725 = (char *)operator new(v719[1] - *v719);
                v726 = v724 - v721;
                v727 = &v725[(v724 - v721) & 0xFFFFFFFFFFFFFFFCLL];
                v728 = v727;
                if (v724 != v721)
                {
                  if ((unint64_t)(v726 - 4) < 0x2C)
                  {
                    v728 = &v725[(v724 - v721) & 0xFFFFFFFFFFFFFFFCLL];
                    goto LABEL_801;
                  }
                  v728 = &v725[(v724 - v721) & 0xFFFFFFFFFFFFFFFCLL];
                  if ((unint64_t)(v724 - &v725[v726 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
                    goto LABEL_1057;
                  v729 = v726 >> 2;
                  v730 = ((unint64_t)(v726 - 4) >> 2) + 1;
                  v731 = 4 * (v730 & 0x7FFFFFFFFFFFFFF8);
                  v732 = &v724[-v731];
                  v728 = &v727[-v731];
                  v733 = &v725[4 * v729 - 16];
                  v734 = (__int128 *)(v724 - 16);
                  v735 = v730 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v736 = *v734;
                    *((_OWORD *)v733 - 1) = *(v734 - 1);
                    *(_OWORD *)v733 = v736;
                    v733 -= 32;
                    v734 -= 2;
                    v735 -= 8;
                  }
                  while (v735);
                  v724 = v732;
                  if (v730 != (v730 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_1057:
                    do
                    {
LABEL_801:
                      v737 = *((_DWORD *)v724 - 1);
                      v724 -= 4;
                      *((_DWORD *)v728 - 1) = v737;
                      v728 -= 4;
                    }
                    while (v724 != v721);
                  }
                }
                v720 = (uint64_t)&v725[4 * (v723 >> 2)];
                *(_QWORD *)v717 = v728;
                *((_QWORD *)v717 + 1) = v727;
                *((_QWORD *)v717 + 2) = v720;
                if (v721)
                {
                  operator delete(v721);
                  v720 = *((_QWORD *)v717 + 2);
                  v728 = *(char **)v717;
                }
              }
              v738 = *v719;
              v739 = v723 << 30;
              v740 = (int)(v723 >> 2);
              if (v740 <= (v720 - (uint64_t)v728) >> 2)
              {
                v747 = (char *)*((_QWORD *)v717 + 1);
                v746 = (void **)(v717 + 8);
                v745 = v747;
                v748 = v747 - v728;
                v749 = (v747 - v728) >> 2;
                if (v749 >= v740)
                {
                  if (!v739)
                  {
                    v744 = 0;
                    goto LABEL_825;
                  }
                  v744 = v739 >> 30;
                  v751 = v728;
                  v750 = v738;
                }
                else
                {
                  if (v745 != v728)
                  {
                    memmove(v728, v738, v748);
                    v728 = (char *)*v746;
                  }
                  v750 = &v738[4 * v749];
                  v744 = (v739 >> 30) - 4 * v749;
                  if (v749 == v740)
                    goto LABEL_825;
                  v751 = v728;
                }
                memmove(v751, v750, v744);
                goto LABEL_825;
              }
              if (v728)
              {
                *((_QWORD *)v717 + 1) = v728;
                operator delete(v728);
                v720 = 0;
                *(_QWORD *)v717 = 0;
                *((_QWORD *)v717 + 1) = 0;
                *((_QWORD *)v717 + 2) = 0;
              }
              if (v739 < 0)
                goto LABEL_1022;
              v741 = v720 >> 1;
              if (v720 >> 1 <= v740)
                v741 = (int)(v723 >> 2);
              if ((unint64_t)v720 >= 0x7FFFFFFFFFFFFFFCLL)
                v741 = 0x3FFFFFFFFFFFFFFFLL;
              if (v741 >> 62)
                goto LABEL_1022;
              v742 = 4 * v741;
              v743 = (char *)operator new(4 * v741);
              v728 = v743;
              *(_QWORD *)v717 = v743;
              *((_QWORD *)v717 + 1) = v743;
              *((_QWORD *)v717 + 2) = &v743[v742];
              if (v739)
              {
                v744 = v723 & 0x3FFFFFFFFLL;
                memmove(v743, v738, v744);
              }
              else
              {
                v744 = 0;
              }
              v746 = (void **)(v717 + 8);
LABEL_825:
              *v746 = &v728[v744];
            }
            else if (v716[384])
            {
              v722 = *(char **)v717;
              if (*(_QWORD *)v717)
              {
                *((_QWORD *)v716 + 46) = v722;
                operator delete(v722);
              }
              v717[24] = 0;
            }
            v752 = &__sb[440 * v191];
            v753 = (char **)(v752 + 392);
            v754 = v907 + 440 * v191;
            v755 = *(_QWORD *)(v754 + 400) - *(_QWORD *)(v754 + 392);
            v756 = (uint64_t *)(v752 + 408);
            v757 = *((_QWORD *)v752 + 51);
            v758 = (_BYTE *)*((_QWORD *)v752 + 49);
            if (v755 >> 3 <= (unint64_t)((v757 - (uint64_t)v758) >> 3))
            {
              v764 = (char *)*((_QWORD *)v752 + 49);
            }
            else
            {
              if (v755 < 0)
                goto LABEL_1019;
              v759 = &__sb[440 * v191];
              v760 = (_BYTE *)*((_QWORD *)v759 + 50);
              v761 = (char *)operator new(*(_QWORD *)(v754 + 400) - *(_QWORD *)(v754 + 392));
              v762 = v760 - v758;
              v763 = &v761[(v760 - v758) & 0xFFFFFFFFFFFFFFF8];
              v764 = v763;
              if (v760 != v758)
              {
                if ((unint64_t)(v762 - 8) < 0x58)
                {
                  v764 = &v761[(v760 - v758) & 0xFFFFFFFFFFFFFFF8];
                  goto LABEL_836;
                }
                v764 = &v761[(v760 - v758) & 0xFFFFFFFFFFFFFFF8];
                if ((unint64_t)(v760 - &v761[v762 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
                  goto LABEL_1058;
                v765 = v762 >> 3;
                v766 = ((unint64_t)(v762 - 8) >> 3) + 1;
                v767 = 8 * (v766 & 0x3FFFFFFFFFFFFFFCLL);
                v768 = &v760[-v767];
                v764 = &v763[-v767];
                v769 = &v761[8 * v765 - 16];
                v770 = (__int128 *)(v760 - 16);
                v771 = v766 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v772 = *v770;
                  *((_OWORD *)v769 - 1) = *(v770 - 1);
                  *(_OWORD *)v769 = v772;
                  v769 -= 32;
                  v770 -= 2;
                  v771 -= 4;
                }
                while (v771);
                v760 = v768;
                if (v766 != (v766 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1058:
                  do
                  {
LABEL_836:
                    v773 = *((_QWORD *)v760 - 1);
                    v760 -= 8;
                    *((_QWORD *)v764 - 1) = v773;
                    v764 -= 8;
                  }
                  while (v760 != v758);
                }
              }
              *v753 = v764;
              v757 = (uint64_t)&v761[8 * (v755 >> 3)];
              *((_QWORD *)v759 + 50) = v763;
              *v756 = v757;
              if (v758)
              {
                operator delete(v758);
                v757 = *v756;
                v764 = *v753;
              }
            }
            v774 = *(char **)(v754 + 392);
            v775 = v755 << 29;
            v776 = (int)(v755 >> 3);
            if (v776 <= (v757 - (uint64_t)v764) >> 3)
            {
              v779 = &__sb[440 * v191 + 400];
              v781 = *(_QWORD *)v779 - (_QWORD)v764;
              v782 = v781 >> 3;
              if (v781 >> 3 >= v776)
              {
                if (!v775)
                  goto LABEL_859;
                v780 = v775 >> 29;
LABEL_857:
                v784 = v764;
                v783 = v774;
              }
              else
              {
                if (*(char **)v779 != v764)
                {
                  memmove(v764, *(const void **)(v754 + 392), v781);
                  v764 = *(char **)v779;
                }
                v783 = &v774[8 * v782];
                v780 = (v775 >> 29) - 8 * v782;
                if (v782 == v776)
                  goto LABEL_860;
                v784 = v764;
              }
              memmove(v784, v783, v780);
              goto LABEL_860;
            }
            if (v764)
            {
              *(_QWORD *)&__sb[440 * v191 + 400] = v764;
              operator delete(v764);
              v757 = 0;
              *v753 = 0;
              v753[1] = 0;
              v753[2] = 0;
            }
            if (v775 < 0)
              goto LABEL_1019;
            v777 = v757 >> 2;
            if (v757 >> 2 <= v776)
              v777 = (int)(v755 >> 3);
            if ((unint64_t)v757 >= 0x7FFFFFFFFFFFFFF8)
              v777 = 0x1FFFFFFFFFFFFFFFLL;
            if (v777 >> 61)
              goto LABEL_1019;
            v778 = 8 * v777;
            v764 = (char *)operator new(8 * v777);
            *v753 = v764;
            v779 = &__sb[440 * v191 + 400];
            *(_QWORD *)v779 = v764;
            *v756 = (uint64_t)&v764[v778];
            if (v775)
            {
              v780 = v755 & 0x7FFFFFFFFLL;
              goto LABEL_857;
            }
LABEL_859:
            v780 = 0;
LABEL_860:
            *(_QWORD *)v779 = &v764[v780];
            v785 = &__sb[440 * v191];
            v786 = (char **)(v785 + 416);
            v787 = v907 + 440 * v191;
            v788 = *(_QWORD *)(v787 + 424) - *(_QWORD *)(v787 + 416);
            v789 = (uint64_t *)(v785 + 432);
            v790 = *((_QWORD *)v785 + 54);
            v791 = (_BYTE *)*((_QWORD *)v785 + 52);
            if (v788 >> 3 <= (unint64_t)((v790 - (uint64_t)v791) >> 3))
            {
              v797 = (char *)*((_QWORD *)v785 + 52);
            }
            else
            {
              if (v788 < 0)
                goto LABEL_1019;
              v792 = &__sb[440 * v191];
              v793 = (_BYTE *)*((_QWORD *)v792 + 53);
              v794 = (char *)operator new(*(_QWORD *)(v787 + 424) - *(_QWORD *)(v787 + 416));
              v795 = v793 - v791;
              v796 = &v794[(v793 - v791) & 0xFFFFFFFFFFFFFFF8];
              v797 = v796;
              if (v793 != v791)
              {
                if ((unint64_t)(v795 - 8) < 0x58)
                {
                  v797 = &v794[(v793 - v791) & 0xFFFFFFFFFFFFFFF8];
                  goto LABEL_870;
                }
                v797 = &v794[(v793 - v791) & 0xFFFFFFFFFFFFFFF8];
                if ((unint64_t)(v793 - &v794[v795 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
                  goto LABEL_1059;
                v798 = v795 >> 3;
                v799 = ((unint64_t)(v795 - 8) >> 3) + 1;
                v800 = 8 * (v799 & 0x3FFFFFFFFFFFFFFCLL);
                v801 = &v793[-v800];
                v797 = &v796[-v800];
                v802 = &v794[8 * v798 - 16];
                v803 = (__int128 *)(v793 - 16);
                v804 = v799 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v805 = *v803;
                  *((_OWORD *)v802 - 1) = *(v803 - 1);
                  *(_OWORD *)v802 = v805;
                  v802 -= 32;
                  v803 -= 2;
                  v804 -= 4;
                }
                while (v804);
                v793 = v801;
                if (v799 != (v799 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1059:
                  do
                  {
LABEL_870:
                    v806 = *((_QWORD *)v793 - 1);
                    v793 -= 8;
                    *((_QWORD *)v797 - 1) = v806;
                    v797 -= 8;
                  }
                  while (v793 != v791);
                }
              }
              *v786 = v797;
              v790 = (uint64_t)&v794[8 * (v788 >> 3)];
              *((_QWORD *)v792 + 53) = v796;
              *v789 = v790;
              if (v791)
              {
                operator delete(v791);
                v790 = *v789;
                v797 = *v786;
              }
            }
            v807 = *(char **)(v787 + 416);
            v808 = v788 << 29;
            v809 = (int)(v788 >> 3);
            if (v809 > (v790 - (uint64_t)v797) >> 3)
            {
              if (v797)
              {
                *(_QWORD *)&__sb[440 * v191 + 424] = v797;
                operator delete(v797);
                v790 = 0;
                *v786 = 0;
                v786[1] = 0;
                v786[2] = 0;
              }
              if (v808 < 0)
                goto LABEL_1019;
              v810 = v790 >> 2;
              if (v790 >> 2 <= v809)
                v810 = (int)(v788 >> 3);
              if ((unint64_t)v790 >= 0x7FFFFFFFFFFFFFF8)
                v810 = 0x1FFFFFFFFFFFFFFFLL;
              if (v810 >> 61)
                goto LABEL_1019;
              v811 = 8 * v810;
              v812 = (char *)operator new(8 * v810);
              v797 = v812;
              *v786 = v812;
              v813 = &__sb[440 * v191 + 424];
              *(_QWORD *)v813 = v812;
              *v789 = (uint64_t)&v812[v811];
              if (v808)
              {
                v193 = v788 & 0x7FFFFFFFFLL;
                memmove(v812, v807, v193);
              }
              else
              {
                v193 = 0;
              }
              goto LABEL_274;
            }
            v813 = &__sb[440 * v191 + 424];
            v814 = *(_QWORD *)v813 - (_QWORD)v797;
            v815 = v814 >> 3;
            if (v814 >> 3 >= v809)
            {
              if (v808)
              {
                v193 = v808 >> 29;
                v194 = v797;
                v195 = v807;
                goto LABEL_273;
              }
              v193 = 0;
            }
            else
            {
              if (*(char **)v813 != v797)
              {
                memmove(v797, v807, v814);
                v797 = *(char **)v813;
              }
              v195 = &v807[8 * v815];
              v193 = (v808 >> 29) - 8 * v815;
              if (v815 != v809)
              {
                v194 = v797;
LABEL_273:
                memmove(v194, v195, v193);
              }
            }
LABEL_274:
            v164 = v902;
            *(_QWORD *)v813 = &v797[v193];
            v191 = (v901 + 1);
            v190 = *v902;
            v192 = v901 + 1;
            if (0x6FB586FB586FB587 * ((uint64_t)(*v899 - (_QWORD)*v902) >> 3) <= v191)
              goto LABEL_223;
            continue;
          }
          v544 = &__sa[440 * v191];
          v546 = (char *)*((_QWORD *)v544 + 27);
          v542 = (char **)(v544 + 216);
          v545 = v546;
          v547 = v546 - v524;
          v548 = (v546 - v524) >> 3;
          if (v548 >= v536)
          {
            if (v535)
            {
              v543 = v535 >> 29;
              v550 = v524;
              v549 = v534;
LABEL_602:
              memmove(v550, v549, v543);
            }
            else
            {
              v543 = 0;
            }
          }
          else
          {
            if (v545 != v524)
            {
              memmove(v524, v534, v547);
              v524 = *v542;
            }
            v549 = &v534[8 * v548];
            v543 = (v535 >> 29) - 8 * v548;
            if (v548 != v536)
            {
              v550 = v524;
              goto LABEL_602;
            }
          }
          v537 = v902;
          goto LABEL_606;
        }
        if (v274)
        {
          v297 = 16 * v275;
          v281 = v271;
          v298 = v271;
          do
          {
            v299 = *v273++;
            *(_OWORD *)v298 = v299;
            v298 += 16;
            v281 += 16;
            v297 -= 16;
          }
          while (v297);
        }
        else
        {
          v281 = v271;
        }
      }
      break;
    }
    v296 = v281 - v271;
    goto LABEL_371;
  }
LABEL_899:
  v118 = (uint64_t *)v895;
LABEL_900:
  v911 = 0;
  rep = 0;
  v913 = 0;
  sub_20EE65E28((uint64_t)&v911, *v118, v118[1], 0x4EC4EC4EC4EC4EC5 * ((v118[1] - *v118) >> 3));
  v816 = v898;
  if (!*((_BYTE *)v898 + 7184))
    goto LABEL_1007;
  v817 = v911;
  if (v911 == rep)
  {
LABEL_913:
    sub_20F02E848(&v931);
    if (**((int **)v931 + 7) > 5)
      goto LABEL_1007;
    v826 = *((unsigned __int8 *)v931 + 72);
    v827 = sub_20E8C31DC((uint64_t)v931, "OSLogSurrogateAppender", 1, 0);
    v828 = v827;
    if (!v826 && v827 == 0)
      goto LABEL_1007;
    *(_QWORD *)v954 = &v931;
    *(std::chrono::steady_clock::time_point *)&v954[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v954[16] = std::chrono::system_clock::now();
    LODWORD(v955) = 5;
    *((_QWORD *)&v955 + 1) = "unknown file";
    LODWORD(v956) = 3936;
    v958 = 0;
    v959 = 0;
    v957 = "unknown function";
    v830 = **(_QWORD **)v954;
    v831 = **(_QWORD **)v954 + 16;
    if (*(char *)(**(_QWORD **)v954 + 39) < 0)
    {
      v833 = *(const char **)(v830 + 16);
      v832 = *(_QWORD *)(v830 + 24);
    }
    else
    {
      v832 = *(unsigned __int8 *)(**(_QWORD **)v954 + 39);
      v833 = (const char *)(v830 + 16);
    }
    v834 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v834 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v943 && SHIBYTE(__p) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v835 = byte_254A4A4F8;
    else
      v835 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v836 = byte_254A4A4F8[23];
    else
      v836 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v835, v833);
    p_p = &__p;
    if (v836 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v836 >= 0x17)
    {
      v838 = v828;
      v839 = v833;
      v840 = v830;
      v841 = v826;
      v842 = v831;
      v843 = (v836 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v836 | 7) != 0x17)
        v843 = v836 | 7;
      v844 = v843 + 1;
      p_p = (__int128 *)operator new(v843 + 1);
      *((_QWORD *)&__p + 1) = v836;
      *(_QWORD *)&v943 = v844 | 0x8000000000000000;
      *(_QWORD *)&__p = p_p;
      v831 = v842;
      v826 = v841;
      v830 = v840;
      v833 = v839;
      v828 = v838;
    }
    else
    {
      BYTE7(v943) = v836;
      if (!v836)
      {
LABEL_936:
        *((_BYTE *)p_p + v836) = 0;
        BYTE8(v943) = 1;
        v845 = v944;
        if (v832 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v832 >= 0x17)
        {
          v846 = (v832 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v832 | 7) != 0x17)
            v846 = v832 | 7;
          v847 = v846 + 1;
          v845 = operator new(v846 + 1);
          v944[1] = (void *)v832;
          v945 = v847 | 0x8000000000000000;
          v944[0] = v845;
        }
        else
        {
          HIBYTE(v945) = v832;
          if (!v832)
            goto LABEL_944;
        }
        memmove(v845, v833, v832);
LABEL_944:
        *((_BYTE *)v845 + v832) = 0;
        LOBYTE(v946) = 1;
        v848 = object;
        if (SHIBYTE(v945) < 0)
          operator delete(v944[0]);
        if (BYTE8(v943) && SBYTE7(v943) < 0)
          operator delete((void *)__p);
        if (object)
          os_release(object);
        if (v828 && *(_QWORD *)(v828 + 24))
        {
          v849 = _os_log_pack_size();
          v850 = (std::__shared_weak_count_vtbl *)operator new(v849, (std::align_val_t)8uLL);
          v851 = (std::__shared_weak_count *)operator new();
          v852 = v851;
          v851->__shared_owners_ = 0;
          v853 = (unint64_t *)&v851->__shared_owners_;
          v851->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v851->__shared_weak_owners_ = 0;
          v851[1].__vftable = v850;
          object = v850;
          *(_QWORD *)&__p = v850;
          *((_QWORD *)&__p + 1) = v851;
          do
            v854 = __ldxr(v853);
          while (__stxr(v854 + 1, v853));
          v943 = 0uLL;
          v944[0] = 0;
          do
            v855 = __ldaxr(v853);
          while (__stlxr(v855 - 1, v853));
          if (!v855)
          {
            ((void (*)(std::__shared_weak_count *))v851->__on_zero_shared)(v851);
            std::__shared_weak_count::__release_weak(v852);
          }
          v856 = object;
          v857 = (_DWORD *)_os_log_pack_fill();
          *v857 = 67109120;
          v857[1] = 400;
          v858 = operator new();
          v859 = *(unsigned __int8 *)(v830 + 39);
          if ((v859 & 0x80u) == 0)
            v860 = v831;
          else
            v860 = *(_QWORD *)(v830 + 16);
          if ((v859 & 0x80u) != 0)
            v859 = *(_QWORD *)(v830 + 24);
          *(_QWORD *)v858 = v856;
          *(_OWORD *)(v858 + 8) = __p;
          __p = 0uLL;
          *(_OWORD *)(v858 + 24) = v943;
          v943 = 0uLL;
          *(_QWORD *)(v858 + 40) = v860;
          *(_QWORD *)(v858 + 48) = v859;
          *(_BYTE *)(v858 + 56) = 16;
          v939 = 0;
          *(_QWORD *)&v935 = v858;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v828 + 24) + 40))(*(_QWORD *)(v828 + 24), &v935);
          v861 = v935;
          *(_QWORD *)&v935 = 0;
          if (v861)
          {
            v862 = *(std::__shared_weak_count **)(v861 + 32);
            if (v862)
            {
              v863 = (unint64_t *)&v862->__shared_owners_;
              do
                v864 = __ldaxr(v863);
              while (__stlxr(v864 - 1, v863));
              if (!v864)
              {
                ((void (*)(std::__shared_weak_count *))v862->__on_zero_shared)(v862);
                std::__shared_weak_count::__release_weak(v862);
              }
            }
            v865 = *(std::__shared_weak_count **)(v861 + 16);
            if (v865)
            {
              v866 = (unint64_t *)&v865->__shared_owners_;
              do
                v867 = __ldaxr(v866);
              while (__stlxr(v867 - 1, v866));
              if (!v867)
              {
                ((void (*)(std::__shared_weak_count *))v865->__on_zero_shared)(v865);
                std::__shared_weak_count::__release_weak(v865);
              }
            }
            MEMORY[0x212BC6398](v861, 0x10F0C40B62ED6C6);
            v868 = v939;
            v939 = 0;
            if (v868)
            {
              v869 = (std::__shared_weak_count *)v868[4];
              if (v869)
              {
                v870 = (unint64_t *)&v869->__shared_owners_;
                do
                  v871 = __ldaxr(v870);
                while (__stlxr(v871 - 1, v870));
                if (!v871)
                {
                  ((void (*)(std::__shared_weak_count *))v869->__on_zero_shared)(v869);
                  std::__shared_weak_count::__release_weak(v869);
                }
              }
              v872 = (std::__shared_weak_count *)v868[2];
              if (v872)
              {
                v873 = (unint64_t *)&v872->__shared_owners_;
                do
                  v874 = __ldaxr(v873);
                while (__stlxr(v874 - 1, v873));
                if (!v874)
                {
                  ((void (*)(std::__shared_weak_count *))v872->__on_zero_shared)(v872);
                  std::__shared_weak_count::__release_weak(v872);
                }
              }
              MEMORY[0x212BC6398](v868, 0x10F0C40B62ED6C6);
            }
          }
          v875 = (std::__shared_weak_count *)*((_QWORD *)&v943 + 1);
          if (*((_QWORD *)&v943 + 1))
          {
            v876 = (unint64_t *)(*((_QWORD *)&v943 + 1) + 8);
            do
              v877 = __ldaxr(v876);
            while (__stlxr(v877 - 1, v876));
            if (!v877)
            {
              ((void (*)(std::__shared_weak_count *))v875->__on_zero_shared)(v875);
              std::__shared_weak_count::__release_weak(v875);
            }
          }
          v878 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v879 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
            do
              v880 = __ldaxr(v879);
            while (__stlxr(v880 - 1, v879));
            if (!v880)
            {
              ((void (*)(std::__shared_weak_count *))v878->__on_zero_shared)(v878);
              std::__shared_weak_count::__release_weak(v878);
            }
          }
        }
        else
        {
          os_log_type_enabled(v848, OS_LOG_TYPE_ERROR);
          object = (void *)0x19004000100;
          v881 = (void *)_os_log_send_and_compose_impl();
          if (v881)
            free(v881);
        }
        if (v826)
        {
          sub_20E8C003C((uint64_t)v954, "ARKitTriage: Total Feature Points < %u", 400);
          sub_20E863570((uint64_t)v954);
        }
        sub_20E863570((uint64_t)v954);
        v882 = v959;
        if (v959)
        {
          v883 = (unint64_t *)&v959->__shared_owners_;
          do
            v884 = __ldaxr(v883);
          while (__stlxr(v884 - 1, v883));
          if (!v884)
          {
            ((void (*)(std::__shared_weak_count *))v882->__on_zero_shared)(v882);
            std::__shared_weak_count::__release_weak(v882);
          }
        }
        v816 = v898;
        goto LABEL_1007;
      }
    }
    memmove(p_p, v835, v836);
    goto LABEL_936;
  }
  v818 = 0;
  do
  {
    v820 = (char *)v817[1];
    v819 = (char *)v817[2];
    if (v820 == v819)
      goto LABEL_903;
    v821 = v819 - v820 - 440;
    if (v821 < 0x1B8)
    {
      v822 = (char *)v817[1];
      do
      {
LABEL_910:
        v818 += (uint64_t)(*((_QWORD *)v822 + 4) - *((_QWORD *)v822 + 3)) >> 4;
        v822 += 440;
      }
      while (v822 != v819);
      goto LABEL_903;
    }
    v823 = 0;
    v824 = v821 / 0x1B8 + 1;
    v822 = &v820[440 * (v824 & 0x1FFFFFFFFFFFFFELL)];
    v825 = v824 & 0x1FFFFFFFFFFFFFELL;
    do
    {
      v818 += (uint64_t)(*((_QWORD *)v820 + 4) - *((_QWORD *)v820 + 3)) >> 4;
      v823 += (uint64_t)(*((_QWORD *)v820 + 59) - *((_QWORD *)v820 + 58)) >> 4;
      v820 += 880;
      v825 -= 2;
    }
    while (v825);
    v818 += v823;
    if (v824 != (v824 & 0x1FFFFFFFFFFFFFELL))
      goto LABEL_910;
LABEL_903:
    v817 += 13;
  }
  while (v817 != rep);
  if (v818 < 0x190)
    goto LABEL_913;
LABEL_1007:
  v885 = (*(uint64_t (**)(_QWORD *, void **, uint64_t *))(*v816 + 480))(v816, &v911, a4);
  v886 = sub_20F036334(v816, (uint64_t *)&v911, a4, a5);
  v25 = v886;
  if (v885 >= 0x100u)
  {
    v887 = v898[305];
    if ((!v887 || *(_BYTE *)(v887 + 128) != 1 || (_DWORD)v886 != v885)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 2380, (uint64_t)"!opt_last_frame_has_good_geometry_in_vio || (GetAdaptiveVIOState() == cv_types::AdaptiveVIOState::kVisionOnlySLAMAndVIOInitialization && opt_last_frame_has_good_geometry_in_vio.value() == last_frame_has_good_geometry_in_current_vfusion)", 236, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
  v888 = v911;
  if (v911)
  {
    v889 = rep;
    v890 = v911;
    if (rep != v911)
    {
      do
      {
        v889 -= 13;
        sub_20E9905B4(v889);
      }
      while (v889 != v888);
      v890 = v911;
    }
    rep = v888;
    operator delete(v890);
  }
  return v25;
}

void sub_20F03EB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  char a67;
  uint64_t v67;

  if (a67)
  {
    if (a66 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v67 - 176);
  sub_20EE5EE28(&a28);
  _Unwind_Resume(a1);
}

void sub_20F03EB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *object;
  uint64_t v64;

  if (*(_BYTE *)(v64 - 152) && *(char *)(v64 - 153) < 0)
    operator delete(*(void **)(v64 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a28);
  if (a42 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&object);
  sub_20EA896D4(&a44);
  sub_20E86665C((uint64_t)&a47);
  sub_20ED2894C(&a49);
  sub_20EE5EE28(&a52);
  _Unwind_Resume(a1);
}

void sub_20F03EE9C(_QWORD *a1, uint64_t a2, unsigned int a3, _QWORD *a4, uint64_t *a5, unsigned int a6, unsigned int a7, unsigned int a8)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned int v11;
  unint64_t v16;
  uint64_t v17;
  int8x8_t *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  int8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unsigned int v32;
  _QWORD *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __n128 v40;
  uint64_t v41;
  char v42;
  int64x2_t v43;
  float64x2_t v45;
  float64x2_t v46;
  int8x16_t v47;
  float64x2_t v50;
  uint64_t v58;
  int8x16_t v59;
  __int128 v60;
  uint64_t *v62;
  uint64_t *v63;
  float64x2_t v65;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  double v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  double v106;
  __n128 v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  __int128 v114;
  double v115;
  __int128 v116;
  float64x2_t v117;
  unsigned int v118;
  float64x2_t v119;
  float64x2_t v121;
  float64x2_t v123;
  float64x2_t v124;
  __int128 v125;
  float64x2_t v126;
  __int128 v127;
  __n128 v128;
  __int128 v129;
  float64x2_t v130;
  __int128 v131;
  char v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;

  v151 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t *)a1[921];
  v9 = v8[5];
  if (!v9)
    return;
  v11 = a7;
  v16 = v8[3];
  v17 = *v8;
  while (1)
  {
    v18 = *(int8x8_t **)(v17 + 16 * (v16 % ((*(_QWORD *)(a1[921] + 8) - v17) >> 4)));
    if (v18[6].i32[0] == a6)
      break;
    ++v16;
    if (!--v9)
      return;
  }
  if (!a3)
  {
    v20 = 0;
    goto LABEL_15;
  }
  if (a3 == 1)
  {
    v19 = 0;
    v20 = 0;
LABEL_13:
    v25 = a3 - v19;
    v26 = (unsigned __int8 *)(a2 + (v19 << 7) + 32);
    do
    {
      v27 = *v26;
      v26 += 128;
      v20 += v27;
      --v25;
    }
    while (v25);
    goto LABEL_15;
  }
  v21 = 0;
  v22 = 0;
  v19 = a3 & 0xFFFFFFFE;
  v23 = (unsigned __int8 *)(a2 + 160);
  v24 = v19;
  do
  {
    v21 += *(v23 - 128);
    v22 += *v23;
    v23 += 256;
    v24 -= 2;
  }
  while (v24);
  v20 = v22 + v21;
  if (v19 != a3)
    goto LABEL_13;
LABEL_15:
  v28 = v18[7];
  if (a7 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a8 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| v11 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| a8 >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(int8x8_t *)&v133 = v28;
  *((_QWORD *)&v133 + 1) = a6;
  LODWORD(v134) = (unsigned __int16)a8 | ((unsigned __int16)v11 << 16);
  v135 = 0uLL;
  *((_QWORD *)&v134 + 1) = 0;
  v29 = *a5;
  v30 = a5[1];
  v31 = v30 - v29;
  if (v30 != v29)
  {
    v118 = v11;
    v32 = a8;
    v33 = a4;
    v34 = 0xCCCCCCCCCCCCCCCDLL * (v31 >> 3);
    if (v34 >= 0x666666666666667)
      sub_20E867F44();
    v35 = (char *)operator new(v31);
    v36 = 0;
    *((_QWORD *)&v134 + 1) = v35;
    *((_QWORD *)&v135 + 1) = &v35[40 * v34];
    do
    {
      v37 = v29 + v36;
      v38 = &v35[v36];
      v39 = *(_OWORD *)(v29 + v36);
      *((_QWORD *)v38 + 2) = *(_QWORD *)(v29 + v36 + 16);
      *(_OWORD *)v38 = v39;
      *(_OWORD *)(v38 + 24) = *(_OWORD *)(v29 + v36 + 24);
      v36 += 40;
    }
    while (v37 + 40 != v30);
    *(_QWORD *)&v135 = &v35[v36];
    a4 = v33;
    a8 = v32;
    v11 = v118;
  }
  *(_QWORD *)&v136 = v20;
  v40 = sub_20FCB7808(v18, &v133);
  if (*((_QWORD *)&v134 + 1))
  {
    *(_QWORD *)&v135 = *((_QWORD *)&v134 + 1);
    operator delete(*((void **)&v134 + 1));
  }
  v41 = *(_QWORD *)(a1[921] + 160);
  if (*(_BYTE *)(v41 + 368) && !*(_BYTE *)(v41 + 226))
  {
    v40.n128_u64[0] = *(_QWORD *)(v41 + 256);
    v43 = *(int64x2_t *)(v41 + 240);
    _D3 = *(_QWORD *)(v41 + 320);
    v45 = (float64x2_t)vzip1q_s64(v43, *(int64x2_t *)(v41 + 272));
    v46 = (float64x2_t)vzip2q_s64(v43, *(int64x2_t *)(v41 + 272));
    v40.n128_u64[1] = *(_QWORD *)(v41 + 288);
    v47 = vextq_s8((int8x16_t)v46, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)(v41 + 304), 1), 8uLL);
    _D6 = *(double *)(v41 + 352);
    _Q7 = *(float64x2_t *)(v41 + 336);
    v50 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v45, vnegq_f64(_Q7).f64[0]), v46, _Q7, 1), (float64x2_t)v40, _D6, 0);
    _D18 = *(_QWORD *)(v41 + 312);
    __asm
    {
      FMLS            D16, D18, V7.D[1]
      FMLS            D16, D3, V6.D[0]
    }
    _Q7.f64[0] = *(float64_t *)(v41 + 304);
    *(_QWORD *)&v46.f64[1] = v47.i64[0];
    *((_QWORD *)&_Q16 + 1) = 1.0;
    v128 = v40;
    v129 = _D3;
    v124 = v45;
    v125 = *(unint64_t *)&_Q7.f64[0];
    v126 = v46;
    v127 = v47.u64[1];
    v130 = v50;
    v131 = _Q16;
    v42 = 1;
  }
  else
  {
    v42 = 0;
    LOBYTE(v124.f64[0]) = 0;
  }
  v132 = v42;
  v58 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 432))(a1, v40);
  sub_20F12E090(v58, a2, a3, a6, v11, a8, (uint64_t)&v124, v59);
  v63 = (uint64_t *)*a4;
  v62 = (uint64_t *)a4[1];
  if ((uint64_t *)*a4 != v62)
  {
    do
    {
      v68 = *((_OWORD *)v63 + 6);
      v147 = *((_OWORD *)v63 + 5);
      v148 = v68;
      v69 = *((_OWORD *)v63 + 8);
      v149 = *((_OWORD *)v63 + 7);
      v150 = v69;
      v70 = *((_OWORD *)v63 + 2);
      v143 = *((_OWORD *)v63 + 1);
      v144 = v70;
      v71 = *((_OWORD *)v63 + 4);
      v145 = *((_OWORD *)v63 + 3);
      v146 = v71;
      v72 = a1[921];
      v73 = *(_QWORD *)(v72 + 288);
      v74 = *(_QWORD *)(v72 + 296);
      if (v74 != v73)
      {
        v75 = 0x86BCA1AF286BCA1BLL * ((v74 - v73) >> 3);
        v76 = *v63;
        do
        {
          v77 = v75 >> 1;
          v78 = v73 + 152 * (v75 >> 1);
          if (*(_QWORD *)v78 < v76 || *(_QWORD *)v78 == v76 && *(_DWORD *)(v78 + 8) < *((_DWORD *)v63 + 2))
          {
            v73 = v78 + 152;
            v77 = v75 + ~v77;
          }
          v75 = v77;
        }
        while (v77);
      }
      if (v73 == v74 || *(_QWORD *)v73 != *v63 || *(_DWORD *)(v73 + 8) != *((_DWORD *)v63 + 2))
      {
        v133 = *(_OWORD *)v63;
        v138 = xmmword_21039AFE8;
        v139 = unk_21039AFF8;
        v140 = xmmword_21039B008;
        v141 = unk_21039B018;
        v134 = xmmword_21039AFA8;
        v135 = unk_21039AFB8;
        v136 = xmmword_21039AFC8;
        v137 = unk_21039AFD8;
        v142 = 0;
        v73 = sub_20F0529EC((uint64_t *)(v72 + 288), (_DWORD *)v73, (uint64_t *)&v133);
      }
      v79 = v150;
      *(_OWORD *)(v73 + 112) = v149;
      *(_OWORD *)(v73 + 128) = v79;
      v80 = v148;
      *(_OWORD *)(v73 + 80) = v147;
      *(_OWORD *)(v73 + 96) = v80;
      v82 = v145;
      v81 = v146;
      v83 = v144;
      *(_OWORD *)(v73 + 16) = v143;
      *(_OWORD *)(v73 + 32) = v83;
      *(_OWORD *)(v73 + 48) = v82;
      *(_OWORD *)(v73 + 64) = v81;
      *(_DWORD *)(v73 + 144) = a6;
      if (v132)
      {
        v84 = a1[921];
        v85 = *(_QWORD *)(v84 + 288);
        v86 = *(_QWORD *)(v84 + 296);
        if (v86 != v85)
        {
          v87 = 0x86BCA1AF286BCA1BLL * ((v86 - v85) >> 3);
          v88 = *v63;
          do
          {
            v89 = v87 >> 1;
            v90 = v85 + 152 * (v87 >> 1);
            if (*(_QWORD *)v90 < v88 || *(_QWORD *)v90 == v88 && *(_DWORD *)(v90 + 8) < *((_DWORD *)v63 + 2))
            {
              v85 = v90 + 152;
              v89 = v87 + ~v89;
            }
            v87 = v89;
          }
          while (v89);
        }
        v91 = *(double *)&v125;
        v92 = v124;
        *(_QWORD *)&v60 = v127;
        v93 = v126;
        *(_QWORD *)&_Q22 = v129;
        v94 = (float64x2_t)v128;
        _D3 = *(double *)&v131;
        _Q4 = v130;
        v98 = *((float64x2_t *)v63 + 1);
        v97 = *((float64x2_t *)v63 + 2);
        v100 = *((float64x2_t *)v63 + 3);
        v99 = *((float64x2_t *)v63 + 4);
        v102 = *((float64x2_t *)v63 + 5);
        v101 = *((float64x2_t *)v63 + 6);
        v104 = *((float64x2_t *)v63 + 7);
        v103 = *((float64x2_t *)v63 + 8);
        if (v85 == v86 || *(_QWORD *)v85 != *v63 || *(_DWORD *)(v85 + 8) != *((_DWORD *)v63 + 2))
        {
          v105 = v130;
          v106 = *(double *)&v131;
          v107 = v128;
          v108 = v126;
          v109 = v124;
          v110 = *((float64x2_t *)v63 + 7);
          v111 = *((float64x2_t *)v63 + 3);
          v112 = *((float64x2_t *)v63 + 1);
          v113 = *((float64x2_t *)v63 + 5);
          v114 = _Q22;
          v115 = *(double *)&v125;
          v116 = v60;
          v117 = *((float64x2_t *)v63 + 6);
          v119 = *((float64x2_t *)v63 + 4);
          v121 = *((float64x2_t *)v63 + 2);
          v123 = *((float64x2_t *)v63 + 8);
          v133 = *(_OWORD *)v63;
          v138 = xmmword_21039AFE8;
          v139 = unk_21039AFF8;
          v140 = xmmword_21039B008;
          v141 = unk_21039B018;
          v134 = xmmword_21039AFA8;
          v135 = unk_21039AFB8;
          v136 = xmmword_21039AFC8;
          v137 = unk_21039AFD8;
          v142 = 0;
          v85 = sub_20F0529EC((uint64_t *)(v84 + 288), (_DWORD *)v85, (uint64_t *)&v133);
          v97 = v121;
          v103 = v123;
          v101 = v117;
          v99 = v119;
          v91 = v115;
          v60 = v116;
          v102 = v113;
          _Q22 = v114;
          v100 = v111;
          v98 = v112;
          v92 = v109;
          v104 = v110;
          v94 = (float64x2_t)v107;
          v93 = v108;
          _Q4 = v105;
          _D3 = v106;
        }
        _Q2.f64[0] = v91;
        *(_QWORD *)&_Q2.f64[1] = v60;
        v65 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v92, (int64x2_t)v93), vnegq_f64(_Q4).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v92, (int64x2_t)v93), _Q4, 1), _Q2, _D3, 0);
        _Q2.f64[0] = v94.f64[1];
        __asm
        {
          FMLS            D1, D2, V4.D[1]
          FMLS            D1, D22, V3.D[0]
        }
        *(float64x2_t *)(v85 + 16) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v98, v92.f64[0]), v100, v93.f64[0]), v102, v94.f64[0]), (float64x2_t)0, v104);
        *(float64x2_t *)(v85 + 32) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v97, v92.f64[0]), v99, v93.f64[0]), v101, v94.f64[0]), (float64x2_t)0, v103);
        *(float64x2_t *)(v85 + 48) = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v98, v92, 1), v100, v93, 1), v102, v94, 1), (float64x2_t)0, v104);
        *(float64x2_t *)(v85 + 64) = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v97, v92, 1), v99, v93, 1), v101, v94, 1), (float64x2_t)0, v103);
        *(float64x2_t *)(v85 + 80) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v98, v91), v100, *(double *)&v60), v102, *(double *)&_Q22), (float64x2_t)0, v104);
        *(float64x2_t *)(v85 + 96) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v97, v91), v99, *(double *)&v60), v101, *(double *)&_Q22), (float64x2_t)0, v103);
        *(float64x2_t *)(v85 + 112) = vaddq_f64(v104, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v98, v65.f64[0]), v100, v65, 1), v102, _D1));
        *(float64x2_t *)(v85 + 128) = vaddq_f64(v103, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v97, v65.f64[0]), v99, v65, 1), v101, _D1));
      }
      v63 += 18;
    }
    while (v63 != v62);
  }
}

void sub_20F03F640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_20F03F66C(unint64_t result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int8x8_t *v11;
  int8x8_t *v12;
  unsigned int *v13;
  unsigned int *i;
  __int128 v15;
  char v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;

  v2 = *(uint64_t **)(result + 7368);
  v3 = v2[5];
  if (v3)
  {
    v4 = result;
    v5 = *(_DWORD *)(*(_QWORD *)(v2[2902] + 4864) + 5288);
    v6 = v2[3];
    v7 = *v2;
    v8 = (*(_QWORD *)(*(_QWORD *)(result + 7368) + 8) - v7) >> 4;
    v9 = v6;
    v10 = v3;
    while (1)
    {
      v11 = *(int8x8_t **)(v7 + 16 * (v9 % v8));
      if (v11[6].i32[0] == v5)
        break;
      ++v9;
      if (!--v10)
        return result;
    }
    while (1)
    {
      v12 = *(int8x8_t **)(v7 + 16 * (v6 % v8));
      if (v12[6].i32[0] == *(_DWORD *)(*a2 + 48))
        break;
      ++v6;
      if (!--v3)
        return result;
    }
    v13 = (unsigned int *)a2[2];
    for (i = (unsigned int *)a2[3]; v13 != i; v13 += 30)
    {
      result = sub_20FCBA6DC(v12, *v13, v13[1]);
      if (v16)
      {
        v17 = result;
        result = sub_20FCBA6DC(v11, *v13, v13[1]);
        if (v18)
        {
          v19 = result;
          v20 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 432))(v4);
          result = sub_20F885690(*(_QWORD *)(v20 + 4864), (_QWORD *)v17, (__int128 *)v19);
          v21 = *(_OWORD *)(v19 + 768);
          *(_DWORD *)(v17 + 784) = *(_DWORD *)(v19 + 784);
          *(_OWORD *)(v17 + 768) = v21;
          if (v17 != v19)
            result = (unint64_t)sub_20F04CF00((char **)(v17 + 792), *(__int128 **)(v19 + 792), *(__int128 **)(v19 + 800), 0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(*(_QWORD *)(v19 + 800) - *(_QWORD *)(v19 + 792)) >> 3));
          *(_QWORD *)(v17 + 816) = *(_QWORD *)(v19 + 816);
          v15 = *(_OWORD *)v17;
          *(_DWORD *)(v17 + 784) = *(_DWORD *)(v17 + 16);
          *(_OWORD *)(v17 + 768) = v15;
        }
      }
    }
  }
  return result;
}

void sub_20F03F7F8(_QWORD *a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v8;
  char v9;
  float64x2_t v10;
  int64x2_t v11;
  float64x2_t v13;
  float64x2_t v14;
  int8x16_t v15;
  float64x2_t v18;
  uint64_t v26;
  double v27;
  double v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  float64x2_t v40;
  int64x2_t v41;
  int64x2_t v44;
  float64x2_t v45;
  int8x16_t v47;
  int64x2_t v48;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  int64x2_t *v66;
  unint64_t v67;
  unint64_t v68;
  int64x2_t *v69;
  int v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  _QWORD *v85;
  char *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _QWORD *v102;
  _QWORD *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _BOOL4 v126;
  float64x2_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t *v137;
  uint64_t *v138;
  unint64_t v139;
  unsigned int v140;
  int64x2_t *v141;
  unint64_t v142;
  unint64_t v143;
  char *i8;
  float64x2_t v145;
  float64x2_t v146;
  int64x2_t v147;
  float64x2_t v148;
  int v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  size_t v153;
  const char *v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  size_t v159;
  const char *v160;
  uint64_t v161;
  _QWORD *v162;
  int *v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int8x16_t v174;
  double v175;
  double v176;
  int8x16_t v177;
  double v178;
  double v179;
  double v181;
  double v182;
  float64x2_t v184;
  __n128 v186;
  uint64_t v187;
  uint64_t *v188;
  unint64_t v189;
  unsigned int v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  float64x2_t *v195;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int64x2_t v214;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  int8x16_t v220;
  double v221;
  float64x2_t v222;
  int64x2_t v223;
  __n128 v224;
  int64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  int8x16_t v229;
  int64x2_t v230;
  int v231;
  int64x2_t v232;
  _QWORD *v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  int64x2_t v248;
  int64x2_t v250;
  int64x2_t v251;
  unint64_t v254;
  float64x2_t v255;
  int8x16_t v256;
  float64x2_t v257;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  float64x2_t v262;
  float64x2_t v264;
  float64x2_t v265;
  double v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  int64x2_t v271;
  int64x2_t v272;
  int64x2_t v273;
  int64x2_t v274;
  int64x2_t v275;
  float64x2_t v276;
  int8x16_t v277;
  float64x2_t v278;
  _QWORD *v279;
  uint64_t v280;
  int64x2_t v281;
  __double2 v282;
  unsigned __int8 v283;
  const char *v284;
  size_t v285;
  _BYTE *v286;
  unint64_t v287;
  const char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _BYTE *v293;
  uint64_t v294;
  uint64_t v295;
  NSObject *v296;
  size_t v297;
  std::__shared_weak_count_vtbl *v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  double v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  int v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  void *v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  unsigned __int8 v333;
  const char *v334;
  size_t v335;
  _BYTE *v336;
  unint64_t v337;
  const char *v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  _BYTE *v343;
  uint64_t v344;
  uint64_t v345;
  NSObject *v346;
  size_t v347;
  std::__shared_weak_count_vtbl *v348;
  std::__shared_weak_count *v349;
  std::__shared_weak_count *v350;
  unint64_t *p_shared_owners;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  __int128 v359;
  double v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  uint64_t v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  void *v380;
  unint64_t *v381;
  uint64_t v382;
  __double2 v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  uint64_t v387;
  _BYTE object[48];
  int64x2_t v389;
  int64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  int v395;
  void *__p;
  int64x2_t *v397;
  uint64_t v398;
  void *v399;
  char *v400;
  uint64_t v401;
  float64x2_t v402[8];
  char v403;
  _BYTE oslog[48];
  int64x2_t v405;
  int64x2_t v406;
  float64x2_t v407;
  uint64_t *v408;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v410;
  int v411;
  const char *v412;
  int v413;
  const char *v414;
  uint64_t v415;
  std::__shared_weak_count *v416;
  uint64_t v417;
  uint64_t v418;
  double v419[3];

  v8 = *(_QWORD *)(a1[921] + 160);
  if (*(_BYTE *)(v8 + 368) && !*(_BYTE *)(v8 + 226))
  {
    v10.f64[0] = *(float64_t *)(v8 + 256);
    v11 = *(int64x2_t *)(v8 + 240);
    _D3 = *(_QWORD *)(v8 + 320);
    v13 = (float64x2_t)vzip1q_s64(v11, *(int64x2_t *)(v8 + 272));
    v14 = (float64x2_t)vzip2q_s64(v11, *(int64x2_t *)(v8 + 272));
    v10.f64[1] = *(float64_t *)(v8 + 288);
    v15 = vextq_s8((int8x16_t)v14, (int8x16_t)vdupq_laneq_s64(*(int64x2_t *)(v8 + 304), 1), 8uLL);
    _D6 = *(double *)(v8 + 352);
    _Q7 = *(float64x2_t *)(v8 + 336);
    v18 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v13, vnegq_f64(_Q7).f64[0]), v14, _Q7, 1), v10, _D6, 0);
    _D18 = *(_QWORD *)(v8 + 312);
    __asm
    {
      FMLS            D16, D18, V7.D[1]
      FMLS            D16, D3, V6.D[0]
    }
    _Q7.f64[0] = *(float64_t *)(v8 + 304);
    *(_QWORD *)&v14.f64[1] = v15.i64[0];
    _Q16.f64[1] = 1.0;
    v402[4] = v10;
    v402[5] = (float64x2_t)_D3;
    v402[0] = v13;
    v402[1] = (float64x2_t)*(unint64_t *)&_Q7.f64[0];
    v402[2] = v14;
    v402[3] = (float64x2_t)v15.u64[1];
    v402[6] = v18;
    v402[7] = _Q16;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    LOBYTE(v402[0].f64[0]) = 0;
  }
  v403 = v9;
  v26 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1) + 4864);
  if (v26)
  {
    v30 = *(_QWORD *)(v26 + 7952);
    if (v30)
    {
      if (*(_QWORD *)(v30 + 8))
        sub_20F888164(v26, (uint64_t **)a2, (uint64_t)v402, v27, v28, v29);
    }
  }
  v399 = 0;
  v400 = 0;
  v401 = 0;
  __p = 0;
  v397 = 0;
  v398 = 0;
  v31 = (uint64_t *)*a3;
  v32 = (uint64_t *)a3[1];
  if ((uint64_t *)*a3 == v32)
  {
    v75 = 0;
    v76 = 0;
  }
  else
  {
    do
    {
      v33 = a1[921];
      v35 = *(_QWORD *)(v33 + 288);
      v34 = *(_QWORD *)(v33 + 296);
      if (v34 != v35)
      {
        v36 = 0x86BCA1AF286BCA1BLL * ((v34 - v35) >> 3);
        v37 = *v31;
        do
        {
          v38 = v36 >> 1;
          v39 = v35 + 152 * (v36 >> 1);
          if (*(_QWORD *)v39 < v37 || *(_QWORD *)v39 == v37 && *(_DWORD *)(v39 + 8) < *((_DWORD *)v31 + 2))
          {
            v35 = v39 + 152;
            v38 = v36 + ~v38;
          }
          v36 = v38;
        }
        while (v38);
      }
      if (v35 != v34 && *(_QWORD *)v35 == *v31 && *(_DWORD *)(v35 + 8) == *((_DWORD *)v31 + 2))
      {
        *(_QWORD *)&v40.f64[0] = v31[4];
        v41 = *((int64x2_t *)v31 + 3);
        _D1 = v31[12];
        _Q2 = *((float64x2_t *)v31 + 5);
        v44 = *((int64x2_t *)v31 + 1);
        v45 = (float64x2_t)vzip1q_s64(v44, v41);
        _Q3 = (float64x2_t)vzip2q_s64(v44, v41);
        *(_QWORD *)&v40.f64[1] = v31[8];
        v47 = vextq_s8((int8x16_t)_Q3, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q2, 1), 8uLL);
        v48 = vzip1q_s64((int64x2_t)_Q2, (int64x2_t)_Q3);
        _D16 = *((double *)v31 + 16);
        _Q17 = *((float64x2_t *)v31 + 7);
        v51 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v45, vnegq_f64(_Q17).f64[0]), _Q3, _Q17, 1), v40, _D16, 0);
        *(_QWORD *)&_Q2.f64[0] = v31[11];
        __asm { FMLS            D3, D2, V17.D[1] }
        *(_QWORD *)&_Q2.f64[0] = vdupq_laneq_s64(v48, 1).u64[0];
        __asm { FMLS            D3, D1, V16.D[0] }
        *(_QWORD *)&_Q2.f64[1] = v47.i64[0];
        v47.i64[0] = v48.i64[0];
        _Q3.f64[1] = 1.0;
        v53 = *(float64x2_t *)(v35 + 16);
        v52 = *(float64x2_t *)(v35 + 32);
        v55 = *(float64x2_t *)(v35 + 48);
        v54 = *(float64x2_t *)(v35 + 64);
        v57 = *(float64x2_t *)(v35 + 80);
        v56 = *(float64x2_t *)(v35 + 96);
        v58 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v53.f64[0]), _Q2, v53, 1), v40, v52.f64[0]), v51, v52, 1);
        v59 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v47.u64[0], v53.f64[0]), (float64x2_t)v47.u64[1], v53, 1), (float64x2_t)_D1, v52.f64[0]), _Q3, v52, 1);
        v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v55.f64[0]), _Q2, v55, 1), v40, v54.f64[0]), v51, v54, 1);
        v61 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v47.u64[0], v55.f64[0]), (float64x2_t)v47.u64[1], v55, 1), (float64x2_t)_D1, v54.f64[0]), _Q3, v54, 1);
        v62 = vmlaq_laneq_f64(vmulq_n_f64(v45, v57.f64[0]), _Q2, v57, 1);
        v63 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v47.u64[0], v57.f64[0]), (float64x2_t)v47.u64[1], v57, 1);
        v65 = *(float64x2_t *)(v35 + 112);
        v64 = *(float64x2_t *)(v35 + 128);
        *(_OWORD *)object = *(_OWORD *)v31;
        *(float64x2_t *)&object[16] = v58;
        *(float64x2_t *)&object[32] = v59;
        v389 = (int64x2_t)v60;
        v390 = (int64x2_t)v61;
        v391 = vmlaq_laneq_f64(vmlaq_n_f64(v62, v40, v56.f64[0]), v51, v56, 1);
        v392 = vmlaq_laneq_f64(vmlaq_n_f64(v63, (float64x2_t)_D1, v56.f64[0]), _Q3, v56, 1);
        v393 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v65.f64[0]), _Q2, v65, 1), v40, v64.f64[0]), v51, v64, 1);
        v394 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v47.u64[0], v65.f64[0]), (float64x2_t)v47.u64[1], v65, 1), (float64x2_t)_D1, v64.f64[0]), _Q3, v64, 1);
        v66 = (int64x2_t *)__p;
        if (v397 != __p)
        {
          v67 = 0x8E38E38E38E38E39 * (((char *)v397 - (_BYTE *)__p) >> 4);
          do
          {
            v68 = v67 >> 1;
            v69 = &v66[9 * (v67 >> 1)];
            if (v69->i64[0] < *(_QWORD *)object
              || v69->i64[0] == *(_QWORD *)object && v69->i32[2] < *(_DWORD *)&object[8])
            {
              v66 = v69 + 9;
              v68 = v67 + ~v68;
            }
            v67 = v68;
          }
          while (v68);
        }
        if (v66 == v397 || v66->i64[0] != *(_QWORD *)object || v66->i32[2] != *(_DWORD *)&object[8])
          sub_20F052E54((char **)&__p, (uint64_t)v66, (uint64_t)object);
        v70 = *(_DWORD *)(v35 + 144);
        *(_OWORD *)object = *(_OWORD *)v31;
        v391 = *((float64x2_t *)v31 + 5);
        v392 = *((float64x2_t *)v31 + 6);
        v393 = *((float64x2_t *)v31 + 7);
        v394 = *((float64x2_t *)v31 + 8);
        *(_OWORD *)&object[16] = *((_OWORD *)v31 + 1);
        *(_OWORD *)&object[32] = *((_OWORD *)v31 + 2);
        v389 = *((int64x2_t *)v31 + 3);
        v390 = *((int64x2_t *)v31 + 4);
        v395 = v70;
        v71 = (char *)v399;
        if (v400 != v399)
        {
          v72 = 0x86BCA1AF286BCA1BLL * ((v400 - (_BYTE *)v399) >> 3);
          do
          {
            v73 = v72 >> 1;
            v74 = &v71[152 * (v72 >> 1)];
            if (*(_QWORD *)v74 < *(_QWORD *)object
              || *(_QWORD *)v74 == *(_QWORD *)object && *((_DWORD *)v74 + 2) < *(_DWORD *)&object[8])
            {
              v71 = v74 + 152;
              v73 = v72 + ~v73;
            }
            v72 = v73;
          }
          while (v73);
        }
        if (v71 == v400 || *(_QWORD *)v71 != *(_QWORD *)object || *((_DWORD *)v71 + 2) != *(_DWORD *)&object[8])
          sub_20F0529EC((uint64_t *)&v399, v71, (uint64_t *)object);
      }
      v31 += 18;
    }
    while (v31 != v32);
    v76 = (char *)v399;
    v75 = v400;
  }
  v77 = (_QWORD *)a1[921];
  v78 = 0x86BCA1AF286BCA1BLL * ((v75 - v76) >> 3);
  v79 = v77[38];
  v80 = (_QWORD *)v77[36];
  if (0x86BCA1AF286BCA1BLL * ((v79 - (uint64_t)v80) >> 3) < v78)
  {
    if (v80)
    {
      v77[37] = v80;
      operator delete(v80);
      v79 = 0;
      v77[36] = 0;
      v77[37] = 0;
      v77[38] = 0;
    }
    if (v78 > 0x1AF286BCA1AF286)
      goto LABEL_347;
    v81 = 0x86BCA1AF286BCA1BLL * (v79 >> 3);
    v82 = 2 * v81;
    if (2 * v81 <= v78)
      v82 = 0x86BCA1AF286BCA1BLL * ((v75 - v76) >> 3);
    v83 = v81 >= 0xD79435E50D7943 ? 0x1AF286BCA1AF286 : v82;
    if (v83 > 0x1AF286BCA1AF286)
LABEL_347:
      sub_20E867F44();
    v84 = (char *)operator new(152 * v83);
    v85 = v77 + 37;
    v77[36] = v84;
    v77[37] = v84;
    v77[38] = &v84[152 * v83];
    v86 = v84;
    if (v76 != v75)
    {
      v86 = v84;
      do
      {
        *(_OWORD *)v86 = *(_OWORD *)v76;
        v87 = *((_OWORD *)v76 + 8);
        v89 = *((_OWORD *)v76 + 5);
        v88 = *((_OWORD *)v76 + 6);
        *((_OWORD *)v86 + 7) = *((_OWORD *)v76 + 7);
        *((_OWORD *)v86 + 8) = v87;
        *((_OWORD *)v86 + 5) = v89;
        *((_OWORD *)v86 + 6) = v88;
        v90 = *((_OWORD *)v76 + 1);
        v91 = *((_OWORD *)v76 + 2);
        v92 = *((_OWORD *)v76 + 4);
        *((_OWORD *)v86 + 3) = *((_OWORD *)v76 + 3);
        *((_OWORD *)v86 + 4) = v92;
        *((_OWORD *)v86 + 1) = v90;
        *((_OWORD *)v86 + 2) = v91;
        *((_DWORD *)v86 + 36) = *((_DWORD *)v76 + 36);
        v86 += 152;
        v76 += 152;
      }
      while (v76 != v75);
    }
    goto LABEL_76;
  }
  v85 = v77 + 37;
  v93 = (_QWORD *)v77[37];
  if (0x86BCA1AF286BCA1BLL * (v93 - v80) >= v78)
  {
    v86 = (char *)v77[36];
    if (v76 != v75)
    {
      v110 = v77[36];
      do
      {
        v111 = *(_QWORD *)v76;
        *(_DWORD *)(v110 + 8) = *((_DWORD *)v76 + 2);
        *(_QWORD *)v110 = v111;
        v112 = *((_OWORD *)v76 + 8);
        v114 = *((_OWORD *)v76 + 5);
        v113 = *((_OWORD *)v76 + 6);
        *(_OWORD *)(v110 + 112) = *((_OWORD *)v76 + 7);
        *(_OWORD *)(v110 + 128) = v112;
        *(_OWORD *)(v110 + 80) = v114;
        *(_OWORD *)(v110 + 96) = v113;
        v115 = *((_OWORD *)v76 + 1);
        v116 = *((_OWORD *)v76 + 2);
        v117 = *((_OWORD *)v76 + 4);
        *(_OWORD *)(v110 + 48) = *((_OWORD *)v76 + 3);
        *(_OWORD *)(v110 + 64) = v117;
        *(_OWORD *)(v110 + 16) = v115;
        *(_OWORD *)(v110 + 32) = v116;
        *(_DWORD *)(v110 + 144) = *((_DWORD *)v76 + 36);
        v86 += 152;
        v76 += 152;
        v110 += 152;
      }
      while (v76 != v75);
    }
LABEL_76:
    *v85 = v86;
    if ((a4 & 1) == 0)
      goto LABEL_172;
LABEL_77:
    kdebug_trace();
    v118 = a1[921];
    if (*(_BYTE *)(v118 + 1200))
    {
      if (!*(_BYTE *)((*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1) + 10288))
      {
        v126 = 0;
        v118 = a1[921];
        goto LABEL_96;
      }
      v119 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
      v118 = a1[921];
      if (*(_QWORD *)(v119 + 10208))
      {
        if (!*(_BYTE *)(v118 + 1200))
          sub_20E866B34();
        v121 = *a3;
        v120 = a3[1];
        if (v120 != *a3)
        {
          v122 = 0x8E38E38E38E38E39 * ((v120 - *a3) >> 4);
          v123 = *(_QWORD *)(v118 + 1184);
          do
          {
            v124 = v122 >> 1;
            v125 = v121 + 144 * (v122 >> 1);
            if (*(_QWORD *)v125 < v123 || *(_QWORD *)v125 == v123 && *(_DWORD *)(v125 + 8) < *(_DWORD *)(v118 + 1192))
            {
              v121 = v125 + 144;
              v124 = v122 + ~v124;
            }
            v122 = v124;
          }
          while (v124);
        }
        if (v121 == v120
          || *(_QWORD *)v121 != *(_QWORD *)(v118 + 1184)
          || *(_DWORD *)(v121 + 8) != *(_DWORD *)(v118 + 1192))
        {
          v121 = a3[1];
        }
        v126 = v121 != v120;
LABEL_96:
        sub_20F408600(*(_QWORD *)(v118 + 160));
        if (v126)
        {
          v128 = a1[921];
          v130 = *a3;
          v129 = a3[1];
          if (!*(_QWORD *)(v128 + 1288))
            goto LABEL_151;
          v131 = *(_QWORD *)(v128 + 1280);
          if (v131)
          {
            v132 = *(_QWORD *)(v128 + 1248);
            v133 = v131 - 1;
            v134 = v132 + 496 * (v131 - 1);
            if (!*(_BYTE *)(v134 + 480))
              goto LABEL_151;
          }
          else
          {
            v132 = *(_QWORD *)(v128 + 1248);
            v133 = 0xEF7BDEF7BDEF7BDFLL * ((*(_QWORD *)(v128 + 1256) - v132) >> 4) - 1;
            v134 = v132 + 496 * v133;
            if (!*(_BYTE *)(v134 + 480))
              goto LABEL_151;
          }
          v161 = *(_QWORD *)(v128 + 23216);
          v162 = *(_QWORD **)(v161 + 4864);
          v163 = (int *)v162[310];
          v164 = v162[311] - (_QWORD)v163;
          if ((v164 & 0x3FFFFFFFCLL) != 0)
          {
            v165 = 0;
            v166 = (_QWORD *)(v134 + 168);
            v167 = (v164 >> 2);
            while (*(_DWORD *)(v132 + 496 * v133 + 16) != v163[v165])
            {
              if (v167 == ++v165)
                goto LABEL_151;
            }
            v170 = (uint64_t *)(v132 + 496 * v133 + 144);
            v168 = *v170;
            v169 = v170[1];
            v171 = v169 - *v170;
            if (v169 != *v170 && v129 != v130)
            {
              v172 = 0;
              v173 = v162[285] + 168 * v165;
              v174 = *(int8x16_t *)v173;
              v175 = *(double *)(v173 + 16);
              *(_QWORD *)&v176 = vextq_s8(v174, v174, 8uLL).u64[0];
              v177 = *(int8x16_t *)(v173 + 24);
              v178 = *(double *)(v173 + 40);
              *(_QWORD *)&v179 = vextq_s8(v177, v177, 8uLL).u64[0];
              _Q18 = *(int8x16_t *)(v173 + 48);
              v181 = *(double *)(v173 + 64);
              *(_QWORD *)&v182 = vextq_s8(_Q18, _Q18, 8uLL).u64[0];
              v127.f64[0] = *(float64_t *)(v173 + 160);
              _Q20.f64[0] = v175;
              _Q20.f64[1] = v178;
              v184 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v173, (int64x2_t)v177), *(double *)(v173 + 144)), (float64x2_t)vzip2q_s64(*(int64x2_t *)v173, (int64x2_t)v177), *(float64x2_t *)(v173 + 144), 1), _Q20, v127.f64[0]);
              _D6 = *(_QWORD *)(v173 + 152);
              __asm { FMLA            D20, D6, V18.D[1] }
              v127.f64[0] = _Q20.f64[0] + v181 * v127.f64[0];
              v186 = (__n128)vnegq_f64(v184);
              *(_QWORD *)&v127.f64[0] = *(_OWORD *)&vnegq_f64(v127);
              v187 = v171 >> 4;
              while (1)
              {
                v188 = (uint64_t *)(v168 + 16 * v172);
                v189 = *v188;
                v190 = *((_DWORD *)v188 + 2);
                v191 = *a3;
                v192 = 0x8E38E38E38E38E39 * ((v129 - v130) >> 4);
                do
                {
                  v193 = v192 >> 1;
                  v194 = v191 + 144 * (v192 >> 1);
                  if (*(_QWORD *)v194 < v189 || *(_QWORD *)v194 == v189 && *(_DWORD *)(v194 + 8) < v190)
                  {
                    v191 = v194 + 144;
                    v193 = v192 + ~v193;
                  }
                  v192 = v193;
                }
                while (v193);
                if (v191 != v129 && *(_QWORD *)v191 == v189 && *(_DWORD *)(v191 + 8) == v190)
                  break;
                if (++v172 == v187)
                  goto LABEL_151;
              }
              v195 = (float64x2_t *)(*v166 + (v172 << 7));
              _Q19 = v195[1];
              v198 = v195[2];
              v197 = v195[3];
              v200 = v195[4];
              v199 = v195[5];
              v202 = v195[6];
              v201 = v195[7];
              v204 = *(float64x2_t *)(v191 + 16);
              v203 = *(float64x2_t *)(v191 + 32);
              v206 = *(float64x2_t *)(v191 + 48);
              v205 = *(float64x2_t *)(v191 + 64);
              v207 = *(float64x2_t *)(v191 + 80);
              v208 = *(float64x2_t *)(v191 + 96);
              v210 = *(float64x2_t *)(v191 + 112);
              v209 = *(float64x2_t *)(v191 + 128);
              v211 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v195, v204.f64[0]), v198, v204, 1), v200, v203.f64[0]), v202, v203, 1);
              v212 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q19, v204.f64[0]), v197, v204, 1), v199, v203.f64[0]), v201, v203, 1);
              v213 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v195, v206.f64[0]), v198, v206, 1), v200, v205.f64[0]), v202, v205, 1);
              v214 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q19, v206.f64[0]), v197, v206, 1), v199, v205.f64[0]), v201, v205, 1);
              _Q27 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v195, v207.f64[0]), v198, v207, 1), v200, v208.f64[0]), v202, v208, 1);
              *(_QWORD *)&v205.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q19, v207.f64[0]), v197, v207, 1), v199, v208.f64[0]), v201, v208, 1);
              _Q23 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v195, v210.f64[0]), v198, v210, 1), v200, v209.f64[0]), v202, v209, 1);
              *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q19, v210.f64[0]), v197, v210, 1), v199, v209.f64[0]), v201, v209, 1);
              v217 = (float64x2_t)vzip1q_s64(v211, v213);
              v218 = (float64x2_t)vzip2q_s64(v211, v213);
              v219 = (float64x2_t)vzip1q_s64(v212, v214);
              v220 = vextq_s8((int8x16_t)v218, (int8x16_t)vdupq_laneq_s64(_Q27, 1), 8uLL);
              *(_QWORD *)&v221 = *(_QWORD *)&_Q19.f64[0] ^ 0x8000000000000000;
              v222 = vmlaq_f64(vmlaq_f64(vmulq_f64(v217, (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q23.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q23.f64[1] ^ 0x8000000000000000), v218), (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q19.f64[0] ^ 0x8000000000000000), v219);
              *(_QWORD *)&_Q19.f64[0] = *(_QWORD *)&_Q23.f64[1] ^ 0x8000000000000000;
              __asm { FMLA            D23, D19, V27.D[1] }
              _Q23.f64[0] = vmlad_n_f64(_Q23.f64[0], v221, v205.f64[0]);
              *(_QWORD *)&v202.f64[0] = vdupq_lane_s64(*(uint64_t *)&v218.f64[0], 0).u64[0];
              *(_QWORD *)&v202.f64[1] = v220.i64[0];
              _Q23.f64[1] = 1.0;
              v223 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v217, *(double *)v174.i64), v202, *(double *)v177.i64), v219, *(double *)_Q18.i64), (float64x2_t)0, v222);
              v224 = (__n128)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q27.u64[0], *(double *)v174.i64), (float64x2_t)v220.u64[1], *(double *)v177.i64), (float64x2_t)*(unint64_t *)&v205.f64[0], *(double *)_Q18.i64), (float64x2_t)0, _Q23);
              v225 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v217, v176), v202, v179), v219, v182), (float64x2_t)0, v222);
              v226 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q27.u64[0], v176), (float64x2_t)v220.u64[1], v179), (float64x2_t)*(unint64_t *)&v205.f64[0], v182), (float64x2_t)0, _Q23);
              v227 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v217, v175), v202, v178), v219, v181), (float64x2_t)0, v222);
              *(_QWORD *)&v228.f64[0] = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)_Q27.u64[0], v175), (float64x2_t)v220.u64[1], v178), (float64x2_t)*(unint64_t *)&v205.f64[0], v181), (float64x2_t)0, _Q23);
              v229 = (int8x16_t)vaddq_f64(v222, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v217, v186.n128_f64[0]), v202, (float64x2_t)v186, 1), v219, v127.f64[0]));
              v230.i64[0] = *(_OWORD *)&vaddq_f64(_Q23, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)_Q27.u64[0], v186.n128_f64[0]), (float64x2_t)v220.u64[1], (float64x2_t)v186, 1), (float64x2_t)*(unint64_t *)&v205.f64[0], v127.f64[0]));
              v231 = *v163;
              v232.i64[0] = vextq_s8(v229, v229, 8uLL).u64[0];
              if (*(_BYTE *)(v161 + 1043)
                && ((v233 = *(_QWORD **)(v161 + 4848), (v234 = v233[106]) == 0)
                  ? (v382 = v233[103], v235 = v233[102], v234 = 0x8F9C18F9C18F9C19 * ((v382 - v235) >> 3))
                  : (v235 = v233[102]),
                    !*(_BYTE *)(v235 + 328 * v234 - 40)))
              {
                v419[0] = 0.0;
                v232.i64[1] = v232.i64[0];
                *(int64x2_t *)object = vzip1q_s64(v223, v225);
                *(float64_t *)&object[16] = v227.f64[0];
                *(_QWORD *)&object[24] = v229.i64[0];
                *(int64x2_t *)&object[32] = vzip2q_s64(v223, v225);
                v389 = vzip2q_s64((int64x2_t)v227, v232);
                *(_QWORD *)&v228.f64[1] = v230.i64[0];
                v390 = vzip1q_s64((int64x2_t)v224, (int64x2_t)v226);
                v391 = v228;
                sub_20F02E93C((uint64_t)object, v419, &v408, v228.f64[0], *(double *)v230.i64, *(double *)v390.i64, v226.f64[0], *(double *)&object[32], v227.f64[0], (int64x2_t)v186);
                v383 = __sincos_stret(v419[0]);
                *(double *)v230.i64 = v383.__cosval;
                v228.f64[0] = v383.__sinval;
                *(double *)v281.i64 = -v383.__sinval;
                v406 = 0uLL;
                *(_QWORD *)&v226.f64[0] = v408;
                *(_QWORD *)&v276.f64[0] = rep;
                *(_QWORD *)&v227.f64[0] = v410;
                *(double *)oslog = v383.__cosval;
                *(double *)&oslog[8] = v383.__sinval;
                *(_QWORD *)&oslog[16] = 0;
                *(_QWORD *)&oslog[24] = v408;
                *(double *)&oslog[32] = -v383.__sinval;
                *(double *)&oslog[40] = v383.__cosval;
                v405.i64[0] = 0;
                v405.i64[1] = rep;
                v407.f64[0] = 1.0;
                *(_QWORD *)&v407.f64[1] = v410;
              }
              else
              {
                v232.i64[1] = v232.i64[0];
                *(int64x2_t *)oslog = vzip1q_s64(v223, v225);
                *(float64_t *)&oslog[16] = v227.f64[0];
                *(_QWORD *)&oslog[24] = v229.i64[0];
                v276 = (float64x2_t)vzip2q_s64(v223, v225);
                *(float64x2_t *)&oslog[32] = v276;
                v405 = vzip2q_s64((int64x2_t)v227, v232);
                v281 = vzip1q_s64((int64x2_t)v224, (int64x2_t)v226);
                *(_QWORD *)&v228.f64[1] = v230.i64[0];
                v406 = v281;
                v407 = v228;
              }
              goto LABEL_170;
            }
          }
LABEL_151:
          if (!*(_BYTE *)(v128 + 1200))
            sub_20E866B34();
          if (v129 != v130)
          {
            v236 = 0x8E38E38E38E38E39 * ((v129 - v130) >> 4);
            v237 = *(_QWORD *)(v128 + 1184);
            do
            {
              v238 = v236 >> 1;
              v239 = v130 + 144 * (v236 >> 1);
              if (*(_QWORD *)v239 < v237 || *(_QWORD *)v239 == v237 && *(_DWORD *)(v239 + 8) < *(_DWORD *)(v128 + 1192))
              {
                v130 = v239 + 144;
                v238 = v236 + ~v238;
              }
              v236 = v238;
            }
            while (v238);
          }
          if (v130 == v129
            || *(_QWORD *)v130 != *(_QWORD *)(v128 + 1184)
            || *(_DWORD *)(v130 + 8) != *(_DWORD *)(v128 + 1192))
          {
            v130 = a3[1];
          }
          sub_20F13315C(*(_QWORD *)(v128 + 23216), (uint64_t)object);
          v241 = *(float64x2_t *)(v130 + 16);
          v240 = *(float64x2_t *)(v130 + 32);
          _Q19 = *(float64x2_t *)(v130 + 48);
          v242 = *(float64x2_t *)(v130 + 64);
          v245 = *(float64x2_t *)(v130 + 80);
          v244 = *(float64x2_t *)(v130 + 96);
          v247 = *(float64x2_t *)(v130 + 112);
          v246 = *(float64x2_t *)(v130 + 128);
          v248 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v241.f64[0]), *(float64x2_t *)&object[32], v241, 1), (float64x2_t)v390, v240.f64[0]), v392, v240, 1);
          _Q25 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v241.f64[0]), (float64x2_t)v389, v241, 1), v391, v240.f64[0]), v393, v240, 1);
          v250 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, _Q19.f64[0]), *(float64x2_t *)&object[32], _Q19, 1), (float64x2_t)v390, v242.f64[0]), v392, v242, 1);
          v251 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], _Q19.f64[0]), (float64x2_t)v389, _Q19, 1), v391, v242.f64[0]), v393, v242, 1);
          _Q4 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v245.f64[0]), *(float64x2_t *)&object[32], v245, 1), (float64x2_t)v390, v244.f64[0]), v392, v244, 1);
          *(_QWORD *)&v242.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v245.f64[0]), (float64x2_t)v389, v245, 1), v391, v244.f64[0]), v393, v244, 1);
          _Q5 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)object, v247.f64[0]), *(float64x2_t *)&object[32], v247, 1), (float64x2_t)v390, v246.f64[0]), v392, v246, 1);
          v254 = *(_OWORD *)&vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)&object[16], v247.f64[0]), (float64x2_t)v389, v247, 1), v391, v246.f64[0]), v393, v246, 1);
          v228 = (float64x2_t)vzip1q_s64(v248, v250);
          v255 = (float64x2_t)vzip2q_s64(v248, v250);
          v278 = (float64x2_t)vzip1q_s64(_Q25, v251);
          v256 = vextq_s8((int8x16_t)v255, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
          v257 = vmlaq_f64(vmlaq_f64(vmulq_f64(v228, (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q5.f64[0] ^ 0x8000000000000000)), (float64x2_t)vdupq_n_s64(*(_QWORD *)&_Q5.f64[1] ^ 0x8000000000000000), v255), (float64x2_t)vdupq_n_s64(v254 ^ 0x8000000000000000), v278);
          *(_QWORD *)&_Q5.f64[0] = *(_QWORD *)&_Q5.f64[1] ^ 0x8000000000000000;
          __asm { FMLA            D3, D5, V4.D[1] }
          v226.f64[0] = vmlad_n_f64(_D3, COERCE_DOUBLE(v254 ^ 0x8000000000000000), v242.f64[0]);
          *(_QWORD *)&v227.f64[0] = vdupq_lane_s64(*(uint64_t *)&v255.f64[0], 0).u64[0];
          *(_QWORD *)&v227.f64[1] = v256.i64[0];
          v186 = (__n128)v254;
          v186.n128_u64[0] = v256.u64[1];
          v224 = (__n128)*(unint64_t *)&v242.f64[0];
          v256.i64[0] = _Q4.i64[0];
          v226.f64[1] = 1.0;
          v259 = *(_QWORD *)(v128 + 23216);
          v260 = *(_QWORD *)(v259 + 4864);
          v261 = *(_QWORD *)(v260 + 2280);
          _Q19.f64[0] = *(float64_t *)(v261 + 16);
          v245.f64[0] = *(float64_t *)(v261 + 40);
          v262 = *(float64x2_t *)(v261 + 24);
          v247.f64[0] = *(float64_t *)(v261 + 64);
          _Q26 = *(float64x2_t *)(v261 + 48);
          v248.i64[0] = *(_QWORD *)(v261 + 160);
          v264 = vmulq_n_f64(v228, _Q19.f64[0]);
          v276 = vmulq_n_f64((float64x2_t)_Q4.u64[0], _Q19.f64[0]);
          _Q19.f64[1] = v245.f64[0];
          v265 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v261, (int64x2_t)v262), *(double *)(v261 + 144)), (float64x2_t)vzip2q_s64(*(int64x2_t *)v261, (int64x2_t)v262), *(float64x2_t *)(v261 + 144), 1), _Q19, *(double *)v248.i64);
          _Q25.i64[0] = *(_QWORD *)(v261 + 152);
          __asm { FMLA            D19, D25, V26.D[1] }
          v266 = _Q19.f64[0] + v247.f64[0] * *(double *)v248.i64;
          v267 = vmlaq_n_f64(vmulq_n_f64(v228, *(double *)v261), v227, v262.f64[0]);
          v268 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v256.u64[0], *(double *)v261), (float64x2_t)v256.u64[1], v262.f64[0]);
          v269 = vmlaq_laneq_f64(vmulq_laneq_f64(v228, *(float64x2_t *)v261, 1), v227, v262, 1);
          v270 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v256.u64[0], *(float64x2_t *)v261, 1), (float64x2_t)v256.u64[1], v262, 1);
          *(_QWORD *)&v262.f64[0] = *(_OWORD *)&vnegq_f64(v265);
          v271 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(v267, v278, _Q26.f64[0]), (float64x2_t)0, v257);
          v272 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(v268, (float64x2_t)v224.n128_u64[0], _Q26.f64[0]), (float64x2_t)0, v226);
          v273 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(v269, v278, _Q26, 1), (float64x2_t)0, v257);
          v274 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(v270, (float64x2_t)v224.n128_u64[0], _Q26, 1), (float64x2_t)0, v226);
          v275 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v264, v227, v245.f64[0]), v278, v247.f64[0]), (float64x2_t)0, v257);
          *(_QWORD *)&v276.f64[0] = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v276, (float64x2_t)v256.u64[1], v245.f64[0]), (float64x2_t)v224.n128_u64[0], v247.f64[0]), (float64x2_t)0, v226);
          v277 = (int8x16_t)vaddq_f64(v257, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v228, v262.f64[0]), v227, v265, 1), v278, v266, 0));
          *(_QWORD *)&v228.f64[0] = *(_OWORD *)&vaddq_f64(v226, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)v256.u64[0], v262.f64[0]), (float64x2_t)v256.u64[1], v265, 1), (float64x2_t)v224.n128_u64[0], v266, 0));
          v231 = **(_DWORD **)(v260 + 2480);
          *(_QWORD *)&v278.f64[0] = vextq_s8(v277, v277, 8uLL).u64[0];
          if (!*(_BYTE *)(v259 + 1043))
            goto LABEL_167;
          v279 = *(_QWORD **)(v259 + 4848);
          v280 = v279[106];
          if (v280)
          {
            if (*(_BYTE *)(v279[102] + 328 * v280 - 40))
            {
LABEL_167:
              v278.f64[1] = v278.f64[0];
              *(int64x2_t *)oslog = vzip1q_s64(v271, v273);
              *(_QWORD *)&oslog[16] = v275.i64[0];
              *(_QWORD *)&oslog[24] = v277.i64[0];
              v281 = vzip2q_s64(v271, v273);
              *(int64x2_t *)&oslog[32] = v281;
              v405 = vzip2q_s64(v275, (int64x2_t)v278);
              v230 = vzip1q_s64(v272, v274);
              v276.f64[1] = v228.f64[0];
              v406 = v230;
              v407 = v276;
LABEL_170:
              sub_20F02D044((uint64_t)object, v128, v231, (uint64_t)oslog, 1, v228.f64[0], *(double *)v230.i64, *(double *)v281.i64, v226.f64[0], v276.f64[0], v227.f64[0], v186, v224);
LABEL_171:
              kdebug_trace();
              goto LABEL_172;
            }
          }
          else if (*(_BYTE *)(v279[102] + 8 * ((uint64_t)(v279[103] - v279[102]) >> 3) - 40))
          {
            goto LABEL_167;
          }
          v419[0] = 0.0;
          v278.f64[1] = v278.f64[0];
          *(int64x2_t *)object = vzip1q_s64(v271, v273);
          *(_QWORD *)&object[16] = v275.i64[0];
          *(_QWORD *)&object[24] = v277.i64[0];
          *(int64x2_t *)&object[32] = vzip2q_s64(v271, v273);
          v389 = vzip2q_s64(v275, (int64x2_t)v278);
          v276.f64[1] = v228.f64[0];
          v390 = vzip1q_s64(v272, v274);
          v391 = v276;
          sub_20F02E93C((uint64_t)object, v419, &v408, v228.f64[0], *(double *)v390.i64, *(double *)&object[32], v226.f64[0], v276.f64[0], v227.f64[0], (int64x2_t)v186);
          v282 = __sincos_stret(v419[0]);
          *(double *)v230.i64 = v282.__cosval;
          v228.f64[0] = v282.__sinval;
          *(double *)v281.i64 = -v282.__sinval;
          v406 = 0uLL;
          *(_QWORD *)&v226.f64[0] = v408;
          *(_QWORD *)&v276.f64[0] = rep;
          *(_QWORD *)&v227.f64[0] = v410;
          *(double *)oslog = v282.__cosval;
          *(double *)&oslog[8] = v282.__sinval;
          *(_QWORD *)&oslog[16] = 0;
          *(_QWORD *)&oslog[24] = v408;
          *(double *)&oslog[32] = -v282.__sinval;
          *(double *)&oslog[40] = v282.__cosval;
          v405.i64[0] = 0;
          v405.i64[1] = rep;
          v407.f64[0] = 1.0;
          *(_QWORD *)&v407.f64[1] = v410;
          goto LABEL_170;
        }
        v135 = (*(uint64_t (**)(_QWORD *))(*a1 + 288))(a1);
        if (v136)
        {
          object[0] = 0;
          LOBYTE(v394.f64[0]) = 0;
          v137 = *(uint64_t **)(v135 + 24);
          v138 = *(uint64_t **)(v135 + 32);
          if (v137 != v138 && v397 != __p)
          {
            while (1)
            {
              v139 = *v137;
              v140 = *((_DWORD *)v137 + 2);
              v141 = (int64x2_t *)__p;
              v142 = 0x8E38E38E38E38E39 * (((char *)v397 - (_BYTE *)__p) >> 4);
              do
              {
                v143 = v142 >> 1;
                i8 = v141[9 * (v142 >> 1)].i8;
                if (*(_QWORD *)i8 < v139 || *(_QWORD *)i8 == v139 && *((_DWORD *)i8 + 2) < v140)
                {
                  v141 = (int64x2_t *)(i8 + 144);
                  v143 = v142 + ~v143;
                }
                v142 = v143;
              }
              while (v143);
              if (v141 != v397 && v141->i64[0] == v139 && v141->i32[2] == v140)
                break;
              v137 += 5;
              if (v137 == v138)
                goto LABEL_117;
            }
            v145 = (float64x2_t)v141[6];
            v390 = v141[5];
            v391 = v145;
            v146 = (float64x2_t)v141[8];
            v392 = (float64x2_t)v141[7];
            v393 = v146;
            v147 = v141[2];
            *(int64x2_t *)object = v141[1];
            *(int64x2_t *)&object[16] = v147;
            v148 = (float64x2_t)v141[4];
            *(int64x2_t *)&object[32] = v141[3];
            v389 = (int64x2_t)v148;
            LOBYTE(v394.f64[0]) = 1;
          }
LABEL_117:
          *(_OWORD *)oslog = *(_OWORD *)v135;
          *(_QWORD *)&oslog[16] = *(_QWORD *)(v135 + 16);
          oslog[24] = 1;
          if (sub_20F030720(a1, 0, (uint64_t)oslog, (uint64_t)object, 1))
            goto LABEL_171;
          sub_20F02E848(&v417);
          if (**(int **)(v417 + 56) > 3)
            goto LABEL_171;
          v149 = *(unsigned __int8 *)(v417 + 72);
          v150 = sub_20E8C31DC(v417, "OSLogSurrogateAppender", 1, 0);
          v151 = v150;
          if (!v149 && !v150)
            goto LABEL_171;
          v408 = &v417;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v410 = std::chrono::system_clock::now().__d_.__rep_;
          v411 = 3;
          v412 = "unknown file";
          v413 = 3485;
          v415 = 0;
          v416 = 0;
          v414 = "unknown function";
          v152 = *v408;
          v384 = *v408;
          if (*(char *)(*v408 + 39) < 0)
          {
            v154 = *(const char **)(v152 + 16);
            v153 = *(_QWORD *)(v152 + 24);
          }
          else
          {
            v153 = *(unsigned __int8 *)(*v408 + 39);
            v154 = (const char *)(v152 + 16);
          }
          v387 = v152 + 16;
          v333 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v333 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)oslog);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
            if (oslog[24] && (oslog[23] & 0x80000000) != 0)
              operator delete(*(void **)oslog);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v334 = byte_254A4A4F8;
          else
            v334 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v335 = byte_254A4A4F8[23];
          else
            v335 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)oslog = os_log_create(v334, v154);
          v336 = &oslog[8];
          if (v335 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v335 >= 0x17)
          {
            v337 = v151;
            v338 = v154;
            v339 = v149;
            v340 = a2;
            v341 = (v335 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v335 | 7) != 0x17)
              v341 = v335 | 7;
            v342 = v341 + 1;
            v336 = operator new(v341 + 1);
            *(_QWORD *)&oslog[16] = v335;
            *(_QWORD *)&oslog[24] = v342 | 0x8000000000000000;
            *(_QWORD *)&oslog[8] = v336;
            a2 = v340;
            v149 = v339;
            v154 = v338;
            v151 = v337;
          }
          else
          {
            oslog[31] = v335;
            if (!v335)
            {
LABEL_275:
              v336[v335] = 0;
              oslog[32] = 1;
              v343 = &oslog[40];
              if (v153 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v153 >= 0x17)
              {
                v344 = (v153 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v153 | 7) != 0x17)
                  v344 = v153 | 7;
                v345 = v344 + 1;
                v343 = operator new(v344 + 1);
                v405.i64[0] = v153;
                v405.i64[1] = v345 | 0x8000000000000000;
                *(_QWORD *)&oslog[40] = v343;
              }
              else
              {
                v405.i8[15] = v153;
                if (!v153)
                  goto LABEL_283;
              }
              memmove(v343, v154, v153);
LABEL_283:
              v343[v153] = 0;
              v406.i8[0] = 1;
              v346 = *(NSObject **)oslog;
              if (v405.i8[15] < 0)
                operator delete(*(void **)&oslog[40]);
              if (oslog[32] && (oslog[31] & 0x80000000) != 0)
                operator delete(*(void **)&oslog[8]);
              if (*(_QWORD *)oslog)
                os_release(*(void **)oslog);
              if (v151 && *(_QWORD *)(v151 + 24))
              {
                v347 = _os_log_pack_size();
                v348 = (std::__shared_weak_count_vtbl *)operator new(v347, (std::align_val_t)8uLL);
                v349 = (std::__shared_weak_count *)operator new();
                v350 = v349;
                v349->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v349->__shared_owners_;
                v349->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v349->__shared_weak_owners_ = 0;
                v349[1].__vftable = v348;
                *(_QWORD *)oslog = v348;
                *(_QWORD *)&oslog[8] = v348;
                *(_QWORD *)&oslog[16] = v349;
                do
                  v352 = __ldxr(p_shared_owners);
                while (__stxr(v352 + 1, p_shared_owners));
                memset(&oslog[24], 0, 24);
                do
                  v353 = __ldaxr(p_shared_owners);
                while (__stlxr(v353 - 1, p_shared_owners));
                if (!v353)
                {
                  ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                  std::__shared_weak_count::__release_weak(v350);
                }
                v354 = *(_QWORD *)oslog;
                *(_WORD *)_os_log_pack_fill() = 0;
                v355 = operator new();
                v356 = *(unsigned __int8 *)(v384 + 39);
                v357 = *(_QWORD *)(v384 + 16);
                v358 = *(_QWORD *)(v384 + 24);
                v359 = *(_OWORD *)&oslog[24];
                *(_OWORD *)(v355 + 8) = *(_OWORD *)&oslog[8];
                if ((v356 & 0x80u) != 0)
                  v356 = v358;
                else
                  v357 = v387;
                *(_QWORD *)v355 = v354;
                *(_QWORD *)&oslog[8] = 0;
                *(_QWORD *)&oslog[16] = 0;
                *(_OWORD *)(v355 + 24) = v359;
                *(_QWORD *)&oslog[24] = 0;
                *(_QWORD *)&oslog[32] = 0;
                *(_QWORD *)(v355 + 40) = v357;
                *(_QWORD *)(v355 + 48) = v356;
                *(_BYTE *)(v355 + 56) = 1;
                v418 = 0;
                *(_QWORD *)&v419[0] = v355;
                (*(void (**)(_QWORD, double *))(**(_QWORD **)(v151 + 24) + 40))(*(_QWORD *)(v151 + 24), v419);
                v360 = v419[0];
                v419[0] = 0.0;
                if (v360 != 0.0)
                {
                  v361 = *(std::__shared_weak_count **)(*(_QWORD *)&v360 + 32);
                  if (v361)
                  {
                    v362 = (unint64_t *)&v361->__shared_owners_;
                    do
                      v363 = __ldaxr(v362);
                    while (__stlxr(v363 - 1, v362));
                    if (!v363)
                    {
                      ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                      std::__shared_weak_count::__release_weak(v361);
                    }
                  }
                  v364 = *(std::__shared_weak_count **)(*(_QWORD *)&v360 + 16);
                  if (v364)
                  {
                    v365 = (unint64_t *)&v364->__shared_owners_;
                    do
                      v366 = __ldaxr(v365);
                    while (__stlxr(v366 - 1, v365));
                    if (!v366)
                    {
                      ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                      std::__shared_weak_count::__release_weak(v364);
                    }
                  }
                  MEMORY[0x212BC6398](*(_QWORD *)&v360, 0x10F0C40B62ED6C6);
                  v367 = v418;
                  v418 = 0;
                  if (v367)
                  {
                    v368 = *(std::__shared_weak_count **)(v367 + 32);
                    if (v368)
                    {
                      v369 = (unint64_t *)&v368->__shared_owners_;
                      do
                        v370 = __ldaxr(v369);
                      while (__stlxr(v370 - 1, v369));
                      if (!v370)
                      {
                        ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                        std::__shared_weak_count::__release_weak(v368);
                      }
                    }
                    v371 = *(std::__shared_weak_count **)(v367 + 16);
                    if (v371)
                    {
                      v372 = (unint64_t *)&v371->__shared_owners_;
                      do
                        v373 = __ldaxr(v372);
                      while (__stlxr(v373 - 1, v372));
                      if (!v373)
                      {
                        ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                        std::__shared_weak_count::__release_weak(v371);
                      }
                    }
                    MEMORY[0x212BC6398](v367, 0x10F0C40B62ED6C6);
                  }
                }
                v374 = *(std::__shared_weak_count **)&oslog[32];
                if (*(_QWORD *)&oslog[32])
                {
                  v375 = (unint64_t *)(*(_QWORD *)&oslog[32] + 8);
                  do
                    v376 = __ldaxr(v375);
                  while (__stlxr(v376 - 1, v375));
                  if (!v376)
                  {
                    ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                    std::__shared_weak_count::__release_weak(v374);
                  }
                }
                v377 = *(std::__shared_weak_count **)&oslog[16];
                if (*(_QWORD *)&oslog[16])
                {
                  v378 = (unint64_t *)(*(_QWORD *)&oslog[16] + 8);
                  do
                    v379 = __ldaxr(v378);
                  while (__stlxr(v379 - 1, v378));
                  if (!v379)
                  {
                    ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                    std::__shared_weak_count::__release_weak(v377);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v346, OS_LOG_TYPE_INFO);
                *(_WORD *)oslog = 0;
                v380 = (void *)_os_log_send_and_compose_impl();
                if (v380)
                  free(v380);
              }
              if (v149)
              {
                sub_20E8C003C((uint64_t)&v408, "Fail to relocalize after map optimization finished");
                sub_20E863570((uint64_t)&v408);
              }
              sub_20E863570((uint64_t)&v408);
              v330 = v416;
              if (!v416)
                goto LABEL_171;
              v381 = (unint64_t *)&v416->__shared_owners_;
              do
                v332 = __ldaxr(v381);
              while (__stlxr(v332 - 1, v381));
              goto LABEL_341;
            }
          }
          memmove(v336, v334, v335);
          goto LABEL_275;
        }
        sub_20F02E848(&v418);
        if (**(int **)(v418 + 56) > 3)
          goto LABEL_171;
        v155 = *(unsigned __int8 *)(v418 + 72);
        v156 = sub_20E8C31DC(v418, "OSLogSurrogateAppender", 1, 0);
        v157 = v156;
        if (!v155 && !v156)
          goto LABEL_171;
        v386 = v155;
        *(_QWORD *)oslog = &v418;
        *(std::chrono::steady_clock::time_point *)&oslog[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&oslog[16] = std::chrono::system_clock::now();
        *(_DWORD *)&oslog[24] = 3;
        *(_QWORD *)&oslog[32] = "unknown file";
        *(_DWORD *)&oslog[40] = 3465;
        v405.i64[1] = 0;
        v406.i64[0] = 0;
        v405.i64[0] = (uint64_t)"unknown function";
        v158 = **(_QWORD **)oslog;
        if (*(char *)(**(_QWORD **)oslog + 39) < 0)
        {
          v160 = *(const char **)(v158 + 16);
          v159 = *(_QWORD *)(v158 + 24);
        }
        else
        {
          v159 = *(unsigned __int8 *)(**(_QWORD **)oslog + 39);
          v160 = (const char *)(**(_QWORD **)oslog + 16);
        }
        v385 = **(_QWORD **)oslog + 16;
        v283 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v283 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v284 = byte_254A4A4F8;
        else
          v284 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v285 = byte_254A4A4F8[23];
        else
          v285 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v284, v160);
        v286 = &object[8];
        if (v285 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v285 >= 0x17)
        {
          v287 = v157;
          v288 = v160;
          v289 = v158;
          v290 = a2;
          v291 = (v285 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v285 | 7) != 0x17)
            v291 = v285 | 7;
          v292 = v291 + 1;
          v286 = operator new(v291 + 1);
          *(_QWORD *)&object[16] = v285;
          *(_QWORD *)&object[24] = v292 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v286;
          a2 = v290;
          v158 = v289;
          v160 = v288;
          v157 = v287;
        }
        else
        {
          object[31] = v285;
          if (!v285)
          {
LABEL_193:
            v286[v285] = 0;
            object[32] = 1;
            v293 = &object[40];
            if (v159 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v159 >= 0x17)
            {
              v294 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v159 | 7) != 0x17)
                v294 = v159 | 7;
              v295 = v294 + 1;
              v293 = operator new(v294 + 1);
              v389.i64[0] = v159;
              v389.i64[1] = v295 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v293;
            }
            else
            {
              v389.i8[15] = v159;
              if (!v159)
                goto LABEL_201;
            }
            memmove(v293, v160, v159);
LABEL_201:
            v293[v159] = 0;
            v390.i8[0] = 1;
            v296 = *(NSObject **)object;
            if (v389.i8[15] < 0)
              operator delete(*(void **)&object[40]);
            if (object[32] && (object[31] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v157 && *(_QWORD *)(v157 + 24))
            {
              v297 = _os_log_pack_size();
              v298 = (std::__shared_weak_count_vtbl *)operator new(v297, (std::align_val_t)8uLL);
              v299 = (std::__shared_weak_count *)operator new();
              v300 = v299;
              v299->__shared_owners_ = 0;
              v301 = (unint64_t *)&v299->__shared_owners_;
              v299->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v299->__shared_weak_owners_ = 0;
              v299[1].__vftable = v298;
              *(_QWORD *)object = v298;
              *(_QWORD *)&object[8] = v298;
              *(_QWORD *)&object[16] = v299;
              do
                v302 = __ldxr(v301);
              while (__stxr(v302 + 1, v301));
              memset(&object[24], 0, 24);
              do
                v303 = __ldaxr(v301);
              while (__stlxr(v303 - 1, v301));
              if (!v303)
              {
                ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                std::__shared_weak_count::__release_weak(v300);
              }
              v304 = *(_QWORD *)object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v305 = operator new();
              v306 = *(unsigned __int8 *)(v158 + 39);
              v307 = v385;
              if ((v306 & 0x80u) != 0)
              {
                v307 = *(_QWORD *)(v158 + 16);
                v306 = *(_QWORD *)(v158 + 24);
              }
              *(_QWORD *)v305 = v304;
              *(_OWORD *)(v305 + 8) = *(_OWORD *)&object[8];
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v305 + 24) = *(_OWORD *)&object[24];
              *(_QWORD *)&object[24] = 0;
              *(_QWORD *)&object[32] = 0;
              *(_QWORD *)(v305 + 40) = v307;
              *(_QWORD *)(v305 + 48) = v306;
              *(_BYTE *)(v305 + 56) = 1;
              v419[0] = 0.0;
              v408 = (uint64_t *)v305;
              (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v157 + 24) + 40))(*(_QWORD *)(v157 + 24), &v408);
              v308 = v408;
              v408 = 0;
              if (v308)
              {
                v309 = (std::__shared_weak_count *)v308[4];
                if (v309)
                {
                  v310 = (unint64_t *)&v309->__shared_owners_;
                  do
                    v311 = __ldaxr(v310);
                  while (__stlxr(v311 - 1, v310));
                  if (!v311)
                  {
                    ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
                    std::__shared_weak_count::__release_weak(v309);
                  }
                }
                v312 = (std::__shared_weak_count *)v308[2];
                if (v312)
                {
                  v313 = (unint64_t *)&v312->__shared_owners_;
                  do
                    v314 = __ldaxr(v313);
                  while (__stlxr(v314 - 1, v313));
                  if (!v314)
                  {
                    ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                    std::__shared_weak_count::__release_weak(v312);
                  }
                }
                MEMORY[0x212BC6398](v308, 0x10F0C40B62ED6C6);
                v315 = v419[0];
                v419[0] = 0.0;
                if (v315 != 0.0)
                {
                  v316 = *(std::__shared_weak_count **)(*(_QWORD *)&v315 + 32);
                  if (v316)
                  {
                    v317 = (unint64_t *)&v316->__shared_owners_;
                    do
                      v318 = __ldaxr(v317);
                    while (__stlxr(v318 - 1, v317));
                    if (!v318)
                    {
                      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
                      std::__shared_weak_count::__release_weak(v316);
                    }
                  }
                  v319 = *(std::__shared_weak_count **)(*(_QWORD *)&v315 + 16);
                  if (v319)
                  {
                    v320 = (unint64_t *)&v319->__shared_owners_;
                    do
                      v321 = __ldaxr(v320);
                    while (__stlxr(v321 - 1, v320));
                    if (!v321)
                    {
                      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                      std::__shared_weak_count::__release_weak(v319);
                    }
                  }
                  MEMORY[0x212BC6398](*(_QWORD *)&v315, 0x10F0C40B62ED6C6);
                }
              }
              v322 = *(std::__shared_weak_count **)&object[32];
              v323 = v386;
              if (*(_QWORD *)&object[32])
              {
                v324 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                do
                  v325 = __ldaxr(v324);
                while (__stlxr(v325 - 1, v324));
                if (!v325)
                {
                  ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                  std::__shared_weak_count::__release_weak(v322);
                }
              }
              v326 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v327 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v328 = __ldaxr(v327);
                while (__stlxr(v328 - 1, v327));
                if (!v328)
                {
                  ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                  std::__shared_weak_count::__release_weak(v326);
                }
              }
            }
            else
            {
              os_log_type_enabled(v296, OS_LOG_TYPE_INFO);
              *(_WORD *)object = 0;
              v329 = (void *)_os_log_send_and_compose_impl();
              v323 = v386;
              if (v329)
                free(v329);
            }
            if (v323)
            {
              sub_20E8C003C((uint64_t)oslog, "Fail to relocalize after map optimization finished");
              sub_20E863570((uint64_t)oslog);
            }
            sub_20E863570((uint64_t)oslog);
            v330 = (std::__shared_weak_count *)v406.i64[0];
            if (!v406.i64[0])
              goto LABEL_171;
            v331 = (unint64_t *)(v406.i64[0] + 8);
            do
              v332 = __ldaxr(v331);
            while (__stlxr(v332 - 1, v331));
LABEL_341:
            if (!v332)
            {
              ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
              std::__shared_weak_count::__release_weak(v330);
            }
            goto LABEL_171;
          }
        }
        memmove(v286, v284, v285);
        goto LABEL_193;
      }
    }
    v126 = 0;
    goto LABEL_96;
  }
  v94 = &v76[8 * (v93 - v80)];
  if (v93 != v80)
  {
    do
    {
      v95 = *(_QWORD *)v76;
      *((_DWORD *)v80 + 2) = *((_DWORD *)v76 + 2);
      *v80 = v95;
      v96 = *((_OWORD *)v76 + 8);
      v98 = *((_OWORD *)v76 + 5);
      v97 = *((_OWORD *)v76 + 6);
      *((_OWORD *)v80 + 7) = *((_OWORD *)v76 + 7);
      *((_OWORD *)v80 + 8) = v96;
      *((_OWORD *)v80 + 5) = v98;
      *((_OWORD *)v80 + 6) = v97;
      v99 = *((_OWORD *)v76 + 1);
      v100 = *((_OWORD *)v76 + 2);
      v101 = *((_OWORD *)v76 + 4);
      *((_OWORD *)v80 + 3) = *((_OWORD *)v76 + 3);
      *((_OWORD *)v80 + 4) = v101;
      *((_OWORD *)v80 + 1) = v99;
      *((_OWORD *)v80 + 2) = v100;
      *((_DWORD *)v80 + 36) = *((_DWORD *)v76 + 36);
      v76 += 152;
      v80 += 19;
    }
    while (v76 != v94);
    v80 = (_QWORD *)*v85;
  }
  v102 = v80;
  if (v94 != v75)
  {
    v102 = v80;
    v103 = v80;
    do
    {
      *(_OWORD *)v103 = *(_OWORD *)v94;
      v104 = *((_OWORD *)v94 + 8);
      v106 = *((_OWORD *)v94 + 5);
      v105 = *((_OWORD *)v94 + 6);
      *((_OWORD *)v103 + 7) = *((_OWORD *)v94 + 7);
      *((_OWORD *)v103 + 8) = v104;
      *((_OWORD *)v103 + 5) = v106;
      *((_OWORD *)v103 + 6) = v105;
      v107 = *((_OWORD *)v94 + 1);
      v108 = *((_OWORD *)v94 + 2);
      v109 = *((_OWORD *)v94 + 4);
      *((_OWORD *)v103 + 3) = *((_OWORD *)v94 + 3);
      *((_OWORD *)v103 + 4) = v109;
      *((_OWORD *)v103 + 1) = v107;
      *((_OWORD *)v103 + 2) = v108;
      *((_DWORD *)v103 + 36) = *((_DWORD *)v94 + 36);
      v102 += 19;
      v94 += 152;
      v103 += 19;
    }
    while (v94 != v75);
  }
  *v85 = v102;
  if ((a4 & 1) != 0)
    goto LABEL_77;
LABEL_172:
  sub_20F7FA920(1u, -858993459 * ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4), a1[921] + 312);
  if (__p)
  {
    v397 = (int64x2_t *)__p;
    operator delete(__p);
  }
  if (v399)
    operator delete(v399);
}

void sub_20F0417C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *object, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,void *a62,int a63)
{
  char a66;
  char a67;
  uint64_t v67;
  void *v69;

  if (a67)
  {
    if (a66 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v67 - 240);
  sub_20E8E69C4((uint64_t)&a13);
  if (a38)
  {
    a39 = (uint64_t)a38;
    operator delete(a38);
    v69 = a41;
    if (!a41)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else
  {
    v69 = a41;
    if (!a41)
      goto LABEL_6;
  }
  operator delete(v69);
  _Unwind_Resume(a1);
}

void sub_20F0419DC(_QWORD *a1, int64x2_t *a2)
{
  int64x2_t v4;
  __int128 v5;
  int64x2_t v6;
  int64x2_t v7;
  double v8;
  int64x2_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  int v40;
  int v41;
  unint64_t v42;
  size_t v43;
  const char *v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  const char *v47;
  size_t v48;
  _BYTE *v49;
  const char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[3];
  int v100;
  const char *v101;
  int v102;
  const char *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  __int128 v107;
  double v108;
  float64x2_t v109;
  double v110;
  _BYTE v111[32];
  _BYTE v112[32];
  double v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE v116[24];
  __int128 v117;
  void *v118[2];
  unint64_t v119;
  char v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  *(_QWORD *)&v5 = a2[3].i64[0];
  v6 = a2[2];
  v7 = a2[4];
  v8 = *(double *)a2[7].i64;
  v9 = a2[6];
  v109 = (float64x2_t)vzip1q_s64(*a2, v6);
  *(_QWORD *)&v10 = vdupq_laneq_s64(v9, 1).u64[0];
  v9.i64[1] = v4.i64[1];
  *(int64x2_t *)v111 = v9;
  *(int64x2_t *)&v111[16] = vzip2q_s64(v6, v7);
  *((_QWORD *)&v10 + 1) = a2[1].i64[0];
  *((_QWORD *)&v5 + 1) = a2[5].i64[0];
  *(_OWORD *)v112 = v10;
  *(_OWORD *)&v112[16] = v5;
  v110 = *(double *)v7.i64;
  v113 = v8;
  v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
  v12 = *(_QWORD *)(v11 + 4864);
  if (*(_QWORD *)(v12 + 2504) == *(_QWORD *)(v12 + 2512)
    || ((*(_DWORD *)(v12 + 2276) & 0xFFFFFFFE) == 2 ? (v13 = *(_DWORD *)(v11 + 4904) <= 0) : (v13 = 1), v13))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 2601, (uint64_t)"vfusion().ReadyForRelocalization(true)", 39, (uint64_t)"Failed to grvaity-align the front-end in moving slam", 52, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
  *(_QWORD *)(v14 + 4664) = 0;
  *(_QWORD *)(v14 + 4680) = 0;
  *(_QWORD *)(v14 + 4672) = 0;
  sub_20F86A7D0(*(_QWORD *)(v14 + 4864), (uint64_t)&v109, v15);
  if (*(_BYTE *)(v14 + 10432))
  {
    _D0 = *(_QWORD *)&v112[24];
    _D6 = v113;
    _Q22.f64[0] = v110;
    _Q5.f64[0] = *(float64_t *)v111;
    _Q5.f64[1] = *(float64_t *)v112;
    v20 = *(float64x2_t *)(v14 + 10320);
    v21 = *(float64x2_t *)(v14 + 10304);
    v22 = *(float64x2_t *)(v14 + 10352);
    v23 = *(float64x2_t *)(v14 + 10336);
    v24 = *(float64x2_t *)(v14 + 10384);
    v25 = *(float64x2_t *)(v14 + 10368);
    _Q22.f64[1] = *(float64_t *)&v111[24];
    v26 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v109, vnegq_f64(_Q5).f64[0]), *(float64x2_t *)&v111[8], _Q5, 1), *(float64x2_t *)&v112[8], v113, 0);
    __asm
    {
      FMLS            D16, D4, V5.D[1]
      FMLS            D16, D0, V6.D[0]
    }
    v33 = *(float64x2_t *)(v14 + 10416);
    v34 = *(float64x2_t *)(v14 + 10400);
    v35 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v20, v109.f64[0]), v22, v109.f64[1]), v24, v110), (float64x2_t)0, v33);
    v36 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v21, *(double *)&v111[8]), v23, *(double *)&v111[16]), v25, _Q22, 1), (float64x2_t)0, v34);
    v37 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v20, *(double *)&v111[8]), v22, *(double *)&v111[16]), v24, _Q22, 1), (float64x2_t)0, v33);
    v38 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v21, *(double *)&v112[8]), v23, *(double *)&v112[16]), v25, *(double *)&v112[24]), (float64x2_t)0, v34);
    v39 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v20, *(double *)&v112[8]), v22, *(double *)&v112[16]), v24, *(double *)&v112[24]), (float64x2_t)0, v33);
    *(float64x2_t *)(v14 + 10304) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v21, v109.f64[0]), v23, v109.f64[1]), v25, v110), (float64x2_t)0, v34);
    *(float64x2_t *)(v14 + 10320) = v35;
    *(float64x2_t *)(v14 + 10336) = v36;
    *(float64x2_t *)(v14 + 10352) = v37;
    *(float64x2_t *)(v14 + 10368) = v38;
    *(float64x2_t *)(v14 + 10384) = v39;
    *(float64x2_t *)(v14 + 10400) = vaddq_f64(v34, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, v26.f64[0]), v23, v26, 1), v25, _D16));
    *(float64x2_t *)(v14 + 10416) = vaddq_f64(v33, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v26.f64[0]), v22, v26, 1), v24, _D16));
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[921] + 168) + 304))(*(_QWORD *)(a1[921] + 168));
  *(_DWORD *)v116 = 4;
  *(_QWORD *)&v116[8] = a2;
  *(_DWORD *)&v116[16] = 0;
  v108 = 0.0;
  v107 = 0uLL;
  sub_20F053450((unsigned int *)v116, (double *)&v107);
  sub_20F02E848(&v106);
  if (**(int **)(v106 + 56) <= 3)
  {
    v40 = *(unsigned __int8 *)(v106 + 72);
    v41 = *(_BYTE *)(v106 + 72) != 0;
    v42 = sub_20E8C31DC(v106, "OSLogSurrogateAppender", 1, 0);
    if (((v42 == 0) & ~v41) == 0)
    {
      v99[0] = &v106;
      v99[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v99[2] = std::chrono::system_clock::now().__d_.__rep_;
      v100 = 3;
      v101 = "unknown file";
      v102 = 2609;
      v104 = 0;
      v105 = 0;
      v103 = "unknown function";
      v98 = v106;
      if (*(char *)(v106 + 39) < 0)
      {
        v44 = *(const char **)(v106 + 16);
        v43 = *(_QWORD *)(v106 + 24);
        v97 = v106 + 16;
        v46 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v46 & 1) != 0)
          goto LABEL_16;
      }
      else
      {
        v43 = *(unsigned __int8 *)(v106 + 39);
        v44 = (const char *)(v106 + 16);
        v97 = v106 + 16;
        v45 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v45 & 1) != 0)
          goto LABEL_16;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v116);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v116);
        if ((_BYTE)v117 && (v116[23] & 0x80000000) != 0)
          operator delete(*(void **)v116);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_16:
      if (byte_254A4A4F8[23] >= 0)
        v47 = byte_254A4A4F8;
      else
        v47 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v48 = byte_254A4A4F8[23];
      else
        v48 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v116 = os_log_create(v47, v44);
      v49 = &v116[8];
      if (v48 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v48 >= 0x17)
      {
        v50 = v44;
        v51 = v40;
        v52 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v48 | 7) != 0x17)
          v52 = v48 | 7;
        v53 = v52 + 1;
        v49 = operator new(v52 + 1);
        *(_QWORD *)&v116[16] = v48;
        *(_QWORD *)&v117 = v53 | 0x8000000000000000;
        *(_QWORD *)&v116[8] = v49;
        v40 = v51;
        v44 = v50;
      }
      else
      {
        BYTE7(v117) = v48;
        if (!v48)
        {
LABEL_30:
          v49[v48] = 0;
          BYTE8(v117) = 1;
          v54 = v118;
          if (v43 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v43 >= 0x17)
          {
            v56 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v43 | 7) != 0x17)
              v56 = v43 | 7;
            v57 = v56 + 1;
            v54 = (void **)operator new(v56 + 1);
            v118[1] = (void *)v43;
            v119 = v57 | 0x8000000000000000;
            v118[0] = v54;
          }
          else
          {
            HIBYTE(v119) = v43;
            if (!v43)
            {
              LOBYTE(v118[0]) = 0;
              v120 = 1;
              v55 = *(NSObject **)v116;
              if ((SHIBYTE(v119) & 0x80000000) == 0)
                goto LABEL_34;
              goto LABEL_40;
            }
          }
          memmove(v54, v44, v43);
          *((_BYTE *)v54 + v43) = 0;
          v120 = 1;
          v55 = *(NSObject **)v116;
          if ((SHIBYTE(v119) & 0x80000000) == 0)
          {
LABEL_34:
            if (!BYTE8(v117))
              goto LABEL_43;
            goto LABEL_41;
          }
LABEL_40:
          operator delete(v118[0]);
          if (!BYTE8(v117))
          {
LABEL_43:
            if (*(_QWORD *)v116)
              os_release(*(void **)v116);
            if (v42 && *(_QWORD *)(v42 + 24))
            {
              v58 = _os_log_pack_size();
              v59 = (std::__shared_weak_count_vtbl *)operator new(v58, (std::align_val_t)8uLL);
              v60 = (std::__shared_weak_count *)operator new();
              v61 = v60;
              v60->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v60->__shared_owners_;
              v60->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v60->__shared_weak_owners_ = 0;
              v60[1].__vftable = v59;
              *(_QWORD *)v116 = v59;
              *(_QWORD *)&v116[8] = v59;
              *(_QWORD *)&v116[16] = v60;
              do
                v63 = __ldxr(p_shared_owners);
              while (__stxr(v63 + 1, p_shared_owners));
              v117 = 0uLL;
              v118[0] = 0;
              do
                v64 = __ldaxr(p_shared_owners);
              while (__stlxr(v64 - 1, p_shared_owners));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v61);
              }
              v65 = *(_QWORD *)v116;
              v66 = _os_log_pack_fill();
              v68 = *((_QWORD *)&v107 + 1);
              v67 = v107;
              v69 = v108;
              *(_DWORD *)v66 = 134218496;
              *(_QWORD *)(v66 + 4) = v67;
              *(_WORD *)(v66 + 12) = 2048;
              *(_QWORD *)(v66 + 14) = v68;
              *(_WORD *)(v66 + 22) = 2048;
              *(double *)(v66 + 24) = v69;
              v70 = operator new();
              v71 = *(unsigned __int8 *)(v98 + 39);
              v72 = v97;
              if ((v71 & 0x80u) != 0)
              {
                v72 = *(_QWORD *)(v98 + 16);
                v71 = *(_QWORD *)(v98 + 24);
              }
              *(_QWORD *)v70 = v65;
              *(_OWORD *)(v70 + 8) = *(_OWORD *)&v116[8];
              *(_QWORD *)&v116[8] = 0;
              *(_QWORD *)&v116[16] = 0;
              *(_OWORD *)(v70 + 24) = v117;
              v117 = 0uLL;
              *(_QWORD *)(v70 + 40) = v72;
              *(_QWORD *)(v70 + 48) = v71;
              *(_BYTE *)(v70 + 56) = 1;
              v114 = 0;
              v115 = v70;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v42 + 24) + 40))(*(_QWORD *)(v42 + 24), &v115);
              v73 = v115;
              v115 = 0;
              if (v73)
              {
                v74 = *(std::__shared_weak_count **)(v73 + 32);
                if (v74)
                {
                  v75 = (unint64_t *)&v74->__shared_owners_;
                  do
                    v76 = __ldaxr(v75);
                  while (__stlxr(v76 - 1, v75));
                  if (!v76)
                  {
                    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                    std::__shared_weak_count::__release_weak(v74);
                  }
                }
                v77 = *(std::__shared_weak_count **)(v73 + 16);
                if (v77)
                {
                  v78 = (unint64_t *)&v77->__shared_owners_;
                  do
                    v79 = __ldaxr(v78);
                  while (__stlxr(v79 - 1, v78));
                  if (!v79)
                  {
                    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                    std::__shared_weak_count::__release_weak(v77);
                  }
                }
                MEMORY[0x212BC6398](v73, 0x10F0C40B62ED6C6);
                v80 = v114;
                v114 = 0;
                if (v80)
                {
                  v81 = *(std::__shared_weak_count **)(v80 + 32);
                  if (v81)
                  {
                    v82 = (unint64_t *)&v81->__shared_owners_;
                    do
                      v83 = __ldaxr(v82);
                    while (__stlxr(v83 - 1, v82));
                    if (!v83)
                    {
                      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                      std::__shared_weak_count::__release_weak(v81);
                    }
                  }
                  v84 = *(std::__shared_weak_count **)(v80 + 16);
                  if (v84)
                  {
                    v85 = (unint64_t *)&v84->__shared_owners_;
                    do
                      v86 = __ldaxr(v85);
                    while (__stlxr(v86 - 1, v85));
                    if (!v86)
                    {
                      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                      std::__shared_weak_count::__release_weak(v84);
                    }
                  }
                  MEMORY[0x212BC6398](v80, 0x10F0C40B62ED6C6);
                }
              }
              v87 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
              if (*((_QWORD *)&v117 + 1))
              {
                v88 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
                do
                  v89 = __ldaxr(v88);
                while (__stlxr(v89 - 1, v88));
                if (!v89)
                {
                  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                  std::__shared_weak_count::__release_weak(v87);
                }
              }
              v90 = *(std::__shared_weak_count **)&v116[16];
              if (*(_QWORD *)&v116[16])
              {
                v91 = (unint64_t *)(*(_QWORD *)&v116[16] + 8);
                do
                  v92 = __ldaxr(v91);
                while (__stlxr(v92 - 1, v91));
                if (!v92)
                {
                  ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                  std::__shared_weak_count::__release_weak(v90);
                }
              }
            }
            else
            {
              os_log_type_enabled(v55, OS_LOG_TYPE_INFO);
              *(_DWORD *)v116 = 134218496;
              *(_QWORD *)&v116[4] = v107;
              *(_WORD *)&v116[12] = 2048;
              *(_QWORD *)&v116[14] = *((_QWORD *)&v107 + 1);
              *(_WORD *)&v116[22] = 2048;
              *(double *)&v117 = v108;
              v93 = (void *)_os_log_send_and_compose_impl();
              if (v93)
                free(v93);
            }
            if (v40)
            {
              sub_20E8C003C((uint64_t)v99, "Corrected gravity direction in moving slam. Angles shift: %f   %f   %f\n", *(double *)&v107, *((double *)&v107 + 1), v108);
              sub_20E863570((uint64_t)v99);
            }
            sub_20E863570((uint64_t)v99);
            v94 = v105;
            if (v105)
            {
              v95 = (unint64_t *)&v105->__shared_owners_;
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
            goto LABEL_97;
          }
LABEL_41:
          if (SBYTE7(v117) < 0)
            operator delete(*(void **)&v116[8]);
          goto LABEL_43;
        }
      }
      memmove(v49, v47, v48);
      goto LABEL_30;
    }
  }
LABEL_97:
  kdebug_trace();
  sub_20F800590(*(_DWORD *)(a1[921] + 1696) == 1, *(_DWORD *)(a1[921] + 1696) == 2, a1[921] + 312);
}

void sub_20F0423E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  if (*(_BYTE *)(v6 - 152))
  {
    if (*(char *)(v6 - 153) < 0)
      operator delete(*(void **)(v6 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F042420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20E86E8C4((uint64_t *)(v6 - 184));
  sub_20E86E8C4((uint64_t *)(v6 - 192));
  sub_20E86E658(v6 - 176);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F042454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x212BC6398](v6, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F042480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F042494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F042510(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  unint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  float64x2_t v27;
  int8x16_t v30;
  int64x2_t v31;
  uint64_t v40;
  double v42;
  float64x2_t v43;
  double v44;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  double v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  _OWORD *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  int64x2_t v73;
  float64_t v74;
  int64x2_t v75;
  float64_t v76;
  int64x2_t v77;
  unint64_t v78;
  float64x2_t v79;
  double v80;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 440))(a1);
  sub_20F135C80(v4, a2);
  v5 = (void **)(a2 + 24);
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 32) = v6;
  v7 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1[921] + 296) - *(_QWORD *)(a1[921] + 288)) >> 3);
  if (v7 > (uint64_t)(*(_QWORD *)(a2 + 40) - (_QWORD)v6) >> 4)
  {
    if (v7 >> 60)
LABEL_33:
      sub_20E867F44();
    v8 = 0x6BCA1AF286BCA1B0 * ((uint64_t)(*(_QWORD *)(a1[921] + 296) - *(_QWORD *)(a1[921] + 288)) >> 3);
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a2 + 24) = v9;
    *(_QWORD *)(a2 + 32) = v9;
    *(_QWORD *)(a2 + 40) = &v9[v8];
    if (v6)
      operator delete(v6);
  }
  v10 = a1[921];
  v11 = *(_OWORD **)(v10 + 288);
  v12 = *(_OWORD **)(v10 + 296);
  if (v11 != v12)
  {
    v13 = *(char **)(a2 + 32);
    while (1)
    {
      v15 = *(_QWORD *)(a2 + 40);
      if ((unint64_t)v13 >= v15)
        break;
      *(_OWORD *)v13 = *v11;
      v14 = v13 + 16;
LABEL_8:
      *(_QWORD *)(a2 + 32) = v14;
      v11 = (_OWORD *)((char *)v11 + 152);
      v13 = v14;
      if (v11 == v12)
      {
        v10 = a1[921];
        goto LABEL_26;
      }
    }
    v16 = (char *)*v5;
    v17 = (v13 - (_BYTE *)*v5) >> 4;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60)
      goto LABEL_33;
    v19 = v15 - (_QWORD)v16;
    if (v19 >> 3 > v18)
      v18 = v19 >> 3;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 60)
        sub_20E877A38();
      v21 = (char *)operator new(16 * v20);
      v22 = &v21[16 * v17];
      *(_OWORD *)v22 = *v11;
      v23 = (uint64_t)v22;
      if (v13 == v16)
        goto LABEL_23;
    }
    else
    {
      v21 = 0;
      v22 = (char *)(16 * v17);
      *(_OWORD *)(16 * v17) = *v11;
      v23 = 16 * v17;
      if (v13 == v16)
        goto LABEL_23;
    }
    do
    {
      v24 = *((_QWORD *)v13 - 2);
      v13 -= 16;
      v25 = *((_DWORD *)v13 + 2);
      *(_QWORD *)(v23 - 16) = v24;
      v23 -= 16;
      *(_DWORD *)(v23 + 8) = v25;
    }
    while (v13 != v16);
    v13 = (char *)*v5;
LABEL_23:
    v14 = v22 + 16;
    *(_QWORD *)(a2 + 24) = v23;
    *(_QWORD *)(a2 + 32) = v22 + 16;
    *(_QWORD *)(a2 + 40) = &v21[16 * v20];
    if (v13)
      operator delete(v13);
    goto LABEL_8;
  }
LABEL_26:
  if (*(_BYTE *)(v10 + 1200)
    && *(_BYTE *)((*(uint64_t (**)(_QWORD *))(*a1 + 440))(a1) + 10288)
    && *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 440))(a1) + 10208))
  {
    v26 = (*(uint64_t (**)(_QWORD *))(*a1 + 440))(a1);
    sub_20F13315C(v26, (uint64_t)&v73);
    v27.f64[0] = v74;
    _D1 = v78;
    v69 = (float64x2_t)vzip1q_s64(v73, v75);
    _Q0 = (float64x2_t)vzip2q_s64(v73, v75);
    v27.f64[1] = v76;
    v30 = vextq_s8((int8x16_t)_Q0, (int8x16_t)vdupq_laneq_s64(v77, 1), 8uLL);
    v31 = vzip1q_s64(v77, (int64x2_t)_Q0);
    _D5 = v80;
    _V6.D[1] = v79.f64[1];
    v71 = v27;
    v72 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v69, vnegq_f64(v79).f64[0]), _Q0, v79, 1), v27, v80, 0);
    *(_QWORD *)&_Q0.f64[0] = v77.i64[1];
    __asm { FMLS            D7, D0, V6.D[1] }
    *(_QWORD *)&_Q0.f64[0] = vdupq_laneq_s64(v31, 1).u64[0];
    __asm { FMLS            D7, D1, V5.D[0] }
    *(_QWORD *)&_Q0.f64[1] = v30.i64[0];
    v68 = _Q0;
    v70 = (float64x2_t)v78;
    v67 = (float64x2_t)v30.u64[1];
    v65 = (float64x2_t)v31.u64[0];
    _Q7.f64[1] = 1.0;
    v66 = _Q7;
    v40 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 440))(a1) + 4864) + 2280);
    _Q6.f64[0] = *(float64_t *)(v40 + 16);
    v42 = *(double *)(v40 + 40);
    v43 = *(float64x2_t *)(v40 + 24);
    v44 = *(double *)(v40 + 64);
    _Q3 = *(float64x2_t *)(v40 + 48);
    v46 = *(double *)(v40 + 160);
    v47 = vmulq_n_f64(v69, _Q6.f64[0]);
    v48 = vmulq_n_f64(v65, _Q6.f64[0]);
    _Q6.f64[1] = v42;
    v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v40, (int64x2_t)v43), *(double *)(v40 + 144)), (float64x2_t)vzip2q_s64(*(int64x2_t *)v40, (int64x2_t)v43), *(float64x2_t *)(v40 + 144), 1), _Q6, v46);
    _D18 = *(_QWORD *)(v40 + 152);
    __asm { FMLA            D6, D18, V3.D[1] }
    v51 = _Q6.f64[0] + v44 * v46;
    v52 = vmlaq_n_f64(vmulq_n_f64(v69, *(double *)v40), v68, v43.f64[0]);
    v53 = vmlaq_n_f64(vmulq_n_f64(v65, *(double *)v40), v67, v43.f64[0]);
    v54 = vmlaq_laneq_f64(vmulq_laneq_f64(v69, *(float64x2_t *)v40, 1), v68, v43, 1);
    v55 = vmlaq_laneq_f64(vmulq_laneq_f64(v65, *(float64x2_t *)v40, 1), v67, v43, 1);
    *(_QWORD *)&v43.f64[0] = *(_OWORD *)&vnegq_f64(v49);
    v56 = vmlaq_f64(vmlaq_n_f64(v52, v71, _Q3.f64[0]), (float64x2_t)0, v72);
    v57 = vmlaq_f64(vmlaq_n_f64(v53, v70, _Q3.f64[0]), (float64x2_t)0, v66);
    v58 = vmlaq_f64(vmlaq_laneq_f64(v54, v71, _Q3, 1), (float64x2_t)0, v72);
    v59 = vmlaq_f64(vmlaq_laneq_f64(v55, v70, _Q3, 1), (float64x2_t)0, v66);
    v60 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v47, v68, v42), v71, v44), (float64x2_t)0, v72);
    v61 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v48, v67, v42), v70, v44), (float64x2_t)0, v66);
    v62 = vaddq_f64(v72, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v69, v43.f64[0]), v68, v49, 1), v71, v51, 0));
    v63 = vaddq_f64(v66, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v65, v43.f64[0]), v67, v49, 1), v70, v51, 0));
    v64 = (_OWORD *)(a1[921] + 1184);
    if (*(_BYTE *)(a2 + 192))
      *(_BYTE *)(a2 + 192) = 0;
    *(_OWORD *)(a2 + 48) = *v64;
    *(float64x2_t *)(a2 + 64) = v56;
    *(float64x2_t *)(a2 + 80) = v57;
    *(float64x2_t *)(a2 + 96) = v58;
    *(float64x2_t *)(a2 + 112) = v59;
    *(float64x2_t *)(a2 + 128) = v60;
    *(float64x2_t *)(a2 + 144) = v61;
    *(float64x2_t *)(a2 + 160) = v62;
    *(float64x2_t *)(a2 + 176) = v63;
    *(_BYTE *)(a2 + 192) = 1;
  }
}

void sub_20F042928(uint64_t a1)
{
  double v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  unsigned __int8 v9;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t *v17;
  unsigned __int8 v18;
  char *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  void *v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  void *v116;
  _BYTE *v117;
  unint64_t v118;
  BOOL v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  _QWORD *v124;
  void *v125;
  uint64_t v126;
  void *v127;
  unint64_t v128;
  unint64_t *p_shared_owners;
  unint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  _QWORD *v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  __int128 v153;
  __int128 v154;
  void *v155;
  __int128 v156;
  __int128 v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::runtime_error *exception;
  uint64_t v162;
  uint64_t *v163;
  _BYTE *v164;
  char v165;
  uint64_t v166;
  __int128 v167;
  _QWORD *v168;
  _QWORD *v169;
  _BYTE __src[480];
  char v171;
  char v172;
  char v173;
  __int128 v174[199];
  _QWORD __dst[12];
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  int64x2_t v182[18];
  _BYTE v183[288];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  unint64_t v189;
  __int128 v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  _OWORD v196[2];
  __int128 v197;
  __int128 v198;
  __int128 v199;
  _BYTE v200[23];
  __int128 v201;
  uint64_t v202;
  _OWORD v203[7];
  _BYTE v204[24];
  uint64_t v205;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = v4;
  v205 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(_QWORD *, double))(*v2 + 440))(v2, v1);
  if (*(_QWORD *)(*(_QWORD *)(v6 + 4864) + 2480) == *(_QWORD *)(*(_QWORD *)(v6 + 4864) + 2488))
  {
    v17 = sub_210219C18();
    v18 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_54:
      if (os_signpost_enabled((os_log_t)*v17))
      {
        LOWORD(v174[0]) = 0;
        goto LABEL_56;
      }
LABEL_57:
      *v5 = 0;
      v5[1] = 0;
      return;
    }
    LOWORD(v174[0]) = 0;
    v20 = (char *)_os_log_send_and_compose_impl();
    v21 = strlen(v20);
    __dst[0] = 0;
    pthread_threadid_np(0, __dst);
    v22 = __dst[0];
    timespec_get((timespec *)__dst, 1);
    sub_210219E20(v174, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v17 + 1), (__int128 *)(v17 + 5), "MAP: State Missing From Frontend On Create Keyframe", 0x33uLL, v20, v21, v22, __dst);
    std::mutex::lock(&stru_254A5A410);
    v23 = qword_254A5A458;
    for (i = unk_254A5A460; v23 != i; v23 += 40)
    {
      v25 = *(_QWORD *)(v23 + 32);
      if (!v25)
        sub_20E86D37C();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v25 + 48))(v25, v174);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(v174[8]) < 0)
    {
      operator delete(*((void **)&v174[7] + 1));
      if ((SBYTE7(v174[7]) & 0x80000000) == 0)
      {
LABEL_22:
        if (!BYTE8(v174[5]))
        {
LABEL_47:
          if (BYTE8(v174[3]) && SBYTE7(v174[3]) < 0)
            operator delete(*(void **)&v174[2]);
          if (SHIBYTE(v174[1]) < 0)
            operator delete(*((void **)&v174[0] + 1));
          if (v20)
            free(v20);
          goto LABEL_54;
        }
LABEL_45:
        if (SBYTE7(v174[5]) < 0)
          operator delete(*(void **)&v174[4]);
        goto LABEL_47;
      }
    }
    else if ((SBYTE7(v174[7]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(*(void **)&v174[6]);
    if (!BYTE8(v174[5]))
      goto LABEL_47;
    goto LABEL_45;
  }
  v7 = **(_DWORD **)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v3 + 440))(v3) + 4864) + 2480);
  (*(void (**)(__int128 *__return_ptr, _QWORD *))(*v3 + 512))(v174, v3);
  if (!BYTE8(v174[13]))
    goto LABEL_6;
  if (*((_QWORD *)&v174[7] + 1) == v3[919])
  {
    if (*(_QWORD *)&v174[6])
    {
      *((_QWORD *)&v174[6] + 1) = *(_QWORD *)&v174[6];
      operator delete(*(void **)&v174[6]);
    }
LABEL_6:
    v8 = sub_210219C18();
    v9 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
    {
LABEL_41:
      if (os_signpost_enabled((os_log_t)*v8))
      {
        LOWORD(v174[0]) = 0;
LABEL_56:
        _os_signpost_emit_unreliably_with_name_impl();
        goto LABEL_57;
      }
      goto LABEL_57;
    }
    LOWORD(v174[0]) = 0;
    v11 = (char *)_os_log_send_and_compose_impl();
    v12 = strlen(v11);
    __dst[0] = 0;
    pthread_threadid_np(0, __dst);
    v13 = __dst[0];
    timespec_get((timespec *)__dst, 1);
    sub_210219E20(v174, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v8 + 1), (__int128 *)(v8 + 5), "MAP: CreateKeyframeCandidateInfoFromOldestState Failed", 0x36uLL, v11, v12, v13, __dst);
    std::mutex::lock(&stru_254A5A410);
    v14 = qword_254A5A458;
    for (j = unk_254A5A460; v14 != j; v14 += 40)
    {
      v16 = *(_QWORD *)(v14 + 32);
      if (!v16)
        sub_20E86D37C();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v16 + 48))(v16, v174);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(v174[8]) < 0)
    {
      operator delete(*((void **)&v174[7] + 1));
      if ((SBYTE7(v174[7]) & 0x80000000) == 0)
      {
LABEL_13:
        if (!BYTE8(v174[5]))
        {
LABEL_34:
          if (BYTE8(v174[3]) && SBYTE7(v174[3]) < 0)
            operator delete(*(void **)&v174[2]);
          if (SHIBYTE(v174[1]) < 0)
            operator delete(*((void **)&v174[0] + 1));
          if (v11)
            free(v11);
          goto LABEL_41;
        }
LABEL_32:
        if (SBYTE7(v174[5]) < 0)
          operator delete(*(void **)&v174[4]);
        goto LABEL_34;
      }
    }
    else if ((SBYTE7(v174[7]) & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(*(void **)&v174[6]);
    if (!BYTE8(v174[5]))
      goto LABEL_34;
    goto LABEL_32;
  }
  v199 = *(__int128 *)((char *)&v174[2] + 1);
  *(_OWORD *)v200 = *(__int128 *)((char *)&v174[3] + 1);
  *(_QWORD *)&v200[15] = *(_QWORD *)&v174[4];
  v26 = v174[0];
  v198 = *(__int128 *)((char *)&v174[1] + 1);
  v197 = *(__int128 *)((char *)v174 + 1);
  v201 = *(__int128 *)((char *)&v174[4] + 8);
  v202 = *((_QWORD *)&v174[5] + 1);
  v167 = v174[6];
  v27 = *(_QWORD *)&v174[7];
  *(_OWORD *)((char *)v196 + 9) = *(__int128 *)((char *)&v174[12] + 1);
  v196[0] = *(__int128 *)((char *)&v174[11] + 8);
  v195 = *(__int128 *)((char *)&v174[10] + 8);
  v194 = *(__int128 *)((char *)&v174[9] + 8);
  v193 = *(__int128 *)((char *)&v174[8] + 8);
  v192 = *(__int128 *)((char *)&v174[7] + 8);
  v28 = (uint64_t *)v3[921];
  v29 = v28[5];
  if (v29)
  {
    v30 = v28[3];
    v31 = *v28;
    v32 = (*(_QWORD *)(v3[921] + 8) - v31) >> 4;
    while (*(_DWORD *)(*(_QWORD *)(v31 + 16 * (v30 % v32)) + 48) != v7)
    {
      ++v30;
      if (!--v29)
        goto LABEL_28;
    }
    *(_QWORD *)&v190 = *(_QWORD *)(v31 + 16 * (v30 % v32));
    v33 = *(_QWORD *)(v31 + 16 * (v30 % v32) + 8);
    *((_QWORD *)&v190 + 1) = v33;
    if (v33)
    {
      v34 = (unint64_t *)(v33 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
  }
  else
  {
LABEL_28:
    v190 = 0uLL;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 2674, (uint64_t)"const_shared_camera_set_features != nullptr", 43, (uint64_t)"Fail to find the camera features associated to the oldest state", 63, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
  v36 = *(_QWORD **)((*(uint64_t (**)(_QWORD *))(*v3 + 440))(v3) + 4864);
  v37 = (*(uint64_t (**)(_QWORD *))(*v3 + 440))(v3);
  sub_20F13579C(v37, (uint64_t)__src);
  v38 = v36[310];
  v39 = v36[311] - v38;
  if (!v39)
  {
LABEL_66:
    v41 = -1;
LABEL_67:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/vioflintconverter.hpp", 2070, (uint64_t)"state_pos_in_window >= 0", 24, (uint64_t)"Fail to find the state within the bundle", 40, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    goto LABEL_68;
  }
  v40 = 0;
  v41 = 0;
  v42 = v39 >> 2;
  while (*(_DWORD *)(v38 + 4 * v40) != v7)
  {
    v40 = ++v41;
    if (v42 <= v41)
      goto LABEL_66;
  }
  if (v41 < 0)
    goto LABEL_67;
LABEL_68:
  v165 = v26;
  v166 = v27;
  v43 = *(_QWORD *)(v36[313] + 8 * v41);
  v44 = v36[316];
  v45 = v43;
  if (v41 < (unint64_t)((v36[317] - v44) >> 3))
    v45 = *(_QWORD *)(v44 + 8 * v41);
  v46 = v36[285] + 168 * v41;
  memset(v183, 0, sizeof(v183));
  v184 = 0u;
  v185 = 0u;
  v186 = 0u;
  v187 = 0u;
  v188 = 0u;
  v189 = 0xBFF0000000000000;
  memmove(__dst, (const void *)v46, 0x48uLL);
  v47 = *(_QWORD *)(v46 + 160);
  *(_OWORD *)&__dst[9] = *(_OWORD *)(v46 + 144);
  __dst[11] = v47;
  v48 = *(_OWORD *)(v46 + 96);
  v177 = *(_QWORD *)(v46 + 112);
  v176 = v48;
  v49 = *(_OWORD *)(v46 + 72);
  v179 = *(_QWORD *)(v46 + 88);
  v178 = v49;
  v50 = *(_OWORD *)(v46 + 120);
  v181 = *(_QWORD *)(v46 + 136);
  v180 = v50;
  memcpy(v182, __src, sizeof(v182));
  v51 = vzip2q_s64(v182[0], v182[3]);
  v52.i64[0] = vdupq_laneq_s64(v182[6], 1).u64[0];
  v52.i64[1] = v182[9].i64[1];
  v53.i64[0] = vdupq_laneq_s64(v182[12], 1).u64[0];
  v53.i64[1] = v182[15].i64[1];
  v54 = vzip1q_s64(v182[1], v182[4]);
  v55 = vzip2q_s64(v182[1], v182[4]);
  v56.i64[0] = vdupq_laneq_s64(v182[7], 1).u64[0];
  v56.i64[1] = v182[10].i64[1];
  v57.i64[0] = vdupq_laneq_s64(v182[13], 1).u64[0];
  v57.i64[1] = v182[16].i64[1];
  v58 = vzip1q_s64(v182[2], v182[5]);
  v59 = vzip1q_s64(v182[8], v182[11]);
  v60 = vzip2q_s64(v182[2], v182[5]);
  v61.i64[0] = vdupq_laneq_s64(v182[8], 1).u64[0];
  v61.i64[1] = v182[11].i64[1];
  v62.i64[0] = vdupq_laneq_s64(v182[14], 1).u64[0];
  v62.i64[1] = v182[17].i64[1];
  v182[0] = vzip1q_s64(v182[0], v182[3]);
  v182[1] = vzip1q_s64(v182[6], v182[9]);
  v182[2] = vzip1q_s64(v182[12], v182[15]);
  v182[3] = v51;
  v182[4] = v52;
  v182[5] = v53;
  v182[6] = v54;
  v182[7] = vzip1q_s64(v182[7], v182[10]);
  v182[8] = vzip1q_s64(v182[13], v182[16]);
  v182[9] = v55;
  v182[10] = v56;
  v182[11] = v57;
  v182[12] = v58;
  v182[13] = v59;
  v182[14] = vzip1q_s64(v182[14], v182[17]);
  v182[15] = v60;
  v182[16] = v61;
  v182[17] = v62;
  sub_20F053790(v182, v174);
  memcpy(v183, v174, sizeof(v183));
  *((_QWORD *)&v188 + 1) = v43;
  v189 = v45;
  v63 = (*(uint64_t (**)(_QWORD *))(*v3 + 440))(v3);
  v64 = *(unsigned int *)(v190 + 48);
  v65 = v3[921] + 1184;
  *(_QWORD *)__src = *(_QWORD *)(v190 + 56);
  *(_QWORD *)&__src[8] = v64;
  sub_20F13C0FC(v63, v65, (uint64_t)__src, v174);
  __src[0] = 0;
  v173 = 0;
  v66 = (_QWORD *)v3[921];
  v67 = v66[161];
  if (!v67)
  {
LABEL_77:
    v74 = v66[168];
    v75 = (std::__shared_weak_count *)v66[169];
    *(_QWORD *)&v203[0] = v74;
    *((_QWORD *)&v203[0] + 1) = v75;
    if (!v75)
      goto LABEL_122;
    goto LABEL_120;
  }
  v68 = v66[156];
  v69 = -v67;
  v70 = 1;
  while (1)
  {
    v71 = (v66[159] + v70 - 1) % (0xEF7BDEF7BDEF7BDFLL * ((v66[157] - v68) >> 4));
    v72 = v68 + 496 * v71;
    if (*(_QWORD *)(v190 + 56) == *(_QWORD *)(v72 + 8) && *(_DWORD *)(v190 + 48) == *(_DWORD *)(v72 + 16))
      break;
    ++v70;
    if (v69 + v70 == 1)
      goto LABEL_77;
  }
  *(_OWORD *)__src = *(_OWORD *)v72;
  v76 = *(_OWORD *)(v72 + 16);
  v77 = *(_OWORD *)(v72 + 32);
  v78 = *(_OWORD *)(v72 + 64);
  *(_OWORD *)&__src[48] = *(_OWORD *)(v72 + 48);
  *(_OWORD *)&__src[64] = v78;
  *(_OWORD *)&__src[16] = v76;
  *(_OWORD *)&__src[32] = v77;
  v79 = *(_OWORD *)(v72 + 80);
  v80 = *(_OWORD *)(v72 + 96);
  v81 = *(_OWORD *)(v72 + 128);
  *(_OWORD *)&__src[112] = *(_OWORD *)(v72 + 112);
  *(_OWORD *)&__src[128] = v81;
  *(_OWORD *)&__src[80] = v79;
  *(_OWORD *)&__src[96] = v80;
  v82 = v68 + 496 * v71;
  *(_QWORD *)&__src[152] = 0;
  *(_QWORD *)&__src[160] = 0;
  *(_QWORD *)&__src[144] = 0;
  *(_OWORD *)&__src[144] = *(_OWORD *)(v82 + 144);
  *(_QWORD *)&__src[160] = *(_QWORD *)(v82 + 160);
  *(_QWORD *)(v82 + 144) = 0;
  *(_QWORD *)(v82 + 152) = 0;
  *(_QWORD *)(v82 + 160) = 0;
  __src[168] = 0;
  v171 = 0;
  if (*(_BYTE *)(v82 + 480))
  {
    v83 = v68 + 496 * v71;
    memset(&__src[168], 0, 24);
    *(_OWORD *)&__src[168] = *(_OWORD *)(v83 + 168);
    *(_QWORD *)&__src[184] = *(_QWORD *)(v83 + 184);
    *(_QWORD *)(v83 + 168) = 0;
    *(_QWORD *)(v83 + 176) = 0;
    *(_QWORD *)(v83 + 184) = 0;
    memcpy(&__src[192], (const void *)(v83 + 192), 0x120uLL);
    v171 = 1;
  }
  v163 = v5;
  v172 = *(_BYTE *)(v68 + 496 * v71 + 488);
  v173 = 1;
  v84 = (_QWORD *)v3[921];
  v85 = v66[161];
  v169 = v3;
  if (!v84[161])
  {
    if (v85 == v70)
      goto LABEL_119;
    if (!v70)
    {
      v162 = v66[161];
      goto LABEL_91;
    }
LABEL_90:
    v162 = -v70;
LABEL_91:
    v87 = 0;
    v88 = 1;
    v168 = v66;
    do
    {
      v92 = v66[156];
      v93 = (v70 + v87 + v66[159]) % (0xEF7BDEF7BDEF7BDFLL * ((v66[157] - v92) >> 4));
      v94 = v92 + 496 * v93;
      v95 = v84[156];
      v96 = (v88 + v84[159] - 1) % (0xEF7BDEF7BDEF7BDFLL * ((v84[157] - v95) >> 4));
      v97 = v95 + 496 * v96;
      v98 = *(_OWORD *)(v94 + 64);
      v100 = *(_OWORD *)(v94 + 16);
      v99 = *(_OWORD *)(v94 + 32);
      *(_OWORD *)(v97 + 48) = *(_OWORD *)(v94 + 48);
      *(_OWORD *)(v97 + 64) = v98;
      *(_OWORD *)(v97 + 16) = v100;
      *(_OWORD *)(v97 + 32) = v99;
      v101 = *(_OWORD *)(v94 + 128);
      v103 = *(_OWORD *)(v94 + 80);
      v102 = *(_OWORD *)(v94 + 96);
      *(_OWORD *)(v97 + 112) = *(_OWORD *)(v94 + 112);
      *(_OWORD *)(v97 + 128) = v101;
      *(_OWORD *)(v97 + 80) = v103;
      *(_OWORD *)(v97 + 96) = v102;
      *(_OWORD *)v97 = *(_OWORD *)v94;
      v106 = *(void **)(v97 + 144);
      v105 = (_QWORD *)(v97 + 144);
      v104 = v106;
      if (v106)
      {
        *(_QWORD *)(v95 + 496 * v96 + 152) = v104;
        operator delete(v104);
        *v105 = 0;
        v105[1] = 0;
        v105[2] = 0;
      }
      *(_OWORD *)v105 = *(_OWORD *)(v94 + 144);
      v107 = v92 + 496 * v93;
      v108 = v95 + 496 * v96;
      *(_QWORD *)(v108 + 160) = *(_QWORD *)(v107 + 160);
      *(_QWORD *)(v94 + 144) = 0;
      *(_QWORD *)(v94 + 152) = 0;
      *(_QWORD *)(v94 + 160) = 0;
      v109 = v108 + 168;
      v110 = v107 + 168;
      v111 = *(unsigned __int8 *)(v108 + 480);
      if (v111 == *(unsigned __int8 *)(v107 + 480))
      {
        if (*(_BYTE *)(v108 + 480))
        {
          v112 = *(void **)v109;
          if (*(_QWORD *)v109)
          {
            *(_QWORD *)(v95 + 496 * v96 + 176) = v112;
            operator delete(v112);
            *(_QWORD *)v109 = 0;
            *(_QWORD *)(v109 + 8) = 0;
            *(_QWORD *)(v109 + 16) = 0;
          }
          *(_OWORD *)v109 = *(_OWORD *)v110;
          v113 = v92 + 496 * v93;
          v114 = v95 + 496 * v96;
          *(_QWORD *)(v114 + 184) = *(_QWORD *)(v113 + 184);
          *(_QWORD *)v110 = 0;
          *(_QWORD *)(v110 + 8) = 0;
          *(_QWORD *)(v110 + 16) = 0;
          memcpy((void *)(v114 + 192), (const void *)(v113 + 192), 0x120uLL);
        }
      }
      else
      {
        v115 = (_BYTE *)(v108 + 480);
        if (v111)
        {
          v116 = *(void **)v109;
          if (*(_QWORD *)v109)
          {
            v117 = v115;
            *(_QWORD *)(v95 + 496 * v96 + 176) = v116;
            operator delete(v116);
            v115 = v117;
          }
          *v115 = 0;
        }
        else
        {
          v164 = v115;
          v89 = v95 + 496 * v96;
          *(_QWORD *)v109 = 0;
          *(_QWORD *)(v109 + 8) = 0;
          *(_QWORD *)(v109 + 16) = 0;
          *(_OWORD *)v109 = *(_OWORD *)v110;
          v90 = v92 + 496 * v93;
          *(_QWORD *)(v89 + 184) = *(_QWORD *)(v90 + 184);
          *(_QWORD *)v110 = 0;
          *(_QWORD *)(v107 + 176) = 0;
          *(_QWORD *)(v107 + 184) = 0;
          memcpy((void *)(v89 + 192), (const void *)(v90 + 192), 0x120uLL);
          *v164 = 1;
        }
      }
      *(_BYTE *)(v95 + 496 * v96 + 488) = *(_BYTE *)(v92 + 496 * v93 + 488);
      v66 = v168;
      ++v88;
      v91 = v70 + v87 - v168[161];
      ++v87;
    }
    while (v91 != -1);
    v3 = v169;
    v86 = v162;
    goto LABEL_106;
  }
  if (v85 != v70)
  {
    if (!v70)
      goto LABEL_119;
    goto LABEL_90;
  }
  v86 = -v70;
LABEL_106:
  if (v86)
  {
    v118 = v84[160];
    do
    {
      memset(&v204[4], 255, 20);
      memset((char *)v203 + 4, 0, 104);
      v120 = v84[156];
      if (!v118)
        v118 = 0xEF7BDEF7BDEF7BDFLL * ((v84[157] - v120) >> 4);
      v121 = v118 - 1;
      v122 = v120 + 496 * (v118 - 1);
      *(_DWORD *)v122 = 0;
      *(_OWORD *)(v122 + 4) = *(_OWORD *)v204;
      *(_QWORD *)(v122 + 20) = *(_QWORD *)&v204[16];
      *(_OWORD *)(v122 + 76) = v203[3];
      *(_OWORD *)(v122 + 92) = v203[4];
      *(_OWORD *)(v122 + 108) = v203[5];
      *(_OWORD *)(v122 + 120) = *(_OWORD *)((char *)&v203[5] + 12);
      *(_OWORD *)(v122 + 28) = v203[0];
      *(_OWORD *)(v122 + 44) = v203[1];
      *(_OWORD *)(v122 + 60) = v203[2];
      v125 = *(void **)(v122 + 144);
      v124 = (_QWORD *)(v122 + 144);
      v123 = v125;
      *(v124 - 1) = 0;
      if (v125)
      {
        *(_QWORD *)(v120 + 496 * v121 + 152) = v123;
        operator delete(v123);
      }
      v126 = v120 + 496 * v121;
      *v124 = 0;
      v124[1] = 0;
      v124[2] = 0;
      if (*(_BYTE *)(v126 + 480))
      {
        v127 = *(void **)(v120 + 496 * v121 + 168);
        if (v127)
        {
          *(_QWORD *)(v120 + 496 * v121 + 176) = v127;
          operator delete(v127);
        }
        *(_BYTE *)(v126 + 480) = 0;
      }
      *(_BYTE *)(v120 + 496 * v121 + 488) = 0;
      v128 = v84[160];
      if (!v128)
        v128 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v84[157] - v84[156]) >> 4);
      v118 = v128 - 1;
      v84[160] = v118;
      --v84[161];
      v119 = __CFADD__(v86++, 1);
      v3 = v169;
    }
    while (!v119);
  }
LABEL_119:
  v66 = (_QWORD *)v3[921];
  v5 = v163;
  v74 = v66[168];
  v75 = (std::__shared_weak_count *)v66[169];
  *(_QWORD *)&v203[0] = v74;
  *((_QWORD *)&v203[0] + 1) = v75;
  if (!v75)
    goto LABEL_122;
LABEL_120:
  p_shared_owners = (unint64_t *)&v75->__shared_owners_;
  do
    v130 = __ldxr(p_shared_owners);
  while (__stxr(v130 + 1, p_shared_owners));
LABEL_122:
  v131 = v66[164];
  if (v66[163] == v131)
  {
    v138 = v66[166];
    if (v138 >= v66[167])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v66[166] = v138 + 1;
    v132 = (_QWORD *)operator new();
    bzero(v132, 0x12C0uLL);
    *v132 = 0x3FF0000000000000;
    v132[4] = 0x3FF0000000000000;
    v132[8] = 0x3FF0000000000000;
    *(_OWORD *)(v132 + 9) = 0u;
    *(_OWORD *)(v132 + 11) = 0u;
    *(_OWORD *)(v132 + 13) = 0u;
    v132[15] = -1;
    v132[16] = -1;
    *((_OWORD *)v132 + 10) = 0u;
    *((_OWORD *)v132 + 11) = 0u;
    *(_OWORD *)((char *)v132 + 187) = 0u;
    bzero(v132 + 27, 0x350uLL);
    v132[133] = 0xBFF0000000000000;
    *((_OWORD *)v132 + 67) = 0u;
    *((_OWORD *)v132 + 68) = 0u;
    *(_OWORD *)((char *)v132 + 1097) = 0u;
    v191 = 0;
    *(_QWORD *)v204 = v74;
    *(_QWORD *)&v204[8] = v75;
    if (!v75)
      goto LABEL_131;
  }
  else
  {
    v132 = *(_QWORD **)(v131 - 8);
    *(_QWORD *)(v131 - 8) = 0;
    v133 = v66[164];
    v136 = *(_QWORD *)(v133 - 8);
    v135 = (_QWORD *)(v133 - 8);
    v134 = v136;
    *v135 = 0;
    if (v136)
    {
      v137 = sub_20F04FD08(v134);
      MEMORY[0x212BC6398](v137, 0x1062C40E21CDE38);
    }
    v66[164] = v135;
    v191 = 0;
    *(_QWORD *)v204 = v74;
    *(_QWORD *)&v204[8] = v75;
    if (!v75)
      goto LABEL_131;
  }
  v139 = (unint64_t *)&v75->__shared_owners_;
  do
    v140 = __ldxr(v139);
  while (__stxr(v140 + 1, v139));
LABEL_131:
  *v5 = (uint64_t)v132;
  v141 = (_QWORD *)operator new();
  *(_OWORD *)v204 = 0uLL;
  *v141 = &off_24C9F82C0;
  v141[1] = 0;
  v141[2] = 0;
  v141[3] = v132;
  v141[4] = v74;
  v141[5] = v75;
  v5[1] = (uint64_t)v141;
  if (v75)
  {
    v142 = (unint64_t *)&v75->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v144 = *v5;
  v145 = (*(uint64_t (**)(_QWORD *))(*v3 + 440))(v3);
  memset(v203, 0, 24);
  sub_20EE88C3C((uint64_t)v203, *(_QWORD *)(v145 + 4824), *(_QWORD *)(v145 + 4832), (uint64_t)(*(_QWORD *)(v145 + 4832) - *(_QWORD *)(v145 + 4824)) >> 5);
  v146 = (*(uint64_t (**)(_QWORD *))(*v3 + 440))(v3);
  sub_20FCC22E4(v144, (uint64_t)v203, (__int128 *)__dst, (uint64_t **)(v146 + 4880), &v190, v174, (uint64_t)__src);
  v147 = *(_QWORD *)&v203[0];
  if (*(_QWORD *)&v203[0])
  {
    v148 = *((_QWORD *)&v203[0] + 1);
    v149 = *(void **)&v203[0];
    if (*((_QWORD *)&v203[0] + 1) != *(_QWORD *)&v203[0])
    {
      do
      {
        v150 = *(_QWORD *)(v148 - 24);
        if (v150)
        {
          v151 = *(_QWORD *)(v148 - 16);
          v152 = *(void **)(v148 - 24);
          if (v151 != v150)
          {
            do
              v151 = sub_20EB8188C(v151 - 1664);
            while (v151 != v150);
            v152 = *(void **)(v148 - 24);
          }
          *(_QWORD *)(v148 - 16) = v150;
          operator delete(v152);
        }
        v148 -= 32;
      }
      while (v148 != v147);
      v149 = *(void **)&v203[0];
    }
    *((_QWORD *)&v203[0] + 1) = v147;
    operator delete(v149);
  }
  v153 = v197;
  *(_OWORD *)(v144 + 17) = v198;
  v154 = *(_OWORD *)v200;
  *(_OWORD *)(v144 + 33) = v199;
  *(_OWORD *)(v144 + 49) = v154;
  *(_BYTE *)v144 = v165;
  *(_QWORD *)(v144 + 64) = *(_QWORD *)&v200[15];
  *(_OWORD *)(v144 + 1) = v153;
  *(_OWORD *)(v144 + 72) = v201;
  *(_QWORD *)(v144 + 88) = v202;
  v155 = *(void **)(v144 + 96);
  if (v155)
  {
    *(_QWORD *)(v144 + 104) = v155;
    operator delete(v155);
    *(_QWORD *)(v144 + 96) = 0;
    *(_QWORD *)(v144 + 104) = 0;
    *(_QWORD *)(v144 + 112) = 0;
  }
  *(_OWORD *)(v144 + 96) = v167;
  v156 = v193;
  *(_OWORD *)(v144 + 120) = v192;
  *(_OWORD *)(v144 + 136) = v156;
  *(_OWORD *)(v144 + 193) = *(_OWORD *)((char *)v196 + 9);
  *(_OWORD *)(v144 + 184) = v196[0];
  v157 = v194;
  *(_OWORD *)(v144 + 168) = v195;
  *(_QWORD *)(v144 + 112) = v166;
  *(_OWORD *)(v144 + 152) = v157;
  if (v173)
  {
    if (v171 && *(_QWORD *)&__src[168])
    {
      *(_QWORD *)&__src[176] = *(_QWORD *)&__src[168];
      operator delete(*(void **)&__src[168]);
    }
    if (*(_QWORD *)&__src[144])
    {
      *(_QWORD *)&__src[152] = *(_QWORD *)&__src[144];
      operator delete(*(void **)&__src[144]);
    }
  }
  if ((_QWORD)v184)
  {
    *((_QWORD *)&v184 + 1) = v184;
    operator delete((void *)v184);
  }
  v158 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
  if (*((_QWORD *)&v190 + 1))
  {
    v159 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
}

void sub_20F043B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  uint64_t v16;
  void *v18;
  va_list va;

  va_start(va, a15);
  __cxa_free_exception(v15);
  sub_20E86665C(v16 - 256);
  sub_20F035EA4((uint64_t)va);
  v18 = (void *)STACK[0x11C8];
  if (STACK[0x11C8])
  {
    STACK[0x11D0] = (unint64_t)v18;
    operator delete(v18);
  }
  sub_20E86665C((uint64_t)&STACK[0x1228]);
  if (a12)
  {
    operator delete(a12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F043B80()
{
  uint64_t v0;

  sub_20E86665C(v0 - 256);
  JUMPOUT(0x20F043C50);
}

void sub_20F043B88(_Unwind_Exception *a1, int a2)
{
  std::mutex *v2;
  uint64_t v3;
  BOOL v4;
  char v5;
  uint64_t v6;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v4 = sub_20F053B28(v2, v3);
    if (v3)
      v5 = v4;
    else
      v5 = 1;
    if ((v5 & 1) == 0)
    {
      v6 = sub_20F04FD08(v3);
      MEMORY[0x212BC6398](v6, 0x1062C40E21CDE38);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_20F043BD4()
{
  uint64_t v0;

  __cxa_end_catch();
  sub_20E86665C(v0 - 144);
  sub_20F04FCC4((uint64_t *)&STACK[0x1238]);
  JUMPOUT(0x20F043BF0);
}

void sub_20F043BFC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20F043C0C()
{
  JUMPOUT(0x20F043C58);
}

void sub_20F043C20(_Unwind_Exception *a1)
{
  void *v1;

  sub_20E96E218((uint64_t)&STACK[0x270]);
  if (v1)
  {
    free(v1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F043C2C()
{
  uint64_t v0;

  sub_20E96E218((uint64_t)&STACK[0x270]);
  if (!v0)
    JUMPOUT(0x20F043D00);
  JUMPOUT(0x20F043CD0);
}

void sub_20F043C34()
{
  uint64_t v0;
  uint64_t v1;

  sub_20EA896D4((void **)(v1 - 256));
  sub_20E86665C(v0);
  JUMPOUT(0x20F043C50);
}

void sub_20F043C74()
{
  JUMPOUT(0x20F043CCCLL);
}

void sub_20F043CA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (!v1)
    _Unwind_Resume(a1);
  JUMPOUT(0x20F043CD0);
}

void sub_20F043CB0()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F043CC4);
}

void sub_20F043CE0()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F043CF4);
}

uint64_t sub_20F043D08(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 7368) + 23216) + 4864) + 13720) = a2;
  return result;
}

uint64_t sub_20F043D20(uint64_t result, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 7368) + 23216) + 10736) = a2;
  return result;
}

void sub_20F043D34(uint64_t a1, uint64_t a2)
{
  sub_20F10B780(*(_QWORD *)(a1 + 7368) + 560, a2);
  sub_20F10E818(*(_QWORD *)(*(_QWORD *)(a1 + 7368) + 112));
  sub_20F16E228(*(_QWORD *)(a1 + 7368) + 1664, 1);
}

uint64_t sub_20F043D74(uint64_t result, _BYTE *a2)
{
  if (a2[1])
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 7368) + 112) + 195) = *a2;
  return result;
}

uint64_t sub_20F043D90(uint64_t result, int a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = result;
  v4 = *(_QWORD *)(result + 7368);
  v5 = *(_QWORD *)(v4 + 120);
  if (a2)
  {
    if ((a3 & 1) != 0)
    {
      if (*(_BYTE *)(v5 + 490))
        *(_BYTE *)(v5 + 489) = 1;
      *(_BYTE *)(v5 + 490) = 0;
      if (*(_BYTE *)(v5 + 108))
      {
        *(_BYTE *)(v5 + 491) = 1;
        *(_DWORD *)(v5 + 492) = 0;
      }
      v6 = *(_QWORD *)(v4 + 112);
      if (*(_BYTE *)(v6 + 273))
        return result;
LABEL_25:
      *(_BYTE *)(v6 + 273) = 1;
      if (*(_BYTE *)(v6 + 100))
        *(_BYTE *)(v6 + 274) = a3;
      *(_DWORD *)(v6 + 276) = 0;
      v8 = *(unsigned __int8 *)(v6 + 203);
      *(_BYTE *)(v6 + 197) = 1;
      *(_DWORD *)(v6 + 198) = 0;
      *(_BYTE *)(v6 + 202) = 0;
      if (!v8)
        *(_BYTE *)(v6 + 203) = 1;
      *(_WORD *)(v6 + 192) = 0;
      *(_BYTE *)(v6 + 194) = 0;
      if (*(_BYTE *)(v6 + 112))
        *(_BYTE *)(v6 + 112) = 0;
      if (*(_BYTE *)(v6 + 128))
        *(_BYTE *)(v6 + 128) = 0;
      if (*(_BYTE *)(v6 + 144))
        *(_BYTE *)(v6 + 144) = 0;
      if (*(_BYTE *)(v6 + 160))
        *(_BYTE *)(v6 + 160) = 0;
      if (*(_BYTE *)(v6 + 176))
        *(_BYTE *)(v6 + 176) = 0;
      return result;
    }
    *(_BYTE *)(v5 + 160) = 0;
    *(_QWORD *)(v5 + 256) = 0;
    *(_QWORD *)(v5 + 264) = 0;
    *(_QWORD *)(v5 + 248) = 0;
    *(_WORD *)(v5 + 184) = 0;
    if (*(_BYTE *)(v5 + 409))
      *(_BYTE *)(v5 + 409) = 0;
    if (*(_BYTE *)(v5 + 456))
      *(_BYTE *)(v5 + 456) = 0;
    *(_DWORD *)(v5 + 168) = 0;
    *(_QWORD *)(v5 + 176) = 0xBFF0000000000000;
    if (*(_BYTE *)(v5 + 490))
      *(_BYTE *)(v5 + 489) = 1;
    *(_BYTE *)(v5 + 490) = 0;
    v6 = *(_QWORD *)(*(_QWORD *)(result + 7368) + 112);
    if (!*(_BYTE *)(v6 + 273))
      goto LABEL_25;
  }
  else
  {
    *(_BYTE *)(v5 + 160) = 0;
    *(_QWORD *)(v5 + 256) = 0;
    *(_QWORD *)(v5 + 264) = 0;
    *(_QWORD *)(v5 + 248) = 0;
    *(_WORD *)(v5 + 184) = 0;
    if (*(_BYTE *)(v5 + 409))
      *(_BYTE *)(v5 + 409) = 0;
    if (*(_BYTE *)(v5 + 456))
      *(_BYTE *)(v5 + 456) = 0;
    *(_DWORD *)(v5 + 168) = 0;
    *(_QWORD *)(v5 + 176) = 0xBFF0000000000000;
    if (*(_BYTE *)(v5 + 489))
    {
      *(_BYTE *)(v5 + 488) = 1;
      result = sub_20F095E64(v5 + 496);
    }
    *(_BYTE *)(v5 + 489) = 0;
    *(_BYTE *)(v5 + 491) = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 7368) + 112);
    *(_WORD *)(v7 + 273) = 0;
    *(_BYTE *)(v7 + 206) = 0;
    if (*(_BYTE *)(v7 + 203) && *(unsigned __int8 *)(v7 + 197) <= 1u)
      *(_BYTE *)(v7 + 203) = 0;
  }
  return result;
}

uint64_t sub_20F043F54(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 7368) + 120);
  *(_BYTE *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 248) = 0;
  *(_WORD *)(v1 + 184) = 0;
  if (*(_BYTE *)(v1 + 409))
    *(_BYTE *)(v1 + 409) = 0;
  if (*(_BYTE *)(v1 + 456))
    *(_BYTE *)(v1 + 456) = 0;
  *(_DWORD *)(v1 + 168) = 0;
  *(_QWORD *)(v1 + 176) = 0xBFF0000000000000;
  v2 = *(_QWORD *)(*(_QWORD *)(result + 7368) + 112);
  v3 = *(unsigned __int8 *)(v2 + 203);
  *(_BYTE *)(v2 + 197) = 4;
  *(_DWORD *)(v2 + 198) = 0;
  *(_BYTE *)(v2 + 202) = 0;
  if (!v3)
    *(_BYTE *)(v2 + 203) = 1;
  *(_BYTE *)(v2 + 196) = 1;
  return result;
}

uint64_t sub_20F043FD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float64x2_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  _QWORD *v25;
  uint64_t v26;
  double v27;
  double v29;
  double v31;
  float64x2_t v33;
  double v39;
  float64x2_t v40;
  double v42;
  float64x2_t v43;
  double v45;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  v7 = *(_QWORD *)(result + 4864);
  v8 = *(_QWORD *)(v7 + 2488);
  v9 = *(_QWORD *)(v7 + 2480);
  v10 = v8 - v9;
  if (!v10)
    goto LABEL_12;
  v11 = 0;
  v12 = v10 >> 2;
  if ((unint64_t)(v10 >> 2) <= 1)
    v12 = 1;
  while (*(_DWORD *)(a2 + 8) != *(_DWORD *)(v9 + 4 * v11))
  {
    if (v12 == ++v11)
      goto LABEL_12;
  }
  v13 = *(unsigned int *)(a2 + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  v16 = *(_QWORD **)(result + 4864);
  v17 = v16[285];
  if (0xCF3CF3CF3CF3CF3DLL * ((v16[286] - v17) >> 3) > v11)
  {
    v18 = v17 + 168 * v11;
    v19 = *(float64x2_t *)v18;
    _D2 = *(_QWORD *)(v18 + 40);
    v21 = *(float64x2_t *)(v18 + 24);
    v22 = *(double *)(v18 + 64);
    v23 = *(float64x2_t *)(v18 + 48);
    v24 = *(float64x2_t *)(v18 + 144);
    v15.f64[0] = *(float64_t *)(v18 + 160);
    if (v16[994])
      v25 = (_QWORD *)(result + 4824);
    else
      v25 = (_QWORD *)(result + 5280);
    v26 = *(_QWORD *)(*v25 + ((v13 >> 11) & 0x1FFFE0) + 8) + 1664 * (unsigned __int16)v13;
    v27 = *(double *)(v26 + 16);
    _Q17 = *(_OWORD *)v26;
    v29 = *(double *)(v26 + 40);
    _Q19 = *(float64x2_t *)(v26 + 24);
    v31 = *(double *)(v26 + 64);
    _Q21 = *(float64x2_t *)(v26 + 48);
    v33 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, *(double *)v26), v21, *(float64x2_t *)v26, 1), v23, v27);
    __asm { FMLA            D23, D2, V17.D[1] }
    v39 = _D23 + v22 * v27;
    v40 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, _Q19.f64[0]), v21, _Q19, 1), v23, v29);
    __asm { FMLA            D23, D2, V19.D[1] }
    v42 = _D23 + v22 * v29;
    v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, _Q21.f64[0]), v21, _Q21, 1), v23, v31);
    __asm { FMLA            D23, D2, V21.D[1] }
    v45 = _D23 + v22 * v31;
    _Q21.f64[0] = *(float64_t *)(v26 + 88);
    _Q23 = *(float64x2_t *)(v26 + 72);
    __asm { FMLA            D1, D2, V23.D[1] }
    _Q1.f64[0] = _Q1.f64[0] + v22 * _Q21.f64[0];
    *(float64x2_t *)a3 = v33;
    *(double *)(a3 + 16) = v39;
    *(float64x2_t *)(a3 + 24) = v40;
    *(double *)(a3 + 40) = v42;
    *(float64x2_t *)(a3 + 48) = v43;
    *(double *)(a3 + 64) = v45;
    *(float64x2_t *)(a3 + 72) = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, _Q23.f64[0]), v21, _Q23, 1), v23, _Q21.f64[0]), v24);
    *(_QWORD *)(a3 + 88) = *(_OWORD *)&vaddq_f64(_Q1, v15);
    *(_BYTE *)(a3 + 96) = 1;
  }
  else
  {
LABEL_12:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 96) = 0;
  }
  return result;
}

uint64_t sub_20F0441C4@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float64x2_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  float64x2_t v19;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  _QWORD *v25;
  uint64_t v26;
  double v27;
  double v29;
  double v31;
  float64x2_t v33;
  double v39;
  float64x2_t v40;
  double v42;
  float64x2_t v43;
  double v45;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  v9 = *(_QWORD *)(result + 4864);
  v10 = *(_QWORD *)(v9 + 2480);
  v11 = *(_QWORD *)(v9 + 2488);
  if (v10 == v11
    || (v12 = (unint64_t)(v11 - v10) >> 2,
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1),
        v15 = (v12 - 1),
        v16 = *(_QWORD **)(result + 4864),
        v17 = v16[285],
        0xCF3CF3CF3CF3CF3DLL * ((v16[286] - v17) >> 3) <= v15))
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 96) = 0;
  }
  else
  {
    v18 = v17 + 168 * v15;
    v19 = *(float64x2_t *)v18;
    _D2 = *(_QWORD *)(v18 + 40);
    v21 = *(float64x2_t *)(v18 + 24);
    v22 = *(double *)(v18 + 64);
    v23 = *(float64x2_t *)(v18 + 48);
    v24 = *(float64x2_t *)(v18 + 144);
    v14.f64[0] = *(float64_t *)(v18 + 160);
    if (v16[994])
      v25 = (_QWORD *)(result + 4824);
    else
      v25 = (_QWORD *)(result + 5280);
    v26 = *(_QWORD *)(*v25 + 32 * a2 + 8) + 1664 * a3;
    v27 = *(double *)(v26 + 16);
    _Q17 = *(_OWORD *)v26;
    v29 = *(double *)(v26 + 40);
    _Q19 = *(float64x2_t *)(v26 + 24);
    v31 = *(double *)(v26 + 64);
    _Q21 = *(float64x2_t *)(v26 + 48);
    v33 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, *(double *)v26), v21, *(float64x2_t *)v26, 1), v23, v27);
    __asm { FMLA            D23, D2, V17.D[1] }
    v39 = _D23 + v22 * v27;
    v40 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, _Q19.f64[0]), v21, _Q19, 1), v23, v29);
    __asm { FMLA            D23, D2, V19.D[1] }
    v42 = _D23 + v22 * v29;
    v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, _Q21.f64[0]), v21, _Q21, 1), v23, v31);
    __asm { FMLA            D23, D2, V21.D[1] }
    v45 = _D23 + v22 * v31;
    _Q21.f64[0] = *(float64_t *)(v26 + 88);
    _Q23 = *(float64x2_t *)(v26 + 72);
    __asm { FMLA            D1, D2, V23.D[1] }
    _Q1.f64[0] = _Q1.f64[0] + v22 * _Q21.f64[0];
    *(float64x2_t *)a4 = v33;
    *(double *)(a4 + 16) = v39;
    *(float64x2_t *)(a4 + 24) = v40;
    *(double *)(a4 + 40) = v42;
    *(float64x2_t *)(a4 + 48) = v43;
    *(double *)(a4 + 64) = v45;
    *(float64x2_t *)(a4 + 72) = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, _Q23.f64[0]), v21, _Q23, 1), v23, _Q21.f64[0]), v24);
    *(_QWORD *)(a4 + 88) = *(_OWORD *)&vaddq_f64(_Q1, v14);
    *(_BYTE *)(a4 + 96) = 1;
  }
  return result;
}

BOOL sub_20F044394(uint64_t a1)
{
  return *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1) + 4904) > 0;
}

BOOL sub_20F0443BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  v2 = *(_QWORD *)(v1 + 4848);
  return *(_BYTE *)(v2 + 2616)
      && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 1240) + 304) - 4) > *(_DWORD *)(v1 + 4904);
}

void sub_20F044408(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void *v42;
  void *v43;
  char **v44;
  char *v45;
  char *v46;
  char *v47;
  void *v48;
  uint64_t v49;
  char **v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  void *__p;
  char *v56;
  void *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char v61;

  MEMORY[0x24BDAC7A8](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  *(_BYTE *)(v5 + 56) = 0;
  *(_OWORD *)(v5 + 64) = 0u;
  v7 = (void **)(v5 + 64);
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 152) = -1;
  v8 = operator new(0x68uLL);
  *(_BYTE *)(v6 + 176) = 0;
  v9 = (void **)(v6 + 176);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24C9D0DF0;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  v8[10] = 0;
  v8[11] = v6 + 112;
  *(_QWORD *)(v6 + 168) = v8;
  v8[3] = 850045863;
  *(_QWORD *)(v6 + 160) = v8 + 3;
  *(_BYTE *)(v6 + 488) = 0;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 440))(v4);
  sub_20F137F64(v10);
  v11 = operator new(0x13B0uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_24C9F7CA0;
  v12 = sub_20F028CB8((uint64_t)(v11 + 3), (uint64_t)&__p);
  v13 = *(std::__shared_weak_count **)(v6 + 8);
  *(_QWORD *)v6 = v12;
  *(_QWORD *)(v6 + 8) = v11;
  if (!v13)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    sub_20F028268((uint64_t)&__p);
    v16 = *(_QWORD *)(v4 + 7368);
    if (!*(_BYTE *)(v16 + 512))
      goto LABEL_22;
  }
  else
  {
LABEL_5:
    sub_20F028268((uint64_t)&__p);
    v16 = *(_QWORD *)(v4 + 7368);
    if (!*(_BYTE *)(v16 + 512))
      goto LABEL_22;
  }
  if (*(_QWORD *)(v16 + 496) && *(_QWORD *)(v16 + 448) != *(_QWORD *)(v16 + 456))
  {
    sub_2102149A0((_QWORD *)(v16 + 400), (uint64_t)&__p);
    if (*(_BYTE *)(v6 + 56))
    {
      sub_20E99090C(v6 + 16, (uint64_t *)&__p);
      v17 = (char *)v57;
      if (!v57)
      {
LABEL_20:
        v22 = __p;
        __p = 0;
        if (v22)
          operator delete(v22);
        goto LABEL_22;
      }
    }
    else
    {
      v18 = __p;
      v19 = (unint64_t)v56;
      v17 = (char *)v57;
      v20 = v58;
      *(_QWORD *)(v6 + 32) = v57;
      __p = 0;
      v56 = 0;
      *(_QWORD *)(v6 + 16) = v18;
      *(_QWORD *)(v6 + 24) = v19;
      *(_QWORD *)(v6 + 40) = v20;
      *(_DWORD *)(v6 + 48) = v59;
      if (v20)
      {
        v21 = *((_QWORD *)v17 + 1);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v21 >= v19)
            v21 %= v19;
        }
        else
        {
          v21 &= v19 - 1;
        }
        v17 = 0;
        v18[v21] = v6 + 32;
        v57 = 0;
        v58 = 0;
      }
      *(_BYTE *)(v6 + 56) = 1;
      if (!v17)
        goto LABEL_20;
    }
    do
    {
      v29 = *(char **)v17;
      if (v17[39] < 0)
        operator delete(*((void **)v17 + 2));
      operator delete(v17);
      v17 = v29;
    }
    while (v29);
    goto LABEL_20;
  }
LABEL_22:
  if (v2)
  {
    sub_20FCBB544((uint64_t *)&__p, *(uint64_t **)(v4 + 7368));
    sub_20E990708(v7, (uint64_t)&__p);
    sub_20EAFDF54((uint64_t)&v60);
    v23 = (char *)__p;
    if (__p)
    {
      v24 = v56;
      v25 = __p;
      if (v56 != __p)
      {
        do
        {
          v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
          if (v26)
          {
            v27 = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          v24 -= 16;
        }
        while (v24 != v23);
        v25 = __p;
      }
      v56 = v23;
      operator delete(v25);
    }
  }
  if (*(_BYTE *)(v6 + 488))
  {
    v30 = (char *)*v9;
    if (*v9)
    {
      v31 = *(char **)(v6 + 184);
      v32 = *v9;
      if (v31 != v30)
      {
        do
        {
          v33 = (void *)*((_QWORD *)v31 - 22);
          if (v33)
          {
            *((_QWORD *)v31 - 21) = v33;
            operator delete(v33);
          }
          v31 -= 272;
        }
        while (v31 != v30);
        v32 = *v9;
      }
      *(_QWORD *)(v6 + 184) = v30;
      operator delete(v32);
    }
    *(_BYTE *)(v6 + 488) = 0;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v4 + 7368) + 1680);
  if (v34)
  {
    sub_20F16E3B8((uint64_t)&__p, v34);
    if (v61)
    {
      v35 = (char *)__p;
      if (__p)
      {
        v36 = v56;
        if (v56 == __p)
        {
          v56 = (char *)__p;
          v37 = __p;
        }
        else
        {
          do
          {
            v38 = (void *)*((_QWORD *)v36 - 22);
            if (v38)
            {
              *((_QWORD *)v36 - 21) = v38;
              operator delete(v38);
            }
            v36 -= 272;
          }
          while (v36 != v35);
          v37 = __p;
          v56 = v35;
        }
        operator delete(v37);
      }
      v39 = *(_QWORD *)(*(_QWORD *)(v4 + 7368) + 1680);
      if (v39)
      {
        sub_20F16E3B8((uint64_t)&__p, v39);
      }
      else
      {
        LOBYTE(__p) = 0;
        v61 = 0;
      }
      sub_20E991220((char **)(v6 + 176), (uint64_t)&__p);
      if (v61)
      {
        v40 = (char *)__p;
        if (__p)
        {
          v41 = v56;
          v42 = __p;
          if (v56 != __p)
          {
            do
            {
              v43 = (void *)*((_QWORD *)v41 - 22);
              if (v43)
              {
                *((_QWORD *)v41 - 21) = v43;
                operator delete(v43);
              }
              v41 -= 272;
            }
            while (v41 != v40);
            v42 = __p;
          }
          v56 = v40;
          operator delete(v42);
        }
      }
      v44 = *(char ***)(*(_QWORD *)(v4 + 7368) + 1680);
      if (v44 && *((_BYTE *)v44 + 312))
      {
        v45 = *v44;
        if (*v44)
        {
          v46 = v44[1];
          v47 = *v44;
          if (v46 != v45)
          {
            do
            {
              v48 = (void *)*((_QWORD *)v46 - 22);
              if (v48)
              {
                *((_QWORD *)v46 - 21) = v48;
                operator delete(v48);
              }
              v46 -= 272;
            }
            while (v46 != v45);
            v47 = *v44;
          }
          v44[1] = v45;
          operator delete(v47);
        }
        *((_BYTE *)v44 + 312) = 0;
      }
      if (*(_BYTE *)(v4 + 7078))
      {
        v49 = *(_QWORD *)(v4 + 7368);
        v50 = *(char ***)(v49 + 1680);
        if (v50 && *((_BYTE *)v50 + 312))
        {
          v51 = *v50;
          if (*v50)
          {
            v52 = v50[1];
            v53 = *v50;
            if (v52 != v51)
            {
              do
              {
                v54 = (void *)*((_QWORD *)v52 - 22);
                if (v54)
                {
                  *((_QWORD *)v52 - 21) = v54;
                  operator delete(v54);
                }
                v52 -= 272;
              }
              while (v52 != v51);
              v53 = *v50;
            }
            v50[1] = v51;
            operator delete(v53);
          }
          *((_BYTE *)v50 + 312) = 0;
        }
        *(_QWORD *)(v49 + 1696) = 0;
        *(_DWORD *)(v49 + 1704) = 0;
      }
    }
  }
}

void sub_20F04490C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAFDDD0(v1);
  _Unwind_Resume(a1);
}

void sub_20F044920(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAFDDD0(v1);
  _Unwind_Resume(a1);
}

void sub_20F044938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20F02C9A8((void **)va);
  sub_20EAFDDD0(v2);
  _Unwind_Resume(a1);
}

void sub_20F044954(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAFDDD0(v1);
  _Unwind_Resume(a1);
}

void sub_20F044968(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAFDDD0(v1);
  _Unwind_Resume(a1);
}

void sub_20F04497C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *v13;

  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  sub_20F028268((uint64_t)&a10);
  sub_20EAFDDD0(v10);
  _Unwind_Resume(a1);
}

void sub_20F0449AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAFDDD0(v1);
  _Unwind_Resume(a1);
}

void sub_20F0449C0(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, float64x2_t a6@<Q3>)
{
  sub_20F02EF0C(a2, *(_QWORD *)(a1 + 7368), a3, a4, a5, a6);
}

uint64_t sub_20F0449CC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)a1[921];
  v3 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 440))(a1) + 4864);
  v4 = (unint64_t *)a1[813];
  v5 = (unint64_t *)a1[814];
  v6 = v4 + 1;
  if (v4 != v5 && v6 != v5)
  {
    v8 = *v4;
    v9 = v4 + 1;
    do
    {
      v11 = *v9++;
      v10 = v11;
      if (v11 < v8)
      {
        v8 = v10;
        v4 = v6;
      }
      v6 = v9;
    }
    while (v9 != v5);
  }
  v12 = *v4;
  v13 = *(_DWORD **)(v3 + 2480);
  v14 = *(_DWORD **)(v3 + 2488);
  v24 = 0;
  v25 = v12;
  LOBYTE(v26) = 0;
  LOBYTE(v27) = 0;
  if (v13 == v14)
    return v26;
  v15 = v2[5];
  if (!v15)
    return v26;
LABEL_11:
  v16 = v2[3];
  do
  {
    v17 = *(uint64_t **)(*v2 + 16 * (v16 % ((uint64_t)(v2[1] - *v2) >> 4)));
    if (*((_DWORD *)v17 + 12) == *v13)
    {
      v18 = operator new(0x20uLL);
      *v18 = &off_24C9F8310;
      v18[1] = &v25;
      v18[2] = &v24;
      v18[3] = &v26;
      v30 = v18;
      v19 = (uint64_t *)v17[10];
      if (v19)
      {
        if (*v17 == v17[1])
        {
          do
            v19 = (uint64_t *)*v19;
          while (v19);
        }
        else
        {
          do
          {
            v20 = *v17;
            v21 = v17[1];
            if (*v17 != v21)
            {
              while ((unsigned __int16)HIWORD(*((_DWORD *)v19 + 4)) != *(_DWORD *)v20
                   || 0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v20 + 16) - *(_QWORD *)(v20 + 8)) >> 3) <= (unint64_t)(unsigned __int16)*((_DWORD *)v19 + 4))
              {
                v20 += 104;
                if (v20 == v21)
                  goto LABEL_19;
              }
              v28 = *((_DWORD *)v19 + 4);
              if (!v30)
                sub_20E86D37C();
              (*(void (**)(_BYTE *, int *, uint64_t *))(*(_QWORD *)v30 + 48))(v30, &v28, v19 + 3);
            }
LABEL_19:
            v19 = (uint64_t *)*v19;
          }
          while (v19);
          v18 = v30;
          if (v30 == v29)
          {
            v18 = v29;
            v22 = 4;
            goto LABEL_30;
          }
          if (!v30)
            break;
        }
      }
      v22 = 5;
LABEL_30:
      (*(void (**)(void))(*v18 + 8 * v22))();
      break;
    }
    ++v16;
    --v15;
  }
  while (v15);
  while (1)
  {
    if (++v13 == v14)
      return v26;
    v15 = v2[5];
    if (v15)
      goto LABEL_11;
  }
}

void sub_20F044C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
  if (a17 == &a14)
  {
    (*(void (**)(void))(a14 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a17)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a17 + 40))();
  _Unwind_Resume(exception_object);
}

void sub_20F044C78(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *(uint64_t **)(a1 + 7368);
  v4 = v3[5];
  if (v4)
  {
    v5 = *(_DWORD *)(*(_QWORD *)(v3[2902] + 4864) + 5288);
    v6 = v3[3];
    v7 = *v3;
    v8 = (*(_QWORD *)(*(_QWORD *)(a1 + 7368) + 8) - v7) >> 4;
    while (1)
    {
      v9 = *(_QWORD *)(v7 + 16 * (v6 % v8));
      if (*(_DWORD *)(v9 + 48) == v5)
        break;
      ++v6;
      if (!--v4)
        goto LABEL_5;
    }
    sub_20FCBA984(v9, a2, a3);
  }
  else
  {
LABEL_5:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_20F044CD8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v5 = *(_QWORD *)(a1 + 7368);
  if (*(_BYTE *)(v5 + 392)
    || *(_BYTE *)(v5 + 512) && *(_QWORD *)(v5 + 496) && *(_QWORD *)(v5 + 448) != *(_QWORD *)(v5 + 456))
  {
    v6 = atomic_load((unsigned __int8 *)&qword_254A61990);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A61990))
    {
      qword_254A619D0 = 0;
      qword_254A619D8 = 0;
      qword_254A619E0 = 0;
      sub_20EAC040C((char **)&qword_254A619D0, 0x147uLL);
      sub_20F053F1C((uint64_t)&v11, (uint64_t)&v10, &qword_254A619D0);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A619D0, &dword_20E81F000);
      __cxa_guard_release(&qword_254A61990);
    }
    v7 = qword_254A619D0 + 7008;
    if (*(_BYTE *)(v5 + 392))
      sub_20FDBBC20(v5 + 312, (unsigned __int8 *)(qword_254A619D0 + 7008), 1.0);
    if (*(_BYTE *)(v5 + 512) && *(_QWORD *)(v5 + 496) && *(_QWORD *)(v5 + 448) != *(_QWORD *)(v5 + 456))
      sub_210214860(v5 + 400, v7, 1.0);
    if (a3)
    {
      v8 = atomic_load((unsigned __int8 *)&qword_254A61998);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254A61998))
      {
        qword_254A619E8 = 0;
        qword_254A619F0 = 0;
        qword_254A619F8 = 0;
        sub_20EAC040C((char **)&qword_254A619E8, 0x147uLL);
        sub_20F053F1C((uint64_t)&v13, (uint64_t)&v12, &qword_254A619E8);
        __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A619E8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A61998);
      }
      v9 = qword_254A619E8 + 7032;
      if (*(_BYTE *)(v5 + 392))
        sub_20FDBBC20(v5 + 312, (unsigned __int8 *)(qword_254A619E8 + 7032), (double)a2);
      if (*(_BYTE *)(v5 + 512) && *(_QWORD *)(v5 + 496) && *(_QWORD *)(v5 + 448) != *(_QWORD *)(v5 + 456))
        sub_210214860(v5 + 400, v9, (double)a2);
    }
  }
}

void sub_20F044EE4(_Unwind_Exception *a1)
{
  __guard *v1;
  __guard v3;
  uint64_t v4;
  void *v5;

  v3 = v1[10];
  if (v3)
  {
    v4 = qword_254A619F0;
    v5 = (void *)v1[10];
    if (qword_254A619F0 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = (void *)qword_254A619E8;
    }
    v1[11] = v3;
    operator delete(v5);
  }
  __cxa_guard_abort(v1);
  _Unwind_Resume(a1);
}

void sub_20F044FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  double v6;
  char v7;
  char v8;

  if (*(_BYTE *)(a2 + 8))
  {
    v2 = *(_QWORD *)(a1 + 7368);
    v3 = *(_QWORD *)a2;
    v4 = atomic_load((unsigned __int8 *)&qword_254A619A0);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A619A0))
    {
      qword_254A61A00 = 0;
      qword_254A61A08 = 0;
      qword_254A61A10 = 0;
      sub_20EAC040C((char **)&qword_254A61A00, 0x147uLL);
      sub_20F053F1C((uint64_t)&v8, (uint64_t)&v7, &qword_254A61A00);
      __cxa_atexit((void (*)(void *))sub_20E89FB98, &qword_254A61A00, &dword_20E81F000);
      __cxa_guard_release(&qword_254A619A0);
    }
    v5 = qword_254A61A00 + 7056;
    v6 = (double)v3 / 1000.0;
    if (*(_BYTE *)(v2 + 392))
      sub_20FDBBC20(v2 + 312, (unsigned __int8 *)(qword_254A61A00 + 7056), v6);
    if (*(_BYTE *)(v2 + 512) && *(_QWORD *)(v2 + 496) && *(_QWORD *)(v2 + 448) != *(_QWORD *)(v2 + 456))
      sub_210214860(v2 + 400, v5, v6);
  }
}

void sub_20F0450C8(_Unwind_Exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = qword_254A61A00;
  if (qword_254A61A00)
  {
    v3 = qword_254A61A08;
    v4 = (void *)qword_254A61A00;
    if (qword_254A61A08 != qword_254A61A00)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)qword_254A61A00;
    }
    qword_254A61A08 = v2;
    operator delete(v4);
  }
  __cxa_guard_abort(&qword_254A619A0);
  _Unwind_Resume(a1);
}

void sub_20F045134(uint64_t a1)
{
  __uint64_t *v1;
  float64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float64x2_t v59;
  uint64_t v60;
  unsigned int v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v65;
  float64x2_t v66;
  int8x16_t v69;
  int8x16_t v71;
  int8x16_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v79;
  double v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v88;
  unsigned int v89;
  _BOOL4 v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  char *v114;
  unsigned __int8 *v115;
  double v116;
  uint64_t v117;
  unsigned __int8 *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  double v130;
  uint64_t v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  unint64_t *p_shared_owners;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  _BYTE *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  size_t v149;
  const char *v150;
  uint64_t v151;
  unsigned __int8 v152;
  unsigned __int8 v153;
  const char *v154;
  size_t v155;
  _BYTE *v156;
  const char *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  size_t v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  float64_t v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  __uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  _QWORD *v201;
  double *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  float64_t v208;
  unsigned __int8 v209;
  unsigned __int8 v210;
  _QWORD *v211;
  int v212;
  std::chrono::steady_clock::time_point v213;
  std::chrono::steady_clock::time_point *v214;
  uint64_t *v215;
  unsigned __int8 v216;
  char *v218;
  size_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t i;
  uint64_t v223;
  unsigned __int8 v224;
  uint64_t v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  _BYTE *v230;
  BOOL v231;
  unint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  BOOL v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  void *v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  int v256;
  _BYTE *v257;
  void *v258;
  int v259;
  uint64_t v260;
  int v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t *v267;
  int v268;
  unsigned __int8 v269;
  unint64_t v270;
  char *v271;
  size_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t j;
  uint64_t v276;
  unsigned __int8 v277;
  uint64_t v278;
  void **v279;
  _OWORD *v280;
  __int128 v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t *v288;
  __int128 *v289;
  __uint64_t *v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  float64x2_t v295;
  uint64_t *v296;
  unsigned int *v297;
  float64_t v298;
  uint64_t *v299;
  unsigned int v300;
  unsigned int v301;
  int v302;
  unsigned __int8 v303;
  unsigned int v304;
  unsigned int v306;
  int v307;
  char *v308;
  size_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t k;
  uint64_t v313;
  uint64_t v314;
  float64x2_t v315;
  const std::string::value_type *v316;
  size_t v317;
  float64x2_t v318;
  float64x2_t v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  float64x2_t v324;
  uint64_t v325;
  float64x2_t v326;
  float64x2_t v327;
  unint64_t v328;
  const std::string::value_type *v329;
  size_t v330;
  float64x2_t v331;
  unsigned __int16 v332;
  _QWORD *v333;
  _QWORD *v334;
  void *v335;
  uint64_t v336;
  _QWORD *v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t m;
  uint64_t v341;
  void *v342;
  unint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  unint64_t v346;
  _QWORD *v347;
  void *v348;
  uint64_t v349;
  _QWORD *v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  __int128 v357;
  uint64_t v358;
  double v359;
  double v360;
  double v361;
  float64x2_t v362;
  BOOL v363;
  char v364;
  __int8 v365;
  __int8 v366;
  void *v367;
  __int8 v368;
  char v369;
  char v370;
  __int8 v371;
  char v372;
  char v373;
  _BYTE *v374;
  __int8 v375;
  char v376;
  char v377;
  char v378;
  char v379;
  char v380;
  char v381;
  float64x2_t v382;
  _OWORD *v383;
  uint64_t v384;
  __int128 v385;
  __int128 v386;
  uint64_t v387;
  uint64_t v388;
  unsigned int v389;
  uint64_t v390;
  unint64_t v391;
  int8x8_t *v392;
  float64x2_t v393;
  float64_t v395;
  unsigned int v396;
  float64_t v397;
  float64_t v398;
  unsigned __int8 v399;
  uint64_t v400;
  uint64_t n;
  unsigned __int8 v402;
  unsigned __int8 v403;
  uint64_t v404;
  uint64_t ii;
  unsigned __int8 v406;
  uint64_t v407;
  char v408;
  unsigned __int8 v409;
  uint64_t v410;
  uint64_t jj;
  unsigned __int8 v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  BOOL v417;
  unint64_t v418;
  uint64_t v419;
  unsigned __int8 v420;
  uint64_t v421;
  uint64_t kk;
  unsigned __int8 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t *v429;
  unint64_t v430;
  unint64_t *v431;
  unint64_t *v432;
  unint64_t v433;
  __int128 v434;
  __int128 v435;
  uint64_t v436;
  char *v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  std::__shared_weak_count *v443;
  char *v444;
  uint64_t v445;
  unint64_t v446;
  unint64_t v447;
  int v448;
  char *v449;
  __int128 v450;
  char *v451;
  char *v452;
  __int128 v453;
  __int128 v454;
  char *v455;
  uint64_t v456;
  char *v457;
  char *v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  char *v462;
  char *v463;
  __int128 v464;
  __int128 v465;
  char *v466;
  char *v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  std::__shared_weak_count *v471;
  unint64_t *v472;
  unint64_t v473;
  std::__shared_weak_count *v474;
  unint64_t *v475;
  unint64_t v476;
  unint64_t *v477;
  unint64_t v478;
  int v479;
  char v480;
  uint64_t v481;
  double v482;
  int v483;
  int v484;
  __int16 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  std::__shared_weak_count *v489;
  unint64_t *v490;
  unint64_t v491;
  std::__shared_weak_count *v492;
  unint64_t *v493;
  unint64_t v494;
  uint64_t v495;
  __int128 v496;
  uint64_t v497;
  __int128 v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  uint64_t *v508;
  uint64_t v509;
  int v510;
  unint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unsigned int v514;
  unsigned int v515;
  unsigned __int8 *v516;
  uint64_t v517;
  float64x2_t v518;
  double v519;
  float64x2_t v520;
  double v521;
  float64x2_t v522;
  float64x2_t v523;
  float64_t v524;
  int8x16_t v525;
  double v526;
  unint64_t v527;
  int8x16_t v528;
  double v529;
  unint64_t v530;
  char v531;
  __int8 v532;
  __int8 v533;
  char v534;
  char v535;
  char v536;
  char v537;
  char v538;
  char v539;
  __int8 v540;
  __int8 v541;
  char v542;
  char v543;
  char v544;
  char v545;
  char v546;
  char v547;
  char v548;
  uint64_t v549;
  __int128 v550;
  __int128 v551;
  unsigned int v552;
  unsigned int v553;
  int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v560;
  int v561;
  unsigned int v562;
  int v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  int v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t *v571;
  BOOL v572;
  BOOL v573;
  uint64_t v574;
  uint64_t v575;
  int v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t *v579;
  BOOL v580;
  BOOL v581;
  double v582;
  int v583;
  double v584;
  uint64_t v585;
  unsigned int v586;
  int v587;
  _QWORD *v588;
  char v589;
  uint64_t v590;
  unint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t *v595;
  int v596;
  unsigned __int8 v597;
  uint64_t v598;
  uint64_t v599;
  _QWORD *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  __int8 v604;
  char v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  char *v609;
  int64_t v610;
  unint64_t v611;
  _OWORD *v612;
  __uint64_t *v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __uint64_t v620;
  unint64_t *v621;
  unint64_t v622;
  __uint64_t v623;
  unint64_t *v624;
  unint64_t v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  uint64_t v629;
  _OWORD *v630;
  void *v631;
  char *v632;
  std::__shared_weak_count *v633;
  unint64_t *v634;
  unint64_t v635;
  std::__shared_weak_count *v636;
  unint64_t *v637;
  unint64_t v638;
  unint64_t v639;
  int v640;
  __uint64_t v641;
  __uint64_t v642;
  void *v643;
  __uint64_t v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  std::__shared_weak_count *v648;
  unint64_t *v649;
  unint64_t v650;
  int v651;
  __int16 v652;
  __int128 v653;
  int8x16_t v654;
  double v658;
  int v659;
  int v660;
  uint64_t *v661;
  int v662;
  unsigned __int8 v663;
  char *v665;
  size_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t mm;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  double v675;
  double v677;
  double v679;
  int8x16_t v680;
  std::logic_error *v681;
  _QWORD *v682;
  std::runtime_error *exception;
  size_t v684;
  double v685;
  char v686;
  int v687;
  char v688;
  char v689;
  int8x16_t v690;
  int v691;
  int8x16_t v692;
  __int8 v693;
  double v694;
  char v695;
  char v696;
  int8x16_t v697;
  __int8 v698;
  double v699;
  double v700;
  double v701;
  float64x2_t v702;
  double v703;
  double *v704;
  uint64_t v705;
  int8x8_t v706;
  char v707;
  _OWORD *v708;
  uint64_t v709;
  uint64_t v710;
  _OWORD *v711;
  unsigned __int8 *v712;
  int8x8_t *v713;
  void **v714;
  int64x2_t v715;
  int64x2_t v716;
  float64x2_t v717;
  double v718;
  float64x2_t v719;
  uint64_t v720;
  char v721;
  double __dst;
  float64x2_t v723;
  double v724;
  uint64_t v725;
  float64x2_t v726;
  int8x16_t v727;
  _BYTE *v728;
  float64x2_t v729;
  float64_t v730;
  int64x2_t v731;
  unint64_t v732;
  float64x2_t v733;
  int8x16_t v734;
  float64x2_t v735;
  float64_t v736;
  _QWORD *v737;
  float64x2_t v738;
  unint64_t v739;
  float64x2_t v740;
  int8x16_t v741;
  __int128 v742;
  uint64_t v743;
  __int128 v744;
  uint64_t v745;
  char v746;
  __int128 v747;
  int v748;
  __int16 v749;
  __int8 v750;
  float64_t v751;
  __int128 v752;
  float64_t v753;
  float64_t v754;
  __int128 v755;
  float64_t v756;
  __int128 v757;
  __int128 v758;
  uint64_t v759;
  char v760;
  __uint64_t v761[2];
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  __int128 v769;
  void *v770;
  _BYTE *v771;
  void *v772[39];
  char v773;
  char v774;
  char v775;
  __int128 v776[8];
  char v777;
  int32x4_t v778[4];
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  uint64_t v789;
  int v790;
  char v791;
  uint64_t v792;
  char v793;
  float64x2_t v794;
  uint64_t v795;
  char v796;
  _QWORD v797[2];
  __uint64_t v798[2];
  _BYTE v799[24];
  uint64_t v800;
  __int128 v801;
  double v802;
  __int128 v803;
  double v804;
  __int128 v805;
  uint64_t v806;
  char v807;
  int v808;
  _BYTE v809[24];
  double v810;
  int8x16_t v811;
  double v812;
  double v813;
  int8x16_t v814;
  double v815;
  __int128 v816;
  __int128 v817;
  uint64_t v818;
  unsigned __int8 v819;
  void *v820;
  char *v821;
  int64_t v822;
  _BYTE object[96];
  void *v824[2];
  _BYTE v825[368];
  int v826;
  char v827;
  __int128 v828;
  __int128 v829;
  uint64_t v830;

  MEMORY[0x24BDAC7A8](a1);
  v5 = v4;
  v7 = v6;
  v830 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  *(_DWORD *)v7 = 1;
  *(_BYTE *)(v7 + 8) = 0;
  v8 = v7 + 8;
  *(_BYTE *)(v7 + 3784) = 0;
  *(_BYTE *)(v7 + 3792) = 0;
  *(_BYTE *)(v7 + 3832) = 0;
  *(_BYTE *)(v7 + 3840) = 0;
  *(_BYTE *)(v7 + 3864) = 0;
  *(_BYTE *)(v7 + 4104) = 0;
  *(_BYTE *)(v7 + 4112) = 0;
  v711 = (_OWORD *)(v7 + 4112);
  *(_BYTE *)(v7 + 4120) = 0;
  *(_BYTE *)(v7 + 4128) = 0;
  *(_BYTE *)(v7 + 4136) = 0;
  *(_BYTE *)(v7 + 4144) = 0;
  *(_BYTE *)(v7 + 4152) = 0;
  *(_BYTE *)(v7 + 4160) = 0;
  *(_BYTE *)(v7 + 4168) = 0;
  *(_BYTE *)(v7 + 4176) = 0;
  *(_BYTE *)(v7 + 4184) = 0;
  *(_DWORD *)(v7 + 4199) = 0;
  *(_QWORD *)(v7 + 4192) = 0;
  *(_BYTE *)(v7 + 3888) = 0;
  *(_OWORD *)(v7 + 3872) = 0u;
  *(_WORD *)(v7 + 4203) = 1;
  *(_BYTE *)(v7 + 4205) = 0;
  *(_DWORD *)(v7 + 4211) = 256;
  *(_BYTE *)(v7 + 4216) = 0;
  *(_BYTE *)(v7 + 4224) = 0;
  *(_BYTE *)(v7 + 4232) = 0;
  *(_BYTE *)(v7 + 4240) = 0;
  *(_DWORD *)(v7 + 4248) = 0;
  *(_BYTE *)(v7 + 4256) = 0;
  *(_BYTE *)(v7 + 4264) = 0;
  *(_WORD *)(v7 + 4272) = 0;
  *(_BYTE *)(v7 + 4274) = 0;
  *(_BYTE *)(v7 + 5968) = 0;
  *(_QWORD *)(v7 + 4296) = 0;
  *(_OWORD *)(v7 + 4280) = 0u;
  *(_BYTE *)(v7 + 4304) = 0;
  *(_QWORD *)(v7 + 5976) = 0x7FF8000000000000;
  v9 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v7 + 5984) = v9;
  *(int64x2_t *)(v7 + 6000) = v9;
  *(int64x2_t *)(v7 + 6016) = v9;
  *(_OWORD *)(v7 + 6032) = xmmword_2102DD520;
  __asm { FMOV            V1.2D, #1.0 }
  *(float64x2_t *)(v7 + 6048) = _Q1;
  *(_QWORD *)(v7 + 6080) = 0;
  *(_QWORD *)(v7 + 6064) = 0;
  *(_QWORD *)(v7 + 6072) = 0;
  *(_QWORD *)(v7 + 6088) = 0x3FF0000000000000;
  *(float64x2_t *)(v7 + 6096) = _Q1;
  *(_OWORD *)(v7 + 6128) = 0u;
  *(_OWORD *)(v7 + 6160) = 0u;
  *(_OWORD *)(v7 + 6112) = 0u;
  *(_OWORD *)(v7 + 6144) = 0u;
  *(_OWORD *)(v7 + 6176) = 0u;
  *(_QWORD *)(v7 + 6192) = 0;
  *(_QWORD *)(v7 + 6136) = 0x3FF0000000000000;
  *(_QWORD *)(v7 + 6168) = 0x3FF0000000000000;
  *(_QWORD *)(v7 + 6264) = 0;
  *(_OWORD *)(v7 + 6232) = 0u;
  *(_OWORD *)(v7 + 6248) = 0u;
  *(_OWORD *)(v7 + 6216) = 0u;
  v712 = (unsigned __int8 *)(v7 + 4104);
  v740 = _Q1;
  *(float64x2_t *)(v7 + 6200) = _Q1;
  *(_QWORD *)(v7 + 6240) = 0x3FF0000000000000;
  *(_QWORD *)(v7 + 6272) = 0x3FF0000000000000;
  *(_QWORD *)(v7 + 6280) = -1;
  *(_BYTE *)(v7 + 6304) = 0;
  *(_BYTE *)(v7 + 6320) = 0;
  *(_QWORD *)(v7 + 6288) = 0;
  *(_DWORD *)(v7 + 6296) = 0;
  v737 = (_QWORD *)v5;
  v710 = v5 + 6656;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5))
  {
    *(_OWORD *)v761 = 0u;
    v762 = 0u;
    LODWORD(v763) = 733221020;
    kdebug_trace();
    LOBYTE(v779) = 0;
    BYTE8(v780) = 0;
    object[0] = 0;
    v825[16] = 0;
    *(_BYTE *)(v7 + 6297) = sub_20F030720((_QWORD *)v5, 1, (uint64_t)&v779, (uint64_t)object, *(unsigned __int8 *)(v5 + 7187));
    kdebug_trace();
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 432))(v5);
  *(_DWORD *)v7 = sub_20F12E200(v14);
  v15 = *(_QWORD **)(v5 + 7368);
  if (v15[5])
  {
    v16 = v15[4];
    if (v16)
    {
      v17 = *(uint64_t **)(*v15 + 16 * v16 - 16);
      if (!v17)
        goto LABEL_12;
    }
    else
    {
      v17 = *(uint64_t **)(v15[1] - 16);
      if (!v17)
        goto LABEL_12;
    }
    v18 = *v17;
    if (*v17 != v17[1])
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19 != *(_QWORD *)(v18 + 16))
      {
        v20 = *(unsigned __int8 *)(v7 + 6320);
        *(_OWORD *)(v7 + 6304) = *(_OWORD *)(v19 + 8);
        if (!v20)
          *(_BYTE *)(v7 + 6320) = 1;
      }
    }
  }
LABEL_12:
  v21 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 432))(v5) + 4864);
  if (!*(_BYTE *)(v21 + 11664)
    && *(_DWORD *)(v21 + 1936) == (uint64_t)(*(_QWORD *)(v21 + 2864) - *(_QWORD *)(v21 + 2856)) >> 2)
  {
    v22 = *(_QWORD **)(v5 + 7368);
    v23 = *(_QWORD *)(v22[2902] + 4864);
    v24 = *(unsigned int **)(v23 + 2480);
    if (v24 != *(unsigned int **)(v23 + 2488))
    {
      v25 = v22[36];
      v26 = v22[37];
      if (v25 != v26)
      {
        v27 = *v24;
        do
        {
          while (*(_DWORD *)(v25 + 144) >= v27)
          {
            v25 += 152;
            if (v25 == v26)
              goto LABEL_23;
          }
          v28 = v25;
          if (v25 + 152 != v26)
          {
            v29 = v25;
            v28 = v25;
            do
            {
              v30 = *(_QWORD *)(v28 + 152);
              v28 += 152;
              *(_QWORD *)v29 = v30;
              *(_DWORD *)(v29 + 8) = *(_DWORD *)(v29 + 160);
              v31 = *(_OWORD *)(v29 + 248);
              *(_OWORD *)(v29 + 80) = *(_OWORD *)(v29 + 232);
              *(_OWORD *)(v29 + 96) = v31;
              v32 = *(_OWORD *)(v29 + 184);
              *(_OWORD *)(v29 + 16) = *(_OWORD *)(v29 + 168);
              *(_OWORD *)(v29 + 32) = v32;
              v33 = *(_OWORD *)(v29 + 216);
              *(_OWORD *)(v29 + 48) = *(_OWORD *)(v29 + 200);
              *(_OWORD *)(v29 + 64) = v33;
              v34 = *(_OWORD *)(v29 + 264);
              v35 = *(_OWORD *)(v29 + 280);
              *(_DWORD *)(v29 + 144) = *(_DWORD *)(v29 + 296);
              v36 = v29 + 304;
              *(_OWORD *)(v29 + 112) = v34;
              *(_OWORD *)(v29 + 128) = v35;
              v29 = v28;
            }
            while (v36 != v26);
          }
          v22[37] = v28;
          v26 = v28;
        }
        while (v25 != v28);
      }
    }
  }
LABEL_23:
  v725 = v7;
  switch(*(_DWORD *)v7)
  {
    case 0:
    case 3:
      goto LABEL_26;
    case 1:
      kdebug_trace();
      return;
    case 2:
      kdebug_trace();
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "vfusion Internal error");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    default:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 2960, (uint64_t)"front_end_result.vfusion_return == VFusionReturn::kVFusionTakeStep || front_end_result.vfusion_return == VFusionReturn::kVFusionSkipStepDueToUnderConstrainedWindow", 163, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
LABEL_26:
      v727.i64[0] = v7 + 4280;
      kdebug_trace();
      v708 = (_OWORD *)(v7 + 5976);
      v37 = *(_DWORD *)v7;
      v38 = *(_QWORD **)(v5 + 7368);
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 432))(v5);
      v40 = v38[5];
      if (!v40)
        goto LABEL_30;
      v41 = v38[3];
      break;
  }
  do
  {
    v42 = *(_QWORD *)(*v38 + 16 * (v41 % ((uint64_t)(v38[1] - *v38) >> 4)));
    if (*(_DWORD *)(v42 + 48) == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 4864) + 2488) - 4))
    {
      v707 = 0;
      goto LABEL_33;
    }
    ++v41;
    --v40;
  }
  while (v40);
LABEL_30:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 2968, (uint64_t)"opt_latest_camera_set_features", 30, (uint64_t)"Missing latest camera set features!", 35, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v42 = 0;
  v707 = 1;
LABEL_33:
  v43 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 432))(v5) + 4864);
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 432))(v5);
  v45 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 4864) + 2488)
                  - *(_QWORD *)(*(_QWORD *)(v44 + 4864) + 2480)
                  + *(_QWORD *)(v43 + 2480)
                  - 8);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 432))(v5);
  v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 432))(v5);
  if (*(int *)(v47 + 4904) <= 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1501, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_20F0F91AC((_BYTE *)(*(_QWORD *)(v46 + 4848) + 760), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 4864) + 2488) - 4), 0, 0, (uint64_t)object);
  if (v825[48] && object[8] && *(_DWORD *)object == v45)
  {
    v787 = *(_OWORD *)&v825[16];
    v788 = *(_OWORD *)&v825[32];
    v789 = *(_QWORD *)&v825[48];
    v783 = *(_OWORD *)&object[64];
    v784 = *(_OWORD *)&object[80];
    v786 = *(_OWORD *)v825;
    v785 = *(_OWORD *)v824;
    v779 = *(_OWORD *)object;
    v780 = *(_OWORD *)&object[16];
    v782 = *(_OWORD *)&object[48];
    v781 = *(_OWORD *)&object[32];
  }
  else
  {
    LOBYTE(v779) = 0;
    LOBYTE(v789) = 0;
  }
  v709 = v42;
  sub_20FCBFBDC(v42, (uint64_t)v778);
  v48 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864) + 5264);
  if (!*(_BYTE *)(v48 + 872)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 2983, (uint64_t)"opt_health_metadata", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_769;
  }
  v49 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
  sub_20FCBEFE8(v737[921] + 1464, (_QWORD *)v42, (uint64_t)object);
  v50 = *((unsigned __int8 *)v737 + 2451);
  v51 = (_QWORD *)v737[921];
  v52 = v51[16];
  if (v52 && (v53 = v51[2902], *(int *)(v53 + 4904) >= 1) && *(_BYTE *)(v52 + 144))
  {
    v54 = *(_QWORD **)(v53 + 4864);
    v55 = v54[311];
    v56 = (unint64_t)(v55 - v54[310]) >> 2;
    v57 = v54[285];
    v58 = v57 + 168 * (v56 - 1);
    v59.f64[0] = *(float64_t *)(v58 + 16);
    v715 = *(int64x2_t *)(v58 + 24);
    v716 = *(int64x2_t *)v58;
    v59.f64[1] = *(float64_t *)(v58 + 40);
    v738 = v59;
    v719 = *(float64x2_t *)(v58 + 48);
    __dst = *(double *)(v58 + 64);
    v718 = *(double *)(v58 + 160);
    v717 = *(float64x2_t *)(v58 + 144);
    v60 = v57 + 168 * (v56 - 2);
    v728 = *(_BYTE **)(v60 + 16);
    v726 = *(float64x2_t *)v60;
    v731.i64[0] = *(_QWORD *)(v60 + 40);
    v729 = *(float64x2_t *)(v60 + 24);
    v735.f64[0] = *(float64_t *)(v60 + 64);
    v733 = *(float64x2_t *)(v60 + 48);
    v724 = *(double *)(v60 + 160);
    v723 = *(float64x2_t *)(v60 + 144);
    LODWORD(v1) = *(_DWORD *)(v55 - 4);
    v61 = *(_DWORD *)(v51[14] + 184);
    if (*(_DWORD *)v52 >= (int)v1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/ConfinedSpaceMonitor.cpp", 37, (uint64_t)"curr_state_id > latest_state_id_", 32, (uint64_t)&unk_21026E8A1, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v62 = (float64x2_t)vzip1q_s64(v716, v715);
    v63 = (float64x2_t)vzip2q_s64(v716, v715);
    _V4.D[1] = v719.f64[1];
    v65.f64[1] = v740.f64[1];
    v66 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v62, v717.f64[0]), v63, v717, 1), v738, v718);
    _Q1 = vmulq_f64(v719, v717);
    _D3 = v717.f64[1];
    __asm { FMLA            D1, D3, V4.D[1] }
    _Q1.f64[0] = _Q1.f64[0] + __dst * v718;
    v69 = vextq_s8((int8x16_t)v63, (int8x16_t)vdupq_laneq_s64((int64x2_t)v719, 1), 8uLL);
    *(_QWORD *)&v63.f64[1] = v69.i64[0];
    *(_QWORD *)&v65.f64[0] = *(_OWORD *)&vnegq_f64(_Q1);
    _Q0 = (float64x2_t)vzip2q_s64((int64x2_t)v726, (int64x2_t)v729);
    v71 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q0, 1);
    v72 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q0.f64[0], 0);
    v73 = (float64x2_t)vzip1q_s64((int64x2_t)v726, (int64x2_t)v729);
    v74 = vmlaq_laneq_f64(vmulq_n_f64(v73, v723.f64[0]), _Q0, v723, 1);
    *(_QWORD *)&_Q0.f64[0] = v728;
    _V26.D[1] = v733.f64[1];
    *(_QWORD *)&_Q0.f64[1] = v731.i64[0];
    _Q7 = vmlaq_n_f64(v74, _Q0, v724);
    _D16 = v723.f64[1];
    __asm { FMLA            D0, D16, V26.D[1] }
    _Q0.f64[0] = _Q0.f64[0] + v735.f64[0] * v724;
    _Q1 = (int64x2_t)vextq_s8(v72, v71, 8uLL);
    v79 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v73, _Q1), _Q7.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v73, _Q1), _Q7, 1), v733, _Q0.f64[0]);
    __asm { FMLA            D1, D27, V7.D[1] }
    v80 = *(double *)_Q1.i64 + v735.f64[0] * _Q0.f64[0];
    v81 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v62, v726.f64[0]), v63, v726, 1), v738, *(double *)&v728), (float64x2_t)0, v66);
    v82 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v719.f64[0], v726.f64[0]), (float64x2_t)v69.u64[1], v726, 1), (float64x2_t)*(unint64_t *)&__dst, *(double *)&v728), (float64x2_t)0, v65);
    v83 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v62, v729.f64[0]), v63, v729, 1), v738, *(double *)v731.i64), (float64x2_t)0, v66);
    v84 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v719.f64[0], v729.f64[0]), (float64x2_t)v69.u64[1], v729, 1), (float64x2_t)*(unint64_t *)&__dst, *(double *)v731.i64), (float64x2_t)0, v65);
    v85 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v62, v733.f64[0]), v63, v733, 1), v738, v735.f64[0]), (float64x2_t)0, v66);
    v86 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v719.f64[0], v733.f64[0]), (float64x2_t)v69.u64[1], v733, 1), (float64x2_t)*(unint64_t *)&__dst, v735.f64[0]), (float64x2_t)0, v65);
    _Q5 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v62, v79.f64[0]), v63, v79, 1), v738, v80), v66);
    v88 = vaddq_f64(v65, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v719.f64[0], v79.f64[0]), (float64x2_t)v69.u64[1], v79, 1), (float64x2_t)*(unint64_t *)&__dst, v80));
    v89 = *(_DWORD *)(v52 + 4);
    *(_DWORD *)v52 = (_DWORD)v1;
    *(_DWORD *)(v52 + 4) = v61;
    if (*(_BYTE *)(v52 + 136))
    {
      if (v89 >= v61)
      {
        v91 = *(float64x2_t *)(v52 + 24);
        v92 = *(float64x2_t *)(v52 + 8);
        v93 = *(float64x2_t *)(v52 + 56);
        v94 = *(float64x2_t *)(v52 + 40);
        v95 = *(float64x2_t *)(v52 + 88);
        v96 = *(float64x2_t *)(v52 + 72);
        v97 = *(float64x2_t *)(v52 + 120);
        v98 = *(float64x2_t *)(v52 + 104);
        v99 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, v92.f64[0]), v83, v92, 1), v85, v91.f64[0]), _Q5, v91, 1);
        v100 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, v92.f64[0]), v84, v92, 1), v86, v91.f64[0]), v88, v91, 1);
        v101 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, v94.f64[0]), v83, v94, 1), v85, v93.f64[0]), _Q5, v93, 1);
        v102 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, v94.f64[0]), v84, v94, 1), v86, v93.f64[0]), v88, v93, 1);
        v103 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, v96.f64[0]), v83, v96, 1), v85, v95.f64[0]), _Q5, v95, 1);
        v104 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v81, v98.f64[0]), v83, v98, 1), v85, v97.f64[0]), _Q5, v97, 1);
        *(float64x2_t *)(v52 + 8) = v99;
        *(float64x2_t *)(v52 + 24) = v100;
        *(float64x2_t *)(v52 + 40) = v101;
        *(float64x2_t *)(v52 + 56) = v102;
        *(float64x2_t *)(v52 + 72) = v103;
        *(float64x2_t *)(v52 + 88) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, v96.f64[0]), v84, v96, 1), v86, v95.f64[0]), v88, v95, 1);
        v105 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v82, v98.f64[0]), v84, v98, 1), v86, v97.f64[0]), v88, v97, 1);
        *(float64x2_t *)(v52 + 104) = v104;
        *(float64x2_t *)(v52 + 120) = v105;
        _Q5.f64[1] = v104.f64[1];
        v88.f64[0] = v105.f64[0];
      }
      else
      {
        *(float64x2_t *)(v52 + 8) = v81;
        *(float64x2_t *)(v52 + 24) = v82;
        *(float64x2_t *)(v52 + 40) = v83;
        *(float64x2_t *)(v52 + 56) = v84;
        *(float64x2_t *)(v52 + 72) = v85;
        *(float64x2_t *)(v52 + 88) = v86;
        *(float64x2_t *)(v52 + 104) = _Q5;
        *(float64x2_t *)(v52 + 120) = v88;
      }
    }
    else
    {
      *(float64x2_t *)(v52 + 8) = v81;
      *(float64x2_t *)(v52 + 24) = v82;
      *(float64x2_t *)(v52 + 40) = v83;
      *(float64x2_t *)(v52 + 56) = v84;
      *(float64x2_t *)(v52 + 72) = v85;
      *(float64x2_t *)(v52 + 88) = v86;
      *(float64x2_t *)(v52 + 104) = _Q5;
      *(float64x2_t *)(v52 + 120) = v88;
      *(_BYTE *)(v52 + 136) = 1;
    }
    _D1 = _Q5.f64[1];
    __asm { FMLA            D0, D1, V5.D[1] }
    v90 = sqrt(vmlad_n_f64(_D0, v88.f64[0], v88.f64[0])) > *(double *)(v52 + 152);
  }
  else
  {
    v90 = 0;
  }
  v108 = v48 + 416;
  sub_20F13C5B8(v49, v108, (uint64_t)object, v50 != 0, v90, (uint64_t)&v779, v778);
  if (*(_QWORD *)&v825[112])
  {
    *(_QWORD *)&v825[120] = *(_QWORD *)&v825[112];
    operator delete(*(void **)&v825[112]);
  }
  if (*(_QWORD *)&v825[88])
  {
    *(_QWORD *)&v825[96] = *(_QWORD *)&v825[88];
    operator delete(*(void **)&v825[88]);
  }
  v109 = v737;
  if (!*((_BYTE *)v737 + 2448) && *(int *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4904) >= 1)
  {
    v110 = *(_QWORD *)(v737[921] + 120);
    v111 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
    if (*(int *)(v111 + 4904) > 0
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1506, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0))
    {
      v112 = *(double *)(*(_QWORD *)(*(_QWORD *)(v111 + 4864) + 2512) - 8);
      v109 = v737;
      v113 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
      v114 = sub_20F136914(v113);
      sub_20F0CE86C(v110, v114, *(_DWORD *)(*(_QWORD *)(v737[921] + 112) + 184), v778[0].i32, v108, v112);
      goto LABEL_63;
    }
LABEL_769:
    abort();
  }
LABEL_63:
  v115 = *(unsigned __int8 **)(v109[921] + 112);
  v116 = **(double **)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v109 + 432))(v109) + 4864) + 2504);
  v117 = (*(uint64_t (**)(_QWORD *))(*v109 + 432))(v109);
  v118 = (unsigned __int8 *)sub_20F136914(v117);
  sub_20F10BF34(v115, v37 == 0, v118, v109[921] + 6640, v119, v120, v121, v122, v116);
  v123 = *(_QWORD *)(v109[921] + 112);
  *v711 = *(_OWORD *)(v123 + 104);
  v124 = *(_OWORD *)(v123 + 136);
  v125 = *(_OWORD *)(v123 + 168);
  v126 = *(_OWORD *)(v123 + 120);
  *(_OWORD *)(v7 + 4160) = *(_OWORD *)(v123 + 152);
  *(_OWORD *)(v7 + 4176) = v125;
  *(_OWORD *)(v7 + 4128) = v126;
  *(_OWORD *)(v7 + 4144) = v124;
  v127 = *(_OWORD *)(v123 + 200);
  v128 = *(_OWORD *)(v123 + 216);
  v129 = *(_OWORD *)(v123 + 184);
  *(_QWORD *)(v7 + 4240) = *(_QWORD *)(v123 + 232);
  *(_OWORD *)(v7 + 4208) = v127;
  *(_OWORD *)(v7 + 4224) = v128;
  *(_OWORD *)(v7 + 4192) = v129;
  v130 = *(double *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v109 + 432))(v109) + 4864) + 5264)
                   + 504);
  if (*(_BYTE *)(v7 + 4211) && !*(_BYTE *)(v7 + 4212))
  {
    v131 = v737[921];
    LOBYTE(v776[0]) = 0;
    v777 = 0;
    sub_20F02FCE0(object, v131, 0, v776, 0.0, v130);
    v132 = *(_OWORD *)object;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)object = 0;
    v133 = *(std::__shared_weak_count **)(v7 + 3880);
    *(_OWORD *)(v7 + 3872) = v132;
    if (v133)
    {
      p_shared_owners = (unint64_t *)&v133->__shared_owners_;
      do
        v135 = __ldaxr(p_shared_owners);
      while (__stlxr(v135 - 1, p_shared_owners));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    v136 = *(std::__shared_weak_count **)&object[8];
    if (*(_QWORD *)&object[8])
    {
      v137 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    return;
  }
  if (*(_DWORD *)v7
    && !*(_BYTE *)(*(_QWORD *)(v737[921] + 112) + 203)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 3028, (uint64_t)"(front_end_result.vfusion_return == VFusionReturn::kVFusionTakeStep || impl_->reinit_logic_controller_->state().maybe_reason_for_re_initialization)", 147, (uint64_t)"If the window is under-constrained, we must have reinitialized and skipped", 74, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v139 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
  sub_20F132B40(v139, *(_QWORD *)(v737[921] + 112) + 104);
  sub_20F02E848(&v828);
  v140 = object;
  if (**(int **)(v828 + 56) <= 3)
  {
    LODWORD(v1) = *(unsigned __int8 *)(v828 + 72);
    v141 = sub_20E8C31DC(v828, "OSLogSurrogateAppender", 1, 0);
    v142 = v141;
    if ((_DWORD)v1 || v141)
    {
      v761[0] = (__uint64_t)&v828;
      v761[1] = std::chrono::steady_clock::now().__d_.__rep_;
      *(std::chrono::system_clock::time_point *)&v762 = std::chrono::system_clock::now();
      DWORD2(v762) = 3;
      *(_QWORD *)&v763 = "unknown file";
      DWORD2(v763) = 3034;
      *(_QWORD *)&v765 = 0;
      *(_QWORD *)&v764 = "unknown function";
      *((_QWORD *)&v764 + 1) = 0;
      v143 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864);
      v144 = *(_QWORD **)(v143 + 7952);
      if (v144)
      {
        v145 = (uint64_t *)(*v144 + 72);
        v146 = *(_QWORD *)v761[0];
        v147 = *(_QWORD *)v761[0] + 16;
        v148 = *(char *)(*(_QWORD *)v761[0] + 39);
        if ((v148 & 0x80000000) == 0)
          goto LABEL_83;
      }
      else
      {
        v145 = (uint64_t *)(v143 + 8128);
        v146 = *(_QWORD *)v761[0];
        v147 = *(_QWORD *)v761[0] + 16;
        v148 = *(char *)(*(_QWORD *)v761[0] + 39);
        if ((v148 & 0x80000000) == 0)
        {
LABEL_83:
          v149 = v148;
          v150 = (const char *)v147;
          *(_QWORD *)&v740.f64[0] = v147;
          v151 = *v145;
          v152 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v152 & 1) != 0)
            goto LABEL_87;
LABEL_781:
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
            if (object[24] && (object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
LABEL_87:
          if (byte_254A4A4F8[23] >= 0)
            v154 = byte_254A4A4F8;
          else
            v154 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v155 = byte_254A4A4F8[23];
          else
            v155 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)object = os_log_create(v154, v150);
          v156 = &object[8];
          if (v155 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v155 >= 0x17)
          {
            v157 = v150;
            v158 = v142;
            v159 = v146;
            v160 = v8;
            v161 = (int)v1;
            v162 = (v155 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v155 | 7) != 0x17)
              v162 = v155 | 7;
            v1 = (__uint64_t *)(v162 + 1);
            v156 = operator new(v162 + 1);
            *(_QWORD *)&object[24] = (unint64_t)v1 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v156;
            *(_QWORD *)&object[16] = v155;
            LODWORD(v1) = v161;
            v8 = v160;
            v146 = v159;
            v142 = v158;
            v150 = v157;
          }
          else
          {
            object[31] = v155;
            if (!v155)
            {
LABEL_101:
              v156[v155] = 0;
              object[32] = 1;
              v163 = &object[40];
              if (v149 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              v7 = v725;
              if (v149 >= 0x17)
              {
                v164 = (v149 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v149 | 7) != 0x17)
                  v164 = v149 | 7;
                v165 = v164 + 1;
                v163 = operator new(v164 + 1);
                *(_QWORD *)&object[56] = v165 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v163;
                *(_QWORD *)&object[48] = v149;
              }
              else
              {
                object[63] = v149;
                if (!v149)
                  goto LABEL_109;
              }
              memmove(v163, v150, v149);
LABEL_109:
              v163[v149] = 0;
              object[64] = 1;
              v166 = *(NSObject **)object;
              if ((object[63] & 0x80000000) != 0)
                operator delete(*(void **)&object[40]);
              if (object[32] && (object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v142 && *(_QWORD *)(v142 + 24))
              {
                v167 = _os_log_pack_size();
                v168 = (std::__shared_weak_count_vtbl *)operator new(v167, (std::align_val_t)8uLL);
                v169 = (std::__shared_weak_count *)operator new();
                v170 = v169;
                v169->__shared_owners_ = 0;
                v171 = (unint64_t *)&v169->__shared_owners_;
                v169->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v169->__shared_weak_owners_ = 0;
                v169[1].__vftable = v168;
                *(_QWORD *)object = v168;
                *(_QWORD *)&object[8] = v168;
                *(_QWORD *)&object[16] = v169;
                do
                  v172 = __ldxr(v171);
                while (__stxr(v172 + 1, v171));
                memset(&object[24], 0, 24);
                do
                  v173 = __ldaxr(v171);
                while (__stlxr(v173 - 1, v171));
                if (!v173)
                {
                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                  std::__shared_weak_count::__release_weak(v170);
                }
                v174 = *(_QWORD *)object;
                v175 = _os_log_pack_fill();
                *(_DWORD *)v175 = 134217984;
                *(_QWORD *)(v175 + 4) = v151;
                v176 = operator new();
                v177 = *(unsigned __int8 *)(v146 + 39);
                v178 = v740.f64[0];
                if ((v177 & 0x80u) != 0)
                {
                  v178 = *(double *)(v146 + 16);
                  v177 = *(_QWORD *)(v146 + 24);
                }
                *(_QWORD *)v176 = v174;
                *(_OWORD *)(v176 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                v140 = object;
                *(_OWORD *)(v176 + 24) = *(_OWORD *)&object[24];
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(float64_t *)(v176 + 40) = v178;
                *(_QWORD *)(v176 + 48) = v177;
                *(_BYTE *)(v176 + 56) = 1;
                v798[0] = 0;
                *(_QWORD *)v809 = v176;
                (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v142 + 24) + 40))(*(_QWORD *)(v142 + 24), v809);
                v179 = *(_QWORD *)v809;
                *(_QWORD *)v809 = 0;
                if (v179)
                {
                  v180 = *(std::__shared_weak_count **)(v179 + 32);
                  if (v180)
                  {
                    v181 = (unint64_t *)&v180->__shared_owners_;
                    do
                      v182 = __ldaxr(v181);
                    while (__stlxr(v182 - 1, v181));
                    if (!v182)
                    {
                      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                      std::__shared_weak_count::__release_weak(v180);
                    }
                  }
                  v183 = *(std::__shared_weak_count **)(v179 + 16);
                  if (v183)
                  {
                    v184 = (unint64_t *)&v183->__shared_owners_;
                    do
                      v185 = __ldaxr(v184);
                    while (__stlxr(v185 - 1, v184));
                    if (!v185)
                    {
                      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                      std::__shared_weak_count::__release_weak(v183);
                    }
                  }
                  MEMORY[0x212BC6398](v179, 0x10F0C40B62ED6C6);
                  v186 = v798[0];
                  v798[0] = 0;
                  if (v186)
                  {
                    v187 = *(std::__shared_weak_count **)(v186 + 32);
                    if (v187)
                    {
                      v188 = (unint64_t *)&v187->__shared_owners_;
                      do
                        v189 = __ldaxr(v188);
                      while (__stlxr(v189 - 1, v188));
                      if (!v189)
                      {
                        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                        std::__shared_weak_count::__release_weak(v187);
                      }
                    }
                    v190 = *(std::__shared_weak_count **)(v186 + 16);
                    if (v190)
                    {
                      v191 = (unint64_t *)&v190->__shared_owners_;
                      do
                        v192 = __ldaxr(v191);
                      while (__stlxr(v192 - 1, v191));
                      if (!v192)
                      {
                        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                        std::__shared_weak_count::__release_weak(v190);
                      }
                    }
                    MEMORY[0x212BC6398](v186, 0x10F0C40B62ED6C6);
                  }
                }
                v193 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v194 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v195 = __ldaxr(v194);
                  while (__stlxr(v195 - 1, v194));
                  if (!v195)
                  {
                    ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                    std::__shared_weak_count::__release_weak(v193);
                  }
                }
                v196 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v197 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v198 = __ldaxr(v197);
                  while (__stlxr(v198 - 1, v197));
                  if (!v198)
                  {
                    ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                    std::__shared_weak_count::__release_weak(v196);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v166, OS_LOG_TYPE_INFO);
                *(_DWORD *)object = 134217984;
                v140 = object;
                *(_QWORD *)&object[4] = v151;
                LODWORD(v684) = 12;
                v199 = (void *)_os_log_send_and_compose_impl();
                if (v199)
                  free(v199);
              }
              if ((_DWORD)v1)
              {
                v200 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864);
                v201 = *(_QWORD **)(v200 + 7952);
                if (v201)
                  v202 = (double *)(*v201 + 72);
                else
                  v202 = (double *)(v200 + 8128);
                sub_20E8C003C((uint64_t)v761, "Latest timeoffset %f", *v202);
                sub_20E863570((uint64_t)v761);
              }
              sub_20E863570((uint64_t)v761);
              v203 = (std::__shared_weak_count *)v765;
              if ((_QWORD)v765)
              {
                v204 = (unint64_t *)(v765 + 8);
                do
                  v205 = __ldaxr(v204);
                while (__stlxr(v205 - 1, v204));
                if (!v205)
                {
                  ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                  std::__shared_weak_count::__release_weak(v203);
                }
              }
              goto LABEL_171;
            }
          }
          memmove(v156, v154, v155);
          goto LABEL_101;
        }
      }
      v150 = *(const char **)(v146 + 16);
      v149 = *(_QWORD *)(v146 + 24);
      *(_QWORD *)&v740.f64[0] = v147;
      v151 = *v145;
      v153 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v153 & 1) != 0)
        goto LABEL_87;
      goto LABEL_781;
    }
  }
LABEL_171:
  v206 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864);
  v207 = *(_QWORD *)(v206 + 7952);
  if (v207)
  {
    v208 = *(double *)(*(_QWORD *)v207 + 72);
    v209 = atomic_load((unsigned __int8 *)&qword_254A61980);
    if ((v209 & 1) != 0)
      goto LABEL_175;
  }
  else
  {
    v208 = *(double *)(v206 + 8128);
    v210 = atomic_load((unsigned __int8 *)&qword_254A61980);
    if ((v210 & 1) != 0)
      goto LABEL_175;
  }
  if (__cxa_guard_acquire(&qword_254A61980))
  {
    v682 = operator new(0x28uLL);
    v682[1] = 0;
    v682[2] = 0;
    *v682 = &off_24C9C4340;
    *((_BYTE *)v682 + 24) = 0;
    *((_BYTE *)v682 + 32) = 0;
    qword_254A619B8 = (uint64_t)(v682 + 3);
    qword_254A619C0 = (uint64_t)v682;
    unk_254A619C8 = 2000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A619B8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A61980);
    v7 = v725;
    v140 = object;
  }
LABEL_175:
  v211 = (_QWORD *)qword_254A619B8;
  v212 = *(unsigned __int8 *)(qword_254A619B8 + 8);
  v213.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v212)
  {
    if (v213.__d_.__rep_ - *v211 < 2000000000)
      goto LABEL_202;
    v214 = (std::chrono::steady_clock::time_point *)qword_254A619B8;
  }
  else
  {
    v214 = (std::chrono::steady_clock::time_point *)qword_254A619B8;
    if (!*(_BYTE *)(qword_254A619B8 + 8))
      *(_BYTE *)(qword_254A619B8 + 8) = 1;
  }
  v214->__d_.__rep_ = v213.__d_.__rep_;
  v215 = sub_210219C18();
  v216 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v216 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    *(_DWORD *)object = 134217984;
    *(float64_t *)&object[4] = v208;
    v218 = (char *)_os_log_send_and_compose_impl();
    v219 = strlen(v218);
    v761[0] = 0;
    pthread_threadid_np(0, v761);
    v220 = v761[0];
    v1 = v761;
    timespec_get((timespec *)v761, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v215 + 1), (__int128 *)(v215 + 5), "Time Offset: %f", 0xFuLL, v218, v219, v220, v761);
    std::mutex::lock(&stru_254A5A410);
    v221 = qword_254A5A458;
    for (i = unk_254A5A460; v221 != i; v221 += 40)
    {
      v223 = *(_QWORD *)(v221 + 32);
      if (!v223)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v223 + 48))(v223, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if ((v825[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&v825[8]);
      if ((v825[7] & 0x80000000) == 0)
      {
LABEL_187:
        if (!object[88])
        {
LABEL_193:
          if (object[56] && (object[55] & 0x80000000) != 0)
            operator delete(*(void **)&object[32]);
          if ((object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (v218)
            free(v218);
          goto LABEL_200;
        }
LABEL_191:
        if ((object[87] & 0x80000000) != 0)
          operator delete(*(void **)&object[64]);
        goto LABEL_193;
      }
    }
    else if ((v825[7] & 0x80000000) == 0)
    {
      goto LABEL_187;
    }
    operator delete(v824[0]);
    if (!object[88])
      goto LABEL_193;
    goto LABEL_191;
  }
LABEL_200:
  if (os_signpost_enabled((os_log_t)*v215))
  {
    *(_DWORD *)object = 134217984;
    *(float64_t *)&object[4] = v208;
    _os_signpost_emit_unreliably_with_name_impl();
  }
LABEL_202:
  v224 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
  if ((v224 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
  {
    sub_20FCFB524();
    __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6D9C8);
    v7 = v725;
    v140 = object;
  }
  v225 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864);
  v226 = *(_QWORD **)(v225 + 7952);
  if (v226)
    v227 = (_QWORD *)(*v226 + 72);
  else
    v227 = (_QWORD *)(v225 + 8128);
  sub_210237040("Time Offset: %f", (std::string *)object, *v227, v684);
  sub_20EA5C6C8((uint64_t)object, qword_254A6D9A8);
  if ((object[23] & 0x80000000) != 0)
    operator delete(*(void **)object);
  *(_DWORD *)(v7 + 6280) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737)
                                                             + 4864)
                                                 + 2488)
                                     - 4);
  *(_DWORD *)(v7 + 6284) = **(_DWORD **)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864)
                                       + 2480);
  v228 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864);
  v229 = *(_QWORD *)(v228 + 5184);
  v230 = *(_BYTE **)(v228 + 5176);
  v231 = (unint64_t)(v229 - (_QWORD)v230) >= 0xF
      && *v230
      && v230[1]
      && v230[2]
      && v230[3]
      && v230[4]
      && v230[5]
      && v230[6]
      && v230[7]
      && v230[8]
      && v230[9]
      && v230[10]
      && v230[11]
      && v230[12]
      && v230[13]
      && v230[14] != 0;
  v712[2192] = v231;
  v232 = *(_QWORD *)(v737[921] + 160);
  v233 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
  sub_20F406654(v232, *(_DWORD *)(*(_QWORD *)(v233 + 4864) + 5300), v761);
  v234 = (_QWORD *)v737[921];
  v235 = v234[20];
  v236 = *(_BYTE *)(v235 + 224) != 0;
  if (!*(_BYTE *)(v235 + 224) && *(_QWORD *)(v235 + 184) >= *(_QWORD *)(v235 + 120))
    v236 = 1;
  v712[2194] = v236;
  if (!v775)
    goto LABEL_284;
  v237 = v234[160];
  v238 = v234[156];
  *(_OWORD *)v824 = v767;
  *(_OWORD *)v825 = v768;
  *(_OWORD *)&v825[16] = v769;
  *(_OWORD *)&object[32] = v763;
  *(_OWORD *)&object[48] = v764;
  *(_OWORD *)&object[80] = v766;
  *(_OWORD *)&object[64] = v765;
  *(_OWORD *)&object[16] = v762;
  *(_OWORD *)object = *(_OWORD *)v761;
  memset(&v825[32], 0, 24);
  v239 = v770;
  v240 = v771 - (_BYTE *)v770;
  if (v771 != v770)
  {
    if (v240 < 0)
      sub_20E867F44();
    v241 = (char *)operator new(v771 - (_BYTE *)v770);
    v242 = &v241[16 * (v240 >> 4)];
    *(_QWORD *)&v825[32] = v241;
    *(_QWORD *)&v825[48] = v242;
    memcpy(v241, v239, v240 - 4);
    *(_QWORD *)&v825[40] = v242;
    v140 = object;
  }
  sub_20F0909CC((uint64_t)&v825[56], (uint64_t)v772);
  v243 = v238 + 496 * v237;
  v827 = v774;
  v244 = *(_OWORD *)&object[64];
  v245 = *(_OWORD *)&object[48];
  v246 = *(_OWORD *)&object[32];
  *(_OWORD *)(v243 + 16) = *(_OWORD *)&object[16];
  *(_OWORD *)(v243 + 32) = v246;
  *(_OWORD *)(v243 + 48) = v245;
  *(_OWORD *)(v243 + 64) = v244;
  *(_OWORD *)v243 = *(_OWORD *)object;
  v247 = *(_OWORD *)&object[80];
  v248 = *(_OWORD *)v824;
  v249 = *(_OWORD *)&v825[16];
  *(_OWORD *)(v243 + 112) = *(_OWORD *)v825;
  *(_OWORD *)(v243 + 128) = v249;
  *(_OWORD *)(v243 + 80) = v247;
  *(_OWORD *)(v243 + 96) = v248;
  v251 = (_QWORD *)(v243 + 144);
  v250 = *(void **)(v243 + 144);
  v7 = v725;
  if (v250)
  {
    *(_QWORD *)(v238 + 496 * v237 + 152) = v250;
    operator delete(v250);
    *v251 = 0;
    v251[1] = 0;
    v251[2] = 0;
  }
  *(_OWORD *)v251 = *(_OWORD *)&v825[32];
  v252 = v238 + 496 * v237;
  *(_QWORD *)(v252 + 160) = *(_QWORD *)&v825[48];
  memset(&v825[32], 0, 24);
  v253 = v252 + 168;
  if (*(unsigned __int8 *)(v252 + 480) != v826)
  {
    v257 = (_BYTE *)(v252 + 480);
    if (*(_BYTE *)(v252 + 480))
    {
      v258 = *(void **)v253;
      if (*(_QWORD *)v253)
      {
        *(_QWORD *)(v238 + 496 * v237 + 176) = v258;
        operator delete(v258);
      }
      *v257 = 0;
      v259 = v826;
      *(_BYTE *)(v238 + 496 * v237 + 488) = v827;
      if (!v259)
        goto LABEL_249;
    }
    else
    {
      v260 = v238 + 496 * v237;
      *(_QWORD *)(v253 + 8) = 0;
      *(_QWORD *)(v253 + 16) = 0;
      *(_OWORD *)v253 = *(_OWORD *)&v825[56];
      *(_QWORD *)(v260 + 184) = *(_QWORD *)&v825[72];
      memset(&v825[56], 0, 24);
      memcpy((void *)(v260 + 192), &v825[80], 0x120uLL);
      *v257 = 1;
      v261 = v826;
      *(_BYTE *)(v238 + 496 * v237 + 488) = v827;
      if (!v261)
        goto LABEL_249;
    }
LABEL_247:
    if (*(_QWORD *)&v825[56])
    {
      *(_QWORD *)&v825[64] = *(_QWORD *)&v825[56];
      operator delete(*(void **)&v825[56]);
    }
    goto LABEL_249;
  }
  if (!*(_BYTE *)(v252 + 480))
  {
    *(_BYTE *)(v238 + 496 * v237 + 488) = v827;
    goto LABEL_249;
  }
  v254 = *(void **)v253;
  if (*(_QWORD *)v253)
  {
    *(_QWORD *)(v238 + 496 * v237 + 176) = v254;
    operator delete(v254);
    *(_QWORD *)v253 = 0;
    *(_QWORD *)(v253 + 8) = 0;
    *(_QWORD *)(v253 + 16) = 0;
  }
  *(_OWORD *)v253 = *(_OWORD *)&v825[56];
  v255 = v238 + 496 * v237;
  *(_QWORD *)(v255 + 184) = *(_QWORD *)&v825[72];
  memset(&v825[56], 0, 24);
  memcpy((void *)(v255 + 192), &v825[80], 0x120uLL);
  v256 = v826;
  *(_BYTE *)(v238 + 496 * v237 + 488) = v827;
  if (v256)
    goto LABEL_247;
LABEL_249:
  if (*(_QWORD *)&v825[32])
  {
    *(_QWORD *)&v825[40] = *(_QWORD *)&v825[32];
    operator delete(*(void **)&v825[32]);
  }
  v262 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v234[157] - v234[156]) >> 4);
  v263 = v234[160] + 1;
  if (v263 >= v262)
    v264 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v234[157] - v234[156]) >> 4);
  else
    v264 = 0;
  v234[160] = v263 - v264;
  v265 = v234[161];
  if (v265 == v262)
  {
    v266 = v234[159] + 1;
    if (v266 < v262)
      v262 = 0;
    v234[159] = v266 - v262;
  }
  else
  {
    v234[161] = v265 + 1;
  }
  v267 = sub_210219C18();
  v268 = v762;
  v269 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v269 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v270 = atomic_load(&qword_254A5A450);
  v1 = (__uint64_t *)"t3__114default_deleteINS_6vectorIN3cva6MatrixIjLj2ELj1ELb0EEENS_9allocatorIS4_EEEEEE";
  if (!v270)
    goto LABEL_279;
  *(_DWORD *)object = 134218496;
  *(_QWORD *)&object[4] = v761[1];
  *(_WORD *)&object[12] = 1024;
  *(_DWORD *)&object[14] = v268;
  *(_WORD *)&object[18] = 1024;
  *(_DWORD *)&object[20] = DWORD2(v762);
  v271 = (char *)_os_log_send_and_compose_impl();
  v272 = strlen(v271);
  *(_QWORD *)v809 = 0;
  pthread_threadid_np(0, (__uint64_t *)v809);
  v273 = *(_QWORD *)v809;
  timespec_get((timespec *)v809, 1);
  sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v267 + 1), (__int128 *)(v267 + 5), "FEOI: Verified InplaceReloc, QID:[%llu:%u:%u]", 0x2DuLL, v271, v272, v273, v809);
  std::mutex::lock(&stru_254A5A410);
  v274 = qword_254A5A458;
  for (j = unk_254A5A460; v274 != j; v274 += 40)
  {
    v276 = *(_QWORD *)(v274 + 32);
    if (!v276)
      sub_20E86D37C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v276 + 48))(v276, object);
  }
  std::mutex::unlock(&stru_254A5A410);
  if ((v825[31] & 0x80000000) == 0)
  {
    v7 = v725;
    v140 = object;
    if ((v825[7] & 0x80000000) == 0)
      goto LABEL_266;
LABEL_269:
    operator delete(v824[0]);
    if (!object[88])
      goto LABEL_272;
LABEL_270:
    if ((object[87] & 0x80000000) != 0)
      operator delete(*(void **)&object[64]);
    goto LABEL_272;
  }
  operator delete(*(void **)&v825[8]);
  v7 = v725;
  v140 = object;
  if ((v825[7] & 0x80000000) != 0)
    goto LABEL_269;
LABEL_266:
  if (object[88])
    goto LABEL_270;
LABEL_272:
  if (object[56] && (object[55] & 0x80000000) != 0)
    operator delete(*(void **)&object[32]);
  if ((object[31] & 0x80000000) != 0)
    operator delete(*(void **)&object[8]);
  if (v271)
    free(v271);
LABEL_279:
  if (os_signpost_enabled((os_log_t)*v267))
  {
    *(_DWORD *)object = 134218496;
    *(_QWORD *)&object[4] = v761[1];
    *(_WORD *)&object[12] = 1024;
    v140 = object;
    *(_DWORD *)&object[14] = v268;
    *(_WORD *)&object[18] = 1024;
    *(_DWORD *)&object[20] = DWORD2(v762);
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v277 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
  if ((v277 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
  {
    sub_20FCFB524();
    __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6D9C8);
    v7 = v725;
    v140 = object;
  }
  sub_210237040("FEOI: Verified InplaceReloc, QID:[%llu:%u:%u]", (std::string *)object, v761[1], v762, DWORD2(v762));
  sub_20EA5C6C8((uint64_t)object, qword_254A6D9A8);
  if ((object[23] & 0x80000000) != 0)
    operator delete(*(void **)object);
LABEL_284:
  v278 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
  sub_20F153C18(v278);
  v279 = (void **)v727.i64[0];
  if (*(_BYTE *)(v7 + 3784))
  {
    sub_20EB0E7E8(v8, (uint64_t)object);
  }
  else
  {
    sub_20EE6958C(v8, (uint64_t)object);
    *(_BYTE *)(v7 + 3784) = 1;
  }
  sub_20E91EA40((uint64_t)object);
  (*(void (**)(_BYTE *__return_ptr))(*v737 + 264))(object);
  v280 = (_OWORD *)(v7 + 3840);
  if (*(_BYTE *)(v7 + 3864))
  {
    *v280 = *(_OWORD *)object;
    *(_WORD *)(v7 + 3856) = *(_WORD *)&object[16];
  }
  else
  {
    *v280 = *(_OWORD *)object;
    *(_QWORD *)(v7 + 3856) = *(_QWORD *)&object[16];
    *(_BYTE *)(v7 + 3864) = 1;
  }
  (*(void (**)(_BYTE *__return_ptr))(*v737 + 256))(object);
  v281 = *(_OWORD *)&object[16];
  *(_OWORD *)(v7 + 3792) = *(_OWORD *)object;
  *(_OWORD *)(v7 + 3808) = v281;
  *(_OWORD *)(v7 + 3817) = *(_OWORD *)&object[25];
  if (!*(_BYTE *)(v7 + 3784))
    sub_20E866B34();
  v282 = (uint64_t *)v737[921];
  v283 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
  v284 = v282[5];
  if (v284)
  {
    v285 = v282[3];
    v286 = *v282;
    v287 = (v282[1] - *v282) >> 4;
    while (1)
    {
      v288 = *(uint64_t **)(v286 + 16 * (v285 % v287));
      if (*((_DWORD *)v288 + 12) == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v283 + 4864) + 2488) - 4))
        break;
      ++v285;
      if (!--v284)
        goto LABEL_295;
    }
  }
  else
  {
LABEL_295:
    v288 = 0;
  }
  v797[0] = v288;
  v797[1] = v288 != 0;
  v796 = 0;
  v289 = (__int128 *)operator new(0x28uLL);
  *(_QWORD *)v289 = &off_24C9F83D8;
  *((_QWORD *)v289 + 1) = v8;
  v290 = v737;
  *((_QWORD *)v289 + 2) = v737;
  *((_QWORD *)v289 + 3) = &v796;
  *((_QWORD *)v289 + 4) = v797;
  *((_QWORD *)&v829 + 1) = v289;
  v291 = (uint64_t *)v288[10];
  if (!v291)
    goto LABEL_309;
  if (*v288 == v288[1])
  {
    v294 = 5;
    do
      v291 = (uint64_t *)*v291;
    while (v291);
    goto LABEL_314;
  }
  do
  {
    v292 = *v288;
    v293 = v288[1];
    if (*v288 != v293)
    {
      while ((unsigned __int16)HIWORD(*((_DWORD *)v291 + 4)) != *(_DWORD *)v292
           || 0x6FB586FB586FB587 * ((uint64_t)(*(_QWORD *)(v292 + 16) - *(_QWORD *)(v292 + 8)) >> 3) <= (unint64_t)(unsigned __int16)*((_DWORD *)v291 + 4))
      {
        v292 += 104;
        if (v292 == v293)
          goto LABEL_299;
      }
      *(_DWORD *)object = *((_DWORD *)v291 + 4);
      if (!*((_QWORD *)&v829 + 1))
        sub_20E86D37C();
      (*(void (**)(_QWORD, _BYTE *, uint64_t *))(**((_QWORD **)&v829 + 1) + 48))(*((_QWORD *)&v829 + 1), object, v291 + 3);
    }
LABEL_299:
    v291 = (uint64_t *)*v291;
  }
  while (v291);
  v289 = (__int128 *)*((_QWORD *)&v829 + 1);
  if (*((__int128 **)&v829 + 1) == &v828)
  {
    v294 = 4;
    v289 = &v828;
    goto LABEL_314;
  }
  if (*((_QWORD *)&v829 + 1))
  {
LABEL_309:
    v294 = 5;
LABEL_314:
    (*(void (**)(void))(*(_QWORD *)v289 + 8 * v294))();
  }
  if (!v796)
    goto LABEL_399;
  v208 = *(double *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864) + 2512)
                   - 8);
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v737[921] + 23224) + 32))(v809);
  v296 = *(uint64_t **)&v809[16];
  v290 = v737;
  if (!*(_QWORD *)&v809[16])
    goto LABEL_396;
  v728 = &object[24];
  LOBYTE(v1) = 24;
  LOBYTE(v729.f64[0]) = 0;
  v295.f64[0] = 3.14159265;
  v740 = v295;
  v738 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
  v735 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
  do
  {
    v297 = (unsigned int *)(v296 + 2);
    LODWORD(v140) = *((_DWORD *)v296 + 5);
    v298 = *(double *)(*(_QWORD *)(v725 + 752) + 24 * *((unsigned int *)v296 + 4));
    if (*((unsigned __int8 *)v296 + 24) <= 1u)
    {
      *(_BYTE *)(*(_QWORD *)&v298 + 216 * v140 + 208) = 0;
      v290 = v737;
      goto LABEL_319;
    }
    v299 = sub_210219C18();
    v300 = *((_DWORD *)v296 + 5);
    if (v300 >= 0xA)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 55, (uint64_t)"stream_id < 10", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v300 = *((_DWORD *)v296 + 5);
    }
    v301 = *v297;
    v302 = *((unsigned __int8 *)v296 + 24);
    v303 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v303 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v304 = v300 + 10 * v301;
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_343;
    v733.f64[0] = v298;
    v731.i32[0] = (int)v140;
    *(_DWORD *)object = 67109376;
    v306 = v304;
    *(_DWORD *)&object[4] = v304;
    *(_WORD *)&object[8] = 1024;
    v307 = v302;
    *(_DWORD *)&object[10] = v302;
    v308 = (char *)_os_log_send_and_compose_impl();
    v309 = strlen(v308);
    v798[0] = 0;
    pthread_threadid_np(0, v798);
    v310 = v798[0];
    timespec_get((timespec *)v798, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "ChangeDetectionResult", 0x15uLL, (__int128 *)(v299 + 1), (__int128 *)(v299 + 5), "CCD: [%02u] change detection result = %hhu", 0x2AuLL, v308, v309, v310, v798);
    std::mutex::lock(&stru_254A5A410);
    v311 = qword_254A5A458;
    for (k = unk_254A5A460; v311 != k; v311 += 40)
    {
      v313 = *(_QWORD *)(v311 + 32);
      if (!v313)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v313 + 48))(v313, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if ((v825[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&v825[8]);
      v302 = v307;
      v304 = v306;
      if ((v825[7] & 0x80000000) == 0)
      {
LABEL_331:
        LODWORD(v140) = v731.i32[0];
        if (object[88])
          goto LABEL_335;
        goto LABEL_337;
      }
    }
    else
    {
      v302 = v307;
      v304 = v306;
      if ((v825[7] & 0x80000000) == 0)
        goto LABEL_331;
    }
    operator delete(v824[0]);
    LODWORD(v140) = v731.i32[0];
    if (object[88])
    {
LABEL_335:
      if ((object[87] & 0x80000000) != 0)
        operator delete(*(void **)&object[64]);
    }
LABEL_337:
    v298 = v733.f64[0];
    if (object[56] && (object[55] & 0x80000000) != 0)
      operator delete(*(void **)&object[32]);
    if ((object[31] & 0x80000000) == 0)
    {
      if (!v308)
        goto LABEL_343;
LABEL_342:
      free(v308);
      goto LABEL_343;
    }
    operator delete(*(void **)&object[8]);
    if (v308)
      goto LABEL_342;
LABEL_343:
    if (os_signpost_enabled((os_log_t)*v299))
    {
      *(_DWORD *)object = 67109376;
      *(_DWORD *)&object[4] = v304;
      *(_WORD *)&object[8] = 1024;
      *(_DWORD *)&object[10] = v302;
      _os_signpost_emit_unreliably_with_name_impl();
    }
    *(_BYTE *)(*(_QWORD *)&v298 + 216 * v140 + 208) = 1;
    v290 = v737;
    (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t *))(**(_QWORD **)(v737[921] + 23224) + 48))(object, *(_QWORD *)(v737[921] + 23224), v296 + 2);
    v314 = v737[921];
    *(_DWORD *)&v799[8] = 0;
    sub_20F0910DC((uint64_t)v798, (_BYTE *)v296 + 24);
    LOBYTE(v1) = 24;
    if (*(_DWORD *)&v799[8] == -1)
      sub_20E877AB8();
    *(_QWORD *)&v794.f64[0] = &v792;
    ((void (*)(void **__return_ptr, float64x2_t *, __uint64_t *))off_24C9F83B0[*(unsigned int *)&v799[8]])(&v820, &v794, v798);
    if (*(_DWORD *)&v799[8] != -1)
      ((void (*)(float64x2_t *, __uint64_t *))off_24C9F8398[*(unsigned int *)&v799[8]])(&v794, v798);
    if (v822 >= 0)
      v316 = (const std::string::value_type *)&v820;
    else
      v316 = (const std::string::value_type *)v820;
    if (v822 >= 0)
      v317 = HIBYTE(v822);
    else
      v317 = (size_t)v821;
    v315.f64[0] = *(float64_t *)&object[16];
    v318.f64[1] = v738.f64[1];
    v318.f64[0] = 180.0;
    v794 = vmulq_f64(vdivq_f64(*(float64x2_t *)object, v738), v735);
    v795 = *(_OWORD *)&vmulq_f64(vdivq_f64(v315, v740), v318);
    *(_OWORD *)v798 = *(_OWORD *)&object[24];
    v319.f64[1] = *(float64_t *)&object[32];
    *(_OWORD *)v799 = *(_OWORD *)&object[40];
    v799[16] = 1;
    LOBYTE(v792) = 0;
    BYTE4(v792) = 0;
    v319.f64[0] = v208;
    sub_20EFE1370(v314 + 23232, (std::string::size_type)(v296 + 2), v316, v317, (std::string::size_type)&v794, (uint64_t)v798, (int *)&v792, v319);
    if (SHIBYTE(v822) < 0)
    {
      operator delete(v820);
      v320 = *v297;
      v321 = v737[1];
      v322 = v737[2];
      if (v321 != v322)
      {
LABEL_358:
        while (*(_DWORD *)v321 != v320)
        {
          v321 += 1088;
          if (v321 == v322)
            goto LABEL_746;
        }
      }
    }
    else
    {
      v320 = *v297;
      v321 = v737[1];
      v322 = v737[2];
      if (v321 != v322)
        goto LABEL_358;
    }
    if (v321 == v322)
    {
LABEL_746:
      v681 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v681, "Requested camera id not found.");
      v681->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v681, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    v793 = 0;
    if (*(_DWORD *)(v321 + 4) != 1 && *((_DWORD *)v296 + 5) == 1)
    {
      v792 = v320;
      if (v320 >= 0x10000
        && (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)|| HIDWORD(v792) >= 0x10000&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0)))
      {
        abort();
      }
      v793 = 1;
LABEL_373:
      (*(void (**)(__uint64_t *__return_ptr, _QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(v737[921] + 23224)
                                                                                     + 56))(v798, *(_QWORD *)(v737[921] + 23224), &v792, v296 + 2);
      v324.f64[0] = *(float64_t *)v799;
      v733 = v324;
      v731 = *(int64x2_t *)v798;
      v325 = v737[921];
      *(_DWORD *)&v799[8] = 0;
      sub_20F0910DC((uint64_t)v798, (_BYTE *)v296 + 24);
      if (*(_DWORD *)&v799[8] == -1)
        sub_20E877AB8();
      *(_QWORD *)&v794.f64[0] = &v790;
      ((void (*)(void **__return_ptr, float64x2_t *, __uint64_t *))off_24C9F83B0[*(unsigned int *)&v799[8]])(&v820, &v794, v798);
      if (*(_DWORD *)&v799[8] != -1)
        ((void (*)(float64x2_t *, __uint64_t *))off_24C9F8398[*(unsigned int *)&v799[8]])(&v794, v798);
      v326 = (float64x2_t)v731;
      v327.f64[1] = v733.f64[1];
      v328 = vextq_s8((int8x16_t)v326, (int8x16_t)v326, 8uLL).u64[0];
      if (v822 >= 0)
        v329 = (const std::string::value_type *)&v820;
      else
        v329 = (const std::string::value_type *)v820;
      *(_QWORD *)&v326.f64[1] = v328;
      if (v822 >= 0)
        v330 = HIBYTE(v822);
      else
        v330 = (size_t)v821;
      v327.f64[0] = 180.0;
      v331 = vmulq_f64(vdivq_f64(v326, v738), v735);
      v794 = v331;
      v795 = *(_OWORD *)&vmulq_f64(vdivq_f64(v733, v740), v327);
      LOBYTE(v798[0]) = 0;
      v799[16] = 0;
      if (v792 >= 0x10000
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
      {
LABEL_758:
        abort();
      }
      v332 = WORD2(v792);
      if (HIDWORD(v792) >= 0x10000)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_758;
        }
        v332 = WORD2(v792);
      }
      v790 = v332 | ((unsigned __int16)v792 << 16);
      v791 = 1;
      v331.f64[0] = v208;
      sub_20EFE1370(v325 + 23232, (std::string::size_type)(v296 + 2), v329, v330, (std::string::size_type)&v794, (uint64_t)v798, &v790, v331);
      if (SHIBYTE(v822) < 0)
        operator delete(v820);
      goto LABEL_389;
    }
    v793 = *(_BYTE *)(v321 + 1080);
    v792 = *(_QWORD *)(v321 + 1072);
    if (v793)
      goto LABEL_373;
LABEL_389:
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v737[921] + 23224) + 40))(*(_QWORD *)(v737[921] + 23224), v296 + 2);
LABEL_319:
    v296 = (uint64_t *)*v296;
  }
  while (v296);
  v333 = *(_QWORD **)&v809[16];
  v279 = (void **)v727.i64[0];
  if (*(_QWORD *)&v809[16])
  {
    do
    {
      v334 = (_QWORD *)*v333;
      operator delete(v333);
      v333 = v334;
    }
    while (v334);
  }
LABEL_396:
  v335 = *(void **)v809;
  *(_QWORD *)v809 = 0;
  if (v335)
    operator delete(v335);
  v7 = v725;
LABEL_399:
  v336 = (*(uint64_t (**)(__uint64_t *))(*v290 + 432))(v290);
  sub_20F102700((_QWORD *)(*(_QWORD *)(v336 + 4848) + 760), (uint64_t)object);
  if (*(_QWORD *)(v7 + 3736))
  {
    v337 = *(_QWORD **)(v7 + 3728);
    if (v337)
    {
      do
      {
        v338 = (_QWORD *)*v337;
        operator delete(v337);
        v337 = v338;
      }
      while (v338);
    }
    *(_QWORD *)(v7 + 3728) = 0;
    v339 = *(_QWORD *)(v7 + 3720);
    if (v339)
    {
      for (m = 0; m != v339; ++m)
        *(_QWORD *)(*(_QWORD *)(v7 + 3712) + 8 * m) = 0;
    }
    *(_QWORD *)(v7 + 3736) = 0;
  }
  v341 = *(_QWORD *)object;
  *(_QWORD *)object = 0;
  v342 = *(void **)(v7 + 3712);
  *(_QWORD *)(v7 + 3712) = v341;
  if (v342)
    operator delete(v342);
  v343 = *(_QWORD *)&object[8];
  v344 = *(_QWORD **)&object[16];
  *(_QWORD *)(v7 + 3720) = *(_QWORD *)&object[8];
  *(_QWORD *)&object[8] = 0;
  v345 = *(_QWORD *)&object[24];
  *(_QWORD *)(v7 + 3736) = *(_QWORD *)&object[24];
  *(_DWORD *)(v7 + 3744) = *(_DWORD *)&object[32];
  *(_QWORD *)(v7 + 3728) = v344;
  if (v345)
  {
    v346 = v344[1];
    if ((v343 & (v343 - 1)) != 0)
    {
      if (v346 >= v343)
        v346 %= v343;
    }
    else
    {
      v346 &= v343 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(v7 + 3712) + 8 * v346) = v7 + 3728;
    *(_QWORD *)&object[16] = 0;
    *(_QWORD *)&object[24] = 0;
    *(_OWORD *)(v7 + 3752) = *(_OWORD *)&object[40];
    *(_OWORD *)(v7 + 3765) = *(_OWORD *)&object[53];
  }
  else
  {
    *(_OWORD *)(v7 + 3752) = *(_OWORD *)&object[40];
    *(_OWORD *)(v7 + 3765) = *(_OWORD *)&object[53];
    if (v344)
    {
      do
      {
        v347 = (_QWORD *)*v344;
        operator delete(v344);
        v344 = v347;
      }
      while (v347);
    }
  }
  v348 = *(void **)object;
  *(_QWORD *)object = 0;
  if (v348)
    operator delete(v348);
  v349 = *(_QWORD *)((*(uint64_t (**)(__uint64_t *))(*v290 + 432))(v290) + 4864);
  v350 = *(_QWORD **)(v349 + 7952);
  if (v350)
    v351 = (_QWORD *)(*v350 + 72);
  else
    v351 = (_QWORD *)(v349 + 8128);
  *(_QWORD *)(v7 + 6288) = *v351;
  v352 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
  if (v279 != (void **)(v352 + 4824))
    sub_20F04F4F0(v279, *(uint64_t **)(v352 + 4824), *(uint64_t **)(v352 + 4832), (uint64_t)(*(_QWORD *)(v352 + 4832) - *(_QWORD *)(v352 + 4824)) >> 5);
  if (*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864) + 4744))
  {
    v353 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
    if (*(_BYTE *)(*(_QWORD *)(v353 + 4864) + 4744))
      v354 = *(_QWORD *)(v353 + 4864) + 3080;
    else
      v354 = 0;
    v355 = v7 + 4304;
    if (v712[1864])
    {
      sub_20EB8200C(v355, v354);
    }
    else
    {
      sub_20EB81E74(v355, v354);
      v712[1864] = 1;
    }
  }
  v356 = *(_QWORD *)(v737[921] + 160);
  v357 = *(_OWORD *)(v356 + 211);
  *(_OWORD *)(v7 + 4248) = *(_OWORD *)(v356 + 200);
  v705 = v7 + 4248;
  *(_OWORD *)(v7 + 4259) = v357;
  v358 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
  v704 = (double *)(v7 + 6288);
  if (*(_BYTE *)(v358 + 1))
    v363 = 1;
  else
    v363 = *(_BYTE *)(v358 + 10664) == 0;
  v364 = !v363;
  v365 = (char)v712;
  v712[2195] = v364;
  v366 = (char)v737;
  sub_20F02EF0C((uint64_t)object, v737[921], v359, v360, v361, v362);
  v383 = (_OWORD *)(v7 + 3888);
  LODWORD(v384) = v825[104];
  if (*v712 != v825[104])
  {
    if (!*v712)
    {
      v549 = *(_QWORD *)&object[88];
      *(_QWORD *)(v7 + 3952) = *(_QWORD *)&object[64];
      v550 = *(_OWORD *)&object[48];
      *(_OWORD *)(v7 + 3920) = *(_OWORD *)&object[32];
      *(_OWORD *)(v7 + 3936) = v550;
      v551 = *(_OWORD *)&object[16];
      *v383 = *(_OWORD *)object;
      *(_OWORD *)(v7 + 3904) = v551;
      *(_QWORD *)(v7 + 3976) = v549;
      v374 = object;
      *(_OWORD *)(v7 + 3960) = *(_OWORD *)&object[72];
      *(_OWORD *)(v7 + 3984) = *(_OWORD *)v824;
      *(_QWORD *)(v7 + 4000) = *(_QWORD *)v825;
      *(_QWORD *)v825 = 0;
      v824[1] = 0;
      v824[0] = 0;
      *(_OWORD *)(v7 + 4040) = *(_OWORD *)&v825[40];
      *(_OWORD *)(v7 + 4056) = *(_OWORD *)&v825[56];
      *(_OWORD *)(v7 + 4072) = *(_OWORD *)&v825[72];
      *(_OWORD *)(v7 + 4081) = *(_OWORD *)&v825[81];
      *(_OWORD *)(v7 + 4008) = *(_OWORD *)&v825[8];
      v382 = *(float64x2_t *)&v825[24];
      *(_OWORD *)(v7 + 4024) = *(_OWORD *)&v825[24];
      *v712 = 1;
      if (!(_DWORD)v384)
        goto LABEL_450;
      goto LABEL_448;
    }
    v367 = *(void **)(v7 + 3984);
    if (v367)
    {
      *(_QWORD *)(v7 + 3992) = v367;
      operator delete(v367);
    }
    *v712 = 0;
    goto LABEL_447;
  }
  if (!*v712)
  {
LABEL_447:
    if (!(_DWORD)v384)
      goto LABEL_450;
    goto LABEL_448;
  }
  v374 = *(_BYTE **)&object[88];
  *(_QWORD *)(v7 + 3952) = *(_QWORD *)&object[64];
  v385 = *(_OWORD *)&object[48];
  *(_OWORD *)(v7 + 3920) = *(_OWORD *)&object[32];
  *(_OWORD *)(v7 + 3936) = v385;
  v386 = *(_OWORD *)&object[16];
  *v383 = *(_OWORD *)object;
  *(_OWORD *)(v7 + 3904) = v386;
  *(_QWORD *)(v7 + 3976) = v374;
  *(_OWORD *)(v7 + 3960) = *(_OWORD *)&object[72];
  v367 = *(void **)(v7 + 3984);
  if (v367)
  {
    v365 = v7 - 112;
    *(_QWORD *)(v7 + 3992) = v367;
    operator delete(v367);
    *(_QWORD *)(v7 + 3984) = 0;
    *(_QWORD *)(v7 + 3992) = 0;
    *(_QWORD *)(v7 + 4000) = 0;
  }
  *(_OWORD *)(v7 + 3984) = *(_OWORD *)v824;
  *(_QWORD *)(v7 + 4000) = *(_QWORD *)v825;
  *(_QWORD *)v825 = 0;
  v824[1] = 0;
  v824[0] = 0;
  *(_OWORD *)(v7 + 4040) = *(_OWORD *)&v825[40];
  *(_OWORD *)(v7 + 4056) = *(_OWORD *)&v825[56];
  *(_OWORD *)(v7 + 4072) = *(_OWORD *)&v825[72];
  *(_OWORD *)(v7 + 4081) = *(_OWORD *)&v825[81];
  *(_OWORD *)(v7 + 4008) = *(_OWORD *)&v825[8];
  v382 = *(float64x2_t *)&v825[24];
  *(_OWORD *)(v7 + 4024) = *(_OWORD *)&v825[24];
  if ((_DWORD)v384)
  {
LABEL_448:
    LOBYTE(v367) = v824[0];
    if (v824[0])
      operator delete(v824[0]);
  }
LABEL_450:
  v387 = v737[921];
  if (!*(_BYTE *)(*(_QWORD *)(v387 + 168) + 2448))
    goto LABEL_582;
  v384 = *(_QWORD *)(v387 + 23216);
  if (*(int *)(v384 + 4904) <= 0)
  {
    LOBYTE(v367) = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 1495, (uint64_t)"HasProcessedFirstWindow() > 0", 29, (uint64_t)"VFusion Has not initialized yet", 31, (void (*)(void **))sub_21023DDB0);
    if ((v367 & 1) != 0)
      goto LABEL_780;
  }
  v290 = v798;
  LOBYTE(v374) = -88;
  v388 = *(_QWORD *)(*(_QWORD *)(v384 + 4864) + 2280)
       + 168
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v384 + 4864) + 2512) - *(_QWORD *)(*(_QWORD *)(v384 + 4864) + 2504)) >> 3);
  v382.f64[0] = *(float64_t *)(v388 - 152);
  v702 = v382;
  v697 = *(int8x16_t *)(v388 - 168);
  v703 = *(double *)(v388 - 128);
  v692 = *(int8x16_t *)(v388 - 144);
  *(_QWORD *)&v699 = vextq_s8(v692, v692, 8uLL).u64[0];
  *(_QWORD *)&v700 = vextq_s8(v697, v697, 8uLL).u64[0];
  v701 = *(double *)(v388 - 104);
  v690 = *(int8x16_t *)(v388 - 120);
  v382 = (float64x2_t)vextq_s8(v690, v690, 8uLL);
  v694 = v382.f64[0];
  v389 = *(_DWORD *)(v387 + 1704);
  if (*(_DWORD *)(v387 + 1696)
    || (++v389, *(_DWORD *)(v387 + 1704) = v389, (v517 = *(_QWORD *)(v387 + 1672)) == 0)
    || (LOBYTE(v374) = *(_BYTE *)(v517 + 489), !(_BYTE)v374))
  {
    if (v389 > *(_DWORD *)(v387 + 1688)
      && v389 <= *(_DWORD *)(v387 + 1692)
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v387 + 23216) + 4864) + 2480) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v387 + 23216) + 4864)
                                                                                            + 2488))
    {
      kdebug_trace();
      v390 = *(_QWORD *)(v387 + 40);
      if (v390)
      {
        v391 = *(_QWORD *)(v387 + 24);
        while (1)
        {
          v392 = *(int8x8_t **)(*(_QWORD *)v387 + 16
                                                * (v391 % ((uint64_t)(*(_QWORD *)(v387 + 8) - *(_QWORD *)v387) >> 4)));
          if (v392[6].i32[0] == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v387 + 23216) + 4864) + 2488) - 4))
            break;
          ++v391;
          if (!--v390)
            goto LABEL_461;
        }
LABEL_463:
        v821 = 0;
        v820 = 0;
        v822 = 0;
        sub_20F04D12C((uint64_t)&v820, 2uLL);
        v395 = *(double *)&v392[3];
        v706 = v392[4];
        v720 = v387;
        if (*(_QWORD *)&v395 != *(_QWORD *)&v706)
        {
          v396 = 0;
          *(_QWORD *)&v723.f64[0] = &v825[296];
          v714 = v824;
          v715.i64[0] = (uint64_t)&object[80];
          __dst = COERCE_DOUBLE(v825);
          v140 = (_BYTE *)&unk_254A6D000;
          v713 = v392;
          while (1)
          {
            v397 = *(double *)(*(_QWORD *)&v395 + 72);
            v724 = *(double *)(*(_QWORD *)&v395 + 80);
            if (*(_QWORD *)&v397 != *(_QWORD *)&v724)
              break;
LABEL_465:
            *(_QWORD *)&v395 += 240;
            ++v396;
            if (*(_QWORD *)&v395 == *(_QWORD *)&v706)
              goto LABEL_651;
          }
          v398 = 0.0;
          *(_QWORD *)&v718 = v396;
          v717.f64[0] = v395;
          v716.i32[0] = v396;
          while (1)
          {
            if (!*(_BYTE *)(*(_QWORD *)&v397 + 400))
              goto LABEL_468;
            v740.f64[0] = v398;
            if (v396 >= 0x10000)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 38, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
              v399 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v399 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v400 = qword_254A6DE40;
                for (n = qword_254A6DE48; v400 != n; v400 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v400)(*(_QWORD *)(v400 + 8), "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
              }
              v402 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v402 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              v398 = v740.f64[0];
              if (!v140[3688])
LABEL_748:
                abort();
              qword_254A6DE58(unk_254A6DE60, "camera_id <= 0xffff", 19, "Camera ID cannot exceeds 16 bits", 32);
            }
            if (LODWORD(v398) >= 0x10000)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 39, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0);
              v403 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v403 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v404 = qword_254A6DE40;
                for (ii = qword_254A6DE48; v404 != ii; v404 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v404)(*(_QWORD *)(v404 + 8), "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
              }
              v406 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v406 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              v398 = v740.f64[0];
              if (!v140[3688])
                goto LABEL_748;
              qword_254A6DE58(unk_254A6DE60, "stream_id <= 0xffff", 19, "Stream ID cannot exceeds 16 bits", 32);
            }
            v407 = sub_20FCBA6DC(v392, v396, LODWORD(v398));
            if (!v408)
            {
              sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1768, (uint64_t)"op_vio_frame.has_value()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v409 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v409 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              if (!byte_254A6DE68 || byte_254A6DE70)
              {
                v410 = qword_254A6DE40;
                for (jj = qword_254A6DE48; v410 != jj; v410 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v410)(*(_QWORD *)(v410 + 8), "op_vio_frame.has_value()", 24, "", 0);
              }
              v412 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
              if ((v412 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
              {
                __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DE78);
              }
              v398 = v740.f64[0];
              if (!v140[3688])
                abort();
              qword_254A6DE58(unk_254A6DE60, "op_vio_frame.has_value()", 24, "", 0);
            }
            v413 = *(_QWORD *)(v407 + 24);
            v414 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v387 + 168) + 440))(*(_QWORD *)(v387 + 168))
                                         + 4824)
                             + 32 * *(_QWORD *)&v718
                             + 8)
                 + 1664 * LODWORD(v398);
            v729 = *(float64x2_t *)(v414 + 24);
            v731 = *(int64x2_t *)v414;
            v738 = *(float64x2_t *)(v414 + 48);
            v208 = *(double *)(v414 + 64);
            v733.f64[0] = *(float64_t *)(v414 + 40);
            v735.f64[0] = *(float64_t *)(v414 + 16);
            v415 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v395 + 24) + 16 * *(_QWORD *)&v398);
            if (*(_BYTE *)(v415 + 184))
            {
              v416 = *(_QWORD *)(v415 + 88) - *(_QWORD *)(v415 + 80);
              if (v416)
                v417 = v416 == *(_QWORD *)(v415 + 168) - *(_QWORD *)(v415 + 160);
              else
                v417 = 0;
              if (v417)
              {
                v418 = (uint64_t)(*(_QWORD *)(v415 + 64) - *(_QWORD *)(v415 + 56)) >> 5;
                if (v418 == v416 >> 6)
                {
LABEL_507:
                  if (*(_QWORD *)(v415 + 16) <= v418)
                    goto LABEL_516;
                }
              }
            }
            else if (*(_QWORD *)(v415 + 160) == *(_QWORD *)(v415 + 168))
            {
              v418 = (uint64_t)(*(_QWORD *)(v415 + 64) - *(_QWORD *)(v415 + 56)) >> 5;
              if (v418 == (uint64_t)(*(_QWORD *)(v415 + 88) - *(_QWORD *)(v415 + 80)) >> 6)
                goto LABEL_507;
            }
            sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/FeatureDetection/include/VIO/FeatureDetection/PointDescriptorStore.h", 184, (uint64_t)"HasValidSize()", 14, (uint64_t)"Descriptor size mis-match", 25, (void (*)(void **))sub_21023DDB0);
            v419 = v413;
            v420 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v420 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!byte_254A6DE68 || byte_254A6DE70)
            {
              v421 = qword_254A6DE40;
              for (kk = qword_254A6DE48; v421 != kk; v421 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v421)(*(_QWORD *)(v421 + 8), "HasValidSize()", 14, "Descriptor size mis-match", 25);
            }
            v423 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
            if ((v423 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
            {
              __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DE78);
            }
            if (!v140[3688])
              abort();
            v413 = v419;
            qword_254A6DE58(unk_254A6DE60, "HasValidSize()", 14, "Descriptor size mis-match", 25);
            v387 = v720;
            v418 = (uint64_t)(*(_QWORD *)(v415 + 64) - *(_QWORD *)(v415 + 56)) >> 5;
LABEL_516:
            if (!*(_BYTE *)(*(_QWORD *)&v397 + 400))
              sub_20E866B34();
            *(_OWORD *)object = **(_OWORD **)&v397;
            v424 = *(_OWORD *)(*(_QWORD *)&v397 + 16);
            v425 = *(_OWORD *)(*(_QWORD *)&v397 + 32);
            v426 = *(_OWORD *)(*(_QWORD *)&v397 + 48);
            *(_OWORD *)&object[57] = *(_OWORD *)(*(_QWORD *)&v397 + 57);
            *(_OWORD *)&object[48] = v426;
            *(_OWORD *)&object[32] = v425;
            *(_OWORD *)&object[16] = v424;
            v427 = *(_QWORD *)(*(_QWORD *)&v397 + 80);
            v428 = *(_QWORD *)(*(_QWORD *)&v397 + 88);
            *(_QWORD *)&object[80] = v427;
            *(_QWORD *)&object[88] = v428;
            if (v428)
            {
              v429 = (unint64_t *)(v428 + 8);
              do
                v430 = __ldxr(v429);
              while (__stxr(v430 + 1, v429));
            }
            v431 = *(unint64_t **)(*(_QWORD *)&v397 + 104);
            v726.f64[0] = *(float64_t *)(*(_QWORD *)&v397 + 96);
            v824[0] = *(void **)&v726.f64[0];
            v824[1] = v431;
            if (v431)
            {
              v432 = v431 + 1;
              do
                v433 = __ldxr(v432);
              while (__stxr(v433 + 1, v432));
            }
            v727 = (int8x16_t)vzip1q_s64(v731, (int64x2_t)v729);
            v728 = (_BYTE *)vextq_s8(v727, v727, 8uLL).u64[0];
            v2 = v738.f64[1];
            LOBYTE(v729.f64[0]) = LOBYTE(v729.f64[1]);
            v731.i8[0] = v731.i8[8];
            memcpy(v825, (const void *)(*(_QWORD *)&v397 + 112), 0x120uLL);
            *(_QWORD *)&v825[288] = v413;
            *(float64_t *)&v825[312] = v738.f64[0];
            *(_QWORD *)&v434 = v727.i64[0];
            *((_QWORD *)&v434 + 1) = v728;
            *(_OWORD *)&v825[296] = v434;
            *(float64_t *)&v825[336] = v738.f64[1];
            *(_QWORD *)&v435 = v731.i64[1];
            *((_QWORD *)&v435 + 1) = *(_QWORD *)&v729.f64[1];
            *(_OWORD *)&v825[320] = v435;
            *(float64_t *)&v434 = v735.f64[0];
            *((_QWORD *)&v434 + 1) = *(_QWORD *)&v733.f64[0];
            *(float64_t *)&v825[360] = v208;
            *(_OWORD *)&v825[344] = v434;
            v826 = v418;
            v436 = v413;
            v437 = v821;
            if ((unint64_t)v821 < v822)
            {
              *(_OWORD *)v821 = *(_OWORD *)object;
              v438 = *(_OWORD *)&object[16];
              v439 = *(_OWORD *)&object[32];
              v440 = *(_OWORD *)&object[48];
              *(_OWORD *)(v437 + 57) = *(_OWORD *)&object[57];
              *((_OWORD *)v437 + 2) = v439;
              *((_OWORD *)v437 + 3) = v440;
              *((_OWORD *)v437 + 1) = v438;
              *((_QWORD *)v437 + 10) = v427;
              *((_QWORD *)v437 + 11) = v428;
              *(_OWORD *)&object[80] = 0uLL;
              *((_QWORD *)v437 + 12) = *(_QWORD *)&v726.f64[0];
              *((_QWORD *)v437 + 13) = v431;
              v824[0] = 0;
              v824[1] = 0;
              memcpy(v437 + 112, v825, 0x120uLL);
              *((_QWORD *)v437 + 50) = v413;
              *(_OWORD *)(v437 + 408) = *(_OWORD *)&v825[296];
              v393 = *(float64x2_t *)&v825[328];
              v441 = *(_OWORD *)&v825[344];
              v442 = *(_OWORD *)&v825[312];
              *((_QWORD *)v437 + 59) = *(_QWORD *)&v825[360];
              *(float64x2_t *)(v437 + 440) = v393;
              *(_OWORD *)(v437 + 456) = v441;
              *(_OWORD *)(v437 + 424) = v442;
              *((_DWORD *)v437 + 120) = v418;
              v821 = v437 + 488;
              v392 = v713;
              v395 = v717.f64[0];
              v140 = &unk_254A6D000;
              v398 = v740.f64[0];
              v443 = *(std::__shared_weak_count **)&object[88];
              v396 = v716.i32[0];
              if (*(_QWORD *)&object[88])
                goto LABEL_558;
              goto LABEL_468;
            }
            v738.f64[0] = v397;
            v444 = (char *)v820;
            v445 = 0x4FBCDA3AC10C9715 * ((v821 - (_BYTE *)v820) >> 3);
            v446 = v445 + 1;
            if ((unint64_t)(v445 + 1) > 0x864B8A7DE6D1D6)
              sub_20E867F44();
            if (0x9F79B47582192E2ALL * ((v822 - (uint64_t)v820) >> 3) > v446)
              v446 = 0x9F79B47582192E2ALL * ((v822 - (uint64_t)v820) >> 3);
            if ((unint64_t)(0x4FBCDA3AC10C9715 * ((v822 - (uint64_t)v820) >> 3)) >= 0x4325C53EF368EBLL)
              v447 = 0x864B8A7DE6D1D6;
            else
              v447 = v446;
            if (v447 > 0x864B8A7DE6D1D6)
              sub_20E877A38();
            v448 = v418;
            v449 = (char *)operator new(488 * v447);
            v450 = *(_OWORD *)&object[48];
            v451 = &v449[488 * v445];
            *((_OWORD *)v451 + 2) = *(_OWORD *)&object[32];
            *((_OWORD *)v451 + 3) = v450;
            v452 = &v449[488 * v447];
            *(_OWORD *)(v451 + 57) = *(_OWORD *)&object[57];
            v453 = *(_OWORD *)&object[16];
            *(_OWORD *)v451 = *(_OWORD *)object;
            *((_OWORD *)v451 + 1) = v453;
            *((_QWORD *)v451 + 10) = v427;
            *((_QWORD *)v451 + 11) = v428;
            *(_OWORD *)&object[80] = 0uLL;
            *((_QWORD *)v451 + 12) = *(_QWORD *)&v726.f64[0];
            *((_QWORD *)v451 + 13) = v431;
            v824[0] = 0;
            v824[1] = 0;
            memcpy(v451 + 112, v825, 0x120uLL);
            *((_QWORD *)v451 + 50) = v436;
            v393 = *(float64x2_t *)&v825[344];
            *(_OWORD *)(v451 + 440) = *(_OWORD *)&v825[328];
            *(float64x2_t *)(v451 + 456) = v393;
            *((_QWORD *)v451 + 59) = *(_QWORD *)&v825[360];
            v393.f64[1] = *(float64_t *)&v825[304];
            v454 = *(_OWORD *)&v825[312];
            *(_OWORD *)(v451 + 408) = *(_OWORD *)&v825[296];
            *(_OWORD *)(v451 + 424) = v454;
            v455 = v451 + 488;
            *((_DWORD *)v451 + 120) = v448;
            if (v437 == v444)
            {
              v820 = v451;
              v821 = v451 + 488;
              v822 = (int64_t)v452;
              v392 = v713;
              v395 = v717.f64[0];
              v140 = (_BYTE *)&unk_254A6D000;
              v397 = v738.f64[0];
LABEL_551:
              v387 = v720;
              if (v437)
                goto LABEL_552;
            }
            else
            {
              v456 = 0;
              v140 = (_BYTE *)&unk_254A6D000;
              do
              {
                v457 = &v451[v456];
                v458 = &v451[v456 - 488];
                *(_OWORD *)v458 = *(_OWORD *)&v437[v456 - 488];
                v459 = *(_OWORD *)&v437[v456 - 472];
                v460 = *(_OWORD *)&v437[v456 - 456];
                v461 = *(_OWORD *)&v437[v456 - 440];
                *(_OWORD *)(v458 + 57) = *(_OWORD *)&v437[v456 - 431];
                *((_OWORD *)v458 + 2) = v460;
                *((_OWORD *)v458 + 3) = v461;
                *((_OWORD *)v458 + 1) = v459;
                v462 = &v437[v456 - 408];
                *(_OWORD *)&v451[v456 - 408] = *(_OWORD *)v462;
                *(_QWORD *)&v437[v456 - 400] = 0;
                *(_QWORD *)v462 = 0;
                v463 = &v437[v456 - 392];
                *(_OWORD *)&v451[v456 - 392] = *(_OWORD *)v463;
                *(_QWORD *)&v437[v456 - 384] = 0;
                *(_QWORD *)v463 = 0;
                memcpy(&v451[v456 - 376], &v437[v456 - 376], 0x120uLL);
                *((_QWORD *)v457 - 11) = *(_QWORD *)&v437[v456 - 88];
                v464 = *(_OWORD *)&v437[v456 - 64];
                v393 = *(float64x2_t *)&v437[v456 - 48];
                v465 = *(_OWORD *)&v437[v456 - 32];
                *((_QWORD *)v457 - 2) = *(_QWORD *)&v437[v456 - 16];
                *((float64x2_t *)v457 - 3) = v393;
                *((_OWORD *)v457 - 2) = v465;
                *((_OWORD *)v457 - 4) = v464;
                *((_OWORD *)v457 - 5) = *(_OWORD *)&v437[v456 - 80];
                *((_DWORD *)v457 - 2) = *(_DWORD *)&v437[v456 - 8];
                v456 -= 488;
              }
              while (&v437[v456] != v444);
              v437 = (char *)v820;
              v466 = v821;
              v820 = &v451[v456];
              v821 = v451 + 488;
              v822 = (int64_t)v452;
              v392 = v713;
              v397 = v738.f64[0];
              if (v466 != v437)
              {
                v395 = v717.f64[0];
                while (1)
                {
                  v467 = v466 - 488;
                  v468 = (std::__shared_weak_count *)*((_QWORD *)v466 - 48);
                  if (!v468)
                    goto LABEL_543;
                  v469 = (unint64_t *)&v468->__shared_owners_;
                  do
                    v470 = __ldaxr(v469);
                  while (__stlxr(v470 - 1, v469));
                  if (!v470)
                  {
                    ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
                    std::__shared_weak_count::__release_weak(v468);
                    v471 = (std::__shared_weak_count *)*((_QWORD *)v466 - 50);
                    if (v471)
                    {
LABEL_544:
                      v472 = (unint64_t *)&v471->__shared_owners_;
                      do
                        v473 = __ldaxr(v472);
                      while (__stlxr(v473 - 1, v472));
                      if (!v473)
                      {
                        ((void (*)(std::__shared_weak_count *))v471->__on_zero_shared)(v471);
                        std::__shared_weak_count::__release_weak(v471);
                      }
                    }
                  }
                  else
                  {
LABEL_543:
                    v471 = (std::__shared_weak_count *)*((_QWORD *)v466 - 50);
                    if (v471)
                      goto LABEL_544;
                  }
                  v466 -= 488;
                  if (v467 == v437)
                    goto LABEL_551;
                }
              }
              v395 = v717.f64[0];
              v387 = v720;
              if (v437)
LABEL_552:
                operator delete(v437);
            }
            v474 = (std::__shared_weak_count *)v824[1];
            v821 = v455;
            v398 = v740.f64[0];
            if (!v824[1])
              goto LABEL_557;
            v475 = (unint64_t *)((char *)v824[1] + 8);
            do
              v476 = __ldaxr(v475);
            while (__stlxr(v476 - 1, v475));
            if (!v476)
            {
              ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
              std::__shared_weak_count::__release_weak(v474);
              v443 = *(std::__shared_weak_count **)&object[88];
              v396 = v716.i32[0];
              if (*(_QWORD *)&object[88])
              {
LABEL_558:
                v477 = (unint64_t *)&v443->__shared_owners_;
                do
                  v478 = __ldaxr(v477);
                while (__stlxr(v478 - 1, v477));
                if (!v478)
                {
                  ((void (*)(std::__shared_weak_count *))v443->__on_zero_shared)(v443);
                  std::__shared_weak_count::__release_weak(v443);
                }
              }
            }
            else
            {
LABEL_557:
              v443 = *(std::__shared_weak_count **)&object[88];
              v396 = v716.i32[0];
              if (*(_QWORD *)&object[88])
                goto LABEL_558;
            }
LABEL_468:
            *(_QWORD *)&v397 += 408;
            ++*(_QWORD *)&v398;
            if (*(_QWORD *)&v397 == *(_QWORD *)&v724)
              goto LABEL_465;
          }
        }
LABEL_651:
        v600 = *(_QWORD **)(v387 + 6576);
        v601 = v600[985];
        if (v601 && v600[977] == v601 && v600[983] == v600[984])
        {
          v602 = v600[976];
          if (v602)
          {
            v603 = v600[972];
          }
          else
          {
            v671 = v600[973];
            v603 = v600[972];
            v602 = 0x6DB6DB6DB6DB6DB7 * ((v671 - v603) >> 3);
          }
          v672 = v603 + 56 * v602;
          v393.f64[0] = *(float64_t *)(v672 - 8);
          _Q2 = *(float64x2_t *)(v672 - 24);
          _Q3.f64[0] = *(float64_t *)(v672 - 16);
          __asm { FMLA            D0, D3, V2.D[1] }
          _Q3.f64[0] = 1.0 / sqrt(_D0 + v393.f64[0] * v393.f64[0]);
          *(_QWORD *)&v675 = *(_OWORD *)&vmulq_f64(v393, _Q3);
          _Q5 = vmulq_n_f64(_Q2, _Q3.f64[0]);
          _Q2.f64[0] = vmuld_lane_f64(_Q3.f64[0], _Q2, 1);
          v677 = v393.f64[0] * _Q3.f64[0];
          v740 = _Q5;
          __asm { FMLA            D3, D2, V5.D[1] }
          v685 = v675;
          v393.f64[0] = sqrt(vmlad_n_f64(_D3, v677, v675));
          if (v393.f64[0] != 1.0)
          {
            v679 = v393.f64[0] >= 1.0 ? v393.f64[0] + -1.0 : 1.0 - v393.f64[0];
            if (v679 > 0.00000001
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1788, (uint64_t)"Near(z_accel_in_I.norm2(), 1.0, 1e-8)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
          }
          v605 = 0;
          v680 = (int8x16_t)v740;
          v680.i64[1] = vextq_s8(v680, v680, 8uLL).u64[0];
          LOBYTE(v718) = v680.i8[15];
          LOBYTE(__dst) = v680.i8[14];
          LOBYTE(v723.f64[0]) = v680.i8[13];
          LOBYTE(v724) = v680.i8[12];
          LOBYTE(v726.f64[0]) = v680.i8[11];
          v727.i8[0] = v680.i8[10];
          LOBYTE(v728) = v680.i8[9];
          LOBYTE(v729.f64[0]) = v680.i8[8];
          v731.i8[0] = HIBYTE(v740.f64[0]);
          LOBYTE(v733.f64[0]) = BYTE6(v740.f64[0]);
          LOBYTE(v735.f64[0]) = BYTE5(v740.f64[0]);
          LOBYTE(v738.f64[0]) = BYTE4(v740.f64[0]);
          LOBYTE(v740.f64[0]) = BYTE3(v740.f64[0]);
          LOBYTE(v387) = v680.i8[2];
          LOBYTE(v140) = v680.i8[1];
          v604 = v680.i8[0];
          v686 = HIBYTE(v685);
          v688 = BYTE6(v685);
          v706.i8[0] = BYTE5(v685);
          LOBYTE(v714) = BYTE4(v685);
          v715.i8[0] = BYTE3(v685);
          v716.i8[0] = BYTE2(v685);
          LOBYTE(v717.f64[0]) = BYTE1(v685);
          v606 = *(_QWORD *)(*(_QWORD *)v392 + 8);
          if (!*(_BYTE *)(v606 + 560))
LABEL_745:
            sub_20E866B34();
        }
        else
        {
          v604 = 0;
          v605 = 1;
          v606 = *(_QWORD *)(*(_QWORD *)v392 + 8);
          if (!*(_BYTE *)(v606 + 560))
            goto LABEL_745;
        }
        v607 = *(_QWORD *)(v606 + 544);
        v608 = *(_QWORD *)(v606 + 536);
        *(_QWORD *)v799 = 0;
        v798[0] = 0;
        v798[1] = 0;
        v609 = (char *)v820;
        v1 = (__uint64_t *)v821;
        *(_QWORD *)object = v798;
        object[8] = 0;
        v610 = v821 - (_BYTE *)v820;
        if (v821 != v820)
        {
          v611 = 0x4FBCDA3AC10C9715 * (v610 >> 3);
          if (v611 > 0x864B8A7DE6D1D6)
            sub_20E867F44();
          v612 = operator new(v610);
          v798[0] = (__uint64_t)v612;
          v798[1] = (__uint64_t)v612;
          *(_QWORD *)v799 = (char *)v612 + 488 * v611;
          v613 = (__uint64_t *)v609;
          do
          {
            *v612 = *(_OWORD *)v613;
            v617 = *((_OWORD *)v613 + 1);
            v618 = *((_OWORD *)v613 + 2);
            v619 = *((_OWORD *)v613 + 3);
            *(_OWORD *)((char *)v612 + 57) = *(_OWORD *)((char *)v613 + 57);
            v612[2] = v618;
            v612[3] = v619;
            v612[1] = v617;
            *((_QWORD *)v612 + 10) = v613[10];
            v620 = v613[11];
            *((_QWORD *)v612 + 11) = v620;
            if (v620)
            {
              v621 = (unint64_t *)(v620 + 8);
              do
                v622 = __ldxr(v621);
              while (__stxr(v622 + 1, v621));
            }
            *((_QWORD *)v612 + 12) = v613[12];
            v623 = v613[13];
            *((_QWORD *)v612 + 13) = v623;
            if (v623)
            {
              v624 = (unint64_t *)(v623 + 8);
              do
                v625 = __ldxr(v624);
              while (__stxr(v625 + 1, v624));
            }
            memcpy(v612 + 7, v613 + 14, 0x128uLL);
            v614 = *(_OWORD *)(v613 + 53);
            v615 = *(_OWORD *)(v613 + 55);
            v616 = *(_OWORD *)(v613 + 57);
            *((_QWORD *)v612 + 59) = v613[59];
            *(_OWORD *)((char *)v612 + 440) = v615;
            *(_OWORD *)((char *)v612 + 456) = v616;
            *(_OWORD *)((char *)v612 + 424) = v614;
            *(_OWORD *)((char *)v612 + 408) = *(_OWORD *)(v613 + 51);
            *((_DWORD *)v612 + 120) = *((_DWORD *)v613 + 120);
            v613 += 61;
            v612 = (_OWORD *)((char *)v612 + 488);
          }
          while (v613 != v1);
          v798[1] = (__uint64_t)v612;
        }
        v384 = v720 + 1664;
        *(_QWORD *)&v626 = v697.i64[0];
        *((_QWORD *)&v626 + 1) = v692.i64[0];
        v800 = v690.i64[0];
        *(_OWORD *)&v799[8] = v626;
        *(double *)&v626 = v700;
        *((double *)&v626 + 1) = v699;
        v801 = v626;
        v802 = v694;
        *(float64_t *)&v627 = v702.f64[0];
        v804 = v701;
        *((double *)&v627 + 1) = v703;
        v803 = v627;
        LOBYTE(v805) = 0;
        v807 = 0;
        if ((v605 & 1) == 0)
        {
          LOBYTE(v628) = v604;
          BYTE1(v628) = (_BYTE)v140;
          BYTE2(v628) = v387;
          BYTE3(v628) = LOBYTE(v740.f64[0]);
          BYTE4(v628) = LOBYTE(v738.f64[0]);
          BYTE5(v628) = LOBYTE(v735.f64[0]);
          BYTE6(v628) = LOBYTE(v733.f64[0]);
          BYTE7(v628) = v731.i8[0];
          BYTE8(v628) = LOBYTE(v729.f64[0]);
          BYTE9(v628) = (_BYTE)v728;
          BYTE10(v628) = v727.i8[0];
          BYTE11(v628) = LOBYTE(v726.f64[0]);
          BYTE12(v628) = LOBYTE(v724);
          BYTE13(v628) = LOBYTE(v723.f64[0]);
          BYTE14(v628) = LOBYTE(__dst);
          HIBYTE(v628) = LOBYTE(v718);
          LOBYTE(v629) = LOBYTE(v685);
          BYTE1(v629) = LOBYTE(v717.f64[0]);
          BYTE2(v629) = v716.i8[0];
          BYTE3(v629) = v715.i8[0];
          BYTE4(v629) = (_BYTE)v714;
          BYTE5(v629) = v706.i8[0];
          BYTE6(v629) = v688;
          v805 = v628;
          HIBYTE(v629) = v686;
          v806 = v629;
          v807 = 1;
        }
        v808 = (unint64_t)(v607 - v608) >> 3;
        if (v609)
        {
          v630 = v821;
          v631 = v609;
          if (v821 != v609)
          {
            do
            {
              v632 = (char *)v630 - 488;
              v633 = (std::__shared_weak_count *)*((_QWORD *)v630 - 48);
              if (v633)
              {
                v634 = (unint64_t *)&v633->__shared_owners_;
                do
                  v635 = __ldaxr(v634);
                while (__stlxr(v635 - 1, v634));
                if (!v635)
                {
                  ((void (*)(std::__shared_weak_count *))v633->__on_zero_shared)(v633);
                  std::__shared_weak_count::__release_weak(v633);
                }
              }
              v636 = (std::__shared_weak_count *)*((_QWORD *)v630 - 50);
              if (v636)
              {
                v637 = (unint64_t *)&v636->__shared_owners_;
                do
                  v638 = __ldaxr(v637);
                while (__stlxr(v638 - 1, v637));
                if (!v638)
                {
                  ((void (*)(std::__shared_weak_count *))v636->__on_zero_shared)(v636);
                  std::__shared_weak_count::__release_weak(v636);
                }
              }
              v630 = (_OWORD *)((char *)v630 - 488);
            }
            while (v632 != v609);
            v631 = v820;
          }
          v821 = v609;
          operator delete(v631);
        }
        sub_20F16D41C(v384, (uint64_t)v798, (uint64_t)v809);
        v640 = v819;
        v7 = v725;
        v387 = v720;
        if (v819)
        {
          LOBYTE(v728) = v809[22];
          LOBYTE(v699) = v809[21];
          LOBYTE(v700) = v809[20];
          LOBYTE(v701) = v809[19];
          LOBYTE(v702.f64[0]) = v809[18];
          LOBYTE(v703) = v809[17];
          LOBYTE(v713) = v809[16];
          LOBYTE(v714) = v809[15];
          v715.i8[0] = v809[14];
          v716.i8[0] = v809[13];
          LOBYTE(v717.f64[0]) = v809[12];
          LOBYTE(v718) = v809[11];
          LOBYTE(__dst) = v809[10];
          LOBYTE(v723.f64[0]) = v809[9];
          LOBYTE(v724) = v809[8];
          LOBYTE(v726.f64[0]) = v809[7];
          v727.i8[0] = v809[6];
          v697.i8[0] = v809[5];
          LOBYTE(v384) = v809[4];
          v692.i8[0] = v809[3];
          LOBYTE(v140) = v809[2];
          v480 = v809[0];
          LOBYTE(v1) = v809[1];
          v706.i8[0] = v809[23];
          v208 = v810;
          v741 = v811;
          v739 = vextq_s8(v741, v741, 8uLL).u64[0];
          v736 = v812;
          v2 = v813;
          v734 = v814;
          v828 = v816;
          v829 = v817;
          v479 = 1;
          v730 = v815;
          v732 = vextq_s8(v734, v734, 8uLL).u64[0];
          v3 = v818;
        }
        else
        {
          v479 = 0;
          v480 = 0;
          v741.i64[0] = v639;
          v739 = v639;
          v736 = *(double *)&v639;
          v734.i64[0] = v639;
          v732 = v639;
          v730 = *(double *)&v639;
        }
        v641 = v798[0];
        if (v798[0])
        {
          v642 = v798[1];
          v643 = (void *)v798[0];
          if (v798[1] != v798[0])
          {
            v695 = v384;
            do
            {
              v644 = v642 - 488;
              v645 = *(std::__shared_weak_count **)(v642 - 384);
              if (v645)
              {
                v646 = (unint64_t *)&v645->__shared_owners_;
                do
                  v647 = __ldaxr(v646);
                while (__stlxr(v647 - 1, v646));
                if (!v647)
                {
                  ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
                  std::__shared_weak_count::__release_weak(v645);
                }
              }
              v648 = *(std::__shared_weak_count **)(v642 - 400);
              if (v648)
              {
                v649 = (unint64_t *)&v648->__shared_owners_;
                do
                  v650 = __ldaxr(v649);
                while (__stlxr(v650 - 1, v649));
                if (!v650)
                {
                  ((void (*)(std::__shared_weak_count *))v648->__on_zero_shared)(v648);
                  std::__shared_weak_count::__release_weak(v648);
                }
              }
              v642 -= 488;
            }
            while (v644 != v641);
            v643 = (void *)v798[0];
            v387 = v720;
            LOBYTE(v384) = v695;
          }
          v798[1] = v641;
          operator delete(v643);
        }
        kdebug_trace();
        v366 = v697.i8[0];
        if (v640)
        {
          v365 = v692.i8[0];
          v540 = v727.i8[0];
          v539 = LOBYTE(v726.f64[0]);
          v538 = LOBYTE(v724);
          v537 = LOBYTE(v723.f64[0]);
          v536 = LOBYTE(__dst);
          v535 = LOBYTE(v718);
          v534 = LOBYTE(v717.f64[0]);
          v533 = v716.i8[0];
          v532 = v715.i8[0];
          v531 = (char)v714;
          v548 = (char)v713;
          v527 = v739;
          v525.i64[0] = v741.i64[0];
          v541 = v706.i8[0];
          v528.i64[0] = v734.i64[0];
          v526 = v736;
          v547 = LOBYTE(v703);
          v546 = LOBYTE(v702.f64[0]);
          v545 = LOBYTE(v701);
          v544 = LOBYTE(v700);
          v543 = LOBYTE(v699);
          v542 = (char)v728;
          v529 = v730;
          v530 = v732;
          goto LABEL_708;
        }
        v479 = 0;
        v365 = v692.i8[0];
        goto LABEL_735;
      }
LABEL_461:
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1752, (uint64_t)"opt_camera_set_features.has_value()", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        v392 = 0;
        goto LABEL_463;
      }
LABEL_780:
      abort();
    }
LABEL_582:
    v479 = 0;
    v480 = 0;
    v741.i64[0] = *(_QWORD *)&v382.f64[0];
    v739 = *(_QWORD *)&v382.f64[0];
    v736 = v382.f64[0];
    v734.i64[0] = *(_QWORD *)&v382.f64[0];
    v732 = *(_QWORD *)&v382.f64[0];
    v730 = v382.f64[0];
    goto LABEL_583;
  }
  v382.f64[0] = *(float64_t *)(v517 + 512);
  v518 = *(float64x2_t *)(v517 + 496);
  v519 = *(double *)(v517 + 536);
  v520 = *(float64x2_t *)(v517 + 520);
  v521 = *(double *)(v517 + 560);
  v522 = *(float64x2_t *)(v517 + 544);
  v208 = 0.0;
  v2 = 0.0;
  memset(object, 0, 32);
  v3 = 0x3FF0000000000000;
  v523 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v518, *(double *)v697.i64), v520, *(double *)v692.i64), v522, *(double *)v690.i64);
  v524 = v382.f64[0] * *(double *)v697.i64 + v519 * *(double *)v692.i64 + v521 * *(double *)v690.i64;
  v525 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v518, v700), v520, v699), v522, v694);
  v526 = v382.f64[0] * v700 + v519 * v699 + v521 * v694;
  v527 = vextq_s8(v525, v525, 8uLL).u64[0];
  v528 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v518, v702.f64[0]), v520, v703), v522, v701);
  v479 = 1;
  *(_DWORD *)(v387 + 1696) = 1;
  v529 = vmulq_f64(v382, v702).f64[0] + v519 * v703 + v521 * v701;
  v530 = vextq_s8(v528, v528, 8uLL).u64[0];
  v480 = LOBYTE(v523.f64[0]);
  v531 = HIBYTE(v523.f64[1]);
  v532 = BYTE6(v523.f64[1]);
  v533 = BYTE5(v523.f64[1]);
  v534 = BYTE4(v523.f64[1]);
  v535 = BYTE3(v523.f64[1]);
  v536 = BYTE2(v523.f64[1]);
  v537 = BYTE1(v523.f64[1]);
  v538 = LOBYTE(v523.f64[1]);
  v539 = HIBYTE(v523.f64[0]);
  v540 = BYTE6(v523.f64[0]);
  v366 = BYTE5(v523.f64[0]);
  LOBYTE(v384) = BYTE4(v523.f64[0]);
  v365 = BYTE3(v523.f64[0]);
  LOBYTE(v140) = BYTE2(v523.f64[0]);
  LOBYTE(v1) = BYTE1(v523.f64[0]);
  v541 = HIBYTE(v524);
  v542 = BYTE6(v524);
  v543 = BYTE5(v524);
  v544 = BYTE4(v524);
  v545 = BYTE3(v524);
  v546 = BYTE2(v524);
  v547 = BYTE1(v524);
  v548 = LOBYTE(v524);
  v828 = *(_OWORD *)object;
  v829 = *(_OWORD *)&object[16];
LABEL_708:
  LOBYTE(v703) = v547;
  LOBYTE(v651) = v547;
  LOBYTE(v702.f64[0]) = v546;
  BYTE1(v651) = v546;
  LOBYTE(v701) = v545;
  BYTE2(v651) = v545;
  LOBYTE(v700) = v544;
  HIBYTE(v651) = v544;
  LOBYTE(v699) = v543;
  LOBYTE(v652) = v543;
  LOBYTE(v728) = v542;
  HIBYTE(v652) = v542;
  *(_WORD *)&v809[21] = v652;
  LOBYTE(v653) = (_BYTE)v1;
  v689 = (char)v140;
  BYTE1(v653) = (_BYTE)v140;
  BYTE2(v653) = v365;
  v696 = v384;
  BYTE3(v653) = v384;
  BYTE4(v653) = v366;
  v727.i8[0] = v540;
  BYTE5(v653) = v540;
  LOBYTE(v726.f64[0]) = v539;
  BYTE6(v653) = v539;
  LOBYTE(v724) = v538;
  BYTE7(v653) = v538;
  LOBYTE(v723.f64[0]) = v537;
  BYTE8(v653) = v537;
  LOBYTE(__dst) = v536;
  BYTE9(v653) = v536;
  LOBYTE(v718) = v535;
  BYTE10(v653) = v535;
  LOBYTE(v717.f64[0]) = v534;
  BYTE11(v653) = v534;
  v716.i8[0] = v533;
  BYTE12(v653) = v533;
  v715.i8[0] = v532;
  BYTE13(v653) = v532;
  LOBYTE(v714) = v531;
  BYTE14(v653) = v531;
  v809[0] = v480;
  LOBYTE(v713) = v548;
  HIBYTE(v653) = v548;
  *(_OWORD *)&v809[1] = v653;
  v706.i8[0] = v541;
  v809[23] = v541;
  *(_DWORD *)&v809[17] = v651;
  v810 = v208;
  v739 = v527;
  v741.i64[0] = v525.i64[0];
  v654.i64[0] = v525.i64[0];
  v654.i64[1] = v527;
  v811 = v654;
  v734.i64[0] = v528.i64[0];
  v736 = v526;
  v812 = v526;
  v813 = v2;
  v654.i64[0] = v528.i64[0];
  v730 = v529;
  v732 = v530;
  v654.i64[1] = v530;
  v814 = v654;
  v816 = v828;
  v817 = v829;
  v815 = v529;
  v818 = v3;
  LODWORD(v798[0]) = 4;
  v798[1] = (__uint64_t)v809;
  *(_DWORD *)v799 = 0;
  memset(object, 0, 24);
  sub_20F053450((unsigned int *)v798, (double *)object);
  _V1.D[1] = *(_QWORD *)&object[8];
  _D3 = *(_QWORD *)&object[8];
  __asm { FMLA            D2, D3, V1.D[1] }
  v658 = sqrt(_D2 + *(double *)&object[16] * *(double *)&object[16]) * 180.0 / 3.14159265;
  v659 = *(_DWORD *)(v387 + 1700);
  if (v659 == 1 && v658 < *(float *)(*(_QWORD *)(v387 + 168) + 7144))
  {
    v479 = 0;
    v691 = 1;
  }
  else
  {
    v691 = 0;
  }
  v660 = *(_DWORD *)(v387 + 1696);
  v661 = sub_210219C18();
  v698 = v366;
  v662 = *(_DWORD *)(v387 + 1704);
  v663 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v663 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v693 = v365;
    v721 = (char)v1;
    *(_DWORD *)object = 67110400;
    *(_DWORD *)&object[4] = v660 == 1;
    *(_WORD *)&object[8] = 1024;
    *(_DWORD *)&object[10] = v660 == 2;
    *(_WORD *)&object[14] = 1024;
    *(_DWORD *)&object[16] = v659 == 1;
    *(_WORD *)&object[20] = 1024;
    v687 = v662;
    *(_DWORD *)&object[22] = v662;
    *(_WORD *)&object[26] = 2048;
    *(double *)&object[28] = v658;
    *(_WORD *)&object[36] = 1024;
    *(_DWORD *)&object[38] = v691;
    v665 = (char *)_os_log_send_and_compose_impl();
    v666 = strlen(v665);
    v798[0] = 0;
    pthread_threadid_np(0, v798);
    v667 = v798[0];
    timespec_get((timespec *)v798, 1);
    sub_210219E20(object, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v661 + 1), (__int128 *)(v661 + 5), "FEO:CORRECTION: STATINIT:%u, VDIR:%u, RECENTER:%u, N_RETRY:%u, ANGLE:%f, IGNORE:%u", 0x52uLL, v665, v666, v667, v798);
    std::mutex::lock(&stru_254A5A410);
    v668 = qword_254A5A458;
    for (mm = unk_254A5A460; v668 != mm; v668 += 40)
    {
      v670 = *(_QWORD *)(v668 + 32);
      if (!v670)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v670 + 48))(v670, object);
    }
    std::mutex::unlock(&stru_254A5A410);
    if ((v825[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&v825[8]);
      v7 = v725;
      LOBYTE(v1) = v721;
      v365 = v693;
      v662 = v687;
      if ((v825[7] & 0x80000000) != 0)
        goto LABEL_722;
LABEL_719:
      if (object[88])
      {
LABEL_723:
        if ((object[87] & 0x80000000) != 0)
          operator delete(*(void **)&object[64]);
      }
    }
    else
    {
      v7 = v725;
      LOBYTE(v1) = v721;
      v365 = v693;
      v662 = v687;
      if ((v825[7] & 0x80000000) == 0)
        goto LABEL_719;
LABEL_722:
      operator delete(v824[0]);
      if (object[88])
        goto LABEL_723;
    }
    if (object[56] && (object[55] & 0x80000000) != 0)
      operator delete(*(void **)&object[32]);
    if ((object[31] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
    if (v665)
      free(v665);
  }
  if (os_signpost_enabled((os_log_t)*v661))
  {
    *(_DWORD *)object = 67110400;
    *(_DWORD *)&object[4] = v660 == 1;
    *(_WORD *)&object[8] = 1024;
    *(_DWORD *)&object[10] = v660 == 2;
    *(_WORD *)&object[14] = 1024;
    *(_DWORD *)&object[16] = v659 == 1;
    *(_WORD *)&object[20] = 1024;
    *(_DWORD *)&object[22] = v662;
    *(_WORD *)&object[26] = 2048;
    *(double *)&object[28] = v658;
    *(_WORD *)&object[36] = 1024;
    *(_DWORD *)&object[38] = v691;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  LOBYTE(v140) = v689;
  LOBYTE(v384) = v696;
  v366 = v698;
LABEL_735:
  v375 = v727.i8[0];
  v376 = LOBYTE(v726.f64[0]);
  v377 = LOBYTE(v724);
  v378 = LOBYTE(v723.f64[0]);
  v379 = LOBYTE(__dst);
  v380 = LOBYTE(v718);
  v381 = LOBYTE(v717.f64[0]);
  LOBYTE(v367) = v716.i8[0];
  v368 = v715.i8[0];
  v369 = (char)v714;
  v370 = (char)v713;
  v371 = v706.i8[0];
  LOBYTE(v374) = LOBYTE(v703);
  v372 = LOBYTE(v702.f64[0]);
  v373 = LOBYTE(v701);
  LOBYTE(v387) = LOBYTE(v700);
  LOBYTE(v290) = LOBYTE(v699);
LABEL_583:
  v481 = v737[921];
  v482 = *(double *)(v7 + 352);
  v483 = *(unsigned __int8 *)(v7 + 376);
  v746 = 0;
  v760 = 0;
  if (v479)
  {
    LOBYTE(v484) = (_BYTE)v374;
    BYTE1(v484) = v372;
    BYTE2(v484) = v373;
    HIBYTE(v484) = v387;
    v746 = v480;
    LOBYTE(v485) = (_BYTE)v290;
    HIBYTE(v485) = (_BYTE)v728;
    v749 = v485;
    LOBYTE(v486) = (_BYTE)v1;
    BYTE1(v486) = (_BYTE)v140;
    BYTE2(v486) = v365;
    BYTE3(v486) = v384;
    BYTE4(v486) = v366;
    BYTE5(v486) = v375;
    BYTE6(v486) = v376;
    BYTE7(v486) = v377;
    BYTE8(v486) = v378;
    BYTE9(v486) = v379;
    BYTE10(v486) = v380;
    BYTE11(v486) = v381;
    BYTE12(v486) = (_BYTE)v367;
    BYTE13(v486) = v368;
    BYTE14(v486) = v369;
    HIBYTE(v486) = v370;
    v747 = v486;
    v750 = v371;
    v748 = v484;
    v751 = v208;
    *(_QWORD *)&v487 = v741.i64[0];
    *((_QWORD *)&v487 + 1) = v739;
    v752 = v487;
    v753 = v736;
    v754 = v2;
    *(_QWORD *)&v487 = v734.i64[0];
    *((_QWORD *)&v487 + 1) = v732;
    v755 = v487;
    v757 = v828;
    v758 = v829;
    v756 = v730;
    v759 = v3;
    v760 = 1;
  }
  sub_20F02FCE0(object, v481, v483 != 0, (__int128 *)&v746, v482, v130);
  v488 = *(_OWORD *)object;
  *(_QWORD *)&object[8] = 0;
  *(_QWORD *)object = 0;
  v489 = *(std::__shared_weak_count **)(v7 + 3880);
  *(_OWORD *)(v7 + 3872) = v488;
  if (v489)
  {
    v490 = (unint64_t *)&v489->__shared_owners_;
    do
      v491 = __ldaxr(v490);
    while (__stlxr(v491 - 1, v490));
    if (!v491)
    {
      ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
      std::__shared_weak_count::__release_weak(v489);
    }
  }
  v492 = *(std::__shared_weak_count **)&object[8];
  if (*(_QWORD *)&object[8])
  {
    v493 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
    do
      v494 = __ldaxr(v493);
    while (__stlxr(v494 - 1, v493));
    if (!v494)
    {
      ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
      std::__shared_weak_count::__release_weak(v492);
    }
  }
  v495 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864);
  v496 = *(_OWORD *)(v495 + 4768);
  *v708 = *(_OWORD *)(v495 + 4752);
  v708[1] = v496;
  v497 = *(_QWORD *)(v495 + 4800);
  *(_OWORD *)(v7 + 6008) = *(_OWORD *)(v495 + 4784);
  *(_QWORD *)(v7 + 6024) = v497;
  *(_QWORD *)(v7 + 6032) = *(_QWORD *)(v495 + 4808);
  v498 = *(_OWORD *)(v495 + 4816);
  *(_QWORD *)(v7 + 6056) = *(_QWORD *)(v495 + 4832);
  *(_OWORD *)(v7 + 6040) = v498;
  v499 = *(_QWORD *)(v495 + 4856);
  *(_OWORD *)(v7 + 6064) = *(_OWORD *)(v495 + 4840);
  *(_QWORD *)(v7 + 6080) = v499;
  v500 = *(_QWORD *)(v495 + 4880);
  *(_OWORD *)(v7 + 6088) = *(_OWORD *)(v495 + 4864);
  *(_QWORD *)(v7 + 6104) = v500;
  v501 = *(_QWORD *)(v495 + 4904);
  *(_OWORD *)(v7 + 6112) = *(_OWORD *)(v495 + 4888);
  *(_QWORD *)(v7 + 6128) = v501;
  *(_OWORD *)(v7 + 6136) = *(_OWORD *)(v495 + 4912);
  v502 = *(_OWORD *)(v495 + 4944);
  v503 = *(_OWORD *)(v495 + 4960);
  v504 = *(_OWORD *)(v495 + 4928);
  *(_QWORD *)(v7 + 6200) = *(_QWORD *)(v495 + 4976);
  *(_OWORD *)(v7 + 6168) = v502;
  *(_OWORD *)(v7 + 6184) = v503;
  *(_OWORD *)(v7 + 6152) = v504;
  v505 = *(_OWORD *)(v495 + 5016);
  v506 = *(_OWORD *)(v495 + 5032);
  v507 = *(_OWORD *)(v495 + 5000);
  *(_QWORD *)(v7 + 6272) = *(_QWORD *)(v495 + 5048);
  *(_OWORD *)(v7 + 6240) = v505;
  *(_OWORD *)(v7 + 6256) = v506;
  *(_OWORD *)(v7 + 6224) = v507;
  *(_OWORD *)(v7 + 6208) = *(_OWORD *)(v495 + 4984);
  if ((v707 & 1) == 0)
  {
    v508 = (uint64_t *)v737[921];
    v509 = v508[5];
    if (v509)
    {
      v510 = *(_DWORD *)(*(_QWORD *)(v508[2902] + 4864) + 5288);
      v511 = v508[3];
      v512 = *v508;
      while (1)
      {
        v513 = *(_QWORD *)(v512 + 16 * (v511 % ((*(_QWORD *)(v737[921] + 8) - v512) >> 4)));
        if (*(_DWORD *)(v513 + 48) == v510)
          break;
        ++v511;
        if (!--v509)
          goto LABEL_600;
      }
      v516 = v712;
      v515 = sub_20FCBEE40((uint64_t *)v513);
      v514 = v552;
    }
    else
    {
LABEL_600:
      v514 = 0;
      v515 = 0;
      v516 = v712;
    }
    v553 = *(unsigned __int8 *)(v7 + 344);
    v554 = *(unsigned __int8 *)(v7 + 432);
    v555 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864) + 5264);
    sub_20F7F8408(v778, v737[921] + 312);
    sub_20F7F9F94(*(_DWORD *)(v737[921] + 80), (*(_QWORD *)(v737[921] + 64) - *(_QWORD *)(v737[921] + 56)) >> 3, v737[921] + 312);
    sub_20F7FA2A0(*(_DWORD *)(v737[921] + 1328), (*(_QWORD *)(v737[921] + 1312) - *(_QWORD *)(v737[921] + 1304)) >> 3, v737[921] + 312);
    sub_20F7FAC2C(v514, v515, *(_DWORD *)(v555 + 612), *(_DWORD *)(v555 + 616), v554 != 0, v737[921] + 312);
    v556 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864);
    v557 = *(_QWORD *)(v556 + 5280);
    v558 = *(unsigned int *)(v556 + 5288);
    if (v557 != -1 || v558 != 0xFFFFFFFFLL)
      sub_20F7FA760(*(_DWORD *)(v709 + 48) - v558, v737[921] + 312);
    sub_20F7FB7D0((uint64_t)v711, v737[921] + 312);
    sub_20F7FCD24((_BYTE *)(v737[921] + 1656), v737[921] + 312);
    v560 = *(_QWORD *)(v737[921] + 160);
    v561 = *(unsigned __int8 *)(v560 + 368);
    if (*(_BYTE *)(v560 + 368))
      v562 = *(_DWORD *)(v560 + 232);
    else
      v562 = 0;
    v563 = *(unsigned __int8 *)(v560 + 226);
    v564 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
    sub_20F800A54(v561 != 0, v563 != 0, v562, *(_DWORD *)(*(_QWORD *)(v564 + 4864) + 5300), v737[921] + 312);
    v565 = v555 + 416;
    sub_20F09A5F4((_QWORD *)(v737[921] + 520), v555 + 416, (uint64_t)v711, *(unsigned __int8 *)(v710 + 528));
    v566 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864);
    v567 = *(_QWORD *)(v566 + 8216);
    v568 = *(unsigned __int8 *)(v567 + 1720);
    v569 = v567 + 864;
    v570 = v567 + 24;
    if (v568)
      v570 = v569;
    if (*(_BYTE *)(v570 + 428))
    {
      v571 = *(uint64_t **)(v566 + 7712);
      if (v571)
      {
        do
        {
          v572 = *((_BYTE *)v571 + 20) != 0;
          if (*((_BYTE *)v571 + 20))
            break;
          v571 = (uint64_t *)*v571;
        }
        while (v571);
      }
      else
      {
        v572 = 0;
      }
    }
    else
    {
      v572 = 1;
    }
    if (*(_BYTE *)(v570 + 426))
      v573 = v572;
    else
      v573 = 0;
    v809[0] = v573;
    v574 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864);
    v575 = *(_QWORD *)(v574 + 8216);
    v576 = *(unsigned __int8 *)(v575 + 1720);
    v577 = v575 + 864;
    v578 = v575 + 24;
    if (v576)
      v578 = v577;
    if (*(_BYTE *)(v578 + 429))
    {
      v579 = *(uint64_t **)(v574 + 7752);
      if (v579)
      {
        do
        {
          v580 = *((_BYTE *)v579 + 20) != 0;
          if (*((_BYTE *)v579 + 20))
            break;
          v579 = (uint64_t *)*v579;
        }
        while (v579);
      }
      else
      {
        v580 = 0;
      }
    }
    else
    {
      v580 = 1;
    }
    if (*(_BYTE *)(v578 + 416))
      v581 = v580;
    else
      v581 = 0;
    v809[1] = v581;
    v809[2] = *(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864) + 7682);
    v582 = **(double **)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864) + 2504);
    v583 = **(_DWORD **)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737) + 4864) + 2480);
    v584 = *(double *)(v7 + 352);
    v585 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
    v586 = *sub_20F136914(v585);
    v587 = v516[2194];
    v588 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v737 + 248))(v737);
    sub_20F0994A4(v583, v565, v586, v553 < 3, v587 != 0, v705, (uint64_t)v711, v584, v582, *v704, v590, v588, v589, (uint64_t)v809, v737[921] + 312);
    v591 = atomic_load((unint64_t *)(*(_QWORD *)(v737[921] + 544) + 128));
    LOWORD(v798[0]) = WORD2(v591);
    v592 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
    v744 = *(_OWORD *)(v592 + 4928);
    v745 = *(_QWORD *)(v592 + 4944);
    sub_20F099FE0(SWORD2(v591), (uint64_t)&v744, v737[921] + 312);
    v593 = v737[921];
    v594 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
    v742 = *(_OWORD *)(v594 + 4928);
    v743 = *(_QWORD *)(v594 + 4944);
    sub_20F10A634((_QWORD *)(v593 + 560), v778[0].i32, v565, (uint64_t)&v742, v798[0], v582);
    v595 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v737 + 424))(v737);
    sub_20F09A448(v595, v737[921] + 312);
    LODWORD(v593) = *((unsigned __int8 *)v737 + 2448);
    v596 = *((unsigned __int8 *)v737 + 2449);
    v597 = sub_210123684(*(_QWORD *)(v737[921] + 120) + 272);
    sub_20F7FF048(v593 != 0, v596 != 0, v597, v737[921] + 312);
    v598 = (*(uint64_t (**)(_QWORD *))(*v737 + 432))(v737);
    sub_20EFF65C4(v598 + 4928, (uint64_t)v798, v565, v7, (uint64_t *)v709);
    v599 = *(_QWORD *)(*(_QWORD *)(v737[921] + 23216) + 4864);
    if (*(_BYTE *)(v599 + 14376))
    {
      object[0] = 0;
      v825[32] = 0;
      sub_20F13D804(object, v599 + 14232);
      if (v825[32])
      {
        sub_20F810C68(*(unsigned int *)v825, v737[921] + 312, *(double *)v824, *(double *)&object[88], *(double *)&v824[1]);
        if (v825[32])
        {
          if (*(_QWORD *)&v825[8])
          {
            *(_QWORD *)&v825[16] = *(_QWORD *)&v825[8];
            operator delete(*(void **)&v825[8]);
          }
        }
      }
    }
  }
  (*(void (**)(_QWORD *))(*v737 + 432))(v737);
  (*(void (**)(_QWORD *))(*v737 + 432))(v737);
  kdebug_trace();
  if (v775)
  {
    if (v773 && v772[0])
    {
      v772[1] = v772[0];
      operator delete(v772[0]);
    }
    if (v770)
    {
      v771 = v770;
      operator delete(v770);
    }
  }
}

void sub_20F04A730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;

  if (LOBYTE(STACK[0x818]))
  {
    if (SLOBYTE(STACK[0x817]) < 0)
      operator delete((void *)STACK[0x800]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x320]);
  sub_20EE62F80(a64);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F04ACF0(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_20F04AD30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  double v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x4_t v25[4];
  _BYTE v26[168];
  _BYTE v27[200];
  void *v28;
  void *v29;
  void *__p;
  void *v31;

  if (!*(_BYTE *)(a1 + 6664))
    return 1;
  v2 = *(_QWORD *)(a1 + 2440);
  if (!v2 || *(_BYTE *)(v2 + 128) != 1)
    return 1;
  v3 = sub_20F12E200(*(_QWORD *)(a1 + 7368) + 1712);
  v4 = v3;
  if ((_DWORD)v3 != 1)
  {
    if ((_DWORD)v3
      && (_DWORD)v3 != 3
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 3284, (uint64_t)"vfusion_return == VFusionReturn::kVFusionTakeStep || vfusion_return == VFusionReturn::kVFusionSkipStepDueToUnderConstrainedWindow", 129, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v5 = *(_QWORD **)(a1 + 7368);
    v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1) + 4864)
                               + 2488)
                   - 4);
    v7 = v5[3];
    v8 = (uint64_t)(v5[1] - *v5) >> 4;
    v9 = *(_QWORD *)(*v5 + 16 * (v7 % v8));
    if (*(_DWORD *)(v9 + 48) != v6)
    {
      v10 = v7 + 1;
      v11 = v5[5] - 1;
      do
      {
        v9 = *(_QWORD *)(*v5 + 16 * (v10 % v8));
        ++v10;
        --v11;
      }
      while (*(_DWORD *)(v9 + 48) != v6);
    }
    sub_20FCBEFE8(*(_QWORD *)(a1 + 7368) + 1464, (_QWORD *)v9, (uint64_t)v27);
    v12 = *(_QWORD *)(a1 + 7368);
    v13 = *(_QWORD *)(*(_QWORD *)(v12 + 6576) + 5264) + 416;
    v14 = *(unsigned __int8 *)(a1 + 2451);
    v26[0] = 0;
    v26[160] = 0;
    memset(v25, 0, sizeof(v25));
    sub_20F13C5B8(v12 + 1712, v13, (uint64_t)v27, v14, 0, (uint64_t)v26, v25);
    v15 = *(_QWORD *)(a1 + 7368);
    v16 = *(unsigned __int8 **)(v15 + 136);
    v17 = **(double **)(*(_QWORD *)(v15 + 6576) + 2504);
    v18 = (unsigned __int8 *)sub_20F136914(v15 + 1712);
    sub_20F10BF34(v16, (_DWORD)v4 == 0, v18, *(_QWORD *)(a1 + 7368) + 6640, v19, v20, v21, v22, v17);
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 7368) + 136);
    if (*(_BYTE *)(v23 + 203))
      sub_20F10E818(v23);
    if (__p)
    {
      v31 = __p;
      operator delete(__p);
    }
    if (v28)
    {
      v29 = v28;
      operator delete(v28);
    }
  }
  return v4;
}

void sub_20F04AF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  sub_20F04ACF0(&a39);
  _Unwind_Resume(a1);
}

void sub_20F04AF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  sub_20F04ACF0(&a39);
  _Unwind_Resume(a1);
}

uint64_t sub_20F04AF54(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
}

void sub_20F04AF90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v1 = *(_QWORD *)(a1 + 7368);
  v2 = *(_QWORD *)(v1 + 1256);
  v3 = *(_QWORD *)(v1 + 1248);
  v4 = 0xEF7BDEF7BDEF7BDFLL * ((v2 - v3) >> 4);
  if (v2 != v3)
  {
    v5 = v2 - 352;
    do
    {
      if (*(_BYTE *)(v5 + 336))
      {
        v7 = *(void **)(v5 + 24);
        if (v7)
        {
          *(_QWORD *)(v5 + 32) = v7;
          operator delete(v7);
        }
      }
      v8 = *(void **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)(v5 + 8) = v8;
        operator delete(v8);
      }
      v6 = v5 - 144;
      v5 -= 496;
    }
    while (v6 != v3);
    v2 = *(_QWORD *)(v1 + 1248);
  }
  *(_QWORD *)(v1 + 1256) = v3;
  v9 = 0xEF7BDEF7BDEF7BDFLL * ((v3 - v2) >> 4);
  if (v4 <= v9)
  {
    if (v4 < v9)
    {
      v10 = v2 + 496 * v4;
      if (v3 != v10)
      {
        v11 = v3 - 352;
        do
        {
          if (*(_BYTE *)(v11 + 336))
          {
            v13 = *(void **)(v11 + 24);
            if (v13)
            {
              *(_QWORD *)(v11 + 32) = v13;
              operator delete(v13);
            }
          }
          v14 = *(void **)v11;
          if (*(_QWORD *)v11)
          {
            *(_QWORD *)(v11 + 8) = v14;
            operator delete(v14);
          }
          v12 = v11 - 144;
          v11 -= 496;
        }
        while (v12 != v10);
      }
      *(_QWORD *)(v1 + 1256) = v10;
    }
  }
  else
  {
    sub_20F050BCC((void **)(v1 + 1248), v4 - v9);
  }
  *(_QWORD *)(v1 + 1280) = 0;
  *(_QWORD *)(v1 + 1272) = 0;
  *(_QWORD *)(v1 + 1288) = 0;
}

double sub_20F04B0BC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  float64x2_t v6;
  uint64_t v7;
  double result;
  float64x2_t v9;
  uint64_t v10;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
  sub_20F888A80(*(_QWORD *)(v4 + 4864), (float64x2_t *)a2, v5, v6);
  v7 = *(_QWORD *)(a2 + 16);
  v9 = *(float64x2_t *)a2;
  v10 = v7;
  sub_20F804440(v9.f64, a1[921] + 312);
  return result;
}

uint64_t sub_20F04B11C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 7368) + 23216);
}

uint64_t sub_20F04B128(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 7368) + 23216);
}

uint64_t sub_20F04B134(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 7368) + 160);
}

uint64_t sub_20F04B140(uint64_t a1)
{
  return sub_20F10E8EC(*(_QWORD *)(*(_QWORD *)(a1 + 7368) + 112));
}

unint64_t sub_20F04B14C(uint64_t a1)
{
  return sub_20F0D0B80(*(_QWORD *)(*(_QWORD *)(a1 + 7368) + 120));
}

uint64_t sub_20F04B158(uint64_t a1)
{
  return sub_210123684(*(_QWORD *)(*(_QWORD *)(a1 + 7368) + 120) + 272);
}

uint64_t sub_20F04B17C(uint64_t result, __int16 a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 7368) + 120) + 408) = a2 | 0x100;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 7368) + 23216) + 4788) = 1;
  return result;
}

uint64_t sub_20F04B1A4(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 376))(a1);
  if ((_DWORD)result)
  {
    v3 = *(_QWORD *)(a1[921] + 120);
    *(_BYTE *)(v3 + 491) = 1;
    *(_DWORD *)(v3 + 492) = 0;
  }
  return result;
}

uint64_t sub_20F04B1E4(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 7368) + 120) + 491);
}

uint64_t sub_20F04B1F4(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 7368) + 112) + 273);
}

uint64_t sub_20F04B204(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 7368) + 120);
  v3 = *(unsigned __int8 *)(v2 + 576);
  v5 = a2[1];
  v4 = a2[2];
  v6 = *a2;
  *(_QWORD *)(v2 + 568) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(v2 + 520) = v6;
  *(_OWORD *)(v2 + 552) = v4;
  *(_OWORD *)(v2 + 536) = v5;
  if (v3)
  {
    *(_BYTE *)(v2 + 584) = 0;
    if (!*(_BYTE *)(v2 + 586))
      return result;
  }
  else
  {
    *(_BYTE *)(v2 + 576) = 1;
    *(_BYTE *)(v2 + 584) = 0;
    if (!*(_BYTE *)(v2 + 586))
      return result;
  }
  *(_WORD *)(v2 + 586) = 256;
  return result;
}

void sub_20F04B264(uint64_t a1, unsigned int a2, double a3, double a4)
{
  sub_20F7FEDB0(a2, *(_QWORD *)(a1 + 7368) + 312, a3);
  sub_20F0CFB2C(*(_QWORD *)(*(_QWORD *)(a1 + 7368) + 120), a2, a3, a4);
  if (!*(_BYTE *)(a1 + 2448) && sub_20F0CFFA8(*(_QWORD *)(*(_QWORD *)(a1 + 7368) + 120)))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 7368) + 23216) + 4789) = 1;
}

BOOL sub_20F04B2F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL8 v4;

  v1 = *(_QWORD *)(a1 + 7368);
  v2 = *(_QWORD *)(v1 + 120);
  v3 = *(unsigned __int8 *)(v2 + 608);
  if (*(_BYTE *)(v2 + 608))
    *(_BYTE *)(v2 + 608) = 0;
  v4 = v3 != 0;
  sub_20F8112AC((uint64_t *)v4, v1 + 312);
  return v4;
}

BOOL sub_20F04B33C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 7368) + 112);
  if (!*(_BYTE *)(v1 + 206))
    return 0;
  if (*(_BYTE *)(v1 + 273))
    return 1;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/ReinitializationLogicController.cpp", 588, (uint64_t)"!state_.is_pause_finished || force_reinitialization_failure_", 60, (uint64_t)"Pause Finished should only be set if tracking has been paused.", 62, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  return *(_BYTE *)(v1 + 206) != 0;
}

BOOL sub_20F04B3D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(uint64_t **)(a1 + 7368);
  if (!v1[5])
    return 0;
  v3 = v1[4];
  v4 = *v1;
  if (!v3)
    v3 = (*(_QWORD *)(*(_QWORD *)(a1 + 7368) + 8) - v4) >> 4;
  v5 = **(_QWORD **)(v4 + 16 * v3 - 16);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = v6 - *(_QWORD *)(v5 + 8);
  if ((unint64_t)(0x6FB586FB586FB587 * (v7 >> 3)) < 2)
    return 1;
  if (v7 != 880)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 3672, (uint64_t)"feature_samples.size() == 2u", 28, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *(_QWORD *)(v5 + 16);
  }
  return *(_BYTE *)(v6 - 320)
      && *(unsigned int *)(a1 + 2592) > (unint64_t)((uint64_t)(*(_QWORD *)(v6 - 336) - *(_QWORD *)(v6 - 344)) >> 3);
}

void sub_20F04B4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  int v10;
  unsigned __int8 v11;
  uint64_t *v12;
  unsigned __int8 v13;
  char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  void *v27;
  _QWORD *v28;
  __uint64_t v29[2];
  void *v30[3];
  char v31;
  void *v32;
  char v33;
  char v34;
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *__p;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 2448))
    return;
  v9 = (_BYTE *)(a1 + 7148);
  v10 = *(unsigned __int8 *)(a1 + 7148);
  v11 = atomic_load((unsigned __int8 *)&qword_254A61988);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A61988))
  {
    qword_254A619A8 = 0;
    qword_254A619B0 = 0;
    v28 = operator new(0x20uLL);
    v28[1] = 0;
    v28[2] = 0;
    *v28 = &off_24C9F8458;
    v28[3] = 0;
    qword_254A619A8 = (uint64_t)(v28 + 3);
    qword_254A619B0 = (uint64_t)v28;
    __cxa_atexit((void (*)(void *))sub_20F04FB84, &qword_254A619A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A61988);
  }
  if (sub_20F04FBEC((uint64_t)&qword_254A619A8, 0, a3, a4, a5, a6, a7, a8, v10))
  {
    v12 = sub_210219C18();
    v13 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_24;
    LODWORD(v30[0]) = 67109120;
    HIDWORD(v30[0]) = v10;
    v15 = (char *)_os_log_send_and_compose_impl();
    v16 = strlen(v15);
    v29[0] = 0;
    pthread_threadid_np(0, v29);
    v17 = v29[0];
    timespec_get((timespec *)v29, 1);
    sub_210219E20(v30, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v12 + 1), (__int128 *)(v12 + 5), "FEO:RECENTER: MODE:%d", 0x15uLL, v15, v16, v17, v29);
    std::mutex::lock(&stru_254A5A410);
    v18 = qword_254A5A458;
    for (i = unk_254A5A460; v18 != i; v18 += 40)
    {
      v20 = *(_QWORD *)(v18 + 32);
      if (!v20)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v20 + 48))(v20, v30);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v41 < 0)
    {
      operator delete(__p);
      if ((v39 & 0x80000000) == 0)
      {
LABEL_11:
        if (!v37)
        {
LABEL_17:
          if (v34 && v33 < 0)
            operator delete(v32);
          if (v31 < 0)
            operator delete(v30[1]);
          if (v15)
            free(v15);
LABEL_24:
          if (os_signpost_enabled((os_log_t)*v12))
          {
            LODWORD(v30[0]) = 67109120;
            HIDWORD(v30[0]) = v10;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_26;
        }
LABEL_15:
        if (v36 < 0)
          operator delete(v35);
        goto LABEL_17;
      }
    }
    else if ((v39 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v38);
    if (!v37)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_26:
  if (*v9)
  {
    v21 = *(_QWORD *)(a1 + 7368);
    v22 = *(char ***)(v21 + 1680);
    v23 = v21;
    if (v22)
    {
      v23 = *(_QWORD *)(a1 + 7368);
      if (*((_BYTE *)v22 + 312))
      {
        v24 = *v22;
        v23 = *(_QWORD *)(a1 + 7368);
        if (*v22)
        {
          v25 = v22[1];
          v26 = *v22;
          if (v25 != v24)
          {
            do
            {
              v27 = (void *)*((_QWORD *)v25 - 22);
              if (v27)
              {
                *((_QWORD *)v25 - 21) = v27;
                operator delete(v27);
              }
              v25 -= 272;
            }
            while (v25 != v24);
            v26 = *v22;
          }
          v22[1] = v24;
          operator delete(v26);
          v23 = *(_QWORD *)(a1 + 7368);
        }
        *((_BYTE *)v22 + 312) = 0;
      }
    }
    *(_QWORD *)(v21 + 1696) = 0;
    *(_DWORD *)(v21 + 1704) = 0;
    *(_DWORD *)(v23 + 1700) = 1;
  }
}

void sub_20F04B8C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A61988);
  _Unwind_Resume(a1);
}

void sub_20F04B8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a35)
        goto LABEL_9;
LABEL_7:
      if (a34 < 0)
        operator delete(a29);
LABEL_9:
      if (a28 && a27 < 0)
        operator delete(a22);
      if (a21 < 0)
        operator delete(a16);
      if (!v47)
        _Unwind_Resume(exception_object);
      free(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a41 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a36);
  if (!a35)
    goto LABEL_9;
  goto LABEL_7;
}

uint64_t sub_20F04B990(_QWORD *a1, char a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;

  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 328))(a1);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v9;
  v10 = a1[921];
  if ((a2 & 1) != 0 || a3)
  {
    v12 = *(_QWORD *)(v10 + 112);
    v11 = *(_QWORD *)(v10 + 120);
    if (*(_BYTE *)(v12 + 203))
      LOBYTE(a3) = v8 != 0;
    else
      LOBYTE(a3) = 0;
    if (!*(_BYTE *)(v11 + 491))
    {
LABEL_14:
      if ((a3 & 1) == 0)
        goto LABEL_15;
      goto LABEL_11;
    }
  }
  else if (!*(_BYTE *)(*(_QWORD *)(v10 + 120) + 491))
  {
    goto LABEL_14;
  }
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 376))(a1))
    goto LABEL_14;
  if (!*(_BYTE *)a4)
  {
LABEL_15:
    v14 = 0;
    *(_WORD *)a4 = 0;
    *(_BYTE *)(a4 + 2) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    return v14;
  }
LABEL_11:
  v13 = a1[921];
  v14 = 1;
  v16 = *(_QWORD *)(v13 + 112);
  v15 = *(_QWORD *)(v13 + 120);
  *(_BYTE *)(v15 + 490) = 1;
  if (*(_BYTE *)(v16 + 197) == 9)
    return v14;
  if (*(_BYTE *)(v15 + 152))
  {
    v17 = *(double *)(v15 + 144);
    v18 = v17 - *(double *)(v15 + 200);
    v19 = v17 - *(double *)(v15 + 208);
  }
  else
  {
    v18 = 0.0;
    v19 = 0.0;
  }
  sub_20F7FF6CC(1, a4, *(unsigned __int8 *)(v15 + 491), v13 + 312, v18, v19);
  return 1;
}

uint64_t sub_20F04BAA8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;

  v1 = *(uint64_t **)(a1 + 7368);
  v2 = v1[4];
  v3 = *v1;
  if (!v2)
    v2 = (*(_QWORD *)(*(_QWORD *)(a1 + 7368) + 8) - v3) >> 4;
  v4 = *(_QWORD *)(**(_QWORD **)(v3 + 16 * v2 - 16) + 8);
  v5 = *(double *)(v4 + 8) + *(double *)(v4 + 16);
  v6 = *(_QWORD *)(a1 + 2440);
  v7 = *(double *)(v6 + 120);
  if (v7 != -1.0
    && v7 != v5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/AdaptiveVIOLogic.cpp", 201, (uint64_t)"cva::exactlyEqual(last_update_timestamp_, -1.) || cva::exactlyEqual(timestamp, last_update_timestamp_)", 102, (uint64_t)"The update must happen at the incoming state", 44, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  *(double *)(v6 + 80) = v5;
  return kdebug_trace();
}

double sub_20F04BB78(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  double result;

  if (*(_QWORD *)(a1 + 2440))
  {
    v2 = *(_QWORD **)(a1 + 7368);
    if (v2[5])
    {
      v3 = v2[4];
      if (v3)
      {
LABEL_4:
        v4 = *v2;
LABEL_8:
        v6 = *(_QWORD *)(**(_QWORD **)(v4 + 16 * v3 - 16) + 8);
        result = *(double *)(v6 + 8) + *(double *)(v6 + 16);
        *(double *)(*(_QWORD *)(a1 + 2440) + 112) = result;
        return result;
      }
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 3753, (uint64_t)"!impl_->camera_set_features_queue_.empty()", 42, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v2 = *(_QWORD **)(a1 + 7368);
      v3 = v2[4];
      if (v3)
        goto LABEL_4;
    }
    v5 = v2;
    v4 = *v2;
    v3 = (v5[1] - v4) >> 4;
    goto LABEL_8;
  }
  return result;
}

__n128 sub_20F04BC28(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  __n128 result;
  unsigned __int8 v6;
  __n128 *v7;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
  if (a2[1].n128_u8[0])
  {
    if (*(_DWORD *)(v4 + 3652) == a2->n128_u32[3])
    {
      v6 = a2[1].n128_u8[0];
      result = *a2;
      *(__n128 *)(v4 + 4928) = *a2;
      *(_BYTE *)(v4 + 4944) = v6;
    }
  }
  else if (*(_BYTE *)(v4 + 4944))
  {
    *(_BYTE *)(v4 + 4944) = 0;
  }
  if (a2[1].n128_u8[0])
  {
    if (a2->n128_u32[3] == 1)
    {
      v7 = *(__n128 **)(a1[921] + 120);
      result = *a2;
      v7[30].n128_u8[0] = a2[1].n128_u8[0];
      v7[29] = result;
    }
  }
  return result;
}

void sub_20F04BCC8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a2)
  {
    v3 = (_QWORD *)a2[23];
    a2[23] = 0;
    if (v3)
    {
      v4 = (void *)v3[7];
      if (v4)
      {
        v3[8] = v4;
        operator delete(v4);
      }
      v5 = (void *)v3[4];
      if (v5)
      {
        v3[5] = v5;
        operator delete(v5);
      }
      MEMORY[0x212BC6398](v3, 0x1090C4075DDBE9BLL);
    }
    v6 = (void *)a2[9];
    if (v6)
    {
      a2[10] = v6;
      operator delete(v6);
    }
    v7 = (void *)a2[6];
    if (v7)
    {
      a2[7] = v7;
      operator delete(v7);
    }
    JUMPOUT(0x212BC6398);
  }
}

_QWORD *sub_20F04BD64(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[23];
    v2[23] = 0;
    if (v3)
    {
      v4 = *(void **)(v3 + 32);
      if (v4)
      {
        *(_QWORD *)(v3 + 40) = v4;
        operator delete(v4);
      }
      MEMORY[0x212BC6398](v3, 0x1010C409BE32CFALL);
    }
    v5 = (void *)v2[9];
    if (v5)
    {
      v2[10] = v5;
      operator delete(v5);
    }
    v6 = (void *)v2[6];
    if (v6)
    {
      v2[7] = v6;
      operator delete(v6);
    }
    MEMORY[0x212BC6398](v2, 0x10B0C40D335D76ALL);
  }
  return a1;
}

void sub_20F04BE04(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)(a1 + 880);
  v3 = *(_QWORD **)(a1 + 904);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(_BYTE *)(a1 + 872))
  {
    if (*(_BYTE *)(a1 + 856))
    {
      v5 = *(void **)(a1 + 544);
      if (v5)
      {
        *(_QWORD *)(a1 + 552) = v5;
        operator delete(v5);
      }
    }
    v6 = *(void **)(a1 + 520);
    if (v6)
    {
      *(_QWORD *)(a1 + 528) = v6;
      operator delete(v6);
    }
  }
  v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(_QWORD *)(a1 + 80) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 48);
  if (v8)
  {
    *(_QWORD *)(a1 + 56) = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F04BEB4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void **v7;
  void *v8;
  void **v10;

  v2 = a1[12];
  a1[12] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  v4 = a1[6];
  if (v4)
  {
    v5 = a1[7];
    v6 = (void *)a1[6];
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0)
          operator delete(*(void **)(v5 - 24));
        v5 -= 24;
      }
      while (v5 != v4);
      v6 = (void *)a1[6];
    }
    a1[7] = v4;
    operator delete(v6);
  }
  v7 = (void **)a1[3];
  if (v7)
  {
    do
    {
      v10 = (void **)*v7;
      if (*((char *)v7 + 39) < 0)
        operator delete(v7[2]);
      operator delete(v7);
      v7 = v10;
    }
    while (v10);
  }
  v8 = (void *)a1[1];
  a1[1] = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

uint64_t sub_20F04BF8C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    if ((*(char *)(a1 + 151) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 111) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 128));
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 48));
  if (!*(_BYTE *)(a1 + 40))
    goto LABEL_12;
LABEL_11:
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (v2)
      goto LABEL_13;
    return a1;
  }
LABEL_12:
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return a1;
LABEL_13:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20F04C07C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A61978);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A61978))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.geometry");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A61970);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A61978);
  }
  *a1 = qword_254A61970;
}

void sub_20F04C118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A61978);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A61978);
  _Unwind_Resume(a1);
}

uint64_t sub_20F04C170(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F04C504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F04C528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F04C53C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F04C560(uint64_t a1, long double *a2, _QWORD *a3)
{
  int64x2_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  int8x16_t v15;
  int64x2_t v16;
  double v17;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  size_t v31;
  const char *v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  const char *v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  _QWORD v47[3];
  int v48;
  const char *v49;
  int v50;
  const char *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  void *object;
  void *v56;
  size_t v57;
  unint64_t v58;
  char v59;
  void *__p[2];
  unint64_t v61;
  char v62;

  *a3 = *(_QWORD *)(a1 + 24);
  a3[1] = *(_QWORD *)(a1 + 56);
  a3[2] = *(_QWORD *)(a1 + 88);
  v4 = *(double *)(a1 + 80);
  if (fabs(v4 + -1.0) <= 0.00001)
  {
    v5 = *(double *)(a1 + 16);
    if (fabs(v5) <= 0.00001)
    {
      v6 = *(double *)(a1 + 48);
      if (fabs(v6) <= 0.00001)
      {
        v7 = *(double *)(a1 + 64);
        if (fabs(v7) <= 0.00001)
        {
          v8 = *(double *)(a1 + 72);
          if (fabs(v8) <= 0.00001)
          {
            v9 = *(double *)(a1 + 8);
            v10.f64[0] = *(float64_t *)a1;
            v10.f64[1] = *(float64_t *)(a1 + 32);
            v11.f64[0] = v9;
            v11.f64[1] = *(float64_t *)(a1 + 40);
            v12.f64[0] = *(float64_t *)(a1 + 16);
            v12.f64[1] = *(float64_t *)(a1 + 48);
            v13 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v10, *(double *)a1), v11, v9), v12, v5);
            v14.f64[0] = v7 * *(double *)a1 + v8 * v9 + v4 * v5;
            v15 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v10, v10.f64[1]), v11, v11.f64[1]), v12, v6);
            *(double *)v3.i64 = v7 * v10.f64[1] + v8 * v11.f64[1] + v4 * v6;
            v16 = (int64x2_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v10, v7), v11, v8), v12, v4);
            v17 = v7 * v7 + v8 * v8 + v4 * v4;
            __asm { FMOV            V6.2D, #-1.0 }
            v23 = vaddq_f64((float64x2_t)vextq_s8(v15, (int8x16_t)v13, 8uLL), _Q6);
            v13.f64[0] = v17 + -1.0;
            *(_QWORD *)&v14.f64[1] = v15.i64[0];
            v24 = vabsq_f64(v14);
            v25 = (float64x2_t)vdupq_n_s64(0x3EE4F8B588E368F1uLL);
            if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v25, vabsq_f64(v23)), (int32x4_t)vcgtq_f64(v25, vabsq_f64(v13))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v25, v24), (int32x4_t)vcgtq_f64(v25, vabsq_f64((float64x2_t)vzip1q_s64(v3, v16)))))))) & 1) == 0&& fabs(*(double *)&v16.i64[1]) < 0.00001)
            {
              *a2 = -atan2(-v9, *(long double *)a1);
              return 1;
            }
          }
        }
      }
    }
  }
  sub_20F04C07C(&v54);
  if (**(int **)(v54 + 56) <= 3)
  {
    v27 = *(unsigned __int8 *)(v54 + 72);
    v28 = sub_20E8C31DC(v54, "OSLogSurrogateAppender", 1, 0);
    v29 = v28 ? v28 + 16 : 0;
    if (v27 || v28)
    {
      v47[0] = &v54;
      v47[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v47[2] = std::chrono::system_clock::now().__d_.__rep_;
      v48 = 3;
      v49 = "unknown file";
      v50 = 452;
      v52 = 0;
      v53 = 0;
      v51 = "unknown function";
      v30 = (uint64_t *)(v54 + 16);
      if (*(char *)(v54 + 39) < 0)
      {
        v32 = *(const char **)(v54 + 16);
        v31 = *(_QWORD *)(v54 + 24);
        v34 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v34 & 1) != 0)
          goto LABEL_19;
      }
      else
      {
        v31 = *(unsigned __int8 *)(v54 + 39);
        v32 = (const char *)(*(_QWORD *)v47[0] + 16);
        v33 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v33 & 1) != 0)
          goto LABEL_19;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v58 && SHIBYTE(v57) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_19:
      if (byte_254A4A4F8[23] >= 0)
        v35 = byte_254A4A4F8;
      else
        v35 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v36 = byte_254A4A4F8[23];
      else
        v36 = *(_QWORD *)&byte_254A4A4F8[8];
      object = os_log_create(v35, v32);
      v37 = &v56;
      if (v36 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v36 >= 0x17)
      {
        v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v38 = v36 | 7;
        v39 = v38 + 1;
        v37 = operator new(v38 + 1);
        v57 = v36;
        v58 = v39 | 0x8000000000000000;
        v56 = v37;
      }
      else
      {
        HIBYTE(v58) = v36;
        if (!v36)
        {
LABEL_33:
          *((_BYTE *)v37 + v36) = 0;
          v59 = 1;
          v40 = __p;
          if (v31 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v31 >= 0x17)
          {
            v42 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17)
              v42 = v31 | 7;
            v43 = v42 + 1;
            v40 = operator new(v42 + 1);
            __p[1] = (void *)v31;
            v61 = v43 | 0x8000000000000000;
            __p[0] = v40;
          }
          else
          {
            HIBYTE(v61) = v31;
            if (!v31)
            {
              LOBYTE(__p[0]) = 0;
              v62 = 1;
              v41 = object;
              if ((SHIBYTE(v61) & 0x80000000) == 0)
                goto LABEL_37;
              goto LABEL_43;
            }
          }
          memmove(v40, v32, v31);
          *((_BYTE *)v40 + v31) = 0;
          v62 = 1;
          v41 = object;
          if ((SHIBYTE(v61) & 0x80000000) == 0)
          {
LABEL_37:
            if (!v59)
              goto LABEL_46;
            goto LABEL_44;
          }
LABEL_43:
          operator delete(__p[0]);
          if (!v59)
          {
LABEL_46:
            if (object)
              os_release(object);
            sub_20F04CB10((int)&object, v29, v30, v41, OS_LOG_TYPE_INFO);
            if (v27)
            {
              sub_20E8C003C((uint64_t)v47, "Invalid gravity-aligned rotation matrix for state correction");
              sub_20E863570((uint64_t)v47);
            }
            sub_20E863570((uint64_t)v47);
            v44 = v53;
            if (v53)
            {
              p_shared_owners = (unint64_t *)&v53->__shared_owners_;
              do
                v46 = __ldaxr(p_shared_owners);
              while (__stlxr(v46 - 1, p_shared_owners));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            return 0;
          }
LABEL_44:
          if (SHIBYTE(v58) < 0)
            operator delete(v56);
          goto LABEL_46;
        }
      }
      memmove(v37, v35, v36);
      goto LABEL_33;
    }
  }
  return 0;
}

void sub_20F04CA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a25)
  {
    if (a24 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F04CAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E863714((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F04CACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *object, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a26 && a25 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F04CB10(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x212BC6398](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_20F04CEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F04CEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F04CEDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

char *sub_20F04CF00(char **a1, __int128 *a2, __int128 *a3, size_t __sz)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  __int128 *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 v26;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v17 = a1[1];
    v16 = a1 + 1;
    v15 = v17;
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - result) >> 3);
    if (v18 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          v26 = *v6;
          *((_DWORD *)v25 + 4) = *((_DWORD *)v6 + 4);
          *(_OWORD *)v25 = v26;
          *(_OWORD *)(v25 + 24) = *(__int128 *)((char *)v6 + 24);
          v24 += 40;
          v6 = (__int128 *)((char *)v6 + 40);
          v25 += 40;
        }
        while (v6 != a3);
      }
      *v16 = v24;
    }
    else
    {
      v19 = (__int128 *)((char *)a2 + 40 * v18);
      if (v15 != result)
      {
        do
        {
          v20 = *v6;
          *((_DWORD *)result + 4) = *((_DWORD *)v6 + 4);
          *(_OWORD *)result = v20;
          *(_OWORD *)(result + 24) = *(__int128 *)((char *)v6 + 24);
          v6 = (__int128 *)((char *)v6 + 40);
          result += 40;
        }
        while (v6 != v19);
        result = *v16;
      }
      v21 = result;
      if (v19 != a3)
      {
        v21 = result;
        v22 = result;
        do
        {
          v23 = *v19;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v22 = v23;
          *(_OWORD *)(v22 + 24) = *(__int128 *)((char *)v19 + 24);
          v21 += 40;
          v19 = (__int128 *)((char *)v19 + 40);
          v22 += 40;
        }
        while (v19 != a3);
      }
      *v16 = v21;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x666666666666666)
      goto LABEL_27;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666)
LABEL_27:
      sub_20E867F44();
    v13 = 40 * v12;
    result = (char *)operator new(40 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_OWORD *)v14 = *v6;
        *((_QWORD *)v14 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)(v14 + 24) = *(__int128 *)((char *)v6 + 24);
        v14 += 40;
        v6 = (__int128 *)((char *)v6 + 40);
      }
      while (v6 != a3);
    }
    a1[1] = v14;
  }
  return result;
}

void sub_20F04D12C(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;

  v2 = *(char **)a1;
  if (0x4FBCDA3AC10C9715 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= a2)
    return;
  if (a2 >= 0x864B8A7DE6D1D7)
    sub_20E867F44();
  v4 = *(_BYTE **)(a1 + 8);
  v5 = 488 * a2;
  v6 = (char *)operator new(488 * a2);
  v7 = &v6[v5];
  v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v7;
    if (v2)
      goto LABEL_8;
    return;
  }
  v9 = 0;
  do
  {
    v10 = &v8[v9];
    v11 = &v8[v9 - 488];
    *(_OWORD *)v11 = *(_OWORD *)&v4[v9 - 488];
    v12 = *(_OWORD *)&v4[v9 - 472];
    v13 = *(_OWORD *)&v4[v9 - 456];
    v14 = *(_OWORD *)&v4[v9 - 440];
    *(_OWORD *)(v11 + 57) = *(_OWORD *)&v4[v9 - 431];
    *((_OWORD *)v11 + 2) = v13;
    *((_OWORD *)v11 + 3) = v14;
    *((_OWORD *)v11 + 1) = v12;
    v15 = &v4[v9 - 408];
    *(_OWORD *)&v8[v9 - 408] = *v15;
    *(_QWORD *)&v4[v9 - 400] = 0;
    *(_QWORD *)v15 = 0;
    v16 = &v4[v9 - 392];
    *(_OWORD *)&v8[v9 - 392] = *v16;
    *(_QWORD *)&v4[v9 - 384] = 0;
    *(_QWORD *)v16 = 0;
    memcpy(&v8[v9 - 376], &v4[v9 - 376], 0x120uLL);
    *((_QWORD *)v10 - 11) = *(_QWORD *)&v4[v9 - 88];
    v17 = *(_OWORD *)&v4[v9 - 64];
    v18 = *(_OWORD *)&v4[v9 - 48];
    v19 = *(_OWORD *)&v4[v9 - 32];
    *((_QWORD *)v10 - 2) = *(_QWORD *)&v4[v9 - 16];
    *((_OWORD *)v10 - 3) = v18;
    *((_OWORD *)v10 - 2) = v19;
    *((_OWORD *)v10 - 4) = v17;
    *((_OWORD *)v10 - 5) = *(_OWORD *)&v4[v9 - 80];
    *((_DWORD *)v10 - 2) = *(_DWORD *)&v4[v9 - 8];
    v9 -= 488;
  }
  while (&v4[v9] != v2);
  v2 = *(char **)a1;
  v20 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = &v8[v9];
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v7;
  if (v20 != v2)
  {
    do
    {
      v21 = v20 - 488;
      v22 = (std::__shared_weak_count *)*((_QWORD *)v20 - 48);
      if (!v22)
        goto LABEL_14;
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        v25 = (std::__shared_weak_count *)*((_QWORD *)v20 - 50);
        if (v25)
        {
LABEL_15:
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      else
      {
LABEL_14:
        v25 = (std::__shared_weak_count *)*((_QWORD *)v20 - 50);
        if (v25)
          goto LABEL_15;
      }
      v20 -= 488;
    }
    while (v21 != v2);
  }
  if (v2)
LABEL_8:
    operator delete(v2);
}

void ***sub_20F04D368(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 == v3)
      {
LABEL_19:
        v2[1] = v3;
        operator delete(v5);
        return v1;
      }
      while (1)
      {
        v6 = v4 - 488;
        v7 = (std::__shared_weak_count *)*((_QWORD *)v4 - 48);
        if (!v7)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
          v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 50);
          if (v10)
          {
LABEL_12:
            v11 = (unint64_t *)&v10->__shared_owners_;
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 - 1, v11));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
        }
        else
        {
LABEL_11:
          v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 50);
          if (v10)
            goto LABEL_12;
        }
        v4 -= 488;
        if (v6 == v3)
        {
          v5 = **v1;
          goto LABEL_19;
        }
      }
    }
  }
  return result;
}

char **sub_20F04D480(char **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char **v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  void *v20;
  void *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void **v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void **v54;
  char *v55;
  char *v56;
  void *v57;
  void *v58;
  void *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;

  sub_20E8D1F68((uint64_t)(a1 + 2917), (uint64_t)a1[2918]);
  v2 = (std::__shared_weak_count *)a1[2916];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*((char *)a1 + 23319) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*((char *)a1 + 23319) < 0)
LABEL_6:
    operator delete(a1[2912]);
LABEL_7:
  v5 = a1[2908];
  if (v5)
  {
    do
    {
      v6 = *(char **)v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = a1[2906];
  a1[2906] = 0;
  if (v7)
    operator delete(v7);
  v8 = a1[2903];
  a1[2903] = 0;
  if (v8)
    (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
  sub_20F12BBD0((uint64_t)(a1 + 1558));
  sub_20F12BBD0((uint64_t)(a1 + 214));
  a1[208] = (char *)&off_24C9F9858;
  v9 = (char **)a1[210];
  a1[210] = 0;
  if (v9)
    sub_20F16E2F4((uint64_t)(a1 + 210), v9);
  v10 = a1[209];
  a1[209] = 0;
  if (v10)
    (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
  v11 = a1[180];
  if (v11)
  {
    v12 = a1[181];
    v13 = a1[180];
    if (v12 != v11)
    {
      do
      {
        v12 -= 104;
        sub_20E9905B4(v12);
      }
      while (v12 != v11);
      v13 = a1[180];
    }
    a1[181] = v11;
    operator delete(v13);
  }
  v14 = a1[178];
  a1[178] = 0;
  if (v14)
    ((void (*)(void))a1[179])();
  sub_20F05009C((uint64_t)(a1 + 170));
  sub_20F04FFC4((uint64_t)(a1 + 162));
  v15 = a1[156];
  if (v15)
  {
    v16 = a1[157];
    v17 = a1[156];
    if (v16 != v15)
    {
      v18 = v16 - 352;
      do
      {
        if (v18[336])
        {
          v20 = (void *)*((_QWORD *)v18 + 3);
          if (v20)
          {
            *((_QWORD *)v18 + 4) = v20;
            operator delete(v20);
          }
        }
        v21 = *(void **)v18;
        if (*(_QWORD *)v18)
        {
          *((_QWORD *)v18 + 1) = v21;
          operator delete(v21);
        }
        v19 = v18 - 144;
        v18 -= 496;
      }
      while (v19 != v15);
      v17 = a1[156];
    }
    a1[157] = v15;
    operator delete(v17);
  }
  v22 = a1[153];
  if (v22)
  {
    do
    {
      v23 = *(char **)v22;
      operator delete(v22);
      v22 = v23;
    }
    while (v23);
  }
  v24 = a1[151];
  a1[151] = 0;
  if (v24)
    operator delete(v24);
  v25 = a1[147];
  a1[147] = 0;
  if (v25)
  {
    v26 = (void *)*((_QWORD *)v25 + 3);
    if (v26)
    {
      *((_QWORD *)v25 + 4) = v26;
      operator delete(v26);
    }
    v27 = *(void **)v25;
    if (*(_QWORD *)v25)
    {
      *((_QWORD *)v25 + 1) = v27;
      operator delete(v27);
    }
    MEMORY[0x212BC6398](v25, 0x10A0C40906386E4);
  }
  v28 = a1[145];
  a1[145] = 0;
  if (v28)
  {
    v29 = (std::__shared_weak_count *)*((_QWORD *)v28 + 1);
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    MEMORY[0x212BC6398](v28, 0x20C40960023A9);
  }
  v32 = a1[131];
  if (v32)
  {
    a1[132] = v32;
    operator delete(v32);
  }
  if (*((char *)a1 + 1007) < 0)
    operator delete(a1[123]);
  v33 = (std::__shared_weak_count *)a1[118];
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (*((_BYTE *)a1 + 856))
    sub_20F04BF8C((uint64_t)(a1 + 83));
  v36 = a1[75];
  if (v36)
  {
    a1[76] = v36;
    operator delete(v36);
  }
  if (*((_BYTE *)a1 + 584))
  {
    v37 = (std::__shared_weak_count *)a1[71];
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  v40 = (std::__shared_weak_count *)a1[69];
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (*((_BYTE *)a1 + 512))
    sub_20F04BEB4(a1 + 50);
  if (*((_BYTE *)a1 + 392))
  {
    v43 = (void **)a1[45];
    if (v43)
    {
      do
      {
        v54 = (void **)*v43;
        if (*((char *)v43 + 39) < 0)
          operator delete(v43[2]);
        operator delete(v43);
        v43 = v54;
      }
      while (v54);
    }
    v44 = a1[43];
    a1[43] = 0;
    if (v44)
      operator delete(v44);
    v45 = (std::__shared_weak_count *)a1[41];
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  v48 = a1[36];
  if (v48)
  {
    a1[37] = v48;
    operator delete(v48);
  }
  v49 = (uint64_t)a1[20];
  a1[20] = 0;
  if (v49)
    sub_20F04BE04(v49);
  sub_20F04BD64(a1 + 19);
  v50 = a1[18];
  a1[18] = 0;
  if (v50)
    sub_20F04BCC8((uint64_t)(a1 + 18), v50);
  v51 = a1[17];
  a1[17] = 0;
  if (v51)
  {
    v52 = (char *)*((_QWORD *)v51 + 33);
    if (v52 == v51 + 240)
    {
      v53 = 4;
      v52 = v51 + 240;
    }
    else
    {
      if (!v52)
      {
LABEL_104:
        MEMORY[0x212BC6398](v51, 0x1020C40690644D0);
        goto LABEL_105;
      }
      v53 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
    goto LABEL_104;
  }
LABEL_105:
  v55 = a1[16];
  a1[16] = 0;
  if (v55)
    MEMORY[0x212BC6398](v55, 0x1000C40C5DEEC0BLL);
  v56 = a1[15];
  a1[15] = 0;
  if (v56)
  {
    v57 = (void *)*((_QWORD *)v56 + 77);
    if (v57)
    {
      *((_QWORD *)v56 + 78) = v57;
      operator delete(v57);
    }
    v58 = (void *)*((_QWORD *)v56 + 34);
    if (v58)
    {
      *((_QWORD *)v56 + 35) = v58;
      operator delete(v58);
    }
    v59 = (void *)*((_QWORD *)v56 + 28);
    if (v59)
    {
      *((_QWORD *)v56 + 29) = v59;
      operator delete(v59);
    }
    MEMORY[0x212BC6398](v56, 0x1020C4091E15263);
  }
  v60 = a1[14];
  a1[14] = 0;
  if (v60)
  {
    v61 = (char *)*((_QWORD *)v60 + 33);
    if (v61 == v60 + 240)
    {
      v62 = 4;
      v61 = v60 + 240;
    }
    else
    {
      if (!v61)
      {
LABEL_121:
        MEMORY[0x212BC6398](v60, 0x1020C40690644D0);
        goto LABEL_122;
      }
      v62 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v61 + 8 * v62))();
    goto LABEL_121;
  }
LABEL_122:
  sub_20EAFDF54((uint64_t)(a1 + 6));
  v63 = *a1;
  if (*a1)
  {
    v64 = a1[1];
    v65 = *a1;
    if (v64 != v63)
    {
      do
      {
        v66 = (std::__shared_weak_count *)*((_QWORD *)v64 - 1);
        if (v66)
        {
          v67 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v64 -= 16;
      }
      while (v64 != v63);
      v65 = *a1;
    }
    a1[1] = v63;
    operator delete(v65);
  }
  return a1;
}

void sub_20F04DA80(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24;

  if (*(unsigned __int8 *)(a1 + 496) == *(unsigned __int8 *)(a2 + 496))
  {
    if (!*(_BYTE *)(a1 + 496))
      return;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v4 = *(_OWORD *)(a2 + 16);
    v5 = *(_OWORD *)(a2 + 32);
    v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v6;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v5;
    v7 = *(_OWORD *)(a2 + 80);
    v8 = *(_OWORD *)(a2 + 96);
    v9 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v9;
    *(_OWORD *)(a1 + 80) = v7;
    *(_OWORD *)(a1 + 96) = v8;
    v11 = (_QWORD *)(a1 + 144);
    v10 = *(void **)(a1 + 144);
    v12 = (_QWORD *)(a2 + 144);
    if (v10)
    {
      *(_QWORD *)(a1 + 152) = v10;
      operator delete(v10);
      *v11 = 0;
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 160) = 0;
    }
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *v12 = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    v13 = (void **)(a1 + 168);
    v14 = (_QWORD *)(a2 + 168);
    if (*(unsigned __int8 *)(a1 + 480) == *(unsigned __int8 *)(a2 + 480))
    {
      if (*(_BYTE *)(a1 + 480))
      {
        v15 = *v13;
        if (*v13)
        {
          *(_QWORD *)(a1 + 176) = v15;
          operator delete(v15);
          *v13 = 0;
          *(_QWORD *)(a1 + 176) = 0;
          *(_QWORD *)(a1 + 184) = 0;
        }
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
        *v14 = 0;
        *(_QWORD *)(a2 + 176) = 0;
        *(_QWORD *)(a2 + 184) = 0;
        memcpy((void *)(a1 + 192), (const void *)(a2 + 192), 0x120uLL);
        *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
        return;
      }
    }
    else
    {
      if (!*(_BYTE *)(a1 + 480))
      {
        *v13 = 0;
        *(_QWORD *)(a1 + 176) = 0;
        *(_QWORD *)(a1 + 184) = 0;
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
        *v14 = 0;
        *(_QWORD *)(a2 + 176) = 0;
        *(_QWORD *)(a2 + 184) = 0;
        memcpy((void *)(a1 + 192), (const void *)(a2 + 192), 0x120uLL);
        *(_BYTE *)(a1 + 480) = 1;
        *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
        return;
      }
      v24 = *v13;
      if (*v13)
      {
        *(_QWORD *)(a1 + 176) = v24;
        operator delete(v24);
      }
      *(_BYTE *)(a1 + 480) = 0;
    }
    *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
    return;
  }
  if (*(_BYTE *)(a1 + 496))
  {
    if (*(_BYTE *)(a1 + 480))
    {
      v16 = *(void **)(a1 + 168);
      if (v16)
      {
        *(_QWORD *)(a1 + 176) = v16;
        operator delete(v16);
      }
    }
    v17 = *(void **)(a1 + 144);
    if (v17)
    {
      *(_QWORD *)(a1 + 152) = v17;
      operator delete(v17);
    }
    *(_BYTE *)(a1 + 496) = 0;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v18 = *(_OWORD *)(a2 + 16);
    v19 = *(_OWORD *)(a2 + 32);
    v20 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v20;
    *(_OWORD *)(a1 + 16) = v18;
    *(_OWORD *)(a1 + 32) = v19;
    v21 = *(_OWORD *)(a2 + 80);
    v22 = *(_OWORD *)(a2 + 96);
    v23 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v23;
    *(_OWORD *)(a1 + 80) = v21;
    *(_OWORD *)(a1 + 96) = v22;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(_BYTE *)(a1 + 480) = 0;
    if (*(_BYTE *)(a2 + 480))
    {
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 184) = 0;
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a2 + 168) = 0;
      *(_QWORD *)(a2 + 176) = 0;
      *(_QWORD *)(a2 + 184) = 0;
      memcpy((void *)(a1 + 192), (const void *)(a2 + 192), 0x120uLL);
      *(_BYTE *)(a1 + 480) = 1;
    }
    *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
    *(_BYTE *)(a1 + 496) = 1;
  }
}

_QWORD *sub_20F04DCF4(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  size_t v19;
  void *v20;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_22;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_22:
      sub_20E867F44();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14 - 4);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = v14 - 4;
    v20 = (void *)*result;
LABEL_20:
    result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9 - 4);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v14 - 4;
    v20 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_20F04DE40(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t k;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t j;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  __int128 *v51;
  __int128 *v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int64_t v70;
  int64_t v71;
  unint64_t v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  BOOL v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;

__int128 *sub_20F04E914(__int128 *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = *a2;
  if (*a2 < *(_QWORD *)result || *a2 == *(_QWORD *)result && *((_DWORD *)a2 + 2) < *((_DWORD *)result + 2))
  {
    if (*a3 < v3 || *a3 == v3 && *((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      v9 = *result;
      v4 = *((_DWORD *)a3 + 2);
      *(_QWORD *)result = *a3;
      *((_DWORD *)result + 2) = v4;
LABEL_17:
      *a3 = v9;
      *((_DWORD *)a3 + 2) = DWORD2(v9);
      return result;
    }
    v12 = *result;
    v7 = *((_DWORD *)a2 + 2);
    *(_QWORD *)result = *a2;
    *((_DWORD *)result + 2) = v7;
    *a2 = v12;
    *((_DWORD *)a2 + 2) = DWORD2(v12);
    if (*a3 < *a2 || *a3 == *a2 && *((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      v9 = *(_OWORD *)a2;
      v8 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v8;
      goto LABEL_17;
    }
  }
  else if (*a3 < v3 || *a3 == v3 && *((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
  {
    v10 = *(_OWORD *)a2;
    v5 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v5;
    *a3 = v10;
    *((_DWORD *)a3 + 2) = DWORD2(v10);
    if (*a2 < *(_QWORD *)result || *a2 == *(_QWORD *)result && *((_DWORD *)a2 + 2) < *((_DWORD *)result + 2))
    {
      v11 = *result;
      v6 = *((_DWORD *)a2 + 2);
      *(_QWORD *)result = *a2;
      *((_DWORD *)result + 2) = v6;
      *a2 = v11;
      *((_DWORD *)a2 + 2) = DWORD2(v11);
    }
  }
  return result;
}

BOOL sub_20F04EA94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  __int128 *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v15 = (_QWORD *)(a2 - 16);
      v16 = *(_QWORD *)(a2 - 16);
      if (v16 < *(_QWORD *)a1 || v16 == *(_QWORD *)a1 && *(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 8))
      {
        v25 = *(_OWORD *)a1;
        v17 = *(_DWORD *)(a2 - 8);
        *(_QWORD *)a1 = *v15;
        *(_DWORD *)(a1 + 8) = v17;
        *v15 = v25;
        *(_DWORD *)(a2 - 8) = DWORD2(v25);
      }
      return result;
    case 3:
      sub_20F04E914((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a2 - 16));
      return 1;
    case 4:
      v18 = (_QWORD *)(a1 + 16);
      v19 = (__int128 *)(a1 + 32);
      sub_20F04E914((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v20 = (_QWORD *)(a2 - 16);
      v21 = *(_QWORD *)(a2 - 16);
      v22 = *(_QWORD *)(a1 + 32);
      if (v21 >= v22 && (v21 != v22 || *(_DWORD *)(a2 - 8) >= *(_DWORD *)(a1 + 40)))
        return 1;
      v26 = *v19;
      v23 = *(_DWORD *)(a2 - 8);
      *(_QWORD *)v19 = *v20;
      *(_DWORD *)(a1 + 40) = v23;
      *v20 = v26;
      *(_DWORD *)(a2 - 8) = DWORD2(v26);
      if (*(_QWORD *)v19 >= *v18 && (*(_QWORD *)v19 != *v18 || *(_DWORD *)(a1 + 40) >= *(_DWORD *)(a1 + 24)))
        return 1;
      v27 = *(_OWORD *)v18;
      *v18 = *(_QWORD *)v19;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
      *(_QWORD *)v19 = v27;
      *(_DWORD *)(a1 + 40) = DWORD2(v27);
      v24 = *(_QWORD *)(a1 + 16);
      if (v24 >= *(_QWORD *)a1 && (v24 != *(_QWORD *)a1 || *(_DWORD *)(a1 + 24) >= *(_DWORD *)(a1 + 8)))
        return 1;
      v28 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *v18;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
      *v18 = v28;
      *(_DWORD *)(a1 + 24) = DWORD2(v28);
      return 1;
    case 5:
      sub_20F04EDF8(a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__int128 *)(a1 + 48), a2 - 16);
      return 1;
    default:
      v6 = a1 + 32;
      sub_20F04E914((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v7 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_QWORD *)v7;
    if (*(_QWORD *)v7 < *(_QWORD *)v6)
      break;
    if (*(_QWORD *)v7 == *(_QWORD *)v6)
    {
      v12 = *(_DWORD *)(v7 + 8);
      if (v12 < *(_DWORD *)(v6 + 8))
        goto LABEL_10;
    }
LABEL_7:
    v6 = v7;
    v8 += 16;
    v7 += 16;
    if (v7 == a2)
      return 1;
  }
  v12 = *(_DWORD *)(v7 + 8);
LABEL_10:
  *(_QWORD *)v7 = *(_QWORD *)v6;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v6 + 8);
  v10 = a1;
  if (v6 != a1)
  {
    v13 = v8;
    while (1)
    {
      v14 = *(_QWORD *)(a1 + v13 + 16);
      if (v11 >= v14)
      {
        if (v11 != v14)
        {
          v10 = a1 + v13 + 32;
          goto LABEL_6;
        }
        if (v12 >= *(_DWORD *)(a1 + v13 + 24))
          break;
      }
      v6 -= 16;
      *(_QWORD *)(a1 + v13 + 32) = *(_QWORD *)(a1 + v13 + 16);
      *(_DWORD *)(a1 + v13 + 40) = *(_DWORD *)(a1 + v13 + 24);
      v13 -= 16;
      if (v13 == -32)
      {
        v10 = a1;
        goto LABEL_6;
      }
    }
    v10 = v6;
  }
LABEL_6:
  *(_QWORD *)v10 = v11;
  *(_DWORD *)(v10 + 8) = v12;
  if (++v9 != 8)
    goto LABEL_7;
  return v7 + 16 == a2;
}

__n128 sub_20F04EDF8(uint64_t a1, unint64_t *a2, unint64_t *a3, __int128 *a4, uint64_t a5)
{
  __n128 result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  __n128 v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  __n128 v23;
  __int128 v24;

  sub_20F04E914((__int128 *)a1, a2, a3);
  if (*(_QWORD *)a4 < *a3 || *(_QWORD *)a4 == *a3 && *((_DWORD *)a4 + 2) < *((_DWORD *)a3 + 2))
  {
    result = *(__n128 *)a3;
    v18 = *(__n128 *)a3;
    v11 = *((_DWORD *)a4 + 2);
    *a3 = *(_QWORD *)a4;
    *((_DWORD *)a3 + 2) = v11;
    *(_QWORD *)a4 = v18.n128_u64[0];
    *((_DWORD *)a4 + 2) = v18.n128_u32[2];
    if (*a3 < *a2 || *a3 == *a2 && *((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      result = *(__n128 *)a2;
      v19 = *(__n128 *)a2;
      v12 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v12;
      *a3 = v19.n128_u64[0];
      *((_DWORD *)a3 + 2) = v19.n128_u32[2];
      if (*a2 < *(_QWORD *)a1 || *a2 == *(_QWORD *)a1 && *((_DWORD *)a2 + 2) < *(_DWORD *)(a1 + 8))
      {
        result = *(__n128 *)a1;
        v20 = *(_OWORD *)a1;
        v13 = *((_DWORD *)a2 + 2);
        *(_QWORD *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = v13;
        *a2 = v20;
        *((_DWORD *)a2 + 2) = DWORD2(v20);
      }
    }
  }
  if (*(_QWORD *)a5 < *(_QWORD *)a4 || *(_QWORD *)a5 == *(_QWORD *)a4 && *(_DWORD *)(a5 + 8) < *((_DWORD *)a4 + 2))
  {
    result = (__n128)*a4;
    v21 = *a4;
    v14 = *(_DWORD *)(a5 + 8);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *((_DWORD *)a4 + 2) = v14;
    *(_QWORD *)a5 = v21;
    *(_DWORD *)(a5 + 8) = DWORD2(v21);
    if (*(_QWORD *)a4 < *a3 || *(_QWORD *)a4 == *a3 && *((_DWORD *)a4 + 2) < *((_DWORD *)a3 + 2))
    {
      result = *(__n128 *)a3;
      v22 = *(__n128 *)a3;
      v15 = *((_DWORD *)a4 + 2);
      *a3 = *(_QWORD *)a4;
      *((_DWORD *)a3 + 2) = v15;
      *(_QWORD *)a4 = v22.n128_u64[0];
      *((_DWORD *)a4 + 2) = v22.n128_u32[2];
      if (*a3 < *a2 || *a3 == *a2 && *((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
      {
        result = *(__n128 *)a2;
        v23 = *(__n128 *)a2;
        v16 = *((_DWORD *)a3 + 2);
        *a2 = *a3;
        *((_DWORD *)a2 + 2) = v16;
        *a3 = v23.n128_u64[0];
        *((_DWORD *)a3 + 2) = v23.n128_u32[2];
        if (*a2 < *(_QWORD *)a1 || *a2 == *(_QWORD *)a1 && *((_DWORD *)a2 + 2) < *(_DWORD *)(a1 + 8))
        {
          result = *(__n128 *)a1;
          v24 = *(_OWORD *)a1;
          v17 = *((_DWORD *)a2 + 2);
          *(_QWORD *)a1 = *a2;
          *(_DWORD *)(a1 + 8) = v17;
          *a2 = v24;
          *((_DWORD *)a2 + 2) = DWORD2(v24);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_20F04F084(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;

  v2 = (_QWORD *)a1[49];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[47];
  a1[47] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[44];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)a1[42];
  a1[42] = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)a1[31];
  if (v8)
  {
    do
    {
      v11 = (_QWORD *)*v8;
      v12 = (_QWORD *)v8[6];
      if (v12)
      {
        do
        {
          v13 = (_QWORD *)*v12;
          operator delete(v12);
          v12 = v13;
        }
        while (v13);
      }
      v14 = (void *)v8[4];
      v8[4] = 0;
      if (v14)
        operator delete(v14);
      operator delete(v8);
      v8 = v11;
    }
    while (v11);
  }
  v9 = (void *)a1[29];
  a1[29] = 0;
  if (v9)
    operator delete(v9);
  return a1;
}

uint64_t sub_20F04F154(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  char *v9;

  v4 = (_QWORD *)sub_20F04F210(a1, (__int128 *)a2);
  v4[52] = 0;
  v4[53] = 0;
  v4[54] = 0;
  v6 = *(_BYTE **)(a2 + 416);
  v5 = *(_BYTE **)(a2 + 424);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_20E867F44();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 416) = v8;
    *(_QWORD *)(a1 + 424) = v8;
    v9 = &v8[16 * (v7 >> 4)];
    *(_QWORD *)(a1 + 432) = v9;
    memcpy(v8, v6, v7 - 7);
    *(_QWORD *)(a1 + 424) = v9;
  }
  *(_WORD *)(a1 + 440) = *(_WORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  return a1;
}

void sub_20F04F1EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[53] = v4;
    operator delete(v4);
  }
  sub_20F04F084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F04F210(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  v9 = a2[7];
  v10 = a2[8];
  v11 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  v12 = a2[11];
  v13 = a2[12];
  v14 = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 208) = v14;
  *(_OWORD *)(a1 + 176) = v12;
  sub_20E969B50(a1 + 232, (uint64_t)a2 + 232);
  v15 = a2[17];
  v16 = a2[18];
  v17 = a2[19];
  *(_OWORD *)(a1 + 316) = *(__int128 *)((char *)a2 + 316);
  *(_OWORD *)(a1 + 288) = v16;
  *(_OWORD *)(a1 + 304) = v17;
  *(_OWORD *)(a1 + 272) = v15;
  sub_20E96A108(a1 + 336, (uint64_t)(a2 + 21));
  sub_20E96A108(a1 + 376, (uint64_t)a2 + 376);
  return a1;
}

void sub_20F04F2D8(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;

  v5 = *(_QWORD **)(v2 + 352);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *v3;
  *v3 = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(v2 + 248);
  if (v8)
  {
    do
    {
      v10 = (_QWORD *)*v8;
      v11 = (_QWORD *)v8[6];
      if (v11)
      {
        do
        {
          v12 = (_QWORD *)*v11;
          operator delete(v11);
          v11 = v12;
        }
        while (v12);
      }
      v13 = (void *)v8[4];
      v8[4] = 0;
      if (v13)
        operator delete(v13);
      operator delete(v8);
      v8 = v10;
    }
    while (v10);
  }
  v9 = *v1;
  *v1 = 0;
  if (v9)
    operator delete(v9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F04F36C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x111111111111112)
      sub_20E867F44();
    result = (uint64_t)operator new(240 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 240 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_20EE5F348(v8 + v9, (__int128 *)(a2 + v9));
        v9 += 240;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20F04F428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20F04F46C(&a9);
  _Unwind_Resume(a1);
}

void sub_20F04F43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 240)
    sub_20E990F68(v10 - 240 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  sub_20F04F46C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_20F04F46C(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 240;
          sub_20E990F68(v4);
        }
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_20F04F4F0(void **a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = (uint64_t *)*a1;
  if (a4 > (v8 - (uint64_t)*a1) >> 5)
  {
    if (v9)
    {
      v10 = (char *)a1[1];
      v11 = *a1;
      if (v10 != (char *)v9)
      {
        do
        {
          v12 = *((_QWORD *)v10 - 3);
          if (v12)
          {
            v13 = *((_QWORD *)v10 - 2);
            v14 = (void *)*((_QWORD *)v10 - 3);
            if (v13 != v12)
            {
              do
                v13 = sub_20EB8188C(v13 - 1664);
              while (v13 != v12);
              v14 = (void *)*((_QWORD *)v10 - 3);
            }
            *((_QWORD *)v10 - 2) = v12;
            operator delete(v14);
          }
          v10 -= 32;
        }
        while (v10 != (char *)v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59)
      goto LABEL_50;
    v20 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v20 = a4;
    v21 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v22 = 0x7FFFFFFFFFFFFFFLL;
    if (!v21)
      v22 = v20;
    if (v22 >> 59)
LABEL_50:
      sub_20E867F44();
    v23 = 32 * v22;
    v19 = (char *)operator new(32 * v22);
    *a1 = v19;
    a1[1] = v19;
    a1[2] = &v19[v23];
    if (v6 != a3)
    {
      v24 = 0;
      do
      {
        v25 = &v19[v24 * 8];
        v26 = &v6[v24];
        *(_DWORD *)v25 = v6[v24];
        *(_QWORD *)&v19[v24 * 8 + 8] = 0;
        *((_QWORD *)v25 + 2) = 0;
        *((_QWORD *)v25 + 3) = 0;
        sub_20EA89974((uint64_t)&v19[v24 * 8 + 8], v6[v24 + 1], v6[v24 + 2], 0x4EC4EC4EC4EC4EC5 * ((v6[v24 + 2] - v6[v24 + 1]) >> 7));
        v24 += 4;
      }
      while (v26 + 4 != a3);
      v19 += v24 * 8;
    }
LABEL_34:
    a1[1] = v19;
    return;
  }
  v15 = (uint64_t *)a1[1];
  v16 = ((char *)v15 - (char *)v9) >> 5;
  if (v16 >= a4)
  {
    if (a2 == a3)
    {
      v19 = (char *)*a1;
    }
    else
    {
      v19 = (char *)*a1;
      do
      {
        *(_DWORD *)v9 = *(_DWORD *)v6;
        if (v6 != v9)
          sub_20F04F8E0(v9 + 1, v6[1], v6[2], 0x4EC4EC4EC4EC4EC5 * ((v6[2] - v6[1]) >> 7));
        v6 += 4;
        v9 += 4;
        v19 += 32;
      }
      while (v6 != a3);
      v15 = (uint64_t *)a1[1];
    }
    while (v15 != (uint64_t *)v19)
    {
      v31 = *(v15 - 3);
      if (v31)
      {
        v32 = *(v15 - 2);
        v33 = (void *)*(v15 - 3);
        if (v32 != v31)
        {
          do
            v32 = sub_20EB8188C(v32 - 1664);
          while (v32 != v31);
          v33 = (void *)*(v15 - 3);
        }
        *(v15 - 2) = v31;
        operator delete(v33);
      }
      v15 -= 4;
    }
    goto LABEL_34;
  }
  v17 = &a2[4 * v16];
  if (v15 != v9)
  {
    v18 = 32 * v16;
    do
    {
      *(_DWORD *)v9 = *(_DWORD *)v6;
      if (v6 != v9)
        sub_20F04F8E0(v9 + 1, v6[1], v6[2], 0x4EC4EC4EC4EC4EC5 * ((v6[2] - v6[1]) >> 7));
      v6 += 4;
      v9 += 4;
      v18 -= 32;
    }
    while (v18);
    v9 = (uint64_t *)a1[1];
  }
  v27 = (char *)v9;
  if (v17 != a3)
  {
    v28 = 0;
    do
    {
      v29 = (char *)&v9[v28];
      v30 = &v17[v28];
      *(_DWORD *)v29 = v17[v28];
      v9[v28 + 1] = 0;
      *((_QWORD *)v29 + 2) = 0;
      *((_QWORD *)v29 + 3) = 0;
      sub_20EA89974((uint64_t)&v9[v28 + 1], v17[v28 + 1], v17[v28 + 2], 0x4EC4EC4EC4EC4EC5 * ((v17[v28 + 2] - v17[v28 + 1]) >> 7));
      v28 += 4;
    }
    while (v30 + 4 != a3);
    v27 = (char *)&v9[v28];
  }
  a1[1] = v27;
}

void sub_20F04F884(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  if (v4)
  {
    do
    {
      v6 = *(_QWORD *)(v3 - 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v3 - 16);
        v8 = *(void **)(v3 - 24);
        if (v7 != v6)
        {
          do
            v7 = sub_20EB8188C(v7 - 1664);
          while (v7 != v6);
          v8 = *(void **)(v3 - 24);
        }
        *(_QWORD *)(v3 - 16) = v6;
        operator delete(v8);
      }
      v3 -= 32;
    }
    while (v3 != v2);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F04F8E0(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *a1) >> 7) >= a4)
  {
    result = a1[1];
    if (0x4EC4EC4EC4EC4EC5 * ((result - v9) >> 7) >= a4)
    {
      if (a2 == a3)
      {
        v23 = v9;
      }
      else
      {
        v23 = v9;
        do
        {
          sub_20EB8200C(v9, v6);
          v6 += 1664;
          v9 += 1664;
          v23 += 1664;
        }
        while (v6 != a3);
        result = a1[1];
      }
      while (result != v23)
        result = sub_20EB8188C(result - 1664);
      a1[1] = v23;
    }
    else
    {
      v19 = a2 + ((result - v9) >> 7 << 7);
      if (result != v9)
      {
        v20 = (result - v9) >> 7 << 7;
        do
        {
          result = sub_20EB8200C(v9, v6);
          v6 += 1664;
          v9 += 1664;
          v20 -= 1664;
        }
        while (v20);
        v9 = a1[1];
      }
      v21 = v9;
      if (v19 != a3)
      {
        v22 = 0;
        do
        {
          result = sub_20EB81E74(v9 + v22, v19 + v22);
          v22 += 1664;
        }
        while (v19 + v22 != a3);
        v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          v10 = sub_20EB8188C(v10 - 1664);
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x27627627627627)
      goto LABEL_37;
    v12 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 7);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x13B13B13B13B13 ? 0x27627627627627 : v13;
    if (v14 > 0x27627627627627)
LABEL_37:
      sub_20E867F44();
    v15 = 1664 * v14;
    result = (uint64_t)operator new(1664 * v14);
    v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      v18 = 0;
      do
      {
        result = sub_20EB81E74(v17 + v18, v6 + v18);
        v18 += 1664;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_20F04FB84(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20F04FBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  _DWORD *v9;
  BOOL v10;
  uint64_t result;

  v9 = *(_DWORD **)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 4))
    v10 = **(_DWORD **)a1 == a9;
  else
    v10 = 0;
  result = !v10;
  if (!v10)
  {
    *v9 = a9;
    *((_BYTE *)v9 + 4) = 1;
  }
  return result;
}

void sub_20F04FC30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F8458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F04FC40(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F8458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F04FC78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F7F20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F04FC88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F7F20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F04FCB8(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t *sub_20F04FCC4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F04FD08(v2);
    MEMORY[0x212BC6398](v3, 0x1062C40E21CDE38);
  }
  return a1;
}

uint64_t sub_20F04FD08(uint64_t a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  if (*(_BYTE *)(a1 + 4792))
  {
    if (*(_BYTE *)(a1 + 4776))
    {
      v2 = *(void **)(a1 + 4464);
      if (v2)
      {
        *(_QWORD *)(a1 + 4472) = v2;
        operator delete(v2);
      }
    }
    v3 = *(void **)(a1 + 4440);
    if (v3)
    {
      *(_QWORD *)(a1 + 4448) = v3;
      operator delete(v3);
    }
  }
  v4 = *(std::__shared_weak_count **)(a1 + 1104);
  if (!v4)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_11:
    v7 = *(void **)(a1 + 1072);
    if (!v7)
      goto LABEL_13;
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  v7 = *(void **)(a1 + 1072);
  if (v7)
  {
LABEL_12:
    *(_QWORD *)(a1 + 1080) = v7;
    operator delete(v7);
  }
LABEL_13:
  v8 = *(void **)(a1 + 984);
  if (v8)
  {
    *(_QWORD *)(a1 + 992) = v8;
    operator delete(v8);
  }
  v9 = *(_QWORD *)(a1 + 216);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 224);
    v11 = *(void **)(a1 + 216);
    if (v10 != v9)
    {
      do
      {
        v12 = *(_QWORD *)(v10 - 24);
        if (v12)
        {
          v13 = *(_QWORD *)(v10 - 16);
          v14 = *(void **)(v10 - 24);
          if (v13 != v12)
          {
            do
              v13 = sub_20EB8188C(v13 - 1664);
            while (v13 != v12);
            v14 = *(void **)(v10 - 24);
          }
          *(_QWORD *)(v10 - 16) = v12;
          operator delete(v14);
        }
        v10 -= 32;
      }
      while (v10 != v9);
      v11 = *(void **)(a1 + 216);
    }
    *(_QWORD *)(a1 + 224) = v9;
    operator delete(v11);
  }
  v15 = *(void **)(a1 + 96);
  if (v15)
  {
    *(_QWORD *)(a1 + 104) = v15;
    operator delete(v15);
  }
  return a1;
}

void sub_20F04FE4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F7F70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F04FE5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F7F70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F04FE8C(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t sub_20F04FE98(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v6 = *--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
    {
      v7 = *(void **)(v5 + 224);
      if (v7)
      {
        *(_QWORD *)(v5 + 232) = v7;
        operator delete(v7);
      }
      v8 = *(void **)(v5 + 200);
      if (v8)
      {
        *(_QWORD *)(v5 + 208) = v8;
        operator delete(v8);
      }
      v9 = *(void **)(v5 + 24);
      if (v9)
      {
        *(_QWORD *)(v5 + 32) = v9;
        operator delete(v9);
      }
      v10 = *(void **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)(v5 + 8) = v10;
        operator delete(v10);
      }
      result = MEMORY[0x212BC6398](v5, 0x1020C403E7E2BD4);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t *sub_20F04FF40(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 224);
    if (v3)
    {
      *(_QWORD *)(v2 + 232) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(v2 + 200);
    if (v4)
    {
      *(_QWORD *)(v2 + 208) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 24);
    if (v5)
    {
      *(_QWORD *)(v2 + 32) = v5;
      operator delete(v5);
    }
    v6 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v6;
      operator delete(v6);
    }
    MEMORY[0x212BC6398](v2, 0x1020C403E7E2BD4);
  }
  return a1;
}

uint64_t sub_20F04FFC4(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(std::mutex **)(a1 + 48);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 48));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_QWORD **)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD **)(a1 + 16);
    v8 = *(void **)(a1 + 8);
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
        {
          v11 = sub_20F04FD08(v9);
          MEMORY[0x212BC6398](v11, 0x1062C40E21CDE38);
        }
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_20F05009C(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;

  v2 = *(std::mutex **)(a1 + 48);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 48));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_QWORD **)(a1 + 8);
  if (v6)
  {
    sub_20F04FE98(a1 + 8, v6);
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

double sub_20F050130(_QWORD *a1, unint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  double result;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char v21[32];
  _QWORD *v22;
  BOOL v23;
  unint64_t v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;

  v2 = (char *)*a1;
  v3 = (char *)a1[1];
  if (a2 != (uint64_t)&v3[-*a1] >> 4)
  {
    if (a2)
    {
      v19 = 0;
      v20 = 0uLL;
      sub_20EE68A10((uint64_t)&v19, a2);
      v6 = a1[5];
      if (v6 >= a2)
        v7 = a2;
      else
        v7 = a1[5];
      v25 = a1;
      v26 = v6 == 0;
      v27 = 0;
      v22 = a1;
      v23 = v6 <= a2;
      v24 = v7;
      sub_20F05030C((uint64_t)&v25, (uint64_t)&v22, v19, (uint64_t)v21);
      v8 = *a1;
      if (*a1)
      {
        v9 = a1[1];
        v10 = (void *)*a1;
        if (v9 != v8)
        {
          do
          {
            v11 = *(std::__shared_weak_count **)(v9 - 8);
            if (v11)
            {
              p_shared_owners = (unint64_t *)&v11->__shared_owners_;
              do
                v13 = __ldaxr(p_shared_owners);
              while (__stlxr(v13 - 1, p_shared_owners));
              if (!v13)
              {
                ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                std::__shared_weak_count::__release_weak(v11);
              }
            }
            v9 -= 16;
          }
          while (v9 != v8);
          v10 = (void *)*a1;
        }
        a1[1] = v8;
        operator delete(v10);
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      v18 = v19;
      *a1 = v19;
      result = *(double *)&v20;
      *(_OWORD *)(a1 + 1) = v20;
      a1[3] = 0;
      a1[4] = v7 % ((*(_QWORD *)&result - v18) >> 4);
      a1[5] = v7;
    }
    else
    {
      while (v3 != v2)
      {
        v14 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v3 -= 16;
      }
      a1[1] = v2;
      a1[4] = 0;
      a1[5] = 0;
      a1[3] = 0;
    }
  }
  return result;
}

void sub_20F0502E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C3144((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F0502F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C3144((void **)va);
  _Unwind_Resume(a1);
}

void sub_20F05030C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _BYTE v20[7];

  v6 = *(_QWORD **)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_DWORD *)v20 = *(_DWORD *)(a1 + 9);
  *(_DWORD *)&v20[3] = *(_DWORD *)(a1 + 12);
  v8 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(a2 + 8))
  {
    v14 = *(_QWORD *)(a2 + 16);
    if (!*(_BYTE *)(a1 + 8) && v8 == v14)
    {
      v7 = 0;
      goto LABEL_22;
    }
    while (1)
    {
      while (1)
      {
        v15 = *v6 + 16 * ((v6[3] + v8) % (unint64_t)((uint64_t)(v6[1] - *v6) >> 4));
        v16 = *(_OWORD *)v15;
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
        v17 = *(std::__shared_weak_count **)(a3 + 8);
        *(_OWORD *)a3 = v16;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
            break;
        }
        ++v8;
        a3 += 16;
        if (v8 != v6[5])
          goto LABEL_19;
      }
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      ++v8;
      a3 += 16;
      if (v8 != v6[5])
      {
LABEL_19:
        if (v8 == v14)
        {
          v7 = 0;
          v8 = v14;
          goto LABEL_22;
        }
      }
    }
  }
  if (!*(_BYTE *)(a1 + 8))
  {
    do
    {
      v9 = *v6 + 16 * ((v6[3] + v8) % (unint64_t)((uint64_t)(v6[1] - *v6) >> 4));
      v10 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v11 = *(std::__shared_weak_count **)(a3 + 8);
      *(_OWORD *)a3 = v10;
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      ++v8;
      a3 += 16;
    }
    while (v8 != v6[5]);
    v7 = 1;
  }
LABEL_22:
  *(_DWORD *)(a4 + 9) = *(_DWORD *)v20;
  *(_DWORD *)(a4 + 12) = *(_DWORD *)&v20[3];
  *(_QWORD *)a4 = v6;
  *(_BYTE *)(a4 + 8) = v7;
  *(_QWORD *)(a4 + 16) = v8;
  *(_QWORD *)(a4 + 24) = a3;
}

void sub_20F0504C8()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F0504DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9F7FC0;
  result[1] = v3;
  return result;
}

uint64_t sub_20F050510(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9F7FC0;
  a2[1] = v2;
  return result;
}

_QWORD *sub_20F05052C(_QWORD *result, uint64_t a2, uint64_t a3, int64x2_t a4, double a5, int64x2_t _Q2)
{
  _QWORD *v6;
  int64x2_t v7;
  int64x2_t v8;
  float64x2_t v10;
  int8x16_t v13;
  int64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int8x16_t v26;
  float64x2_t v28;
  double v30;
  uint64_t v31;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  double v36;
  float64x2_t v37;
  int64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  float64x2_t v62;
  unint64_t v63;
  float64x2_t v64[7];
  double v65;
  uint64_t v66;

  if (!*(_BYTE *)(a2 + 26))
  {
    v6 = (_QWORD *)result[1];
    a4.i64[0] = *(_QWORD *)(a3 + 24);
    v7 = *(int64x2_t *)(a3 + 8);
    _Q2.i64[0] = *(_QWORD *)(a3 + 56);
    v8 = *(int64x2_t *)(a3 + 40);
    _D4 = *(_QWORD *)(a3 + 88);
    v10 = (float64x2_t)vzip1q_s64(v7, v8);
    _Q3 = (float64x2_t)vzip2q_s64(v7, v8);
    _D21 = vdupq_laneq_s64(*(int64x2_t *)(a3 + 72), 1).u64[0];
    v13 = (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q3, 1);
    _Q16 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&_Q3.f64[0], 0);
    _D17 = *(double *)(a3 + 120);
    _Q18 = *(float64x2_t *)(a3 + 104);
    _Q20 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v10, vnegq_f64(_Q18).f64[0]), _Q3, _Q18, 1), (float64x2_t)vzip1q_s64(a4, _Q2), _D17, 0);
    _D6 = *(_QWORD *)(a3 + 80);
    __asm
    {
      FMLS            D3, D6, V18.D[1]
      FMLS            D3, D4, V17.D[0]
    }
    v23 = (int64x2_t)vextq_s8(_Q16, v13, 8uLL);
    v24 = (float64x2_t)vzip1q_s64(v7, v23);
    v28 = (float64x2_t)vzip2q_s64((int64x2_t)v10, v23);
    v25.f64[0] = *(float64_t *)(a3 + 72);
    *(_QWORD *)&v25.f64[1] = _D21;
    v26 = vextq_s8((int8x16_t)v28, (int8x16_t)_Q2, 8uLL);
    _Q18 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v24, vnegq_f64(_Q20).f64[0]), v28, _Q20, 1), v25, _Q3.f64[0], 0);
    __asm { FMLS            D16, D2, V20.D[1] }
    *(_QWORD *)&v28.f64[1] = v26.i64[0];
    __asm { FMLS            D16, D4, V3.D[0] }
    v64[4] = v25;
    v64[5] = (float64x2_t)(unint64_t)_D4;
    v64[0] = v24;
    v64[1] = (float64x2_t)a4.u64[0];
    v64[2] = v28;
    v64[3] = (float64x2_t)v26.u64[1];
    v64[6] = _Q18;
    v65 = _D16;
    v66 = 0x3FF0000000000000;
    v30 = *(double *)a4.i64;
    v31 = v26.i64[1];
    _D19 = _D4;
    result = *(_QWORD **)(v6[2902] + 4864);
    if (result)
    {
      v33 = result[994];
      if (v33)
      {
        if (*(_QWORD *)(v33 + 8))
        {
          v62 = v25;
          v63 = _D21;
          v60 = v28;
          v61 = _D16;
          v59 = _Q18;
          v57 = v26.i64[1];
          v58 = _D4;
          result = sub_20F88867C(result, v64, (float64x2_t)a4);
          v31 = v57;
          _D19 = v58;
          _Q18 = v59;
          v28 = v60;
          _D16 = v61;
          v25 = v62;
          _D21 = v63;
        }
      }
    }
    v34 = (_OWORD *)v6[36];
    v35 = (_OWORD *)v6[37];
    if (v34 != v35)
    {
      *(_QWORD *)&v36 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
      v37.f64[0] = v30;
      *(_QWORD *)&v37.f64[1] = v31;
      __asm { FMLS            D17, D21, V18.D[1] }
      v39 = (int64x2_t)vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v24, (int64x2_t)v28), vnegq_f64(_Q18).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v24, (int64x2_t)v28), _Q18, 1), v37, _D16, 0);
      v40 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v28.f64[0], 0);
      v41 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v25.f64[0], 0);
      v42 = (float64x2_t)vdupq_lane_s64(vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).i64[0], 0);
      v43 = (float64x2_t)vdupq_lane_s64(vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).i64[0], 0);
      v44 = (float64x2_t)vdupq_lane_s64(v31, 0);
      v45 = (float64x2_t)vdupq_lane_s64(_D19, 0);
      __asm { FMLS            D17, D19, V16.D[0] }
      v47 = (float64x2_t)vdupq_laneq_s64(v39, 1);
      v48 = (float64x2_t)vdupq_lane_s64(_D17, 0);
      do
      {
        v50 = *((float64x2_t *)v34 + 1);
        v49 = *((float64x2_t *)v34 + 2);
        v52 = *((float64x2_t *)v34 + 3);
        v51 = *((float64x2_t *)v34 + 4);
        v54 = *((float64x2_t *)v34 + 5);
        v53 = *((float64x2_t *)v34 + 6);
        v56 = *((float64x2_t *)v34 + 7);
        v55 = *((float64x2_t *)v34 + 8);
        v34[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v50, v24.f64[0]), v40, v52), v41, v54), (float64x2_t)0, v56);
        v34[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v49, v24.f64[0]), v40, v51), v41, v53), (float64x2_t)0, v55);
        v34[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v50, v36), v42, v52), v43, v54), (float64x2_t)0, v56);
        v34[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v49, v36), v42, v51), v43, v53), (float64x2_t)0, v55);
        v34[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v50, v30), v44, v52), v45, v54), (float64x2_t)0, v56);
        v34[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v49, v30), v44, v51), v45, v53), (float64x2_t)0, v55);
        v34[7] = vaddq_f64(v56, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v50, *(double *)v39.i64), v47, v52), v48, v54));
        v34[8] = vaddq_f64(v55, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v49, *(double *)v39.i64), v47, v51), v48, v53));
        v34 = (_OWORD *)((char *)v34 + 152);
      }
      while (v34 != v35);
    }
  }
  return result;
}

uint64_t sub_20F050794(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry25FrontEndOdometryInterface4ImplC1EPS2_NSt3__110shared_ptrINS0_9analytics16CASe"
                     "ssionContextEEEPKNS0_8sem_proc16SemanticsManagerEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry25FrontEndOdometryInterface4ImplC1EPS2_NSt3__110shared_ptrINS0_9anal"
                                "ytics16CASessionContextEEEPKNS0_8sem_proc16SemanticsManagerEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry25FrontEndOdometryInterface4ImplC1EPS2_NSt3__110shared_ptrINS0_9analytics16CASessionContextEEEPKNS0_8sem_proc16SemanticsManagerEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry25FrontEndOdometryInterface4ImplC1EPS2_NSt3__110shared_ptrINS0_9analytics16CASessionContextEEEPKNS0_8sem_proc16SemanticsManagerEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F050800()
{
  return &unk_24C9F8030;
}

void sub_20F050810()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F050824(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9F8050;
  result[1] = v3;
  return result;
}

uint64_t sub_20F050858(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9F8050;
  a2[1] = v2;
  return result;
}

uint64_t sub_20F050874(uint64_t a1, char *a2, _BYTE *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 8);
  if (*a3)
  {
    v4 = *(_QWORD **)(v3 + 168);
    v4[919] = -1;
    *(_BYTE *)(v3 + 1184) = 0;
    *(_BYTE *)(v3 + 1200) = 0;
    return (*(uint64_t (**)(_QWORD *))(*v4 + 160))(v4);
  }
  else
  {
    sub_20F12D510(*(_QWORD *)(v3 + 23216), *a2, 0);
    sub_20F40649C(*(_QWORD *)(v3 + 160));
    v6 = *(_QWORD *)(v3 + 1216);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*(_QWORD *)(v3 + 1208) + 8 * i) = 0;
      v8 = *(_QWORD **)(v3 + 1224);
      *(_QWORD *)(v3 + 1232) = 0;
      *(_QWORD *)(v3 + 1224) = 0;
      if (v8)
      {
        do
        {
          v9 = (_QWORD *)*v8;
          operator delete(v8);
          v8 = v9;
        }
        while (v9);
      }
    }
    sub_20FCBC00C((uint64_t *)v3);
    *(_BYTE *)(v3 + 176) = 0;
    if (*(_BYTE *)(v3 + 280))
      *(_BYTE *)(v3 + 280) = 0;
    v10 = *(void **)(v3 + 288);
    if (v10)
    {
      *(_QWORD *)(v3 + 296) = v10;
      operator delete(v10);
    }
    *(_QWORD *)(v3 + 288) = 0;
    *(_QWORD *)(v3 + 296) = 0;
    *(_QWORD *)(v3 + 304) = 0;
    v11 = *(_QWORD **)(v3 + 168);
    v11[919] = -1;
    *(_BYTE *)(v3 + 1184) = 0;
    *(_BYTE *)(v3 + 1200) = 0;
    (*(void (**)(_QWORD *))(*v11 + 160))(v11);
    v12 = *(_QWORD *)(v3 + 168);
    if (*(_BYTE *)(v12 + 6664))
    {
      v13 = *(_QWORD *)(v12 + 2440);
      if (v13)
      {
        if (*(_BYTE *)(v13 + 128) == 1)
        {
          sub_20F10E818(*(_QWORD *)(v3 + 136));
          v12 = *(_QWORD *)(v3 + 168);
        }
      }
    }
    result = *(_QWORD *)(v12 + 7240);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    if ((*(_DWORD *)(*(_QWORD *)(v3 + 6576) + 2276) & 0xFFFFFFFE) == 2
      && (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 650, (uint64_t)"!VIOVFusion().IsInitialized()", 29, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), (_DWORD)result)|| (*(_DWORD *)(*(_QWORD *)(v3 + 17328) + 2276) & 0xFFFFFFFE) == 2&& (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 651, (uint64_t)"!VisionOnlyVFusion().IsInitialized()", 36, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), (_DWORD)result))
    {
      abort();
    }
    v14 = *(_QWORD *)(v3 + 120);
    *(_WORD *)(v14 + 586) = 1;
    *(_BYTE *)(v14 + 608) = 0;
    if (*(_BYTE *)(v14 + 600))
      *(_BYTE *)(v14 + 600) = 0;
  }
  return result;
}

uint64_t sub_20F050A60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry25FrontEndOdometryInterface4ImplC1EPS2_NSt3__110shared_ptrINS0_9analytics16CASe"
                     "ssionContextEEEPKNS0_8sem_proc16SemanticsManagerEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry25FrontEndOdometryInterface4ImplC1EPS2_NSt3__110shared_ptrINS0_9anal"
                                "ytics16CASessionContextEEEPKNS0_8sem_proc16SemanticsManagerEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry25FrontEndOdometryInterface4ImplC1EPS2_NSt3__110shared_ptrINS0_9analytics16CASessionContextEEEPKNS0_8sem_proc16SemanticsManagerEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry25FrontEndOdometryInterface4ImplC1EPS2_NSt3__110shared_ptrINS0_9analytics16CASessionContextEEEPKNS0_8sem_proc16SemanticsManagerEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F050ACC()
{
  return &unk_24C9F80C0;
}

void sub_20F050ADC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F050AF0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9F80E0;
  result[1] = v3;
  return result;
}

uint64_t sub_20F050B24(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9F80E0;
  a2[1] = v2;
  return result;
}

void sub_20F050B40(uint64_t a1, char *a2)
{
  sub_20F12D510(*(_QWORD *)(a1 + 8) + 1712, *a2, 0);
}

uint64_t sub_20F050B54(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry25FrontEndOdometryInterface4ImplC1EPS2_NSt3__110shared_ptrINS0_9analytics16CASe"
                     "ssionContextEEEPKNS0_8sem_proc16SemanticsManagerEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry25FrontEndOdometryInterface4ImplC1EPS2_NSt3__110shared_ptrINS0_9anal"
                                "ytics16CASessionContextEEEPKNS0_8sem_proc16SemanticsManagerEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry25FrontEndOdometryInterface4ImplC1EPS2_NSt3__110shared_ptrINS0_9analytics16CASessionContextEEEPKNS0_8sem_proc16SemanticsManagerEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry25FrontEndOdometryInterface4ImplC1EPS2_NSt3__110shared_ptrINS0_9analytics16CASessionContextEEEPKNS0_8sem_proc16SemanticsManagerEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F050BC0()
{
  return &unk_24C9F8140;
}

void sub_20F050BCC(void **a1, unint64_t a2)
{
  _OWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _OWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  void *v35;
  void *v36;

  v4 = a1[1];
  v5 = a1[2];
  if (0xEF7BDEF7BDEF7BDFLL * ((v5 - (_BYTE *)v4) >> 4) >= a2)
  {
    if (a2)
    {
      v11 = &v4[31 * a2];
      do
      {
        v4[29] = 0uLL;
        v4[30] = 0uLL;
        v4[27] = 0uLL;
        v4[28] = 0uLL;
        v4[25] = 0uLL;
        v4[26] = 0uLL;
        v4[23] = 0uLL;
        v4[24] = 0uLL;
        v4[21] = 0uLL;
        v4[22] = 0uLL;
        v4[19] = 0uLL;
        v4[20] = 0uLL;
        v4[17] = 0uLL;
        v4[18] = 0uLL;
        v4[15] = 0uLL;
        v4[16] = 0uLL;
        v4[13] = 0uLL;
        v4[14] = 0uLL;
        v4[11] = 0uLL;
        v4[12] = 0uLL;
        v4[9] = 0uLL;
        v4[10] = 0uLL;
        v4[7] = 0uLL;
        v4[8] = 0uLL;
        v4[5] = 0uLL;
        v4[6] = 0uLL;
        v4[3] = 0uLL;
        v4[4] = 0uLL;
        v4[1] = 0uLL;
        v4[2] = 0uLL;
        *v4 = 0uLL;
        *((_QWORD *)v4 + 2) = -1;
        *((_QWORD *)v4 + 3) = -1;
        *((_QWORD *)v4 + 1) = -1;
        *(_OWORD *)((char *)v4 + 136) = 0uLL;
        *(_OWORD *)((char *)v4 + 152) = 0uLL;
        *((_BYTE *)v4 + 168) = 0;
        v4 += 31;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0xEF7BDEF7BDEF7BDFLL * (((char *)v4 - (_BYTE *)*a1) >> 4);
    v7 = v6 + a2;
    if (v6 + a2 > 0x84210842108421)
      sub_20E867F44();
    v8 = 0xEF7BDEF7BDEF7BDFLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x42108421084210)
      v9 = 0x84210842108421;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x84210842108421)
        sub_20E877A38();
      v10 = (char *)operator new(496 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[496 * v6];
    v13 = &v12[496 * a2];
    v14 = v12;
    do
    {
      *((_OWORD *)v14 + 29) = 0uLL;
      *((_OWORD *)v14 + 30) = 0uLL;
      *((_OWORD *)v14 + 27) = 0uLL;
      *((_OWORD *)v14 + 28) = 0uLL;
      *((_OWORD *)v14 + 25) = 0uLL;
      *((_OWORD *)v14 + 26) = 0uLL;
      *((_OWORD *)v14 + 23) = 0uLL;
      *((_OWORD *)v14 + 24) = 0uLL;
      *((_OWORD *)v14 + 21) = 0uLL;
      *((_OWORD *)v14 + 22) = 0uLL;
      *((_OWORD *)v14 + 19) = 0uLL;
      *((_OWORD *)v14 + 20) = 0uLL;
      *((_OWORD *)v14 + 17) = 0uLL;
      *((_OWORD *)v14 + 18) = 0uLL;
      *((_OWORD *)v14 + 15) = 0uLL;
      *((_OWORD *)v14 + 16) = 0uLL;
      *((_OWORD *)v14 + 13) = 0uLL;
      *((_OWORD *)v14 + 14) = 0uLL;
      *((_OWORD *)v14 + 11) = 0uLL;
      *((_OWORD *)v14 + 12) = 0uLL;
      *((_OWORD *)v14 + 9) = 0uLL;
      *((_OWORD *)v14 + 10) = 0uLL;
      *((_OWORD *)v14 + 7) = 0uLL;
      *((_OWORD *)v14 + 8) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_OWORD *)v14 + 6) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_QWORD *)v14 + 2) = -1;
      *((_QWORD *)v14 + 3) = -1;
      *((_QWORD *)v14 + 1) = -1;
      *(_OWORD *)(v14 + 136) = 0uLL;
      *(_OWORD *)(v14 + 152) = 0uLL;
      v14[168] = 0;
      v14 += 496;
    }
    while (v14 != v13);
    v15 = &v10[496 * v9];
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 == *a1)
    {
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v15;
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = &v12[v18];
        v20 = &v12[v18 - 496];
        v21 = &v16[v18];
        *(_OWORD *)v20 = *(_OWORD *)&v16[v18 - 496];
        v22 = *(_OWORD *)&v16[v18 - 480];
        v23 = *(_OWORD *)&v16[v18 - 464];
        v24 = *(_OWORD *)&v16[v18 - 432];
        *((_OWORD *)v20 + 3) = *(_OWORD *)&v16[v18 - 448];
        *((_OWORD *)v20 + 4) = v24;
        *((_OWORD *)v20 + 1) = v22;
        *((_OWORD *)v20 + 2) = v23;
        v25 = *(_OWORD *)&v16[v18 - 416];
        v26 = *(_OWORD *)&v16[v18 - 400];
        v27 = *(_OWORD *)&v16[v18 - 368];
        *((_OWORD *)v20 + 7) = *(_OWORD *)&v16[v18 - 384];
        *((_OWORD *)v20 + 8) = v27;
        *((_OWORD *)v20 + 5) = v25;
        *((_OWORD *)v20 + 6) = v26;
        v28 = &v12[v18 - 352];
        v29 = (uint64_t)&v16[v18 - 352];
        *((_QWORD *)v28 + 2) = 0;
        *(_QWORD *)v28 = 0;
        *(_QWORD *)&v12[v18 - 344] = 0;
        *(_OWORD *)v28 = *(_OWORD *)v29;
        *(_QWORD *)&v12[v18 - 336] = *(_QWORD *)&v16[v18 - 336];
        *(_QWORD *)&v16[v18 - 344] = 0;
        *(_QWORD *)v29 = 0;
        *(_QWORD *)(v29 + 16) = 0;
        v30 = &v12[v18 - 328];
        *v30 = 0;
        v12[v18 - 16] = 0;
        if (v16[v18 - 16])
        {
          v31 = v21 - 328;
          *(_QWORD *)v30 = 0;
          *(_QWORD *)&v12[v18 - 320] = 0;
          *(_QWORD *)&v12[v18 - 312] = 0;
          *(_OWORD *)v30 = *(_OWORD *)(v21 - 328);
          *((_QWORD *)v19 - 39) = *((_QWORD *)v21 - 39);
          *((_QWORD *)v21 - 40) = 0;
          *(_QWORD *)v31 = 0;
          *((_QWORD *)v31 + 2) = 0;
          memcpy(v19 - 304, v21 - 304, 0x120uLL);
          *(v19 - 16) = 1;
        }
        *(v19 - 8) = *(v21 - 8);
        v18 -= 496;
      }
      while (&v16[v18] != v17);
      v16 = (char *)*a1;
      v32 = (char *)a1[1];
      *a1 = &v12[v18];
      a1[1] = v13;
      a1[2] = v15;
      if (v32 != v16)
      {
        v33 = v32 - 352;
        do
        {
          if (v33[336])
          {
            v35 = (void *)*((_QWORD *)v33 + 3);
            if (v35)
            {
              *((_QWORD *)v33 + 4) = v35;
              operator delete(v35);
            }
          }
          v36 = *(void **)v33;
          if (*(_QWORD *)v33)
          {
            *((_QWORD *)v33 + 1) = v36;
            operator delete(v36);
          }
          v34 = v33 - 144;
          v33 -= 496;
        }
        while (v34 != v16);
      }
    }
    if (v16)
      operator delete(v16);
  }
}

_QWORD *sub_20F050F4C(uint64_t a1, int *a2, _QWORD **a3)
{
  unint64_t v3;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v15;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  if (*a2 >= 0x10000
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 49, (uint64_t)"camera_id <= 0xffff", 19, (uint64_t)"Camera ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_72;
  }
  v7 = a2[1];
  if (v7 >= 0x10000)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/ComputerVisionTypes/include/VIO/ComputerVisionTypes/CameraStreamId.h", 50, (uint64_t)"stream_id <= 0xffff", 19, (uint64_t)"Stream ID cannot exceeds 16 bits", 32, (void (*)(void **))sub_21023DDB0))
    {
      v7 = a2[1];
      goto LABEL_6;
    }
LABEL_72:
    abort();
  }
LABEL_6:
  v8 = *a2;
  v9 = (unsigned __int16)v7 | ((unsigned __int16)*a2 << 16);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = (unsigned __int16)v7 | ((unsigned __int16)v8 << 16);
      if (v10 <= v9)
        v3 = v9 % v10;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v9;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v13[1];
            if (v17 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v8 && *((_DWORD *)v13 + 5) == v7)
                return v13;
            }
            else if ((v17 & (v10 - 1)) != v3)
            {
              goto LABEL_33;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_33;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v8 && *((_DWORD *)v13 + 5) == v7)
              return v13;
          }
          else
          {
            if (v15 >= v10)
              v15 %= v10;
            if (v15 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_33:
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a3;
  v13[3] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v9 = v3;
  }
  else
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_46;
    if (prime < v10)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v10)
LABEL_46:
        sub_20E8D2B3C(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v9 %= v10;
    }
    else
    {
      v9 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v28)
  {
    *v13 = *v28;
LABEL_69:
    *v28 = v13;
    goto LABEL_70;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v27 + 8 * v9) = a1 + 16;
  if (*v13)
  {
    v29 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v29 >= v10)
        v29 %= v10;
    }
    else
    {
      v29 &= v10 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20F0512B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F0512CC()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F0512E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9F8160;
  result[1] = v3;
  return result;
}

uint64_t sub_20F051314(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9F8160;
  a2[1] = v2;
  return result;
}

void sub_20F051330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v3 = *(_QWORD *)(a3 + 56);
  v4 = *(std::__shared_weak_count **)(a3 + 64);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_QWORD **)(a1 + 8);
    if (*v7)
      goto LABEL_13;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v7 = *(_QWORD **)(a1 + 8);
    if (*v7)
      return;
  }
  v9 = (std::__shared_weak_count *)v7[1];
  *v7 = v3;
  v7[1] = v4;
  if (!v9)
    goto LABEL_12;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v4)
      return;
  }
  else
  {
LABEL_12:
    if (!v4)
      return;
  }
LABEL_13:
  v12 = (unint64_t *)&v4->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t sub_20F051410(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry25FrontEndOdometryInterface27UpdateReinitStatusTelemetryERKNS0_26Reinitializati"
                     "onLogicStateEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry25FrontEndOdometryInterface27UpdateReinitStatusTelemetryERKNS0_26Rei"
                                "nitializationLogicStateEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry25FrontEndOdometryInterface27UpdateReinitStatusTelemetryERKNS0_26ReinitializationLogicStateEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry25FrontEndOdometryInterface27UpdateReinitStatusTelemetryERKNS0_26ReinitializationLogicStateEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F05147C()
{
  return &unk_24C9F81C0;
}

void sub_20F05148C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F0514A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9F81E0;
  result[1] = v3;
  return result;
}

uint64_t sub_20F0514D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9F81E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_20F0514F0(uint64_t result, unsigned __int8 *a2, _BYTE *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  _BOOL4 v9;
  _BOOL4 v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  char v39;
  double v40;
  char v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  float64_t v48;
  float64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  char *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  char *v67;
  char *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  char v97[104];
  float64x2_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char v106;
  char v107;
  void *__p;
  char *v109;
  uint64_t v110;
  void *v111;
  char *v112;
  uint64_t v113;
  void *v114;
  char *v115;
  char *v116;
  float64x2_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(result + 8);
  v6 = *a2;
  v7 = *a3;
  v9 = v6 == 1 && v7 == 2;
  v10 = v7 == 1 && v6 == 2;
  v11 = *a3;
  if (*a3)
    v12 = 0;
  else
    v12 = v6 == 2;
  if (!v9 && !v10 && !v12 && v6 != v7)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1060, (uint64_t)"transition_from_from_vision_only_and_vio_init_to_vio || transition_from_vio_to_vision_only_and_vio_init || transition_from_vio_to_vision_only || no_transition", 158, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((result & 1) != 0)
      goto LABEL_46;
    v11 = *a3;
  }
  v96 = a2;
  if (!*(_BYTE *)(*(_QWORD *)(v5 + 168) + 6664))
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1485, (uint64_t)"this_->config().adaptive_vio_logic_config.enable_adaptive_vio", 61, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_46;
  }
  if (v11 == 2)
    v13 = v5 + 1712;
  else
    v13 = v5 + 12464;
  *(_QWORD *)(v5 + 23216) = v13;
  if (v9)
  {
    sub_20F155C98(v5 + 12464, v5 + 1712);
    sub_20F155934(v5 + 12464, v5 + 1712, &v117);
    sub_20F12D510(v5 + 12464, 1, 1);
    *(_WORD *)(*(_QWORD *)(v5 + 17312) + 2544) = 258;
    *(_WORD *)(*(_QWORD *)(v5 + 6560) + 2544) = 258;
    sub_20F40649C(*(_QWORD *)(v5 + 160));
    *(_BYTE *)(v5 + 1184) = 0;
    *(_BYTE *)(v5 + 1200) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 168) + 160))(*(_QWORD *)(v5 + 168));
    v14 = *(_QWORD *)(v5 + 168);
    v102 = v121;
    v103 = v122;
    v104 = v123;
    v105 = v124;
    v98 = v117;
    v99 = v118;
    v100 = v119;
    v101 = v120;
    v106 = 1;
    v15 = *(_QWORD *)(v14 + 7336);
    if (v15)
      return (*(uint64_t (**)(uint64_t, unsigned __int8 *, _BYTE *, float64x2_t *))(*(_QWORD *)v15 + 48))(v15, a2, a3, &v98);
LABEL_148:
    sub_20E86D37C();
  }
  if (!v10)
  {
    v39 = v6 == v7 || v12;
    if ((v39 & 1) != 0)
      return result;
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1128, (uint64_t)"no_transition", 13, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if (!(_DWORD)result)
      return result;
    goto LABEL_46;
  }
  if (v11 == 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 1099, (uint64_t)"&vfusion() == &VisionOnlyVFusion()", 34, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_46;
  }
  *(_BYTE *)(v5 + 1184) = 0;
  *(_BYTE *)(v5 + 1200) = 0;
  v16 = *(_QWORD *)(v5 + 1216);
  if (v16)
  {
    for (i = 0; i != v16; ++i)
      *(_QWORD *)(*(_QWORD *)(v5 + 1208) + 8 * i) = 0;
    v18 = *(_QWORD **)(v5 + 1224);
    *(_QWORD *)(v5 + 1232) = 0;
    *(_QWORD *)(v5 + 1224) = 0;
    if (v18)
    {
      do
      {
        v19 = (_QWORD *)*v18;
        operator delete(v18);
        v18 = v19;
      }
      while (v19);
    }
  }
  *(_WORD *)(*(_QWORD *)(v5 + 17312) + 2544) = 257;
  sub_20F13CCC8(*(_QWORD *)(v5 + 23216), (_QWORD *)(v5 + 6536));
  v20 = *(_QWORD **)(v5 + 23216);
  v21 = v20[66];
  v22 = *(_QWORD *)(v5 + 6576);
  v23 = (uint64_t)(*(_QWORD *)(v22 + 2488) - *(_QWORD *)(v22 + 2480)) >> 2;
  if (v23 < v21)
    goto LABEL_141;
  v24 = v23 - v21;
  v25 = *(_QWORD *)(v22 + 2280) + 168 * (v23 - v21 + 1);
  v26 = *(_OWORD *)(v25 + 144);
  v125 = *(_OWORD *)(v25 + 128);
  v126 = v26;
  v127 = *(_QWORD *)(v25 + 160);
  v27 = *(_OWORD *)(v25 + 80);
  v121 = *(_OWORD *)(v25 + 64);
  v122 = v27;
  v28 = *(_OWORD *)(v25 + 112);
  v123 = *(_OWORD *)(v25 + 96);
  v124 = v28;
  v29 = *(_OWORD *)(v25 + 16);
  v117 = *(float64x2_t *)v25;
  v118 = v29;
  v30 = *(_OWORD *)(v25 + 48);
  v119 = *(_OWORD *)(v25 + 32);
  v120 = v30;
  if ((*(_DWORD *)(v20[608] + 2276) & 0xFFFFFFFE) == 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/VFusionFG.cpp", 2050, (uint64_t)"!filter_->IsInitialized()", 25, (uint64_t)"We can only set the prior state if the filter is not initialized yet", 68, (void (*)(void **))sub_21023DDB0))
  {
LABEL_46:
    abort();
  }
  v31 = v20[607];
  v32 = v123;
  *(_OWORD *)(v31 + 2576) = v124;
  v33 = v126;
  *(_OWORD *)(v31 + 2592) = v125;
  *(_OWORD *)(v31 + 2608) = v33;
  v34 = v119;
  *(_OWORD *)(v31 + 2512) = v120;
  v35 = v122;
  *(_OWORD *)(v31 + 2528) = v121;
  *(_OWORD *)(v31 + 2544) = v35;
  *(_OWORD *)(v31 + 2560) = v32;
  v36 = v118;
  *(float64x2_t *)(v31 + 2464) = v117;
  *(_OWORD *)(v31 + 2480) = v36;
  v37 = *(unsigned __int8 *)(v31 + 2632);
  *(_QWORD *)(v31 + 2624) = v127;
  *(_OWORD *)(v31 + 2496) = v34;
  if (!v37)
  {
    *(_BYTE *)(v31 + 2632) = 1;
    v38 = v24;
    if (v23 <= v24)
      goto LABEL_138;
LABEL_48:
    v40 = 0.0;
    v41 = 1;
    do
    {
      v42 = *(_QWORD *)(v5 + 6576);
      v43 = *(double *)(*(_QWORD *)(v42 + 2504) + 8 * v38);
      v44 = *(_QWORD *)(v5 + 40);
      if (v44)
      {
        v45 = *(_DWORD *)(*(_QWORD *)(v42 + 2480) + 4 * v38);
        v46 = *(_QWORD *)(v5 + 24);
        while (1)
        {
          v47 = *(_QWORD *)(*(_QWORD *)v5 + 16 * (v46 % ((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 4)));
          if (*(_DWORD *)(v47 + 48) == v45)
            break;
          ++v46;
          if (!--v44)
            goto LABEL_54;
        }
      }
      else
      {
LABEL_54:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 813, (uint64_t)"opt_ref_camera_set_features", 27, (uint64_t)"The camera set features must exist for the already estimated state", 66, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v47 = 0;
      }
      if ((v41 & 1) != 0)
      {
        v48 = 0.0;
        v49 = 0.0;
      }
      else
      {
        v98 = 0uLL;
        *(_QWORD *)&v99 = 0;
        sub_20FD33470((_QWORD *)(*(_QWORD *)(v5 + 6576) + 8056), (uint64_t)&v98, v40, v43);
        v48 = v98.f64[1];
        v49 = v98.f64[0];
      }
      v50 = *(_QWORD *)(v5 + 23216);
      v111 = 0;
      v112 = 0;
      v113 = 0;
      sub_20EE65E28((uint64_t)&v111, *(_QWORD *)v47, *(_QWORD *)(v47 + 8), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v47 + 8) - *(_QWORD *)v47) >> 3));
      v114 = 0;
      v115 = 0;
      v116 = 0;
      v51 = *(_QWORD *)&v48 - *(_QWORD *)&v49;
      if (*(_QWORD *)&v48 != *(_QWORD *)&v49)
      {
        v52 = 0x6DB6DB6DB6DB6DB7 * (v51 >> 3);
        if (v52 >= 0x492492492492493)
          sub_20EABADD4();
        v53 = (char *)operator new(v51);
        v54 = 0;
        v114 = v53;
        v115 = v53;
        v116 = &v53[56 * v52];
        do
        {
          v55 = (char *)(*(_QWORD *)&v49 + v54);
          v56 = &v53[v54];
          *(_QWORD *)v56 = *(_QWORD *)(*(_QWORD *)&v49 + v54);
          v57 = *(_OWORD *)(*(_QWORD *)&v49 + v54 + 8);
          *((_QWORD *)v56 + 3) = *(_QWORD *)(*(_QWORD *)&v49 + v54 + 24);
          *(_OWORD *)(v56 + 8) = v57;
          v58 = *(_OWORD *)(*(_QWORD *)&v49 + v54 + 32);
          *((_QWORD *)v56 + 6) = *(_QWORD *)(*(_QWORD *)&v49 + v54 + 48);
          *((_OWORD *)v56 + 2) = v58;
          v54 += 56;
        }
        while (v55 + 56 != *(char **)&v48);
        v115 = &v53[v54];
      }
      __p = 0;
      v109 = 0;
      v110 = 0;
      LOBYTE(v98.f64[0]) = 0;
      v107 = 0;
      sub_20F130780(v50, (uint64_t)&v111, (uint64_t)v97);
      v59 = (char *)__p;
      if (__p)
      {
        v60 = v109;
        v61 = __p;
        if (v109 != __p)
        {
          do
          {
            v62 = (void *)*((_QWORD *)v60 - 3);
            if (v62)
            {
              *((_QWORD *)v60 - 2) = v62;
              operator delete(v62);
            }
            v63 = (void *)*((_QWORD *)v60 - 6);
            if (v63)
            {
              *((_QWORD *)v60 - 5) = v63;
              operator delete(v63);
            }
            v64 = (void *)*((_QWORD *)v60 - 9);
            if (v64)
            {
              *((_QWORD *)v60 - 8) = v64;
              operator delete(v64);
            }
            v65 = (void *)*((_QWORD *)v60 - 12);
            if (v65)
            {
              *((_QWORD *)v60 - 11) = v65;
              operator delete(v65);
            }
            v66 = (void *)*((_QWORD *)v60 - 15);
            if (v66)
            {
              *((_QWORD *)v60 - 14) = v66;
              operator delete(v66);
            }
            sub_20E990FD8((void **)v60 - 27);
            v60 -= 240;
          }
          while (v60 != v59);
          v61 = __p;
        }
        v109 = v59;
        operator delete(v61);
      }
      if (v114)
      {
        v115 = (char *)v114;
        operator delete(v114);
      }
      v67 = (char *)v111;
      if (v111)
      {
        v68 = v112;
        v69 = v111;
        if (v112 != v111)
        {
          do
          {
            v71 = (void *)*((_QWORD *)v68 - 3);
            if (v71)
            {
              *((_QWORD *)v68 - 2) = v71;
              operator delete(v71);
            }
            v72 = (void *)*((_QWORD *)v68 - 6);
            if (v72)
            {
              *((_QWORD *)v68 - 5) = v72;
              operator delete(v72);
            }
            v73 = (void *)*((_QWORD *)v68 - 9);
            if (v73)
            {
              *((_QWORD *)v68 - 8) = v73;
              operator delete(v73);
            }
            v74 = *((_QWORD *)v68 - 12);
            if (v74)
            {
              v75 = *((_QWORD *)v68 - 11);
              v70 = (void *)*((_QWORD *)v68 - 12);
              if (v75 != v74)
              {
                v76 = v75 - 208;
                do
                {
                  v78 = *(void **)(v76 + 184);
                  if (v78)
                  {
                    *(_QWORD *)(v76 + 192) = v78;
                    operator delete(v78);
                  }
                  v79 = *(void **)(v76 + 160);
                  if (v79)
                  {
                    *(_QWORD *)(v76 + 168) = v79;
                    operator delete(v79);
                  }
                  if (*(_BYTE *)(v76 + 152))
                  {
                    v80 = *(void **)(v76 + 128);
                    if (v80)
                    {
                      *(_QWORD *)(v76 + 136) = v80;
                      operator delete(v80);
                    }
                  }
                  v81 = *(void **)(v76 + 104);
                  if (v81)
                  {
                    *(_QWORD *)(v76 + 112) = v81;
                    operator delete(v81);
                  }
                  if (*(_BYTE *)(v76 + 96))
                  {
                    v82 = *(void **)(v76 + 72);
                    if (v82)
                    {
                      *(_QWORD *)(v76 + 80) = v82;
                      operator delete(v82);
                    }
                  }
                  v83 = *(void **)(v76 + 48);
                  if (v83)
                  {
                    *(_QWORD *)(v76 + 56) = v83;
                    operator delete(v83);
                  }
                  v84 = *(void **)(v76 + 24);
                  if (v84)
                  {
                    *(_QWORD *)(v76 + 32) = v84;
                    operator delete(v84);
                  }
                  v85 = *(void **)v76;
                  if (*(_QWORD *)v76)
                  {
                    *(_QWORD *)(v76 + 8) = v85;
                    operator delete(v85);
                  }
                  v86 = *(void **)(v76 - 24);
                  if (v86)
                  {
                    *(_QWORD *)(v76 - 16) = v86;
                    operator delete(v86);
                  }
                  v87 = *(void **)(v76 - 48);
                  if (v87)
                  {
                    *(_QWORD *)(v76 - 40) = v87;
                    operator delete(v87);
                  }
                  if (*(_BYTE *)(v76 - 56))
                  {
                    v88 = *(void **)(v76 - 80);
                    if (v88)
                    {
                      *(_QWORD *)(v76 - 72) = v88;
                      operator delete(v88);
                    }
                  }
                  v89 = *(void **)(v76 - 104);
                  if (v89)
                  {
                    *(_QWORD *)(v76 - 96) = v89;
                    operator delete(v89);
                  }
                  if (*(_BYTE *)(v76 - 112))
                  {
                    v90 = *(void **)(v76 - 136);
                    if (v90)
                    {
                      *(_QWORD *)(v76 - 128) = v90;
                      operator delete(v90);
                    }
                  }
                  v91 = *(void **)(v76 - 160);
                  if (v91)
                  {
                    *(_QWORD *)(v76 - 152) = v91;
                    operator delete(v91);
                  }
                  v92 = *(void **)(v76 - 184);
                  if (v92)
                  {
                    *(_QWORD *)(v76 - 176) = v92;
                    operator delete(v92);
                  }
                  v93 = *(void **)(v76 - 208);
                  if (v93)
                  {
                    *(_QWORD *)(v76 - 200) = v93;
                    operator delete(v93);
                  }
                  v77 = v76 - 232;
                  v76 -= 440;
                }
                while (v77 != v74);
                v70 = (void *)*((_QWORD *)v68 - 12);
              }
              *((_QWORD *)v68 - 11) = v74;
              operator delete(v70);
            }
            v68 -= 104;
          }
          while (v68 != v67);
          v69 = v111;
        }
        v112 = v67;
        operator delete(v69);
      }
      if (v49 != 0.0)
        operator delete(*(void **)&v49);
      v41 = 0;
      v38 = ++v24;
      v40 = v43;
    }
    while (v23 > v24);
    goto LABEL_138;
  }
  v38 = v24;
  if (v23 > v24)
    goto LABEL_48;
LABEL_138:
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 23216) + 4864) + 2276) & 0xFFFFFFFE) == 2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Odometry/src/FrontEndOdometryInterface.cpp", 827, (uint64_t)"!vfusion().IsInitialized()", 26, (uint64_t)"Filter must not be initialized yet", 34, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v22 = *(_QWORD *)(v5 + 6576);
LABEL_141:
  if ((*(_DWORD *)(v22 + 2276) & 0xFFFFFFFE) == 2)
    sub_20F10E818(*(_QWORD *)(v5 + 136));
  *(_WORD *)(*(_QWORD *)(v5 + 6560) + 2544) = 257;
  v94 = *(_QWORD *)(v5 + 168);
  LOBYTE(v98.f64[0]) = 0;
  v106 = 0;
  v95 = *(_QWORD *)(v94 + 7336);
  if (!v95)
    goto LABEL_148;
  return (*(uint64_t (**)(uint64_t, unsigned __int8 *, _BYTE *, float64x2_t *))(*(_QWORD *)v95 + 48))(v95, v96, a3, &v98);
}

void sub_20F051E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F051EB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio8odometry25FrontEndOdometryInterface4Impl27SetAdaptiveVIOLogicCallbackEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio8odometry25FrontEndOdometryInterface4Impl27SetAdaptiveVIOLogicCallbackEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio8odometry25FrontEndOdometryInterface4Impl27SetAdaptiveVIOLogicCallbackEvE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio8odometry25FrontEndOdometryInterface4Impl27SetAdaptiveVIOLogicCallbackEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F051F20()
{
  return &unk_24C9F8250;
}

void sub_20F051F2C(std::mutex *a1, uint64_t a2)
{
  _QWORD *sig;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v6 = (char *)sig[2];
    v5 = sig[3];
    if ((unint64_t)v6 < v5)
    {
      *(_QWORD *)v6 = a2;
      v7 = (uint64_t)(v6 + 8);
LABEL_50:
      sig[2] = v7;
      std::mutex::unlock(a1);
      return;
    }
    v12 = (char *)sig[1];
    v13 = (v6 - v12) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      sub_20E867F44();
    v15 = v5 - (_QWORD)v12;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        sub_20E877A38();
      v17 = (char *)operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *(_QWORD *)v18 = a2;
      v7 = (uint64_t)(v18 + 8);
      v20 = (char *)(v6 - v12);
      if (v6 != v12)
        goto LABEL_23;
    }
    else
    {
      v17 = 0;
      v18 = (char *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = a2;
      v7 = 8 * v13 + 8;
      v20 = (char *)(v6 - v12);
      if (v6 != v12)
      {
LABEL_23:
        v21 = (unint64_t)(v20 - 8);
        if (v21 < 0x78)
          goto LABEL_56;
        if (&v6[-(v21 & 0xFFFFFFFFFFFFFFF8) - 8] < v18 && &v17[v6 - v12 - (v21 & 0xFFFFFFFFFFFFFFF8) - 8] < v6)
          goto LABEL_56;
        v23 = (v21 >> 3) + 1;
        v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
        v18 -= v24;
        v25 = &v6[-v24];
        v26 = v6 - 16;
        v27 = &v17[8 * v13 - 16];
        v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *((_OWORD *)v26 - 1);
          v29 = *(_OWORD *)v26;
          *((_OWORD *)v26 - 1) = 0uLL;
          *(_OWORD *)v26 = 0uLL;
          *((_OWORD *)v27 - 1) = v30;
          *(_OWORD *)v27 = v29;
          v26 -= 32;
          v27 -= 32;
          v28 -= 4;
        }
        while (v28);
        v6 = v25;
        if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_56:
          do
          {
            v31 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v18 - 1) = v31;
            v18 -= 8;
          }
          while (v6 != v12);
        }
        v6 = (char *)sig[1];
        v32 = (char *)sig[2];
        sig[1] = v18;
        sig[2] = v7;
        sig[3] = v19;
        while (v32 != v6)
        {
          v34 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          v33 = v34;
          *(_QWORD *)v32 = 0;
          if (v34)
          {
            v35 = *(void **)(v33 + 224);
            if (v35)
            {
              *(_QWORD *)(v33 + 232) = v35;
              operator delete(v35);
            }
            v36 = *(void **)(v33 + 200);
            if (v36)
            {
              *(_QWORD *)(v33 + 208) = v36;
              operator delete(v36);
            }
            v37 = *(void **)(v33 + 24);
            if (v37)
            {
              *(_QWORD *)(v33 + 32) = v37;
              operator delete(v37);
            }
            v38 = *(void **)v33;
            if (*(_QWORD *)v33)
            {
              *(_QWORD *)(v33 + 8) = v38;
              operator delete(v38);
            }
            MEMORY[0x212BC6398](v33, 0x1020C403E7E2BD4);
          }
        }
        goto LABEL_48;
      }
    }
    sig[1] = v18;
    sig[2] = v7;
    sig[3] = v19;
LABEL_48:
    if (v6)
      operator delete(v6);
    goto LABEL_50;
  }
  std::mutex::unlock(a1);
  if (a2)
  {
    v8 = *(void **)(a2 + 224);
    if (v8)
    {
      *(_QWORD *)(a2 + 232) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(a2 + 200);
    if (v9)
    {
      *(_QWORD *)(a2 + 208) = v9;
      operator delete(v9);
    }
    v10 = *(void **)(a2 + 24);
    if (v10)
    {
      *(_QWORD *)(a2 + 32) = v10;
      operator delete(v10);
    }
    v11 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v11;
      operator delete(v11);
    }
    JUMPOUT(0x212BC6398);
  }
}

void sub_20F0521DC(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (!v2)
  {
LABEL_8:
    std::mutex::unlock(v1);
    _Unwind_Resume(a1);
  }
  v4 = *(void **)(v2 + 224);
  if (v4)
  {
    *(_QWORD *)(v2 + 232) = v4;
    operator delete(v4);
    v5 = *(void **)(v2 + 200);
    if (!v5)
    {
LABEL_4:
      v6 = *(void **)(v2 + 24);
      if (!v6)
        goto LABEL_5;
      goto LABEL_11;
    }
  }
  else
  {
    v5 = *(void **)(v2 + 200);
    if (!v5)
      goto LABEL_4;
  }
  *(_QWORD *)(v2 + 208) = v5;
  operator delete(v5);
  v6 = *(void **)(v2 + 24);
  if (!v6)
  {
LABEL_5:
    v7 = *(void **)v2;
    if (!*(_QWORD *)v2)
    {
LABEL_7:
      MEMORY[0x212BC6398](v2, 0x1020C403E7E2BD4);
      goto LABEL_8;
    }
LABEL_6:
    *(_QWORD *)(v2 + 8) = v7;
    operator delete(v7);
    goto LABEL_7;
  }
LABEL_11:
  *(_QWORD *)(v2 + 32) = v6;
  operator delete(v6);
  v7 = *(void **)v2;
  if (!*(_QWORD *)v2)
    goto LABEL_7;
  goto LABEL_6;
}

void sub_20F052268(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F8270;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_20F0522DC(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F8270;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x212BC6398);
}

void sub_20F052354(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_20F051F2C(*(std::mutex **)(a1 + 32), *(_QWORD *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_20F0523BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS_3vio24MappingInputFromFrontEndENS1_18AutoReturningMakeTIS4_NS1_21P"
                     "oolObjectInitializerIS4_EENS1_23PoolObjectDeinitializerIS4_EEEENSt3__110shared_ptrIS4_EENS1_19Objec"
                     "tBorrowingPoolINSB_10unique_ptrIS4_NSB_14default_deleteIS4_EEEESA_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS_3vio24MappingInputFromFrontEndENS1_18AutoReturningMakeT"
                                "IS4_NS1_21PoolObjectInitializerIS4_EENS1_23PoolObjectDeinitializerIS4_EEEENSt3__110share"
                                "d_ptrIS4_EENS1_19ObjectBorrowingPoolINSB_10unique_ptrIS4_NSB_14default_deleteIS4_EEEESA_"
                                "EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS_3vio24MappingInputFromFrontEndENS1_18AutoReturningMakeTIS4_NS1_21PoolObjectInitializerIS4_EENS1_23PoolObjectDeinitializerIS4_EEEENSt3__110shared_ptrIS4_EENS1_19ObjectBorrowingPoolINSB_10unique_ptrIS4_NSB_14default_deleteIS4_EEEESA_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS_3vio24MappingInputFromFrontEndENS1_18AutoReturningMakeTIS4_NS1_21PoolObjectInitializerIS4_EENS1_23PoolObjectDeinitializerIS4_EEEENSt3__110shared_ptrIS4_EENS1_19ObjectBorrowingPoolINSB_10unique_ptrIS4_NSB_14default_deleteIS4_EEEESA_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

char *sub_20F05242C(void **a1, _BYTE *a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  int64_t v41;
  char *v42;
  size_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;

  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 3;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    v11 = *a3;
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = v11;
      a1[1] = v9 + 8;
      return v9;
    }
    v12 = v5 - (_QWORD)(v9 + 8);
    v13 = v12 >> 3;
    v14 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v18 = a1[1];
    }
    else
    {
      v15 = (v7 & 0xFFFFFFFFFFFFFFF8) + v12;
      v16 = v15 + v6 + 8;
      if (v5 > v16)
        v16 = (unint64_t)a1[1];
      v17 = v16 + ~v6 - v15;
      if (v17 >= 0x58)
      {
        v18 = a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          v46 = (v17 >> 3) + 1;
          v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
          v14 = (uint64_t *)((char *)v14 + v47);
          v18 = (_QWORD *)(v5 + v47);
          v48 = (_OWORD *)(v5 + 16);
          v49 = (__int128 *)(8 * v13 + 8 * v8 + v6 + 16);
          v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v51 = *v49;
            *(v48 - 1) = *(v49 - 1);
            *v48 = v51;
            v48 += 2;
            v49 += 2;
            v50 -= 4;
          }
          while (v50);
          if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_49;
        }
      }
      else
      {
        v18 = a1[1];
      }
      do
      {
        v52 = *v14++;
        *v18++ = v52;
      }
      while ((unint64_t)v14 < v5);
    }
LABEL_49:
    a1[1] = v18;
    if ((char *)v5 != v9 + 8)
      memmove((void *)(v5 - 8 * v13), v9, v12);
    *(_QWORD *)v9 = v11;
    return v9;
  }
  v19 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v19 >> 61)
    sub_20E867F44();
  v21 = v10 - v6;
  if (v21 >> 2 > v19)
    v19 = v21 >> 2;
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
    v22 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v22 = v19;
  if (v22)
  {
    if (v22 >> 61)
      sub_20E877A38();
    v23 = (char *)operator new(8 * v22);
    v24 = &v23[8 * v8];
    v25 = &v23[8 * v22];
    if (v8 != v22)
      goto LABEL_24;
  }
  else
  {
    v23 = 0;
    v24 = (char *)(8 * v8);
    v25 = 0;
    if (v8)
      goto LABEL_24;
  }
  if (v7 < 1)
  {
    if ((_BYTE *)v6 == a2)
      v45 = 1;
    else
      v45 = v7 >> 2;
    if (v45 >> 61)
      sub_20E877A38();
    v24 = (char *)operator new(8 * v45);
    v25 = &v24[8 * v45];
    if (v23)
    {
      operator delete(v23);
      v25 = &v24[8 * v45];
      v27 = (char *)*a1;
      *(_QWORD *)v24 = *a3;
      v28 = v24 + 8;
      v29 = v24;
      if (v27 != v9)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
  else
  {
    v26 = v8 + 2;
    if (v8 >= -1)
      v26 = v8 + 1;
    v24 -= 8 * (v26 >> 1);
  }
LABEL_24:
  v27 = (char *)v6;
  *(_QWORD *)v24 = *a3;
  v28 = v24 + 8;
  v29 = v24;
  if ((char *)v6 != v9)
  {
LABEL_25:
    v30 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v31 = v30 - v27 - 8;
    v32 = v9;
    v29 = v24;
    if (v31 < 0x58)
      goto LABEL_58;
    v32 = v9;
    v29 = v24;
    if ((unint64_t)(v30 - v24) < 0x20)
      goto LABEL_58;
    v33 = (v31 >> 3) + 1;
    v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
    v32 = &v9[-v34];
    v29 = &v24[-v34];
    v35 = v24 - 16;
    v36 = (__int128 *)(v6 + 8 * v8 - 16);
    v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *v36;
      *((_OWORD *)v35 - 1) = *(v36 - 1);
      *(_OWORD *)v35 = v38;
      v35 -= 32;
      v36 -= 2;
      v37 -= 4;
    }
    while (v37);
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v39 = *((_QWORD *)v32 - 1);
        v32 -= 8;
        *((_QWORD *)v29 - 1) = v39;
        v29 -= 8;
      }
      while (v32 != v27);
    }
  }
LABEL_31:
  v40 = (char *)a1[1];
  v41 = v40 - v9;
  if (v40 != v9)
  {
    v42 = v9;
    v43 = v40 - v9;
    v44 = v25;
    memmove(v28, v42, v43);
    v25 = v44;
    v27 = (char *)*a1;
  }
  *a1 = v29;
  a1[1] = &v28[v41];
  a1[2] = v25;
  if (v27)
    operator delete(v27);
  return v24;
}

void sub_20F052788(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

char *sub_20F0527A0(char **a1, char *__src, _OWORD *a3)
{
  char *v4;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  char *v27;
  int64_t v28;
  char *v29;
  __int128 v31;

  v4 = __src;
  v6 = a1[1];
  v7 = (unint64_t)a1[2];
  if ((unint64_t)v6 < v7)
  {
    if (__src == v6)
    {
      *(_OWORD *)__src = *a3;
      a1[1] = __src + 16;
    }
    else
    {
      v31 = *a3;
      v8 = __src + 16;
      v9 = v6 - 16;
      v10 = a1[1];
      if ((unint64_t)v6 >= 0x10)
      {
        do
        {
          v11 = *(_OWORD *)v9;
          v9 += 16;
          *(_OWORD *)v10 = v11;
          v10 += 16;
        }
        while (v9 < v6);
      }
      a1[1] = v10;
      if (v6 != v8)
        memmove(&v6[-16 * ((v6 - v8) >> 4)], __src, v6 - v8 - 4);
      *(_QWORD *)v4 = v31;
      *((_DWORD *)v4 + 2) = DWORD2(v31);
    }
    return v4;
  }
  v12 = *a1;
  v13 = ((v6 - *a1) >> 4) + 1;
  if (v13 >> 60)
    sub_20E867F44();
  v14 = v7 - (_QWORD)v12;
  if (v14 >> 3 > v13)
    v13 = v14 >> 3;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
    v15 = 0xFFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 60)
      sub_20E877A38();
    v16 = (char *)operator new(16 * v15);
    v17 = v4 - v12;
    v18 = (v4 - v12) >> 4;
    v19 = &v16[16 * v18];
    v20 = &v16[16 * v15];
    if (v18 != v15)
      goto LABEL_31;
    goto LABEL_20;
  }
  v16 = 0;
  v17 = __src - v12;
  v18 = (__src - v12) >> 4;
  v19 = (char *)(16 * v18);
  v20 = 0;
  if (!v18)
  {
LABEL_20:
    if (v17 < 1)
    {
      if (v12 == v4)
        v22 = 1;
      else
        v22 = v17 >> 3;
      if (v22 >> 60)
        sub_20E877A38();
      v19 = (char *)operator new(16 * v22);
      v20 = &v19[16 * v22];
      if (v16)
      {
        operator delete(v16);
        v12 = *a1;
      }
    }
    else
    {
      if (v18 >= -1)
        v21 = v18 + 1;
      else
        v21 = v18 + 2;
      v19 -= 16 * (v21 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v19 = *a3;
  v23 = v19;
  if (v12 != v4)
  {
    v24 = v4;
    v23 = v19;
    do
    {
      v25 = *((_QWORD *)v24 - 2);
      v24 -= 16;
      v26 = *((_DWORD *)v24 + 2);
      *((_QWORD *)v23 - 2) = v25;
      v23 -= 16;
      *((_DWORD *)v23 + 2) = v26;
    }
    while (v24 != v12);
  }
  v27 = a1[1];
  v28 = v27 - v4;
  if (v27 != v4)
    memmove(v19 + 16, v4, v28 - 4);
  v29 = *a1;
  *a1 = v23;
  a1[1] = &v19[v28 + 16];
  a1[2] = v20;
  if (v29)
    operator delete(v29);
  return v19;
}

void sub_20F0529D4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F0529EC(uint64_t *a1, _DWORD *a2, uint64_t *a3)
{
  char *v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  char *v53;
  void *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char *i;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  void *v80;

  v4 = (char *)a2;
  v7 = (char *)*a1;
  v6 = a1[1];
  v8 = (uint64_t)a2 - *a1;
  v9 = 0x86BCA1AF286BCA1BLL * (v8 >> 3);
  v10 = a1[2];
  if (v6 >= v10)
  {
    v21 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v6 - (_QWORD)v7) >> 3) + 1;
    if (v21 > 0x1AF286BCA1AF286)
      sub_20E867F44();
    v22 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v10 - (_QWORD)v7) >> 3);
    if (2 * v22 > v21)
      v21 = 2 * v22;
    if (v22 >= 0xD79435E50D7943)
      v23 = 0x1AF286BCA1AF286;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 > 0x1AF286BCA1AF286)
        sub_20E877A38();
      v24 = (char *)operator new(152 * v23);
      v25 = (uint64_t)&v24[8 * (v8 >> 3)];
      v26 = &v24[152 * v23];
      if (v9 != v23)
        goto LABEL_35;
    }
    else
    {
      v24 = 0;
      v25 = 8 * (v8 >> 3);
      v26 = 0;
      if (v9)
      {
LABEL_35:
        *(_OWORD *)v25 = *(_OWORD *)a3;
        v56 = *((_OWORD *)a3 + 8);
        v58 = *((_OWORD *)a3 + 5);
        v57 = *((_OWORD *)a3 + 6);
        *(_OWORD *)(v25 + 112) = *((_OWORD *)a3 + 7);
        *(_OWORD *)(v25 + 128) = v56;
        *(_OWORD *)(v25 + 80) = v58;
        *(_OWORD *)(v25 + 96) = v57;
        v59 = *((_OWORD *)a3 + 1);
        v60 = *((_OWORD *)a3 + 2);
        v61 = *((_OWORD *)a3 + 4);
        *(_OWORD *)(v25 + 48) = *((_OWORD *)a3 + 3);
        *(_OWORD *)(v25 + 64) = v61;
        *(_OWORD *)(v25 + 16) = v59;
        *(_OWORD *)(v25 + 32) = v60;
        *(_DWORD *)(v25 + 144) = *((_DWORD *)a3 + 36);
        v62 = v25 + 152;
        v63 = (char *)*a1;
        v64 = v25;
        if ((char *)*a1 != v4)
        {
          v65 = v4;
          v66 = v25;
          do
          {
            v64 = v66 - 152;
            *(_OWORD *)(v66 - 152) = *(_OWORD *)(v65 - 152);
            v67 = *(_OWORD *)(v65 - 56);
            v68 = *(_OWORD *)(v65 - 40);
            v69 = *(_OWORD *)(v65 - 24);
            *(_OWORD *)(v66 - 72) = *(_OWORD *)(v65 - 72);
            *(_OWORD *)(v66 - 24) = v69;
            *(_OWORD *)(v66 - 40) = v68;
            *(_OWORD *)(v66 - 56) = v67;
            v70 = *(_OWORD *)(v65 - 136);
            v71 = *(_OWORD *)(v65 - 120);
            v72 = *(_OWORD *)(v65 - 104);
            *(_OWORD *)(v66 - 88) = *(_OWORD *)(v65 - 88);
            *(_OWORD *)(v66 - 104) = v72;
            *(_OWORD *)(v66 - 120) = v71;
            *(_OWORD *)(v66 - 136) = v70;
            *(_DWORD *)(v66 - 8) = *((_DWORD *)v65 - 2);
            v65 -= 152;
            v66 -= 152;
          }
          while (v65 != v63);
        }
        for (i = (char *)a1[1]; v4 != i; v4 += 152)
        {
          *(_OWORD *)v62 = *(_OWORD *)v4;
          v74 = *((_OWORD *)v4 + 8);
          v76 = *((_OWORD *)v4 + 5);
          v75 = *((_OWORD *)v4 + 6);
          *(_OWORD *)(v62 + 112) = *((_OWORD *)v4 + 7);
          *(_OWORD *)(v62 + 128) = v74;
          *(_OWORD *)(v62 + 80) = v76;
          *(_OWORD *)(v62 + 96) = v75;
          v77 = *((_OWORD *)v4 + 1);
          v78 = *((_OWORD *)v4 + 2);
          v79 = *((_OWORD *)v4 + 4);
          *(_OWORD *)(v62 + 48) = *((_OWORD *)v4 + 3);
          *(_OWORD *)(v62 + 64) = v79;
          *(_OWORD *)(v62 + 16) = v77;
          *(_OWORD *)(v62 + 32) = v78;
          *(_DWORD *)(v62 + 144) = *((_DWORD *)v4 + 36);
          v62 += 152;
        }
        v80 = (void *)*a1;
        *a1 = v64;
        a1[1] = v62;
        a1[2] = (uint64_t)v26;
        if (v80)
          operator delete(v80);
        return v25;
      }
    }
    if (v8 < 1)
    {
      if (v7 == v4)
        v52 = 1;
      else
        v52 = 0xD79435E50D79436 * (v8 >> 3);
      if (v52 > 0x1AF286BCA1AF286)
        sub_20E877A38();
      v53 = (char *)operator new(152 * v52);
      v25 = (uint64_t)&v53[152 * (v52 >> 2)];
      v26 = &v53[152 * v52];
      if (v24)
      {
        v54 = v24;
        v55 = v26;
        operator delete(v54);
        v26 = v55;
      }
    }
    else
    {
      v34 = 0x86BCA1AF286BCA1BLL * ((v25 - (uint64_t)v24) >> 3);
      if (v34 >= -1)
        v35 = v34 + 1;
      else
        v35 = v34 + 2;
      v25 -= 152 * (v35 >> 1);
    }
    goto LABEL_35;
  }
  if (a2 != (_DWORD *)v6)
  {
    v11 = a2 + 38;
    v12 = v6 - 152;
    if (v6 < 0x98)
    {
      a1[1] = v6;
      if ((_DWORD *)v6 == v11)
      {
LABEL_28:
        v44 = *a3;
        a2[2] = *((_DWORD *)a3 + 2);
        *(_QWORD *)a2 = v44;
        v45 = &v7[8 * (v8 >> 3)];
        v46 = *((_OWORD *)a3 + 8);
        v48 = *((_OWORD *)a3 + 5);
        v47 = *((_OWORD *)a3 + 6);
        *((_OWORD *)v45 + 7) = *((_OWORD *)a3 + 7);
        *((_OWORD *)v45 + 8) = v46;
        *((_OWORD *)v45 + 5) = v48;
        *((_OWORD *)v45 + 6) = v47;
        v49 = *((_OWORD *)a3 + 1);
        v50 = *((_OWORD *)a3 + 2);
        v51 = *((_OWORD *)a3 + 4);
        *((_OWORD *)v45 + 3) = *((_OWORD *)a3 + 3);
        *((_OWORD *)v45 + 4) = v51;
        *((_OWORD *)v45 + 1) = v49;
        *((_OWORD *)v45 + 2) = v50;
        *((_DWORD *)v45 + 36) = *((_DWORD *)a3 + 36);
        return (uint64_t)v4;
      }
    }
    else
    {
      v13 = v6 - 152;
      v14 = a1[1];
      do
      {
        *(_OWORD *)v14 = *(_OWORD *)v13;
        v15 = *(_OWORD *)(v13 + 128);
        v17 = *(_OWORD *)(v13 + 80);
        v16 = *(_OWORD *)(v13 + 96);
        *(_OWORD *)(v14 + 112) = *(_OWORD *)(v13 + 112);
        *(_OWORD *)(v14 + 128) = v15;
        *(_OWORD *)(v14 + 80) = v17;
        *(_OWORD *)(v14 + 96) = v16;
        v18 = *(_OWORD *)(v13 + 16);
        v19 = *(_OWORD *)(v13 + 32);
        v20 = *(_OWORD *)(v13 + 64);
        *(_OWORD *)(v14 + 48) = *(_OWORD *)(v13 + 48);
        *(_OWORD *)(v14 + 64) = v20;
        *(_OWORD *)(v14 + 16) = v18;
        *(_OWORD *)(v14 + 32) = v19;
        *(_DWORD *)(v14 + 144) = *(_DWORD *)(v13 + 144);
        v14 += 152;
        v13 += 152;
      }
      while (v13 < v6);
      a1[1] = v14;
      if ((_DWORD *)v6 == v11)
        goto LABEL_28;
    }
    v36 = 2 * ((uint64_t)(v6 - (_QWORD)v11) >> 3);
    do
    {
      v37 = *(_QWORD *)&a2[v36 - 38];
      *(_DWORD *)(v12 + 8) = a2[v36 - 36];
      *(_QWORD *)v12 = v37;
      v38 = *(_OWORD *)&a2[v36 - 14];
      v39 = *(_OWORD *)&a2[v36 - 6];
      v40 = *(_OWORD *)&a2[v36 - 18];
      *(_OWORD *)(v12 + 112) = *(_OWORD *)&a2[v36 - 10];
      *(_OWORD *)(v12 + 128) = v39;
      *(_OWORD *)(v12 + 80) = v40;
      *(_OWORD *)(v12 + 96) = v38;
      v41 = *(_OWORD *)&a2[v36 - 34];
      v42 = *(_OWORD *)&a2[v36 - 30];
      v43 = *(_OWORD *)&a2[v36 - 22];
      *(_OWORD *)(v12 + 48) = *(_OWORD *)&a2[v36 - 26];
      *(_OWORD *)(v12 + 64) = v43;
      *(_OWORD *)(v12 + 16) = v41;
      *(_OWORD *)(v12 + 32) = v42;
      *(_DWORD *)(v12 + 144) = a2[v36 - 2];
      v12 -= 152;
      v36 -= 38;
    }
    while (v36 * 4);
    goto LABEL_28;
  }
  *(_OWORD *)a2 = *(_OWORD *)a3;
  v27 = &v7[8 * (v8 >> 3)];
  v28 = *((_OWORD *)a3 + 8);
  v30 = *((_OWORD *)a3 + 5);
  v29 = *((_OWORD *)a3 + 6);
  *((_OWORD *)v27 + 7) = *((_OWORD *)a3 + 7);
  *((_OWORD *)v27 + 8) = v28;
  *((_OWORD *)v27 + 5) = v30;
  *((_OWORD *)v27 + 6) = v29;
  v31 = *((_OWORD *)a3 + 1);
  v32 = *((_OWORD *)a3 + 2);
  v33 = *((_OWORD *)a3 + 4);
  *((_OWORD *)v27 + 3) = *((_OWORD *)a3 + 3);
  *((_OWORD *)v27 + 4) = v33;
  *((_OWORD *)v27 + 1) = v31;
  *((_OWORD *)v27 + 2) = v32;
  *((_DWORD *)v27 + 36) = *((_DWORD *)a3 + 36);
  a1[1] = (uint64_t)(a2 + 38);
  return (uint64_t)v4;
}

void sub_20F052E3C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F052E54(char **a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  _QWORD *v75;

  v5 = *a1;
  v6 = (unint64_t)a1[1];
  v7 = (a2 - (uint64_t)*a1) / 144;
  v8 = (uint64_t)&(*a1)[144 * v7];
  v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    v20 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (_QWORD)v5) >> 4) + 1;
    if (v20 > 0x1C71C71C71C71C7)
      sub_20EABADD4();
    v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - (_QWORD)v5) >> 4);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0xE38E38E38E38E3)
      v22 = 0x1C71C71C71C71C7;
    else
      v22 = v20;
    v75 = a1 + 2;
    if (v22)
    {
      if (v22 > 0x1C71C71C71C71C7)
        sub_20E877A38();
      v23 = (char *)operator new(144 * v22);
    }
    else
    {
      v23 = 0;
    }
    v71 = v23;
    v72 = &v23[144 * v7];
    v73 = v72;
    v74 = &v23[144 * v22];
    sub_20F053260((uint64_t)&v71, a3);
    v31 = v72;
    v32 = *a1;
    v33 = v72;
    if (*a1 != (char *)v8)
    {
      v34 = v8;
      v35 = v72;
      do
      {
        v33 = v35 - 144;
        *((_OWORD *)v35 - 9) = *(_OWORD *)(v34 - 144);
        v36 = *(_OWORD *)(v34 - 16);
        v38 = *(_OWORD *)(v34 - 64);
        v37 = *(_OWORD *)(v34 - 48);
        *((_OWORD *)v35 - 2) = *(_OWORD *)(v34 - 32);
        *((_OWORD *)v35 - 1) = v36;
        *((_OWORD *)v35 - 4) = v38;
        *((_OWORD *)v35 - 3) = v37;
        v39 = *(_OWORD *)(v34 - 128);
        v40 = *(_OWORD *)(v34 - 112);
        v41 = *(_OWORD *)(v34 - 80);
        *((_OWORD *)v35 - 6) = *(_OWORD *)(v34 - 96);
        *((_OWORD *)v35 - 5) = v41;
        *((_OWORD *)v35 - 8) = v39;
        *((_OWORD *)v35 - 7) = v40;
        v34 -= 144;
        v35 -= 144;
      }
      while ((char *)v34 != v32);
    }
    v72 = v33;
    v42 = a1[1];
    v43 = v73;
    if (v42 != (char *)v8)
    {
      do
      {
        *(_OWORD *)v43 = *(_OWORD *)v8;
        v44 = *(_OWORD *)(v8 + 128);
        v46 = *(_OWORD *)(v8 + 80);
        v45 = *(_OWORD *)(v8 + 96);
        *((_OWORD *)v43 + 7) = *(_OWORD *)(v8 + 112);
        *((_OWORD *)v43 + 8) = v44;
        *((_OWORD *)v43 + 5) = v46;
        *((_OWORD *)v43 + 6) = v45;
        v47 = *(_OWORD *)(v8 + 16);
        v48 = *(_OWORD *)(v8 + 32);
        v49 = *(_OWORD *)(v8 + 64);
        *((_OWORD *)v43 + 3) = *(_OWORD *)(v8 + 48);
        *((_OWORD *)v43 + 4) = v49;
        *((_OWORD *)v43 + 1) = v47;
        *((_OWORD *)v43 + 2) = v48;
        v43 += 144;
        v8 += 144;
      }
      while ((char *)v8 != v42);
      v33 = v72;
      v8 = (uint64_t)a1[1];
    }
    v50 = *a1;
    *a1 = v33;
    a1[1] = v43;
    v51 = a1[2];
    a1[2] = v74;
    v73 = (char *)v8;
    v74 = v51;
    v71 = v50;
    v72 = v50;
    if ((char *)v8 != v50)
      v73 = &v50[(v8 - (uint64_t)v50 - 144) % 0x90uLL];
    if (v50)
      operator delete(v50);
    return (uint64_t)v31;
  }
  else
  {
    if (v8 != v6)
    {
      v10 = v8 + 144;
      v11 = v6 - 144;
      if (v6 < 0x90)
      {
        a1[1] = (char *)v6;
        if (v6 == v10)
        {
LABEL_33:
          v62 = *(_QWORD *)a3;
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
          *(_QWORD *)v8 = v62;
          v63 = &v5[144 * v7];
          v64 = *(_OWORD *)(a3 + 128);
          v66 = *(_OWORD *)(a3 + 80);
          v65 = *(_OWORD *)(a3 + 96);
          *((_OWORD *)v63 + 7) = *(_OWORD *)(a3 + 112);
          *((_OWORD *)v63 + 8) = v64;
          *((_OWORD *)v63 + 5) = v66;
          *((_OWORD *)v63 + 6) = v65;
          v67 = *(_OWORD *)(a3 + 16);
          v68 = *(_OWORD *)(a3 + 32);
          v69 = *(_OWORD *)(a3 + 64);
          *((_OWORD *)v63 + 3) = *(_OWORD *)(a3 + 48);
          *((_OWORD *)v63 + 4) = v69;
          *((_OWORD *)v63 + 1) = v67;
          *((_OWORD *)v63 + 2) = v68;
          return v8;
        }
      }
      else
      {
        v12 = (_OWORD *)(v6 - 144);
        v13 = a1[1];
        do
        {
          *(_OWORD *)v13 = *v12;
          v14 = v12[8];
          v16 = v12[5];
          v15 = v12[6];
          *((_OWORD *)v13 + 7) = v12[7];
          *((_OWORD *)v13 + 8) = v14;
          *((_OWORD *)v13 + 5) = v16;
          *((_OWORD *)v13 + 6) = v15;
          v17 = v12[1];
          v18 = v12[2];
          v19 = v12[4];
          *((_OWORD *)v13 + 3) = v12[3];
          *((_OWORD *)v13 + 4) = v19;
          *((_OWORD *)v13 + 1) = v17;
          *((_OWORD *)v13 + 2) = v18;
          v13 += 144;
          v12 += 9;
        }
        while ((unint64_t)v12 < v6);
        a1[1] = v13;
        if (v6 == v10)
          goto LABEL_33;
      }
      v52 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v10) >> 4);
      v53 = (uint64_t)&v5[144 * v7 - 144];
      v54 = 144 * v52;
      do
      {
        v55 = *(_QWORD *)(v53 + v54);
        *(_DWORD *)(v11 + 8) = *(_DWORD *)(v53 + v54 + 8);
        *(_QWORD *)v11 = v55;
        v56 = *(_OWORD *)(v53 + v54 + 128);
        v58 = *(_OWORD *)(v53 + v54 + 80);
        v57 = *(_OWORD *)(v53 + v54 + 96);
        *(_OWORD *)(v11 + 112) = *(_OWORD *)(v53 + v54 + 112);
        *(_OWORD *)(v11 + 128) = v56;
        *(_OWORD *)(v11 + 80) = v58;
        *(_OWORD *)(v11 + 96) = v57;
        v59 = *(_OWORD *)(v53 + v54 + 16);
        v60 = *(_OWORD *)(v53 + v54 + 32);
        v61 = *(_OWORD *)(v53 + v54 + 64);
        *(_OWORD *)(v11 + 48) = *(_OWORD *)(v53 + v54 + 48);
        *(_OWORD *)(v11 + 64) = v61;
        *(_OWORD *)(v11 + 16) = v59;
        *(_OWORD *)(v11 + 32) = v60;
        v11 -= 144;
        v54 -= 144;
      }
      while (v54);
      goto LABEL_33;
    }
    *(_OWORD *)v8 = *(_OWORD *)a3;
    v24 = &v5[144 * v7];
    v25 = *(_OWORD *)(a3 + 128);
    v27 = *(_OWORD *)(a3 + 80);
    v26 = *(_OWORD *)(a3 + 96);
    *((_OWORD *)v24 + 7) = *(_OWORD *)(a3 + 112);
    *((_OWORD *)v24 + 8) = v25;
    *((_OWORD *)v24 + 5) = v27;
    *((_OWORD *)v24 + 6) = v26;
    v28 = *(_OWORD *)(a3 + 16);
    v29 = *(_OWORD *)(a3 + 32);
    v30 = *(_OWORD *)(a3 + 64);
    *((_OWORD *)v24 + 3) = *(_OWORD *)(a3 + 48);
    *((_OWORD *)v24 + 4) = v30;
    *((_OWORD *)v24 + 1) = v28;
    *((_OWORD *)v24 + 2) = v29;
    a1[1] = (char *)(v8 + 144);
  }
  return v8;
}

void sub_20F0531FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v13;

  if (a12 == a11)
  {
    v13 = __p;
    if (!__p)
      goto LABEL_3;
  }
  else
  {
    v13 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_20F053260(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  BOOL v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __n128 result;
  __int128 v38;
  __int128 v39;

  v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    v5 = *(char **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    if (v6 <= *(_QWORD *)a1)
    {
      v20 = 0x1C71C71C71C71C72 * ((v4 - v5) >> 4);
      if (v4 == v5)
        v20 = 1;
      if (v20 >= 0x1C71C71C71C71C8)
        sub_20E877A38();
      v21 = v20 >> 2;
      v22 = 144 * v20;
      v23 = (char *)operator new(144 * v20);
      v24 = &v23[144 * v21];
      v26 = &v4[-v6];
      v25 = v4 == (char *)v6;
      v4 = v24;
      if (!v25)
      {
        v4 = &v26[(_QWORD)v24];
        v27 = &v23[144 * v21];
        do
        {
          *(_OWORD *)v27 = *(_OWORD *)v6;
          v28 = *(_OWORD *)(v6 + 128);
          v30 = *(_OWORD *)(v6 + 80);
          v29 = *(_OWORD *)(v6 + 96);
          *((_OWORD *)v27 + 7) = *(_OWORD *)(v6 + 112);
          *((_OWORD *)v27 + 8) = v28;
          *((_OWORD *)v27 + 5) = v30;
          *((_OWORD *)v27 + 6) = v29;
          v31 = *(_OWORD *)(v6 + 16);
          v32 = *(_OWORD *)(v6 + 32);
          v33 = *(_OWORD *)(v6 + 64);
          *((_OWORD *)v27 + 3) = *(_OWORD *)(v6 + 48);
          *((_OWORD *)v27 + 4) = v33;
          *((_OWORD *)v27 + 1) = v31;
          *((_OWORD *)v27 + 2) = v32;
          v27 += 144;
          v6 += 144;
        }
        while (v27 != v4);
      }
      *(_QWORD *)a1 = v23;
      *(_QWORD *)(a1 + 8) = v24;
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = &v23[v22];
      if (v5)
      {
        operator delete(v5);
        v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      v7 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - *(_QWORD *)a1) >> 4);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = v8 >> 1;
      v10 = -(v8 >> 1);
      if ((char *)v6 == v4)
      {
        v19 = (char *)(v6 - 144 * v9);
      }
      else
      {
        do
        {
          v11 = v6 + 144 * v10;
          v12 = *(_QWORD *)v6;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v6 + 8);
          *(_QWORD *)v11 = v12;
          v13 = *(_OWORD *)(v6 + 128);
          v15 = *(_OWORD *)(v6 + 80);
          v14 = *(_OWORD *)(v6 + 96);
          *(_OWORD *)(v11 + 112) = *(_OWORD *)(v6 + 112);
          *(_OWORD *)(v11 + 128) = v13;
          *(_OWORD *)(v11 + 80) = v15;
          *(_OWORD *)(v11 + 96) = v14;
          v16 = *(_OWORD *)(v6 + 16);
          v17 = *(_OWORD *)(v6 + 32);
          v18 = *(_OWORD *)(v6 + 64);
          *(_OWORD *)(v11 + 48) = *(_OWORD *)(v6 + 48);
          *(_OWORD *)(v11 + 64) = v18;
          *(_OWORD *)(v11 + 16) = v16;
          *(_OWORD *)(v11 + 32) = v17;
          v6 += 144;
        }
        while ((char *)v6 != v4);
        v4 = *(char **)(a1 + 8);
        v19 = (char *)(v6 + 144 * v10);
      }
      *(_QWORD *)(a1 + 8) = &v4[144 * v10];
      *(_QWORD *)(a1 + 16) = v19;
      v4 = v19;
    }
  }
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v34 = *(_OWORD *)(a2 + 128);
  v36 = *(_OWORD *)(a2 + 80);
  v35 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v4 + 7) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v4 + 8) = v34;
  *((_OWORD *)v4 + 5) = v36;
  *((_OWORD *)v4 + 6) = v35;
  result = *(__n128 *)(a2 + 16);
  v38 = *(_OWORD *)(a2 + 32);
  v39 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v4 + 4) = v39;
  *((__n128 *)v4 + 1) = result;
  *((_OWORD *)v4 + 2) = v38;
  *(_QWORD *)(a1 + 16) += 144;
  return result;
}

void sub_20F053450(unsigned int *a1, double *a2)
{
  double *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  float64x2_t *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  _BOOL4 v17;
  double v19;
  long double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float64x2_t v37;

  v3 = (double *)*((_QWORD *)a1 + 1);
  v4 = *a1;
  v5 = (v4 + 2);
  v6 = (2 * (_DWORD)v4) | 1u;
  v7 = (v3[v5] - v3[v6]) * 0.5;
  *a2 = v7;
  v8 = (float64x2_t *)&v3[(2 * v4)];
  v9 = (v8->f64[0] - v3[2]) * 0.5;
  a2[1] = v9;
  v10 = (v3[1] - v3[v4]) * 0.5;
  a2[2] = v10;
  v11 = *v3;
  v12 = v3[(v4 + 1)];
  v13 = v3[(2 * v4 + 2)];
  v14 = -1.0;
  v15 = (*v3 + v12 + v13 + -1.0) * 0.5;
  v16 = v7 * v7 + v9 * v9 + v10 * v10;
  if (v15 >= -1.0 || v15 + 1.0 <= -0.00001)
  {
    v17 = v15 > 1.0;
    if (v15 + -1.0 >= 0.00001)
      v17 = 0;
    if (v15 > 0.99 || v17)
    {
      v19 = v16 * (v16 * (v16 * 5.0 / 112.0 + 0.075) + 0.166666667) + 1.0;
      *a2 = v7 * v19;
      a2[1] = v9 * v19;
LABEL_12:
      a2[2] = v10 * v19;
      return;
    }
    if (v15 > -0.99)
    {
      v19 = acos(v15) / sqrt(v16);
      *a2 = v7 * v19;
      a2[1] = v9 * v19;
      goto LABEL_12;
    }
    v14 = (*v3 + v12 + v13 + -1.0) * 0.5;
  }
  v20 = asin(sqrt(v16));
  v21 = (3.14159265 - v20) * (3.14159265 - v20) / (1.0 - v14);
  v22 = (v11 - v14) * v21;
  v23 = (v12 - v14) * v21;
  v24 = (v13 - v14) * v21;
  if (v22 <= v23)
  {
    v29 = v21 * 0.5;
    if (v23 <= v24)
    {
      v36 = sqrt(v24);
      if (v10 < 0.0)
        v36 = -v36;
      a2[2] = v36;
      v37.f64[0] = v3[2];
      v37.f64[1] = v3[v5];
      *(float64x2_t *)a2 = vmulq_n_f64(vmulq_n_f64(vaddq_f64(*v8, v37), v29), 1.0 / v36);
    }
    else
    {
      v30 = sqrt(v23);
      if (v9 < 0.0)
        v30 = -v30;
      a2[1] = v30;
      v31 = 1.0 / v30;
      v32 = v3[v6] + v3[v5];
      *a2 = v31 * (v29 * (v3[v4] + v3[1]));
      a2[2] = v31 * (v29 * v32);
    }
  }
  else
  {
    v25 = v21 * 0.5;
    v26 = v25 * (v8->f64[0] + v3[2]);
    if (v22 <= v24)
    {
      v33 = sqrt(v24);
      if (v10 < 0.0)
        v33 = -v33;
      a2[2] = v33;
      v34 = 1.0 / v33;
      v35 = v34 * (v25 * (v3[v6] + v3[v5]));
      *a2 = v34 * v26;
      a2[1] = v35;
    }
    else
    {
      v27 = sqrt(v22);
      if (v7 < 0.0)
        v27 = -v27;
      *a2 = v27;
      v28 = 1.0 / v27;
      a2[1] = v28 * (v25 * (v3[v4] + v3[1]));
      a2[2] = v28 * v26;
    }
  }
}

void *sub_20F053790@<X0>(void *__src@<X0>, void *a2@<X8>)
{
  void *v3;
  _BYTE __dst[288];

  memcpy(__dst, __src, sizeof(__dst));
  sub_20E8BED80();
  sub_20E8BEDB0();
  if ((int)0.0 > 0x180)
  {
    v3 = operator new((8 * (int)0.0 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    sub_20E8BED80();
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  }
  else
  {
    sub_20E8BED80();
  }
  return memcpy(a2, __dst, 0x120uLL);
}

void sub_20F053914(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20F053938(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F82C0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_20F0539AC(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9F82C0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x212BC6398);
}

void sub_20F053A24(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_20F053B28(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    v5 = sub_20F04FD08(v2);
    MEMORY[0x212BC6398](v5, 0x1062C40E21CDE38);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 40);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t sub_20F053AB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS_3vio20FrontEndKeyframeDataENS1_18AutoReturningMakeTIS4_NS1_21PoolO"
                     "bjectInitializerIS4_EENS1_23PoolObjectDeinitializerIS4_EEEENSt3__110shared_ptrIS4_EENS1_19ObjectBor"
                     "rowingPoolINSB_10unique_ptrIS4_NSB_14default_deleteIS4_EEEESA_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS_3vio20FrontEndKeyframeDataENS1_18AutoReturningMakeTIS4_"
                                "NS1_21PoolObjectInitializerIS4_EENS1_23PoolObjectDeinitializerIS4_EEEENSt3__110shared_pt"
                                "rIS4_EENS1_19ObjectBorrowingPoolINSB_10unique_ptrIS4_NSB_14default_deleteIS4_EEEESA_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS_3vio20FrontEndKeyframeDataENS1_18AutoReturningMakeTIS4_NS1_21PoolObjectInitializerIS4_EENS1_23PoolObjectDeinitializerIS4_EEEENSt3__110shared_ptrIS4_EENS1_19ObjectBorrowingPoolINSB_10unique_ptrIS4_NSB_14default_deleteIS4_EEEESA_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS_3vio20FrontEndKeyframeDataENS1_18AutoReturningMakeTIS4_NS1_21PoolObjectInitializerIS4_EENS1_23PoolObjectDeinitializerIS4_EEEENSt3__110shared_ptrIS4_EENS1_19ObjectBorrowingPoolINSB_10unique_ptrIS4_NSB_14default_deleteIS4_EEEESA_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_20F053B28(std::mutex *a1, uint64_t a2)
{
  _QWORD *sig;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v6 = (char *)sig[2];
    v5 = sig[3];
    if ((unint64_t)v6 >= v5)
    {
      v7 = (char *)sig[1];
      v8 = (v6 - v7) >> 3;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        sub_20E867F44();
      v10 = v5 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_20E877A38();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      v14 = &v12[8 * v11];
      *(_QWORD *)v13 = a2;
      v15 = v13 + 8;
      if (v6 == v7)
      {
        sig[1] = v13;
        sig[2] = v15;
        sig[3] = v14;
      }
      else
      {
        v16 = v6 - v7 - 8;
        if (v16 < 0x78)
          goto LABEL_38;
        if (&v6[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v13 && &v12[v6 - v7 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v6)
          goto LABEL_38;
        v18 = (v16 >> 3) + 1;
        v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        v13 -= v19;
        v20 = &v6[-v19];
        v21 = v6 - 16;
        v22 = &v12[8 * v8 - 16];
        v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *((_OWORD *)v21 - 1);
          v24 = *(_OWORD *)v21;
          *((_OWORD *)v21 - 1) = 0uLL;
          *(_OWORD *)v21 = 0uLL;
          *((_OWORD *)v22 - 1) = v25;
          *(_OWORD *)v22 = v24;
          v21 -= 32;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        v6 = v20;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            v26 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v13 - 1) = v26;
            v13 -= 8;
          }
          while (v6 != v7);
        }
        v6 = (char *)sig[1];
        v27 = (char *)sig[2];
        sig[1] = v13;
        sig[2] = v15;
        sig[3] = v14;
        while (v27 != v6)
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          v28 = v29;
          *(_QWORD *)v27 = 0;
          if (v29)
          {
            v30 = sub_20F04FD08(v28);
            MEMORY[0x212BC6398](v30, 0x1062C40E21CDE38);
          }
        }
      }
      if (v6)
        operator delete(v6);
      sig[2] = v15;
    }
    else
    {
      *(_QWORD *)v6 = a2;
      sig[2] = v6 + 8;
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_20F053D30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20F04FCC4((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_20F053D50()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F053D64(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C9F8310;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20F053DA4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9F8310;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20F053DCC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a3 + 792);
  v4 = *(_QWORD *)(a3 + 800);
  if (v3 == v4)
  {
    v6 = 0;
    goto LABEL_9;
  }
  v5 = v4 - v3 - 40;
  if (v5 < 0x28)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a3 + 792);
    do
    {
LABEL_8:
      v6 += *(unsigned int *)(v7 + 32);
      v7 += 40;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  v8 = 0;
  v9 = 0;
  v10 = v5 / 0x28 + 1;
  v7 = v3 + 40 * (v10 & 0xFFFFFFFFFFFFFFELL);
  v11 = (unsigned int *)(v3 + 72);
  v12 = v10 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    v13 = *(v11 - 10);
    v14 = *v11;
    v11 += 20;
    v8 += v13;
    v9 += v14;
    v12 -= 2;
  }
  while (v12);
  v6 = v9 + v8;
  if (v10 != (v10 & 0xFFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v6 >= **(unsigned int **)(result + 8))
  {
    v15 = *(_DWORD **)(result + 16);
    if (v6 > *v15)
    {
      *v15 = v6;
      v16 = *(_QWORD *)(result + 24);
      *(_QWORD *)v16 = a3 + 768;
      *(_BYTE *)(v16 + 8) = 1;
    }
  }
  return result;
}

uint64_t sub_20F053EA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio44FindMapTrackingStatitiscsWithMost2d3dMatchesINS0_13MapDataTraitsILb0EEEEENS_3esn11Opti"
                     "onalRefIKNS0_26FrameMapTrackingStatisticsEEERKNS0_22CameraSetFeaturesQueueIT_EERKNSt3__16vectorIiNS"
                     "E_9allocatorIiEEEEjEUlSA_RKT0_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio44FindMapTrackingStatitiscsWithMost2d3dMatchesINS0_13MapDataTraitsILb0EEEEENS"
                                "_3esn11OptionalRefIKNS0_26FrameMapTrackingStatisticsEEERKNS0_22CameraSetFeaturesQueueIT_"
                                "EERKNSt3__16vectorIiNSE_9allocatorIiEEEEjEUlSA_RKT0_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio44FindMapTrackingStatitiscsWithMost2d3dMatchesINS0_13MapDataTraitsILb0EEEEENS_3esn11OptionalRefIKNS0_26FrameMapTrackingStatisticsEEERKNS0_22CameraSetFeaturesQueueIT_EERKNSt3__16vectorIiNSE_9allocatorIiEEEEjEUlSA_RKT0_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio44FindMapTrackingStatitiscsWithMost2d3dMatchesINS0_13MapDataTraitsILb0EEEEENS_3esn11OptionalRefIKNS0_26FrameMapTrackingStatisticsEEERKNS0_22CameraSetFeaturesQueueIT_EERKNSt3__16vectorIiNSE_9allocatorIiEEEEjEUlSA_RKT0_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F053F10()
{
  return &unk_24C9F8370;
}

double sub_20F053F1C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  double result;
  __int128 v334;
  uint64_t v335;

  sub_20F058170((uint64_t)&v334);
  v4 = *a3;
  if (*(char *)(*a3 + 23) < 0)
    operator delete(*(void **)v4);
  v5 = v334;
  *(_QWORD *)(v4 + 16) = v335;
  *(_OWORD *)v4 = v5;
  sub_20F058434((uint64_t)&v334);
  v6 = *a3 + 24;
  if (*(char *)(*a3 + 47) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v334;
  *(_QWORD *)(v6 + 16) = v335;
  sub_20F0586F8((uint64_t)&v334);
  v7 = *a3 + 48;
  if (*(char *)(*a3 + 71) < 0)
    operator delete(*(void **)v7);
  *(_OWORD *)v7 = v334;
  *(_QWORD *)(v7 + 16) = v335;
  sub_20F0589BC((uint64_t)&v334);
  v8 = *a3 + 72;
  if (*(char *)(*a3 + 95) < 0)
    operator delete(*(void **)v8);
  *(_OWORD *)v8 = v334;
  *(_QWORD *)(v8 + 16) = v335;
  sub_20F058C80((uint64_t)&v334);
  v9 = *a3 + 96;
  if (*(char *)(*a3 + 119) < 0)
    operator delete(*(void **)v9);
  *(_OWORD *)v9 = v334;
  *(_QWORD *)(v9 + 16) = v335;
  sub_20F058F44((uint64_t)&v334);
  v10 = *a3 + 120;
  if (*(char *)(*a3 + 143) < 0)
    operator delete(*(void **)v10);
  *(_OWORD *)v10 = v334;
  *(_QWORD *)(v10 + 16) = v335;
  sub_20F059208((uint64_t)&v334);
  v11 = *a3 + 144;
  if (*(char *)(*a3 + 167) < 0)
    operator delete(*(void **)v11);
  *(_OWORD *)v11 = v334;
  *(_QWORD *)(v11 + 16) = v335;
  sub_20F0594CC((uint64_t)&v334);
  v12 = *a3 + 168;
  if (*(char *)(*a3 + 191) < 0)
    operator delete(*(void **)v12);
  *(_OWORD *)v12 = v334;
  *(_QWORD *)(v12 + 16) = v335;
  sub_20F059790((uint64_t)&v334);
  v13 = *a3 + 192;
  if (*(char *)(*a3 + 215) < 0)
    operator delete(*(void **)v13);
  *(_OWORD *)v13 = v334;
  *(_QWORD *)(v13 + 16) = v335;
  sub_20F059A54((uint64_t)&v334);
  v14 = *a3 + 216;
  if (*(char *)(*a3 + 239) < 0)
    operator delete(*(void **)v14);
  *(_OWORD *)v14 = v334;
  *(_QWORD *)(v14 + 16) = v335;
  sub_20F059D18((uint64_t)&v334);
  v15 = *a3 + 240;
  if (*(char *)(*a3 + 263) < 0)
    operator delete(*(void **)v15);
  *(_OWORD *)v15 = v334;
  *(_QWORD *)(v15 + 16) = v335;
  sub_20F059FDC((uint64_t)&v334);
  v16 = *a3 + 264;
  if (*(char *)(*a3 + 287) < 0)
    operator delete(*(void **)v16);
  *(_OWORD *)v16 = v334;
  *(_QWORD *)(v16 + 16) = v335;
  sub_20F05A2A0((uint64_t)&v334);
  v17 = *a3 + 288;
  if (*(char *)(*a3 + 311) < 0)
    operator delete(*(void **)v17);
  *(_OWORD *)v17 = v334;
  *(_QWORD *)(v17 + 16) = v335;
  sub_20F05A564((uint64_t)&v334);
  v18 = *a3 + 312;
  if (*(char *)(*a3 + 335) < 0)
    operator delete(*(void **)v18);
  *(_OWORD *)v18 = v334;
  *(_QWORD *)(v18 + 16) = v335;
  sub_20F05A828((uint64_t)&v334);
  v19 = *a3 + 336;
  if (*(char *)(*a3 + 359) < 0)
    operator delete(*(void **)v19);
  *(_OWORD *)v19 = v334;
  *(_QWORD *)(v19 + 16) = v335;
  sub_20F05AAEC((uint64_t)&v334);
  v20 = *a3 + 360;
  if (*(char *)(*a3 + 383) < 0)
    operator delete(*(void **)v20);
  *(_OWORD *)v20 = v334;
  *(_QWORD *)(v20 + 16) = v335;
  sub_20F05ADB0((uint64_t)&v334);
  v21 = *a3 + 384;
  if (*(char *)(*a3 + 407) < 0)
    operator delete(*(void **)v21);
  *(_OWORD *)v21 = v334;
  *(_QWORD *)(v21 + 16) = v335;
  sub_20F05B074((uint64_t)&v334);
  v22 = *a3 + 408;
  if (*(char *)(*a3 + 431) < 0)
    operator delete(*(void **)v22);
  *(_OWORD *)v22 = v334;
  *(_QWORD *)(v22 + 16) = v335;
  sub_20F05B338((uint64_t)&v334);
  v23 = *a3 + 432;
  if (*(char *)(*a3 + 455) < 0)
    operator delete(*(void **)v23);
  *(_OWORD *)v23 = v334;
  *(_QWORD *)(v23 + 16) = v335;
  sub_20F05B5FC((uint64_t)&v334);
  v24 = *a3 + 456;
  if (*(char *)(*a3 + 479) < 0)
    operator delete(*(void **)v24);
  *(_OWORD *)v24 = v334;
  *(_QWORD *)(v24 + 16) = v335;
  sub_20F05B8C0((uint64_t)&v334);
  v25 = *a3 + 480;
  if (*(char *)(*a3 + 503) < 0)
    operator delete(*(void **)v25);
  *(_OWORD *)v25 = v334;
  *(_QWORD *)(v25 + 16) = v335;
  sub_20F05BB84((uint64_t)&v334);
  v26 = *a3 + 504;
  if (*(char *)(*a3 + 527) < 0)
    operator delete(*(void **)v26);
  *(_OWORD *)v26 = v334;
  *(_QWORD *)(v26 + 16) = v335;
  sub_20F05BE48((uint64_t)&v334);
  v27 = *a3 + 528;
  if (*(char *)(*a3 + 551) < 0)
    operator delete(*(void **)v27);
  *(_OWORD *)v27 = v334;
  *(_QWORD *)(v27 + 16) = v335;
  sub_20F05C10C((uint64_t)&v334);
  v28 = *a3 + 552;
  if (*(char *)(*a3 + 575) < 0)
    operator delete(*(void **)v28);
  *(_OWORD *)v28 = v334;
  *(_QWORD *)(v28 + 16) = v335;
  sub_20F05C3D0((uint64_t)&v334);
  v29 = *a3 + 576;
  if (*(char *)(*a3 + 599) < 0)
    operator delete(*(void **)v29);
  *(_OWORD *)v29 = v334;
  *(_QWORD *)(v29 + 16) = v335;
  sub_20F05C694((uint64_t)&v334);
  v30 = *a3 + 600;
  if (*(char *)(*a3 + 623) < 0)
    operator delete(*(void **)v30);
  *(_OWORD *)v30 = v334;
  *(_QWORD *)(v30 + 16) = v335;
  sub_20F05C958((uint64_t)&v334);
  v31 = *a3 + 624;
  if (*(char *)(*a3 + 647) < 0)
    operator delete(*(void **)v31);
  *(_OWORD *)v31 = v334;
  *(_QWORD *)(v31 + 16) = v335;
  sub_20F05CC1C((uint64_t)&v334);
  v32 = *a3 + 648;
  if (*(char *)(*a3 + 671) < 0)
    operator delete(*(void **)v32);
  *(_OWORD *)v32 = v334;
  *(_QWORD *)(v32 + 16) = v335;
  sub_20F05CEE0((uint64_t)&v334);
  v33 = *a3 + 672;
  if (*(char *)(*a3 + 695) < 0)
    operator delete(*(void **)v33);
  *(_OWORD *)v33 = v334;
  *(_QWORD *)(v33 + 16) = v335;
  sub_20F05D1A4((uint64_t)&v334);
  v34 = *a3 + 696;
  if (*(char *)(*a3 + 719) < 0)
    operator delete(*(void **)v34);
  *(_OWORD *)v34 = v334;
  *(_QWORD *)(v34 + 16) = v335;
  sub_20F05D468((uint64_t)&v334);
  v35 = *a3 + 720;
  if (*(char *)(*a3 + 743) < 0)
    operator delete(*(void **)v35);
  *(_OWORD *)v35 = v334;
  *(_QWORD *)(v35 + 16) = v335;
  sub_20F05D72C((uint64_t)&v334);
  v36 = *a3 + 744;
  if (*(char *)(*a3 + 767) < 0)
    operator delete(*(void **)v36);
  *(_OWORD *)v36 = v334;
  *(_QWORD *)(v36 + 16) = v335;
  sub_20F05D9F0((uint64_t)&v334);
  v37 = *a3 + 768;
  if (*(char *)(*a3 + 791) < 0)
    operator delete(*(void **)v37);
  *(_OWORD *)v37 = v334;
  *(_QWORD *)(v37 + 16) = v335;
  sub_20F05DCB4((uint64_t)&v334);
  v38 = *a3 + 792;
  if (*(char *)(*a3 + 815) < 0)
    operator delete(*(void **)v38);
  *(_OWORD *)v38 = v334;
  *(_QWORD *)(v38 + 16) = v335;
  sub_20F05DF78((uint64_t)&v334);
  v39 = *a3 + 816;
  if (*(char *)(*a3 + 839) < 0)
    operator delete(*(void **)v39);
  *(_OWORD *)v39 = v334;
  *(_QWORD *)(v39 + 16) = v335;
  sub_20F05E23C((uint64_t)&v334);
  v40 = *a3 + 840;
  if (*(char *)(*a3 + 863) < 0)
    operator delete(*(void **)v40);
  *(_OWORD *)v40 = v334;
  *(_QWORD *)(v40 + 16) = v335;
  sub_20F05E500((uint64_t)&v334);
  v41 = *a3 + 864;
  if (*(char *)(*a3 + 887) < 0)
    operator delete(*(void **)v41);
  *(_OWORD *)v41 = v334;
  *(_QWORD *)(v41 + 16) = v335;
  sub_20F05E7C4((uint64_t)&v334);
  v42 = *a3 + 888;
  if (*(char *)(*a3 + 911) < 0)
    operator delete(*(void **)v42);
  *(_OWORD *)v42 = v334;
  *(_QWORD *)(v42 + 16) = v335;
  sub_20F05EA88((uint64_t)&v334);
  v43 = *a3 + 912;
  if (*(char *)(*a3 + 935) < 0)
    operator delete(*(void **)v43);
  *(_OWORD *)v43 = v334;
  *(_QWORD *)(v43 + 16) = v335;
  sub_20F05ED4C((uint64_t)&v334);
  v44 = *a3 + 936;
  if (*(char *)(*a3 + 959) < 0)
    operator delete(*(void **)v44);
  *(_OWORD *)v44 = v334;
  *(_QWORD *)(v44 + 16) = v335;
  sub_20F05F010((uint64_t)&v334);
  v45 = *a3 + 960;
  if (*(char *)(*a3 + 983) < 0)
    operator delete(*(void **)v45);
  *(_OWORD *)v45 = v334;
  *(_QWORD *)(v45 + 16) = v335;
  sub_20F05F2D4((uint64_t)&v334);
  v46 = *a3 + 984;
  if (*(char *)(*a3 + 1007) < 0)
    operator delete(*(void **)v46);
  *(_OWORD *)v46 = v334;
  *(_QWORD *)(v46 + 16) = v335;
  sub_20F05F598((uint64_t)&v334);
  v47 = *a3 + 1008;
  if (*(char *)(*a3 + 1031) < 0)
    operator delete(*(void **)v47);
  *(_OWORD *)v47 = v334;
  *(_QWORD *)(v47 + 16) = v335;
  sub_20F05F85C((uint64_t)&v334);
  v48 = *a3 + 1032;
  if (*(char *)(*a3 + 1055) < 0)
    operator delete(*(void **)v48);
  *(_OWORD *)v48 = v334;
  *(_QWORD *)(v48 + 16) = v335;
  sub_20F05FB20((uint64_t)&v334);
  v49 = *a3 + 1056;
  if (*(char *)(*a3 + 1079) < 0)
    operator delete(*(void **)v49);
  *(_OWORD *)v49 = v334;
  *(_QWORD *)(v49 + 16) = v335;
  sub_20F05FDE4((uint64_t)&v334);
  v50 = *a3 + 1080;
  if (*(char *)(*a3 + 1103) < 0)
    operator delete(*(void **)v50);
  *(_OWORD *)v50 = v334;
  *(_QWORD *)(v50 + 16) = v335;
  sub_20F0600A8((uint64_t)&v334);
  v51 = *a3 + 1104;
  if (*(char *)(*a3 + 1127) < 0)
    operator delete(*(void **)v51);
  *(_OWORD *)v51 = v334;
  *(_QWORD *)(v51 + 16) = v335;
  sub_20F06036C((uint64_t)&v334);
  v52 = *a3 + 1128;
  if (*(char *)(*a3 + 1151) < 0)
    operator delete(*(void **)v52);
  *(_OWORD *)v52 = v334;
  *(_QWORD *)(v52 + 16) = v335;
  sub_20F060630((uint64_t)&v334);
  v53 = *a3 + 1152;
  if (*(char *)(*a3 + 1175) < 0)
    operator delete(*(void **)v53);
  *(_OWORD *)v53 = v334;
  *(_QWORD *)(v53 + 16) = v335;
  sub_20F0608F4((uint64_t)&v334);
  v54 = *a3 + 1176;
  if (*(char *)(*a3 + 1199) < 0)
    operator delete(*(void **)v54);
  *(_OWORD *)v54 = v334;
  *(_QWORD *)(v54 + 16) = v335;
  sub_20F060BB8((uint64_t)&v334);
  v55 = *a3 + 1200;
  if (*(char *)(*a3 + 1223) < 0)
    operator delete(*(void **)v55);
  *(_OWORD *)v55 = v334;
  *(_QWORD *)(v55 + 16) = v335;
  sub_20F060E7C((uint64_t)&v334);
  v56 = *a3 + 1224;
  if (*(char *)(*a3 + 1247) < 0)
    operator delete(*(void **)v56);
  *(_OWORD *)v56 = v334;
  *(_QWORD *)(v56 + 16) = v335;
  sub_20F061140((uint64_t)&v334);
  v57 = *a3 + 1248;
  if (*(char *)(*a3 + 1271) < 0)
    operator delete(*(void **)v57);
  *(_OWORD *)v57 = v334;
  *(_QWORD *)(v57 + 16) = v335;
  sub_20F061404((uint64_t)&v334);
  v58 = *a3 + 1272;
  if (*(char *)(*a3 + 1295) < 0)
    operator delete(*(void **)v58);
  *(_OWORD *)v58 = v334;
  *(_QWORD *)(v58 + 16) = v335;
  sub_20F0616C8((uint64_t)&v334);
  v59 = *a3 + 1296;
  if (*(char *)(*a3 + 1319) < 0)
    operator delete(*(void **)v59);
  *(_OWORD *)v59 = v334;
  *(_QWORD *)(v59 + 16) = v335;
  sub_20F06198C((uint64_t)&v334);
  v60 = *a3 + 1320;
  if (*(char *)(*a3 + 1343) < 0)
    operator delete(*(void **)v60);
  *(_OWORD *)v60 = v334;
  *(_QWORD *)(v60 + 16) = v335;
  sub_20F061C50((uint64_t)&v334);
  v61 = *a3 + 1344;
  if (*(char *)(*a3 + 1367) < 0)
    operator delete(*(void **)v61);
  *(_OWORD *)v61 = v334;
  *(_QWORD *)(v61 + 16) = v335;
  sub_20F061F14((uint64_t)&v334);
  v62 = *a3 + 1368;
  if (*(char *)(*a3 + 1391) < 0)
    operator delete(*(void **)v62);
  *(_OWORD *)v62 = v334;
  *(_QWORD *)(v62 + 16) = v335;
  sub_20F0621D8((uint64_t)&v334);
  v63 = *a3 + 1392;
  if (*(char *)(*a3 + 1415) < 0)
    operator delete(*(void **)v63);
  *(_OWORD *)v63 = v334;
  *(_QWORD *)(v63 + 16) = v335;
  sub_20F06249C((uint64_t)&v334);
  v64 = *a3 + 1416;
  if (*(char *)(*a3 + 1439) < 0)
    operator delete(*(void **)v64);
  *(_OWORD *)v64 = v334;
  *(_QWORD *)(v64 + 16) = v335;
  sub_20F062760((uint64_t)&v334);
  v65 = *a3 + 1440;
  if (*(char *)(*a3 + 1463) < 0)
    operator delete(*(void **)v65);
  *(_OWORD *)v65 = v334;
  *(_QWORD *)(v65 + 16) = v335;
  sub_20F062A24((uint64_t)&v334);
  v66 = *a3 + 1464;
  if (*(char *)(*a3 + 1487) < 0)
    operator delete(*(void **)v66);
  *(_OWORD *)v66 = v334;
  *(_QWORD *)(v66 + 16) = v335;
  sub_20F062CE8((uint64_t)&v334);
  v67 = *a3 + 1488;
  if (*(char *)(*a3 + 1511) < 0)
    operator delete(*(void **)v67);
  *(_OWORD *)v67 = v334;
  *(_QWORD *)(v67 + 16) = v335;
  sub_20F062FAC((uint64_t)&v334);
  v68 = *a3 + 1512;
  if (*(char *)(*a3 + 1535) < 0)
    operator delete(*(void **)v68);
  *(_OWORD *)v68 = v334;
  *(_QWORD *)(v68 + 16) = v335;
  sub_20F063270((uint64_t)&v334);
  v69 = *a3 + 1536;
  if (*(char *)(*a3 + 1559) < 0)
    operator delete(*(void **)v69);
  *(_OWORD *)v69 = v334;
  *(_QWORD *)(v69 + 16) = v335;
  sub_20F063534((uint64_t)&v334);
  v70 = *a3 + 1560;
  if (*(char *)(*a3 + 1583) < 0)
    operator delete(*(void **)v70);
  *(_OWORD *)v70 = v334;
  *(_QWORD *)(v70 + 16) = v335;
  sub_20F0637F8((uint64_t)&v334);
  v71 = *a3 + 1584;
  if (*(char *)(*a3 + 1607) < 0)
    operator delete(*(void **)v71);
  *(_OWORD *)v71 = v334;
  *(_QWORD *)(v71 + 16) = v335;
  sub_20F063ABC((uint64_t)&v334);
  v72 = *a3 + 1608;
  if (*(char *)(*a3 + 1631) < 0)
    operator delete(*(void **)v72);
  *(_OWORD *)v72 = v334;
  *(_QWORD *)(v72 + 16) = v335;
  sub_20F063D80((uint64_t)&v334);
  v73 = *a3 + 1632;
  if (*(char *)(*a3 + 1655) < 0)
    operator delete(*(void **)v73);
  *(_OWORD *)v73 = v334;
  *(_QWORD *)(v73 + 16) = v335;
  sub_20F064044((uint64_t)&v334);
  v74 = *a3 + 1656;
  if (*(char *)(*a3 + 1679) < 0)
    operator delete(*(void **)v74);
  *(_OWORD *)v74 = v334;
  *(_QWORD *)(v74 + 16) = v335;
  sub_20F064308((uint64_t)&v334);
  v75 = *a3 + 1680;
  if (*(char *)(*a3 + 1703) < 0)
    operator delete(*(void **)v75);
  *(_OWORD *)v75 = v334;
  *(_QWORD *)(v75 + 16) = v335;
  sub_20F0645CC((uint64_t)&v334);
  v76 = *a3 + 1704;
  if (*(char *)(*a3 + 1727) < 0)
    operator delete(*(void **)v76);
  *(_OWORD *)v76 = v334;
  *(_QWORD *)(v76 + 16) = v335;
  sub_20F064890((uint64_t)&v334);
  v77 = *a3 + 1728;
  if (*(char *)(*a3 + 1751) < 0)
    operator delete(*(void **)v77);
  *(_OWORD *)v77 = v334;
  *(_QWORD *)(v77 + 16) = v335;
  sub_20F064B54((uint64_t)&v334);
  v78 = *a3 + 1752;
  if (*(char *)(*a3 + 1775) < 0)
    operator delete(*(void **)v78);
  *(_OWORD *)v78 = v334;
  *(_QWORD *)(v78 + 16) = v335;
  sub_20F064E18((uint64_t)&v334);
  v79 = *a3 + 1776;
  if (*(char *)(*a3 + 1799) < 0)
    operator delete(*(void **)v79);
  *(_OWORD *)v79 = v334;
  *(_QWORD *)(v79 + 16) = v335;
  sub_20F0650DC((uint64_t)&v334);
  v80 = *a3 + 1800;
  if (*(char *)(*a3 + 1823) < 0)
    operator delete(*(void **)v80);
  *(_OWORD *)v80 = v334;
  *(_QWORD *)(v80 + 16) = v335;
  sub_20F0653A0((uint64_t)&v334);
  v81 = *a3 + 1824;
  if (*(char *)(*a3 + 1847) < 0)
    operator delete(*(void **)v81);
  *(_OWORD *)v81 = v334;
  *(_QWORD *)(v81 + 16) = v335;
  sub_20F065664((uint64_t)&v334);
  v82 = *a3 + 1848;
  if (*(char *)(*a3 + 1871) < 0)
    operator delete(*(void **)v82);
  *(_OWORD *)v82 = v334;
  *(_QWORD *)(v82 + 16) = v335;
  sub_20F065928((uint64_t)&v334);
  v83 = *a3 + 1872;
  if (*(char *)(*a3 + 1895) < 0)
    operator delete(*(void **)v83);
  *(_OWORD *)v83 = v334;
  *(_QWORD *)(v83 + 16) = v335;
  sub_20F065BEC((uint64_t)&v334);
  v84 = *a3 + 1896;
  if (*(char *)(*a3 + 1919) < 0)
    operator delete(*(void **)v84);
  *(_OWORD *)v84 = v334;
  *(_QWORD *)(v84 + 16) = v335;
  sub_20F065EB0((uint64_t)&v334);
  v85 = *a3 + 1920;
  if (*(char *)(*a3 + 1943) < 0)
    operator delete(*(void **)v85);
  *(_OWORD *)v85 = v334;
  *(_QWORD *)(v85 + 16) = v335;
  sub_20F066174((uint64_t)&v334);
  v86 = *a3 + 1944;
  if (*(char *)(*a3 + 1967) < 0)
    operator delete(*(void **)v86);
  *(_OWORD *)v86 = v334;
  *(_QWORD *)(v86 + 16) = v335;
  sub_20F066438((uint64_t)&v334);
  v87 = *a3 + 1968;
  if (*(char *)(*a3 + 1991) < 0)
    operator delete(*(void **)v87);
  *(_OWORD *)v87 = v334;
  *(_QWORD *)(v87 + 16) = v335;
  sub_20F0666FC((uint64_t)&v334);
  v88 = *a3 + 1992;
  if (*(char *)(*a3 + 2015) < 0)
    operator delete(*(void **)v88);
  *(_OWORD *)v88 = v334;
  *(_QWORD *)(v88 + 16) = v335;
  sub_20F0669C0((uint64_t)&v334);
  v89 = *a3 + 2016;
  if (*(char *)(*a3 + 2039) < 0)
    operator delete(*(void **)v89);
  *(_OWORD *)v89 = v334;
  *(_QWORD *)(v89 + 16) = v335;
  sub_20F066C84((uint64_t)&v334);
  v90 = *a3 + 2040;
  if (*(char *)(*a3 + 2063) < 0)
    operator delete(*(void **)v90);
  *(_OWORD *)v90 = v334;
  *(_QWORD *)(v90 + 16) = v335;
  sub_20F066F48((uint64_t)&v334);
  v91 = *a3 + 2064;
  if (*(char *)(*a3 + 2087) < 0)
    operator delete(*(void **)v91);
  *(_OWORD *)v91 = v334;
  *(_QWORD *)(v91 + 16) = v335;
  sub_20F06720C((uint64_t)&v334);
  v92 = *a3 + 2088;
  if (*(char *)(*a3 + 2111) < 0)
    operator delete(*(void **)v92);
  *(_OWORD *)v92 = v334;
  *(_QWORD *)(v92 + 16) = v335;
  sub_20F0674D0((uint64_t)&v334);
  v93 = *a3 + 2112;
  if (*(char *)(*a3 + 2135) < 0)
    operator delete(*(void **)v93);
  *(_OWORD *)v93 = v334;
  *(_QWORD *)(v93 + 16) = v335;
  sub_20F067794((uint64_t)&v334);
  v94 = *a3 + 2136;
  if (*(char *)(*a3 + 2159) < 0)
    operator delete(*(void **)v94);
  *(_OWORD *)v94 = v334;
  *(_QWORD *)(v94 + 16) = v335;
  sub_20F067A58((uint64_t)&v334);
  v95 = *a3 + 2160;
  if (*(char *)(*a3 + 2183) < 0)
    operator delete(*(void **)v95);
  *(_OWORD *)v95 = v334;
  *(_QWORD *)(v95 + 16) = v335;
  sub_20F067D1C((uint64_t)&v334);
  v96 = *a3 + 2184;
  if (*(char *)(*a3 + 2207) < 0)
    operator delete(*(void **)v96);
  *(_OWORD *)v96 = v334;
  *(_QWORD *)(v96 + 16) = v335;
  sub_20F067FE0((uint64_t)&v334);
  v97 = *a3 + 2208;
  if (*(char *)(*a3 + 2231) < 0)
    operator delete(*(void **)v97);
  *(_OWORD *)v97 = v334;
  *(_QWORD *)(v97 + 16) = v335;
  sub_20F0682A4((uint64_t)&v334);
  v98 = *a3 + 2232;
  if (*(char *)(*a3 + 2255) < 0)
    operator delete(*(void **)v98);
  *(_OWORD *)v98 = v334;
  *(_QWORD *)(v98 + 16) = v335;
  sub_20F068568((uint64_t)&v334);
  v99 = *a3 + 2256;
  if (*(char *)(*a3 + 2279) < 0)
    operator delete(*(void **)v99);
  *(_OWORD *)v99 = v334;
  *(_QWORD *)(v99 + 16) = v335;
  sub_20F06882C((uint64_t)&v334);
  v100 = *a3 + 2280;
  if (*(char *)(*a3 + 2303) < 0)
    operator delete(*(void **)v100);
  *(_OWORD *)v100 = v334;
  *(_QWORD *)(v100 + 16) = v335;
  sub_20F068AF0((uint64_t)&v334);
  v101 = *a3 + 2304;
  if (*(char *)(*a3 + 2327) < 0)
    operator delete(*(void **)v101);
  *(_OWORD *)v101 = v334;
  *(_QWORD *)(v101 + 16) = v335;
  sub_20F068DB4((uint64_t)&v334);
  v102 = *a3 + 2328;
  if (*(char *)(*a3 + 2351) < 0)
    operator delete(*(void **)v102);
  *(_OWORD *)v102 = v334;
  *(_QWORD *)(v102 + 16) = v335;
  sub_20F069078((uint64_t)&v334);
  v103 = *a3 + 2352;
  if (*(char *)(*a3 + 2375) < 0)
    operator delete(*(void **)v103);
  *(_OWORD *)v103 = v334;
  *(_QWORD *)(v103 + 16) = v335;
  sub_20F06933C((uint64_t)&v334);
  v104 = *a3 + 2376;
  if (*(char *)(*a3 + 2399) < 0)
    operator delete(*(void **)v104);
  *(_OWORD *)v104 = v334;
  *(_QWORD *)(v104 + 16) = v335;
  sub_20F069600((uint64_t)&v334);
  v105 = *a3 + 2400;
  if (*(char *)(*a3 + 2423) < 0)
    operator delete(*(void **)v105);
  *(_OWORD *)v105 = v334;
  *(_QWORD *)(v105 + 16) = v335;
  sub_20F0698C4((uint64_t)&v334);
  v106 = *a3 + 2424;
  if (*(char *)(*a3 + 2447) < 0)
    operator delete(*(void **)v106);
  *(_OWORD *)v106 = v334;
  *(_QWORD *)(v106 + 16) = v335;
  sub_20F069B88((uint64_t)&v334);
  v107 = *a3 + 2448;
  if (*(char *)(*a3 + 2471) < 0)
    operator delete(*(void **)v107);
  *(_OWORD *)v107 = v334;
  *(_QWORD *)(v107 + 16) = v335;
  sub_20F069E4C((uint64_t)&v334);
  v108 = *a3 + 2472;
  if (*(char *)(*a3 + 2495) < 0)
    operator delete(*(void **)v108);
  *(_OWORD *)v108 = v334;
  *(_QWORD *)(v108 + 16) = v335;
  sub_20F06A110((uint64_t)&v334);
  v109 = *a3 + 2496;
  if (*(char *)(*a3 + 2519) < 0)
    operator delete(*(void **)v109);
  *(_OWORD *)v109 = v334;
  *(_QWORD *)(v109 + 16) = v335;
  sub_20F06A3D4((uint64_t)&v334);
  v110 = *a3 + 2520;
  if (*(char *)(*a3 + 2543) < 0)
    operator delete(*(void **)v110);
  *(_OWORD *)v110 = v334;
  *(_QWORD *)(v110 + 16) = v335;
  sub_20F06A698((uint64_t)&v334);
  v111 = *a3 + 2544;
  if (*(char *)(*a3 + 2567) < 0)
    operator delete(*(void **)v111);
  *(_OWORD *)v111 = v334;
  *(_QWORD *)(v111 + 16) = v335;
  sub_20F06A95C((uint64_t)&v334);
  v112 = *a3 + 2568;
  if (*(char *)(*a3 + 2591) < 0)
    operator delete(*(void **)v112);
  *(_OWORD *)v112 = v334;
  *(_QWORD *)(v112 + 16) = v335;
  sub_20F06AC20((uint64_t)&v334);
  v113 = *a3 + 2592;
  if (*(char *)(*a3 + 2615) < 0)
    operator delete(*(void **)v113);
  *(_OWORD *)v113 = v334;
  *(_QWORD *)(v113 + 16) = v335;
  sub_20F06AEE4((uint64_t)&v334);
  v114 = *a3 + 2616;
  if (*(char *)(*a3 + 2639) < 0)
    operator delete(*(void **)v114);
  *(_OWORD *)v114 = v334;
  *(_QWORD *)(v114 + 16) = v335;
  sub_20F06B1A8((uint64_t)&v334);
  v115 = *a3 + 2640;
  if (*(char *)(*a3 + 2663) < 0)
    operator delete(*(void **)v115);
  *(_OWORD *)v115 = v334;
  *(_QWORD *)(v115 + 16) = v335;
  sub_20F06B46C((uint64_t)&v334);
  v116 = *a3 + 2664;
  if (*(char *)(*a3 + 2687) < 0)
    operator delete(*(void **)v116);
  *(_OWORD *)v116 = v334;
  *(_QWORD *)(v116 + 16) = v335;
  sub_20F06B730((uint64_t)&v334);
  v117 = *a3 + 2688;
  if (*(char *)(*a3 + 2711) < 0)
    operator delete(*(void **)v117);
  *(_OWORD *)v117 = v334;
  *(_QWORD *)(v117 + 16) = v335;
  sub_20F06B9F4((uint64_t)&v334);
  v118 = *a3 + 2712;
  if (*(char *)(*a3 + 2735) < 0)
    operator delete(*(void **)v118);
  *(_OWORD *)v118 = v334;
  *(_QWORD *)(v118 + 16) = v335;
  sub_20F06BCB8((uint64_t)&v334);
  v119 = *a3 + 2736;
  if (*(char *)(*a3 + 2759) < 0)
    operator delete(*(void **)v119);
  *(_OWORD *)v119 = v334;
  *(_QWORD *)(v119 + 16) = v335;
  sub_20F06BF7C((uint64_t)&v334);
  v120 = *a3 + 2760;
  if (*(char *)(*a3 + 2783) < 0)
    operator delete(*(void **)v120);
  *(_OWORD *)v120 = v334;
  *(_QWORD *)(v120 + 16) = v335;
  sub_20F06C240((uint64_t)&v334);
  v121 = *a3 + 2784;
  if (*(char *)(*a3 + 2807) < 0)
    operator delete(*(void **)v121);
  *(_OWORD *)v121 = v334;
  *(_QWORD *)(v121 + 16) = v335;
  sub_20F06C504((uint64_t)&v334);
  v122 = *a3 + 2808;
  if (*(char *)(*a3 + 2831) < 0)
    operator delete(*(void **)v122);
  *(_OWORD *)v122 = v334;
  *(_QWORD *)(v122 + 16) = v335;
  sub_20F06C7C8((uint64_t)&v334);
  v123 = *a3 + 2832;
  if (*(char *)(*a3 + 2855) < 0)
    operator delete(*(void **)v123);
  *(_OWORD *)v123 = v334;
  *(_QWORD *)(v123 + 16) = v335;
  sub_20F06CA8C((uint64_t)&v334);
  v124 = *a3 + 2856;
  if (*(char *)(*a3 + 2879) < 0)
    operator delete(*(void **)v124);
  *(_OWORD *)v124 = v334;
  *(_QWORD *)(v124 + 16) = v335;
  sub_20F06CD50((uint64_t)&v334);
  v125 = *a3 + 2880;
  if (*(char *)(*a3 + 2903) < 0)
    operator delete(*(void **)v125);
  *(_OWORD *)v125 = v334;
  *(_QWORD *)(v125 + 16) = v335;
  sub_20F06D014((uint64_t)&v334);
  v126 = *a3 + 2904;
  if (*(char *)(*a3 + 2927) < 0)
    operator delete(*(void **)v126);
  *(_OWORD *)v126 = v334;
  *(_QWORD *)(v126 + 16) = v335;
  sub_20F06D2D8((uint64_t)&v334);
  v127 = *a3 + 2928;
  if (*(char *)(*a3 + 2951) < 0)
    operator delete(*(void **)v127);
  *(_OWORD *)v127 = v334;
  *(_QWORD *)(v127 + 16) = v335;
  sub_20F06D59C((uint64_t)&v334);
  v128 = *a3 + 2952;
  if (*(char *)(*a3 + 2975) < 0)
    operator delete(*(void **)v128);
  *(_OWORD *)v128 = v334;
  *(_QWORD *)(v128 + 16) = v335;
  sub_20F06D860((uint64_t)&v334);
  v129 = *a3 + 2976;
  if (*(char *)(*a3 + 2999) < 0)
    operator delete(*(void **)v129);
  *(_OWORD *)v129 = v334;
  *(_QWORD *)(v129 + 16) = v335;
  sub_20F06DB24((uint64_t)&v334);
  v130 = *a3 + 3000;
  if (*(char *)(*a3 + 3023) < 0)
    operator delete(*(void **)v130);
  *(_OWORD *)v130 = v334;
  *(_QWORD *)(v130 + 16) = v335;
  sub_20F06DDE8((uint64_t)&v334);
  v131 = *a3 + 3024;
  if (*(char *)(*a3 + 3047) < 0)
    operator delete(*(void **)v131);
  *(_OWORD *)v131 = v334;
  *(_QWORD *)(v131 + 16) = v335;
  sub_20F06E0AC((uint64_t)&v334);
  v132 = *a3 + 3048;
  if (*(char *)(*a3 + 3071) < 0)
    operator delete(*(void **)v132);
  *(_OWORD *)v132 = v334;
  *(_QWORD *)(v132 + 16) = v335;
  sub_20F06E370((uint64_t)&v334);
  v133 = *a3 + 3072;
  if (*(char *)(*a3 + 3095) < 0)
    operator delete(*(void **)v133);
  *(_OWORD *)v133 = v334;
  *(_QWORD *)(v133 + 16) = v335;
  sub_20F06E634((uint64_t)&v334);
  v134 = *a3 + 3096;
  if (*(char *)(*a3 + 3119) < 0)
    operator delete(*(void **)v134);
  *(_OWORD *)v134 = v334;
  *(_QWORD *)(v134 + 16) = v335;
  sub_20F06E8F8((uint64_t)&v334);
  v135 = *a3 + 3120;
  if (*(char *)(*a3 + 3143) < 0)
    operator delete(*(void **)v135);
  *(_OWORD *)v135 = v334;
  *(_QWORD *)(v135 + 16) = v335;
  sub_20F06EBBC((uint64_t)&v334);
  v136 = *a3 + 3144;
  if (*(char *)(*a3 + 3167) < 0)
    operator delete(*(void **)v136);
  *(_OWORD *)v136 = v334;
  *(_QWORD *)(v136 + 16) = v335;
  sub_20F06EE80((uint64_t)&v334);
  v137 = *a3 + 3168;
  if (*(char *)(*a3 + 3191) < 0)
    operator delete(*(void **)v137);
  *(_OWORD *)v137 = v334;
  *(_QWORD *)(v137 + 16) = v335;
  sub_20F06F144((uint64_t)&v334);
  v138 = *a3 + 3192;
  if (*(char *)(*a3 + 3215) < 0)
    operator delete(*(void **)v138);
  *(_OWORD *)v138 = v334;
  *(_QWORD *)(v138 + 16) = v335;
  sub_20F06F408((uint64_t)&v334);
  v139 = *a3 + 3216;
  if (*(char *)(*a3 + 3239) < 0)
    operator delete(*(void **)v139);
  *(_OWORD *)v139 = v334;
  *(_QWORD *)(v139 + 16) = v335;
  sub_20F06F6CC((uint64_t)&v334);
  v140 = *a3 + 3240;
  if (*(char *)(*a3 + 3263) < 0)
    operator delete(*(void **)v140);
  *(_OWORD *)v140 = v334;
  *(_QWORD *)(v140 + 16) = v335;
  sub_20F06F990((uint64_t)&v334);
  v141 = *a3 + 3264;
  if (*(char *)(*a3 + 3287) < 0)
    operator delete(*(void **)v141);
  *(_OWORD *)v141 = v334;
  *(_QWORD *)(v141 + 16) = v335;
  sub_20F06FC54((uint64_t)&v334);
  v142 = *a3 + 3288;
  if (*(char *)(*a3 + 3311) < 0)
    operator delete(*(void **)v142);
  *(_OWORD *)v142 = v334;
  *(_QWORD *)(v142 + 16) = v335;
  sub_20F06FF18((uint64_t)&v334);
  v143 = *a3 + 3312;
  if (*(char *)(*a3 + 3335) < 0)
    operator delete(*(void **)v143);
  *(_OWORD *)v143 = v334;
  *(_QWORD *)(v143 + 16) = v335;
  sub_20F0701DC((uint64_t)&v334);
  v144 = *a3 + 3336;
  if (*(char *)(*a3 + 3359) < 0)
    operator delete(*(void **)v144);
  *(_OWORD *)v144 = v334;
  *(_QWORD *)(v144 + 16) = v335;
  sub_20F0704A0((uint64_t)&v334);
  v145 = *a3 + 3360;
  if (*(char *)(*a3 + 3383) < 0)
    operator delete(*(void **)v145);
  *(_OWORD *)v145 = v334;
  *(_QWORD *)(v145 + 16) = v335;
  sub_20F070764((uint64_t)&v334);
  v146 = *a3 + 3384;
  if (*(char *)(*a3 + 3407) < 0)
    operator delete(*(void **)v146);
  *(_OWORD *)v146 = v334;
  *(_QWORD *)(v146 + 16) = v335;
  sub_20F070A28((uint64_t)&v334);
  v147 = *a3 + 3408;
  if (*(char *)(*a3 + 3431) < 0)
    operator delete(*(void **)v147);
  *(_OWORD *)v147 = v334;
  *(_QWORD *)(v147 + 16) = v335;
  sub_20F070CEC((uint64_t)&v334);
  v148 = *a3 + 3432;
  if (*(char *)(*a3 + 3455) < 0)
    operator delete(*(void **)v148);
  *(_OWORD *)v148 = v334;
  *(_QWORD *)(v148 + 16) = v335;
  sub_20F070FB0((uint64_t)&v334);
  v149 = *a3 + 3456;
  if (*(char *)(*a3 + 3479) < 0)
    operator delete(*(void **)v149);
  *(_OWORD *)v149 = v334;
  *(_QWORD *)(v149 + 16) = v335;
  sub_20F071274((uint64_t)&v334);
  v150 = *a3 + 3480;
  if (*(char *)(*a3 + 3503) < 0)
    operator delete(*(void **)v150);
  *(_OWORD *)v150 = v334;
  *(_QWORD *)(v150 + 16) = v335;
  sub_20F071538((uint64_t)&v334);
  v151 = *a3 + 3504;
  if (*(char *)(*a3 + 3527) < 0)
    operator delete(*(void **)v151);
  *(_OWORD *)v151 = v334;
  *(_QWORD *)(v151 + 16) = v335;
  sub_20F0717FC((uint64_t)&v334);
  v152 = *a3 + 3528;
  if (*(char *)(*a3 + 3551) < 0)
    operator delete(*(void **)v152);
  *(_OWORD *)v152 = v334;
  *(_QWORD *)(v152 + 16) = v335;
  sub_20F071AC0((uint64_t)&v334);
  v153 = *a3 + 3552;
  if (*(char *)(*a3 + 3575) < 0)
    operator delete(*(void **)v153);
  *(_OWORD *)v153 = v334;
  *(_QWORD *)(v153 + 16) = v335;
  sub_20F071D84((uint64_t)&v334);
  v154 = *a3 + 3576;
  if (*(char *)(*a3 + 3599) < 0)
    operator delete(*(void **)v154);
  *(_OWORD *)v154 = v334;
  *(_QWORD *)(v154 + 16) = v335;
  sub_20F072048((uint64_t)&v334);
  v155 = *a3 + 3600;
  if (*(char *)(*a3 + 3623) < 0)
    operator delete(*(void **)v155);
  *(_OWORD *)v155 = v334;
  *(_QWORD *)(v155 + 16) = v335;
  sub_20F07230C((uint64_t)&v334);
  v156 = *a3 + 3624;
  if (*(char *)(*a3 + 3647) < 0)
    operator delete(*(void **)v156);
  *(_OWORD *)v156 = v334;
  *(_QWORD *)(v156 + 16) = v335;
  sub_20F0725D0((uint64_t)&v334);
  v157 = *a3 + 3648;
  if (*(char *)(*a3 + 3671) < 0)
    operator delete(*(void **)v157);
  *(_OWORD *)v157 = v334;
  *(_QWORD *)(v157 + 16) = v335;
  sub_20F072894((uint64_t)&v334);
  v158 = *a3 + 3672;
  if (*(char *)(*a3 + 3695) < 0)
    operator delete(*(void **)v158);
  *(_OWORD *)v158 = v334;
  *(_QWORD *)(v158 + 16) = v335;
  sub_20F072B58((uint64_t)&v334);
  v159 = *a3 + 3696;
  if (*(char *)(*a3 + 3719) < 0)
    operator delete(*(void **)v159);
  *(_OWORD *)v159 = v334;
  *(_QWORD *)(v159 + 16) = v335;
  sub_20F072E1C((uint64_t)&v334);
  v160 = *a3 + 3720;
  if (*(char *)(*a3 + 3743) < 0)
    operator delete(*(void **)v160);
  *(_OWORD *)v160 = v334;
  *(_QWORD *)(v160 + 16) = v335;
  sub_20F0730E0((uint64_t)&v334);
  v161 = *a3 + 3744;
  if (*(char *)(*a3 + 3767) < 0)
    operator delete(*(void **)v161);
  *(_OWORD *)v161 = v334;
  *(_QWORD *)(v161 + 16) = v335;
  sub_20F0733A4((uint64_t)&v334);
  v162 = *a3 + 3768;
  if (*(char *)(*a3 + 3791) < 0)
    operator delete(*(void **)v162);
  *(_OWORD *)v162 = v334;
  *(_QWORD *)(v162 + 16) = v335;
  sub_20F073668((uint64_t)&v334);
  v163 = *a3 + 3792;
  if (*(char *)(*a3 + 3815) < 0)
    operator delete(*(void **)v163);
  *(_OWORD *)v163 = v334;
  *(_QWORD *)(v163 + 16) = v335;
  sub_20F07392C((uint64_t)&v334);
  v164 = *a3 + 3816;
  if (*(char *)(*a3 + 3839) < 0)
    operator delete(*(void **)v164);
  *(_OWORD *)v164 = v334;
  *(_QWORD *)(v164 + 16) = v335;
  sub_20F073BF0((uint64_t)&v334);
  v165 = *a3 + 3840;
  if (*(char *)(*a3 + 3863) < 0)
    operator delete(*(void **)v165);
  *(_OWORD *)v165 = v334;
  *(_QWORD *)(v165 + 16) = v335;
  sub_20F073EB4((uint64_t)&v334);
  v166 = *a3 + 3864;
  if (*(char *)(*a3 + 3887) < 0)
    operator delete(*(void **)v166);
  *(_OWORD *)v166 = v334;
  *(_QWORD *)(v166 + 16) = v335;
  sub_20F074178((uint64_t)&v334);
  v167 = *a3 + 3888;
  if (*(char *)(*a3 + 3911) < 0)
    operator delete(*(void **)v167);
  *(_OWORD *)v167 = v334;
  *(_QWORD *)(v167 + 16) = v335;
  sub_20F07443C((uint64_t)&v334);
  v168 = *a3 + 3912;
  if (*(char *)(*a3 + 3935) < 0)
    operator delete(*(void **)v168);
  *(_OWORD *)v168 = v334;
  *(_QWORD *)(v168 + 16) = v335;
  sub_20F074700((uint64_t)&v334);
  v169 = *a3 + 3936;
  if (*(char *)(*a3 + 3959) < 0)
    operator delete(*(void **)v169);
  *(_OWORD *)v169 = v334;
  *(_QWORD *)(v169 + 16) = v335;
  sub_20F0749C4((uint64_t)&v334);
  v170 = *a3 + 3960;
  if (*(char *)(*a3 + 3983) < 0)
    operator delete(*(void **)v170);
  *(_OWORD *)v170 = v334;
  *(_QWORD *)(v170 + 16) = v335;
  sub_20F074C88((uint64_t)&v334);
  v171 = *a3 + 3984;
  if (*(char *)(*a3 + 4007) < 0)
    operator delete(*(void **)v171);
  *(_OWORD *)v171 = v334;
  *(_QWORD *)(v171 + 16) = v335;
  sub_20F074F4C((uint64_t)&v334);
  v172 = *a3 + 4008;
  if (*(char *)(*a3 + 4031) < 0)
    operator delete(*(void **)v172);
  *(_OWORD *)v172 = v334;
  *(_QWORD *)(v172 + 16) = v335;
  sub_20F075210((uint64_t)&v334);
  v173 = *a3 + 4032;
  if (*(char *)(*a3 + 4055) < 0)
    operator delete(*(void **)v173);
  *(_OWORD *)v173 = v334;
  *(_QWORD *)(v173 + 16) = v335;
  sub_20F0754D4((uint64_t)&v334);
  v174 = *a3 + 4056;
  if (*(char *)(*a3 + 4079) < 0)
    operator delete(*(void **)v174);
  *(_OWORD *)v174 = v334;
  *(_QWORD *)(v174 + 16) = v335;
  sub_20F075798((uint64_t)&v334);
  v175 = *a3 + 4080;
  if (*(char *)(*a3 + 4103) < 0)
    operator delete(*(void **)v175);
  *(_OWORD *)v175 = v334;
  *(_QWORD *)(v175 + 16) = v335;
  sub_20F075A5C((uint64_t)&v334);
  v176 = *a3 + 4104;
  if (*(char *)(*a3 + 4127) < 0)
    operator delete(*(void **)v176);
  *(_OWORD *)v176 = v334;
  *(_QWORD *)(v176 + 16) = v335;
  sub_20F075D20((uint64_t)&v334);
  v177 = *a3 + 4128;
  if (*(char *)(*a3 + 4151) < 0)
    operator delete(*(void **)v177);
  *(_OWORD *)v177 = v334;
  *(_QWORD *)(v177 + 16) = v335;
  sub_20F075FE4((uint64_t)&v334);
  v178 = *a3 + 4152;
  if (*(char *)(*a3 + 4175) < 0)
    operator delete(*(void **)v178);
  *(_OWORD *)v178 = v334;
  *(_QWORD *)(v178 + 16) = v335;
  sub_20F0762A8((uint64_t)&v334);
  v179 = *a3 + 4176;
  if (*(char *)(*a3 + 4199) < 0)
    operator delete(*(void **)v179);
  *(_OWORD *)v179 = v334;
  *(_QWORD *)(v179 + 16) = v335;
  sub_20F07656C((uint64_t)&v334);
  v180 = *a3 + 4200;
  if (*(char *)(*a3 + 4223) < 0)
    operator delete(*(void **)v180);
  *(_OWORD *)v180 = v334;
  *(_QWORD *)(v180 + 16) = v335;
  sub_20F076830((uint64_t)&v334);
  v181 = *a3 + 4224;
  if (*(char *)(*a3 + 4247) < 0)
    operator delete(*(void **)v181);
  *(_OWORD *)v181 = v334;
  *(_QWORD *)(v181 + 16) = v335;
  sub_20F076AF4((uint64_t)&v334);
  v182 = *a3 + 4248;
  if (*(char *)(*a3 + 4271) < 0)
    operator delete(*(void **)v182);
  *(_OWORD *)v182 = v334;
  *(_QWORD *)(v182 + 16) = v335;
  sub_20F076DB8((uint64_t)&v334);
  v183 = *a3 + 4272;
  if (*(char *)(*a3 + 4295) < 0)
    operator delete(*(void **)v183);
  *(_OWORD *)v183 = v334;
  *(_QWORD *)(v183 + 16) = v335;
  sub_20F07707C((uint64_t)&v334);
  v184 = *a3 + 4296;
  if (*(char *)(*a3 + 4319) < 0)
    operator delete(*(void **)v184);
  *(_OWORD *)v184 = v334;
  *(_QWORD *)(v184 + 16) = v335;
  sub_20F077340((uint64_t)&v334);
  v185 = *a3 + 4320;
  if (*(char *)(*a3 + 4343) < 0)
    operator delete(*(void **)v185);
  *(_OWORD *)v185 = v334;
  *(_QWORD *)(v185 + 16) = v335;
  sub_20F077604((uint64_t)&v334);
  v186 = *a3 + 4344;
  if (*(char *)(*a3 + 4367) < 0)
    operator delete(*(void **)v186);
  *(_OWORD *)v186 = v334;
  *(_QWORD *)(v186 + 16) = v335;
  sub_20F0778C8((uint64_t)&v334);
  v187 = *a3 + 4368;
  if (*(char *)(*a3 + 4391) < 0)
    operator delete(*(void **)v187);
  *(_OWORD *)v187 = v334;
  *(_QWORD *)(v187 + 16) = v335;
  sub_20F077B8C((uint64_t)&v334);
  v188 = *a3 + 4392;
  if (*(char *)(*a3 + 4415) < 0)
    operator delete(*(void **)v188);
  *(_OWORD *)v188 = v334;
  *(_QWORD *)(v188 + 16) = v335;
  sub_20F077E50((uint64_t)&v334);
  v189 = *a3 + 4416;
  if (*(char *)(*a3 + 4439) < 0)
    operator delete(*(void **)v189);
  *(_OWORD *)v189 = v334;
  *(_QWORD *)(v189 + 16) = v335;
  sub_20F078114((uint64_t)&v334);
  v190 = *a3 + 4440;
  if (*(char *)(*a3 + 4463) < 0)
    operator delete(*(void **)v190);
  *(_OWORD *)v190 = v334;
  *(_QWORD *)(v190 + 16) = v335;
  sub_20F0783D8((uint64_t)&v334);
  v191 = *a3 + 4464;
  if (*(char *)(*a3 + 4487) < 0)
    operator delete(*(void **)v191);
  *(_OWORD *)v191 = v334;
  *(_QWORD *)(v191 + 16) = v335;
  sub_20F07869C((uint64_t)&v334);
  v192 = *a3 + 4488;
  if (*(char *)(*a3 + 4511) < 0)
    operator delete(*(void **)v192);
  *(_OWORD *)v192 = v334;
  *(_QWORD *)(v192 + 16) = v335;
  sub_20F078960((uint64_t)&v334);
  v193 = *a3 + 4512;
  if (*(char *)(*a3 + 4535) < 0)
    operator delete(*(void **)v193);
  *(_OWORD *)v193 = v334;
  *(_QWORD *)(v193 + 16) = v335;
  sub_20F078C24((uint64_t)&v334);
  v194 = *a3 + 4536;
  if (*(char *)(*a3 + 4559) < 0)
    operator delete(*(void **)v194);
  *(_OWORD *)v194 = v334;
  *(_QWORD *)(v194 + 16) = v335;
  sub_20F078EE8((uint64_t)&v334);
  v195 = *a3 + 4560;
  if (*(char *)(*a3 + 4583) < 0)
    operator delete(*(void **)v195);
  *(_OWORD *)v195 = v334;
  *(_QWORD *)(v195 + 16) = v335;
  sub_20F0791AC((uint64_t)&v334);
  v196 = *a3 + 4584;
  if (*(char *)(*a3 + 4607) < 0)
    operator delete(*(void **)v196);
  *(_OWORD *)v196 = v334;
  *(_QWORD *)(v196 + 16) = v335;
  sub_20F079470((uint64_t)&v334);
  v197 = *a3 + 4608;
  if (*(char *)(*a3 + 4631) < 0)
    operator delete(*(void **)v197);
  *(_OWORD *)v197 = v334;
  *(_QWORD *)(v197 + 16) = v335;
  sub_20F079734((uint64_t)&v334);
  v198 = *a3 + 4632;
  if (*(char *)(*a3 + 4655) < 0)
    operator delete(*(void **)v198);
  *(_OWORD *)v198 = v334;
  *(_QWORD *)(v198 + 16) = v335;
  sub_20F0799F8((uint64_t)&v334);
  v199 = *a3 + 4656;
  if (*(char *)(*a3 + 4679) < 0)
    operator delete(*(void **)v199);
  *(_OWORD *)v199 = v334;
  *(_QWORD *)(v199 + 16) = v335;
  sub_20F079CBC((uint64_t)&v334);
  v200 = *a3 + 4680;
  if (*(char *)(*a3 + 4703) < 0)
    operator delete(*(void **)v200);
  *(_OWORD *)v200 = v334;
  *(_QWORD *)(v200 + 16) = v335;
  sub_20F079F80((uint64_t)&v334);
  v201 = *a3 + 4704;
  if (*(char *)(*a3 + 4727) < 0)
    operator delete(*(void **)v201);
  *(_OWORD *)v201 = v334;
  *(_QWORD *)(v201 + 16) = v335;
  sub_20F07A244((uint64_t)&v334);
  v202 = *a3 + 4728;
  if (*(char *)(*a3 + 4751) < 0)
    operator delete(*(void **)v202);
  *(_OWORD *)v202 = v334;
  *(_QWORD *)(v202 + 16) = v335;
  sub_20F07A508((uint64_t)&v334);
  v203 = *a3 + 4752;
  if (*(char *)(*a3 + 4775) < 0)
    operator delete(*(void **)v203);
  *(_OWORD *)v203 = v334;
  *(_QWORD *)(v203 + 16) = v335;
  sub_20F07A7CC((uint64_t)&v334);
  v204 = *a3 + 4776;
  if (*(char *)(*a3 + 4799) < 0)
    operator delete(*(void **)v204);
  *(_OWORD *)v204 = v334;
  *(_QWORD *)(v204 + 16) = v335;
  sub_20F07AA90((uint64_t)&v334);
  v205 = *a3 + 4800;
  if (*(char *)(*a3 + 4823) < 0)
    operator delete(*(void **)v205);
  *(_OWORD *)v205 = v334;
  *(_QWORD *)(v205 + 16) = v335;
  sub_20F07AD54((uint64_t)&v334);
  v206 = *a3 + 4824;
  if (*(char *)(*a3 + 4847) < 0)
    operator delete(*(void **)v206);
  *(_OWORD *)v206 = v334;
  *(_QWORD *)(v206 + 16) = v335;
  sub_20F07B018((uint64_t)&v334);
  v207 = *a3 + 4848;
  if (*(char *)(*a3 + 4871) < 0)
    operator delete(*(void **)v207);
  *(_OWORD *)v207 = v334;
  *(_QWORD *)(v207 + 16) = v335;
  sub_20F07B2DC((uint64_t)&v334);
  v208 = *a3 + 4872;
  if (*(char *)(*a3 + 4895) < 0)
    operator delete(*(void **)v208);
  *(_OWORD *)v208 = v334;
  *(_QWORD *)(v208 + 16) = v335;
  sub_20F07B5A0((uint64_t)&v334);
  v209 = *a3 + 4896;
  if (*(char *)(*a3 + 4919) < 0)
    operator delete(*(void **)v209);
  *(_OWORD *)v209 = v334;
  *(_QWORD *)(v209 + 16) = v335;
  sub_20F07B864((uint64_t)&v334);
  v210 = *a3 + 4920;
  if (*(char *)(*a3 + 4943) < 0)
    operator delete(*(void **)v210);
  *(_OWORD *)v210 = v334;
  *(_QWORD *)(v210 + 16) = v335;
  sub_20F07BB28((uint64_t)&v334);
  v211 = *a3 + 4944;
  if (*(char *)(*a3 + 4967) < 0)
    operator delete(*(void **)v211);
  *(_OWORD *)v211 = v334;
  *(_QWORD *)(v211 + 16) = v335;
  sub_20F07BDEC((uint64_t)&v334);
  v212 = *a3 + 4968;
  if (*(char *)(*a3 + 4991) < 0)
    operator delete(*(void **)v212);
  *(_OWORD *)v212 = v334;
  *(_QWORD *)(v212 + 16) = v335;
  sub_20F07C0B0((uint64_t)&v334);
  v213 = *a3 + 4992;
  if (*(char *)(*a3 + 5015) < 0)
    operator delete(*(void **)v213);
  *(_OWORD *)v213 = v334;
  *(_QWORD *)(v213 + 16) = v335;
  sub_20F07C374((uint64_t)&v334);
  v214 = *a3 + 5016;
  if (*(char *)(*a3 + 5039) < 0)
    operator delete(*(void **)v214);
  *(_OWORD *)v214 = v334;
  *(_QWORD *)(v214 + 16) = v335;
  sub_20F07C638((uint64_t)&v334);
  v215 = *a3 + 5040;
  if (*(char *)(*a3 + 5063) < 0)
    operator delete(*(void **)v215);
  *(_OWORD *)v215 = v334;
  *(_QWORD *)(v215 + 16) = v335;
  sub_20F07C8FC((uint64_t)&v334);
  v216 = *a3 + 5064;
  if (*(char *)(*a3 + 5087) < 0)
    operator delete(*(void **)v216);
  *(_OWORD *)v216 = v334;
  *(_QWORD *)(v216 + 16) = v335;
  sub_20F07CBC0((uint64_t)&v334);
  v217 = *a3 + 5088;
  if (*(char *)(*a3 + 5111) < 0)
    operator delete(*(void **)v217);
  *(_OWORD *)v217 = v334;
  *(_QWORD *)(v217 + 16) = v335;
  sub_20F07CE84((uint64_t)&v334);
  v218 = *a3 + 5112;
  if (*(char *)(*a3 + 5135) < 0)
    operator delete(*(void **)v218);
  *(_OWORD *)v218 = v334;
  *(_QWORD *)(v218 + 16) = v335;
  sub_20F07D148((uint64_t)&v334);
  v219 = *a3 + 5136;
  if (*(char *)(*a3 + 5159) < 0)
    operator delete(*(void **)v219);
  *(_OWORD *)v219 = v334;
  *(_QWORD *)(v219 + 16) = v335;
  sub_20F07D40C((uint64_t)&v334);
  v220 = *a3 + 5160;
  if (*(char *)(*a3 + 5183) < 0)
    operator delete(*(void **)v220);
  *(_OWORD *)v220 = v334;
  *(_QWORD *)(v220 + 16) = v335;
  sub_20F07D6D0((uint64_t)&v334);
  v221 = *a3 + 5184;
  if (*(char *)(*a3 + 5207) < 0)
    operator delete(*(void **)v221);
  *(_OWORD *)v221 = v334;
  *(_QWORD *)(v221 + 16) = v335;
  sub_20F07D994((uint64_t)&v334);
  v222 = *a3 + 5208;
  if (*(char *)(*a3 + 5231) < 0)
    operator delete(*(void **)v222);
  *(_OWORD *)v222 = v334;
  *(_QWORD *)(v222 + 16) = v335;
  sub_20F07DC58((uint64_t)&v334);
  v223 = *a3 + 5232;
  if (*(char *)(*a3 + 5255) < 0)
    operator delete(*(void **)v223);
  *(_OWORD *)v223 = v334;
  *(_QWORD *)(v223 + 16) = v335;
  sub_20F07DF1C((uint64_t)&v334);
  v224 = *a3 + 5256;
  if (*(char *)(*a3 + 5279) < 0)
    operator delete(*(void **)v224);
  *(_OWORD *)v224 = v334;
  *(_QWORD *)(v224 + 16) = v335;
  sub_20F07E1E0((uint64_t)&v334);
  v225 = *a3 + 5280;
  if (*(char *)(*a3 + 5303) < 0)
    operator delete(*(void **)v225);
  *(_OWORD *)v225 = v334;
  *(_QWORD *)(v225 + 16) = v335;
  sub_20F07E4A4((uint64_t)&v334);
  v226 = *a3 + 5304;
  if (*(char *)(*a3 + 5327) < 0)
    operator delete(*(void **)v226);
  *(_OWORD *)v226 = v334;
  *(_QWORD *)(v226 + 16) = v335;
  sub_20F07E768((uint64_t)&v334);
  v227 = *a3 + 5328;
  if (*(char *)(*a3 + 5351) < 0)
    operator delete(*(void **)v227);
  *(_OWORD *)v227 = v334;
  *(_QWORD *)(v227 + 16) = v335;
  sub_20F07EA2C((uint64_t)&v334);
  v228 = *a3 + 5352;
  if (*(char *)(*a3 + 5375) < 0)
    operator delete(*(void **)v228);
  *(_OWORD *)v228 = v334;
  *(_QWORD *)(v228 + 16) = v335;
  sub_20F07ECF0((uint64_t)&v334);
  v229 = *a3 + 5376;
  if (*(char *)(*a3 + 5399) < 0)
    operator delete(*(void **)v229);
  *(_OWORD *)v229 = v334;
  *(_QWORD *)(v229 + 16) = v335;
  sub_20F07EFB4((uint64_t)&v334);
  v230 = *a3 + 5400;
  if (*(char *)(*a3 + 5423) < 0)
    operator delete(*(void **)v230);
  *(_OWORD *)v230 = v334;
  *(_QWORD *)(v230 + 16) = v335;
  sub_20F07F278((uint64_t)&v334);
  v231 = *a3 + 5424;
  if (*(char *)(*a3 + 5447) < 0)
    operator delete(*(void **)v231);
  *(_OWORD *)v231 = v334;
  *(_QWORD *)(v231 + 16) = v335;
  sub_20F07F53C((uint64_t)&v334);
  v232 = *a3 + 5448;
  if (*(char *)(*a3 + 5471) < 0)
    operator delete(*(void **)v232);
  *(_OWORD *)v232 = v334;
  *(_QWORD *)(v232 + 16) = v335;
  sub_20F07F800((uint64_t)&v334);
  v233 = *a3 + 5472;
  if (*(char *)(*a3 + 5495) < 0)
    operator delete(*(void **)v233);
  *(_OWORD *)v233 = v334;
  *(_QWORD *)(v233 + 16) = v335;
  sub_20F07FAC4((uint64_t)&v334);
  v234 = *a3 + 5496;
  if (*(char *)(*a3 + 5519) < 0)
    operator delete(*(void **)v234);
  *(_OWORD *)v234 = v334;
  *(_QWORD *)(v234 + 16) = v335;
  sub_20F07FD88((uint64_t)&v334);
  v235 = *a3 + 5520;
  if (*(char *)(*a3 + 5543) < 0)
    operator delete(*(void **)v235);
  *(_OWORD *)v235 = v334;
  *(_QWORD *)(v235 + 16) = v335;
  sub_20F08004C((uint64_t)&v334);
  v236 = *a3 + 5544;
  if (*(char *)(*a3 + 5567) < 0)
    operator delete(*(void **)v236);
  *(_OWORD *)v236 = v334;
  *(_QWORD *)(v236 + 16) = v335;
  sub_20F080310((uint64_t)&v334);
  v237 = *a3 + 5568;
  if (*(char *)(*a3 + 5591) < 0)
    operator delete(*(void **)v237);
  *(_OWORD *)v237 = v334;
  *(_QWORD *)(v237 + 16) = v335;
  sub_20F0805D4((uint64_t)&v334);
  v238 = *a3 + 5592;
  if (*(char *)(*a3 + 5615) < 0)
    operator delete(*(void **)v238);
  *(_OWORD *)v238 = v334;
  *(_QWORD *)(v238 + 16) = v335;
  sub_20F080898((uint64_t)&v334);
  v239 = *a3 + 5616;
  if (*(char *)(*a3 + 5639) < 0)
    operator delete(*(void **)v239);
  *(_OWORD *)v239 = v334;
  *(_QWORD *)(v239 + 16) = v335;
  sub_20F080B5C((uint64_t)&v334);
  v240 = *a3 + 5640;
  if (*(char *)(*a3 + 5663) < 0)
    operator delete(*(void **)v240);
  *(_OWORD *)v240 = v334;
  *(_QWORD *)(v240 + 16) = v335;
  sub_20F080E20((uint64_t)&v334);
  v241 = *a3 + 5664;
  if (*(char *)(*a3 + 5687) < 0)
    operator delete(*(void **)v241);
  *(_OWORD *)v241 = v334;
  *(_QWORD *)(v241 + 16) = v335;
  sub_20F0810E4((uint64_t)&v334);
  v242 = *a3 + 5688;
  if (*(char *)(*a3 + 5711) < 0)
    operator delete(*(void **)v242);
  *(_OWORD *)v242 = v334;
  *(_QWORD *)(v242 + 16) = v335;
  sub_20F0813A8((uint64_t)&v334);
  v243 = *a3 + 5712;
  if (*(char *)(*a3 + 5735) < 0)
    operator delete(*(void **)v243);
  *(_OWORD *)v243 = v334;
  *(_QWORD *)(v243 + 16) = v335;
  sub_20F08166C((uint64_t)&v334);
  v244 = *a3 + 5736;
  if (*(char *)(*a3 + 5759) < 0)
    operator delete(*(void **)v244);
  *(_OWORD *)v244 = v334;
  *(_QWORD *)(v244 + 16) = v335;
  sub_20F081930((uint64_t)&v334);
  v245 = *a3 + 5760;
  if (*(char *)(*a3 + 5783) < 0)
    operator delete(*(void **)v245);
  *(_OWORD *)v245 = v334;
  *(_QWORD *)(v245 + 16) = v335;
  sub_20F081BF4((uint64_t)&v334);
  v246 = *a3 + 5784;
  if (*(char *)(*a3 + 5807) < 0)
    operator delete(*(void **)v246);
  *(_OWORD *)v246 = v334;
  *(_QWORD *)(v246 + 16) = v335;
  sub_20F081EB8((uint64_t)&v334);
  v247 = *a3 + 5808;
  if (*(char *)(*a3 + 5831) < 0)
    operator delete(*(void **)v247);
  *(_OWORD *)v247 = v334;
  *(_QWORD *)(v247 + 16) = v335;
  sub_20F08217C((uint64_t)&v334);
  v248 = *a3 + 5832;
  if (*(char *)(*a3 + 5855) < 0)
    operator delete(*(void **)v248);
  *(_OWORD *)v248 = v334;
  *(_QWORD *)(v248 + 16) = v335;
  sub_20F082440((uint64_t)&v334);
  v249 = *a3 + 5856;
  if (*(char *)(*a3 + 5879) < 0)
    operator delete(*(void **)v249);
  *(_OWORD *)v249 = v334;
  *(_QWORD *)(v249 + 16) = v335;
  sub_20F082704((uint64_t)&v334);
  v250 = *a3 + 5880;
  if (*(char *)(*a3 + 5903) < 0)
    operator delete(*(void **)v250);
  *(_OWORD *)v250 = v334;
  *(_QWORD *)(v250 + 16) = v335;
  sub_20F0829C8((uint64_t)&v334);
  v251 = *a3 + 5904;
  if (*(char *)(*a3 + 5927) < 0)
    operator delete(*(void **)v251);
  *(_OWORD *)v251 = v334;
  *(_QWORD *)(v251 + 16) = v335;
  sub_20F082C8C((uint64_t)&v334);
  v252 = *a3 + 5928;
  if (*(char *)(*a3 + 5951) < 0)
    operator delete(*(void **)v252);
  *(_OWORD *)v252 = v334;
  *(_QWORD *)(v252 + 16) = v335;
  sub_20F082F50((uint64_t)&v334);
  v253 = *a3 + 5952;
  if (*(char *)(*a3 + 5975) < 0)
    operator delete(*(void **)v253);
  *(_OWORD *)v253 = v334;
  *(_QWORD *)(v253 + 16) = v335;
  sub_20F083214((uint64_t)&v334);
  v254 = *a3 + 5976;
  if (*(char *)(*a3 + 5999) < 0)
    operator delete(*(void **)v254);
  *(_OWORD *)v254 = v334;
  *(_QWORD *)(v254 + 16) = v335;
  sub_20F0834D8((uint64_t)&v334);
  v255 = *a3 + 6000;
  if (*(char *)(*a3 + 6023) < 0)
    operator delete(*(void **)v255);
  *(_OWORD *)v255 = v334;
  *(_QWORD *)(v255 + 16) = v335;
  sub_20F08379C((uint64_t)&v334);
  v256 = *a3 + 6024;
  if (*(char *)(*a3 + 6047) < 0)
    operator delete(*(void **)v256);
  *(_OWORD *)v256 = v334;
  *(_QWORD *)(v256 + 16) = v335;
  sub_20F083A60((uint64_t)&v334);
  v257 = *a3 + 6048;
  if (*(char *)(*a3 + 6071) < 0)
    operator delete(*(void **)v257);
  *(_OWORD *)v257 = v334;
  *(_QWORD *)(v257 + 16) = v335;
  sub_20F083D24((uint64_t)&v334);
  v258 = *a3 + 6072;
  if (*(char *)(*a3 + 6095) < 0)
    operator delete(*(void **)v258);
  *(_OWORD *)v258 = v334;
  *(_QWORD *)(v258 + 16) = v335;
  sub_20F083FE8((uint64_t)&v334);
  v259 = *a3 + 6096;
  if (*(char *)(*a3 + 6119) < 0)
    operator delete(*(void **)v259);
  *(_OWORD *)v259 = v334;
  *(_QWORD *)(v259 + 16) = v335;
  sub_20F0842AC((uint64_t)&v334);
  v260 = *a3 + 6120;
  if (*(char *)(*a3 + 6143) < 0)
    operator delete(*(void **)v260);
  *(_OWORD *)v260 = v334;
  *(_QWORD *)(v260 + 16) = v335;
  sub_20F084570((uint64_t)&v334);
  v261 = *a3 + 6144;
  if (*(char *)(*a3 + 6167) < 0)
    operator delete(*(void **)v261);
  *(_OWORD *)v261 = v334;
  *(_QWORD *)(v261 + 16) = v335;
  sub_20F084834((uint64_t)&v334);
  v262 = *a3 + 6168;
  if (*(char *)(*a3 + 6191) < 0)
    operator delete(*(void **)v262);
  *(_OWORD *)v262 = v334;
  *(_QWORD *)(v262 + 16) = v335;
  sub_20F084AF8((uint64_t)&v334);
  v263 = *a3 + 6192;
  if (*(char *)(*a3 + 6215) < 0)
    operator delete(*(void **)v263);
  *(_OWORD *)v263 = v334;
  *(_QWORD *)(v263 + 16) = v335;
  sub_20F084DBC((uint64_t)&v334);
  v264 = *a3 + 6216;
  if (*(char *)(*a3 + 6239) < 0)
    operator delete(*(void **)v264);
  *(_OWORD *)v264 = v334;
  *(_QWORD *)(v264 + 16) = v335;
  sub_20F085080((uint64_t)&v334);
  v265 = *a3 + 6240;
  if (*(char *)(*a3 + 6263) < 0)
    operator delete(*(void **)v265);
  *(_OWORD *)v265 = v334;
  *(_QWORD *)(v265 + 16) = v335;
  sub_20F085344((uint64_t)&v334);
  v266 = *a3 + 6264;
  if (*(char *)(*a3 + 6287) < 0)
    operator delete(*(void **)v266);
  *(_OWORD *)v266 = v334;
  *(_QWORD *)(v266 + 16) = v335;
  sub_20F085608((uint64_t)&v334);
  v267 = *a3 + 6288;
  if (*(char *)(*a3 + 6311) < 0)
    operator delete(*(void **)v267);
  *(_OWORD *)v267 = v334;
  *(_QWORD *)(v267 + 16) = v335;
  sub_20F0858CC((uint64_t)&v334);
  v268 = *a3 + 6312;
  if (*(char *)(*a3 + 6335) < 0)
    operator delete(*(void **)v268);
  *(_OWORD *)v268 = v334;
  *(_QWORD *)(v268 + 16) = v335;
  sub_20F085B90((uint64_t)&v334);
  v269 = *a3 + 6336;
  if (*(char *)(*a3 + 6359) < 0)
    operator delete(*(void **)v269);
  *(_OWORD *)v269 = v334;
  *(_QWORD *)(v269 + 16) = v335;
  sub_20F085E54((uint64_t)&v334);
  v270 = *a3 + 6360;
  if (*(char *)(*a3 + 6383) < 0)
    operator delete(*(void **)v270);
  *(_OWORD *)v270 = v334;
  *(_QWORD *)(v270 + 16) = v335;
  sub_20F086118((uint64_t)&v334);
  v271 = *a3 + 6384;
  if (*(char *)(*a3 + 6407) < 0)
    operator delete(*(void **)v271);
  *(_OWORD *)v271 = v334;
  *(_QWORD *)(v271 + 16) = v335;
  sub_20F0863DC((uint64_t)&v334);
  v272 = *a3 + 6408;
  if (*(char *)(*a3 + 6431) < 0)
    operator delete(*(void **)v272);
  *(_OWORD *)v272 = v334;
  *(_QWORD *)(v272 + 16) = v335;
  sub_20F0866A0((uint64_t)&v334);
  v273 = *a3 + 6432;
  if (*(char *)(*a3 + 6455) < 0)
    operator delete(*(void **)v273);
  *(_OWORD *)v273 = v334;
  *(_QWORD *)(v273 + 16) = v335;
  sub_20F086964((uint64_t)&v334);
  v274 = *a3 + 6456;
  if (*(char *)(*a3 + 6479) < 0)
    operator delete(*(void **)v274);
  *(_OWORD *)v274 = v334;
  *(_QWORD *)(v274 + 16) = v335;
  sub_20F086C28((uint64_t)&v334);
  v275 = *a3 + 6480;
  if (*(char *)(*a3 + 6503) < 0)
    operator delete(*(void **)v275);
  *(_OWORD *)v275 = v334;
  *(_QWORD *)(v275 + 16) = v335;
  sub_20F086EEC((uint64_t)&v334);
  v276 = *a3 + 6504;
  if (*(char *)(*a3 + 6527) < 0)
    operator delete(*(void **)v276);
  *(_OWORD *)v276 = v334;
  *(_QWORD *)(v276 + 16) = v335;
  sub_20F0871B0((uint64_t)&v334);
  v277 = *a3 + 6528;
  if (*(char *)(*a3 + 6551) < 0)
    operator delete(*(void **)v277);
  *(_OWORD *)v277 = v334;
  *(_QWORD *)(v277 + 16) = v335;
  sub_20F087474((uint64_t)&v334);
  v278 = *a3 + 6552;
  if (*(char *)(*a3 + 6575) < 0)
    operator delete(*(void **)v278);
  *(_OWORD *)v278 = v334;
  *(_QWORD *)(v278 + 16) = v335;
  sub_20F087738((uint64_t)&v334);
  v279 = *a3 + 6576;
  if (*(char *)(*a3 + 6599) < 0)
    operator delete(*(void **)v279);
  *(_OWORD *)v279 = v334;
  *(_QWORD *)(v279 + 16) = v335;
  sub_20F0879FC((uint64_t)&v334);
  v280 = *a3 + 6600;
  if (*(char *)(*a3 + 6623) < 0)
    operator delete(*(void **)v280);
  *(_OWORD *)v280 = v334;
  *(_QWORD *)(v280 + 16) = v335;
  sub_20F087CC0((uint64_t)&v334);
  v281 = *a3 + 6624;
  if (*(char *)(*a3 + 6647) < 0)
    operator delete(*(void **)v281);
  *(_OWORD *)v281 = v334;
  *(_QWORD *)(v281 + 16) = v335;
  sub_20F087F84((uint64_t)&v334);
  v282 = *a3 + 6648;
  if (*(char *)(*a3 + 6671) < 0)
    operator delete(*(void **)v282);
  *(_OWORD *)v282 = v334;
  *(_QWORD *)(v282 + 16) = v335;
  sub_20F088248((uint64_t)&v334);
  v283 = *a3 + 6672;
  if (*(char *)(*a3 + 6695) < 0)
    operator delete(*(void **)v283);
  *(_OWORD *)v283 = v334;
  *(_QWORD *)(v283 + 16) = v335;
  sub_20F08850C((uint64_t)&v334);
  v284 = *a3 + 6696;
  if (*(char *)(*a3 + 6719) < 0)
    operator delete(*(void **)v284);
  *(_OWORD *)v284 = v334;
  *(_QWORD *)(v284 + 16) = v335;
  sub_20F0887D0((uint64_t)&v334);
  v285 = *a3 + 6720;
  if (*(char *)(*a3 + 6743) < 0)
    operator delete(*(void **)v285);
  *(_OWORD *)v285 = v334;
  *(_QWORD *)(v285 + 16) = v335;
  sub_20F088A94((uint64_t)&v334);
  v286 = *a3 + 6744;
  if (*(char *)(*a3 + 6767) < 0)
    operator delete(*(void **)v286);
  *(_OWORD *)v286 = v334;
  *(_QWORD *)(v286 + 16) = v335;
  sub_20F088D58((uint64_t)&v334);
  v287 = *a3 + 6768;
  if (*(char *)(*a3 + 6791) < 0)
    operator delete(*(void **)v287);
  *(_OWORD *)v287 = v334;
  *(_QWORD *)(v287 + 16) = v335;
  sub_20F08901C((uint64_t)&v334);
  v288 = *a3 + 6792;
  if (*(char *)(*a3 + 6815) < 0)
    operator delete(*(void **)v288);
  *(_OWORD *)v288 = v334;
  *(_QWORD *)(v288 + 16) = v335;
  sub_20F0892E0((uint64_t)&v334);
  v289 = *a3 + 6816;
  if (*(char *)(*a3 + 6839) < 0)
    operator delete(*(void **)v289);
  *(_OWORD *)v289 = v334;
  *(_QWORD *)(v289 + 16) = v335;
  sub_20F0895A4((uint64_t)&v334);
  v290 = *a3 + 6840;
  if (*(char *)(*a3 + 6863) < 0)
    operator delete(*(void **)v290);
  *(_OWORD *)v290 = v334;
  *(_QWORD *)(v290 + 16) = v335;
  sub_20F089868((uint64_t)&v334);
  v291 = *a3 + 6864;
  if (*(char *)(*a3 + 6887) < 0)
    operator delete(*(void **)v291);
  *(_OWORD *)v291 = v334;
  *(_QWORD *)(v291 + 16) = v335;
  sub_20F089B2C((uint64_t)&v334);
  v292 = *a3 + 6888;
  if (*(char *)(*a3 + 6911) < 0)
    operator delete(*(void **)v292);
  *(_OWORD *)v292 = v334;
  *(_QWORD *)(v292 + 16) = v335;
  sub_20F089DF0((uint64_t)&v334);
  v293 = *a3 + 6912;
  if (*(char *)(*a3 + 6935) < 0)
    operator delete(*(void **)v293);
  *(_OWORD *)v293 = v334;
  *(_QWORD *)(v293 + 16) = v335;
  sub_20F08A0B4((uint64_t)&v334);
  v294 = *a3 + 6936;
  if (*(char *)(*a3 + 6959) < 0)
    operator delete(*(void **)v294);
  *(_OWORD *)v294 = v334;
  *(_QWORD *)(v294 + 16) = v335;
  sub_20F08A378((uint64_t)&v334);
  v295 = *a3 + 6960;
  if (*(char *)(*a3 + 6983) < 0)
    operator delete(*(void **)v295);
  *(_OWORD *)v295 = v334;
  *(_QWORD *)(v295 + 16) = v335;
  sub_20F08A63C((uint64_t)&v334);
  v296 = *a3 + 6984;
  if (*(char *)(*a3 + 7007) < 0)
    operator delete(*(void **)v296);
  *(_OWORD *)v296 = v334;
  *(_QWORD *)(v296 + 16) = v335;
  sub_20F08A900((uint64_t)&v334);
  v297 = *a3 + 7008;
  if (*(char *)(*a3 + 7031) < 0)
    operator delete(*(void **)v297);
  *(_OWORD *)v297 = v334;
  *(_QWORD *)(v297 + 16) = v335;
  sub_20F08ABC4((uint64_t)&v334);
  v298 = *a3 + 7032;
  if (*(char *)(*a3 + 7055) < 0)
    operator delete(*(void **)v298);
  *(_OWORD *)v298 = v334;
  *(_QWORD *)(v298 + 16) = v335;
  sub_20F08AE88((uint64_t)&v334);
  v299 = *a3 + 7056;
  if (*(char *)(*a3 + 7079) < 0)
    operator delete(*(void **)v299);
  *(_OWORD *)v299 = v334;
  *(_QWORD *)(v299 + 16) = v335;
  sub_20F08B14C((uint64_t)&v334);
  v300 = *a3 + 7080;
  if (*(char *)(*a3 + 7103) < 0)
    operator delete(*(void **)v300);
  *(_OWORD *)v300 = v334;
  *(_QWORD *)(v300 + 16) = v335;
  sub_20F08B410((uint64_t)&v334);
  v301 = *a3 + 7104;
  if (*(char *)(*a3 + 7127) < 0)
    operator delete(*(void **)v301);
  *(_OWORD *)v301 = v334;
  *(_QWORD *)(v301 + 16) = v335;
  sub_20F08B6D4((uint64_t)&v334);
  v302 = *a3 + 7128;
  if (*(char *)(*a3 + 7151) < 0)
    operator delete(*(void **)v302);
  *(_OWORD *)v302 = v334;
  *(_QWORD *)(v302 + 16) = v335;
  sub_20F08B998((uint64_t)&v334);
  v303 = *a3 + 7152;
  if (*(char *)(*a3 + 7175) < 0)
    operator delete(*(void **)v303);
  *(_OWORD *)v303 = v334;
  *(_QWORD *)(v303 + 16) = v335;
  sub_20F08BC5C((uint64_t)&v334);
  v304 = *a3 + 7176;
  if (*(char *)(*a3 + 7199) < 0)
    operator delete(*(void **)v304);
  *(_OWORD *)v304 = v334;
  *(_QWORD *)(v304 + 16) = v335;
  sub_20F08BF20((uint64_t)&v334);
  v305 = *a3 + 7200;
  if (*(char *)(*a3 + 7223) < 0)
    operator delete(*(void **)v305);
  *(_OWORD *)v305 = v334;
  *(_QWORD *)(v305 + 16) = v335;
  sub_20F08C1E4((uint64_t)&v334);
  v306 = *a3 + 7224;
  if (*(char *)(*a3 + 7247) < 0)
    operator delete(*(void **)v306);
  *(_OWORD *)v306 = v334;
  *(_QWORD *)(v306 + 16) = v335;
  sub_20F08C4A8((uint64_t)&v334);
  v307 = *a3 + 7248;
  if (*(char *)(*a3 + 7271) < 0)
    operator delete(*(void **)v307);
  *(_OWORD *)v307 = v334;
  *(_QWORD *)(v307 + 16) = v335;
  sub_20F08C76C((uint64_t)&v334);
  v308 = *a3 + 7272;
  if (*(char *)(*a3 + 7295) < 0)
    operator delete(*(void **)v308);
  *(_OWORD *)v308 = v334;
  *(_QWORD *)(v308 + 16) = v335;
  sub_20F08CA30((uint64_t)&v334);
  v309 = *a3 + 7296;
  if (*(char *)(*a3 + 7319) < 0)
    operator delete(*(void **)v309);
  *(_OWORD *)v309 = v334;
  *(_QWORD *)(v309 + 16) = v335;
  sub_20F08CCF4((uint64_t)&v334);
  v310 = *a3 + 7320;
  if (*(char *)(*a3 + 7343) < 0)
    operator delete(*(void **)v310);
  *(_OWORD *)v310 = v334;
  *(_QWORD *)(v310 + 16) = v335;
  sub_20F08CFB8((uint64_t)&v334);
  v311 = *a3 + 7344;
  if (*(char *)(*a3 + 7367) < 0)
    operator delete(*(void **)v311);
  *(_OWORD *)v311 = v334;
  *(_QWORD *)(v311 + 16) = v335;
  sub_20F08D27C((uint64_t)&v334);
  v312 = *a3 + 7368;
  if (*(char *)(*a3 + 7391) < 0)
    operator delete(*(void **)v312);
  *(_OWORD *)v312 = v334;
  *(_QWORD *)(v312 + 16) = v335;
  sub_20F08D540((uint64_t)&v334);
  v313 = *a3 + 7392;
  if (*(char *)(*a3 + 7415) < 0)
    operator delete(*(void **)v313);
  *(_OWORD *)v313 = v334;
  *(_QWORD *)(v313 + 16) = v335;
  sub_20F08D804((uint64_t)&v334);
  v314 = *a3 + 7416;
  if (*(char *)(*a3 + 7439) < 0)
    operator delete(*(void **)v314);
  *(_OWORD *)v314 = v334;
  *(_QWORD *)(v314 + 16) = v335;
  sub_20F08DAC8((uint64_t)&v334);
  v315 = *a3 + 7440;
  if (*(char *)(*a3 + 7463) < 0)
    operator delete(*(void **)v315);
  *(_OWORD *)v315 = v334;
  *(_QWORD *)(v315 + 16) = v335;
  sub_20F08DD8C((uint64_t)&v334);
  v316 = *a3 + 7464;
  if (*(char *)(*a3 + 7487) < 0)
    operator delete(*(void **)v316);
  *(_OWORD *)v316 = v334;
  *(_QWORD *)(v316 + 16) = v335;
  sub_20F08E050((uint64_t)&v334);
  v317 = *a3 + 7488;
  if (*(char *)(*a3 + 7511) < 0)
    operator delete(*(void **)v317);
  *(_OWORD *)v317 = v334;
  *(_QWORD *)(v317 + 16) = v335;
  sub_20F08E314((uint64_t)&v334);
  v318 = *a3 + 7512;
  if (*(char *)(*a3 + 7535) < 0)
    operator delete(*(void **)v318);
  *(_OWORD *)v318 = v334;
  *(_QWORD *)(v318 + 16) = v335;
  sub_20F08E5D8((uint64_t)&v334);
  v319 = *a3 + 7536;
  if (*(char *)(*a3 + 7559) < 0)
    operator delete(*(void **)v319);
  *(_OWORD *)v319 = v334;
  *(_QWORD *)(v319 + 16) = v335;
  sub_20F08E89C((uint64_t)&v334);
  v320 = *a3 + 7560;
  if (*(char *)(*a3 + 7583) < 0)
    operator delete(*(void **)v320);
  *(_OWORD *)v320 = v334;
  *(_QWORD *)(v320 + 16) = v335;
  sub_20F08EB60((uint64_t)&v334);
  v321 = *a3 + 7584;
  if (*(char *)(*a3 + 7607) < 0)
    operator delete(*(void **)v321);
  *(_OWORD *)v321 = v334;
  *(_QWORD *)(v321 + 16) = v335;
  sub_20F08EE24((uint64_t)&v334);
  v322 = *a3 + 7608;
  if (*(char *)(*a3 + 7631) < 0)
    operator delete(*(void **)v322);
  *(_OWORD *)v322 = v334;
  *(_QWORD *)(v322 + 16) = v335;
  sub_20F08F0E8((uint64_t)&v334);
  v323 = *a3 + 7632;
  if (*(char *)(*a3 + 7655) < 0)
    operator delete(*(void **)v323);
  *(_OWORD *)v323 = v334;
  *(_QWORD *)(v323 + 16) = v335;
  sub_20F08F3AC((uint64_t)&v334);
  v324 = *a3 + 7656;
  if (*(char *)(*a3 + 7679) < 0)
    operator delete(*(void **)v324);
  *(_OWORD *)v324 = v334;
  *(_QWORD *)(v324 + 16) = v335;
  sub_20F08F670((uint64_t)&v334);
  v325 = *a3 + 7680;
  if (*(char *)(*a3 + 7703) < 0)
    operator delete(*(void **)v325);
  *(_OWORD *)v325 = v334;
  *(_QWORD *)(v325 + 16) = v335;
  sub_20F08F934((uint64_t)&v334);
  v326 = *a3 + 7704;
  if (*(char *)(*a3 + 7727) < 0)
    operator delete(*(void **)v326);
  *(_OWORD *)v326 = v334;
  *(_QWORD *)(v326 + 16) = v335;
  sub_20F08FBF8((uint64_t)&v334);
  v327 = *a3 + 7728;
  if (*(char *)(*a3 + 7751) < 0)
    operator delete(*(void **)v327);
  *(_OWORD *)v327 = v334;
  *(_QWORD *)(v327 + 16) = v335;
  sub_20F08FEBC((uint64_t)&v334);
  v328 = *a3 + 7752;
  if (*(char *)(*a3 + 7775) < 0)
    operator delete(*(void **)v328);
  *(_OWORD *)v328 = v334;
  *(_QWORD *)(v328 + 16) = v335;
  sub_20F090180((uint64_t)&v334);
  v329 = *a3 + 7776;
  if (*(char *)(*a3 + 7799) < 0)
    operator delete(*(void **)v329);
  *(_OWORD *)v329 = v334;
  *(_QWORD *)(v329 + 16) = v335;
  sub_20F090444((uint64_t)&v334);
  v330 = *a3 + 7800;
  if (*(char *)(*a3 + 7823) < 0)
    operator delete(*(void **)v330);
  *(_OWORD *)v330 = v334;
  *(_QWORD *)(v330 + 16) = v335;
  sub_20F090708((uint64_t)&v334);
  v331 = *a3;
  v332 = *a3 + 7824;
  if (*(char *)(v331 + 7847) < 0)
    operator delete(*(void **)v332);
  result = *(double *)&v334;
  *(_OWORD *)v332 = v334;
  *(_QWORD *)(v332 + 16) = v335;
  return result;
}

void sub_20F058170(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05833C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05830C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F058328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05833C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51788);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51788))
    return &stru_254A51770;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kOldestStateID]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51770);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51770, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51788);
  return &stru_254A51770;
}

void sub_20F0583F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51788);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51788);
  _Unwind_Resume(a1);
}

void sub_20F058434(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F058600();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0585D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0585EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F058600()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A517A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A517A8))
    return &stru_254A51790;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kHealthEstimate]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51790);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51790, &dword_20E81F000);
  __cxa_guard_release(&qword_254A517A8);
  return &stru_254A51790;
}

void sub_20F0586B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A517A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A517A8);
  _Unwind_Resume(a1);
}

void sub_20F0586F8(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0588C4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F058894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0588B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0588C4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A517C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A517C8))
    return &stru_254A517B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kAccelBiasInfo]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A517B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A517B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A517C8);
  return &stru_254A517B0;
}

void sub_20F05897C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A517C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A517C8);
  _Unwind_Resume(a1);
}

void sub_20F0589BC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F058B88();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F058B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F058B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F058B88()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A517E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A517E8))
    return &stru_254A517D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kGyrolBiasInfo]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A517D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A517D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A517E8);
  return &stru_254A517D0;
}

void sub_20F058C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A517E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A517E8);
  _Unwind_Resume(a1);
}

void sub_20F058C80(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F058E4C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F058E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F058E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F058E4C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51808);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51808))
    return &stru_254A517F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kInlierTrackPercentage]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A517F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A517F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51808);
  return &stru_254A517F0;
}

void sub_20F058F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51808);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51808);
  _Unwind_Resume(a1);
}

void sub_20F058F44(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F059110();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0590E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0590FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F059110()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51828);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51828))
    return &stru_254A51810;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kShortTrackPercentage]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51810);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51810, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51828);
  return &stru_254A51810;
}

void sub_20F0591C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51828);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51828);
  _Unwind_Resume(a1);
}

void sub_20F059208(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F0593D4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F0593A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F0593C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F0593D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51848);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51848))
    return &stru_254A51830;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRatioLargeResiduals]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51830);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51830, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51848);
  return &stru_254A51830;
}

void sub_20F05948C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51848);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51848);
  _Unwind_Resume(a1);
}

void sub_20F0594CC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F059698();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F059668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F059684(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F059698()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51868);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51868))
    return &stru_254A51850;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRatioSmallResiduals]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51850);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51850, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51868);
  return &stru_254A51850;
}

void sub_20F059750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51868);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51868);
  _Unwind_Resume(a1);
}

void sub_20F059790(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05995C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05992C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F059948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05995C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51888);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51888))
    return &stru_254A51870;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kStepSize]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51870);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51870, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51888);
  return &stru_254A51870;
}

void sub_20F059A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51888);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51888);
  _Unwind_Resume(a1);
}

void sub_20F059A54(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F059C20();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F059BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F059C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F059C20()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A518A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A518A8))
    return &stru_254A51890;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kOldestStateIsStationary]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51890);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51890, &dword_20E81F000);
  __cxa_guard_release(&qword_254A518A8);
  return &stru_254A51890;
}

void sub_20F059CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A518A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A518A8);
  _Unwind_Resume(a1);
}

void sub_20F059D18(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F059EE4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F059EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F059ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F059EE4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A518C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A518C8))
    return &stru_254A518B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kOldestStateVelocity]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A518B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A518B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A518C8);
  return &stru_254A518B0;
}

void sub_20F059F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A518C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A518C8);
  _Unwind_Resume(a1);
}

void sub_20F059FDC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05A1A8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05A178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05A194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05A1A8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A518E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A518E8))
    return &stru_254A518D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kOldestStateStationaryVelocity]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A518D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A518D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A518E8);
  return &stru_254A518D0;
}

void sub_20F05A260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A518E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A518E8);
  _Unwind_Resume(a1);
}

void sub_20F05A2A0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05A46C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05A43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05A458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05A46C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51908);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51908))
    return &stru_254A518F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kOldestStateTimestamp]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A518F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A518F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51908);
  return &stru_254A518F0;
}

void sub_20F05A524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51908);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51908);
  _Unwind_Resume(a1);
}

void sub_20F05A564(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05A730();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05A700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05A71C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05A730()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51928);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51928))
    return &stru_254A51910;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTotalNumberOfResiduals]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51910);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51910, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51928);
  return &stru_254A51910;
}

void sub_20F05A7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51928);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51928);
  _Unwind_Resume(a1);
}

void sub_20F05A828(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05A9F4();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05A9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05A9E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05A9F4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51948);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51948))
    return &stru_254A51930;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTotalNumberOfTracks]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51930);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51930, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51948);
  return &stru_254A51930;
}

void sub_20F05AAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51948);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51948);
  _Unwind_Resume(a1);
}

void sub_20F05AAEC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05ACB8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05AC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05ACA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05ACB8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51968);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51968))
    return &stru_254A51950;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kTotalFrontendTrackPoolSize]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51950);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51950, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51968);
  return &stru_254A51950;
}

void sub_20F05AD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51968);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51968);
  _Unwind_Resume(a1);
}

void sub_20F05ADB0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05AF7C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05AF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05AF68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05AF7C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51988);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51988))
    return &stru_254A51970;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfInliersTracksInLatestState]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51970);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51970, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51988);
  return &stru_254A51970;
}

void sub_20F05B034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51988);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51988);
  _Unwind_Resume(a1);
}

void sub_20F05B074(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05B240();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05B210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05B22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05B240()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A519A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A519A8))
    return &stru_254A51990;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfInliersMapConstraintsInLatestMapTrackingState]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51990);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51990, &dword_20E81F000);
  __cxa_guard_release(&qword_254A519A8);
  return &stru_254A51990;
}

void sub_20F05B2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A519A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A519A8);
  _Unwind_Resume(a1);
}

void sub_20F05B338(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05B504();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05B4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05B4F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05B504()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A519C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A519C8))
    return &stru_254A519B0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfInliersMapConstraintsToConstrainLatestState]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A519B0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A519B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A519C8);
  return &stru_254A519B0;
}

void sub_20F05B5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A519C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A519C8);
  _Unwind_Resume(a1);
}

void sub_20F05B5FC(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05B7C8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05B798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05B7B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05B7C8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A519E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A519E8))
    return &stru_254A519D0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kOldestStateRotationRate]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A519D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A519D0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A519E8);
  return &stru_254A519D0;
}

void sub_20F05B880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A519E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A519E8);
  _Unwind_Resume(a1);
}

void sub_20F05B8C0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05BA8C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05BA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05BA78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05BA8C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51A08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51A08))
    return &stru_254A519F0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kLatestStateTimestamp]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A519F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A519F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51A08);
  return &stru_254A519F0;
}

void sub_20F05BB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51A08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51A08);
  _Unwind_Resume(a1);
}

void sub_20F05BB84(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05BD50();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05BD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05BD3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05BD50()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51A28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51A28))
    return &stru_254A51A10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kLatestRelocalizationTimestamp]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51A10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51A10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51A28);
  return &stru_254A51A10;
}

void sub_20F05BE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51A28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51A28);
  _Unwind_Resume(a1);
}

void sub_20F05BE48(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05C014();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05BFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05C000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05C014()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51A48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51A48))
    return &stru_254A51A30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kStateCorrectionUpdateSucceeded]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51A30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51A30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51A48);
  return &stru_254A51A30;
}

void sub_20F05C0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51A48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51A48);
  _Unwind_Resume(a1);
}

void sub_20F05C10C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05C2D8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05C2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05C2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05C2D8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51A68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51A68))
    return &stru_254A51A50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kDuringRelocalization]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51A50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51A50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51A68);
  return &stru_254A51A50;
}

void sub_20F05C390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51A68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51A68);
  _Unwind_Resume(a1);
}

void sub_20F05C3D0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05C59C();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05C56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05C588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05C59C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51A88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51A88))
    return &stru_254A51A70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kInplaceRelocalizationCallbackCounts]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51A70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51A70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51A88);
  return &stru_254A51A70;
}

void sub_20F05C654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51A88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51A88);
  _Unwind_Resume(a1);
}

void sub_20F05C694(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05C860();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05C830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05C84C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05C860()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51AA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51AA8))
    return &stru_254A51A90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kHasStateCorrectionRequest]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51A90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51A90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51AA8);
  return &stru_254A51A90;
}

void sub_20F05C918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51AA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51AA8);
  _Unwind_Resume(a1);
}

void sub_20F05C958(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05CB24();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05CAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05CB10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05CB24()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51AC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51AC8))
    return &stru_254A51AB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kStateCorrectionAppliedOnTracker]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51AB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51AB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51AC8);
  return &stru_254A51AB0;
}

void sub_20F05CBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51AC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51AC8);
  _Unwind_Resume(a1);
}

void sub_20F05CC1C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05CDE8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05CDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05CDD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05CDE8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51AE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51AE8))
    return &stru_254A51AD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kStateCorrectionQueryStateID]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51AD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51AD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51AE8);
  return &stru_254A51AD0;
}

void sub_20F05CEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51AE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51AE8);
  _Unwind_Resume(a1);
}

void sub_20F05CEE0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05D0AC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05D07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05D098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05D0AC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51B08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51B08))
    return &stru_254A51AF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfInlierMapMeasurementsWithFreeMapTrackingState]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51AF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51AF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51B08);
  return &stru_254A51AF0;
}

void sub_20F05D164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51B08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51B08);
  _Unwind_Resume(a1);
}

void sub_20F05D1A4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05D370();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05D340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05D35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05D370()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51B28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51B28))
    return &stru_254A51B10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfAccumulatedReinitializations]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51B10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51B10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51B28);
  return &stru_254A51B10;
}

void sub_20F05D428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51B28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51B28);
  _Unwind_Resume(a1);
}

void sub_20F05D468(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05D634();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05D604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05D620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05D634()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51B48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51B48))
    return &stru_254A51B30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfAccumulatedReinitRecoveries]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51B30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51B30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51B48);
  return &stru_254A51B30;
}

void sub_20F05D6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51B48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51B48);
  _Unwind_Resume(a1);
}

void sub_20F05D72C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05D8F8();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05D8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05D8E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05D8F8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51B68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51B68))
    return &stru_254A51B50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::Stationary]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51B50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51B50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51B68);
  return &stru_254A51B50;
}

void sub_20F05D9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51B68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51B68);
  _Unwind_Resume(a1);
}

void sub_20F05D9F0(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05DBBC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05DB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05DBA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05DBBC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51B88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51B88))
    return &stru_254A51B70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kLatestMapTrackingStateUsedEpipolarMapTracking]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51B70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51B70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51B88);
  return &stru_254A51B70;
}

void sub_20F05DC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51B88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51B88);
  _Unwind_Resume(a1);
}

void sub_20F05DCB4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05DE80();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05DE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05DE6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05DE80()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51BA8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51BA8))
    return &stru_254A51B90;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfLatestMapTrackingState2D3DMapTrackingCandidates]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51B90);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51B90, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51BA8);
  return &stru_254A51B90;
}

void sub_20F05DF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51BA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51BA8);
  _Unwind_Resume(a1);
}

void sub_20F05DF78(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05E144();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05E114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05E130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05E144()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51BC8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51BC8))
    return &stru_254A51BB0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kNumberOfLatestMapTrackingState2D3DMapTrackingMatches]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51BB0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51BB0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51BC8);
  return &stru_254A51BB0;
}

void sub_20F05E1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51BC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51BC8);
  _Unwind_Resume(a1);
}

void sub_20F05E23C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05E408();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05E3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05E3F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05E408()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51BE8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51BE8))
    return &stru_254A51BD0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIsInitialized]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51BD0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51BD0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51BE8);
  return &stru_254A51BD0;
}

void sub_20F05E4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51BE8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51BE8);
  _Unwind_Resume(a1);
}

void sub_20F05E500(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05E6CC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05E69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05E6B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05E6CC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51C08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51C08))
    return &stru_254A51BF0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIsInitializationFinished]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51BF0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51BF0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51C08);
  return &stru_254A51BF0;
}

void sub_20F05E784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51C08);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51C08);
  _Unwind_Resume(a1);
}

void sub_20F05E7C4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05E990();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05E960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05E97C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05E990()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51C28);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51C28))
    return &stru_254A51C10;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kOdometryTrackingState]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51C10);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51C10, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51C28);
  return &stru_254A51C10;
}

void sub_20F05EA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51C28);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51C28);
  _Unwind_Resume(a1);
}

void sub_20F05EA88(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05EC54();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05EC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05EC40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05EC54()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51C48);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51C48))
    return &stru_254A51C30;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kIsNominalTrackingState]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51C30);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51C30, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51C48);
  return &stru_254A51C30;
}

void sub_20F05ED0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51C48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51C48);
  _Unwind_Resume(a1);
}

void sub_20F05ED4C(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05EF18();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05EEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05EF04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05EF18()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51C68);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51C68))
    return &stru_254A51C50;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRatioOfVIOProcessedFramesInAdaptiveVIO]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51C50);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51C50, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51C68);
  return &stru_254A51C50;
}

void sub_20F05EFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51C68);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51C68);
  _Unwind_Resume(a1);
}

void sub_20F05F010(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05F1DC();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

void sub_20F05F1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F05F1C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E89FB98((void **)va);
  _Unwind_Resume(a1);
}

std::string *sub_20F05F1DC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A51C88);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A51C88))
    return &stru_254A51C70;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::vio::batch_least_squares::MetricName::kRatioOfFramesWtBadIMUMeasurementsInAdaptiveVIO]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A51C70);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A51C70, &dword_20E81F000);
  __cxa_guard_release(&qword_254A51C88);
  return &stru_254A51C70;
}

void sub_20F05F294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A51C88);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A51C88);
  _Unwind_Resume(a1);
}

void sub_20F05F2D4(uint64_t a1@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  uint64_t v4;
  __int128 v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  char v10;
  void **v11;
  void *v12;
  int v13;
  void *__p;
  void **v16;
  void *__dst[2];
  uint64_t v18;

  v2 = sub_20F05F4A0();
  size = v2->__r_.__value_.__l.__size_;
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v4 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v4 = size;
  }
  sub_20E9E507C((char *)v2, v4, "::", 2, 0, (uint64_t)&__p);
  if (*((char *)v16 - 1) < 0)
  {
    sub_20E860C04(__dst, *(v16 - 3), (unint64_t)*(v16 - 2));
  }
  else
  {
    v5 = *(_OWORD *)(v16 - 3);
    v18 = (uint64_t)*(v16 - 1);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void **)__p;
  if (__p)
  {
    v7 = v16;
    v8 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v16 = v6;
    operator delete(v8);
  }
  v9 = (void *)HIBYTE(v18);
  v10 = HIBYTE(v18);
  if (v18 < 0)
    v9 = __dst[1];
  if (v9 != (void *)10)
    goto LABEL_24;
  v11 = (void **)__dst[0];
  if (v18 >= 0)
    v11 = __dst;
  v12 = *v11;
  v13 = *((unsigned __int16 *)v11 + 4);
  if (v12 == (void *)0x616E6F6974617453 && v13 == 31090)
  {
    *(_BYTE *)(a1 + 23) = 11;
    strcpy((char *)a1, "Stationary.");
    if (v10 < 0)
      goto LABEL_30;
  }
  else
  {
LABEL_24:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__dst;
      *(_QWORD *)(a1 + 16) = v18;
      return;
    }
    sub_20E860C04((_BYTE *)a1, __dst[0], (unint64_t)__dst[1]);
    if (v18 < 0)
LABEL_30:
      operator delete(__dst[0]);
  }
}

